/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={"./node_modules/@tannin/compile/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@tannin/postfix/index.js"),s=n("./node_modules/@tannin/evaluate/index.js");function r(e){var t=(0,o.default)(e);return function(e){return(0,s.default)(t,e)}}},"./node_modules/@tannin/evaluate/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o={"!":function(e){return!e},"*":function(e,t){return e*t},"/":function(e,t){return e/t},"%":function(e,t){return e%t},"+":function(e,t){return e+t},"-":function(e,t){return e-t},"<":function(e,t){return e<t},"<=":function(e,t){return e<=t},">":function(e,t){return e>t},">=":function(e,t){return e>=t},"==":function(e,t){return e===t},"!=":function(e,t){return e!==t},"&&":function(e,t){return e&&t},"||":function(e,t){return e||t},"?:":function(e,t,n){if(e)throw t;return n}};function s(e,t){var n,s,r,i,a,l,c=[];for(n=0;n<e.length;n++){if(a=e[n],i=o[a]){for(s=i.length,r=Array(s);s--;)r[s]=c.pop();try{l=i.apply(null,r)}catch(e){return e}}else l=t.hasOwnProperty(a)?t[a]:+a;c.push(l)}return c[0]}},"./node_modules/@tannin/plural-forms/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/@tannin/compile/index.js");function s(e){var t=(0,o.default)(e);return function(e){return+t({n:e})}}},"./node_modules/@tannin/postfix/index.js":(e,t,n)=>{"use strict";var o,s,r,i;function a(e){for(var t,n,a,l,c=[],u=[];t=e.match(i);){for(n=t[0],(a=e.substr(0,t.index).trim())&&c.push(a);l=u.pop();){if(r[n]){if(r[n][0]===l){n=r[n][1]||n;break}}else if(s.indexOf(l)>=0||o[l]<o[n]){u.push(l);break}c.push(l)}r[n]||u.push(n),e=e.substr(t.index+n.length)}return(e=e.trim())&&c.push(e),c.concat(u.reverse())}n.r(t),n.d(t,{default:()=>a}),o={"(":9,"!":8,"*":7,"/":7,"%":7,"+":6,"-":6,"<":5,"<=":5,">":5,">=":5,"==":4,"!=":4,"&&":3,"||":2,"?":1,"?:":1},s=["(","?"],r={")":["("],":":["?","?:"]},i=/<=|>=|==|!=|&&|\|\||\?:|\(|!|\*|\/|%|\+|-|<|>|\?|\)|:/},"./node_modules/@vue/devtools-api/lib/esm/const.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{HOOK_PLUGIN_SETTINGS_SET:()=>s,HOOK_SETUP:()=>o});const o="devtools-plugin:setup",s="plugin:settings:set"},"./node_modules/@vue/devtools-api/lib/esm/env.js":(e,t,n)=>{"use strict";function o(){return s().__VUE_DEVTOOLS_GLOBAL_HOOK__}function s(){return"undefined"!=typeof navigator&&"undefined"!=typeof window?window:void 0!==n.g?n.g:{}}n.r(t),n.d(t,{getDevtoolsGlobalHook:()=>o,getTarget:()=>s,isProxyAvailable:()=>r});const r="function"==typeof Proxy},"./node_modules/@vue/devtools-api/lib/esm/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isPerformanceSupported:()=>i.isPerformanceSupported,now:()=>i.now,setupDevtoolsPlugin:()=>a});var o=n("./node_modules/@vue/devtools-api/lib/esm/env.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/const.js"),r=n("./node_modules/@vue/devtools-api/lib/esm/proxy.js"),i=n("./node_modules/@vue/devtools-api/lib/esm/time.js");function a(e,t){const n=e,i=(0,o.getTarget)(),a=(0,o.getDevtoolsGlobalHook)(),l=o.isProxyAvailable&&n.enableEarlyProxy;if(!a||!i.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__&&l){const e=l?new r.ApiProxy(n,a):null;(i.__VUE_DEVTOOLS_PLUGINS__=i.__VUE_DEVTOOLS_PLUGINS__||[]).push({pluginDescriptor:n,setupFn:t,proxy:e}),e&&t(e.proxiedTarget)}else a.emit(s.HOOK_SETUP,e,t)}},"./node_modules/@vue/devtools-api/lib/esm/proxy.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{ApiProxy:()=>r});var o=n("./node_modules/@vue/devtools-api/lib/esm/const.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/time.js");class r{constructor(e,t){this.target=null,this.targetQueue=[],this.onQueue=[],this.plugin=e,this.hook=t;const n={};if(e.settings)for(const t in e.settings){const o=e.settings[t];n[t]=o.defaultValue}const r=`__vue-devtools-plugin-settings__${e.id}`;let i=Object.assign({},n);try{const e=localStorage.getItem(r),t=JSON.parse(e);Object.assign(i,t)}catch(e){}this.fallbacks={getSettings:()=>i,setSettings(e){try{localStorage.setItem(r,JSON.stringify(e))}catch(e){}i=e},now:()=>(0,s.now)()},t&&t.on(o.HOOK_PLUGIN_SETTINGS_SET,((e,t)=>{e===this.plugin.id&&this.fallbacks.setSettings(t)})),this.proxiedOn=new Proxy({},{get:(e,t)=>this.target?this.target.on[t]:(...e)=>{this.onQueue.push({method:t,args:e})}}),this.proxiedTarget=new Proxy({},{get:(e,t)=>this.target?this.target[t]:"on"===t?this.proxiedOn:Object.keys(this.fallbacks).includes(t)?(...e)=>(this.targetQueue.push({method:t,args:e,resolve:()=>{}}),this.fallbacks[t](...e)):(...e)=>new Promise((n=>{this.targetQueue.push({method:t,args:e,resolve:n})}))})}async setRealTarget(e){this.target=e;for(const e of this.onQueue)this.target.on[e.method](...e.args);for(const e of this.targetQueue)e.resolve(await this.target[e.method](...e.args))}}},"./node_modules/@vue/devtools-api/lib/esm/time.js":(e,t,n)=>{"use strict";let o,s;function r(){var e;return void 0!==o||("undefined"!=typeof window&&window.performance?(o=!0,s=window.performance):void 0!==n.g&&(null===(e=n.g.perf_hooks)||void 0===e?void 0:e.performance)?(o=!0,s=n.g.perf_hooks.performance):o=!1),o}function i(){return r()?s.now():Date.now()}n.r(t),n.d(t,{isPerformanceSupported:()=>r,now:()=>i})},"./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{EffectScope:()=>i,ITERATE_KEY:()=>y,ReactiveEffect:()=>_,computed:()=>tt,customRef:()=>qe,deferredComputed:()=>at,effect:()=>w,effectScope:()=>a,enableTracking:()=>O,getCurrentScope:()=>c,isProxy:()=>Me,isReactive:()=>Ce,isReadonly:()=>Ee,isRef:()=>Ne,isShallow:()=>Te,markRaw:()=>Re,onScopeDispose:()=>u,pauseTracking:()=>P,proxyRefs:()=>Ge,reactive:()=>Se,readonly:()=>je,ref:()=>Fe,resetTracking:()=>C,shallowReactive:()=>ke,shallowReadonly:()=>Pe,shallowRef:()=>Ve,stop:()=>S,toRaw:()=>Ae,toRef:()=>Xe,toRefs:()=>Ke,track:()=>E,trigger:()=>M,triggerRef:()=>He,unref:()=>Ue});var o=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js");function s(e,...t){console.warn(`[Vue warn] ${e}`,...t)}let r;class i{constructor(e=!1){this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=r,!e&&r&&(this.index=(r.scopes||(r.scopes=[])).push(this)-1)}run(e){if(this.active){const t=r;try{return r=this,e()}finally{r=t}}else s("cannot run an inactive effect scope.")}on(){r=this}off(){r=this.parent}stop(e){if(this.active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0,this.active=!1}}}function a(e){return new i(e)}function l(e,t=r){t&&t.active&&t.effects.push(e)}function c(){return r}function u(e){r?r.cleanups.push(e):s("onScopeDispose() is called when there is no active effect scope to be associated with.")}const d=e=>{const t=new Set(e);return t.w=0,t.n=0,t},h=e=>(e.w&v)>0,p=e=>(e.n&v)>0,f=new WeakMap;let m,g=0,v=1;const y=Symbol("iterate"),b=Symbol("Map key iterate");class _{constructor(e,t=null,n){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,l(this,n)}run(){if(!this.active)return this.fn();let e=m,t=k;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=m,m=this,k=!0,v=1<<++g,g<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=v})(this):x(this),this.fn()}finally{g<=30&&(e=>{const{deps:t}=e;if(t.length){let n=0;for(let o=0;o<t.length;o++){const s=t[o];h(s)&&!p(s)?s.delete(e):t[n++]=s,s.w&=~v,s.n&=~v}t.length=n}})(this),v=1<<--g,m=this.parent,k=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){m===this?this.deferStop=!0:this.active&&(x(this),this.onStop&&this.onStop(),this.active=!1)}}function x(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}function w(e,t){e.effect&&(e=e.effect.fn);const n=new _(e);t&&((0,o.extend)(n,t),t.scope&&l(n,t.scope)),t&&t.lazy||n.run();const s=n.run.bind(n);return s.effect=n,s}function S(e){e.effect.stop()}let k=!0;const j=[];function P(){j.push(k),k=!1}function O(){j.push(k),k=!0}function C(){const e=j.pop();k=void 0===e||e}function E(e,t,n){if(k&&m){let o=f.get(e);o||f.set(e,o=new Map);let s=o.get(n);s||o.set(n,s=d()),T(s,{effect:m,target:e,type:t,key:n})}}function T(e,t){let n=!1;g<=30?p(e)||(e.n|=v,n=!h(e)):n=!e.has(m),n&&(e.add(m),m.deps.push(e),m.onTrack&&m.onTrack(Object.assign({effect:m},t)))}function M(e,t,n,s,r,i){const a=f.get(e);if(!a)return;let l=[];if("clear"===t)l=[...a.values()];else if("length"===n&&(0,o.isArray)(e))a.forEach(((e,t)=>{("length"===t||t>=s)&&l.push(e)}));else switch(void 0!==n&&l.push(a.get(n)),t){case"add":(0,o.isArray)(e)?(0,o.isIntegerKey)(n)&&l.push(a.get("length")):(l.push(a.get(y)),(0,o.isMap)(e)&&l.push(a.get(b)));break;case"delete":(0,o.isArray)(e)||(l.push(a.get(y)),(0,o.isMap)(e)&&l.push(a.get(b)));break;case"set":(0,o.isMap)(e)&&l.push(a.get(y))}const c={target:e,type:t,key:n,newValue:s,oldValue:r,oldTarget:i};if(1===l.length)l[0]&&A(l[0],c);else{const e=[];for(const t of l)t&&e.push(...t);A(d(e),c)}}function A(e,t){const n=(0,o.isArray)(e)?e:[...e];for(const e of n)e.computed&&R(e,t);for(const e of n)e.computed||R(e,t)}function R(e,t){(e!==m||e.allowRecurse)&&(e.onTrigger&&e.onTrigger((0,o.extend)({effect:e},t)),e.scheduler?e.scheduler():e.run())}const L=(0,o.makeMap)("__proto__,__v_isRef,__isVue"),D=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(o.isSymbol)),B=z(),I=z(!1,!0),N=z(!0),F=z(!0,!0),V=$();function $(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=Ae(this);for(let e=0,t=this.length;e<t;e++)E(n,"get",e+"");const o=n[t](...e);return-1===o||!1===o?n[t](...e.map(Ae)):o}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){P();const n=Ae(this)[t].apply(this,e);return C(),n}})),e}function z(e=!1,t=!1){return function(n,s,r){if("__v_isReactive"===s)return!e;if("__v_isReadonly"===s)return e;if("__v_isShallow"===s)return t;if("__v_raw"===s&&r===(e?t?we:xe:t?_e:be).get(n))return n;const i=(0,o.isArray)(n);if(!e&&i&&(0,o.hasOwn)(V,s))return Reflect.get(V,s,r);const a=Reflect.get(n,s,r);return((0,o.isSymbol)(s)?D.has(s):L(s))?a:(e||E(n,"get",s),t?a:Ne(a)?i&&(0,o.isIntegerKey)(s)?a:a.value:(0,o.isObject)(a)?e?je(a):Se(a):a)}}const H=W(),U=W(!0);function W(e=!1){return function(t,n,s,r){let i=t[n];if(Ee(i)&&Ne(i)&&!Ne(s))return!1;if(!e&&(Te(s)||Ee(s)||(i=Ae(i),s=Ae(s)),!(0,o.isArray)(t)&&Ne(i)&&!Ne(s)))return i.value=s,!0;const a=(0,o.isArray)(t)&&(0,o.isIntegerKey)(n)?Number(n)<t.length:(0,o.hasOwn)(t,n),l=Reflect.set(t,n,s,r);return t===Ae(r)&&(a?(0,o.hasChanged)(s,i)&&M(t,"set",n,s,i):M(t,"add",n,s)),l}}const G={get:B,set:H,deleteProperty:function(e,t){const n=(0,o.hasOwn)(e,t),s=e[t],r=Reflect.deleteProperty(e,t);return r&&n&&M(e,"delete",t,void 0,s),r},has:function(e,t){const n=Reflect.has(e,t);return(0,o.isSymbol)(t)&&D.has(t)||E(e,"has",t),n},ownKeys:function(e){return E(e,"iterate",(0,o.isArray)(e)?"length":y),Reflect.ownKeys(e)}},Y={get:N,set:(e,t)=>(s(`Set operation on key "${String(t)}" failed: target is readonly.`,e),!0),deleteProperty:(e,t)=>(s(`Delete operation on key "${String(t)}" failed: target is readonly.`,e),!0)},q=(0,o.extend)({},G,{get:I,set:U}),K=(0,o.extend)({},Y,{get:F}),J=e=>e,X=e=>Reflect.getPrototypeOf(e);function Q(e,t,n=!1,o=!1){const s=Ae(e=e.__v_raw),r=Ae(t);n||(t!==r&&E(s,"get",t),E(s,"get",r));const{has:i}=X(s),a=o?J:n?De:Le;return i.call(s,t)?a(e.get(t)):i.call(s,r)?a(e.get(r)):void(e!==s&&e.get(t))}function Z(e,t=!1){const n=this.__v_raw,o=Ae(n),s=Ae(e);return t||(e!==s&&E(o,"has",e),E(o,"has",s)),e===s?n.has(e):n.has(e)||n.has(s)}function ee(e,t=!1){return e=e.__v_raw,!t&&E(Ae(e),"iterate",y),Reflect.get(e,"size",e)}function te(e){e=Ae(e);const t=Ae(this);return X(t).has.call(t,e)||(t.add(e),M(t,"add",e,e)),this}function ne(e,t){t=Ae(t);const n=Ae(this),{has:s,get:r}=X(n);let i=s.call(n,e);i?ye(n,s,e):(e=Ae(e),i=s.call(n,e));const a=r.call(n,e);return n.set(e,t),i?(0,o.hasChanged)(t,a)&&M(n,"set",e,t,a):M(n,"add",e,t),this}function oe(e){const t=Ae(this),{has:n,get:o}=X(t);let s=n.call(t,e);s?ye(t,n,e):(e=Ae(e),s=n.call(t,e));const r=o?o.call(t,e):void 0,i=t.delete(e);return s&&M(t,"delete",e,void 0,r),i}function se(){const e=Ae(this),t=0!==e.size,n=(0,o.isMap)(e)?new Map(e):new Set(e),s=e.clear();return t&&M(e,"clear",void 0,void 0,n),s}function re(e,t){return function(n,o){const s=this,r=s.__v_raw,i=Ae(r),a=t?J:e?De:Le;return!e&&E(i,"iterate",y),r.forEach(((e,t)=>n.call(o,a(e),a(t),s)))}}function ie(e,t,n){return function(...s){const r=this.__v_raw,i=Ae(r),a=(0,o.isMap)(i),l="entries"===e||e===Symbol.iterator&&a,c="keys"===e&&a,u=r[e](...s),d=n?J:t?De:Le;return!t&&E(i,"iterate",c?b:y),{next(){const{value:e,done:t}=u.next();return t?{value:e,done:t}:{value:l?[d(e[0]),d(e[1])]:d(e),done:t}},[Symbol.iterator](){return this}}}}function ae(e){return function(...t){{const n=t[0]?`on key "${t[0]}" `:"";console.warn(`${(0,o.capitalize)(e)} operation ${n}failed: target is readonly.`,Ae(this))}return"delete"!==e&&this}}function le(){const e={get(e){return Q(this,e)},get size(){return ee(this)},has:Z,add:te,set:ne,delete:oe,clear:se,forEach:re(!1,!1)},t={get(e){return Q(this,e,!1,!0)},get size(){return ee(this)},has:Z,add:te,set:ne,delete:oe,clear:se,forEach:re(!1,!0)},n={get(e){return Q(this,e,!0)},get size(){return ee(this,!0)},has(e){return Z.call(this,e,!0)},add:ae("add"),set:ae("set"),delete:ae("delete"),clear:ae("clear"),forEach:re(!0,!1)},o={get(e){return Q(this,e,!0,!0)},get size(){return ee(this,!0)},has(e){return Z.call(this,e,!0)},add:ae("add"),set:ae("set"),delete:ae("delete"),clear:ae("clear"),forEach:re(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((s=>{e[s]=ie(s,!1,!1),n[s]=ie(s,!0,!1),t[s]=ie(s,!1,!0),o[s]=ie(s,!0,!0)})),[e,n,t,o]}const[ce,ue,de,he]=le();function pe(e,t){const n=t?e?he:de:e?ue:ce;return(t,s,r)=>"__v_isReactive"===s?!e:"__v_isReadonly"===s?e:"__v_raw"===s?t:Reflect.get((0,o.hasOwn)(n,s)&&s in t?n:t,s,r)}const fe={get:pe(!1,!1)},me={get:pe(!1,!0)},ge={get:pe(!0,!1)},ve={get:pe(!0,!0)};function ye(e,t,n){const s=Ae(n);if(s!==n&&t.call(e,s)){const t=(0,o.toRawType)(e);console.warn(`Reactive ${t} contains both the raw and reactive versions of the same object${"Map"===t?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}const be=new WeakMap,_e=new WeakMap,xe=new WeakMap,we=new WeakMap;function Se(e){return Ee(e)?e:Oe(e,!1,G,fe,be)}function ke(e){return Oe(e,!1,q,me,_e)}function je(e){return Oe(e,!0,Y,ge,xe)}function Pe(e){return Oe(e,!0,K,ve,we)}function Oe(e,t,n,s,r){if(!(0,o.isObject)(e))return console.warn(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const i=r.get(e);if(i)return i;const a=(l=e).__v_skip||!Object.isExtensible(l)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((0,o.toRawType)(l));var l;if(0===a)return e;const c=new Proxy(e,2===a?s:n);return r.set(e,c),c}function Ce(e){return Ee(e)?Ce(e.__v_raw):!(!e||!e.__v_isReactive)}function Ee(e){return!(!e||!e.__v_isReadonly)}function Te(e){return!(!e||!e.__v_isShallow)}function Me(e){return Ce(e)||Ee(e)}function Ae(e){const t=e&&e.__v_raw;return t?Ae(t):e}function Re(e){return(0,o.def)(e,"__v_skip",!0),e}const Le=e=>(0,o.isObject)(e)?Se(e):e,De=e=>(0,o.isObject)(e)?je(e):e;function Be(e){k&&m&&T((e=Ae(e)).dep||(e.dep=d()),{target:e,type:"get",key:"value"})}function Ie(e,t){(e=Ae(e)).dep&&A(e.dep,{target:e,type:"set",key:"value",newValue:t})}function Ne(e){return!(!e||!0!==e.__v_isRef)}function Fe(e){return $e(e,!1)}function Ve(e){return $e(e,!0)}function $e(e,t){return Ne(e)?e:new ze(e,t)}class ze{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:Ae(e),this._value=t?e:Le(e)}get value(){return Be(this),this._value}set value(e){const t=this.__v_isShallow||Te(e)||Ee(e);e=t?e:Ae(e),(0,o.hasChanged)(e,this._rawValue)&&(this._rawValue=e,this._value=t?e:Le(e),Ie(this,e))}}function He(e){Ie(e,e.value)}function Ue(e){return Ne(e)?e.value:e}const We={get:(e,t,n)=>Ue(Reflect.get(e,t,n)),set:(e,t,n,o)=>{const s=e[t];return Ne(s)&&!Ne(n)?(s.value=n,!0):Reflect.set(e,t,n,o)}};function Ge(e){return Ce(e)?e:new Proxy(e,We)}class Ye{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:n}=e((()=>Be(this)),(()=>Ie(this)));this._get=t,this._set=n}get value(){return this._get()}set value(e){this._set(e)}}function qe(e){return new Ye(e)}function Ke(e){Me(e)||console.warn("toRefs() expects a reactive object but received a plain one.");const t=(0,o.isArray)(e)?new Array(e.length):{};for(const n in e)t[n]=Xe(e,n);return t}class Je{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Xe(e,t,n){const o=e[t];return Ne(o)?o:new Je(e,t,n)}var Qe,Ze;class et{constructor(e,t,n,o){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this[Qe]=!1,this._dirty=!0,this.effect=new _(e,(()=>{this._dirty||(this._dirty=!0,Ie(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!o,this.__v_isReadonly=n}get value(){const e=Ae(this);return Be(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}function tt(e,t,n=!1){let s,r;const i=(0,o.isFunction)(e);i?(s=e,r=()=>{console.warn("Write operation failed: computed value is readonly")}):(s=e.get,r=e.set);const a=new et(s,r,i||!r,n);return t&&!n&&(a.effect.onTrack=t.onTrack,a.effect.onTrigger=t.onTrigger),a}Qe="__v_isReadonly";const nt=Promise.resolve(),ot=[];let st=!1;const rt=()=>{for(let e=0;e<ot.length;e++)ot[e]();ot.length=0,st=!1};class it{constructor(e){let t;this.dep=void 0,this._dirty=!0,this.__v_isRef=!0,this[Ze]=!0;let n=!1,o=!1;this.effect=new _(e,(e=>{if(this.dep){if(e)t=this._value,n=!0;else if(!o){const e=n?t:this._value;o=!0,n=!1,s=()=>{this.effect.active&&this._get()!==e&&Ie(this),o=!1},ot.push(s),st||(st=!0,nt.then(rt))}for(const e of this.dep)e.computed instanceof it&&e.scheduler(!0)}var s;this._dirty=!0})),this.effect.computed=this}_get(){return this._dirty?(this._dirty=!1,this._value=this.effect.run()):this._value}get value(){return Be(this),Ae(this)._get()}}function at(e){return new it(e)}Ze="__v_isReadonly"},"./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>Ve,Comment:()=>Fn,EffectScope:()=>o.EffectScope,Fragment:()=>In,KeepAlive:()=>Qe,ReactiveEffect:()=>o.ReactiveEffect,Static:()=>Vn,Suspense:()=>_e,Teleport:()=>Bn,Text:()=>Nn,callWithAsyncErrorHandling:()=>p,callWithErrorHandling:()=>h,camelize:()=>s.camelize,capitalize:()=>s.capitalize,cloneVNode:()=>io,compatUtils:()=>cs,computed:()=>$o,createBlock:()=>Jn,createCommentVNode:()=>uo,createElementBlock:()=>Kn,createElementVNode:()=>oo,createHydrationRenderer:()=>Cn,createPropsRestProxy:()=>Xo,createRenderer:()=>On,createSlots:()=>Et,createStaticVNode:()=>co,createTextVNode:()=>lo,createVNode:()=>so,customRef:()=>o.customRef,defineAsyncComponent:()=>Ke,defineComponent:()=>Ye,defineEmits:()=>Uo,defineExpose:()=>Wo,defineProps:()=>Ho,devtools:()=>$,effect:()=>o.effect,effectScope:()=>o.effectScope,getCurrentInstance:()=>xo,getCurrentScope:()=>o.getCurrentScope,getTransitionRawChildren:()=>Ge,guardReactiveProps:()=>ro,h:()=>Zo,handleError:()=>f,initCustomFormatter:()=>os,inject:()=>Ce,isMemoSame:()=>rs,isProxy:()=>o.isProxy,isReactive:()=>o.isReactive,isReadonly:()=>o.isReadonly,isRef:()=>o.isRef,isRuntimeOnly:()=>Ro,isShallow:()=>o.isShallow,isVNode:()=>Xn,markRaw:()=>o.markRaw,mergeDefaults:()=>Jo,mergeProps:()=>mo,nextTick:()=>k,normalizeClass:()=>s.normalizeClass,normalizeProps:()=>s.normalizeProps,normalizeStyle:()=>s.normalizeStyle,onActivated:()=>et,onBeforeMount:()=>lt,onBeforeUnmount:()=>ht,onBeforeUpdate:()=>ut,onDeactivated:()=>tt,onErrorCaptured:()=>vt,onMounted:()=>ct,onRenderTracked:()=>gt,onRenderTriggered:()=>mt,onScopeDispose:()=>o.onScopeDispose,onServerPrefetch:()=>ft,onUnmounted:()=>pt,onUpdated:()=>dt,openBlock:()=>Hn,popScopeId:()=>ie,provide:()=>Oe,proxyRefs:()=>o.proxyRefs,pushScopeId:()=>re,queuePostFlushCb:()=>O,reactive:()=>o.reactive,readonly:()=>o.readonly,ref:()=>o.ref,registerRuntimeCompiler:()=>Ao,renderList:()=>Ct,renderSlot:()=>Tt,resolveComponent:()=>wt,resolveDirective:()=>jt,resolveDynamicComponent:()=>kt,resolveFilter:()=>ls,resolveTransitionHooks:()=>ze,setBlockTracking:()=>Yn,setDevtoolsHook:()=>W,setTransitionHooks:()=>We,shallowReactive:()=>o.shallowReactive,shallowReadonly:()=>o.shallowReadonly,shallowRef:()=>o.shallowRef,ssrContextKey:()=>es,ssrUtils:()=>as,stop:()=>o.stop,toDisplayString:()=>s.toDisplayString,toHandlerKey:()=>s.toHandlerKey,toHandlers:()=>At,toRaw:()=>o.toRaw,toRef:()=>o.toRef,toRefs:()=>o.toRefs,transformVNodeArgs:()=>Zn,triggerRef:()=>o.triggerRef,unref:()=>o.unref,useAttrs:()=>qo,useSSRContext:()=>ts,useSlots:()=>Yo,useTransitionState:()=>Ne,version:()=>is,warn:()=>l,watch:()=>Re,watchEffect:()=>Ee,watchPostEffect:()=>Te,watchSyncEffect:()=>Me,withAsyncContext:()=>Qo,withCtx:()=>le,withDefaults:()=>Go,withDirectives:()=>bt,withMemo:()=>ss,withScopeId:()=>ae});var o=n("./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js"),s=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js");const r=[];function i(e){r.push(e)}function a(){r.pop()}function l(e,...t){(0,o.pauseTracking)();const n=r.length?r[r.length-1].component:null,s=n&&n.appContext.config.warnHandler,i=function(){let e=r[r.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}();if(s)h(s,n,11,[e+t.join(""),n&&n.proxy,i.map((({vnode:e})=>`at <${Fo(n,e.type)}>`)).join("\n"),i]);else{const n=[`[Vue warn]: ${e}`,...t];i.length&&n.push("\n",...function(e){const t=[];return e.forEach(((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=!!e.component&&null==e.component.parent,s=` at <${Fo(e.component,e.type,o)}`,r=">"+n;return e.props?[s,...c(e.props),r]:[s+r]}(e))})),t}(i)),console.warn(...n)}(0,o.resetTracking)()}function c(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach((n=>{t.push(...u(n,e[n]))})),n.length>3&&t.push(" ..."),t}function u(e,t,n){return(0,s.isString)(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?n?t:[`${e}=${t}`]:(0,o.isRef)(t)?(t=u(e,(0,o.toRaw)(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):(0,s.isFunction)(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=(0,o.toRaw)(t),n?t:[`${e}=`,t])}const d={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core"};function h(e,t,n,o){let s;try{s=o?e(...o):e()}catch(e){f(e,t,n)}return s}function p(e,t,n,o){if((0,s.isFunction)(e)){const r=h(e,t,n,o);return r&&(0,s.isPromise)(r)&&r.catch((e=>{f(e,t,n)})),r}const r=[];for(let s=0;s<e.length;s++)r.push(p(e[s],t,n,o));return r}function f(e,t,n,o=!0){const s=t?t.vnode:null;if(t){let o=t.parent;const s=t.proxy,r=d[n];for(;o;){const t=o.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,s,r))return;o=o.parent}const i=t.appContext.config.errorHandler;if(i)return void h(i,null,10,[e,s,r])}!function(e,t,n,o=!0){{const s=d[t];if(n&&i(n),l("Unhandled error"+(s?` during execution of ${s}`:"")),n&&a(),o)throw e;console.error(e)}}(e,n,s,o)}let m=!1,g=!1;const v=[];let y=0;const b=[];let _=null,x=0;const w=Promise.resolve();let S=null;function k(e){const t=S||w;return e?t.then(this?e.bind(this):e):t}function j(e){v.length&&v.includes(e,m&&e.allowRecurse?y+1:y)||(null==e.id?v.push(e):v.splice(function(e){let t=y+1,n=v.length;for(;t<n;){const o=t+n>>>1;T(v[o])<e?t=o+1:n=o}return t}(e.id),0,e),P())}function P(){m||g||(g=!0,S=w.then(A))}function O(e){(0,s.isArray)(e)?b.push(...e):_&&_.includes(e,e.allowRecurse?x+1:x)||b.push(e),P()}function C(e,t=(m?y+1:0)){for(e=e||new Map;t<v.length;t++){const n=v[t];if(n&&n.pre){if(R(e,n))continue;v.splice(t,1),t--,n()}}}function E(e){if(b.length){const t=[...new Set(b)];if(b.length=0,_)return void _.push(...t);for(_=t,e=e||new Map,_.sort(((e,t)=>T(e)-T(t))),x=0;x<_.length;x++)R(e,_[x])||_[x]();_=null,x=0}}const T=e=>null==e.id?1/0:e.id,M=(e,t)=>{const n=T(e)-T(t);if(0===n){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return n};function A(e){g=!1,m=!0,e=e||new Map,v.sort(M);const t=t=>R(e,t);try{for(y=0;y<v.length;y++){const e=v[y];if(e&&!1!==e.active){if(t(e))continue;h(e,null,14)}}}finally{y=0,v.length=0,E(e),m=!1,S=null,(v.length||b.length)&&A(e)}}function R(e,t){if(e.has(t)){const n=e.get(t);if(n>100){const e=t.ownerInstance,n=e&&No(e.type);return l(`Maximum recursive updates exceeded${n?` in component <${n}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`),!0}e.set(t,n+1)}else e.set(t,1)}let L=!1;const D=new Set;(0,s.getGlobalThis)().__VUE_HMR_RUNTIME__={createRecord:V(I),rerender:V((function(e,t){const n=B.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach((e=>{t&&(e.render=t,N(e.type).render=t),e.renderCache=[],L=!0,e.update(),L=!1})))})),reload:V((function(e,t){const n=B.get(e);if(!n)return;t=N(t),F(n.initialDef,t);const o=[...n.instances];for(const e of o){const o=N(e.type);D.has(o)||(o!==n.initialDef&&F(o,t),D.add(o)),e.appContext.optionsCache.delete(e.type),e.ceReload?(D.add(o),e.ceReload(t.styles),D.delete(o)):e.parent?(j(e.parent.update),e.parent.type.__asyncLoader&&e.parent.ceReload&&e.parent.ceReload(t.styles)):e.appContext.reload?e.appContext.reload():"undefined"!=typeof window?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required.")}O((()=>{for(const e of o)D.delete(N(e.type))}))}))};const B=new Map;function I(e,t){return!B.has(e)&&(B.set(e,{initialDef:N(t),instances:new Set}),!0)}function N(e){return Vo(e)?e.__vccOpts:e}function F(e,t){(0,s.extend)(e,t);for(const n in e)"__file"===n||n in t||delete e[n]}function V(e){return(t,n)=>{try{return e(t,n)}catch(e){console.error(e),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}let $,z=[],H=!1;function U(e,...t){$?$.emit(e,...t):H||z.push({event:e,args:t})}function W(e,t){var n,o;$=e,$?($.enabled=!0,z.forEach((({event:e,args:t})=>$.emit(e,...t))),z=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(o=null===(n=window.navigator)||void 0===n?void 0:n.userAgent)||void 0===o?void 0:o.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{W(e,t)})),setTimeout((()=>{$||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,H=!0,z=[])}),3e3)):(H=!0,z=[])}const G=K("component:added"),Y=K("component:updated"),q=K("component:removed");function K(e){return t=>{U(e,t.appContext.app,t.uid,t.parent?t.parent.uid:void 0,t)}}const J=Q("perf:start"),X=Q("perf:end");function Q(e){return(t,n,o)=>{U(e,t.appContext.app,t.uid,t,n,o)}}function Z(e,t,...n){if(e.isUnmounted)return;const o=e.vnode.props||s.EMPTY_OBJ;{const{emitsOptions:o,propsOptions:[r]}=e;if(o)if(t in o){const e=o[t];(0,s.isFunction)(e)&&(e(...n)||l(`Invalid event arguments: event validation failed for event "${t}".`))}else r&&(0,s.toHandlerKey)(t)in r||l(`Component emitted event "${t}" but it is neither declared in the emits option nor as an "${(0,s.toHandlerKey)(t)}" prop.`)}let r=n;const i=t.startsWith("update:"),a=i&&t.slice(7);if(a&&a in o){const e=`${"modelValue"===a?"model":a}Modifiers`,{number:t,trim:i}=o[e]||s.EMPTY_OBJ;i&&(r=n.map((e=>e.trim()))),t&&(r=n.map(s.toNumber))}!function(e,t,n){U("component:emit",e.appContext.app,e,t,n)}(e,t,r);{const n=t.toLowerCase();n!==t&&o[(0,s.toHandlerKey)(n)]&&l(`Event "${n}" is emitted in component ${Fo(e,e.type)} but the handler is registered for "${t}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${(0,s.hyphenate)(t)}" instead of "${t}".`)}let c,u=o[c=(0,s.toHandlerKey)(t)]||o[c=(0,s.toHandlerKey)((0,s.camelize)(t))];!u&&i&&(u=o[c=(0,s.toHandlerKey)((0,s.hyphenate)(t))]),u&&p(u,e,6,r);const d=o[c+"Once"];if(d){if(e.emitted){if(e.emitted[c])return}else e.emitted={};e.emitted[c]=!0,p(d,e,6,r)}}function ee(e,t,n=!1){const o=t.emitsCache,r=o.get(e);if(void 0!==r)return r;const i=e.emits;let a={},l=!1;if(__VUE_OPTIONS_API__&&!(0,s.isFunction)(e)){const o=e=>{const n=ee(e,t,!0);n&&(l=!0,(0,s.extend)(a,n))};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}return i||l?((0,s.isArray)(i)?i.forEach((e=>a[e]=null)):(0,s.extend)(a,i),(0,s.isObject)(e)&&o.set(e,a),a):((0,s.isObject)(e)&&o.set(e,null),null)}function te(e,t){return!(!e||!(0,s.isOn)(t))&&(t=t.slice(2).replace(/Once$/,""),(0,s.hasOwn)(e,t[0].toLowerCase()+t.slice(1))||(0,s.hasOwn)(e,(0,s.hyphenate)(t))||(0,s.hasOwn)(e,t))}let ne=null,oe=null;function se(e){const t=ne;return ne=e,oe=e&&e.type.__scopeId||null,t}function re(e){oe=e}function ie(){oe=null}const ae=e=>le;function le(e,t=ne,n){if(!t)return e;if(e._n)return e;const o=(...n)=>{o._d&&Yn(-1);const s=se(t);let r;try{r=e(...n)}finally{se(s),o._d&&Yn(1)}return Y(t),r};return o._n=!0,o._c=!0,o._d=!0,o}let ce=!1;function ue(){ce=!0}function de(e){const{type:t,vnode:n,proxy:o,withProxy:r,props:i,propsOptions:[a],slots:c,attrs:u,emit:d,render:h,renderCache:p,data:m,setupState:g,ctx:v,inheritAttrs:y}=e;let b,_;const x=se(e);ce=!1;try{if(4&n.shapeFlag){const e=r||o;b=ho(h.call(e,e,p,i,g,m,v)),_=u}else{const e=t;u===i&&ue(),b=ho(e.length>1?e(i,{get attrs(){return ue(),u},slots:c,emit:d}):e(i,null)),_=t.props?u:fe(u)}}catch(t){$n.length=0,f(t,e,1),b=so(Fn)}let w,S=b;if(b.patchFlag>0&&2048&b.patchFlag&&([S,w]=he(b)),_&&!1!==y){const e=Object.keys(_),{shapeFlag:t}=S;if(e.length)if(7&t)a&&e.some(s.isModelListener)&&(_=me(_,a)),S=io(S,_);else if(!ce&&S.type!==Fn){const e=Object.keys(u),t=[],n=[];for(let o=0,r=e.length;o<r;o++){const r=e[o];(0,s.isOn)(r)?(0,s.isModelListener)(r)||t.push(r[2].toLowerCase()+r.slice(3)):n.push(r)}n.length&&l(`Extraneous non-props attributes (${n.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`),t.length&&l(`Extraneous non-emits event listeners (${t.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`)}}return n.dirs&&(ge(S)||l("Runtime directive used on component with non-element root node. The directives will not function as intended."),S=io(S),S.dirs=S.dirs?S.dirs.concat(n.dirs):n.dirs),n.transition&&(ge(S)||l("Component inside <Transition> renders non-element root node that cannot be animated."),S.transition=n.transition),w?w(S):b=S,se(x),b}const he=e=>{const t=e.children,n=e.dynamicChildren,o=pe(t);if(!o)return[e,void 0];const s=t.indexOf(o),r=n?n.indexOf(o):-1;return[ho(o),o=>{t[s]=o,n&&(r>-1?n[r]=o:o.patchFlag>0&&(e.dynamicChildren=[...n,o]))}]};function pe(e){let t;for(let n=0;n<e.length;n++){const o=e[n];if(!Xn(o))return;if(o.type!==Fn||"v-if"===o.children){if(t)return;t=o}}return t}const fe=e=>{let t;for(const n in e)("class"===n||"style"===n||(0,s.isOn)(n))&&((t||(t={}))[n]=e[n]);return t},me=(e,t)=>{const n={};for(const o in e)(0,s.isModelListener)(o)&&o.slice(9)in t||(n[o]=e[o]);return n},ge=e=>7&e.shapeFlag||e.type===Fn;function ve(e,t,n){const o=Object.keys(t);if(o.length!==Object.keys(e).length)return!0;for(let s=0;s<o.length;s++){const r=o[s];if(t[r]!==e[r]&&!te(n,r))return!0}return!1}function ye({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const be=e=>e.__isSuspense,_e={name:"Suspense",__isSuspense:!0,process(e,t,n,o,s,r,i,a,l,c){null==e?function(e,t,n,o,s,r,i,a,l){const{p:c,o:{createElement:u}}=l,d=u("div"),h=e.suspense=Se(e,s,o,t,d,n,r,i,a,l);c(null,h.pendingBranch=e.ssContent,d,null,o,h,r,i),h.deps>0?(xe(e,"onPending"),xe(e,"onFallback"),c(null,e.ssFallback,t,n,o,null,r,i),Pe(h,e.ssFallback)):h.resolve()}(t,n,o,s,r,i,a,l,c):function(e,t,n,o,s,r,i,a,{p:l,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const h=t.ssContent,p=t.ssFallback,{activeBranch:f,pendingBranch:m,isInFallback:g,isHydrating:v}=d;if(m)d.pendingBranch=h,Qn(h,m)?(l(m,h,d.hiddenContainer,null,s,d,r,i,a),d.deps<=0?d.resolve():g&&(l(f,p,n,o,s,null,r,i,a),Pe(d,p))):(d.pendingId++,v?(d.isHydrating=!1,d.activeBranch=m):c(m,s,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),g?(l(null,h,d.hiddenContainer,null,s,d,r,i,a),d.deps<=0?d.resolve():(l(f,p,n,o,s,null,r,i,a),Pe(d,p))):f&&Qn(h,f)?(l(f,h,n,o,s,d,r,i,a),d.resolve(!0)):(l(null,h,d.hiddenContainer,null,s,d,r,i,a),d.deps<=0&&d.resolve()));else if(f&&Qn(h,f))l(f,h,n,o,s,d,r,i,a),Pe(d,h);else if(xe(t,"onPending"),d.pendingBranch=h,d.pendingId++,l(null,h,d.hiddenContainer,null,s,d,r,i,a),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(p)}),e):0===e&&d.fallback(p)}}(e,t,n,o,s,i,a,l,c)},hydrate:function(e,t,n,o,s,r,i,a,l){const c=t.suspense=Se(t,o,n,e.parentNode,document.createElement("div"),null,s,r,i,a,!0),u=l(e,c.pendingBranch=t.ssContent,n,c,r,i);return 0===c.deps&&c.resolve(),u},create:Se,normalize:function(e){const{shapeFlag:t,children:n}=e,o=32&t;e.ssContent=ke(o?n.default:n),e.ssFallback=o?ke(n.fallback):so(Fn)}};function xe(e,t){const n=e.props&&e.props[t];(0,s.isFunction)(n)&&n()}let we=!1;function Se(e,t,n,o,r,l,c,u,d,h,p=!1){we||(we=!0,console[console.info?"info":"log"]("<Suspense> is an experimental feature and its API will likely change."));const{p:m,m:g,um:v,n:y,o:{parentNode:b,remove:_}}=h,x=(0,s.toNumber)(e.props&&e.props.timeout),w={vnode:e,parent:t,parentComponent:n,isSVG:c,container:o,hiddenContainer:r,anchor:l,deps:0,pendingId:0,timeout:"number"==typeof x?x:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:p,isUnmounted:!1,effects:[],resolve(e=!1){if(!e&&!w.pendingBranch)throw new Error("suspense.resolve() is called without a pending branch.");if(w.isUnmounted)throw new Error("suspense.resolve() is called on an already unmounted suspense boundary.");const{vnode:t,activeBranch:n,pendingBranch:o,pendingId:s,effects:r,parentComponent:i,container:a}=w;if(w.isHydrating)w.isHydrating=!1;else if(!e){const e=n&&o.transition&&"out-in"===o.transition.mode;e&&(n.transition.afterLeave=()=>{s===w.pendingId&&g(o,a,t,0)});let{anchor:t}=w;n&&(t=y(n),v(n,i,w,!0)),e||g(o,a,t,0)}Pe(w,o),w.pendingBranch=null,w.isInFallback=!1;let l=w.parent,c=!1;for(;l;){if(l.pendingBranch){l.effects.push(...r),c=!0;break}l=l.parent}c||O(r),w.effects=[],xe(t,"onResolve")},fallback(e){if(!w.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:o,container:s,isSVG:r}=w;xe(t,"onFallback");const i=y(n),a=()=>{w.isInFallback&&(m(null,e,s,i,o,null,r,u,d),Pe(w,e))},l=e.transition&&"out-in"===e.transition.mode;l&&(n.transition.afterLeave=a),w.isInFallback=!0,v(n,o,null,!0),l||a()},move(e,t,n){w.activeBranch&&g(w.activeBranch,e,t,n),w.container=e},next:()=>w.activeBranch&&y(w.activeBranch),registerDep(e,t){const n=!!w.pendingBranch;n&&w.deps++;const o=e.vnode.el;e.asyncDep.catch((t=>{f(t,e,0)})).then((s=>{if(e.isUnmounted||w.isUnmounted||w.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:r}=e;i(r),Mo(e,s,!1),o&&(r.el=o);const l=!o&&e.subTree.el;t(e,r,b(o||e.subTree.el),o?null:y(e.subTree),w,c,d),l&&_(l),ye(e,r.el),a(),n&&0==--w.deps&&w.resolve()}))},unmount(e,t){w.isUnmounted=!0,w.activeBranch&&v(w.activeBranch,n,e,t),w.pendingBranch&&v(w.pendingBranch,n,e,t)}};return w}function ke(e){let t;if((0,s.isFunction)(e)){const n=Gn&&e._c;n&&(e._d=!1,Hn()),e=e(),n&&(e._d=!0,t=zn,Un())}if((0,s.isArray)(e)){const t=pe(e);t||l("<Suspense> slots expect a single root node."),e=t}return e=ho(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function je(e,t){t&&t.pendingBranch?(0,s.isArray)(e)?t.effects.push(...e):t.effects.push(e):O(e)}function Pe(e,t){e.activeBranch=t;const{vnode:n,parentComponent:o}=e,s=n.el=t.el;o&&o.subTree===n&&(o.vnode.el=s,ye(o,s))}function Oe(e,t){if(_o){let n=_o.provides;const o=_o.parent&&_o.parent.provides;o===n&&(n=_o.provides=Object.create(o)),n[e]=t}else l("provide() can only be used inside setup().")}function Ce(e,t,n=!1){const o=_o||ne;if(o){const r=null==o.parent?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides;if(r&&e in r)return r[e];if(arguments.length>1)return n&&(0,s.isFunction)(t)?t.call(o.proxy):t;l(`injection "${String(e)}" not found.`)}else l("inject() can only be used inside setup() or functional components.")}function Ee(e,t){return Le(e,null,t)}function Te(e,t){return Le(e,null,Object.assign(Object.assign({},t),{flush:"post"}))}function Me(e,t){return Le(e,null,Object.assign(Object.assign({},t),{flush:"sync"}))}const Ae={};function Re(e,t,n){return(0,s.isFunction)(t)||l("`watch(fn, options?)` signature has been moved to a separate API. Use `watchEffect(fn, options?)` instead. `watch` now only supports `watch(source, cb, options?) signature."),Le(e,t,n)}function Le(e,t,{immediate:n,deep:r,flush:i,onTrack:a,onTrigger:c}=s.EMPTY_OBJ){t||(void 0!==n&&l('watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.'),void 0!==r&&l('watch() "deep" option is only respected when using the watch(source, callback, options?) signature.'));const u=e=>{l("Invalid watch source: ",e,"A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.")},d=_o;let f,m,g=!1,v=!1;if((0,o.isRef)(e)?(f=()=>e.value,g=(0,o.isShallow)(e)):(0,o.isReactive)(e)?(f=()=>e,r=!0):(0,s.isArray)(e)?(v=!0,g=e.some((e=>(0,o.isReactive)(e)||(0,o.isShallow)(e))),f=()=>e.map((e=>(0,o.isRef)(e)?e.value:(0,o.isReactive)(e)?Ie(e):(0,s.isFunction)(e)?h(e,d,2):void u(e)))):(0,s.isFunction)(e)?f=t?()=>h(e,d,2):()=>{if(!d||!d.isUnmounted)return m&&m(),p(e,d,3,[y])}:(f=s.NOOP,u(e)),t&&r){const e=f;f=()=>Ie(e())}let y=e=>{m=w.onStop=()=>{h(e,d,4)}};if(Eo)return y=s.NOOP,t?n&&p(t,d,3,[f(),v?[]:void 0,y]):f(),s.NOOP;let b=v?[]:Ae;const _=()=>{if(w.active)if(t){const e=w.run();(r||g||(v?e.some(((e,t)=>(0,s.hasChanged)(e,b[t]))):(0,s.hasChanged)(e,b)))&&(m&&m(),p(t,d,3,[e,b===Ae?void 0:b,y]),b=e)}else w.run()};let x;_.allowRecurse=!!t,"sync"===i?x=_:"post"===i?x=()=>Pn(_,d&&d.suspense):(_.pre=!0,d&&(_.id=d.uid),x=()=>j(_));const w=new o.ReactiveEffect(f,x);return w.onTrack=a,w.onTrigger=c,t?n?_():b=w.run():"post"===i?Pn(w.run.bind(w),d&&d.suspense):w.run(),()=>{w.stop(),d&&d.scope&&(0,s.remove)(d.scope.effects,w)}}function De(e,t,n){const o=this.proxy,r=(0,s.isString)(e)?e.includes(".")?Be(o,e):()=>o[e]:e.bind(o,o);let i;(0,s.isFunction)(t)?i=t:(i=t.handler,n=t);const a=_o;wo(this);const l=Le(r,i.bind(o),n);return a?wo(a):So(),l}function Be(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function Ie(e,t){if(!(0,s.isObject)(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),(0,o.isRef)(e))Ie(e.value,t);else if((0,s.isArray)(e))for(let n=0;n<e.length;n++)Ie(e[n],t);else if((0,s.isSet)(e)||(0,s.isMap)(e))e.forEach((e=>{Ie(e,t)}));else if((0,s.isPlainObject)(e))for(const n in e)Ie(e[n],t);return e}function Ne(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return ct((()=>{e.isMounted=!0})),ht((()=>{e.isUnmounting=!0})),e}const Fe=[Function,Array],Ve={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Fe,onEnter:Fe,onAfterEnter:Fe,onEnterCancelled:Fe,onBeforeLeave:Fe,onLeave:Fe,onAfterLeave:Fe,onLeaveCancelled:Fe,onBeforeAppear:Fe,onAppear:Fe,onAfterAppear:Fe,onAppearCancelled:Fe},setup(e,{slots:t}){const n=xo(),s=Ne();let r;return()=>{const i=t.default&&Ge(t.default(),!0);if(!i||!i.length)return;let a=i[0];if(i.length>1){let e=!1;for(const t of i)if(t.type!==Fn){if(e){l("<transition> can only be used on a single element or component. Use <transition-group> for lists.");break}a=t,e=!0}}const c=(0,o.toRaw)(e),{mode:u}=c;if(u&&"in-out"!==u&&"out-in"!==u&&"default"!==u&&l(`invalid <transition> mode: ${u}`),s.isLeaving)return He(a);const d=Ue(a);if(!d)return He(a);const h=ze(d,c,s,n);We(d,h);const p=n.subTree,f=p&&Ue(p);let m=!1;const{getTransitionKey:g}=d.type;if(g){const e=g();void 0===r?r=e:e!==r&&(r=e,m=!0)}if(f&&f.type!==Fn&&(!Qn(d,f)||m)){const e=ze(f,c,s,n);if(We(f,e),"out-in"===u)return s.isLeaving=!0,e.afterLeave=()=>{s.isLeaving=!1,n.update()},He(a);"in-out"===u&&d.type!==Fn&&(e.delayLeave=(e,t,n)=>{$e(s,f)[String(f.key)]=f,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete h.delayedLeave},h.delayedLeave=n})}return a}}};function $e(e,t){const{leavingVNodes:n}=e;let o=n.get(t.type);return o||(o=Object.create(null),n.set(t.type,o)),o}function ze(e,t,n,o){const{appear:r,mode:i,persisted:a=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:h,onLeave:f,onAfterLeave:m,onLeaveCancelled:g,onBeforeAppear:v,onAppear:y,onAfterAppear:b,onAppearCancelled:_}=t,x=String(e.key),w=$e(n,e),S=(e,t)=>{e&&p(e,o,9,t)},k=(e,t)=>{const n=t[1];S(e,t),(0,s.isArray)(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},j={mode:i,persisted:a,beforeEnter(t){let o=l;if(!n.isMounted){if(!r)return;o=v||l}t._leaveCb&&t._leaveCb(!0);const s=w[x];s&&Qn(e,s)&&s.el._leaveCb&&s.el._leaveCb(),S(o,[t])},enter(e){let t=c,o=u,s=d;if(!n.isMounted){if(!r)return;t=y||c,o=b||u,s=_||d}let i=!1;const a=e._enterCb=t=>{i||(i=!0,S(t?s:o,[e]),j.delayedLeave&&j.delayedLeave(),e._enterCb=void 0)};t?k(t,[e,a]):a()},leave(t,o){const s=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return o();S(h,[t]);let r=!1;const i=t._leaveCb=n=>{r||(r=!0,o(),S(n?g:m,[t]),t._leaveCb=void 0,w[s]===e&&delete w[s])};w[s]=e,f?k(f,[t,i]):i()},clone:e=>ze(e,t,n,o)};return j}function He(e){if(Xe(e))return(e=io(e)).children=null,e}function Ue(e){return Xe(e)?e.children?e.children[0]:void 0:e}function We(e,t){6&e.shapeFlag&&e.component?We(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ge(e,t=!1,n){let o=[],s=0;for(let r=0;r<e.length;r++){let i=e[r];const a=null==n?i.key:String(n)+String(null!=i.key?i.key:r);i.type===In?(128&i.patchFlag&&s++,o=o.concat(Ge(i.children,t,a))):(t||i.type!==Fn)&&o.push(null!=a?io(i,{key:a}):i)}if(s>1)for(let e=0;e<o.length;e++)o[e].patchFlag=-2;return o}function Ye(e){return(0,s.isFunction)(e)?{setup:e,name:e.name}:e}const qe=e=>!!e.type.__asyncLoader;function Ke(e){(0,s.isFunction)(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:r,delay:i=200,timeout:a,suspensible:c=!0,onError:u}=e;let d,h=null,p=0;const m=()=>{let e;return h||(e=h=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),u)return new Promise(((t,n)=>{u(e,(()=>t((p++,h=null,m()))),(()=>n(e)),p+1)}));throw e})).then((t=>{if(e!==h&&h)return h;if(t||l("Async component loader resolved to undefined. If you are using retry(), make sure to return its return value."),t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),t&&!(0,s.isObject)(t)&&!(0,s.isFunction)(t))throw new Error(`Invalid async component load result: ${t}`);return d=t,t})))};return Ye({name:"AsyncComponentWrapper",__asyncLoader:m,get __asyncResolved(){return d},setup(){const e=_o;if(d)return()=>Je(d,e);const t=t=>{h=null,f(t,e,13,!r)};if(c&&e.suspense||Eo)return m().then((t=>()=>Je(t,e))).catch((e=>(t(e),()=>r?so(r,{error:e}):null)));const s=(0,o.ref)(!1),l=(0,o.ref)(),u=(0,o.ref)(!!i);return i&&setTimeout((()=>{u.value=!1}),i),null!=a&&setTimeout((()=>{if(!s.value&&!l.value){const e=new Error(`Async component timed out after ${a}ms.`);t(e),l.value=e}}),a),m().then((()=>{s.value=!0,e.parent&&Xe(e.parent.vnode)&&j(e.parent.update)})).catch((e=>{t(e),l.value=e})),()=>s.value&&d?Je(d,e):l.value&&r?so(r,{error:l.value}):n&&!u.value?so(n):void 0}})}function Je(e,{vnode:{ref:t,props:n,children:o,shapeFlag:s},parent:r}){const i=so(e,n,o);return i.ref=t,i}const Xe=e=>e.type.__isKeepAlive,Qe={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=xo(),o=n.ctx;if(!o.renderer)return()=>{const e=t.default&&t.default();return e&&1===e.length?e[0]:e};const r=new Map,i=new Set;let a=null;n.__v_cache=r;const c=n.suspense,{renderer:{p:u,m:d,um:h,o:{createElement:p}}}=o,f=p("div");function m(e){st(e),h(e,n,c,!0)}function g(e){r.forEach(((t,n)=>{const o=No(t.type);!o||e&&e(o)||v(n)}))}function v(e){const t=r.get(e);a&&t.type===a.type?a&&st(a):m(t),r.delete(e),i.delete(e)}o.activate=(e,t,n,o,r)=>{const i=e.component;d(e,t,n,0,c),u(i.vnode,e,t,n,i,c,o,e.slotScopeIds,r),Pn((()=>{i.isDeactivated=!1,i.a&&(0,s.invokeArrayFns)(i.a);const t=e.props&&e.props.onVnodeMounted;t&&go(t,i.parent,e)}),c),G(i)},o.deactivate=e=>{const t=e.component;d(e,f,null,1,c),Pn((()=>{t.da&&(0,s.invokeArrayFns)(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&go(n,t.parent,e),t.isDeactivated=!0}),c),G(t)},Re((()=>[e.include,e.exclude]),(([e,t])=>{e&&g((t=>Ze(e,t))),t&&g((e=>!Ze(t,e)))}),{flush:"post",deep:!0});let y=null;const b=()=>{null!=y&&r.set(y,rt(n.subTree))};return ct(b),dt(b),ht((()=>{r.forEach((e=>{const{subTree:t,suspense:o}=n,s=rt(t);if(e.type!==s.type)m(e);else{st(s);const e=s.component.da;e&&Pn(e,o)}}))})),()=>{if(y=null,!t.default)return null;const n=t.default(),o=n[0];if(n.length>1)return l("KeepAlive should contain exactly one component child."),a=null,n;if(!Xn(o)||!(4&o.shapeFlag||128&o.shapeFlag))return a=null,o;let s=rt(o);const c=s.type,u=No(qe(s)?s.type.__asyncResolved||{}:c),{include:d,exclude:h,max:p}=e;if(d&&(!u||!Ze(d,u))||h&&u&&Ze(h,u))return a=s,o;const f=null==s.key?c:s.key,m=r.get(f);return s.el&&(s=io(s),128&o.shapeFlag&&(o.ssContent=s)),y=f,m?(s.el=m.el,s.component=m.component,s.transition&&We(s,s.transition),s.shapeFlag|=512,i.delete(f),i.add(f)):(i.add(f),p&&i.size>parseInt(p,10)&&v(i.values().next().value)),s.shapeFlag|=256,a=s,be(o.type)?o:s}}};function Ze(e,t){return(0,s.isArray)(e)?e.some((e=>Ze(e,t))):(0,s.isString)(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function et(e,t){nt(e,"a",t)}function tt(e,t){nt(e,"da",t)}function nt(e,t,n=_o){const o=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(it(t,o,n),n){let e=n.parent;for(;e&&e.parent;)Xe(e.parent.vnode)&&ot(o,t,n,e),e=e.parent}}function ot(e,t,n,o){const r=it(t,e,o,!0);pt((()=>{(0,s.remove)(o[t],r)}),n)}function st(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function rt(e){return 128&e.shapeFlag?e.ssContent:e}function it(e,t,n=_o,r=!1){if(n){const s=n[e]||(n[e]=[]),i=t.__weh||(t.__weh=(...s)=>{if(n.isUnmounted)return;(0,o.pauseTracking)(),wo(n);const r=p(t,n,e,s);return So(),(0,o.resetTracking)(),r});return r?s.unshift(i):s.push(i),i}l(`${(0,s.toHandlerKey)(d[e].replace(/ hook$/,""))} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`)}const at=e=>(t,n=_o)=>(!Eo||"sp"===e)&&it(e,((...e)=>t(...e)),n),lt=at("bm"),ct=at("m"),ut=at("bu"),dt=at("u"),ht=at("bum"),pt=at("um"),ft=at("sp"),mt=at("rtg"),gt=at("rtc");function vt(e,t=_o){it("ec",e,t)}function yt(e){(0,s.isBuiltInDirective)(e)&&l("Do not use built-in directive ids as custom directive id: "+e)}function bt(e,t){const n=ne;if(null===n)return l("withDirectives can only be used inside render functions."),e;const o=Bo(n)||n.proxy,r=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[n,i,a,l=s.EMPTY_OBJ]=t[e];(0,s.isFunction)(n)&&(n={mounted:n,updated:n}),n.deep&&Ie(i),r.push({dir:n,instance:o,value:i,oldValue:void 0,arg:a,modifiers:l})}return e}function _t(e,t,n,s){const r=e.dirs,i=t&&t.dirs;for(let a=0;a<r.length;a++){const l=r[a];i&&(l.oldValue=i[a].value);let c=l.dir[s];c&&((0,o.pauseTracking)(),p(c,n,8,[e.el,l,e,t]),(0,o.resetTracking)())}}const xt="components";function wt(e,t){return Pt(xt,e,!0,t)||e}const St=Symbol();function kt(e){return(0,s.isString)(e)?Pt(xt,e,!1)||e:e||St}function jt(e){return Pt("directives",e)}function Pt(e,t,n=!0,o=!1){const r=ne||_o;if(r){const i=r.type;if(e===xt){const e=No(i,!1);if(e&&(e===t||e===(0,s.camelize)(t)||e===(0,s.capitalize)((0,s.camelize)(t))))return i}const a=Ot(r[e]||i[e],t)||Ot(r.appContext[e],t);if(!a&&o)return i;if(n&&!a){const n=e===xt?"\nIf this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.":"";l(`Failed to resolve ${e.slice(0,-1)}: ${t}${n}`)}return a}l(`resolve${(0,s.capitalize)(e.slice(0,-1))} can only be used in render() or setup().`)}function Ot(e,t){return e&&(e[t]||e[(0,s.camelize)(t)]||e[(0,s.capitalize)((0,s.camelize)(t))])}function Ct(e,t,n,o){let r;const i=n&&n[o];if((0,s.isArray)(e)||(0,s.isString)(e)){r=new Array(e.length);for(let n=0,o=e.length;n<o;n++)r[n]=t(e[n],n,void 0,i&&i[n])}else if("number"==typeof e){Number.isInteger(e)||l(`The v-for range expect an integer value but got ${e}.`),r=new Array(e);for(let n=0;n<e;n++)r[n]=t(n+1,n,void 0,i&&i[n])}else if((0,s.isObject)(e))if(e[Symbol.iterator])r=Array.from(e,((e,n)=>t(e,n,void 0,i&&i[n])));else{const n=Object.keys(e);r=new Array(n.length);for(let o=0,s=n.length;o<s;o++){const s=n[o];r[o]=t(e[s],s,o,i&&i[o])}}else r=[];return n&&(n[o]=r),r}function Et(e,t){for(let n=0;n<t.length;n++){const o=t[n];if((0,s.isArray)(o))for(let t=0;t<o.length;t++)e[o[t].name]=o[t].fn;else o&&(e[o.name]=o.key?(...e)=>{const t=o.fn(...e);return t&&(t.key=o.key),t}:o.fn)}return e}function Tt(e,t,n={},o,s){if(ne.isCE||ne.parent&&qe(ne.parent)&&ne.parent.isCE)return so("slot","default"===t?null:{name:t},o&&o());let r=e[t];r&&r.length>1&&(l("SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template."),r=()=>[]),r&&r._c&&(r._d=!1),Hn();const i=r&&Mt(r(n)),a=Jn(In,{key:n.key||i&&i.key||`_${t}`},i||(o?o():[]),i&&1===e._?64:-2);return!s&&a.scopeId&&(a.slotScopeIds=[a.scopeId+"-s"]),r&&r._c&&(r._d=!0),a}function Mt(e){return e.some((e=>!Xn(e)||e.type!==Fn&&!(e.type===In&&!Mt(e.children))))?e:null}function At(e,t){const n={};if(!(0,s.isObject)(e))return l("v-on with no argument expects an object value."),n;for(const o in e)n[t&&/[A-Z]/.test(o)?`on:${o}`:(0,s.toHandlerKey)(o)]=e[o];return n}const Rt=e=>e?Po(e)?Bo(e)||e.proxy:Rt(e.parent):null,Lt=(0,s.extend)(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>(0,o.shallowReadonly)(e.props),$attrs:e=>(0,o.shallowReadonly)(e.attrs),$slots:e=>(0,o.shallowReadonly)(e.slots),$refs:e=>(0,o.shallowReadonly)(e.refs),$parent:e=>Rt(e.parent),$root:e=>Rt(e.root),$emit:e=>e.emit,$options:e=>__VUE_OPTIONS_API__?$t(e):e.type,$forceUpdate:e=>e.f||(e.f=()=>j(e.update)),$nextTick:e=>e.n||(e.n=k.bind(e.proxy)),$watch:e=>__VUE_OPTIONS_API__?De.bind(e):s.NOOP}),Dt=e=>"_"===e||"$"===e,Bt={get({_:e},t){const{ctx:n,setupState:r,data:i,props:a,accessCache:c,type:u,appContext:d}=e;if("__isVue"===t)return!0;if(r!==s.EMPTY_OBJ&&r.__isScriptSetup&&(0,s.hasOwn)(r,t))return r[t];let h;if("$"!==t[0]){const o=c[t];if(void 0!==o)switch(o){case 1:return r[t];case 2:return i[t];case 4:return n[t];case 3:return a[t]}else{if(r!==s.EMPTY_OBJ&&(0,s.hasOwn)(r,t))return c[t]=1,r[t];if(i!==s.EMPTY_OBJ&&(0,s.hasOwn)(i,t))return c[t]=2,i[t];if((h=e.propsOptions[0])&&(0,s.hasOwn)(h,t))return c[t]=3,a[t];if(n!==s.EMPTY_OBJ&&(0,s.hasOwn)(n,t))return c[t]=4,n[t];__VUE_OPTIONS_API__&&!Nt||(c[t]=0)}}const p=Lt[t];let f,m;return p?("$attrs"===t&&((0,o.track)(e,"get",t),ue()),p(e)):(f=u.__cssModules)&&(f=f[t])?f:n!==s.EMPTY_OBJ&&(0,s.hasOwn)(n,t)?(c[t]=4,n[t]):(m=d.config.globalProperties,(0,s.hasOwn)(m,t)?m[t]:void(!ne||(0,s.isString)(t)&&0===t.indexOf("__v")||(i!==s.EMPTY_OBJ&&Dt(t[0])&&(0,s.hasOwn)(i,t)?l(`Property ${JSON.stringify(t)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`):e===ne&&l(`Property ${JSON.stringify(t)} was accessed during render but is not defined on instance.`))))},set({_:e},t,n){const{data:o,setupState:r,ctx:i}=e;return r!==s.EMPTY_OBJ&&(0,s.hasOwn)(r,t)?(r[t]=n,!0):o!==s.EMPTY_OBJ&&(0,s.hasOwn)(o,t)?(o[t]=n,!0):(0,s.hasOwn)(e.props,t)?(l(`Attempting to mutate prop "${t}". Props are readonly.`,e),!1):"$"===t[0]&&t.slice(1)in e?(l(`Attempting to mutate public property "${t}". Properties starting with $ are reserved and readonly.`,e),!1):(t in e.appContext.config.globalProperties?Object.defineProperty(i,t,{enumerable:!0,configurable:!0,value:n}):i[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:o,appContext:r,propsOptions:i}},a){let l;return!!n[a]||e!==s.EMPTY_OBJ&&(0,s.hasOwn)(e,a)||t!==s.EMPTY_OBJ&&(0,s.hasOwn)(t,a)||(l=i[0])&&(0,s.hasOwn)(l,a)||(0,s.hasOwn)(o,a)||(0,s.hasOwn)(Lt,a)||(0,s.hasOwn)(r.config.globalProperties,a)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:(0,s.hasOwn)(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)},ownKeys:e=>(l("Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead."),Reflect.ownKeys(e))},It=(0,s.extend)({},Bt,{get(e,t){if(t!==Symbol.unscopables)return Bt.get(e,t,e)},has(e,t){const n="_"!==t[0]&&!(0,s.isGloballyWhitelisted)(t);return!n&&Bt.has(e,t)&&l(`Property ${JSON.stringify(t)} should not start with _ which is a reserved prefix for Vue internals.`),n}});let Nt=!0;function Ft(e,t,n){p((0,s.isArray)(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function Vt(e,t,n,o){const r=o.includes(".")?Be(n,o):()=>n[o];if((0,s.isString)(e)){const n=t[e];(0,s.isFunction)(n)?Re(r,n):l(`Invalid watch handler specified by key "${e}"`,n)}else if((0,s.isFunction)(e))Re(r,e.bind(n));else if((0,s.isObject)(e))if((0,s.isArray)(e))e.forEach((e=>Vt(e,t,n,o)));else{const o=(0,s.isFunction)(e.handler)?e.handler.bind(n):t[e.handler];(0,s.isFunction)(o)?Re(r,o,e):l(`Invalid watch handler specified by key "${e.handler}"`,o)}else l(`Invalid watch option: "${o}"`,e)}function $t(e){const t=e.type,{mixins:n,extends:o}=t,{mixins:r,optionsCache:i,config:{optionMergeStrategies:a}}=e.appContext,l=i.get(t);let c;return l?c=l:r.length||n||o?(c={},r.length&&r.forEach((e=>zt(c,e,a,!0))),zt(c,t,a)):c=t,(0,s.isObject)(t)&&i.set(t,c),c}function zt(e,t,n,o=!1){const{mixins:s,extends:r}=t;r&&zt(e,r,n,!0),s&&s.forEach((t=>zt(e,t,n,!0)));for(const s in t)if(o&&"expose"===s)l('"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.');else{const o=Ht[s]||n&&n[s];e[s]=o?o(e[s],t[s]):t[s]}return e}const Ht={data:Ut,props:Yt,emits:Yt,methods:Yt,computed:Yt,beforeCreate:Gt,created:Gt,beforeMount:Gt,mounted:Gt,beforeUpdate:Gt,updated:Gt,beforeDestroy:Gt,beforeUnmount:Gt,destroyed:Gt,unmounted:Gt,activated:Gt,deactivated:Gt,errorCaptured:Gt,serverPrefetch:Gt,components:Yt,directives:Yt,watch:function(e,t){if(!e)return t;if(!t)return e;const n=(0,s.extend)(Object.create(null),e);for(const o in t)n[o]=Gt(e[o],t[o]);return n},provide:Ut,inject:function(e,t){return Yt(Wt(e),Wt(t))}};function Ut(e,t){return t?e?function(){return(0,s.extend)((0,s.isFunction)(e)?e.call(this,this):e,(0,s.isFunction)(t)?t.call(this,this):t)}:t:e}function Wt(e){if((0,s.isArray)(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Gt(e,t){return e?[...new Set([].concat(e,t))]:t}function Yt(e,t){return e?(0,s.extend)((0,s.extend)(Object.create(null),e),t):t}function qt(e,t,n,r){const[i,a]=e.propsOptions;let l,c=!1;if(t)for(let o in t){if((0,s.isReservedProp)(o))continue;const u=t[o];let d;i&&(0,s.hasOwn)(i,d=(0,s.camelize)(o))?a&&a.includes(d)?(l||(l={}))[d]=u:n[d]=u:te(e.emitsOptions,o)||o in r&&u===r[o]||(r[o]=u,c=!0)}if(a){const t=(0,o.toRaw)(n),r=l||s.EMPTY_OBJ;for(let o=0;o<a.length;o++){const l=a[o];n[l]=Kt(i,t,l,r[l],e,!(0,s.hasOwn)(r,l))}}return c}function Kt(e,t,n,o,r,i){const a=e[n];if(null!=a){const e=(0,s.hasOwn)(a,"default");if(e&&void 0===o){const e=a.default;if(a.type!==Function&&(0,s.isFunction)(e)){const{propsDefaults:s}=r;n in s?o=s[n]:(wo(r),o=s[n]=e.call(null,t),So())}else o=e}a[0]&&(i&&!e?o=!1:!a[1]||""!==o&&o!==(0,s.hyphenate)(n)||(o=!0))}return o}function Jt(e,t,n=!1){const o=t.propsCache,r=o.get(e);if(r)return r;const i=e.props,a={},c=[];let u=!1;if(__VUE_OPTIONS_API__&&!(0,s.isFunction)(e)){const o=e=>{u=!0;const[n,o]=Jt(e,t,!0);(0,s.extend)(a,n),o&&c.push(...o)};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}if(!i&&!u)return(0,s.isObject)(e)&&o.set(e,s.EMPTY_ARR),s.EMPTY_ARR;if((0,s.isArray)(i))for(let e=0;e<i.length;e++){(0,s.isString)(i[e])||l("props must be strings when using array syntax.",i[e]);const t=(0,s.camelize)(i[e]);Xt(t)&&(a[t]=s.EMPTY_OBJ)}else if(i){(0,s.isObject)(i)||l("invalid props options",i);for(const e in i){const t=(0,s.camelize)(e);if(Xt(t)){const n=i[e],o=a[t]=(0,s.isArray)(n)||(0,s.isFunction)(n)?{type:n}:n;if(o){const e=en(Boolean,o.type),n=en(String,o.type);o[0]=e>-1,o[1]=n<0||e<n,(e>-1||(0,s.hasOwn)(o,"default"))&&c.push(t)}}}}const d=[a,c];return(0,s.isObject)(e)&&o.set(e,d),d}function Xt(e){return"$"!==e[0]||(l(`Invalid prop name: "${e}" is a reserved property.`),!1)}function Qt(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Zt(e,t){return Qt(e)===Qt(t)}function en(e,t){return(0,s.isArray)(t)?t.findIndex((t=>Zt(t,e))):(0,s.isFunction)(t)&&Zt(t,e)?0:-1}function tn(e,t,n){const r=(0,o.toRaw)(t),i=n.propsOptions[0];for(const t in i){let n=i[t];null!=n&&nn(t,r[t],n,!(0,s.hasOwn)(e,t)&&!(0,s.hasOwn)(e,(0,s.hyphenate)(t)))}}function nn(e,t,n,o){const{type:r,required:i,validator:a}=n;if(i&&o)l('Missing required prop: "'+e+'"');else if(null!=t||n.required){if(null!=r&&!0!==r){let n=!1;const o=(0,s.isArray)(r)?r:[r],i=[];for(let e=0;e<o.length&&!n;e++){const{valid:s,expectedType:r}=sn(t,o[e]);i.push(r||""),n=s}if(!n)return void l(function(e,t,n){let o=`Invalid prop: type check failed for prop "${e}". Expected ${n.map(s.capitalize).join(" | ")}`;const r=n[0],i=(0,s.toRawType)(t),a=rn(t,r),l=rn(t,i);return 1===n.length&&an(r)&&!function(...e){return e.some((e=>"boolean"===e.toLowerCase()))}(r,i)&&(o+=` with value ${a}`),o+=`, got ${i} `,an(i)&&(o+=`with value ${l}.`),o}(e,t,i))}a&&!a(t)&&l('Invalid prop: custom validator check failed for prop "'+e+'".')}}const on=(0,s.makeMap)("String,Number,Boolean,Function,Symbol,BigInt");function sn(e,t){let n;const o=Qt(t);if(on(o)){const s=typeof e;n=s===o.toLowerCase(),n||"object"!==s||(n=e instanceof t)}else n="Object"===o?(0,s.isObject)(e):"Array"===o?(0,s.isArray)(e):"null"===o?null===e:e instanceof t;return{valid:n,expectedType:o}}function rn(e,t){return"String"===t?`"${e}"`:"Number"===t?`${Number(e)}`:`${e}`}function an(e){return["string","number","boolean"].some((t=>e.toLowerCase()===t))}const ln=e=>"_"===e[0]||"$stable"===e,cn=e=>(0,s.isArray)(e)?e.map(ho):[ho(e)],un=(e,t,n)=>{if(t._n)return t;const o=le(((...n)=>(_o&&l(`Slot "${e}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`),cn(t(...n)))),n);return o._c=!1,o},dn=(e,t,n)=>{const o=e._ctx;for(const n in e){if(ln(n))continue;const r=e[n];if((0,s.isFunction)(r))t[n]=un(n,r,o);else if(null!=r){l(`Non-function value encountered for slot "${n}". Prefer function slots for better performance.`);const e=cn(r);t[n]=()=>e}}},hn=(e,t)=>{Xe(e.vnode)||l("Non-function value encountered for default slot. Prefer function slots for better performance.");const n=cn(t);e.slots.default=()=>n};function pn(){return{app:null,config:{isNativeTag:s.NO,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let fn=0;function mn(e,t){return function(n,o=null){(0,s.isFunction)(n)||(n=Object.assign({},n)),null==o||(0,s.isObject)(o)||(l("root props passed to app.mount() must be an object."),o=null);const r=pn(),i=new Set;let a=!1;const c=r.app={_uid:fn++,_component:n,_props:o,_container:null,_context:r,_instance:null,version:is,get config(){return r.config},set config(e){l("app.config cannot be replaced. Modify individual options instead.")},use:(e,...t)=>(i.has(e)?l("Plugin has already been applied to target app."):e&&(0,s.isFunction)(e.install)?(i.add(e),e.install(c,...t)):(0,s.isFunction)(e)?(i.add(e),e(c,...t)):l('A plugin must either be a function or an object with an "install" function.'),c),mixin:e=>(__VUE_OPTIONS_API__?r.mixins.includes(e)?l("Mixin has already been applied to target app"+(e.name?`: ${e.name}`:"")):r.mixins.push(e):l("Mixins are only available in builds supporting Options API"),c),component:(e,t)=>(jo(e,r.config),t?(r.components[e]&&l(`Component "${e}" has already been registered in target app.`),r.components[e]=t,c):r.components[e]),directive:(e,t)=>(yt(e),t?(r.directives[e]&&l(`Directive "${e}" has already been registered in target app.`),r.directives[e]=t,c):r.directives[e]),mount(s,i,u){if(!a){s.__vue_app__&&l("There is already an app instance mounted on the host container.\n If you want to mount another app on the same host container, you need to unmount the previous app by calling `app.unmount()` first.");const d=so(n,o);return d.appContext=r,r.reload=()=>{e(io(d),s,u)},i&&t?t(d,s):e(d,s,u),a=!0,c._container=s,s.__vue_app__=c,c._instance=d.component,function(e,t){U("app:init",e,t,{Fragment:In,Text:Nn,Comment:Fn,Static:Vn})}(c,is),Bo(d.component)||d.component.proxy}l("App has already been mounted.\nIf you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. `const createMyApp = () => createApp(App)`")},unmount(){a?(e(null,c._container),c._instance=null,function(e){U("app:unmount",e)}(c),delete c._container.__vue_app__):l("Cannot unmount an app that is not mounted.")},provide:(e,t)=>(e in r.provides&&l(`App already provides property with key "${String(e)}". It will be overwritten with the new value.`),r.provides[e]=t,c)};return c}}function gn(e,t,n,r,i=!1){if((0,s.isArray)(e))return void e.forEach(((e,o)=>gn(e,t&&((0,s.isArray)(t)?t[o]:t),n,r,i)));if(qe(r)&&!i)return;const a=4&r.shapeFlag?Bo(r.component)||r.component.proxy:r.el,c=i?null:a,{i:u,r:d}=e;if(!u)return void l("Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.");const p=t&&t.r,f=u.refs===s.EMPTY_OBJ?u.refs={}:u.refs,m=u.setupState;if(null!=p&&p!==d&&((0,s.isString)(p)?(f[p]=null,(0,s.hasOwn)(m,p)&&(m[p]=null)):(0,o.isRef)(p)&&(p.value=null)),(0,s.isFunction)(d))h(d,u,12,[c,f]);else{const t=(0,s.isString)(d),r=(0,o.isRef)(d);if(t||r){const o=()=>{if(e.f){const n=t?(0,s.hasOwn)(m,d)?m[d]:f[d]:d.value;i?(0,s.isArray)(n)&&(0,s.remove)(n,a):(0,s.isArray)(n)?n.includes(a)||n.push(a):t?(f[d]=[a],(0,s.hasOwn)(m,d)&&(m[d]=f[d])):(d.value=[a],e.k&&(f[e.k]=d.value))}else t?(f[d]=c,(0,s.hasOwn)(m,d)&&(m[d]=c)):r?(d.value=c,e.k&&(f[e.k]=c)):l("Invalid template ref type:",d,`(${typeof d})`)};c?(o.id=-1,Pn(o,n)):o()}else l("Invalid template ref type:",d,`(${typeof d})`)}}let vn=!1;const yn=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,bn=e=>8===e.nodeType;function _n(e){const{mt:t,p:n,o:{patchProp:o,createText:r,nextSibling:i,parentNode:a,remove:c,insert:u,createComment:d}}=e,h=(n,o,s,c,d,y=!1)=>{const b=bn(n)&&"["===n.data,_=()=>g(n,o,s,c,d,b),{type:x,ref:w,shapeFlag:S,patchFlag:k}=o;let j=n.nodeType;o.el=n,-2===k&&(y=!1,o.dynamicChildren=null);let P=null;switch(x){case Nn:3!==j?""===o.children?(u(o.el=r(""),a(n),n),P=n):P=_():(n.data!==o.children&&(vn=!0,l(`Hydration text mismatch:\n- Client: ${JSON.stringify(n.data)}\n- Server: ${JSON.stringify(o.children)}`),n.data=o.children),P=i(n));break;case Fn:P=8!==j||b?_():i(n);break;case Vn:if(b&&(j=(n=i(n)).nodeType),1===j||3===j){P=n;const e=!o.children.length;for(let t=0;t<o.staticCount;t++)e&&(o.children+=1===P.nodeType?P.outerHTML:P.data),t===o.staticCount-1&&(o.anchor=P),P=i(P);return b?i(P):P}_();break;case In:P=b?m(n,o,s,c,d,y):_();break;default:if(1&S)P=1!==j||o.type.toLowerCase()!==n.tagName.toLowerCase()?_():p(n,o,s,c,d,y);else if(6&S){o.slotScopeIds=d;const e=a(n);if(t(o,e,null,s,c,yn(e),y),P=b?v(n):i(n),P&&bn(P)&&"teleport end"===P.data&&(P=i(P)),qe(o)){let t;b?(t=so(In),t.anchor=P?P.previousSibling:e.lastChild):t=3===n.nodeType?lo(""):so("div"),t.el=n,o.component.subTree=t}}else 64&S?P=8!==j?_():o.type.hydrate(n,o,s,c,d,y,e,f):128&S?P=o.type.hydrate(n,o,s,c,yn(a(n)),d,y,e,h):l("Invalid HostVNode type:",x,`(${typeof x})`)}return null!=w&&gn(w,null,c,o),P},p=(e,t,n,r,i,a)=>{a=a||!!t.dynamicChildren;const{type:u,props:d,patchFlag:h,shapeFlag:p,dirs:m}=t,g="input"===u&&m||"option"===u;{if(m&&_t(t,null,n,"created"),d)if(g||!a||48&h)for(const t in d)(g&&t.endsWith("value")||(0,s.isOn)(t)&&!(0,s.isReservedProp)(t))&&o(e,t,null,d[t],!1,void 0,n);else d.onClick&&o(e,"onClick",null,d.onClick,!1,void 0,n);let u;if((u=d&&d.onVnodeBeforeMount)&&go(u,n,t),m&&_t(t,null,n,"beforeMount"),((u=d&&d.onVnodeMounted)||m)&&je((()=>{u&&go(u,n,t),m&&_t(t,null,n,"mounted")}),r),16&p&&(!d||!d.innerHTML&&!d.textContent)){let o=f(e.firstChild,t,e,n,r,i,a),s=!1;for(;o;){vn=!0,s||(l(`Hydration children mismatch in <${t.type}>: server rendered element contains more child nodes than client vdom.`),s=!0);const e=o;o=o.nextSibling,c(e)}}else 8&p&&e.textContent!==t.children&&(vn=!0,l(`Hydration text content mismatch in <${t.type}>:\n- Client: ${e.textContent}\n- Server: ${t.children}`),e.textContent=t.children)}return e.nextSibling},f=(e,t,o,s,r,i,a)=>{a=a||!!t.dynamicChildren;const c=t.children,u=c.length;let d=!1;for(let t=0;t<u;t++){const u=a?c[t]:c[t]=ho(c[t]);if(e)e=h(e,u,s,r,i,a);else{if(u.type===Nn&&!u.children)continue;vn=!0,d||(l(`Hydration children mismatch in <${o.tagName.toLowerCase()}>: server rendered element contains fewer child nodes than client vdom.`),d=!0),n(null,u,o,null,s,r,yn(o),i)}}return e},m=(e,t,n,o,s,r)=>{const{slotScopeIds:l}=t;l&&(s=s?s.concat(l):l);const c=a(e),h=f(i(e),t,c,n,o,s,r);return h&&bn(h)&&"]"===h.data?i(t.anchor=h):(vn=!0,u(t.anchor=d("]"),c,h),h)},g=(e,t,o,s,r,u)=>{if(vn=!0,l("Hydration node mismatch:\n- Client vnode:",t.type,"\n- Server rendered DOM:",e,3===e.nodeType?"(text)":bn(e)&&"["===e.data?"(start of fragment)":""),t.el=null,u){const t=v(e);for(;;){const n=i(e);if(!n||n===t)break;c(n)}}const d=i(e),h=a(e);return c(e),n(null,t,h,d,o,s,yn(h),r),d},v=e=>{let t=0;for(;e;)if((e=i(e))&&bn(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return i(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return l("Attempting to hydrate existing markup but container is empty. Performing full mount instead."),n(null,e,t),E(),void(t._vnode=e);vn=!1,h(t.firstChild,e,null,null,null),E(),t._vnode=e,vn&&console.error("Hydration completed but contains mismatches.")},h]}let xn,wn;function Sn(e,t){e.appContext.config.performance&&jn()&&wn.mark(`vue-${t}-${e.uid}`),J(e,t,jn()?wn.now():Date.now())}function kn(e,t){if(e.appContext.config.performance&&jn()){const n=`vue-${t}-${e.uid}`,o=n+":end";wn.mark(o),wn.measure(`<${Fo(e,e.type)}> ${t}`,n,o),wn.clearMarks(n),wn.clearMarks(o)}X(e,t,jn()?wn.now():Date.now())}function jn(){return void 0!==xn||("undefined"!=typeof window&&window.performance?(xn=!0,wn=window.performance):xn=!1),xn}const Pn=je;function On(e){return En(e)}function Cn(e){return En(e,_n)}function En(e,t){!function(){const e=[];if("boolean"!=typeof __VUE_OPTIONS_API__&&(e.push("__VUE_OPTIONS_API__"),(0,s.getGlobalThis)().__VUE_OPTIONS_API__=!0),"boolean"!=typeof __VUE_PROD_DEVTOOLS__&&(e.push("__VUE_PROD_DEVTOOLS__"),(0,s.getGlobalThis)().__VUE_PROD_DEVTOOLS__=!1),e.length){const t=e.length>1;console.warn(`Feature flag${t?"s":""} ${e.join(", ")} ${t?"are":"is"} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.\n\nFor more details, see https://link.vuejs.org/feature-flags.`)}}();const n=(0,s.getGlobalThis)();n.__VUE__=!0,W(n.__VUE_DEVTOOLS_GLOBAL_HOOK__,n);const{insert:r,remove:c,patchProp:u,createElement:d,createText:h,createComment:p,setText:f,setElementText:m,parentNode:g,nextSibling:b,setScopeId:_=s.NOOP,insertStaticContent:x}=e,w=(e,t,n,o=null,s=null,r=null,i=!1,a=null,c=!L&&!!t.dynamicChildren)=>{if(e===t)return;e&&!Qn(e,t)&&(o=le(e),oe(e,s,r,!0),e=null),-2===t.patchFlag&&(c=!1,t.dynamicChildren=null);const{type:u,ref:d,shapeFlag:h}=t;switch(u){case Nn:S(e,t,n,o);break;case Fn:k(e,t,n,o);break;case Vn:null==e?P(t,n,o,i):O(e,t,n,i);break;case In:z(e,t,n,o,s,r,i,a,c);break;default:1&h?M(e,t,n,o,s,r,i,a,c):6&h?H(e,t,n,o,s,r,i,a,c):64&h||128&h?u.process(e,t,n,o,s,r,i,a,c,ue):l("Invalid VNode type:",u,`(${typeof u})`)}null!=d&&s&&gn(d,e&&e.ref,r,t||e,!t)},S=(e,t,n,o)=>{if(null==e)r(t.el=h(t.children),n,o);else{const n=t.el=e.el;t.children!==e.children&&f(n,t.children)}},k=(e,t,n,o)=>{null==e?r(t.el=p(t.children||""),n,o):t.el=e.el},P=(e,t,n,o)=>{[e.el,e.anchor]=x(e.children,t,n,o,e.el,e.anchor)},O=(e,t,n,o)=>{if(t.children!==e.children){const s=b(e.anchor);T(e),[t.el,t.anchor]=x(t.children,n,s,o)}else t.el=e.el,t.anchor=e.anchor},T=({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=b(e),c(e),e=n;c(t)},M=(e,t,n,o,s,r,i,a,l)=>{i=i||"svg"===t.type,null==e?A(t,n,o,s,r,i,a,l):N(e,t,s,r,i,a,l)},A=(e,t,n,o,i,a,l,c)=>{let h,p;const{type:f,props:g,shapeFlag:v,transition:y,dirs:b}=e;if(h=e.el=d(e.type,a,g&&g.is,g),8&v?m(h,e.children):16&v&&D(e.children,h,null,o,i,a&&"foreignObject"!==f,l,c),b&&_t(e,null,o,"created"),g){for(const t in g)"value"===t||(0,s.isReservedProp)(t)||u(h,t,null,g[t],a,e.children,o,i,ae);"value"in g&&u(h,"value",null,g.value),(p=g.onVnodeBeforeMount)&&go(p,o,e)}R(h,e,e.scopeId,l,o),Object.defineProperty(h,"__vnode",{value:e,enumerable:!1}),Object.defineProperty(h,"__vueParentComponent",{value:o,enumerable:!1}),b&&_t(e,null,o,"beforeMount");const _=(!i||i&&!i.pendingBranch)&&y&&!y.persisted;_&&y.beforeEnter(h),r(h,t,n),((p=g&&g.onVnodeMounted)||_||b)&&Pn((()=>{p&&go(p,o,e),_&&y.enter(h),b&&_t(e,null,o,"mounted")}),i)},R=(e,t,n,o,s)=>{if(n&&_(e,n),o)for(let t=0;t<o.length;t++)_(e,o[t]);if(s){let n=s.subTree;if(n.patchFlag>0&&2048&n.patchFlag&&(n=pe(n.children)||n),t===n){const t=s.vnode;R(e,t,t.scopeId,t.slotScopeIds,s.parent)}}},D=(e,t,n,o,s,r,i,a,l=0)=>{for(let c=l;c<e.length;c++){const l=e[c]=a?po(e[c]):ho(e[c]);w(null,l,t,n,o,s,r,i,a)}},N=(e,t,n,o,r,i,a)=>{const l=t.el=e.el;let{patchFlag:c,dynamicChildren:d,dirs:h}=t;c|=16&e.patchFlag;const p=e.props||s.EMPTY_OBJ,f=t.props||s.EMPTY_OBJ;let g;n&&Tn(n,!1),(g=f.onVnodeBeforeUpdate)&&go(g,n,t,e),h&&_t(t,e,n,"beforeUpdate"),n&&Tn(n,!0),L&&(c=0,a=!1,d=null);const v=r&&"foreignObject"!==t.type;if(d?(F(e.dynamicChildren,d,l,n,o,v,i),n&&n.type.__hmrId&&Mn(e,t)):a||Q(e,t,l,null,n,o,v,i,!1),c>0){if(16&c)V(l,t,p,f,n,o,r);else if(2&c&&p.class!==f.class&&u(l,"class",null,f.class,r),4&c&&u(l,"style",p.style,f.style,r),8&c){const s=t.dynamicProps;for(let t=0;t<s.length;t++){const i=s[t],a=p[i],c=f[i];c===a&&"value"!==i||u(l,i,a,c,r,e.children,n,o,ae)}}1&c&&e.children!==t.children&&m(l,t.children)}else a||null!=d||V(l,t,p,f,n,o,r);((g=f.onVnodeUpdated)||h)&&Pn((()=>{g&&go(g,n,t,e),h&&_t(t,e,n,"updated")}),o)},F=(e,t,n,o,s,r,i)=>{for(let a=0;a<t.length;a++){const l=e[a],c=t[a],u=l.el&&(l.type===In||!Qn(l,c)||70&l.shapeFlag)?g(l.el):n;w(l,c,u,null,o,s,r,i,!0)}},V=(e,t,n,o,r,i,a)=>{if(n!==o){if(n!==s.EMPTY_OBJ)for(const l in n)(0,s.isReservedProp)(l)||l in o||u(e,l,n[l],null,a,t.children,r,i,ae);for(const l in o){if((0,s.isReservedProp)(l))continue;const c=o[l],d=n[l];c!==d&&"value"!==l&&u(e,l,d,c,a,t.children,r,i,ae)}"value"in o&&u(e,"value",n.value,o.value)}},z=(e,t,n,o,s,i,a,l,c)=>{const u=t.el=e?e.el:h(""),d=t.anchor=e?e.anchor:h("");let{patchFlag:p,dynamicChildren:f,slotScopeIds:m}=t;(L||2048&p)&&(p=0,c=!1,f=null),m&&(l=l?l.concat(m):m),null==e?(r(u,n,o),r(d,n,o),D(t.children,n,d,s,i,a,l,c)):p>0&&64&p&&f&&e.dynamicChildren?(F(e.dynamicChildren,f,n,s,i,a,l),s&&s.type.__hmrId?Mn(e,t):(null!=t.key||s&&t===s.subTree)&&Mn(e,t,!0)):Q(e,t,n,d,s,i,a,l,c)},H=(e,t,n,o,s,r,i,a,l)=>{t.slotScopeIds=a,null==e?512&t.shapeFlag?s.ctx.activate(t,n,o,i,l):U(t,n,o,s,r,i,l):K(e,t,l)},U=(e,t,n,o,s,r,l)=>{const c=e.component=bo(e,o,s);if(c.type.__hmrId&&function(e){const t=e.type.__hmrId;let n=B.get(t);n||(I(t,e.type),n=B.get(t)),n.instances.add(e)}(c),i(e),Sn(c,"mount"),Xe(e)&&(c.ctx.renderer=ue),Sn(c,"init"),To(c),kn(c,"init"),c.asyncDep){if(s&&s.registerDep(c,J),!e.el){const e=c.subTree=so(Fn);k(null,e,t,n)}}else J(c,e,t,n,s,r,l),a(),kn(c,"mount")},K=(e,t,n)=>{const o=t.component=e.component;if(function(e,t,n){const{props:o,children:s,component:r}=e,{props:i,children:a,patchFlag:l}=t,c=r.emitsOptions;if((s||a)&&L)return!0;if(t.dirs||t.transition)return!0;if(!(n&&l>=0))return!(!s&&!a||a&&a.$stable)||o!==i&&(o?!i||ve(o,i,c):!!i);if(1024&l)return!0;if(16&l)return o?ve(o,i,c):!!i;if(8&l){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(i[n]!==o[n]&&!te(c,n))return!0}}return!1}(e,t,n)){if(o.asyncDep&&!o.asyncResolved)return i(t),X(o,t,n),void a();o.next=t,function(e){const t=v.indexOf(e);t>y&&v.splice(t,1)}(o.update),o.update()}else t.el=e.el,o.vnode=t},J=(e,t,n,r,l,c,u)=>{const d=e.effect=new o.ReactiveEffect((()=>{if(e.isMounted){let t,{next:n,bu:o,u:r,parent:d,vnode:h}=e,p=n;i(n||e.vnode),Tn(e,!1),n?(n.el=h.el,X(e,n,u)):n=h,o&&(0,s.invokeArrayFns)(o),(t=n.props&&n.props.onVnodeBeforeUpdate)&&go(t,d,n,h),Tn(e,!0),Sn(e,"render");const f=de(e);kn(e,"render");const m=e.subTree;e.subTree=f,Sn(e,"patch"),w(m,f,g(m.el),le(m),e,l,c),kn(e,"patch"),n.el=f.el,null===p&&ye(e,f.el),r&&Pn(r,l),(t=n.props&&n.props.onVnodeUpdated)&&Pn((()=>go(t,d,n,h)),l),Y(e),a()}else{let o;const{el:i,props:a}=t,{bm:u,m:d,parent:h}=e,p=qe(t);if(Tn(e,!1),u&&(0,s.invokeArrayFns)(u),!p&&(o=a&&a.onVnodeBeforeMount)&&go(o,h,t),Tn(e,!0),i&&fe){const n=()=>{Sn(e,"render"),e.subTree=de(e),kn(e,"render"),Sn(e,"hydrate"),fe(i,e.subTree,e,l,null),kn(e,"hydrate")};p?t.type.__asyncLoader().then((()=>!e.isUnmounted&&n())):n()}else{Sn(e,"render");const o=e.subTree=de(e);kn(e,"render"),Sn(e,"patch"),w(null,o,n,r,e,l,c),kn(e,"patch"),t.el=o.el}if(d&&Pn(d,l),!p&&(o=a&&a.onVnodeMounted)){const e=t;Pn((()=>go(o,h,e)),l)}(256&t.shapeFlag||h&&qe(h.vnode)&&256&h.vnode.shapeFlag)&&e.a&&Pn(e.a,l),e.isMounted=!0,G(e),t=n=r=null}}),(()=>j(h)),e.scope),h=e.update=()=>d.run();h.id=e.uid,Tn(e,!0),d.onTrack=e.rtc?t=>(0,s.invokeArrayFns)(e.rtc,t):void 0,d.onTrigger=e.rtg?t=>(0,s.invokeArrayFns)(e.rtg,t):void 0,h.ownerInstance=e,h()},X=(e,t,n)=>{t.component=e;const r=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,r){const{props:i,attrs:a,vnode:{patchFlag:l}}=e,c=(0,o.toRaw)(i),[u]=e.propsOptions;let d=!1;if(function(e){for(;e;){if(e.type.__hmrId)return!0;e=e.parent}}(e)||!(r||l>0)||16&l){let o;qt(e,t,i,a)&&(d=!0);for(const r in c)t&&((0,s.hasOwn)(t,r)||(o=(0,s.hyphenate)(r))!==r&&(0,s.hasOwn)(t,o))||(u?!n||void 0===n[r]&&void 0===n[o]||(i[r]=Kt(u,c,r,void 0,e,!0)):delete i[r]);if(a!==c)for(const e in a)t&&(0,s.hasOwn)(t,e)||(delete a[e],d=!0)}else if(8&l){const n=e.vnode.dynamicProps;for(let o=0;o<n.length;o++){let r=n[o];if(te(e.emitsOptions,r))continue;const l=t[r];if(u)if((0,s.hasOwn)(a,r))l!==a[r]&&(a[r]=l,d=!0);else{const t=(0,s.camelize)(r);i[t]=Kt(u,c,t,l,e,!1)}else l!==a[r]&&(a[r]=l,d=!0)}}d&&(0,o.trigger)(e,"set","$attrs"),tn(t||{},i,e)}(e,t.props,r,n),((e,t,n)=>{const{vnode:o,slots:r}=e;let i=!0,a=s.EMPTY_OBJ;if(32&o.shapeFlag){const e=t._;e?L?(0,s.extend)(r,t):n&&1===e?i=!1:((0,s.extend)(r,t),n||1!==e||delete r._):(i=!t.$stable,dn(t,r)),a=t}else t&&(hn(e,t),a={default:1});if(i)for(const e in r)ln(e)||e in a||delete r[e]})(e,t.children,n),(0,o.pauseTracking)(),C(),(0,o.resetTracking)()},Q=(e,t,n,o,s,r,i,a,l=!1)=>{const c=e&&e.children,u=e?e.shapeFlag:0,d=t.children,{patchFlag:h,shapeFlag:p}=t;if(h>0){if(128&h)return void ee(c,d,n,o,s,r,i,a,l);if(256&h)return void Z(c,d,n,o,s,r,i,a,l)}8&p?(16&u&&ae(c,s,r),d!==c&&m(n,d)):16&u?16&p?ee(c,d,n,o,s,r,i,a,l):ae(c,s,r,!0):(8&u&&m(n,""),16&p&&D(d,n,o,s,r,i,a,l))},Z=(e,t,n,o,r,i,a,l,c)=>{e=e||s.EMPTY_ARR,t=t||s.EMPTY_ARR;const u=e.length,d=t.length,h=Math.min(u,d);let p;for(p=0;p<h;p++){const o=t[p]=c?po(t[p]):ho(t[p]);w(e[p],o,n,null,r,i,a,l,c)}u>d?ae(e,r,i,!0,!1,h):D(t,n,o,r,i,a,l,c,h)},ee=(e,t,n,o,r,i,a,c,u)=>{let d=0;const h=t.length;let p=e.length-1,f=h-1;for(;d<=p&&d<=f;){const o=e[d],s=t[d]=u?po(t[d]):ho(t[d]);if(!Qn(o,s))break;w(o,s,n,null,r,i,a,c,u),d++}for(;d<=p&&d<=f;){const o=e[p],s=t[f]=u?po(t[f]):ho(t[f]);if(!Qn(o,s))break;w(o,s,n,null,r,i,a,c,u),p--,f--}if(d>p){if(d<=f){const e=f+1,s=e<h?t[e].el:o;for(;d<=f;)w(null,t[d]=u?po(t[d]):ho(t[d]),n,s,r,i,a,c,u),d++}}else if(d>f)for(;d<=p;)oe(e[d],r,i,!0),d++;else{const m=d,g=d,v=new Map;for(d=g;d<=f;d++){const e=t[d]=u?po(t[d]):ho(t[d]);null!=e.key&&(v.has(e.key)&&l("Duplicate keys found during update:",JSON.stringify(e.key),"Make sure keys are unique."),v.set(e.key,d))}let y,b=0;const _=f-g+1;let x=!1,S=0;const k=new Array(_);for(d=0;d<_;d++)k[d]=0;for(d=m;d<=p;d++){const o=e[d];if(b>=_){oe(o,r,i,!0);continue}let s;if(null!=o.key)s=v.get(o.key);else for(y=g;y<=f;y++)if(0===k[y-g]&&Qn(o,t[y])){s=y;break}void 0===s?oe(o,r,i,!0):(k[s-g]=d+1,s>=S?S=s:x=!0,w(o,t[s],n,null,r,i,a,c,u),b++)}const j=x?function(e){const t=e.slice(),n=[0];let o,s,r,i,a;const l=e.length;for(o=0;o<l;o++){const l=e[o];if(0!==l){if(s=n[n.length-1],e[s]<l){t[o]=s,n.push(o);continue}for(r=0,i=n.length-1;r<i;)a=r+i>>1,e[n[a]]<l?r=a+1:i=a;l<e[n[r]]&&(r>0&&(t[o]=n[r-1]),n[r]=o)}}for(r=n.length,i=n[r-1];r-- >0;)n[r]=i,i=t[i];return n}(k):s.EMPTY_ARR;for(y=j.length-1,d=_-1;d>=0;d--){const e=g+d,s=t[e],l=e+1<h?t[e+1].el:o;0===k[d]?w(null,s,n,l,r,i,a,c,u):x&&(y<0||d!==j[y]?ne(s,n,l,2):y--)}}},ne=(e,t,n,o,s=null)=>{const{el:i,type:a,transition:l,children:c,shapeFlag:u}=e;if(6&u)ne(e.component.subTree,t,n,o);else if(128&u)e.suspense.move(t,n,o);else if(64&u)a.move(e,t,n,ue);else if(a!==In)if(a!==Vn)if(2!==o&&1&u&&l)if(0===o)l.beforeEnter(i),r(i,t,n),Pn((()=>l.enter(i)),s);else{const{leave:e,delayLeave:o,afterLeave:s}=l,a=()=>r(i,t,n),c=()=>{e(i,(()=>{a(),s&&s()}))};o?o(i,a,c):c()}else r(i,t,n);else(({el:e,anchor:t},n,o)=>{let s;for(;e&&e!==t;)s=b(e),r(e,n,o),e=s;r(t,n,o)})(e,t,n);else{r(i,t,n);for(let e=0;e<c.length;e++)ne(c[e],t,n,o);r(e.anchor,t,n)}},oe=(e,t,n,o=!1,s=!1)=>{const{type:r,props:i,ref:a,children:l,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:h}=e;if(null!=a&&gn(a,null,n,e,!0),256&u)return void t.ctx.deactivate(e);const p=1&u&&h,f=!qe(e);let m;if(f&&(m=i&&i.onVnodeBeforeUnmount)&&go(m,t,e),6&u)ie(e.component,n,o);else{if(128&u)return void e.suspense.unmount(n,o);p&&_t(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,s,ue,o):c&&(r!==In||d>0&&64&d)?ae(c,t,n,!1,!0):(r===In&&384&d||!s&&16&u)&&ae(l,t,n),o&&se(e)}(f&&(m=i&&i.onVnodeUnmounted)||p)&&Pn((()=>{m&&go(m,t,e),p&&_t(e,null,t,"unmounted")}),n)},se=e=>{const{type:t,el:n,anchor:o,transition:s}=e;if(t===In)return void(e.patchFlag>0&&2048&e.patchFlag&&s&&!s.persisted?e.children.forEach((e=>{e.type===Fn?c(e.el):se(e)})):re(n,o));if(t===Vn)return void T(e);const r=()=>{c(n),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:o}=s,i=()=>t(n,r);o?o(e.el,r,i):i()}else r()},re=(e,t)=>{let n;for(;e!==t;)n=b(e),c(e),e=n;c(t)},ie=(e,t,n)=>{e.type.__hmrId&&function(e){B.get(e.type.__hmrId).instances.delete(e)}(e);const{bum:o,scope:r,update:i,subTree:a,um:l}=e;var c;o&&(0,s.invokeArrayFns)(o),r.stop(),i&&(i.active=!1,oe(a,e,t,n)),l&&Pn(l,t),Pn((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve()),c=e,$&&"function"==typeof $.cleanupBuffer&&!$.cleanupBuffer(c)&&q(c)},ae=(e,t,n,o=!1,s=!1,r=0)=>{for(let i=r;i<e.length;i++)oe(e[i],t,n,o,s)},le=e=>6&e.shapeFlag?le(e.component.subTree):128&e.shapeFlag?e.suspense.next():b(e.anchor||e.el),ce=(e,t,n)=>{null==e?t._vnode&&oe(t._vnode,null,null,!0):w(t._vnode||null,e,t,null,null,null,n),C(),E(),t._vnode=e},ue={p:w,um:oe,m:ne,r:se,mt:U,mc:D,pc:Q,pbc:F,n:le,o:e};let he,fe;return t&&([he,fe]=t(ue)),{render:ce,hydrate:he,createApp:mn(ce,he)}}function Tn({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function Mn(e,t,n=!1){const o=e.children,r=t.children;if((0,s.isArray)(o)&&(0,s.isArray)(r))for(let e=0;e<o.length;e++){const t=o[e];let s=r[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=r[e]=po(r[e]),s.el=t.el),n||Mn(t,s)),s.type!==Fn||s.el||(s.el=t.el)}}const An=e=>e&&(e.disabled||""===e.disabled),Rn=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,Ln=(e,t)=>{const n=e&&e.to;if((0,s.isString)(n)){if(t){const e=t(n);return e||l(`Failed to locate Teleport target with selector "${n}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`),e}return l("Current renderer does not support string target for Teleports. (missing querySelector renderer option)"),null}return n||An(e)||l(`Invalid Teleport target: ${n}`),n};function Dn(e,t,n,{o:{insert:o},m:s},r=2){0===r&&o(e.targetAnchor,t,n);const{el:i,anchor:a,shapeFlag:l,children:c,props:u}=e,d=2===r;if(d&&o(i,t,n),(!d||An(u))&&16&l)for(let e=0;e<c.length;e++)s(c[e],t,n,2);d&&o(a,t,n)}const Bn={__isTeleport:!0,process(e,t,n,o,s,r,i,a,c,u){const{mc:d,pc:h,pbc:p,o:{insert:f,querySelector:m,createText:g,createComment:v}}=u,y=An(t.props);let{shapeFlag:b,children:_,dynamicChildren:x}=t;if(L&&(c=!1,x=null),null==e){const e=t.el=v("teleport start"),u=t.anchor=v("teleport end");f(e,n,o),f(u,n,o);const h=t.target=Ln(t.props,m),p=t.targetAnchor=g("");h?(f(p,h),i=i||Rn(h)):y||l("Invalid Teleport target on mount:",h,`(${typeof h})`);const x=(e,t)=>{16&b&&d(_,e,t,s,r,i,a,c)};y?x(n,u):h&&x(h,p)}else{t.el=e.el;const o=t.anchor=e.anchor,d=t.target=e.target,f=t.targetAnchor=e.targetAnchor,g=An(e.props),v=g?n:d,b=g?o:f;if(i=i||Rn(d),x?(p(e.dynamicChildren,x,v,s,r,i,a),Mn(e,t,!0)):c||h(e,t,v,b,s,r,i,a,!1),y)g||Dn(t,n,o,u,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=Ln(t.props,m);e?Dn(t,e,null,u,0):l("Invalid Teleport target on update:",d,`(${typeof d})`)}else g&&Dn(t,d,f,u,1)}},remove(e,t,n,o,{um:s,o:{remove:r}},i){const{shapeFlag:a,children:l,anchor:c,targetAnchor:u,target:d,props:h}=e;if(d&&r(u),(i||!An(h))&&(r(c),16&a))for(let e=0;e<l.length;e++){const o=l[e];s(o,t,n,!0,!!o.dynamicChildren)}},move:Dn,hydrate:function(e,t,n,o,s,r,{o:{nextSibling:i,parentNode:a,querySelector:l}},c){const u=t.target=Ln(t.props,l);if(u){const l=u._lpa||u.firstChild;if(16&t.shapeFlag)if(An(t.props))t.anchor=c(i(e),t,a(e),n,o,s,r),t.targetAnchor=l;else{t.anchor=i(e);let a=l;for(;a;)if(a=i(a),a&&8===a.nodeType&&"teleport anchor"===a.data){t.targetAnchor=a,u._lpa=t.targetAnchor&&i(t.targetAnchor);break}c(l,t,u,n,o,s,r)}}return t.anchor&&i(t.anchor)}},In=Symbol("Fragment"),Nn=Symbol("Text"),Fn=Symbol("Comment"),Vn=Symbol("Static"),$n=[];let zn=null;function Hn(e=!1){$n.push(zn=e?null:[])}function Un(){$n.pop(),zn=$n[$n.length-1]||null}let Wn,Gn=1;function Yn(e){Gn+=e}function qn(e){return e.dynamicChildren=Gn>0?zn||s.EMPTY_ARR:null,Un(),Gn>0&&zn&&zn.push(e),e}function Kn(e,t,n,o,s,r){return qn(oo(e,t,n,o,s,r,!0))}function Jn(e,t,n,o,s){return qn(so(e,t,n,o,s,!0))}function Xn(e){return!!e&&!0===e.__v_isVNode}function Qn(e,t){return!(6&t.shapeFlag&&D.has(t.type))&&e.type===t.type&&e.key===t.key}function Zn(e){Wn=e}const eo="__vInternal",to=({key:e})=>null!=e?e:null,no=({ref:e,ref_key:t,ref_for:n})=>null!=e?(0,s.isString)(e)||(0,o.isRef)(e)||(0,s.isFunction)(e)?{i:ne,r:e,k:t,f:!!n}:e:null;function oo(e,t=null,n=null,o=0,r=null,i=(e===In?0:1),a=!1,c=!1){const u={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&to(t),ref:t&&no(t),scopeId:oe,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:o,dynamicProps:r,dynamicChildren:null,appContext:null};return c?(fo(u,n),128&i&&e.normalize(u)):n&&(u.shapeFlag|=(0,s.isString)(n)?8:16),u.key!=u.key&&l("VNode created with invalid key (NaN). VNode type:",u.type),Gn>0&&!a&&zn&&(u.patchFlag>0||6&i)&&32!==u.patchFlag&&zn.push(u),u}const so=(...e)=>function(e,t=null,n=null,r=0,i=null,a=!1){if(e&&e!==St||(e||l(`Invalid vnode type when creating vnode: ${e}.`),e=Fn),Xn(e)){const o=io(e,t,!0);return n&&fo(o,n),Gn>0&&!a&&zn&&(6&o.shapeFlag?zn[zn.indexOf(e)]=o:zn.push(o)),o.patchFlag|=-2,o}if(Vo(e)&&(e=e.__vccOpts),t){t=ro(t);let{class:e,style:n}=t;e&&!(0,s.isString)(e)&&(t.class=(0,s.normalizeClass)(e)),(0,s.isObject)(n)&&((0,o.isProxy)(n)&&!(0,s.isArray)(n)&&(n=(0,s.extend)({},n)),t.style=(0,s.normalizeStyle)(n))}const c=(0,s.isString)(e)?1:be(e)?128:(e=>e.__isTeleport)(e)?64:(0,s.isObject)(e)?4:(0,s.isFunction)(e)?2:0;return 4&c&&(0,o.isProxy)(e)&&l("Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with `markRaw` or using `shallowRef` instead of `ref`.","\nComponent that was made reactive: ",e=(0,o.toRaw)(e)),oo(e,t,n,r,i,c,a,!0)}(...Wn?Wn(e,ne):e);function ro(e){return e?(0,o.isProxy)(e)||eo in e?(0,s.extend)({},e):e:null}function io(e,t,n=!1){const{props:o,ref:r,patchFlag:i,children:a}=e,l=t?mo(o||{},t):o;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&to(l),ref:t&&t.ref?n&&r?(0,s.isArray)(r)?r.concat(no(t)):[r,no(t)]:no(t):r,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:-1===i&&(0,s.isArray)(a)?a.map(ao):a,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==In?-1===i?16:16|i:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&io(e.ssContent),ssFallback:e.ssFallback&&io(e.ssFallback),el:e.el,anchor:e.anchor}}function ao(e){const t=io(e);return(0,s.isArray)(e.children)&&(t.children=e.children.map(ao)),t}function lo(e=" ",t=0){return so(Nn,null,e,t)}function co(e,t){const n=so(Vn,null,e);return n.staticCount=t,n}function uo(e="",t=!1){return t?(Hn(),Jn(Fn,null,e)):so(Fn,null,e)}function ho(e){return null==e||"boolean"==typeof e?so(Fn):(0,s.isArray)(e)?so(In,null,e.slice()):"object"==typeof e?po(e):so(Nn,null,String(e))}function po(e){return null===e.el&&-1!==e.patchFlag||e.memo?e:io(e)}function fo(e,t){let n=0;const{shapeFlag:o}=e;if(null==t)t=null;else if((0,s.isArray)(t))n=16;else if("object"==typeof t){if(65&o){const n=t.default;return void(n&&(n._c&&(n._d=!1),fo(e,n()),n._c&&(n._d=!0)))}{n=32;const o=t._;o||eo in t?3===o&&ne&&(1===ne.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ne}}else(0,s.isFunction)(t)?(t={default:t,_ctx:ne},n=32):(t=String(t),64&o?(n=16,t=[lo(t)]):n=8);e.children=t,e.shapeFlag|=n}function mo(...e){const t={};for(let n=0;n<e.length;n++){const o=e[n];for(const e in o)if("class"===e)t.class!==o.class&&(t.class=(0,s.normalizeClass)([t.class,o.class]));else if("style"===e)t.style=(0,s.normalizeStyle)([t.style,o.style]);else if((0,s.isOn)(e)){const n=t[e],r=o[e];!r||n===r||(0,s.isArray)(n)&&n.includes(r)||(t[e]=n?[].concat(n,r):r)}else""!==e&&(t[e]=o[e])}return t}function go(e,t,n,o=null){p(e,t,7,[n,o])}const vo=pn();let yo=0;function bo(e,t,n){const r=e.type,i=(t?t.appContext:e.appContext)||vo,a={uid:yo++,vnode:e,type:r,parent:t,appContext:i,root:null,next:null,subTree:null,effect:null,update:null,scope:new o.EffectScope(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(i.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Jt(r,i),emitsOptions:ee(r,i),emit:null,emitted:null,propsDefaults:s.EMPTY_OBJ,inheritAttrs:r.inheritAttrs,ctx:s.EMPTY_OBJ,data:s.EMPTY_OBJ,props:s.EMPTY_OBJ,attrs:s.EMPTY_OBJ,slots:s.EMPTY_OBJ,refs:s.EMPTY_OBJ,setupState:s.EMPTY_OBJ,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return a.ctx=function(e){const t={};return Object.defineProperty(t,"_",{configurable:!0,enumerable:!1,get:()=>e}),Object.keys(Lt).forEach((n=>{Object.defineProperty(t,n,{configurable:!0,enumerable:!1,get:()=>Lt[n](e),set:s.NOOP})})),t}(a),a.root=t?t.root:a,a.emit=Z.bind(null,a),e.ce&&e.ce(a),a}let _o=null;const xo=()=>_o||ne,wo=e=>{_o=e,e.scope.on()},So=()=>{_o&&_o.scope.off(),_o=null},ko=(0,s.makeMap)("slot,component");function jo(e,t){const n=t.isNativeTag||s.NO;(ko(e)||n(e))&&l("Do not use built-in or reserved HTML elements as component id: "+e)}function Po(e){return 4&e.vnode.shapeFlag}let Oo,Co,Eo=!1;function To(e,t=!1){Eo=t;const{props:n,children:r}=e.vnode,i=Po(e);!function(e,t,n,r=!1){const i={},a={};(0,s.def)(a,eo,1),e.propsDefaults=Object.create(null),qt(e,t,i,a);for(const t in e.propsOptions[0])t in i||(i[t]=void 0);tn(t||{},i,e),n?e.props=r?i:(0,o.shallowReactive)(i):e.type.props?e.props=i:e.props=a,e.attrs=a}(e,n,i,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=(0,o.toRaw)(t),(0,s.def)(t,"_",n)):dn(t,e.slots={})}else e.slots={},t&&hn(e,t);(0,s.def)(e.slots,eo,1)})(e,r);const a=i?function(e,t){var n;const r=e.type;if(r.name&&jo(r.name,e.appContext.config),r.components){const t=Object.keys(r.components);for(let n=0;n<t.length;n++)jo(t[n],e.appContext.config)}if(r.directives){const e=Object.keys(r.directives);for(let t=0;t<e.length;t++)yt(e[t])}r.compilerOptions&&Ro()&&l('"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.'),e.accessCache=Object.create(null),e.proxy=(0,o.markRaw)(new Proxy(e.ctx,Bt)),function(e){const{ctx:t,propsOptions:[n]}=e;n&&Object.keys(n).forEach((n=>{Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>e.props[n],set:s.NOOP})}))}(e);const{setup:i}=r;if(i){const a=e.setupContext=i.length>1?Do(e):null;wo(e),(0,o.pauseTracking)();const c=h(i,e,0,[(0,o.shallowReadonly)(e.props),a]);if((0,o.resetTracking)(),So(),(0,s.isPromise)(c)){if(c.then(So,So),t)return c.then((n=>{Mo(e,n,t)})).catch((t=>{f(t,e,0)}));e.asyncDep=c,e.suspense||l(`Component <${null!==(n=r.name)&&void 0!==n?n:"Anonymous"}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`)}else Mo(e,c,t)}else Lo(e,t)}(e,t):void 0;return Eo=!1,a}function Mo(e,t,n){(0,s.isFunction)(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:(0,s.isObject)(t)?(Xn(t)&&l("setup() should not return VNodes directly - return a render function instead."),e.devtoolsRawSetupState=t,e.setupState=(0,o.proxyRefs)(t),function(e){const{ctx:t,setupState:n}=e;Object.keys((0,o.toRaw)(n)).forEach((e=>{if(!n.__isScriptSetup){if(Dt(e[0]))return void l(`setup() return property ${JSON.stringify(e)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:()=>n[e],set:s.NOOP})}}))}(e)):void 0!==t&&l("setup() should return an object. Received: "+(null===t?"null":typeof t)),Lo(e,n)}function Ao(e){Oo=e,Co=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,It))}}const Ro=()=>!Oo;function Lo(e,t,n){const r=e.type;if(!e.render){if(!t&&Oo&&!r.render){const t=r.template||$t(e).template;if(t){Sn(e,"compile");const{isCustomElement:n,compilerOptions:o}=e.appContext.config,{delimiters:i,compilerOptions:a}=r,l=(0,s.extend)((0,s.extend)({isCustomElement:n,delimiters:i},o),a);r.render=Oo(t,l),kn(e,"compile")}}e.render=r.render||s.NOOP,Co&&Co(e)}__VUE_OPTIONS_API__&&(wo(e),(0,o.pauseTracking)(),function(e){const t=$t(e),n=e.proxy,r=e.ctx;Nt=!1,t.beforeCreate&&Ft(t.beforeCreate,e,"bc");const{data:i,computed:a,methods:c,watch:u,provide:d,inject:h,created:p,beforeMount:f,mounted:m,beforeUpdate:g,updated:v,activated:y,deactivated:b,beforeDestroy:_,beforeUnmount:x,destroyed:w,unmounted:S,render:k,renderTracked:j,renderTriggered:P,errorCaptured:O,serverPrefetch:C,expose:E,inheritAttrs:T,components:M,directives:A,filters:R}=t,L=function(){const e=Object.create(null);return(t,n)=>{e[n]?l(`${t} property "${n}" is already defined in ${e[n]}.`):e[n]=t}}();{const[t]=e.propsOptions;if(t)for(const e in t)L("Props",e)}if(h&&function(e,t,n=s.NOOP,r=!1){(0,s.isArray)(e)&&(e=Wt(e));for(const i in e){const a=e[i];let c;c=(0,s.isObject)(a)?"default"in a?Ce(a.from||i,a.default,!0):Ce(a.from||i):Ce(a),(0,o.isRef)(c)?r?Object.defineProperty(t,i,{enumerable:!0,configurable:!0,get:()=>c.value,set:e=>c.value=e}):(l(`injected property "${i}" is a ref and will be auto-unwrapped and no longer needs \`.value\` in the next minor release. To opt-in to the new behavior now, set \`app.config.unwrapInjectedRef = true\` (this config is temporary and will not be needed in the future.)`),t[i]=c):t[i]=c,n("Inject",i)}}(h,r,L,e.appContext.config.unwrapInjectedRef),c)for(const e in c){const t=c[e];(0,s.isFunction)(t)?(Object.defineProperty(r,e,{value:t.bind(n),configurable:!0,enumerable:!0,writable:!0}),L("Methods",e)):l(`Method "${e}" has type "${typeof t}" in the component definition. Did you reference the function correctly?`)}if(i){(0,s.isFunction)(i)||l("The data option must be a function. Plain object usage is no longer supported.");const t=i.call(n,n);if((0,s.isPromise)(t)&&l("data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>."),(0,s.isObject)(t)){e.data=(0,o.reactive)(t);for(const e in t)L("Data",e),Dt(e[0])||Object.defineProperty(r,e,{configurable:!0,enumerable:!0,get:()=>t[e],set:s.NOOP})}else l("data() should return an object.")}if(Nt=!0,a)for(const e in a){const t=a[e],o=(0,s.isFunction)(t)?t.bind(n,n):(0,s.isFunction)(t.get)?t.get.bind(n,n):s.NOOP;o===s.NOOP&&l(`Computed property "${e}" has no getter.`);const i=!(0,s.isFunction)(t)&&(0,s.isFunction)(t.set)?t.set.bind(n):()=>{l(`Write operation failed: computed property "${e}" is readonly.`)},c=$o({get:o,set:i});Object.defineProperty(r,e,{enumerable:!0,configurable:!0,get:()=>c.value,set:e=>c.value=e}),L("Computed",e)}if(u)for(const e in u)Vt(u[e],r,n,e);if(d){const e=(0,s.isFunction)(d)?d.call(n):d;Reflect.ownKeys(e).forEach((t=>{Oe(t,e[t])}))}function D(e,t){(0,s.isArray)(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(p&&Ft(p,e,"c"),D(lt,f),D(ct,m),D(ut,g),D(dt,v),D(et,y),D(tt,b),D(vt,O),D(gt,j),D(mt,P),D(ht,x),D(pt,S),D(ft,C),(0,s.isArray)(E))if(E.length){const t=e.exposed||(e.exposed={});E.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});k&&e.render===s.NOOP&&(e.render=k),null!=T&&(e.inheritAttrs=T),M&&(e.components=M),A&&(e.directives=A)}(e),(0,o.resetTracking)(),So()),r.render||e.render!==s.NOOP||t||(!Oo&&r.template?l('Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".'):l("Component is missing template or render function."))}function Do(e){let t;return Object.freeze({get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,n)=>(ue(),(0,o.track)(e,"get","$attrs"),t[n]),set:()=>(l("setupContext.attrs is readonly."),!1),deleteProperty:()=>(l("setupContext.attrs is readonly."),!1)})}(e))},get slots(){return(0,o.shallowReadonly)(e.slots)},get emit(){return(t,...n)=>e.emit(t,...n)},expose:t=>{e.exposed&&l("expose() should be called only once per setup()."),e.exposed=t||{}}})}function Bo(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy((0,o.proxyRefs)((0,o.markRaw)(e.exposed)),{get:(t,n)=>n in t?t[n]:n in Lt?Lt[n](e):void 0}))}const Io=/(?:^|[-_])(\w)/g;function No(e,t=!0){return(0,s.isFunction)(e)?e.displayName||e.name:e.name||t&&e.__name}function Fo(e,t,n=!1){let o=No(t);if(!o&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(o=e[1])}if(!o&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};o=n(e.components||e.parent.type.components)||n(e.appContext.components)}return o?o.replace(Io,(e=>e.toUpperCase())).replace(/[-_]/g,""):n?"App":"Anonymous"}function Vo(e){return(0,s.isFunction)(e)&&"__vccOpts"in e}const $o=(e,t)=>(0,o.computed)(e,t,Eo),zo=e=>l(`${e}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);function Ho(){return zo("defineProps"),null}function Uo(){return zo("defineEmits"),null}function Wo(e){zo("defineExpose")}function Go(e,t){return zo("withDefaults"),null}function Yo(){return Ko().slots}function qo(){return Ko().attrs}function Ko(){const e=xo();return e||l("useContext() called without active instance."),e.setupContext||(e.setupContext=Do(e))}function Jo(e,t){const n=(0,s.isArray)(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const o=n[e];o?(0,s.isArray)(o)||(0,s.isFunction)(o)?n[e]={type:o,default:t[e]}:o.default=t[e]:null===o?n[e]={default:t[e]}:l(`props default key "${e}" has no corresponding declaration.`)}return n}function Xo(e,t){const n={};for(const o in e)t.includes(o)||Object.defineProperty(n,o,{enumerable:!0,get:()=>e[o]});return n}function Qo(e){const t=xo();t||l("withAsyncContext called without active current instance. This is likely a bug.");let n=e();return So(),(0,s.isPromise)(n)&&(n=n.catch((e=>{throw wo(t),e}))),[n,()=>wo(t)]}function Zo(e,t,n){const o=arguments.length;return 2===o?(0,s.isObject)(t)&&!(0,s.isArray)(t)?Xn(t)?so(e,null,[t]):so(e,t):so(e,null,t):(o>3?n=Array.prototype.slice.call(arguments,2):3===o&&Xn(n)&&(n=[n]),so(e,t,n))}const es=Symbol("ssrContext"),ts=()=>{{const e=Ce(es);return e||l("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function ns(e){return!(!e||!e.__v_isShallow)}function os(){if("undefined"==typeof window)return;const e={style:"color:#3ba776"},t={style:"color:#0b1bc9"},n={style:"color:#b62e24"},r={style:"color:#9d288c"},i={header:t=>{return(0,s.isObject)(t)?t.__isVue?["div",e,"VueInstance"]:(0,o.isRef)(t)?["div",{},["span",e,(n=t,ns(n)?"ShallowRef":n.effect?"ComputedRef":"Ref")],"<",c(t.value),">"]:(0,o.isReactive)(t)?["div",{},["span",e,ns(t)?"ShallowReactive":"Reactive"],"<",c(t),">"+((0,o.isReadonly)(t)?" (readonly)":"")]:(0,o.isReadonly)(t)?["div",{},["span",e,ns(t)?"ShallowReadonly":"Readonly"],"<",c(t),">"]:null:null;var n},hasBody:e=>e&&e.__isVue,body(e){if(e&&e.__isVue)return["div",{},...a(e.$)]}};function a(e){const t=[];e.type.props&&e.props&&t.push(l("props",(0,o.toRaw)(e.props))),e.setupState!==s.EMPTY_OBJ&&t.push(l("setup",e.setupState)),e.data!==s.EMPTY_OBJ&&t.push(l("data",(0,o.toRaw)(e.data)));const n=u(e,"computed");n&&t.push(l("computed",n));const i=u(e,"inject");return i&&t.push(l("injected",i)),t.push(["div",{},["span",{style:r.style+";opacity:0.66"},"$ (internal): "],["object",{object:e}]]),t}function l(e,t){return t=(0,s.extend)({},t),Object.keys(t).length?["div",{style:"line-height:1.25em;margin-bottom:0.6em"},["div",{style:"color:#476582"},e],["div",{style:"padding-left:1.25em"},...Object.keys(t).map((e=>["div",{},["span",r,e+": "],c(t[e],!1)]))]]:["span",{}]}function c(e,i=!0){return"number"==typeof e?["span",t,e]:"string"==typeof e?["span",n,JSON.stringify(e)]:"boolean"==typeof e?["span",r,e]:(0,s.isObject)(e)?["object",{object:i?(0,o.toRaw)(e):e}]:["span",n,String(e)]}function u(e,t){const n=e.type;if((0,s.isFunction)(n))return;const o={};for(const s in e.ctx)d(n,s,t)&&(o[s]=e.ctx[s]);return o}function d(e,t,n){const o=e[n];return!!((0,s.isArray)(o)&&o.includes(t)||(0,s.isObject)(o)&&t in o)||!(!e.extends||!d(e.extends,t,n))||!(!e.mixins||!e.mixins.some((e=>d(e,t,n))))||void 0}window.devtoolsFormatters?window.devtoolsFormatters.push(i):window.devtoolsFormatters=[i]}function ss(e,t,n,o){const s=n[o];if(s&&rs(s,e))return s;const r=t();return r.memo=e.slice(),n[o]=r}function rs(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if((0,s.hasChanged)(n[e],t[e]))return!1;return Gn>0&&zn&&zn.push(e),!0}const is="3.2.41",as={createComponentInstance:bo,setupComponent:To,renderComponentRoot:de,setCurrentRenderingInstance:se,isVNode:Xn,normalizeVNode:ho},ls=null,cs=null},"./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>s.BaseTransition,Comment:()=>s.Comment,EffectScope:()=>s.EffectScope,Fragment:()=>s.Fragment,KeepAlive:()=>s.KeepAlive,ReactiveEffect:()=>s.ReactiveEffect,Static:()=>s.Static,Suspense:()=>s.Suspense,Teleport:()=>s.Teleport,Text:()=>s.Text,Transition:()=>E,TransitionGroup:()=>Y,VueElement:()=>w,callWithAsyncErrorHandling:()=>s.callWithAsyncErrorHandling,callWithErrorHandling:()=>s.callWithErrorHandling,camelize:()=>s.camelize,capitalize:()=>s.capitalize,cloneVNode:()=>s.cloneVNode,compatUtils:()=>s.compatUtils,computed:()=>s.computed,createApp:()=>je,createBlock:()=>s.createBlock,createCommentVNode:()=>s.createCommentVNode,createElementBlock:()=>s.createElementBlock,createElementVNode:()=>s.createElementVNode,createHydrationRenderer:()=>s.createHydrationRenderer,createPropsRestProxy:()=>s.createPropsRestProxy,createRenderer:()=>s.createRenderer,createSSRApp:()=>Pe,createSlots:()=>s.createSlots,createStaticVNode:()=>s.createStaticVNode,createTextVNode:()=>s.createTextVNode,createVNode:()=>s.createVNode,customRef:()=>s.customRef,defineAsyncComponent:()=>s.defineAsyncComponent,defineComponent:()=>s.defineComponent,defineCustomElement:()=>b,defineEmits:()=>s.defineEmits,defineExpose:()=>s.defineExpose,defineProps:()=>s.defineProps,defineSSRCustomElement:()=>_,devtools:()=>s.devtools,effect:()=>s.effect,effectScope:()=>s.effectScope,getCurrentInstance:()=>s.getCurrentInstance,getCurrentScope:()=>s.getCurrentScope,getTransitionRawChildren:()=>s.getTransitionRawChildren,guardReactiveProps:()=>s.guardReactiveProps,h:()=>s.h,handleError:()=>s.handleError,hydrate:()=>ke,initCustomFormatter:()=>s.initCustomFormatter,initDirectivesForSSR:()=>Me,inject:()=>s.inject,isMemoSame:()=>s.isMemoSame,isProxy:()=>s.isProxy,isReactive:()=>s.isReactive,isReadonly:()=>s.isReadonly,isRef:()=>s.isRef,isRuntimeOnly:()=>s.isRuntimeOnly,isShallow:()=>s.isShallow,isVNode:()=>s.isVNode,markRaw:()=>s.markRaw,mergeDefaults:()=>s.mergeDefaults,mergeProps:()=>s.mergeProps,nextTick:()=>s.nextTick,normalizeClass:()=>s.normalizeClass,normalizeProps:()=>s.normalizeProps,normalizeStyle:()=>s.normalizeStyle,onActivated:()=>s.onActivated,onBeforeMount:()=>s.onBeforeMount,onBeforeUnmount:()=>s.onBeforeUnmount,onBeforeUpdate:()=>s.onBeforeUpdate,onDeactivated:()=>s.onDeactivated,onErrorCaptured:()=>s.onErrorCaptured,onMounted:()=>s.onMounted,onRenderTracked:()=>s.onRenderTracked,onRenderTriggered:()=>s.onRenderTriggered,onScopeDispose:()=>s.onScopeDispose,onServerPrefetch:()=>s.onServerPrefetch,onUnmounted:()=>s.onUnmounted,onUpdated:()=>s.onUpdated,openBlock:()=>s.openBlock,popScopeId:()=>s.popScopeId,provide:()=>s.provide,proxyRefs:()=>s.proxyRefs,pushScopeId:()=>s.pushScopeId,queuePostFlushCb:()=>s.queuePostFlushCb,reactive:()=>s.reactive,readonly:()=>s.readonly,ref:()=>s.ref,registerRuntimeCompiler:()=>s.registerRuntimeCompiler,render:()=>Se,renderList:()=>s.renderList,renderSlot:()=>s.renderSlot,resolveComponent:()=>s.resolveComponent,resolveDirective:()=>s.resolveDirective,resolveDynamicComponent:()=>s.resolveDynamicComponent,resolveFilter:()=>s.resolveFilter,resolveTransitionHooks:()=>s.resolveTransitionHooks,setBlockTracking:()=>s.setBlockTracking,setDevtoolsHook:()=>s.setDevtoolsHook,setTransitionHooks:()=>s.setTransitionHooks,shallowReactive:()=>s.shallowReactive,shallowReadonly:()=>s.shallowReadonly,shallowRef:()=>s.shallowRef,ssrContextKey:()=>s.ssrContextKey,ssrUtils:()=>s.ssrUtils,stop:()=>s.stop,toDisplayString:()=>s.toDisplayString,toHandlerKey:()=>s.toHandlerKey,toHandlers:()=>s.toHandlers,toRaw:()=>s.toRaw,toRef:()=>s.toRef,toRefs:()=>s.toRefs,transformVNodeArgs:()=>s.transformVNodeArgs,triggerRef:()=>s.triggerRef,unref:()=>s.unref,useAttrs:()=>s.useAttrs,useCssModule:()=>S,useCssVars:()=>k,useSSRContext:()=>s.useSSRContext,useSlots:()=>s.useSlots,useTransitionState:()=>s.useTransitionState,vModelCheckbox:()=>te,vModelDynamic:()=>le,vModelRadio:()=>oe,vModelSelect:()=>se,vModelText:()=>ee,vShow:()=>ge,version:()=>s.version,warn:()=>s.warn,watch:()=>s.watch,watchEffect:()=>s.watchEffect,watchPostEffect:()=>s.watchPostEffect,watchSyncEffect:()=>s.watchSyncEffect,withAsyncContext:()=>s.withAsyncContext,withCtx:()=>s.withCtx,withDefaults:()=>s.withDefaults,withDirectives:()=>s.withDirectives,withKeys:()=>me,withMemo:()=>s.withMemo,withModifiers:()=>pe,withScopeId:()=>s.withScopeId});var o=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js"),s=n("./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"),r=n("./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js");const i="undefined"!=typeof document?document:null,a=i&&i.createElement("template"),l={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,o)=>{const s=t?i.createElementNS("http://www.w3.org/2000/svg",e):i.createElement(e,n?{is:n}:void 0);return"select"===e&&o&&null!=o.multiple&&s.setAttribute("multiple",o.multiple),s},createText:e=>i.createTextNode(e),createComment:e=>i.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>i.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,o,s,r){const i=n?n.previousSibling:t.lastChild;if(s&&(s===r||s.nextSibling))for(;t.insertBefore(s.cloneNode(!0),n),s!==r&&(s=s.nextSibling););else{a.innerHTML=o?`<svg>${e}</svg>`:e;const s=a.content;if(o){const e=s.firstChild;for(;e.firstChild;)s.appendChild(e.firstChild);s.removeChild(e)}t.insertBefore(s,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},c=/\s*!important$/;function u(e,t,n){if((0,o.isArray)(n))n.forEach((n=>u(e,t,n)));else if(null==n&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const s=function(e,t){const n=h[t];if(n)return n;let s=(0,o.camelize)(t);if("filter"!==s&&s in e)return h[t]=s;s=(0,o.capitalize)(s);for(let n=0;n<d.length;n++){const o=d[n]+s;if(o in e)return h[t]=o}return t}(e,t);c.test(n)?e.setProperty((0,o.hyphenate)(s),n.replace(c,""),"important"):e[s]=n}}const d=["Webkit","Moz","ms"],h={},p="http://www.w3.org/1999/xlink";function f(e,t,n,o){e.addEventListener(t,n,o)}const m=/(?:Once|Passive|Capture)$/;let g=0;const v=Promise.resolve(),y=/^on[a-z]/;function b(e,t){const n=(0,s.defineComponent)(e);class o extends w{constructor(e){super(n,e,t)}}return o.def=n,o}const _=e=>b(e,ke),x="undefined"!=typeof HTMLElement?HTMLElement:class{};class w extends x{constructor(e,t={},n){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&n?n(this._createVNode(),this.shadowRoot):(this.shadowRoot&&(0,s.warn)("Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use `defineSSRCustomElement`."),this.attachShadow({mode:"open"}))}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,(0,s.nextTick)((()=>{this._connected||(Se(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:n}=e,s=!(0,o.isArray)(t),r=t?s?Object.keys(t):t:[];let i;if(s)for(const e in this._props){const n=t[e];(n===Number||n&&n.type===Number)&&(this._props[e]=(0,o.toNumber)(this._props[e]),(i||(i=Object.create(null)))[e]=!0)}this._numberProps=i;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of r.map(o.camelize))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(n),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=(0,o.toNumber)(t)),this._setProp((0,o.camelize)(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,s=!0){t!==this._props[e]&&(this._props[e]=t,s&&this._instance&&this._update(),n&&(!0===t?this.setAttribute((0,o.hyphenate)(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute((0,o.hyphenate)(e),t+""):t||this.removeAttribute((0,o.hyphenate)(e))))}_update(){Se(this._createVNode(),this.shadowRoot)}_createVNode(){const e=(0,s.createVNode)(this._def,(0,o.extend)({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.ceReload=e=>{this._styles&&(this._styles.forEach((e=>this.shadowRoot.removeChild(e))),this._styles.length=0),this._applyStyles(e),this._def.__asyncLoader||(this._instance=null,this._update())},e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof w){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t),(this._styles||(this._styles=[])).push(t)}))}}function S(e="$style"){{const t=(0,s.getCurrentInstance)();if(!t)return(0,s.warn)("useCssModule must be called inside setup()"),o.EMPTY_OBJ;const n=t.type.__cssModules;if(!n)return(0,s.warn)("Current instance does not have CSS modules injected."),o.EMPTY_OBJ;return n[e]||((0,s.warn)(`Current instance does not have CSS module named "${e}".`),o.EMPTY_OBJ)}}function k(e){const t=(0,s.getCurrentInstance)();if(!t)return void(0,s.warn)("useCssVars is called without current active component instance.");const n=()=>j(t.subTree,e(t.proxy));(0,s.watchPostEffect)(n),(0,s.onMounted)((()=>{const e=new MutationObserver(n);e.observe(t.subTree.el.parentNode,{childList:!0}),(0,s.onUnmounted)((()=>e.disconnect()))}))}function j(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{j(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)P(e.el,t);else if(e.type===s.Fragment)e.children.forEach((e=>j(e,t)));else if(e.type===s.Static){let{el:n,anchor:o}=e;for(;n&&(P(n,t),n!==o);)n=n.nextSibling}}function P(e,t){if(1===e.nodeType){const n=e.style;for(const e in t)n.setProperty(`--${e}`,t[e])}}const O="transition",C="animation",E=(e,{slots:t})=>(0,s.h)(s.BaseTransition,L(e),t);E.displayName="Transition";const T={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},M=E.props=(0,o.extend)({},s.BaseTransition.props,T),A=(e,t=[])=>{(0,o.isArray)(e)?e.forEach((e=>e(...t))):e&&e(...t)},R=e=>!!e&&((0,o.isArray)(e)?e.some((e=>e.length>1)):e.length>1);function L(e){const t={};for(const n in e)n in T||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:s,duration:r,enterFromClass:i=`${n}-enter-from`,enterActiveClass:a=`${n}-enter-active`,enterToClass:l=`${n}-enter-to`,appearFromClass:c=i,appearActiveClass:u=a,appearToClass:d=l,leaveFromClass:h=`${n}-leave-from`,leaveActiveClass:p=`${n}-leave-active`,leaveToClass:f=`${n}-leave-to`}=e,m=function(e){if(null==e)return null;if((0,o.isObject)(e))return[D(e.enter),D(e.leave)];{const t=D(e);return[t,t]}}(r),g=m&&m[0],v=m&&m[1],{onBeforeEnter:y,onEnter:b,onEnterCancelled:_,onLeave:x,onLeaveCancelled:w,onBeforeAppear:S=y,onAppear:k=b,onAppearCancelled:j=_}=t,P=(e,t,n)=>{I(e,t?d:l),I(e,t?u:a),n&&n()},O=(e,t)=>{e._isLeaving=!1,I(e,h),I(e,f),I(e,p),t&&t()},C=e=>(t,n)=>{const o=e?k:b,r=()=>P(t,e,n);A(o,[t,r]),N((()=>{I(t,e?c:i),B(t,e?d:l),R(o)||V(t,s,g,r)}))};return(0,o.extend)(t,{onBeforeEnter(e){A(y,[e]),B(e,i),B(e,a)},onBeforeAppear(e){A(S,[e]),B(e,c),B(e,u)},onEnter:C(!1),onAppear:C(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>O(e,t);B(e,h),U(),B(e,p),N((()=>{e._isLeaving&&(I(e,h),B(e,f),R(x)||V(e,s,v,n))})),A(x,[e,n])},onEnterCancelled(e){P(e,!1),A(_,[e])},onAppearCancelled(e){P(e,!0),A(j,[e])},onLeaveCancelled(e){O(e),A(w,[e])}})}function D(e){const t=(0,o.toNumber)(e);return function(e){"number"!=typeof e?(0,s.warn)(`<transition> explicit duration is not a valid number - got ${JSON.stringify(e)}.`):isNaN(e)&&(0,s.warn)("<transition> explicit duration is NaN - the duration expression might be incorrect.")}(t),t}function B(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function I(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function N(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let F=0;function V(e,t,n,o){const s=e._endId=++F,r=()=>{s===e._endId&&o()};if(n)return setTimeout(r,n);const{type:i,timeout:a,propCount:l}=$(e,t);if(!i)return o();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,h),r()},h=t=>{t.target===e&&++u>=l&&d()};setTimeout((()=>{u<l&&d()}),a+1),e.addEventListener(c,h)}function $(e,t){const n=window.getComputedStyle(e),o=e=>(n[e]||"").split(", "),s=o("transitionDelay"),r=o("transitionDuration"),i=z(s,r),a=o("animationDelay"),l=o("animationDuration"),c=z(a,l);let u=null,d=0,h=0;return t===O?i>0&&(u=O,d=i,h=r.length):t===C?c>0&&(u=C,d=c,h=l.length):(d=Math.max(i,c),u=d>0?i>c?O:C:null,h=u?u===O?r.length:l.length:0),{type:u,timeout:d,propCount:h,hasTransform:u===O&&/\b(transform|all)(,|$)/.test(n.transitionProperty)}}function z(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>H(t)+H(e[n]))))}function H(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function U(){return document.body.offsetHeight}const W=new WeakMap,G=new WeakMap,Y={name:"TransitionGroup",props:(0,o.extend)({},M,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=(0,s.getCurrentInstance)(),o=(0,s.useTransitionState)();let i,a;return(0,s.onUpdated)((()=>{if(!i.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const o=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&o.classList.remove(e)))})),n.split(/\s+/).forEach((e=>e&&o.classList.add(e))),o.style.display="none";const s=1===t.nodeType?t:t.parentNode;s.appendChild(o);const{hasTransform:r}=$(o);return s.removeChild(o),r}(i[0].el,n.vnode.el,t))return;i.forEach(q),i.forEach(K);const o=i.filter(J);U(),o.forEach((e=>{const n=e.el,o=n.style;B(n,t),o.transform=o.webkitTransform=o.transitionDuration="";const s=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",s),n._moveCb=null,I(n,t))};n.addEventListener("transitionend",s)}))})),()=>{const l=(0,r.toRaw)(e),c=L(l);let u=l.tag||s.Fragment;i=a,a=t.default?(0,s.getTransitionRawChildren)(t.default()):[];for(let e=0;e<a.length;e++){const t=a[e];null!=t.key?(0,s.setTransitionHooks)(t,(0,s.resolveTransitionHooks)(t,c,o,n)):(0,s.warn)("<TransitionGroup> children must be keyed.")}if(i)for(let e=0;e<i.length;e++){const t=i[e];(0,s.setTransitionHooks)(t,(0,s.resolveTransitionHooks)(t,c,o,n)),W.set(t,t.el.getBoundingClientRect())}return(0,s.createVNode)(u,null,a)}}};function q(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function K(e){G.set(e,e.el.getBoundingClientRect())}function J(e){const t=W.get(e),n=G.get(e),o=t.left-n.left,s=t.top-n.top;if(o||s){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${o}px,${s}px)`,t.transitionDuration="0s",e}}const X=e=>{const t=e.props["onUpdate:modelValue"]||!1;return(0,o.isArray)(t)?e=>(0,o.invokeArrayFns)(t,e):t};function Q(e){e.target.composing=!0}function Z(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const ee={created(e,{modifiers:{lazy:t,trim:n,number:s}},r){e._assign=X(r);const i=s||r.props&&"number"===r.props.type;f(e,t?"change":"input",(t=>{if(t.target.composing)return;let s=e.value;n&&(s=s.trim()),i&&(s=(0,o.toNumber)(s)),e._assign(s)})),n&&f(e,"change",(()=>{e.value=e.value.trim()})),t||(f(e,"compositionstart",Q),f(e,"compositionend",Z),f(e,"change",Z))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:s,number:r}},i){if(e._assign=X(i),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(n)return;if(s&&e.value.trim()===t)return;if((r||"number"===e.type)&&(0,o.toNumber)(e.value)===t)return}const a=null==t?"":t;e.value!==a&&(e.value=a)}},te={deep:!0,created(e,t,n){e._assign=X(n),f(e,"change",(()=>{const t=e._modelValue,n=ie(e),s=e.checked,r=e._assign;if((0,o.isArray)(t)){const e=(0,o.looseIndexOf)(t,n),i=-1!==e;if(s&&!i)r(t.concat(n));else if(!s&&i){const n=[...t];n.splice(e,1),r(n)}}else if((0,o.isSet)(t)){const e=new Set(t);s?e.add(n):e.delete(n),r(e)}else r(ae(e,s))}))},mounted:ne,beforeUpdate(e,t,n){e._assign=X(n),ne(e,t,n)}};function ne(e,{value:t,oldValue:n},s){e._modelValue=t,(0,o.isArray)(t)?e.checked=(0,o.looseIndexOf)(t,s.props.value)>-1:(0,o.isSet)(t)?e.checked=t.has(s.props.value):t!==n&&(e.checked=(0,o.looseEqual)(t,ae(e,!0)))}const oe={created(e,{value:t},n){e.checked=(0,o.looseEqual)(t,n.props.value),e._assign=X(n),f(e,"change",(()=>{e._assign(ie(e))}))},beforeUpdate(e,{value:t,oldValue:n},s){e._assign=X(s),t!==n&&(e.checked=(0,o.looseEqual)(t,s.props.value))}},se={deep:!0,created(e,{value:t,modifiers:{number:n}},s){const r=(0,o.isSet)(t);f(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?(0,o.toNumber)(ie(e)):ie(e)));e._assign(e.multiple?r?new Set(t):t:t[0])})),e._assign=X(s)},mounted(e,{value:t}){re(e,t)},beforeUpdate(e,t,n){e._assign=X(n)},updated(e,{value:t}){re(e,t)}};function re(e,t){const n=e.multiple;if(!n||(0,o.isArray)(t)||(0,o.isSet)(t)){for(let s=0,r=e.options.length;s<r;s++){const r=e.options[s],i=ie(r);if(n)(0,o.isArray)(t)?r.selected=(0,o.looseIndexOf)(t,i)>-1:r.selected=t.has(i);else if((0,o.looseEqual)(ie(r),t))return void(e.selectedIndex!==s&&(e.selectedIndex=s))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}else(0,s.warn)(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(t).slice(8,-1)}.`)}function ie(e){return"_value"in e?e._value:e.value}function ae(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const le={created(e,t,n){ue(e,t,n,null,"created")},mounted(e,t,n){ue(e,t,n,null,"mounted")},beforeUpdate(e,t,n,o){ue(e,t,n,o,"beforeUpdate")},updated(e,t,n,o){ue(e,t,n,o,"updated")}};function ce(e,t){switch(e){case"SELECT":return se;case"TEXTAREA":return ee;default:switch(t){case"checkbox":return te;case"radio":return oe;default:return ee}}}function ue(e,t,n,o,s){const r=ce(e.tagName,n.props&&n.props.type)[s];r&&r(e,t,n,o)}const de=["ctrl","shift","alt","meta"],he={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>de.some((n=>e[`${n}Key`]&&!t.includes(n)))},pe=(e,t)=>(n,...o)=>{for(let e=0;e<t.length;e++){const o=he[t[e]];if(o&&o(n,t))return}return e(n,...o)},fe={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},me=(e,t)=>n=>{if(!("key"in n))return;const s=(0,o.hyphenate)(n.key);return t.some((e=>e===s||fe[e]===s))?e(n):void 0},ge={beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):ve(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:o}){!t!=!n&&(o?t?(o.beforeEnter(e),ve(e,!0),o.enter(e)):o.leave(e,(()=>{ve(e,!1)})):ve(e,t))},beforeUnmount(e,{value:t}){ve(e,t)}};function ve(e,t){e.style.display=t?e._vod:"none"}const ye=(0,o.extend)({patchProp:(e,t,n,r,i=!1,a,l,c,d)=>{"class"===t?function(e,t,n){const o=e._vtc;o&&(t=(t?[t,...o]:[...o]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,r,i):"style"===t?function(e,t,n){const s=e.style,r=(0,o.isString)(n);if(n&&!r){for(const e in n)u(s,e,n[e]);if(t&&!(0,o.isString)(t))for(const e in t)null==n[e]&&u(s,e,"")}else{const o=s.display;r?t!==n&&(s.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(s.display=o)}}(e,n,r):(0,o.isOn)(t)?(0,o.isModelListener)(t)||function(e,t,n,r,i=null){const a=e._vei||(e._vei={}),l=a[t];if(r&&l)l.value=r;else{const[n,c]=function(e){let t;if(m.test(e)){let n;for(t={};n=e.match(m);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[":"===e[2]?e.slice(3):(0,o.hyphenate)(e.slice(2)),t]}(t);if(r){const l=a[t]=function(e,t){const n=e=>{if(e._vts){if(e._vts<=n.attached)return}else e._vts=Date.now();(0,s.callWithAsyncErrorHandling)(function(e,t){if((0,o.isArray)(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=g||(v.then((()=>g=0)),g=Date.now()),n}(r,i);f(e,n,l,c)}else l&&(function(e,t,n,o){e.removeEventListener(t,n,o)}(e,n,l,c),a[t]=void 0)}}(e,t,0,r,l):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,s){return s?"innerHTML"===t||"textContent"===t||!!(t in e&&y.test(t)&&(0,o.isFunction)(n)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!y.test(t)||!(0,o.isString)(n))&&t in e))))}(e,t,r,i))?function(e,t,n,r,i,a,l){if("innerHTML"===t||"textContent"===t)return r&&l(r,i,a),void(e[t]=null==n?"":n);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=n;const o=null==n?"":n;return e.value===o&&"OPTION"!==e.tagName||(e.value=o),void(null==n&&e.removeAttribute(t))}let c=!1;if(""===n||null==n){const s=typeof e[t];"boolean"===s?n=(0,o.includeBooleanAttr)(n):null==n&&"string"===s?(n="",c=!0):"number"===s&&(n=0,c=!0)}try{e[t]=n}catch(o){c||(0,s.warn)(`Failed setting prop "${t}" on <${e.tagName.toLowerCase()}>: value ${n} is invalid.`,o)}c&&e.removeAttribute(t)}(e,t,r,a,l,c,d):("true-value"===t?e._trueValue=r:"false-value"===t&&(e._falseValue=r),function(e,t,n,s,r){if(s&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(p,t.slice(6,t.length)):e.setAttributeNS(p,t,n);else{const s=(0,o.isSpecialBooleanAttr)(t);null==n||s&&!(0,o.includeBooleanAttr)(n)?e.removeAttribute(t):e.setAttribute(t,s?"":n)}}(e,t,r,i))}},l);let be,_e=!1;function xe(){return be||(be=(0,s.createRenderer)(ye))}function we(){return be=_e?be:(0,s.createHydrationRenderer)(ye),_e=!0,be}const Se=(...e)=>{xe().render(...e)},ke=(...e)=>{we().hydrate(...e)},je=(...e)=>{const t=xe().createApp(...e);Oe(t),Ce(t);const{mount:n}=t;return t.mount=e=>{const s=Ee(e);if(!s)return;const r=t._component;(0,o.isFunction)(r)||r.render||r.template||(r.template=s.innerHTML),s.innerHTML="";const i=n(s,!1,s instanceof SVGElement);return s instanceof Element&&(s.removeAttribute("v-cloak"),s.setAttribute("data-v-app","")),i},t},Pe=(...e)=>{const t=we().createApp(...e);Oe(t),Ce(t);const{mount:n}=t;return t.mount=e=>{const t=Ee(e);if(t)return n(t,!0,t instanceof SVGElement)},t};function Oe(e){Object.defineProperty(e.config,"isNativeTag",{value:e=>(0,o.isHTMLTag)(e)||(0,o.isSVGTag)(e),writable:!1})}function Ce(e){if((0,s.isRuntimeOnly)()){const t=e.config.isCustomElement;Object.defineProperty(e.config,"isCustomElement",{get:()=>t,set(){(0,s.warn)("The `isCustomElement` config option is deprecated. Use `compilerOptions.isCustomElement` instead.")}});const n=e.config.compilerOptions,o='The `compilerOptions` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, `compilerOptions` must be passed to `@vue/compiler-dom` in the build setup instead.\n- For vue-loader: pass it via vue-loader\'s `compilerOptions` loader option.\n- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom';Object.defineProperty(e.config,"compilerOptions",{get:()=>((0,s.warn)(o),n),set(){(0,s.warn)(o)}})}}function Ee(e){if((0,o.isString)(e)){const t=document.querySelector(e);return t||(0,s.warn)(`Failed to mount app: mount target selector "${e}" returned null.`),t}return window.ShadowRoot&&e instanceof window.ShadowRoot&&"closed"===e.mode&&(0,s.warn)('mounting on a ShadowRoot with `{mode: "closed"}` may lead to unpredictable bugs'),e}let Te=!1;const Me=()=>{Te||(Te=!0,ee.getSSRProps=({value:e})=>({value:e}),oe.getSSRProps=({value:e},t)=>{if(t.props&&(0,o.looseEqual)(t.props.value,e))return{checked:!0}},te.getSSRProps=({value:e},t)=>{if((0,o.isArray)(e)){if(t.props&&(0,o.looseIndexOf)(e,t.props.value)>-1)return{checked:!0}}else if((0,o.isSet)(e)){if(t.props&&e.has(t.props.value))return{checked:!0}}else if(e)return{checked:!0}},le.getSSRProps=(e,t)=>{if("string"!=typeof t.type)return;const n=ce(t.type.toUpperCase(),t.props&&t.props.type);return n.getSSRProps?n.getSSRProps(e,t):void 0},ge.getSSRProps=({value:e})=>{if(!e)return{style:{display:"none"}}})}},"./node_modules/@vue/shared/dist/shared.esm-bundler.js":(e,t,n)=>{"use strict";function o(e,t){const n=Object.create(null),o=e.split(",");for(let e=0;e<o.length;e++)n[o[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}n.r(t),n.d(t,{EMPTY_ARR:()=>N,EMPTY_OBJ:()=>I,NO:()=>V,NOOP:()=>F,PatchFlagNames:()=>s,camelize:()=>he,capitalize:()=>me,def:()=>be,escapeHtml:()=>T,escapeHtmlComment:()=>A,extend:()=>U,genPropsAccessExp:()=>ke,generateCodeFrame:()=>a,getGlobalThis:()=>we,hasChanged:()=>ve,hasOwn:()=>Y,hyphenate:()=>fe,includeBooleanAttr:()=>d,invokeArrayFns:()=>ye,isArray:()=>q,isBooleanAttr:()=>u,isBuiltInDirective:()=>ce,isDate:()=>X,isFunction:()=>Q,isGloballyWhitelisted:()=>i,isHTMLTag:()=>P,isIntegerKey:()=>ae,isKnownHtmlAttr:()=>v,isKnownSvgAttr:()=>y,isMap:()=>K,isModelListener:()=>H,isNoUnitNumericStyleProp:()=>g,isObject:()=>te,isOn:()=>z,isPlainObject:()=>ie,isPromise:()=>ne,isReservedProp:()=>le,isSSRSafeAttrName:()=>f,isSVGTag:()=>O,isSet:()=>J,isSpecialBooleanAttr:()=>c,isString:()=>Z,isSymbol:()=>ee,isVoidTag:()=>C,looseEqual:()=>R,looseIndexOf:()=>L,makeMap:()=>o,normalizeClass:()=>k,normalizeProps:()=>j,normalizeStyle:()=>b,objectToString:()=>oe,parseStringStyle:()=>w,propsToAttrMap:()=>m,remove:()=>W,slotFlagsText:()=>r,stringifyStyle:()=>S,toDisplayString:()=>D,toHandlerKey:()=>ge,toNumber:()=>_e,toRawType:()=>re,toTypeString:()=>se});const s={1:"TEXT",2:"CLASS",4:"STYLE",8:"PROPS",16:"FULL_PROPS",32:"HYDRATE_EVENTS",64:"STABLE_FRAGMENT",128:"KEYED_FRAGMENT",256:"UNKEYED_FRAGMENT",512:"NEED_PATCH",1024:"DYNAMIC_SLOTS",2048:"DEV_ROOT_FRAGMENT",[-1]:"HOISTED",[-2]:"BAIL"},r={1:"STABLE",2:"DYNAMIC",3:"FORWARDED"},i=o("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt");function a(e,t=0,n=e.length){let o=e.split(/(\r?\n)/);const s=o.filter(((e,t)=>t%2==1));o=o.filter(((e,t)=>t%2==0));let r=0;const i=[];for(let e=0;e<o.length;e++)if(r+=o[e].length+(s[e]&&s[e].length||0),r>=t){for(let a=e-2;a<=e+2||n>r;a++){if(a<0||a>=o.length)continue;const l=a+1;i.push(`${l}${" ".repeat(Math.max(3-String(l).length,0))}|  ${o[a]}`);const c=o[a].length,u=s[a]&&s[a].length||0;if(a===e){const e=t-(r-(c+u)),o=Math.max(1,n>r?c-e:n-t);i.push("   |  "+" ".repeat(e)+"^".repeat(o))}else if(a>e){if(n>r){const e=Math.max(Math.min(n-r,c),1);i.push("   |  "+"^".repeat(e))}r+=c+u}}break}return i.join("\n")}const l="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",c=o(l),u=o(l+",async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");function d(e){return!!e||""===e}const h=/[>/="'\u0009\u000a\u000c\u0020]/,p={};function f(e){if(p.hasOwnProperty(e))return p[e];const t=h.test(e);return t&&console.error(`unsafe attribute name: ${e}`),p[e]=!t}const m={acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},g=o("animation-iteration-count,border-image-outset,border-image-slice,border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,stroke-miterlimit,stroke-opacity,stroke-width"),v=o("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap"),y=o("xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan");function b(e){if(q(e)){const t={};for(let n=0;n<e.length;n++){const o=e[n],s=Z(o)?w(o):b(o);if(s)for(const e in s)t[e]=s[e]}return t}return Z(e)||te(e)?e:void 0}const _=/;(?![^(]*\))/g,x=/:(.+)/;function w(e){const t={};return e.split(_).forEach((e=>{if(e){const n=e.split(x);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function S(e){let t="";if(!e||Z(e))return t;for(const n in e){const o=e[n],s=n.startsWith("--")?n:fe(n);(Z(o)||"number"==typeof o&&g(s))&&(t+=`${s}:${o};`)}return t}function k(e){let t="";if(Z(e))t=e;else if(q(e))for(let n=0;n<e.length;n++){const o=k(e[n]);o&&(t+=o+" ")}else if(te(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function j(e){if(!e)return null;let{class:t,style:n}=e;return t&&!Z(t)&&(e.class=k(t)),n&&(e.style=b(n)),e}const P=o("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),O=o("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),C=o("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr"),E=/["'&<>]/;function T(e){const t=""+e,n=E.exec(t);if(!n)return t;let o,s,r="",i=0;for(s=n.index;s<t.length;s++){switch(t.charCodeAt(s)){case 34:o="&quot;";break;case 38:o="&amp;";break;case 39:o="&#39;";break;case 60:o="&lt;";break;case 62:o="&gt;";break;default:continue}i!==s&&(r+=t.slice(i,s)),i=s+1,r+=o}return i!==s?r+t.slice(i,s):r}const M=/^-?>|<!--|-->|--!>|<!-$/g;function A(e){return e.replace(M,"")}function R(e,t){if(e===t)return!0;let n=X(e),o=X(t);if(n||o)return!(!n||!o)&&e.getTime()===t.getTime();if(n=ee(e),o=ee(t),n||o)return e===t;if(n=q(e),o=q(t),n||o)return!(!n||!o)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let o=0;n&&o<e.length;o++)n=R(e[o],t[o]);return n}(e,t);if(n=te(e),o=te(t),n||o){if(!n||!o)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const o=e.hasOwnProperty(n),s=t.hasOwnProperty(n);if(o&&!s||!o&&s||!R(e[n],t[n]))return!1}}return String(e)===String(t)}function L(e,t){return e.findIndex((e=>R(e,t)))}const D=e=>Z(e)?e:null==e?"":q(e)||te(e)&&(e.toString===oe||!Q(e.toString))?JSON.stringify(e,B,2):String(e),B=(e,t)=>t&&t.__v_isRef?B(e,t.value):K(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:J(t)?{[`Set(${t.size})`]:[...t.values()]}:!te(t)||q(t)||ie(t)?t:String(t),I=Object.freeze({}),N=Object.freeze([]),F=()=>{},V=()=>!1,$=/^on[^a-z]/,z=e=>$.test(e),H=e=>e.startsWith("onUpdate:"),U=Object.assign,W=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},G=Object.prototype.hasOwnProperty,Y=(e,t)=>G.call(e,t),q=Array.isArray,K=e=>"[object Map]"===se(e),J=e=>"[object Set]"===se(e),X=e=>"[object Date]"===se(e),Q=e=>"function"==typeof e,Z=e=>"string"==typeof e,ee=e=>"symbol"==typeof e,te=e=>null!==e&&"object"==typeof e,ne=e=>te(e)&&Q(e.then)&&Q(e.catch),oe=Object.prototype.toString,se=e=>oe.call(e),re=e=>se(e).slice(8,-1),ie=e=>"[object Object]"===se(e),ae=e=>Z(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,le=o(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),ce=o("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),ue=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},de=/-(\w)/g,he=ue((e=>e.replace(de,((e,t)=>t?t.toUpperCase():"")))),pe=/\B([A-Z])/g,fe=ue((e=>e.replace(pe,"-$1").toLowerCase())),me=ue((e=>e.charAt(0).toUpperCase()+e.slice(1))),ge=ue((e=>e?`on${me(e)}`:"")),ve=(e,t)=>!Object.is(e,t),ye=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},be=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},_e=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let xe;const we=()=>xe||(xe="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{}),Se=/^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;function ke(e){return Se.test(e)?`__props.${e}`:`__props[${JSON.stringify(e)}]`}},"./node_modules/@wordpress/hooks/build-module/createAddHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@wordpress/hooks/build-module/validateNamespace.js"),s=n("./node_modules/@wordpress/hooks/build-module/validateHookName.js");const r=function(e,t){return function(n,r,i){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10;const l=e[t];if(!(0,s.default)(n))return;if(!(0,o.default)(r))return;if("function"!=typeof i)return void console.error("The hook callback must be a function.");if("number"!=typeof a)return void console.error("If specified, the hook priority must be a number.");const c={callback:i,priority:a,namespace:r};if(l[n]){const e=l[n].handlers;let t;for(t=e.length;t>0&&!(a>=e[t-1].priority);t--);t===e.length?e[t]=c:e.splice(t,0,c),l.__current.forEach((e=>{e.name===n&&e.currentIndex>=t&&e.currentIndex++}))}else l[n]={handlers:[c],runs:0};"hookAdded"!==n&&e.doAction("hookAdded",n,r,i,a)}}},"./node_modules/@wordpress/hooks/build-module/createCurrentHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){return function(){var n,o;const s=e[t];return null!==(n=null===(o=s.__current[s.__current.length-1])||void 0===o?void 0:o.name)&&void 0!==n?n:null}}},"./node_modules/@wordpress/hooks/build-module/createDidHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/@wordpress/hooks/build-module/validateHookName.js");const s=function(e,t){return function(n){const s=e[t];if((0,o.default)(n))return s[n]&&s[n].runs?s[n].runs:0}}},"./node_modules/@wordpress/hooks/build-module/createDoingHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){return function(n){const o=e[t];return void 0===n?void 0!==o.__current[0]:!!o.__current[0]&&n===o.__current[0].name}}},"./node_modules/@wordpress/hooks/build-module/createHasHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){return function(n,o){const s=e[t];return void 0!==o?n in s&&s[n].handlers.some((e=>e.namespace===o)):n in s}}},"./node_modules/@wordpress/hooks/build-module/createHooks.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{_Hooks:()=>u,default:()=>d});var o=n("./node_modules/@wordpress/hooks/build-module/createAddHook.js"),s=n("./node_modules/@wordpress/hooks/build-module/createRemoveHook.js"),r=n("./node_modules/@wordpress/hooks/build-module/createHasHook.js"),i=n("./node_modules/@wordpress/hooks/build-module/createRunHook.js"),a=n("./node_modules/@wordpress/hooks/build-module/createCurrentHook.js"),l=n("./node_modules/@wordpress/hooks/build-module/createDoingHook.js"),c=n("./node_modules/@wordpress/hooks/build-module/createDidHook.js");class u{constructor(){this.actions=Object.create(null),this.actions.__current=[],this.filters=Object.create(null),this.filters.__current=[],this.addAction=(0,o.default)(this,"actions"),this.addFilter=(0,o.default)(this,"filters"),this.removeAction=(0,s.default)(this,"actions"),this.removeFilter=(0,s.default)(this,"filters"),this.hasAction=(0,r.default)(this,"actions"),this.hasFilter=(0,r.default)(this,"filters"),this.removeAllActions=(0,s.default)(this,"actions",!0),this.removeAllFilters=(0,s.default)(this,"filters",!0),this.doAction=(0,i.default)(this,"actions"),this.applyFilters=(0,i.default)(this,"filters",!0),this.currentAction=(0,a.default)(this,"actions"),this.currentFilter=(0,a.default)(this,"filters"),this.doingAction=(0,l.default)(this,"actions"),this.doingFilter=(0,l.default)(this,"filters"),this.didAction=(0,c.default)(this,"actions"),this.didFilter=(0,c.default)(this,"filters")}}const d=function(){return new u}},"./node_modules/@wordpress/hooks/build-module/createRemoveHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@wordpress/hooks/build-module/validateNamespace.js"),s=n("./node_modules/@wordpress/hooks/build-module/validateHookName.js");const r=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return function(r,i){const a=e[t];if(!(0,s.default)(r))return;if(!n&&!(0,o.default)(i))return;if(!a[r])return 0;let l=0;if(n)l=a[r].handlers.length,a[r]={runs:a[r].runs,handlers:[]};else{const e=a[r].handlers;for(let t=e.length-1;t>=0;t--)e[t].namespace===i&&(e.splice(t,1),l++,a.__current.forEach((e=>{e.name===r&&e.currentIndex>=t&&e.currentIndex--})))}return"hookRemoved"!==r&&e.doAction("hookRemoved",r,i),l}}},"./node_modules/@wordpress/hooks/build-module/createRunHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return function(o){const s=e[t];s[o]||(s[o]={handlers:[],runs:0}),s[o].runs++;const r=s[o].handlers;"hookAdded"!==o&&s.all&&r.push(...s.all.handlers);for(var i=arguments.length,a=new Array(i>1?i-1:0),l=1;l<i;l++)a[l-1]=arguments[l];if(!r||!r.length)return n?a[0]:void 0;const c={name:o,currentIndex:0};for(s.__current.push(c);c.currentIndex<r.length;){const e=r[c.currentIndex].callback.apply(null,a);n&&(a[0]=e),c.currentIndex++}return s.__current.pop(),n?a[0]:void 0}}},"./node_modules/@wordpress/hooks/build-module/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{actions:()=>x,addAction:()=>r,addFilter:()=>i,applyFilters:()=>f,createHooks:()=>o.default,currentAction:()=>m,currentFilter:()=>g,defaultHooks:()=>s,didAction:()=>b,didFilter:()=>_,doAction:()=>p,doingAction:()=>v,doingFilter:()=>y,filters:()=>w,hasAction:()=>c,hasFilter:()=>u,removeAction:()=>a,removeAllActions:()=>d,removeAllFilters:()=>h,removeFilter:()=>l});var o=n("./node_modules/@wordpress/hooks/build-module/createHooks.js");const s=(0,o.default)(),{addAction:r,addFilter:i,removeAction:a,removeFilter:l,hasAction:c,hasFilter:u,removeAllActions:d,removeAllFilters:h,doAction:p,applyFilters:f,currentAction:m,currentFilter:g,doingAction:v,doingFilter:y,didAction:b,didFilter:_,actions:x,filters:w}=s},"./node_modules/@wordpress/hooks/build-module/validateHookName.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e){return"string"!=typeof e||""===e?(console.error("The hook name must be a non-empty string."),!1):/^__/.test(e)?(console.error("The hook name cannot begin with `__`."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(e)||(console.error("The hook name can only contain numbers, letters, dashes, periods and underscores."),!1)}},"./node_modules/@wordpress/hooks/build-module/validateNamespace.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e){return"string"!=typeof e||""===e?(console.error("The namespace must be a non-empty string."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(e)||(console.error("The namespace can only contain numbers, letters, dashes, periods, underscores and slashes."),!1)}},"./node_modules/@wordpress/i18n/build-module/create-i18n.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{createI18n:()=>i});var o=n("./node_modules/tannin/index.js");const s={plural_forms:e=>1===e?0:1},r=/^i18n\.(n?gettext|has_translation)(_|$)/,i=(e,t,n)=>{const i=new o.default({}),a=new Set,l=()=>{a.forEach((e=>e()))},c=function(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"default";i.data[n]={...i.data[n],...e},i.data[n][""]={...s,...null===(t=i.data[n])||void 0===t?void 0:t[""]},delete i.pluralForms[n]},u=(e,t)=>{c(e,t),l()},d=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"default",t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,o=arguments.length>3?arguments[3]:void 0,s=arguments.length>4?arguments[4]:void 0;return i.data[e]||c(void 0,e),i.dcnpgettext(e,t,n,o,s)},h=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"default";return e},p=(e,t,o)=>{let s=d(o,t,e);return n?(s=n.applyFilters("i18n.gettext_with_context",s,e,t,o),n.applyFilters("i18n.gettext_with_context_"+h(o),s,e,t,o)):s};if(e&&u(e,t),n){const e=e=>{r.test(e)&&l()};n.addAction("hookAdded","core/i18n",e),n.addAction("hookRemoved","core/i18n",e)}return{getLocaleData:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"default";return i.data[e]},setLocaleData:u,addLocaleData:function(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"default";i.data[n]={...i.data[n],...e,"":{...s,...null===(t=i.data[n])||void 0===t?void 0:t[""],...null==e?void 0:e[""]}},delete i.pluralForms[n],l()},resetLocaleData:(e,t)=>{i.data={},i.pluralForms={},u(e,t)},subscribe:e=>(a.add(e),()=>a.delete(e)),__:(e,t)=>{let o=d(t,void 0,e);return n?(o=n.applyFilters("i18n.gettext",o,e,t),n.applyFilters("i18n.gettext_"+h(t),o,e,t)):o},_x:p,_n:(e,t,o,s)=>{let r=d(s,void 0,e,t,o);return n?(r=n.applyFilters("i18n.ngettext",r,e,t,o,s),n.applyFilters("i18n.ngettext_"+h(s),r,e,t,o,s)):r},_nx:(e,t,o,s,r)=>{let i=d(r,s,e,t,o);return n?(i=n.applyFilters("i18n.ngettext_with_context",i,e,t,o,s,r),n.applyFilters("i18n.ngettext_with_context_"+h(r),i,e,t,o,s,r)):i},isRTL:()=>"rtl"===p("ltr","text direction"),hasTranslation:(e,t,o)=>{var s,r;const a=t?t+""+e:e;let l=!(null===(s=i.data)||void 0===s||null===(r=s[null!=o?o:"default"])||void 0===r||!r[a]);return n&&(l=n.applyFilters("i18n.has_translation",l,e,t,o),l=n.applyFilters("i18n.has_translation_"+h(o),l,e,t,o)),l}}}},"./node_modules/@wordpress/i18n/build-module/default-i18n.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{__:()=>d,_n:()=>p,_nx:()=>f,_x:()=>h,default:()=>i,getLocaleData:()=>a,hasTranslation:()=>g,isRTL:()=>m,resetLocaleData:()=>c,setLocaleData:()=>l,subscribe:()=>u});var o=n("./node_modules/@wordpress/i18n/build-module/create-i18n.js"),s=n("./node_modules/@wordpress/hooks/build-module/index.js");const r=(0,o.createI18n)(void 0,void 0,s.defaultHooks),i=r,a=r.getLocaleData.bind(r),l=r.setLocaleData.bind(r),c=r.resetLocaleData.bind(r),u=r.subscribe.bind(r),d=r.__.bind(r),h=r._x.bind(r),p=r._n.bind(r),f=r._nx.bind(r),m=r.isRTL.bind(r),g=r.hasTranslation.bind(r)},"./node_modules/@wordpress/i18n/build-module/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{__:()=>r.__,_n:()=>r._n,_nx:()=>r._nx,_x:()=>r._x,createI18n:()=>s.createI18n,defaultI18n:()=>r.default,getLocaleData:()=>r.getLocaleData,hasTranslation:()=>r.hasTranslation,isRTL:()=>r.isRTL,resetLocaleData:()=>r.resetLocaleData,setLocaleData:()=>r.setLocaleData,sprintf:()=>o.sprintf,subscribe:()=>r.subscribe});var o=n("./node_modules/@wordpress/i18n/build-module/sprintf.js"),s=n("./node_modules/@wordpress/i18n/build-module/create-i18n.js"),r=n("./node_modules/@wordpress/i18n/build-module/default-i18n.js")},"./node_modules/@wordpress/i18n/build-module/sprintf.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{sprintf:()=>l});var o=n("./node_modules/memize/index.js"),s=n.n(o),r=n("./node_modules/sprintf-js/src/sprintf.js"),i=n.n(r);const a=s()(console.error);function l(e){try{for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return i().sprintf(e,...n)}catch(t){return t instanceof Error&&a("sprintf error: \n\n"+t.toString()),e}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js"),s=n("./src/utils/menu-fix.js"),r=n("./src/components/tabs/PageTabs.vue"),i=n("./src/components/alert/BaseAlert.vue");function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const c={name:"App",components:{PageTabs:r.default,BaseAlert:i.default},watch:{$route:function(){(0,s.menuFix)(),this.hideAlert()}},created:function(){this.fetchSettings()},methods:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},(0,o.mapActions)(["fetchSettings","hideAlert"]))}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/alert/BaseAlert.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js");function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const a={name:"BaseAlert",computed:r({},(0,o.mapGetters)(["alert"])),methods:r({},(0,o.mapActions)(["setAlert","hideAlert"]))}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/BaseButton.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"BaseButton",components:{BaseSpinner:n("./src/components/spinner/BaseSpinner.vue").default},props:{type:{type:String,required:!1,default:"button"},variant:{type:String,required:!1,default:"default"},loading:{type:Boolean,required:!1,default:!1}},computed:{variantStyles:function(){var e="";switch(this.variant){case"primary":e+="background-color:var(--color-primary)";break;case"error":e+="background-color:var(--color-error)";break;case"default":e+="background-color:var(--color-secondary)"}return e}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/card/BaseCard.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"BaseCard",props:{headerTitle:{type:String,required:!0},headerDescription:{type:String,required:!1,default:""}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChart.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/vue-chartjs/dist/index.js"),s=n("./node_modules/chart.js/dist/chart.mjs"),r={name:"BarChart",components:{Bar:o.Bar},props:{chartId:{type:String,default:"bar-chart"},width:{type:Number,default:400},height:{type:Number,default:400},cssClasses:{default:"",type:String},styles:{type:Object,default:function(){}},plugins:{type:Array,default:function(){return[]}},labels:{type:Array,default:function(){return[]}},datasets:{type:Object,default:function(){}},chartOptions:{type:Object,required:!1,default:{responsive:!0,maintainAspectRatio:!1}}},computed:{chartData:function(){return{labels:this.labels,datasets:this.datasets}}}};const i=Object.assign(r,{setup:function(e,t){(0,t.expose)(),s.Chart.register(s.Title,s.Tooltip,s.Legend,s.BarElement,s.CategoryScale,s.LinearScale);var n={Bar:o.Bar,ChartJS:s.Chart,Title:s.Title,Tooltip:s.Tooltip,Legend:s.Legend,BarElement:s.BarElement,CategoryScale:s.CategoryScale,LinearScale:s.LinearScale};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChartLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"BarChartLoading",components:{SkeletonText:n("./src/components/skeleton/SkeletonText.vue").default}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"BaseInput",props:{name:{type:String,required:!0},type:{type:String,required:!1,default:"text"},value:{type:[String,Number,Array],required:!1,default:""},placeholder:{type:String,required:!1,default:""},required:{type:Boolean,required:!1,default:!1},onChange:{type:Function,required:!1,default:function(){}},min:{type:Number,required:!1},max:{type:Number,required:!1}},computed:{isDefaultInput:function(){return["text","number","email","search","url"].includes(this.type)},isCheckbox:function(){return"switch"===this.type||"checkbox"===this.type},isChecked:function(){return 1===parseInt(this.value)}},methods:{onChangeInput:function(e){this.isCheckbox?this.onChange({key:this.name,value:e.target.checked?1:0}):this.onChange({key:this.name,value:e.target.value})}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/InputSection.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"InputSection",components:{BaseInput:n("./src/components/input/BaseInput.vue").default},props:{label:{type:String,required:!0},name:{type:String,required:!0},type:{type:String,required:!1,default:"text"},value:{type:[String,Number,Array],required:!1,default:""},hint:{type:String,required:!1,default:""},placeholder:{type:String,required:!1,default:""},required:{type:Boolean,required:!1,default:!1},onChange:{type:Function,required:!1,default:function(){}},min:{type:Number,required:!1},max:{type:Number,required:!1}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/BasePagination.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@wordpress/i18n/build-module/index.js"),s={name:"BasePagination",props:{maxVisibleButtons:{type:Number,required:!1,default:3},totalPages:{type:Number,required:!0},perPage:{type:Number,required:!0},currentPage:{type:Number,required:!0},totalItems:{type:Number,default:0}},computed:{isInFirstPage:function(){return 1===this.currentPage},isInLastPage:function(){return this.currentPage===this.totalPages}},methods:{onClickPreviousPage:function(){this.$emit("pagechanged",this.currentPage-1)},onClickNextPage:function(){this.$emit("pagechanged",this.currentPage+1)}}};const r=Object.assign(s,{setup:function(e,t){(0,t.expose)();var n={__:o.__};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/PaginationLoader.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"PaginationLoader",components:{SkeletonText:n("./src/components/skeleton/SkeletonText.vue").default}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingForm.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var o=n("./src/components/card/BaseCard.vue"),s=n("./src/components/button/BaseButton.vue"),r=n("./src/components/input/InputSection.vue"),i=n("./src/components/input/BaseInput.vue"),a=n("./node_modules/@wordpress/i18n/build-module/index.js");function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}var c={name:"SettingForm",components:{BaseCard:o.default,BaseButton:s.default,InputSection:r.default,BaseInput:i.default},props:{change:{type:Function,required:!0},settings:{type:Object,required:!0}},data:function(){return{emailsData:(e=this.settings.emails,function(e){if(Array.isArray(e))return l(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())};var e},methods:{changeInput:function(e){this.change(e)},changeEmailInput:function(e,t){this.emailsData[t]=e.value,this.saveEmails()},appendEmail:function(){this.emailsData.push("")},deleteEmail:function(e){this.emailsData.splice(e,1),this.saveEmails()},saveEmails:function(){this.change({key:"emails",value:this.emailsData.length?this.emailsData:""})},onSubmit:function(e){e.preventDefault()}}};const u=Object.assign(c,{setup:function(e,t){(0,t.expose)();var n={BaseCard:o.default,BaseButton:s.default,InputSection:r.default,BaseInput:i.default,__:a.__};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingFormLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"SettingFormLoading",components:{SkeletonText:n("./src/components/skeleton/SkeletonText.vue").default}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"SkeletonText",props:{width:{type:String,required:!1,default:"100%"}},computed:{skeletonWidthStyle:function(){return{width:this.width}}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/spinner/BaseSpinner.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"BaseSpinner",props:{status:{type:Boolean,default:!0},rotation:{type:Boolean,default:!0},size:{type:Number,default:12},depth:{type:Number,default:3},speed:{type:Number,default:.8},color:{type:String,default:"#4fc08d"}},data:function(){return{rotationAnimations:["forward","backward"],sizeUnits:"px",timeUnits:"s"}},computed:{rotationDirection:function(){return this.rotation?this.rotationAnimations[0]:this.rotationAnimations[1]},spinnerSize:function(){return this.size+this.sizeUnits},spinnerDepth:function(){return this.depth+this.sizeUnits},spinnerSpeed:function(){return this.speed+this.timeUnits},spinnerStyle:function(){return{borderTopColor:this.hexToRGB(this.color,.15),borderRightColor:this.hexToRGB(this.color,.15),borderBottomColor:this.hexToRGB(this.color,.15),borderLeftColor:this.color,width:this.spinnerSize,height:this.spinnerSize,borderWidth:this.spinnerDepth,animationName:this.rotationDirection,animationDuration:this.spinnerSpeed,marginRight:5}}},methods:{hexToRGB:function(e,t){var n=parseInt(e.slice(1,3),16),o=parseInt(e.slice(3,5),16),s=parseInt(e.slice(5,7),16);return t?"rgba(".concat(n,", ").concat(o,", ").concat(s,", ").concat(t,")"):"rgb(".concat(n,", ").concat(o,", ").concat(s,")")}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js");function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const i={name:"BaseTable",components:{TableLoading:n("./src/components/tables/TableLoading.vue").default},props:{headers:{type:Array,required:!0},rows:{type:Object,required:!0},loading:{type:Boolean,required:!1,default:!1},htmlColumns:{type:Array,required:!1,default:function(){return[]}}},computed:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},(0,o.mapGetters)(["settings"])),methods:{isHtml:function(e){return this.htmlColumns.includes(e)}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"TableLoading",components:{SkeletonText:n("./src/components/skeleton/SkeletonText.vue").default}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/PageTabs.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@wordpress/i18n/build-module/index.js"),s={name:"PageTabs"};const r=Object.assign(s,{setup:function(e,t){(0,t.expose)();var n={__:o.__};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/GraphPage.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>h});var o=n("./src/components/chart/BarChart.vue"),s=n("./src/components/chart/BarChartLoading.vue"),r=n("./src/components/spinner/BaseSpinner.vue"),i=n("./node_modules/@wordpress/i18n/build-module/index.js"),a=n("./node_modules/vuex/dist/vuex.esm-bundler.js");function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var d={name:"GraphPage",components:{BarChart:o.default,BaseSpinner:r.default,BarChartLoading:s.default},computed:c({},(0,a.mapGetters)(["graphLoading","graphRefreshing","graphLabels","graphDatasets"])),created:function(){this.getGraphData()},methods:c(c({},(0,a.mapActions)(["getGraphData"])),{},{refreshChart:function(){this.getGraphData(!0)}})};const h=Object.assign(d,{setup:function(e,t){(0,t.expose)();var n={BarChart:o.default,BarChartLoading:s.default,BaseSpinner:r.default,__:i.__,mapActions:a.mapActions,mapGetters:a.mapGetters};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/ListPage.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>h});var o=n("./src/components/tables/BaseTable.vue"),s=n("./src/components/pagination/BasePagination.vue"),r=n("./src/components/pagination/PaginationLoader.vue"),i=n("./node_modules/@wordpress/i18n/build-module/index.js"),a=n("./node_modules/vuex/dist/vuex.esm-bundler.js");function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var d={name:"ListPage",components:{BaseTable:o.default,BasePagination:s.default,PaginationLoader:r.default},data:function(){return{currentPage:1,htmlColumns:["url"]}},computed:c({},(0,a.mapGetters)(["tableLoading","pageTitle","headers","rows","settings"])),watch:{settings:function(){this.getTableData(this.currentPage)}},created:function(){this.getTableData()},methods:c(c({},(0,a.mapActions)(["getTableData"])),{},{onPageChange:function(e){this.currentPage=e,this.getTableData(e)}})};const h=Object.assign(d,{setup:function(e,t){(0,t.expose)();var n={BaseTable:o.default,BasePagination:s.default,PaginationLoader:r.default,__:i.__,mapActions:a.mapActions,mapGetters:a.mapGetters};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/SettingPage.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js"),s=n("./src/utils/validation.js"),r=n("./src/components/settings/SettingForm.vue"),i=n("./src/components/settings/SettingFormLoading.vue");function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const u={name:"SettingPage",components:{SettingForm:r.default,SettingFormLoading:i.default},computed:l({},(0,o.mapGetters)(["isSettingsSaving","isSettingsLoading","settings"])),watch:{},methods:l(l({},(0,o.mapActions)(["storeSettings","setAlert","hideAlert"])),{},{onChangeInput:function(e){var t=(0,s.validateSettings)(e);t.valid?(this.hideAlert(),this.storeSettings(e)):this.setAlert({message:t.message,type:"error"})}})}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=template&id=7ba5bd90":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>c});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={id:"wp-emailer"},r={class:"main-content"},i=(0,o.createElementVNode)("h2",{role:"wp-emailer-notice","data-text":"Don't remove me, I am super important for admin notice"},null,-1),a={class:"desc"},l={class:"main-content-section"};function c(e,t,n,c,u,d){var h=(0,o.resolveComponent)("PageTabs"),p=(0,o.resolveComponent)("BaseAlert"),f=(0,o.resolveComponent)("router-view");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",r,[i,(0,o.createElementVNode)("h3",null,(0,o.toDisplayString)(e.__("WPEmailer","wp-emailer")),1),(0,o.createElementVNode)("p",a,(0,o.toDisplayString)(e.__("A WordPress plugin using Vue JS framework to work with email settings.","wp-emailer")),1),(0,o.createCommentVNode)(" Page tabs "),(0,o.createVNode)(h),(0,o.createElementVNode)("div",l,[(0,o.createVNode)(p),(0,o.createVNode)(f)])])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/alert/BaseAlert.vue?vue&type=template&id=6f5743d0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,r,i){var a,l;return null!==(a=e.alert)&&void 0!==a&&a.isVisible?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,class:(0,o.normalizeClass)({alert:e.alert,success:"success"===e.alert.type,error:"error"===e.alert.type})},[(0,o.createTextVNode)((0,o.toDisplayString)(null===(l=e.alert)||void 0===l?void 0:l.message)+" ",1),(0,o.createElementVNode)("div",{class:"close-alert",onClick:t[0]||(t[0]=function(){return e.hideAlert&&e.hideAlert.apply(e,arguments)})}," × ")],2)):(0,o.createCommentVNode)("v-if",!0)}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/BaseButton.vue?vue&type=template&id=88e226c0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>i});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s=["type"],r={class:"button-content"};function i(e,t,n,i,a,l){var c=(0,o.resolveComponent)("BaseSpinner");return(0,o.openBlock)(),(0,o.createElementBlock)("button",{type:n.type,style:(0,o.normalizeStyle)(l.variantStyles)},[(0,o.createVNode)(c,{status:n.loading},null,8,["status"]),(0,o.createElementVNode)("span",r,[(0,o.renderSlot)(e.$slots,"default",{},void 0,!0)]),(0,o.createCommentVNode)(" slot button content ")],12,s)}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/card/BaseCard.vue?vue&type=template&id=0db0c5e0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>c});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"wp-emailer-card"},r={class:"wp-emailer-card-header wp-emailer-form-row"},i={class:"title"},a={class:"description"},l={class:"wp-emailer-card-content"};function c(e,t,n,c,u,d){return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",r,[(0,o.createElementVNode)("h2",i,(0,o.toDisplayString)(n.headerTitle),1),(0,o.createElementVNode)("p",a,(0,o.toDisplayString)(n.headerDescription),1)]),(0,o.createElementVNode)("div",l,[(0,o.renderSlot)(e.$slots,"content",{},void 0,!0)])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChart.vue?vue&type=template&id=6a09facc":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,r,i){return(0,o.openBlock)(),(0,o.createElementBlock)("div",null,[(0,o.createVNode)(s.Bar,{"chart-data":i.chartData,"chart-options":n.chartOptions,"chart-id":n.chartId,styles:n.styles,width:n.width,height:n.height,plugins:n.plugins,"css-classes":n.cssClasses},null,8,["chart-data","chart-options","chart-id","styles","width","height","plugins","css-classes"])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChartLoading.vue?vue&type=template&id=5ae1da00&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>r});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"chart-loading-area"};function r(e,t,n,r,i,a){var l=(0,o.resolveComponent)("SkeletonText");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createVNode)(l),(0,o.createVNode)(l),(0,o.createVNode)(l),(0,o.createVNode)(l),(0,o.createVNode)(l)])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=template&id=d0938918&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>c});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"input-area"},r=["id","name","type","value","placeholder","onchange","min","max"],i={key:1},a=["checked","onchange"],l=function(e){return(0,o.pushScopeId)("data-v-d0938918"),e=e(),(0,o.popScopeId)(),e}((function(){return(0,o.createElementVNode)("span",{class:"toggle-switch"},null,-1)}));function c(e,t,n,c,u,d){return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createCommentVNode)(" Handle input component for general inputs like, text, number, email "),d.isDefaultInput?((0,o.openBlock)(),(0,o.createElementBlock)("input",{key:0,id:n.name,class:"input-main",name:n.name,type:n.type,value:n.value,placeholder:n.placeholder,onchange:d.onChangeInput,min:n.min,max:n.max},null,8,r)):(0,o.createCommentVNode)("v-if",!0),(0,o.createCommentVNode)(" Handle input component for switch type input "),d.isCheckbox?((0,o.openBlock)(),(0,o.createElementBlock)("label",i,[(0,o.createElementVNode)("input",{type:"checkbox",checked:d.isChecked,onchange:d.onChangeInput},null,8,a),l,(0,o.createElementVNode)("span",null,(0,o.toDisplayString)(d.isChecked?"On":"Off"),1)])):(0,o.createCommentVNode)("v-if",!0)])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/InputSection.vue?vue&type=template&id=a6a577e0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>u});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"wp-emailer-input wp-emailer-form-row"},r={class:"wp-emailer-input-label"},i=["for"],a={class:"wp-emailer-input-content"},l={class:"flex"},c={key:0,class:"input-hint"};function u(e,t,n,u,d,h){var p=(0,o.resolveComponent)("BaseInput");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",r,[(0,o.createElementVNode)("label",{for:n.name},(0,o.toDisplayString)(n.label),9,i)]),(0,o.createElementVNode)("div",a,[(0,o.renderSlot)(e.$slots,"input-content",{},(function(){return[(0,o.createElementVNode)("div",l,[(0,o.createVNode)(p,{id:n.name,name:n.name,type:n.type,value:n.value,placeholder:n.placeholder,"on-change":n.onChange,min:n.min,max:n.max},null,8,["id","name","type","value","placeholder","on-change","min","max"]),(0,o.createElementVNode)("div",null,[(0,o.renderSlot)(e.$slots,"input-right",{},void 0,!0)])]),n.hint?((0,o.openBlock)(),(0,o.createElementBlock)("p",c,(0,o.toDisplayString)(n.hint),1)):(0,o.createCommentVNode)("v-if",!0)]}),!0)])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/BasePagination.vue?vue&type=template&id=3fa7b0a0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>m});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s=function(e){return(0,o.pushScopeId)("data-v-3fa7b0a0"),e=e(),(0,o.popScopeId)(),e},r={class:"flex justify-between"},i={class:"pagination"},a={class:"pagination-item"},l=["disabled"],c=s((function(){return(0,o.createElementVNode)("span",{"aria-hidden":"true"},"«",-1)})),u={class:"sr-only"},d={class:"pagination-item"},h=["disabled"],p={class:"sr-only"},f=s((function(){return(0,o.createElementVNode)("span",{"aria-hidden":"true"},"»",-1)}));function m(e,t,n,s,m,g){return(0,o.openBlock)(),(0,o.createElementBlock)("div",r,[(0,o.createElementVNode)("div",null,[(0,o.createElementVNode)("p",null,(0,o.toDisplayString)(n.currentPage)+"/"+(0,o.toDisplayString)(n.totalPages)+" "+(0,o.toDisplayString)(n.totalPages<2?s.__("page","wp-emailer"):s.__("pages","wp-emailer")),1)]),(0,o.createElementVNode)("ul",i,[(0,o.createElementVNode)("li",a,[(0,o.createElementVNode)("button",{type:"button",class:"previous-item",disabled:g.isInFirstPage,onClick:t[0]||(t[0]=function(){return g.onClickPreviousPage&&g.onClickPreviousPage.apply(g,arguments)})},[c,(0,o.createElementVNode)("span",u,"   "+(0,o.toDisplayString)(s.__("Previous","wp-emailer")),1)],8,l)]),(0,o.createElementVNode)("li",d,[(0,o.createElementVNode)("button",{type:"button",class:"next-item",disabled:g.isInLastPage,onClick:t[1]||(t[1]=function(){return g.onClickNextPage&&g.onClickNextPage.apply(g,arguments)})},[(0,o.createElementVNode)("span",p,(0,o.toDisplayString)(s.__("Next","wp-emailer"))+"   ",1),f],8,h)])])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/PaginationLoader.vue?vue&type=template&id=1626f362&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>i});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"pagination-loading flex justify-between mt-10"},r={class:"flex"};function i(e,t,n,i,a,l){var c=(0,o.resolveComponent)("SkeletonText");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",null,[(0,o.createVNode)(c,{width:"150px"})]),(0,o.createElementVNode)("div",r,[(0,o.createVNode)(c,{width:"60px"}),(0,o.createVNode)(c,{width:"60px"})])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingForm.vue?vue&type=template&id=271b0f38&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>l});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"settings-form"},r={class:"section"},i={class:"section"},a={class:"mt-20 flex"};function l(e,t,n,l,c,u){return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("form",{method:"post",onSubmit:t[0]||(t[0]=function(){return u.onSubmit&&u.onSubmit.apply(u,arguments)})},[(0,o.createCommentVNode)(" Section 1 "),(0,o.createElementVNode)("div",r,[(0,o.createVNode)(l.BaseCard,{"header-title":l.__("General","wp-emailer"),"header-description":l.__("Change general contents for the settings","wp-emailer")},{content:(0,o.withCtx)((function(){var e,t;return[(0,o.createVNode)(l.InputSection,{type:"number",label:l.__("Number of rows","wp-emailer"),name:"numrows",hint:l.__("How many rows will be displayed on the table","wp-emailer"),value:null===(e=n.settings)||void 0===e?void 0:e.numrows,required:!0,"on-change":u.changeInput,min:1,max:5},null,8,["label","hint","value","on-change"]),(0,o.createVNode)(l.InputSection,{type:"switch",label:l.__("Show human readable date","wp-emailer"),name:"humandate",value:null===(t=n.settings)||void 0===t?void 0:t.humandate,hint:l.__("If the date in the table will be displayed as a human readable format or a timestamp","wp-emailer"),required:!1,"on-change":u.changeInput},null,8,["label","value","hint","on-change"])]})),_:1},8,["header-title","header-description"])]),(0,o.createCommentVNode)(" Section 2 "),(0,o.createElementVNode)("div",i,[(0,o.createVNode)(l.BaseCard,{"header-title":l.__("Email","wp-emailer"),"header-description":l.__("Change your email settings","wp-emailer")},{content:(0,o.withCtx)((function(){return[(0,o.createVNode)(l.InputSection,{type:"email",label:l.__("Emails","wp-emailer"),name:"emails","on-change":u.changeInput},{"input-content":(0,o.withCtx)((function(){return[c.emailsData.length?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createBlock)(l.BaseButton,{key:0,onclick:u.appendEmail,type:"button",variant:"default",class:"email-append-button"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)(" + "+(0,o.toDisplayString)(l.__("Add New","wp-emailer")),1)]})),_:1},8,["onclick"])),((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(c.emailsData,(function(e,t){return(0,o.openBlock)(),(0,o.createElementBlock)("div",{key:t},[(0,o.createElementVNode)("div",a,[(0,o.createVNode)(l.BaseInput,{type:"email",name:"emails_".concat(t),value:e,"on-change":function(e){return u.changeEmailInput(e,t)}},null,8,["name","value","on-change"]),c.emailsData.length<5&&!t?((0,o.openBlock)(),(0,o.createBlock)(l.BaseButton,{key:0,onclick:u.appendEmail,type:"button",variant:"default",class:"email-append-button"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)(" + ")]})),_:1},8,["onclick"])):(0,o.createCommentVNode)("v-if",!0),(0,o.createVNode)(l.BaseButton,{type:"button",onclick:function(){return u.deleteEmail(t)},variant:"error",class:"email-append-button"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)(" - ")]})),_:2},1032,["onclick"])])])})),128))]})),_:1},8,["label","on-change"])]})),_:1},8,["header-title","header-description"])])],32)])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingFormLoading.vue?vue&type=template&id=4a4325d8":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>m});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"mt-50"},r={class:"flex w-full mt-50"},i={class:"ml-50"},a={class:"flex w-full mt-20"},l={class:"ml-50"},c={class:"flex w-full mt-20"},u={class:"ml-50"},d={class:"flex w-full mt-50"},h={class:"ml-50"},p={class:"flex w-full mt-20"},f={class:"ml-50"};function m(e,t,n,m,g,v){var y=(0,o.resolveComponent)("SkeletonText");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createVNode)(y,{width:"200px"}),(0,o.createVNode)(y,{width:"500px"}),(0,o.createElementVNode)("div",r,[(0,o.createElementVNode)("div",null,[(0,o.createVNode)(y,{width:"200px"})]),(0,o.createElementVNode)("div",i,[(0,o.createVNode)(y,{width:"400px"})])]),(0,o.createElementVNode)("div",a,[(0,o.createElementVNode)("div",null,[(0,o.createVNode)(y,{width:"200px"})]),(0,o.createElementVNode)("div",l,[(0,o.createVNode)(y,{width:"400px"})])]),(0,o.createElementVNode)("div",c,[(0,o.createElementVNode)("div",null,[(0,o.createVNode)(y,{width:"200px"})]),(0,o.createElementVNode)("div",u,[(0,o.createVNode)(y,{width:"400px"})])]),(0,o.createElementVNode)("div",d,[(0,o.createElementVNode)("div",null,[(0,o.createVNode)(y,{width:"200px"})]),(0,o.createElementVNode)("div",h,[(0,o.createVNode)(y,{width:"400px"})])]),(0,o.createElementVNode)("div",p,[(0,o.createElementVNode)("div",null,[(0,o.createVNode)(y,{width:"200px"})]),(0,o.createElementVNode)("div",f,[(0,o.createVNode)(y,{width:"400px"})])])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=template&id=1c6d1848&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,r,i){return(0,o.openBlock)(),(0,o.createElementBlock)("div",{class:"skeleton skeleton-text",style:(0,o.normalizeStyle)(i.skeletonWidthStyle)},null,4)}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/spinner/BaseSpinner.vue?vue&type=template&id=64223412":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,r,i){return(0,o.withDirectives)(((0,o.openBlock)(),(0,o.createElementBlock)("div",{class:"sl-spinner",style:(0,o.normalizeStyle)(i.spinnerStyle)},null,4)),[[o.vShow,n.status]])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=template&id=fc36ea7a&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>l});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={className:"table-responsive"},r={key:1},i=["innerHTML"],a={key:1};function l(e,t,n,l,c,u){var d=(0,o.resolveComponent)("TableLoading");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[n.loading?((0,o.openBlock)(),(0,o.createBlock)(d,{key:0})):(0,o.createCommentVNode)("v-if",!0),n.loading?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createElementBlock)("table",r,[(0,o.createElementVNode)("thead",null,[(0,o.createElementVNode)("tr",null,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(n.headers,(function(e){return(0,o.openBlock)(),(0,o.createElementBlock)("th",{key:e},(0,o.toDisplayString)(e),1)})),128))])]),(0,o.createElementVNode)("tbody",null,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(n.rows.data,(function(e){return(0,o.openBlock)(),(0,o.createElementBlock)("tr",{key:e.id},[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(n.headers,(function(t){return(0,o.openBlock)(),(0,o.createElementBlock)("td",{key:t},[u.isHtml(null==t?void 0:t.toLowerCase())?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,innerHTML:null==e?void 0:e[null==t?void 0:t.toLowerCase()]},null,8,i)):((0,o.openBlock)(),(0,o.createElementBlock)("span",a,(0,o.toDisplayString)(null==e?void 0:e[null==t?void 0:t.toLowerCase()]),1))])})),128))])})),128))])]))])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=template&id=344abf38&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,r,i){var a=(0,o.resolveComponent)("SkeletonText");return(0,o.openBlock)(),(0,o.createElementBlock)("table",null,[(0,o.createElementVNode)("thead",null,[(0,o.createElementVNode)("tr",null,[(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})])])]),(0,o.createElementVNode)("tbody",null,[((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(5,(function(e,t){return(0,o.createElementVNode)("tr",{key:t,style:{"margin-top":"50px"}},[(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})])])})),64))])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/PageTabs.vue?vue&type=template&id=69ff8144&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>l});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={id:"wp-emailer-tabs"},r={class:"tab-item"},i={class:"tab-item"},a={class:"tab-item"};function l(e,t,n,l,c,u){var d=(0,o.resolveComponent)("router-link");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",r,[(0,o.createVNode)(d,{to:"/"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)((0,o.toDisplayString)(l.__("Settings","wp-emailer")),1)]})),_:1})]),(0,o.createElementVNode)("div",i,[(0,o.createVNode)(d,{to:"/list"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)((0,o.toDisplayString)(l.__("Top Pages","wp-emailer")),1)]})),_:1})]),(0,o.createElementVNode)("div",a,[(0,o.createVNode)(d,{to:"/graph"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)((0,o.toDisplayString)(l.__("Graph","wp-emailer")),1)]})),_:1})])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/GraphPage.vue?vue&type=template&id=3c6a0889&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>l});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"graph-page"},r={class:"flex justify-between"},i=function(e){return(0,o.pushScopeId)("data-v-3c6a0889"),e=e(),(0,o.popScopeId)(),e}((function(){return(0,o.createElementVNode)("svg",{xmlns:"http://www.w3.org/2000/svg","data-name":"Isolation Mode",viewBox:"0 0 24 24",width:"14",height:"14"},[(0,o.createElementVNode)("path",{d:"M12 2.99a9.03 9.03 0 0 1 6.36 2.65l-2.37 2.37h5.83a1.15 1.15 0 0 0 1.14-1.14V1.04l-2.49 2.49A11.98 11.98 0 0 0 0 12h2.99A9.02 9.02 0 0 1 12 2.99ZM21.01 12a9 9 0 0 1-15.37 6.36l2.37-2.37H2a.96.96 0 0 0-.95.95v6.02l2.49-2.49A11.98 11.98 0 0 0 24 12Z"})],-1)})),a={key:1,class:"text-center"};function l(e,t,n,l,c,u){return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",r,[(0,o.createElementVNode)("h3",null,(0,o.toDisplayString)(l.__("Graph","wp-emailer")),1),(0,o.createElementVNode)("div",null,[e.graphRefreshing?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,class:"refresh-icon",title:"Click to refresh",onClick:t[0]||(t[0]=function(){return u.refreshChart&&u.refreshChart.apply(u,arguments)})},[(0,o.createCommentVNode)(" eslint-disable-next-line vue/max-attributes-per-line "),i])),e.graphRefreshing?((0,o.openBlock)(),(0,o.createElementBlock)("div",a,[(0,o.createVNode)(l.BaseSpinner),(0,o.createTextVNode)(" "+(0,o.toDisplayString)(l.__("Refreshing...","wp-emailer")),1)])):(0,o.createCommentVNode)("v-if",!0)])]),e.graphLoading?((0,o.openBlock)(),(0,o.createBlock)(l.BarChartLoading,{key:0})):(0,o.createCommentVNode)("v-if",!0),e.graphLoading?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createBlock)(l.BarChart,{key:1,labels:e.graphLabels,datasets:e.graphDatasets},null,8,["labels","datasets"]))])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/ListPage.vue?vue&type=template&id=0e7a9b1e&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>a});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"list-page"},r={key:0},i={class:"no-emails"};function a(e,t,n,a,l,c){var u,d,h;return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("h3",null,(0,o.toDisplayString)(e.pageTitle),1),(0,o.createVNode)(a.BaseTable,{loading:e.tableLoading,headers:e.headers,rows:e.rows,"html-columns":l.htmlColumns},null,8,["loading","headers","rows","html-columns"]),(0,o.createElementVNode)("div",null,[e.tableLoading?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createBlock)(a.BasePagination,{key:0,"total-pages":e.rows.totalPage,"total-items":e.rows.totalItems,"per-page":e.rows.perPage,"current-page":l.currentPage,onPagechanged:c.onPageChange},null,8,["total-pages","total-items","per-page","current-page","onPagechanged"])),e.tableLoading?((0,o.openBlock)(),(0,o.createBlock)(a.PaginationLoader,{key:1})):(0,o.createCommentVNode)("v-if",!0)]),(0,o.createElementVNode)("div",null,[(0,o.createElementVNode)("h3",null,(0,o.toDisplayString)(a.__("Emails","wp-emailer")),1),(0,o.createElementVNode)("ul",null,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(null===(u=e.settings)||void 0===u?void 0:u.emails,(function(e,t){return(0,o.openBlock)(),(0,o.createElementBlock)("li",{key:t},(0,o.toDisplayString)(e),1)})),128)),null!==(d=e.settings)&&void 0!==d&&null!==(h=d.emails)&&void 0!==h&&h.length?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createElementBlock)("li",r,[(0,o.createElementVNode)("span",i,(0,o.toDisplayString)(a.__("Sorry, No emails added yet. Please add email from Settings page.","wp-emailer")),1)]))])])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/SettingPage.vue?vue&type=template&id=410b268b":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>r});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"settings-page"};function r(e,t,n,r,i,a){var l=(0,o.resolveComponent)("SettingFormLoading"),c=(0,o.resolveComponent)("SettingForm");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[e.isSettingsLoading?((0,o.openBlock)(),(0,o.createBlock)(l,{key:0})):(0,o.createCommentVNode)("v-if",!0),e.isSettingsLoading?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createBlock)(c,{key:1,default:e.settings,change:a.onChangeInput,settings:e.settings},null,8,["default","change","settings"]))])}},"./src/i18n.js":(e,t,n)=>{"use strict";n.r(t);var o=n("./node_modules/@wordpress/i18n/build-module/index.js");window.__=o.__,window.sprintf=o.sprintf},"./src/mixins/i18n.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={methods:{__:function(e){function t(t,n){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e,t){return __(e,t)})),sprintf:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return sprintf.apply(void 0,[e].concat(n))}))}}},"./src/router/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var o=n("./node_modules/vue-router/dist/vue-router.mjs"),s=n("./src/pages/ListPage.vue"),r=n("./src/pages/SettingPage.vue"),i=n("./src/pages/GraphPage.vue"),a=[{path:"/",name:"SettingPage",component:r.default,alias:"/settings"},{path:"/list",name:"ListPage",component:s.default},{path:"/graph",name:"GraphPage",component:i.default}];const l=(0,o.createRouter)({history:(0,o.createWebHistory)(wpEmailer.site.base_url),routes:a})},"./src/store/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js"),s=n("./src/store/modules/global.js"),r=n("./src/store/modules/settings.js"),i=n("./src/store/modules/tables.js"),a=n("./src/store/modules/graph.js");const l=(0,o.createStore)({modules:{global:s.default,settings:r.default,tables:i.default,graph:a.default},strict:!0,plugins:[(0,o.createLogger)()]})},"./src/store/modules/global.js":(e,t,n)=>{"use strict";function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.r(t),n.d(t,{default:()=>i});const i={state:function(){return{alert:{isVisible:!1,message:"",type:"default"}}},getters:{alert:function(e){return e.alert}},actions:{setAlert:function(e,t){var n=e.commit;n("setAlert",t),"success"===t.type&&setTimeout((function(){n("hideAlert")}),5e3)},showAlert:function(e){(0,e.commit)("setIsAlertVisible",!0)},hideAlert:function(e){(0,e.commit)("hideAlert",!1)}},mutations:{setAlert:function(e,t){e.alert=s(s({},e.alert),{},{isVisible:!0},t)},hideAlert:function(e){e.alert={isVisible:!1,message:"",type:"default"}},setIsAlertVisible:function(e,t){e.alert=s(s({},e.alert),{},{isVisible:t})}}}},"./src/store/modules/graph.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var o=n("./src/utils/ajax.js"),s=n("./src/utils/date-formatter.js");function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(){i=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,o){var s=t&&t.prototype instanceof p?t:p,r=Object.create(s.prototype),i=new j(o||[]);return r._invoke=function(e,t,n){var o="suspendedStart";return function(s,r){if("executing"===o)throw new Error("Generator is already running");if("completed"===o){if("throw"===s)throw r;return{value:void 0,done:!0}}for(n.method=s,n.arg=r;;){var i=n.delegate;if(i){var a=w(i,n);if(a){if(a===h)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===o)throw o="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o="executing";var l=d(e,t,n);if("normal"===l.type){if(o=n.done?"completed":"suspendedYield",l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o="completed",n.method="throw",n.arg=l.arg)}}}(e,n,i),r}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var h={};function p(){}function f(){}function m(){}var g={};c(g,s,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(P([])));y&&y!==t&&n.call(y,s)&&(g=y);var b=m.prototype=p.prototype=Object.create(g);function _(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function o(s,i,a,l){var c=d(e[s],e,i);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==r(h)&&n.call(h,"__await")?t.resolve(h.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(h).then((function(e){u.value=e,a(u)}),(function(e){return o("throw",e,a,l)}))}l(c.arg)}var s;this._invoke=function(e,n){function r(){return new t((function(t,s){o(e,n,t,s)}))}return s=s?s.then(r,r):r()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return h;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=d(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,h;var s=o.arg;return s?s.done?(t[e.resultName]=s.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,h):s:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,h)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function j(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function P(e){if(e){var t=e[s];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,r=function t(){for(;++o<e.length;)if(n.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=void 0,t.done=!0,t};return r.next=r}}return{next:O}}function O(){return{value:void 0,done:!0}}return f.prototype=m,c(b,"constructor",m),c(m,"constructor",f),f.displayName=c(m,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,c(e,l,"GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},_(x.prototype),c(x.prototype,a,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,o,s,r){void 0===r&&(r=Promise);var i=new x(u(t,n,o,s),r);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},_(b),c(b,l,"Generator"),c(b,s,(function(){return this})),c(b,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var o=t.pop();if(o in e)return n.value=o,n.done=!1,n}return n.done=!0,n}},e.values=P,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function o(n,o){return i.type="throw",i.arg=e,t.next=n,o&&(t.method="next",t.arg=void 0),!!o}for(var s=this.tryEntries.length-1;s>=0;--s){var r=this.tryEntries[s],i=r.completion;if("root"===r.tryLoc)return o("end");if(r.tryLoc<=this.prev){var a=n.call(r,"catchLoc"),l=n.call(r,"finallyLoc");if(a&&l){if(this.prev<r.catchLoc)return o(r.catchLoc,!0);if(this.prev<r.finallyLoc)return o(r.finallyLoc)}else if(a){if(this.prev<r.catchLoc)return o(r.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return o(r.finallyLoc)}}}},abrupt:function(e,t){for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o];if(s.tryLoc<=this.prev&&n.call(s,"finallyLoc")&&this.prev<s.finallyLoc){var r=s;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=e,i.arg=t,r?(this.method="next",this.next=r.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var s=o.arg;k(n)}return s}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:P(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),h}},e}function a(e,t,n,o,s,r,i){try{var a=e[r](i),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(o,s)}function l(e){return function(){var t=this,n=arguments;return new Promise((function(o,s){var r=e.apply(t,n);function i(e){a(r,o,s,i,l,"next",e)}function l(e){a(r,o,s,i,l,"throw",e)}i(void 0)}))}}const c={state:function(){return{graphLabels:[],graphDatasets:[],graphLoading:!1,graphRefreshing:!1}},getters:{graphLabels:function(e){return e.graphLabels},graphDatasets:function(e){return e.graphDatasets},graphLoading:function(e){return e.graphLoading},graphRefreshing:function(e){return e.graphRefreshing}},actions:{getGraphData:function(e){var t=arguments;return l(i().mark((function n(){var r,a,l,c;return i().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=e.dispatch,a=e.commit,l=t.length>1&&void 0!==t[1]&&t[1],a("setGraphLoading",!0),c="action=".concat("wp_emailer_get_data"),l&&(c+="&refresh=1",a("setGraphRefreshing",!0)),n.next=7,(0,o.getRequest)(c).then((function(e){if(e.success){var t,n,o=null==e||null===(t=e.data)||void 0===t||null===(n=t.data)||void 0===n?void 0:n.graph;if(void 0!==o){var i=[],c=[];Object.keys(o).forEach((function(e){var t=o[e];i.push((0,s.formatDate)(t.date,!0)),c.push(t.value)}));var u=[{label:"Data",backgroundColor:"#ff982d",data:c}];a("setGraphLabels",i),a("setGraphDatasets",u),l&&r("setAlert",{message:"Graph refreshed successfully.",type:"success"},{root:!0})}}}));case 7:a("setGraphLoading",!1),a("setGraphRefreshing",!1);case 9:case"end":return n.stop()}}),n)})))()}},mutations:{setGraphLabels:function(e,t){e.graphLabels=t},setGraphDatasets:function(e,t){e.graphDatasets=t},setGraphLoading:function(e,t){e.graphLoading=t},setGraphRefreshing:function(e,t){e.graphRefreshing=t}}}},"./src/store/modules/settings.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>d});var o=n("./src/utils/ajax.js");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){l=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},r=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,o){var s=t&&t.prototype instanceof p?t:p,r=Object.create(s.prototype),i=new j(o||[]);return r._invoke=function(e,t,n){var o="suspendedStart";return function(s,r){if("executing"===o)throw new Error("Generator is already running");if("completed"===o){if("throw"===s)throw r;return{value:void 0,done:!0}}for(n.method=s,n.arg=r;;){var i=n.delegate;if(i){var a=w(i,n);if(a){if(a===h)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===o)throw o="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o="executing";var l=d(e,t,n);if("normal"===l.type){if(o=n.done?"completed":"suspendedYield",l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o="completed",n.method="throw",n.arg=l.arg)}}}(e,n,i),r}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var h={};function p(){}function f(){}function m(){}var g={};c(g,r,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(P([])));y&&y!==t&&n.call(y,r)&&(g=y);var b=m.prototype=p.prototype=Object.create(g);function _(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function o(r,i,a,l){var c=d(e[r],e,i);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==s(h)&&n.call(h,"__await")?t.resolve(h.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(h).then((function(e){u.value=e,a(u)}),(function(e){return o("throw",e,a,l)}))}l(c.arg)}var r;this._invoke=function(e,n){function s(){return new t((function(t,s){o(e,n,t,s)}))}return r=r?r.then(s,s):s()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return h;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=d(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,h;var s=o.arg;return s?s.done?(t[e.resultName]=s.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,h):s:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,h)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function j(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function P(e){if(e){var t=e[r];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,s=function t(){for(;++o<e.length;)if(n.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=void 0,t.done=!0,t};return s.next=s}}return{next:O}}function O(){return{value:void 0,done:!0}}return f.prototype=m,c(b,"constructor",m),c(m,"constructor",f),f.displayName=c(m,a,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,c(e,a,"GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},_(x.prototype),c(x.prototype,i,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,o,s,r){void 0===r&&(r=Promise);var i=new x(u(t,n,o,s),r);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},_(b),c(b,a,"Generator"),c(b,r,(function(){return this})),c(b,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var o=t.pop();if(o in e)return n.value=o,n.done=!1,n}return n.done=!0,n}},e.values=P,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function o(n,o){return i.type="throw",i.arg=e,t.next=n,o&&(t.method="next",t.arg=void 0),!!o}for(var s=this.tryEntries.length-1;s>=0;--s){var r=this.tryEntries[s],i=r.completion;if("root"===r.tryLoc)return o("end");if(r.tryLoc<=this.prev){var a=n.call(r,"catchLoc"),l=n.call(r,"finallyLoc");if(a&&l){if(this.prev<r.catchLoc)return o(r.catchLoc,!0);if(this.prev<r.finallyLoc)return o(r.finallyLoc)}else if(a){if(this.prev<r.catchLoc)return o(r.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return o(r.finallyLoc)}}}},abrupt:function(e,t){for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o];if(s.tryLoc<=this.prev&&n.call(s,"finallyLoc")&&this.prev<s.finallyLoc){var r=s;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=e,i.arg=t,r?(this.method="next",this.next=r.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var s=o.arg;k(n)}return s}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:P(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),h}},e}function c(e,t,n,o,s,r,i){try{var a=e[r](i),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(o,s)}function u(e){return function(){var t=this,n=arguments;return new Promise((function(o,s){var r=e.apply(t,n);function i(e){c(r,o,s,i,a,"next",e)}function a(e){c(r,o,s,i,a,"throw",e)}i(void 0)}))}}const d={state:function(){return{settings:{},isSettingsLoading:!1,isSettingsSaving:!1}},getters:{settings:function(e){return e.settings},isSettingsLoading:function(e){return e.isSettingsLoading},isSettingsSaving:function(e){return e.isSettingsSaving}},actions:{fetchSettings:function(e){return u(l().mark((function t(){var n;return l().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return(n=e.commit)("setSettingsLoading",!0),t.next=4,(0,o.getRequest)("action=".concat("wp_emailer_get_settings")).then((function(e){e.success&&(n("storeAllSettings",e.data.data),n("setSettingsLoading",!1))}));case 4:n("setSettingsLoading",!1);case 5:case"end":return t.stop()}}),t)})))()},storeSettings:function(e,t){return u(l().mark((function n(){var s,r,i;return l().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return s=e.dispatch,(r=e.commit)("setSettingsSaving",!0),i={key:t.key,value:t.value,action:"wp_emailer_update_setting"},n.next=5,(0,o.postRequest)(i).then((function(e){var n;null!=e&&e.success&&(r("storeSettingItem",t),s("setAlert",{message:null==e||null===(n=e.data)||void 0===n?void 0:n.message,type:"success"},{root:!0}))})).catch((function(e){var t,n,o=JSON.parse(e.responseText);null!=o&&null!==(t=o.data)&&void 0!==t&&t.message&&s("setAlert",{message:null==o||null===(n=o.data)||void 0===n?void 0:n.message,type:"error"},{root:!0})}));case 5:r("setSettingsSaving",!1);case 6:case"end":return n.stop()}}),n)})))()}},mutations:{storeAllSettings:function(e,t){e.settings=t},storeSettingItem:function(e,t){e.settings=i(i({},e.settings),{},a({},t.key,null==t?void 0:t.value))},setSettingsLoading:function(e,t){e.isSettingsLoading=t},setSettingsSaving:function(e,t){e.isSettingsSaving=t}}}},"./src/store/modules/tables.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>p});var o=n("./src/utils/ajax.js"),s=n("./src/utils/date-formatter.js"),r=n("./src/utils/pagination-response.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(){a=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",r=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,o){var s=t&&t.prototype instanceof p?t:p,r=Object.create(s.prototype),i=new j(o||[]);return r._invoke=function(e,t,n){var o="suspendedStart";return function(s,r){if("executing"===o)throw new Error("Generator is already running");if("completed"===o){if("throw"===s)throw r;return{value:void 0,done:!0}}for(n.method=s,n.arg=r;;){var i=n.delegate;if(i){var a=w(i,n);if(a){if(a===h)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===o)throw o="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o="executing";var l=d(e,t,n);if("normal"===l.type){if(o=n.done?"completed":"suspendedYield",l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o="completed",n.method="throw",n.arg=l.arg)}}}(e,n,i),r}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var h={};function p(){}function f(){}function m(){}var g={};c(g,s,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(P([])));y&&y!==t&&n.call(y,s)&&(g=y);var b=m.prototype=p.prototype=Object.create(g);function _(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function o(s,r,a,l){var c=d(e[s],e,r);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==i(h)&&n.call(h,"__await")?t.resolve(h.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(h).then((function(e){u.value=e,a(u)}),(function(e){return o("throw",e,a,l)}))}l(c.arg)}var s;this._invoke=function(e,n){function r(){return new t((function(t,s){o(e,n,t,s)}))}return s=s?s.then(r,r):r()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return h;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=d(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,h;var s=o.arg;return s?s.done?(t[e.resultName]=s.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,h):s:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,h)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function j(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function P(e){if(e){var t=e[s];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,r=function t(){for(;++o<e.length;)if(n.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=void 0,t.done=!0,t};return r.next=r}}return{next:O}}function O(){return{value:void 0,done:!0}}return f.prototype=m,c(b,"constructor",m),c(m,"constructor",f),f.displayName=c(m,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,c(e,l,"GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},_(x.prototype),c(x.prototype,r,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,o,s,r){void 0===r&&(r=Promise);var i=new x(u(t,n,o,s),r);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},_(b),c(b,l,"Generator"),c(b,s,(function(){return this})),c(b,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var o=t.pop();if(o in e)return n.value=o,n.done=!1,n}return n.done=!0,n}},e.values=P,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function o(n,o){return i.type="throw",i.arg=e,t.next=n,o&&(t.method="next",t.arg=void 0),!!o}for(var s=this.tryEntries.length-1;s>=0;--s){var r=this.tryEntries[s],i=r.completion;if("root"===r.tryLoc)return o("end");if(r.tryLoc<=this.prev){var a=n.call(r,"catchLoc"),l=n.call(r,"finallyLoc");if(a&&l){if(this.prev<r.catchLoc)return o(r.catchLoc,!0);if(this.prev<r.finallyLoc)return o(r.finallyLoc)}else if(a){if(this.prev<r.catchLoc)return o(r.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return o(r.finallyLoc)}}}},abrupt:function(e,t){for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o];if(s.tryLoc<=this.prev&&n.call(s,"finallyLoc")&&this.prev<s.finallyLoc){var r=s;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=e,i.arg=t,r?(this.method="next",this.next=r.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var s=o.arg;k(n)}return s}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:P(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),h}},e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t,n,o,s,r,i){try{var a=e[r](i),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(o,s)}function h(e){return function(){var t=this,n=arguments;return new Promise((function(o,s){var r=e.apply(t,n);function i(e){d(r,o,s,i,a,"next",e)}function a(e){d(r,o,s,i,a,"throw",e)}i(void 0)}))}}const p={state:function(){return{pageTitle:"",headers:[],rows:{data:[],totalPage:0,totalItems:0,currentPage:1,perPage:5},tableLoading:!1}},getters:{pageTitle:function(e){return e.pageTitle},headers:function(e){return e.headers},rows:function(e){return e.rows},tableLoading:function(e){return e.tableLoading}},actions:{getTableData:function(e){var t=arguments;return h(a().mark((function n(){var i,l,u,d,h,p,f,m,g,v,y;return a().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return f=e.commit,m=e.rootState,g=t.length>1&&void 0!==t[1]?t[1]:1,f("setLoading",!0),v=null!==(i=null===(l=m.settings)||void 0===l||null===(u=l.settings)||void 0===u?void 0:u.numrows)&&void 0!==i?i:5,y=parseInt(null!==(d=null===(h=m.settings)||void 0===h||null===(p=h.settings)||void 0===p?void 0:p.humandate)&&void 0!==d?d:1),n.next=7,(0,o.getRequest)("action=".concat("wp_emailer_get_data")).then((function(e){if(e.success){var t,n,o,i,a,l,u,d,h,p,m;f("setPageTitle",null==e||null===(t=e.data)||void 0===t||null===(n=t.data)||void 0===n||null===(o=n.table)||void 0===o?void 0:o.title),f("setHeaders",null==e||null===(i=e.data)||void 0===i||null===(a=i.data)||void 0===a||null===(l=a.table)||void 0===l||null===(u=l.data)||void 0===u?void 0:u.headers);var b=(null==e||null===(d=e.data)||void 0===d||null===(h=d.data)||void 0===h||null===(p=h.table)||void 0===p||null===(m=p.data)||void 0===m?void 0:m.rows).map((function(e){return c(c({},e),{},{date:y?(0,s.formatDate)(e.date,!0):e.date,url:'<a class="page-link" href="'.concat(e.url,'" target="blank">').concat(e.url,"</a>")})}));f("setRows",(0,r.getPaginatedData)(b,g,v))}}));case 7:f("setLoading",!1);case 8:case"end":return n.stop()}}),n)})))()}},mutations:{setPageTitle:function(e,t){e.pageTitle=t},setHeaders:function(e,t){e.headers=t},setRows:function(e,t){e.rows=t},setLoading:function(e,t){e.tableLoading=t}}}},"./src/utils/ajax.js":(e,t,n)=>{"use strict";function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){i=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",r=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,o){var s=t&&t.prototype instanceof p?t:p,r=Object.create(s.prototype),i=new j(o||[]);return r._invoke=function(e,t,n){var o="suspendedStart";return function(s,r){if("executing"===o)throw new Error("Generator is already running");if("completed"===o){if("throw"===s)throw r;return{value:void 0,done:!0}}for(n.method=s,n.arg=r;;){var i=n.delegate;if(i){var a=w(i,n);if(a){if(a===h)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===o)throw o="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o="executing";var l=d(e,t,n);if("normal"===l.type){if(o=n.done?"completed":"suspendedYield",l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o="completed",n.method="throw",n.arg=l.arg)}}}(e,n,i),r}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var h={};function p(){}function f(){}function m(){}var g={};c(g,s,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(P([])));y&&y!==t&&n.call(y,s)&&(g=y);var b=m.prototype=p.prototype=Object.create(g);function _(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function o(s,r,i,l){var c=d(e[s],e,r);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==a(h)&&n.call(h,"__await")?t.resolve(h.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(h).then((function(e){u.value=e,i(u)}),(function(e){return o("throw",e,i,l)}))}l(c.arg)}var s;this._invoke=function(e,n){function r(){return new t((function(t,s){o(e,n,t,s)}))}return s=s?s.then(r,r):r()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return h;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=d(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,h;var s=o.arg;return s?s.done?(t[e.resultName]=s.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,h):s:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,h)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function j(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function P(e){if(e){var t=e[s];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,r=function t(){for(;++o<e.length;)if(n.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=void 0,t.done=!0,t};return r.next=r}}return{next:O}}function O(){return{value:void 0,done:!0}}return f.prototype=m,c(b,"constructor",m),c(m,"constructor",f),f.displayName=c(m,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,c(e,l,"GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},_(x.prototype),c(x.prototype,r,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,o,s,r){void 0===r&&(r=Promise);var i=new x(u(t,n,o,s),r);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},_(b),c(b,l,"Generator"),c(b,s,(function(){return this})),c(b,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var o=t.pop();if(o in e)return n.value=o,n.done=!1,n}return n.done=!0,n}},e.values=P,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function o(n,o){return i.type="throw",i.arg=e,t.next=n,o&&(t.method="next",t.arg=void 0),!!o}for(var s=this.tryEntries.length-1;s>=0;--s){var r=this.tryEntries[s],i=r.completion;if("root"===r.tryLoc)return o("end");if(r.tryLoc<=this.prev){var a=n.call(r,"catchLoc"),l=n.call(r,"finallyLoc");if(a&&l){if(this.prev<r.catchLoc)return o(r.catchLoc,!0);if(this.prev<r.finallyLoc)return o(r.finallyLoc)}else if(a){if(this.prev<r.catchLoc)return o(r.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return o(r.finallyLoc)}}}},abrupt:function(e,t){for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o];if(s.tryLoc<=this.prev&&n.call(s,"finallyLoc")&&this.prev<s.finallyLoc){var r=s;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=e,i.arg=t,r?(this.method="next",this.next=r.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var s=o.arg;k(n)}return s}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:P(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),h}},e}function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function l(e,t,n,o,s,r,i){try{var a=e[r](i),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(o,s)}function c(e){return function(){var t=this,n=arguments;return new Promise((function(o,s){var r=e.apply(t,n);function i(e){l(r,o,s,i,a,"next",e)}function a(e){l(r,o,s,i,a,"throw",e)}i(void 0)}))}}n.r(t),n.d(t,{getRequest:()=>d,postRequest:()=>p});var u=jQuery;function d(e){return h.apply(this,arguments)}function h(){return(h=c(i().mark((function e(t){var n;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n="".concat(wpEmailer.ajax_url,"?_wpnonce=").concat(wpEmailer.nonce,"&").concat(t),e.abrupt("return",u.ajax({url:n,type:"GET",processData:!1,contentType:!1}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function p(e){return f.apply(this,arguments)}function f(){return(f=c(i().mark((function e(t){var n;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=s({_wpnonce:wpEmailer.nonce},t),e.abrupt("return",u.ajax({type:"POST",url:wpEmailer.ajax_url,data:m(n),processData:!1,contentType:!1}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var m=function(e){var t=new FormData;return g(t,e),t},g=function e(t,n,o){if(!n||"object"!==a(n)||n instanceof Date||n instanceof File){var s=null==n?"":n;t.append(o,s)}else Object.keys(n).forEach((function(s){e(t,n[s],o?"".concat(o,"[").concat(s,"]"):s)}))}},"./src/utils/date-formatter.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{formatDate:()=>o});var o=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=new Date(e).toString(),o="".concat(n.substring(8,10)," ").concat(n.substring(4,7)," ").concat(n.substring(11,15));return t&&(o+=" at ".concat(n.substring(16,21))),o}},"./src/utils/menu-fix.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{menuFix:()=>s,pluginSlug:()=>o});var o="wp-emailer";function s(){var e=jQuery,t=e("#toplevel_page_"+o),n=window.location.href,s=n.substring(n.indexOf("admin.php"));e("ul.wp-submenu li",t).removeClass("current"),t.on("click","a",(function(){var n=e(this);e("ul.wp-submenu li",t).removeClass("current"),n.hasClass("wp-has-submenu")?e("li.wp-first-item",t).addClass("current"):n.parents("li").addClass("current")})),e("ul.wp-submenu a",t).each((function(t,n){e(n).attr("href").substring(e(n).attr("href").indexOf("/admin.php")+1)===s&&e(n).parent().addClass("current")}))}s()},"./src/utils/pagination-response.js":(e,t,n)=>{"use strict";function o(e,t,n){var o=e.length,s=Math.ceil(o/n),r=n*(t-1),i=r+n;return{totalPage:s,totalItems:o,currentPage:t,perPage:n,data:e.filter((function(e,t){return t>=r&&t<i}))}}n.r(t),n.d(t,{getPaginatedData:()=>o})},"./src/utils/validation.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{validateEmail:()=>r,validateSettings:()=>s});var o=n("./node_modules/@wordpress/i18n/build-module/index.js");function s(e){var t=e.key,n=e.value,s={valid:!0,message:""};switch(t){case"numrows":(n<1||n>5)&&(s.message=(0,o.__)("Please give valid input for number of rows.","wp-emailer"),s.valid=!1);break;case"humandate":0!==parseInt(n)&&1!==parseInt(n)&&(s.message=(0,o.__)("Please check if human readable date will be displayed or not.","wp-emailer"),s.valid=!1);break;case"emails":""!==n&&null!==n&&n.filter((function(e){return!r(e)})).length&&(s.message=(0,o.__)("Please provide valid emails.","wp-emailer"),s.valid=!1)}return s}var r=function(e){return String(e).toLowerCase().match(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/)}},"./node_modules/memize/index.js":e=>{e.exports=function(e,t){var n,o,s=0;function r(){var r,i,a=n,l=arguments.length;e:for(;a;){if(a.args.length===arguments.length){for(i=0;i<l;i++)if(a.args[i]!==arguments[i]){a=a.next;continue e}return a!==n&&(a===o&&(o=a.prev),a.prev.next=a.next,a.next&&(a.next.prev=a.prev),a.next=n,a.prev=null,n.prev=a,n=a),a.val}a=a.next}for(r=new Array(l),i=0;i<l;i++)r[i]=arguments[i];return a={args:r,val:e.apply(null,r)},n?(n.prev=a,a.next=n):o=a,s===t.maxSize?(o=o.prev).next=null:s++,n=a,a.val}return t=t||{},r.clear=function(){n=null,o=null,s=0},r}},"./src/styles/main.scss":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/alert/BaseAlert.vue?vue&type=style&index=0&id=6f5743d0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/BaseButton.vue?vue&type=style&index=0&id=88e226c0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/card/BaseCard.vue?vue&type=style&index=0&id=0db0c5e0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChartLoading.vue?vue&type=style&index=0&id=5ae1da00&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=style&index=0&id=d0938918&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/InputSection.vue?vue&type=style&index=0&id=a6a577e0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/BasePagination.vue?vue&type=style&index=0&id=3fa7b0a0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/PaginationLoader.vue?vue&type=style&index=0&id=1626f362&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingForm.vue?vue&type=style&index=0&id=271b0f38&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=style&index=0&id=1c6d1848&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/spinner/BaseSpinner.vue?vue&type=style&index=0&id=64223412&lang=scss":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=style&index=0&id=fc36ea7a&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=style&index=0&id=344abf38&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/PageTabs.vue?vue&type=style&index=0&id=69ff8144&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/GraphPage.vue?vue&type=style&index=0&id=3c6a0889&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/ListPage.vue?vue&type=style&index=0&id=0e7a9b1e&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/sprintf-js/src/sprintf.js":(e,t,n)=>{var o;!function(){"use strict";var s={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function r(e){return a(c(e),arguments)}function i(e,t){return r.apply(null,[e].concat(t||[]))}function a(e,t){var n,o,i,a,l,c,u,d,h,p=1,f=e.length,m="";for(o=0;o<f;o++)if("string"==typeof e[o])m+=e[o];else if("object"==typeof e[o]){if((a=e[o]).keys)for(n=t[p],i=0;i<a.keys.length;i++){if(null==n)throw new Error(r('[sprintf] Cannot access property "%s" of undefined value "%s"',a.keys[i],a.keys[i-1]));n=n[a.keys[i]]}else n=a.param_no?t[a.param_no]:t[p++];if(s.not_type.test(a.type)&&s.not_primitive.test(a.type)&&n instanceof Function&&(n=n()),s.numeric_arg.test(a.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(r("[sprintf] expecting number but found %T",n));switch(s.number.test(a.type)&&(d=n>=0),a.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,a.width?parseInt(a.width):0);break;case"e":n=a.precision?parseFloat(n).toExponential(a.precision):parseFloat(n).toExponential();break;case"f":n=a.precision?parseFloat(n).toFixed(a.precision):parseFloat(n);break;case"g":n=a.precision?String(Number(n.toPrecision(a.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=a.precision?n.substring(0,a.precision):n;break;case"t":n=String(!!n),n=a.precision?n.substring(0,a.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=a.precision?n.substring(0,a.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=a.precision?n.substring(0,a.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}s.json.test(a.type)?m+=n:(!s.number.test(a.type)||d&&!a.sign?h="":(h=d?"+":"-",n=n.toString().replace(s.sign,"")),c=a.pad_char?"0"===a.pad_char?"0":a.pad_char.charAt(1):" ",u=a.width-(h+n).length,l=a.width&&u>0?c.repeat(u):"",m+=a.align?h+n+l:"0"===c?h+l+n:l+h+n)}return m}var l=Object.create(null);function c(e){if(l[e])return l[e];for(var t,n=e,o=[],r=0;n;){if(null!==(t=s.text.exec(n)))o.push(t[0]);else if(null!==(t=s.modulo.exec(n)))o.push("%");else{if(null===(t=s.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){r|=1;var i=[],a=t[2],c=[];if(null===(c=s.key.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(i.push(c[1]);""!==(a=a.substring(c[0].length));)if(null!==(c=s.key_access.exec(a)))i.push(c[1]);else{if(null===(c=s.index_access.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");i.push(c[1])}t[2]=i}else r|=2;if(3===r)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");o.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return l[e]=o}t.sprintf=r,t.vsprintf=i,"undefined"!=typeof window&&(window.sprintf=r,window.vsprintf=i,void 0===(o=function(){return{sprintf:r,vsprintf:i}}.call(t,n,t,e))||(e.exports=o))}()},"./node_modules/tannin/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@tannin/plural-forms/index.js"),s={contextDelimiter:"",onMissingKey:null};function r(e,t){var n;for(n in this.data=e,this.pluralForms={},this.options={},s)this.options[n]=void 0!==t&&n in t?t[n]:s[n]}r.prototype.getPluralForm=function(e,t){var n,s,r,i=this.pluralForms[e];return i||("function"!=typeof(r=(n=this.data[e][""])["Plural-Forms"]||n["plural-forms"]||n.plural_forms)&&(s=function(e){var t,n,o;for(t=e.split(";"),n=0;n<t.length;n++)if(0===(o=t[n].trim()).indexOf("plural="))return o.substr(7)}(n["Plural-Forms"]||n["plural-forms"]||n.plural_forms),r=(0,o.default)(s)),i=this.pluralForms[e]=r),i(t)},r.prototype.dcnpgettext=function(e,t,n,o,s){var r,i,a;return r=void 0===s?0:this.getPluralForm(e,s),i=n,t&&(i=t+this.options.contextDelimiter+n),(a=this.data[e][i])&&a[r]?a[r]:(this.options.onMissingKey&&this.options.onMissingKey(n,e),0===r?n:o)}},"./node_modules/vue-chartjs/dist/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Bar:()=>u,Bubble:()=>g,Doughnut:()=>d,Line:()=>h,Pie:()=>p,PolarArea:()=>f,Radar:()=>m,Scatter:()=>v,generateChart:()=>c});var o,s=n("./node_modules/chart.js/dist/chart.mjs"),r=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function i(e,t,n,s){e(t,n),void 0!==s&&s.emit(o.ChartRendered)}function a(e,t){e.destroy(),void 0!==t&&t.emit(o.ChartDestroyed)}function l(e,t,n){const o=[];e.datasets=t.datasets.map((t=>{const s=e.datasets.find((e=>e[n]===t[n]));return s&&t.data&&!o.includes(s)?(o.push(s),Object.assign(s,t),s):{...t}}))}!function(e){e.ChartRendered="chart:rendered",e.ChartUpdated="chart:updated",e.ChartDestroyed="chart:destroyed",e.LabelsUpdated="labels:updated"}(o||(o={}));const c=(e,t,n)=>(0,r.defineComponent)({props:{chartData:{type:Object,required:!0},chartOptions:{type:Object,default:()=>{}},datasetIdKey:{type:String,default:"label"},chartId:{type:String,default:e},width:{type:Number,default:400},height:{type:Number,default:400},cssClasses:{type:String,default:""},styles:{type:Object,default:()=>{}},plugins:{type:Array,default:()=>[]}},setup(e,c){s.Chart.register(n);const u=(0,r.shallowRef)(null),d=(0,r.ref)(null);function h(n,o){if(null!==u.value&&a((0,r.toRaw)(u.value),c),null===d.value)throw new Error("Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components");{const i=function(e,t){const n={labels:void 0===e.labels?[]:[...e.labels],datasets:[]};return l(n,{...e},t),n}(n,e.datasetIdKey),a=d.value.getContext("2d");null!==a&&(u.value=new s.Chart(a,{type:t,data:(0,r.isProxy)(n)?new Proxy(i,{}):i,options:o,plugins:e.plugins}))}}function p(){const e=(0,r.toRaw)(u.value);null!==e?function(e,t){e.update(),void 0!==t&&t.emit(o.ChartUpdated)}(e,c):console.error("Update ERROR: chart instance not found")}return(0,r.watch)((()=>e.chartData),((t,n)=>function(t,n){const s=(0,r.isProxy)(t)?(0,r.toRaw)(t):{...t},d=(0,r.isProxy)(n)?(0,r.toRaw)(n):{...n};if(Object.keys(d).length>0){const t=(0,r.toRaw)(u.value),n=function(e,t){const n=e.datasets.map((e=>e.label)),o=t.datasets.map((e=>e.label));return t.datasets.length===e.datasets.length&&n.every(((e,t)=>e===o[t]))}(s,d);n&&null!==t?(l(null==t?void 0:t.data,s,e.datasetIdKey),void 0!==s.labels&&function(e,t,n){e.data.labels=t,void 0!==n&&n.emit(o.LabelsUpdated)}(t,s.labels,c),p()):(null!==t&&a(t,c),i(h,e.chartData,e.chartOptions,c))}else null!==u.value&&a((0,r.toRaw)(u.value),c),i(h,e.chartData,e.chartOptions,c)}(t,n)),{deep:!0}),(0,r.watch)((()=>e.chartOptions),(t=>function(t){const n=(0,r.toRaw)(u.value);null!==n?(function(e,t){e.options={...t}}(n,t),p()):i(h,e.chartData,e.chartOptions,c)}(t)),{deep:!0}),(0,r.onMounted)((()=>{"datasets"in e.chartData&&e.chartData.datasets.length>0&&i(h,e.chartData,e.chartOptions,c)})),(0,r.onBeforeUnmount)((()=>{null!==u.value&&a((0,r.toRaw)(u.value),c)})),c.expose({chart:u,updateChart:p}),()=>(0,r.h)("div",{style:e.styles,class:e.cssClasses},[(0,r.h)("canvas",{id:e.chartId,width:e.width,height:e.height,ref:d})])}}),u=c("bar-chart","bar",s.BarController),d=c("doughnut-chart","doughnut",s.DoughnutController),h=c("line-chart","line",s.LineController),p=c("pie-chart","pie",s.PieController),f=c("polar-chart","polarArea",s.PolarAreaController),m=c("radar-chart","radar",s.RadarController),g=c("bubble-chart","bubble",s.BubbleController),v=c("scatter-chart","scatter",s.ScatterController)},"./node_modules/vue-loader/dist/exportHelper.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=(e,t)=>{const n=e.__vccOpts||e;for(const[e,o]of t)n[e]=o;return n}},"./src/App.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/App.vue?vue&type=template&id=7ba5bd90"),s=n("./src/App.vue?vue&type=script&lang=js");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/App.vue"]])},"./src/components/alert/BaseAlert.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/alert/BaseAlert.vue?vue&type=template&id=6f5743d0&scoped=true"),s=n("./src/components/alert/BaseAlert.vue?vue&type=script&lang=js");n("./src/components/alert/BaseAlert.vue?vue&type=style&index=0&id=6f5743d0&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-6f5743d0"],["__file","src/components/alert/BaseAlert.vue"]])},"./src/components/button/BaseButton.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/button/BaseButton.vue?vue&type=template&id=88e226c0&scoped=true"),s=n("./src/components/button/BaseButton.vue?vue&type=script&lang=js");n("./src/components/button/BaseButton.vue?vue&type=style&index=0&id=88e226c0&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-88e226c0"],["__file","src/components/button/BaseButton.vue"]])},"./src/components/card/BaseCard.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/card/BaseCard.vue?vue&type=template&id=0db0c5e0&scoped=true"),s=n("./src/components/card/BaseCard.vue?vue&type=script&lang=js");n("./src/components/card/BaseCard.vue?vue&type=style&index=0&id=0db0c5e0&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-0db0c5e0"],["__file","src/components/card/BaseCard.vue"]])},"./src/components/chart/BarChart.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/chart/BarChart.vue?vue&type=template&id=6a09facc"),s=n("./src/components/chart/BarChart.vue?vue&type=script&setup=true&lang=js");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/components/chart/BarChart.vue"]])},"./src/components/chart/BarChartLoading.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/chart/BarChartLoading.vue?vue&type=template&id=5ae1da00&scoped=true"),s=n("./src/components/chart/BarChartLoading.vue?vue&type=script&lang=js");n("./src/components/chart/BarChartLoading.vue?vue&type=style&index=0&id=5ae1da00&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-5ae1da00"],["__file","src/components/chart/BarChartLoading.vue"]])},"./src/components/input/BaseInput.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/input/BaseInput.vue?vue&type=template&id=d0938918&scoped=true"),s=n("./src/components/input/BaseInput.vue?vue&type=script&lang=js");n("./src/components/input/BaseInput.vue?vue&type=style&index=0&id=d0938918&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-d0938918"],["__file","src/components/input/BaseInput.vue"]])},"./src/components/input/InputSection.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/input/InputSection.vue?vue&type=template&id=a6a577e0&scoped=true"),s=n("./src/components/input/InputSection.vue?vue&type=script&lang=js");n("./src/components/input/InputSection.vue?vue&type=style&index=0&id=a6a577e0&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-a6a577e0"],["__file","src/components/input/InputSection.vue"]])},"./src/components/pagination/BasePagination.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/pagination/BasePagination.vue?vue&type=template&id=3fa7b0a0&scoped=true"),s=n("./src/components/pagination/BasePagination.vue?vue&type=script&setup=true&lang=js");n("./src/components/pagination/BasePagination.vue?vue&type=style&index=0&id=3fa7b0a0&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-3fa7b0a0"],["__file","src/components/pagination/BasePagination.vue"]])},"./src/components/pagination/PaginationLoader.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/pagination/PaginationLoader.vue?vue&type=template&id=1626f362&scoped=true"),s=n("./src/components/pagination/PaginationLoader.vue?vue&type=script&lang=js");n("./src/components/pagination/PaginationLoader.vue?vue&type=style&index=0&id=1626f362&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-1626f362"],["__file","src/components/pagination/PaginationLoader.vue"]])},"./src/components/settings/SettingForm.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/settings/SettingForm.vue?vue&type=template&id=271b0f38&scoped=true"),s=n("./src/components/settings/SettingForm.vue?vue&type=script&setup=true&lang=js");n("./src/components/settings/SettingForm.vue?vue&type=style&index=0&id=271b0f38&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-271b0f38"],["__file","src/components/settings/SettingForm.vue"]])},"./src/components/settings/SettingFormLoading.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/settings/SettingFormLoading.vue?vue&type=template&id=4a4325d8"),s=n("./src/components/settings/SettingFormLoading.vue?vue&type=script&lang=js");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/components/settings/SettingFormLoading.vue"]])},"./src/components/skeleton/SkeletonText.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/skeleton/SkeletonText.vue?vue&type=template&id=1c6d1848&scoped=true"),s=n("./src/components/skeleton/SkeletonText.vue?vue&type=script&lang=js");n("./src/components/skeleton/SkeletonText.vue?vue&type=style&index=0&id=1c6d1848&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-1c6d1848"],["__file","src/components/skeleton/SkeletonText.vue"]])},"./src/components/spinner/BaseSpinner.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/spinner/BaseSpinner.vue?vue&type=template&id=64223412"),s=n("./src/components/spinner/BaseSpinner.vue?vue&type=script&lang=js");n("./src/components/spinner/BaseSpinner.vue?vue&type=style&index=0&id=64223412&lang=scss");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/components/spinner/BaseSpinner.vue"]])},"./src/components/tables/BaseTable.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/tables/BaseTable.vue?vue&type=template&id=fc36ea7a&scoped=true"),s=n("./src/components/tables/BaseTable.vue?vue&type=script&lang=js");n("./src/components/tables/BaseTable.vue?vue&type=style&index=0&id=fc36ea7a&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-fc36ea7a"],["__file","src/components/tables/BaseTable.vue"]])},"./src/components/tables/TableLoading.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/tables/TableLoading.vue?vue&type=template&id=344abf38&scoped=true"),s=n("./src/components/tables/TableLoading.vue?vue&type=script&lang=js");n("./src/components/tables/TableLoading.vue?vue&type=style&index=0&id=344abf38&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-344abf38"],["__file","src/components/tables/TableLoading.vue"]])},"./src/components/tabs/PageTabs.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/tabs/PageTabs.vue?vue&type=template&id=69ff8144&scoped=true"),s=n("./src/components/tabs/PageTabs.vue?vue&type=script&setup=true&lang=js");n("./src/components/tabs/PageTabs.vue?vue&type=style&index=0&id=69ff8144&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-69ff8144"],["__file","src/components/tabs/PageTabs.vue"]])},"./src/pages/GraphPage.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/pages/GraphPage.vue?vue&type=template&id=3c6a0889&scoped=true"),s=n("./src/pages/GraphPage.vue?vue&type=script&setup=true&lang=js");n("./src/pages/GraphPage.vue?vue&type=style&index=0&id=3c6a0889&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-3c6a0889"],["__file","src/pages/GraphPage.vue"]])},"./src/pages/ListPage.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/pages/ListPage.vue?vue&type=template&id=0e7a9b1e&scoped=true"),s=n("./src/pages/ListPage.vue?vue&type=script&setup=true&lang=js");n("./src/pages/ListPage.vue?vue&type=style&index=0&id=0e7a9b1e&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-0e7a9b1e"],["__file","src/pages/ListPage.vue"]])},"./src/pages/SettingPage.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/pages/SettingPage.vue?vue&type=template&id=410b268b"),s=n("./src/pages/SettingPage.vue?vue&type=script&lang=js");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/pages/SettingPage.vue"]])},"./src/App.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=script&lang=js")},"./src/components/alert/BaseAlert.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/alert/BaseAlert.vue?vue&type=script&lang=js")},"./src/components/button/BaseButton.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/BaseButton.vue?vue&type=script&lang=js")},"./src/components/card/BaseCard.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/card/BaseCard.vue?vue&type=script&lang=js")},"./src/components/chart/BarChart.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChart.vue?vue&type=script&setup=true&lang=js")},"./src/components/chart/BarChartLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChartLoading.vue?vue&type=script&lang=js")},"./src/components/input/BaseInput.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=script&lang=js")},"./src/components/input/InputSection.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/InputSection.vue?vue&type=script&lang=js")},"./src/components/pagination/BasePagination.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/BasePagination.vue?vue&type=script&setup=true&lang=js")},"./src/components/pagination/PaginationLoader.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/PaginationLoader.vue?vue&type=script&lang=js")},"./src/components/settings/SettingForm.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingForm.vue?vue&type=script&setup=true&lang=js")},"./src/components/settings/SettingFormLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingFormLoading.vue?vue&type=script&lang=js")},"./src/components/skeleton/SkeletonText.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=script&lang=js")},"./src/components/spinner/BaseSpinner.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/spinner/BaseSpinner.vue?vue&type=script&lang=js")},"./src/components/tables/BaseTable.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=script&lang=js")},"./src/components/tables/TableLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=script&lang=js")},"./src/components/tabs/PageTabs.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/PageTabs.vue?vue&type=script&setup=true&lang=js")},"./src/pages/GraphPage.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/GraphPage.vue?vue&type=script&setup=true&lang=js")},"./src/pages/ListPage.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/ListPage.vue?vue&type=script&setup=true&lang=js")},"./src/pages/SettingPage.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/SettingPage.vue?vue&type=script&lang=js")},"./src/App.vue?vue&type=template&id=7ba5bd90":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=template&id=7ba5bd90")},"./src/components/alert/BaseAlert.vue?vue&type=template&id=6f5743d0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/alert/BaseAlert.vue?vue&type=template&id=6f5743d0&scoped=true")},"./src/components/button/BaseButton.vue?vue&type=template&id=88e226c0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/BaseButton.vue?vue&type=template&id=88e226c0&scoped=true")},"./src/components/card/BaseCard.vue?vue&type=template&id=0db0c5e0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/card/BaseCard.vue?vue&type=template&id=0db0c5e0&scoped=true")},"./src/components/chart/BarChart.vue?vue&type=template&id=6a09facc":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChart.vue?vue&type=template&id=6a09facc")},"./src/components/chart/BarChartLoading.vue?vue&type=template&id=5ae1da00&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChartLoading.vue?vue&type=template&id=5ae1da00&scoped=true")},"./src/components/input/BaseInput.vue?vue&type=template&id=d0938918&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=template&id=d0938918&scoped=true")},"./src/components/input/InputSection.vue?vue&type=template&id=a6a577e0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/InputSection.vue?vue&type=template&id=a6a577e0&scoped=true")},"./src/components/pagination/BasePagination.vue?vue&type=template&id=3fa7b0a0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/BasePagination.vue?vue&type=template&id=3fa7b0a0&scoped=true")},"./src/components/pagination/PaginationLoader.vue?vue&type=template&id=1626f362&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/PaginationLoader.vue?vue&type=template&id=1626f362&scoped=true")},"./src/components/settings/SettingForm.vue?vue&type=template&id=271b0f38&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingForm.vue?vue&type=template&id=271b0f38&scoped=true")},"./src/components/settings/SettingFormLoading.vue?vue&type=template&id=4a4325d8":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingFormLoading.vue?vue&type=template&id=4a4325d8")},"./src/components/skeleton/SkeletonText.vue?vue&type=template&id=1c6d1848&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=template&id=1c6d1848&scoped=true")},"./src/components/spinner/BaseSpinner.vue?vue&type=template&id=64223412":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/spinner/BaseSpinner.vue?vue&type=template&id=64223412")},"./src/components/tables/BaseTable.vue?vue&type=template&id=fc36ea7a&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=template&id=fc36ea7a&scoped=true")},"./src/components/tables/TableLoading.vue?vue&type=template&id=344abf38&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=template&id=344abf38&scoped=true")},"./src/components/tabs/PageTabs.vue?vue&type=template&id=69ff8144&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/PageTabs.vue?vue&type=template&id=69ff8144&scoped=true")},"./src/pages/GraphPage.vue?vue&type=template&id=3c6a0889&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/GraphPage.vue?vue&type=template&id=3c6a0889&scoped=true")},"./src/pages/ListPage.vue?vue&type=template&id=0e7a9b1e&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/ListPage.vue?vue&type=template&id=0e7a9b1e&scoped=true")},"./src/pages/SettingPage.vue?vue&type=template&id=410b268b":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/SettingPage.vue?vue&type=template&id=410b268b")},"./src/components/alert/BaseAlert.vue?vue&type=style&index=0&id=6f5743d0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/alert/BaseAlert.vue?vue&type=style&index=0&id=6f5743d0&lang=scss&scoped=true")},"./src/components/button/BaseButton.vue?vue&type=style&index=0&id=88e226c0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/BaseButton.vue?vue&type=style&index=0&id=88e226c0&lang=scss&scoped=true")},"./src/components/card/BaseCard.vue?vue&type=style&index=0&id=0db0c5e0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/card/BaseCard.vue?vue&type=style&index=0&id=0db0c5e0&lang=scss&scoped=true")},"./src/components/chart/BarChartLoading.vue?vue&type=style&index=0&id=5ae1da00&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChartLoading.vue?vue&type=style&index=0&id=5ae1da00&lang=scss&scoped=true")},"./src/components/input/BaseInput.vue?vue&type=style&index=0&id=d0938918&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=style&index=0&id=d0938918&lang=scss&scoped=true")},"./src/components/input/InputSection.vue?vue&type=style&index=0&id=a6a577e0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/InputSection.vue?vue&type=style&index=0&id=a6a577e0&lang=scss&scoped=true")},"./src/components/pagination/BasePagination.vue?vue&type=style&index=0&id=3fa7b0a0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/BasePagination.vue?vue&type=style&index=0&id=3fa7b0a0&lang=scss&scoped=true")},"./src/components/pagination/PaginationLoader.vue?vue&type=style&index=0&id=1626f362&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/PaginationLoader.vue?vue&type=style&index=0&id=1626f362&lang=scss&scoped=true")},"./src/components/settings/SettingForm.vue?vue&type=style&index=0&id=271b0f38&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingForm.vue?vue&type=style&index=0&id=271b0f38&lang=scss&scoped=true")},"./src/components/skeleton/SkeletonText.vue?vue&type=style&index=0&id=1c6d1848&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=style&index=0&id=1c6d1848&lang=scss&scoped=true")},"./src/components/spinner/BaseSpinner.vue?vue&type=style&index=0&id=64223412&lang=scss":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/spinner/BaseSpinner.vue?vue&type=style&index=0&id=64223412&lang=scss")},"./src/components/tables/BaseTable.vue?vue&type=style&index=0&id=fc36ea7a&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=style&index=0&id=fc36ea7a&lang=scss&scoped=true")},"./src/components/tables/TableLoading.vue?vue&type=style&index=0&id=344abf38&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=style&index=0&id=344abf38&lang=scss&scoped=true")},"./src/components/tabs/PageTabs.vue?vue&type=style&index=0&id=69ff8144&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/PageTabs.vue?vue&type=style&index=0&id=69ff8144&lang=scss&scoped=true")},"./src/pages/GraphPage.vue?vue&type=style&index=0&id=3c6a0889&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/GraphPage.vue?vue&type=style&index=0&id=3c6a0889&lang=scss&scoped=true")},"./src/pages/ListPage.vue?vue&type=style&index=0&id=0e7a9b1e&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/ListPage.vue?vue&type=style&index=0&id=0e7a9b1e&lang=scss&scoped=true")},"./node_modules/vue/dist/vue.runtime.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>s.BaseTransition,Comment:()=>s.Comment,EffectScope:()=>s.EffectScope,Fragment:()=>s.Fragment,KeepAlive:()=>s.KeepAlive,ReactiveEffect:()=>s.ReactiveEffect,Static:()=>s.Static,Suspense:()=>s.Suspense,Teleport:()=>s.Teleport,Text:()=>s.Text,Transition:()=>s.Transition,TransitionGroup:()=>s.TransitionGroup,VueElement:()=>s.VueElement,callWithAsyncErrorHandling:()=>s.callWithAsyncErrorHandling,callWithErrorHandling:()=>s.callWithErrorHandling,camelize:()=>s.camelize,capitalize:()=>s.capitalize,cloneVNode:()=>s.cloneVNode,compatUtils:()=>s.compatUtils,compile:()=>r,computed:()=>s.computed,createApp:()=>s.createApp,createBlock:()=>s.createBlock,createCommentVNode:()=>s.createCommentVNode,createElementBlock:()=>s.createElementBlock,createElementVNode:()=>s.createElementVNode,createHydrationRenderer:()=>s.createHydrationRenderer,createPropsRestProxy:()=>s.createPropsRestProxy,createRenderer:()=>s.createRenderer,createSSRApp:()=>s.createSSRApp,createSlots:()=>s.createSlots,createStaticVNode:()=>s.createStaticVNode,createTextVNode:()=>s.createTextVNode,createVNode:()=>s.createVNode,customRef:()=>s.customRef,defineAsyncComponent:()=>s.defineAsyncComponent,defineComponent:()=>s.defineComponent,defineCustomElement:()=>s.defineCustomElement,defineEmits:()=>s.defineEmits,defineExpose:()=>s.defineExpose,defineProps:()=>s.defineProps,defineSSRCustomElement:()=>s.defineSSRCustomElement,devtools:()=>s.devtools,effect:()=>s.effect,effectScope:()=>s.effectScope,getCurrentInstance:()=>s.getCurrentInstance,getCurrentScope:()=>s.getCurrentScope,getTransitionRawChildren:()=>s.getTransitionRawChildren,guardReactiveProps:()=>s.guardReactiveProps,h:()=>s.h,handleError:()=>s.handleError,hydrate:()=>s.hydrate,initCustomFormatter:()=>s.initCustomFormatter,initDirectivesForSSR:()=>s.initDirectivesForSSR,inject:()=>s.inject,isMemoSame:()=>s.isMemoSame,isProxy:()=>s.isProxy,isReactive:()=>s.isReactive,isReadonly:()=>s.isReadonly,isRef:()=>s.isRef,isRuntimeOnly:()=>s.isRuntimeOnly,isShallow:()=>s.isShallow,isVNode:()=>s.isVNode,markRaw:()=>s.markRaw,mergeDefaults:()=>s.mergeDefaults,mergeProps:()=>s.mergeProps,nextTick:()=>s.nextTick,normalizeClass:()=>s.normalizeClass,normalizeProps:()=>s.normalizeProps,normalizeStyle:()=>s.normalizeStyle,onActivated:()=>s.onActivated,onBeforeMount:()=>s.onBeforeMount,onBeforeUnmount:()=>s.onBeforeUnmount,onBeforeUpdate:()=>s.onBeforeUpdate,onDeactivated:()=>s.onDeactivated,onErrorCaptured:()=>s.onErrorCaptured,onMounted:()=>s.onMounted,onRenderTracked:()=>s.onRenderTracked,onRenderTriggered:()=>s.onRenderTriggered,onScopeDispose:()=>s.onScopeDispose,onServerPrefetch:()=>s.onServerPrefetch,onUnmounted:()=>s.onUnmounted,onUpdated:()=>s.onUpdated,openBlock:()=>s.openBlock,popScopeId:()=>s.popScopeId,provide:()=>s.provide,proxyRefs:()=>s.proxyRefs,pushScopeId:()=>s.pushScopeId,queuePostFlushCb:()=>s.queuePostFlushCb,reactive:()=>s.reactive,readonly:()=>s.readonly,ref:()=>s.ref,registerRuntimeCompiler:()=>s.registerRuntimeCompiler,render:()=>s.render,renderList:()=>s.renderList,renderSlot:()=>s.renderSlot,resolveComponent:()=>s.resolveComponent,resolveDirective:()=>s.resolveDirective,resolveDynamicComponent:()=>s.resolveDynamicComponent,resolveFilter:()=>s.resolveFilter,resolveTransitionHooks:()=>s.resolveTransitionHooks,setBlockTracking:()=>s.setBlockTracking,setDevtoolsHook:()=>s.setDevtoolsHook,setTransitionHooks:()=>s.setTransitionHooks,shallowReactive:()=>s.shallowReactive,shallowReadonly:()=>s.shallowReadonly,shallowRef:()=>s.shallowRef,ssrContextKey:()=>s.ssrContextKey,ssrUtils:()=>s.ssrUtils,stop:()=>s.stop,toDisplayString:()=>s.toDisplayString,toHandlerKey:()=>s.toHandlerKey,toHandlers:()=>s.toHandlers,toRaw:()=>s.toRaw,toRef:()=>s.toRef,toRefs:()=>s.toRefs,transformVNodeArgs:()=>s.transformVNodeArgs,triggerRef:()=>s.triggerRef,unref:()=>s.unref,useAttrs:()=>s.useAttrs,useCssModule:()=>s.useCssModule,useCssVars:()=>s.useCssVars,useSSRContext:()=>s.useSSRContext,useSlots:()=>s.useSlots,useTransitionState:()=>s.useTransitionState,vModelCheckbox:()=>s.vModelCheckbox,vModelDynamic:()=>s.vModelDynamic,vModelRadio:()=>s.vModelRadio,vModelSelect:()=>s.vModelSelect,vModelText:()=>s.vModelText,vShow:()=>s.vShow,version:()=>s.version,warn:()=>s.warn,watch:()=>s.watch,watchEffect:()=>s.watchEffect,watchPostEffect:()=>s.watchPostEffect,watchSyncEffect:()=>s.watchSyncEffect,withAsyncContext:()=>s.withAsyncContext,withCtx:()=>s.withCtx,withDefaults:()=>s.withDefaults,withDirectives:()=>s.withDirectives,withKeys:()=>s.withKeys,withMemo:()=>s.withMemo,withModifiers:()=>s.withModifiers,withScopeId:()=>s.withScopeId});var o=n("./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"),s=n("./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js");(0,o.initCustomFormatter)();const r=()=>{(0,o.warn)('Runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".')}},"./node_modules/vuex/dist/vuex.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Store:()=>I,createLogger:()=>q,createNamespacedHelpers:()=>H,createStore:()=>B,default:()=>Z,mapActions:()=>z,mapGetters:()=>$,mapMutations:()=>V,mapState:()=>F,storeKey:()=>r,useStore:()=>i});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/index.js"),r="store";function i(e){return void 0===e&&(e=null),(0,o.inject)(null!==e?e:r)}function a(e,t){if(void 0===t&&(t=[]),null===e||"object"!=typeof e)return e;var n,o=(n=function(t){return t.original===e},t.filter(n)[0]);if(o)return o.copy;var s=Array.isArray(e)?[]:{};return t.push({original:e,copy:s}),Object.keys(e).forEach((function(n){s[n]=a(e[n],t)})),s}function l(e,t){Object.keys(e).forEach((function(n){return t(e[n],n)}))}function c(e){return null!==e&&"object"==typeof e}function u(e,t){if(!e)throw new Error("[vuex] "+t)}function d(e,t,n){return t.indexOf(e)<0&&(n&&n.prepend?t.unshift(e):t.push(e)),function(){var n=t.indexOf(e);n>-1&&t.splice(n,1)}}function h(e,t){e._actions=Object.create(null),e._mutations=Object.create(null),e._wrappedGetters=Object.create(null),e._modulesNamespaceMap=Object.create(null);var n=e.state;f(e,n,[],e._modules.root,!0),p(e,n,t)}function p(e,t,n){var s=e._state;e.getters={},e._makeLocalGettersCache=Object.create(null);var r=e._wrappedGetters,i={};l(r,(function(t,n){i[n]=function(e,t){return function(){return e(t)}}(t,e),Object.defineProperty(e.getters,n,{get:function(){return i[n]()},enumerable:!0})})),e._state=(0,o.reactive)({data:t}),e.strict&&function(e){(0,o.watch)((function(){return e._state.data}),(function(){u(e._committing,"do not mutate vuex store state outside mutation handlers.")}),{deep:!0,flush:"sync"})}(e),s&&n&&e._withCommit((function(){s.data=null}))}function f(e,t,n,o,s){var r=!n.length,i=e._modules.getNamespace(n);if(o.namespaced&&(e._modulesNamespaceMap[i]&&console.error("[vuex] duplicate namespace "+i+" for the namespaced module "+n.join("/")),e._modulesNamespaceMap[i]=o),!r&&!s){var a=g(t,n.slice(0,-1)),l=n[n.length-1];e._withCommit((function(){l in a&&console.warn('[vuex] state field "'+l+'" was overridden by a module with the same name at "'+n.join(".")+'"'),a[l]=o.state}))}var c=o.context=function(e,t,n){var o=""===t,s={dispatch:o?e.dispatch:function(n,o,s){var r=v(n,o,s),i=r.payload,a=r.options,l=r.type;if(a&&a.root||(l=t+l,e._actions[l]))return e.dispatch(l,i);console.error("[vuex] unknown local action type: "+r.type+", global type: "+l)},commit:o?e.commit:function(n,o,s){var r=v(n,o,s),i=r.payload,a=r.options,l=r.type;a&&a.root||(l=t+l,e._mutations[l])?e.commit(l,i,a):console.error("[vuex] unknown local mutation type: "+r.type+", global type: "+l)}};return Object.defineProperties(s,{getters:{get:o?function(){return e.getters}:function(){return m(e,t)}},state:{get:function(){return g(e.state,n)}}}),s}(e,i,n);o.forEachMutation((function(t,n){!function(e,t,n,o){(e._mutations[t]||(e._mutations[t]=[])).push((function(t){n.call(e,o.state,t)}))}(e,i+n,t,c)})),o.forEachAction((function(t,n){var o=t.root?n:i+n,s=t.handler||t;!function(e,t,n,o){(e._actions[t]||(e._actions[t]=[])).push((function(t){var s,r=n.call(e,{dispatch:o.dispatch,commit:o.commit,getters:o.getters,state:o.state,rootGetters:e.getters,rootState:e.state},t);return(s=r)&&"function"==typeof s.then||(r=Promise.resolve(r)),e._devtoolHook?r.catch((function(t){throw e._devtoolHook.emit("vuex:error",t),t})):r}))}(e,o,s,c)})),o.forEachGetter((function(t,n){!function(e,t,n,o){e._wrappedGetters[t]?console.error("[vuex] duplicate getter key: "+t):e._wrappedGetters[t]=function(e){return n(o.state,o.getters,e.state,e.getters)}}(e,i+n,t,c)})),o.forEachChild((function(o,r){f(e,t,n.concat(r),o,s)}))}function m(e,t){if(!e._makeLocalGettersCache[t]){var n={},o=t.length;Object.keys(e.getters).forEach((function(s){if(s.slice(0,o)===t){var r=s.slice(o);Object.defineProperty(n,r,{get:function(){return e.getters[s]},enumerable:!0})}})),e._makeLocalGettersCache[t]=n}return e._makeLocalGettersCache[t]}function g(e,t){return t.reduce((function(e,t){return e[t]}),e)}function v(e,t,n){return c(e)&&e.type&&(n=t,t=e,e=e.type),u("string"==typeof e,"expects string as the type, but found "+typeof e+"."),{type:e,payload:t,options:n}}var y="vuex:mutations",b="vuex:actions",_="vuex",x=0;function w(e,t){(0,s.setupDevtoolsPlugin)({id:"org.vuejs.vuex",app:e,label:"Vuex",homepage:"https://next.vuex.vuejs.org/",logo:"https://vuejs.org/images/icons/favicon-96x96.png",packageName:"vuex",componentStateTypes:["vuex bindings"]},(function(n){n.addTimelineLayer({id:y,label:"Vuex Mutations",color:S}),n.addTimelineLayer({id:b,label:"Vuex Actions",color:S}),n.addInspector({id:_,label:"Vuex",icon:"storage",treeFilterPlaceholder:"Filter stores..."}),n.on.getInspectorTree((function(n){if(n.app===e&&n.inspectorId===_)if(n.filter){var o=[];O(o,t._modules.root,n.filter,""),n.rootNodes=o}else n.rootNodes=[P(t._modules.root,"")]})),n.on.getInspectorState((function(n){if(n.app===e&&n.inspectorId===_){var o=n.nodeId;m(t,o),n.state=function(e,t,n){t="root"===n?t:t[n];var o=Object.keys(t),s={state:Object.keys(e.state).map((function(t){return{key:t,editable:!0,value:e.state[t]}}))};if(o.length){var r=function(e){var t={};return Object.keys(e).forEach((function(n){var o=n.split("/");if(o.length>1){var s=t,r=o.pop();o.forEach((function(e){s[e]||(s[e]={_custom:{value:{},display:e,tooltip:"Module",abstract:!0}}),s=s[e]._custom.value})),s[r]=C((function(){return e[n]}))}else t[n]=C((function(){return e[n]}))})),t}(t);s.getters=Object.keys(r).map((function(e){return{key:e.endsWith("/")?j(e):e,editable:!1,value:C((function(){return r[e]}))}}))}return s}((s=t._modules,(i=(r=o).split("/").filter((function(e){return e}))).reduce((function(e,t,n){var o=e[t];if(!o)throw new Error('Missing module "'+t+'" for path "'+r+'".');return n===i.length-1?o:o._children}),"root"===r?s:s.root._children)),"root"===o?t.getters:t._makeLocalGettersCache,o)}var s,r,i})),n.on.editInspectorState((function(n){if(n.app===e&&n.inspectorId===_){var o=n.nodeId,s=n.path;"root"!==o&&(s=o.split("/").filter(Boolean).concat(s)),t._withCommit((function(){n.set(t._state.data,s,n.state.value)}))}})),t.subscribe((function(e,t){var o={};e.payload&&(o.payload=e.payload),o.state=t,n.notifyComponentUpdate(),n.sendInspectorTree(_),n.sendInspectorState(_),n.addTimelineEvent({layerId:y,event:{time:Date.now(),title:e.type,data:o}})})),t.subscribeAction({before:function(e,t){var o={};e.payload&&(o.payload=e.payload),e._id=x++,e._time=Date.now(),o.state=t,n.addTimelineEvent({layerId:b,event:{time:e._time,title:e.type,groupId:e._id,subtitle:"start",data:o}})},after:function(e,t){var o={},s=Date.now()-e._time;o.duration={_custom:{type:"duration",display:s+"ms",tooltip:"Action duration",value:s}},e.payload&&(o.payload=e.payload),o.state=t,n.addTimelineEvent({layerId:b,event:{time:Date.now(),title:e.type,groupId:e._id,subtitle:"end",data:o}})}})}))}var S=8702998,k={label:"namespaced",textColor:16777215,backgroundColor:6710886};function j(e){return e&&"root"!==e?e.split("/").slice(-2,-1)[0]:"Root"}function P(e,t){return{id:t||"root",label:j(t),tags:e.namespaced?[k]:[],children:Object.keys(e._children).map((function(n){return P(e._children[n],t+n+"/")}))}}function O(e,t,n,o){o.includes(n)&&e.push({id:o||"root",label:o.endsWith("/")?o.slice(0,o.length-1):o||"Root",tags:t.namespaced?[k]:[]}),Object.keys(t._children).forEach((function(s){O(e,t._children[s],n,o+s+"/")}))}function C(e){try{return e()}catch(e){return e}}var E=function(e,t){this.runtime=t,this._children=Object.create(null),this._rawModule=e;var n=e.state;this.state=("function"==typeof n?n():n)||{}},T={namespaced:{configurable:!0}};T.namespaced.get=function(){return!!this._rawModule.namespaced},E.prototype.addChild=function(e,t){this._children[e]=t},E.prototype.removeChild=function(e){delete this._children[e]},E.prototype.getChild=function(e){return this._children[e]},E.prototype.hasChild=function(e){return e in this._children},E.prototype.update=function(e){this._rawModule.namespaced=e.namespaced,e.actions&&(this._rawModule.actions=e.actions),e.mutations&&(this._rawModule.mutations=e.mutations),e.getters&&(this._rawModule.getters=e.getters)},E.prototype.forEachChild=function(e){l(this._children,e)},E.prototype.forEachGetter=function(e){this._rawModule.getters&&l(this._rawModule.getters,e)},E.prototype.forEachAction=function(e){this._rawModule.actions&&l(this._rawModule.actions,e)},E.prototype.forEachMutation=function(e){this._rawModule.mutations&&l(this._rawModule.mutations,e)},Object.defineProperties(E.prototype,T);var M=function(e){this.register([],e,!1)};function A(e,t,n){if(D(e,n),t.update(n),n.modules)for(var o in n.modules){if(!t.getChild(o))return void console.warn("[vuex] trying to add a new module '"+o+"' on hot reloading, manual reload is needed");A(e.concat(o),t.getChild(o),n.modules[o])}}M.prototype.get=function(e){return e.reduce((function(e,t){return e.getChild(t)}),this.root)},M.prototype.getNamespace=function(e){var t=this.root;return e.reduce((function(e,n){return e+((t=t.getChild(n)).namespaced?n+"/":"")}),"")},M.prototype.update=function(e){A([],this.root,e)},M.prototype.register=function(e,t,n){var o=this;void 0===n&&(n=!0),D(e,t);var s=new E(t,n);0===e.length?this.root=s:this.get(e.slice(0,-1)).addChild(e[e.length-1],s),t.modules&&l(t.modules,(function(t,s){o.register(e.concat(s),t,n)}))},M.prototype.unregister=function(e){var t=this.get(e.slice(0,-1)),n=e[e.length-1],o=t.getChild(n);o?o.runtime&&t.removeChild(n):console.warn("[vuex] trying to unregister module '"+n+"', which is not registered")},M.prototype.isRegistered=function(e){var t=this.get(e.slice(0,-1)),n=e[e.length-1];return!!t&&t.hasChild(n)};var R={assert:function(e){return"function"==typeof e},expected:"function"},L={getters:R,mutations:R,actions:{assert:function(e){return"function"==typeof e||"object"==typeof e&&"function"==typeof e.handler},expected:'function or object with "handler" function'}};function D(e,t){Object.keys(L).forEach((function(n){if(t[n]){var o=L[n];l(t[n],(function(t,s){u(o.assert(t),function(e,t,n,o,s){var r=t+" should be "+s+' but "'+t+"."+n+'"';return e.length>0&&(r+=' in module "'+e.join(".")+'"'),r+" is "+JSON.stringify(o)+"."}(e,n,s,t,o.expected))}))}}))}function B(e){return new I(e)}var I=function e(t){var n=this;void 0===t&&(t={}),u("undefined"!=typeof Promise,"vuex requires a Promise polyfill in this browser."),u(this instanceof e,"store must be called with the new operator.");var o=t.plugins;void 0===o&&(o=[]);var s=t.strict;void 0===s&&(s=!1);var r=t.devtools;this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new M(t),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._makeLocalGettersCache=Object.create(null),this._devtools=r;var i=this,a=this.dispatch,l=this.commit;this.dispatch=function(e,t){return a.call(i,e,t)},this.commit=function(e,t,n){return l.call(i,e,t,n)},this.strict=s;var c=this._modules.root.state;f(this,c,[],this._modules.root),p(this,c),o.forEach((function(e){return e(n)}))},N={state:{configurable:!0}};I.prototype.install=function(e,t){e.provide(t||r,this),e.config.globalProperties.$store=this,(void 0===this._devtools||this._devtools)&&w(e,this)},N.state.get=function(){return this._state.data},N.state.set=function(e){u(!1,"use store.replaceState() to explicit replace store state.")},I.prototype.commit=function(e,t,n){var o=this,s=v(e,t,n),r=s.type,i=s.payload,a=s.options,l={type:r,payload:i},c=this._mutations[r];c?(this._withCommit((function(){c.forEach((function(e){e(i)}))})),this._subscribers.slice().forEach((function(e){return e(l,o.state)})),a&&a.silent&&console.warn("[vuex] mutation type: "+r+". Silent option has been removed. Use the filter functionality in the vue-devtools")):console.error("[vuex] unknown mutation type: "+r)},I.prototype.dispatch=function(e,t){var n=this,o=v(e,t),s=o.type,r=o.payload,i={type:s,payload:r},a=this._actions[s];if(a){try{this._actionSubscribers.slice().filter((function(e){return e.before})).forEach((function(e){return e.before(i,n.state)}))}catch(e){console.warn("[vuex] error in before action subscribers: "),console.error(e)}var l=a.length>1?Promise.all(a.map((function(e){return e(r)}))):a[0](r);return new Promise((function(e,t){l.then((function(t){try{n._actionSubscribers.filter((function(e){return e.after})).forEach((function(e){return e.after(i,n.state)}))}catch(e){console.warn("[vuex] error in after action subscribers: "),console.error(e)}e(t)}),(function(e){try{n._actionSubscribers.filter((function(e){return e.error})).forEach((function(t){return t.error(i,n.state,e)}))}catch(e){console.warn("[vuex] error in error action subscribers: "),console.error(e)}t(e)}))}))}console.error("[vuex] unknown action type: "+s)},I.prototype.subscribe=function(e,t){return d(e,this._subscribers,t)},I.prototype.subscribeAction=function(e,t){return d("function"==typeof e?{before:e}:e,this._actionSubscribers,t)},I.prototype.watch=function(e,t,n){var s=this;return u("function"==typeof e,"store.watch only accepts a function."),(0,o.watch)((function(){return e(s.state,s.getters)}),t,Object.assign({},n))},I.prototype.replaceState=function(e){var t=this;this._withCommit((function(){t._state.data=e}))},I.prototype.registerModule=function(e,t,n){void 0===n&&(n={}),"string"==typeof e&&(e=[e]),u(Array.isArray(e),"module path must be a string or an Array."),u(e.length>0,"cannot register the root module by using registerModule."),this._modules.register(e,t),f(this,this.state,e,this._modules.get(e),n.preserveState),p(this,this.state)},I.prototype.unregisterModule=function(e){var t=this;"string"==typeof e&&(e=[e]),u(Array.isArray(e),"module path must be a string or an Array."),this._modules.unregister(e),this._withCommit((function(){delete g(t.state,e.slice(0,-1))[e[e.length-1]]})),h(this)},I.prototype.hasModule=function(e){return"string"==typeof e&&(e=[e]),u(Array.isArray(e),"module path must be a string or an Array."),this._modules.isRegistered(e)},I.prototype.hotUpdate=function(e){this._modules.update(e),h(this,!0)},I.prototype._withCommit=function(e){var t=this._committing;this._committing=!0,e(),this._committing=t},Object.defineProperties(I.prototype,N);var F=G((function(e,t){var n={};return W(t)||console.error("[vuex] mapState: mapper parameter must be either an Array or an Object"),U(t).forEach((function(t){var o=t.key,s=t.val;n[o]=function(){var t=this.$store.state,n=this.$store.getters;if(e){var o=Y(this.$store,"mapState",e);if(!o)return;t=o.context.state,n=o.context.getters}return"function"==typeof s?s.call(this,t,n):t[s]},n[o].vuex=!0})),n})),V=G((function(e,t){var n={};return W(t)||console.error("[vuex] mapMutations: mapper parameter must be either an Array or an Object"),U(t).forEach((function(t){var o=t.key,s=t.val;n[o]=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];var o=this.$store.commit;if(e){var r=Y(this.$store,"mapMutations",e);if(!r)return;o=r.context.commit}return"function"==typeof s?s.apply(this,[o].concat(t)):o.apply(this.$store,[s].concat(t))}})),n})),$=G((function(e,t){var n={};return W(t)||console.error("[vuex] mapGetters: mapper parameter must be either an Array or an Object"),U(t).forEach((function(t){var o=t.key,s=t.val;s=e+s,n[o]=function(){if(!e||Y(this.$store,"mapGetters",e)){if(s in this.$store.getters)return this.$store.getters[s];console.error("[vuex] unknown getter: "+s)}},n[o].vuex=!0})),n})),z=G((function(e,t){var n={};return W(t)||console.error("[vuex] mapActions: mapper parameter must be either an Array or an Object"),U(t).forEach((function(t){var o=t.key,s=t.val;n[o]=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];var o=this.$store.dispatch;if(e){var r=Y(this.$store,"mapActions",e);if(!r)return;o=r.context.dispatch}return"function"==typeof s?s.apply(this,[o].concat(t)):o.apply(this.$store,[s].concat(t))}})),n})),H=function(e){return{mapState:F.bind(null,e),mapGetters:$.bind(null,e),mapMutations:V.bind(null,e),mapActions:z.bind(null,e)}};function U(e){return W(e)?Array.isArray(e)?e.map((function(e){return{key:e,val:e}})):Object.keys(e).map((function(t){return{key:t,val:e[t]}})):[]}function W(e){return Array.isArray(e)||c(e)}function G(e){return function(t,n){return"string"!=typeof t?(n=t,t=""):"/"!==t.charAt(t.length-1)&&(t+="/"),e(t,n)}}function Y(e,t,n){var o=e._modulesNamespaceMap[n];return o||console.error("[vuex] module namespace not found in "+t+"(): "+n),o}function q(e){void 0===e&&(e={});var t=e.collapsed;void 0===t&&(t=!0);var n=e.filter;void 0===n&&(n=function(e,t,n){return!0});var o=e.transformer;void 0===o&&(o=function(e){return e});var s=e.mutationTransformer;void 0===s&&(s=function(e){return e});var r=e.actionFilter;void 0===r&&(r=function(e,t){return!0});var i=e.actionTransformer;void 0===i&&(i=function(e){return e});var l=e.logMutations;void 0===l&&(l=!0);var c=e.logActions;void 0===c&&(c=!0);var u=e.logger;return void 0===u&&(u=console),function(e){var d=a(e.state);void 0!==u&&(l&&e.subscribe((function(e,r){var i=a(r);if(n(e,d,i)){var l=X(),c=s(e),h="mutation "+e.type+l;K(u,h,t),u.log("%c prev state","color: #9E9E9E; font-weight: bold",o(d)),u.log("%c mutation","color: #03A9F4; font-weight: bold",c),u.log("%c next state","color: #4CAF50; font-weight: bold",o(i)),J(u)}d=i})),c&&e.subscribeAction((function(e,n){if(r(e,n)){var o=X(),s=i(e),a="action "+e.type+o;K(u,a,t),u.log("%c action","color: #03A9F4; font-weight: bold",s),J(u)}})))}}function K(e,t,n){var o=n?e.groupCollapsed:e.group;try{o.call(e,t)}catch(n){e.log(t)}}function J(e){try{e.groupEnd()}catch(t){e.log("—— log end ——")}}function X(){var e=new Date;return" @ "+Q(e.getHours(),2)+":"+Q(e.getMinutes(),2)+":"+Q(e.getSeconds(),2)+"."+Q(e.getMilliseconds(),3)}function Q(e,t){return"0",n=t-e.toString().length,new Array(n+1).join("0")+e;var n}const Z={version:"4.0.2",Store:I,storeKey:r,createStore:B,useStore:i,mapState:F,mapMutations:V,mapGetters:$,mapActions:z,createNamespacedHelpers:H,createLogger:q}},"./node_modules/chart.js/dist/chart.mjs":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Animation:()=>a,Animations:()=>c,ArcElement:()=>dt,BarController:()=>T,BarElement:()=>Ot,BasePlatform:()=>be,BasicPlatform:()=>_e,BubbleController:()=>M,CategoryScale:()=>gn,Chart:()=>rt,DatasetController:()=>x,Decimation:()=>Mt,DomPlatform:()=>Le,DoughnutController:()=>A,Element:()=>I,Filler:()=>Yt,Interaction:()=>ie,Legend:()=>Jt,LineController:()=>R,LineElement:()=>bt,LinearScale:()=>bn,LogarithmicScale:()=>xn,PieController:()=>D,PointElement:()=>xt,PolarAreaController:()=>L,RadarController:()=>B,RadialLinearScale:()=>Cn,Scale:()=>Y,ScatterController:()=>J,SubTitle:()=>en,Ticks:()=>F,TimeScale:()=>Bn,TimeSeriesScale:()=>Nn,Title:()=>Qt,Tooltip:()=>fn,_adapters:()=>ee,_detectPlatform:()=>De,animator:()=>s,controllers:()=>X,defaults:()=>o.d,elements:()=>Ct,layouts:()=>ye,plugins:()=>mn,registerables:()=>Vn,registry:()=>K,scales:()=>Fn});var o=n("./node_modules/chart.js/dist/chunks/helpers.segment.mjs"),s=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(e,t,n,o){const s=t.listeners[o],r=t.duration;s.forEach((o=>o({chart:e,initial:t.initial,numSteps:r,currentStep:Math.min(n-t.start,r)})))}_refresh(){this._request||(this._running=!0,this._request=o.r.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(e=Date.now()){let t=0;this._charts.forEach(((n,o)=>{if(!n.running||!n.items.length)return;const s=n.items;let r,i=s.length-1,a=!1;for(;i>=0;--i)r=s[i],r._active?(r._total>n.duration&&(n.duration=r._total),r.tick(e),a=!0):(s[i]=s[s.length-1],s.pop());a&&(o.draw(),this._notify(o,n,e,"progress")),s.length||(n.running=!1,this._notify(o,n,e,"complete"),n.initial=!1),t+=s.length})),this._lastDate=e,0===t&&(this._running=!1)}_getAnims(e){const t=this._charts;let n=t.get(e);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},t.set(e,n)),n}listen(e,t,n){this._getAnims(e).listeners[t].push(n)}add(e,t){t&&t.length&&this._getAnims(e).items.push(...t)}has(e){return this._getAnims(e).items.length>0}start(e){const t=this._charts.get(e);t&&(t.running=!0,t.start=Date.now(),t.duration=t.items.reduce(((e,t)=>Math.max(e,t._duration)),0),this._refresh())}running(e){if(!this._running)return!1;const t=this._charts.get(e);return!!(t&&t.running&&t.items.length)}stop(e){const t=this._charts.get(e);if(!t||!t.items.length)return;const n=t.items;let o=n.length-1;for(;o>=0;--o)n[o].cancel();t.items=[],this._notify(e,t,Date.now(),"complete")}remove(e){return this._charts.delete(e)}};const r="transparent",i={boolean:(e,t,n)=>n>.5?t:e,color(e,t,n){const s=(0,o.c)(e||r),i=s.valid&&(0,o.c)(t||r);return i&&i.valid?i.mix(s,n).hexString():t},number:(e,t,n)=>e+(t-e)*n};class a{constructor(e,t,n,s){const r=t[n];s=(0,o.a)([e.to,s,r,e.from]);const a=(0,o.a)([e.from,r,s]);this._active=!0,this._fn=e.fn||i[e.type||typeof a],this._easing=o.e[e.easing]||o.e.linear,this._start=Math.floor(Date.now()+(e.delay||0)),this._duration=this._total=Math.floor(e.duration),this._loop=!!e.loop,this._target=t,this._prop=n,this._from=a,this._to=s,this._promises=void 0}active(){return this._active}update(e,t,n){if(this._active){this._notify(!1);const s=this._target[this._prop],r=n-this._start,i=this._duration-r;this._start=n,this._duration=Math.floor(Math.max(i,e.duration)),this._total+=r,this._loop=!!e.loop,this._to=(0,o.a)([e.to,t,s,e.from]),this._from=(0,o.a)([e.from,s,t])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(e){const t=e-this._start,n=this._duration,o=this._prop,s=this._from,r=this._loop,i=this._to;let a;if(this._active=s!==i&&(r||t<n),!this._active)return this._target[o]=i,void this._notify(!0);t<0?this._target[o]=s:(a=t/n%2,a=r&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[o]=this._fn(s,i,a))}wait(){const e=this._promises||(this._promises=[]);return new Promise(((t,n)=>{e.push({res:t,rej:n})}))}_notify(e){const t=e?"res":"rej",n=this._promises||[];for(let e=0;e<n.length;e++)n[e][t]()}}o.d.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const l=Object.keys(o.d.animation);o.d.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:e=>"onProgress"!==e&&"onComplete"!==e&&"fn"!==e}),o.d.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),o.d.describe("animations",{_fallback:"animation"}),o.d.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:e=>0|e}}}});class c{constructor(e,t){this._chart=e,this._properties=new Map,this.configure(t)}configure(e){if(!(0,o.i)(e))return;const t=this._properties;Object.getOwnPropertyNames(e).forEach((n=>{const s=e[n];if(!(0,o.i)(s))return;const r={};for(const e of l)r[e]=s[e];((0,o.b)(s.properties)&&s.properties||[n]).forEach((e=>{e!==n&&t.has(e)||t.set(e,r)}))}))}_animateOptions(e,t){const n=t.options,o=function(e,t){if(!t)return;let n=e.options;if(n)return n.$shared&&(e.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;e.options=t}(e,n);if(!o)return[];const s=this._createAnimations(o,n);return n.$shared&&function(e,t){const n=[],o=Object.keys(t);for(let t=0;t<o.length;t++){const s=e[o[t]];s&&s.active()&&n.push(s.wait())}return Promise.all(n)}(e.options.$animations,n).then((()=>{e.options=n}),(()=>{})),s}_createAnimations(e,t){const n=this._properties,o=[],s=e.$animations||(e.$animations={}),r=Object.keys(t),i=Date.now();let l;for(l=r.length-1;l>=0;--l){const c=r[l];if("$"===c.charAt(0))continue;if("options"===c){o.push(...this._animateOptions(e,t));continue}const u=t[c];let d=s[c];const h=n.get(c);if(d){if(h&&d.active()){d.update(h,u,i);continue}d.cancel()}h&&h.duration?(s[c]=d=new a(h,e,c,u),o.push(d)):e[c]=u}return o}update(e,t){if(0===this._properties.size)return void Object.assign(e,t);const n=this._createAnimations(e,t);return n.length?(s.add(this._chart,n),!0):void 0}}function u(e,t){const n=e&&e.options||{},o=n.reverse,s=void 0===n.min?t:0,r=void 0===n.max?t:0;return{start:o?r:s,end:o?s:r}}function d(e,t){const n=[],o=e._getSortedDatasetMetas(t);let s,r;for(s=0,r=o.length;s<r;++s)n.push(o[s].index);return n}function h(e,t,n,s={}){const r=e.keys,i="single"===s.mode;let a,l,c,u;if(null!==t){for(a=0,l=r.length;a<l;++a){if(c=+r[a],c===n){if(s.all)continue;break}u=e.values[c],(0,o.g)(u)&&(i||0===t||(0,o.s)(t)===(0,o.s)(u))&&(t+=u)}return t}}function p(e,t){const n=e&&e.options.stacked;return n||void 0===n&&void 0!==t.stack}function f(e,t,n){const o=e[t]||(e[t]={});return o[n]||(o[n]={})}function m(e,t,n,o){for(const s of t.getMatchingVisibleMetas(o).reverse()){const t=e[s.index];if(n&&t>0||!n&&t<0)return s.index}return null}function g(e,t){const{chart:n,_cachedMeta:o}=e,s=n._stacks||(n._stacks={}),{iScale:r,vScale:i,index:a}=o,l=r.axis,c=i.axis,u=function(e,t,n){return`${e.id}.${t.id}.${n.stack||n.type}`}(r,i,o),d=t.length;let h;for(let e=0;e<d;++e){const n=t[e],{[l]:r,[c]:d}=n;h=(n._stacks||(n._stacks={}))[c]=f(s,u,r),h[a]=d,h._top=m(h,i,!0,o.type),h._bottom=m(h,i,!1,o.type)}}function v(e,t){const n=e.scales;return Object.keys(n).filter((e=>n[e].axis===t)).shift()}function y(e,t){const n=e.controller.index,o=e.vScale&&e.vScale.axis;if(o){t=t||e._parsed;for(const e of t){const t=e._stacks;if(!t||void 0===t[o]||void 0===t[o][n])return;delete t[o][n]}}}const b=e=>"reset"===e||"none"===e,_=(e,t)=>t?e:Object.assign({},e);class x{constructor(e,t){this.chart=e,this._ctx=e.ctx,this.index=t,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const e=this._cachedMeta;this.configure(),this.linkScales(),e._stacked=p(e.vScale,e),this.addElements()}updateIndex(e){this.index!==e&&y(this._cachedMeta),this.index=e}linkScales(){const e=this.chart,t=this._cachedMeta,n=this.getDataset(),s=(e,t,n,o)=>"x"===e?t:"r"===e?o:n,r=t.xAxisID=(0,o.v)(n.xAxisID,v(e,"x")),i=t.yAxisID=(0,o.v)(n.yAxisID,v(e,"y")),a=t.rAxisID=(0,o.v)(n.rAxisID,v(e,"r")),l=t.indexAxis,c=t.iAxisID=s(l,r,i,a),u=t.vAxisID=s(l,i,r,a);t.xScale=this.getScaleForId(r),t.yScale=this.getScaleForId(i),t.rScale=this.getScaleForId(a),t.iScale=this.getScaleForId(c),t.vScale=this.getScaleForId(u)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(e){return this.chart.scales[e]}_getOtherScale(e){const t=this._cachedMeta;return e===t.iScale?t.vScale:t.iScale}reset(){this._update("reset")}_destroy(){const e=this._cachedMeta;this._data&&(0,o.u)(this._data,this),e._stacked&&y(e)}_dataCheck(){const e=this.getDataset(),t=e.data||(e.data=[]),n=this._data;if((0,o.i)(t))this._data=function(e){const t=Object.keys(e),n=new Array(t.length);let o,s,r;for(o=0,s=t.length;o<s;++o)r=t[o],n[o]={x:r,y:e[r]};return n}(t);else if(n!==t){if(n){(0,o.u)(n,this);const e=this._cachedMeta;y(e),e._parsed=[]}t&&Object.isExtensible(t)&&(0,o.l)(t,this),this._syncList=[],this._data=t}}addElements(){const e=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(e.dataset=new this.datasetElementType)}buildOrUpdateElements(e){const t=this._cachedMeta,n=this.getDataset();let o=!1;this._dataCheck();const s=t._stacked;t._stacked=p(t.vScale,t),t.stack!==n.stack&&(o=!0,y(t),t.stack=n.stack),this._resyncElements(e),(o||s!==t._stacked)&&g(this,t._parsed)}configure(){const e=this.chart.config,t=e.datasetScopeKeys(this._type),n=e.getOptionScopes(this.getDataset(),t,!0);this.options=e.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(e,t){const{_cachedMeta:n,_data:s}=this,{iScale:r,_stacked:i}=n,a=r.axis;let l,c,u,d=0===e&&t===s.length||n._sorted,h=e>0&&n._parsed[e-1];if(!1===this._parsing)n._parsed=s,n._sorted=!0,u=s;else{u=(0,o.b)(s[e])?this.parseArrayData(n,s,e,t):(0,o.i)(s[e])?this.parseObjectData(n,s,e,t):this.parsePrimitiveData(n,s,e,t);const r=()=>null===c[a]||h&&c[a]<h[a];for(l=0;l<t;++l)n._parsed[l+e]=c=u[l],d&&(r()&&(d=!1),h=c);n._sorted=d}i&&g(this,u)}parsePrimitiveData(e,t,n,o){const{iScale:s,vScale:r}=e,i=s.axis,a=r.axis,l=s.getLabels(),c=s===r,u=new Array(o);let d,h,p;for(d=0,h=o;d<h;++d)p=d+n,u[d]={[i]:c||s.parse(l[p],p),[a]:r.parse(t[p],p)};return u}parseArrayData(e,t,n,o){const{xScale:s,yScale:r}=e,i=new Array(o);let a,l,c,u;for(a=0,l=o;a<l;++a)c=a+n,u=t[c],i[a]={x:s.parse(u[0],c),y:r.parse(u[1],c)};return i}parseObjectData(e,t,n,s){const{xScale:r,yScale:i}=e,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,c=new Array(s);let u,d,h,p;for(u=0,d=s;u<d;++u)h=u+n,p=t[h],c[u]={x:r.parse((0,o.f)(p,a),h),y:i.parse((0,o.f)(p,l),h)};return c}getParsed(e){return this._cachedMeta._parsed[e]}getDataElement(e){return this._cachedMeta.data[e]}applyStack(e,t,n){const o=this.chart,s=this._cachedMeta,r=t[e.axis];return h({keys:d(o,!0),values:t._stacks[e.axis]},r,s.index,{mode:n})}updateRangeFromParsed(e,t,n,o){const s=n[t.axis];let r=null===s?NaN:s;const i=o&&n._stacks[t.axis];o&&i&&(o.values=i,r=h(o,s,this._cachedMeta.index)),e.min=Math.min(e.min,r),e.max=Math.max(e.max,r)}getMinMax(e,t){const n=this._cachedMeta,s=n._parsed,r=n._sorted&&e===n.iScale,i=s.length,a=this._getOtherScale(e),l=((e,t,n)=>e&&!t.hidden&&t._stacked&&{keys:d(n,!0),values:null})(t,n,this.chart),c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:u,max:h}=function(e){const{min:t,max:n,minDefined:o,maxDefined:s}=e.getUserBounds();return{min:o?t:Number.NEGATIVE_INFINITY,max:s?n:Number.POSITIVE_INFINITY}}(a);let p,f;function m(){f=s[p];const t=f[a.axis];return!(0,o.g)(f[e.axis])||u>t||h<t}for(p=0;p<i&&(m()||(this.updateRangeFromParsed(c,e,f,l),!r));++p);if(r)for(p=i-1;p>=0;--p)if(!m()){this.updateRangeFromParsed(c,e,f,l);break}return c}getAllParsedValues(e){const t=this._cachedMeta._parsed,n=[];let s,r,i;for(s=0,r=t.length;s<r;++s)i=t[s][e.axis],(0,o.g)(i)&&n.push(i);return n}getMaxOverflow(){return!1}getLabelAndValue(e){const t=this._cachedMeta,n=t.iScale,o=t.vScale,s=this.getParsed(e);return{label:n?""+n.getLabelForValue(s[n.axis]):"",value:o?""+o.getLabelForValue(s[o.axis]):""}}_update(e){const t=this._cachedMeta;this.update(e||"default"),t._clip=function(e){let t,n,s,r;return(0,o.i)(e)?(t=e.top,n=e.right,s=e.bottom,r=e.left):t=n=s=r=e,{top:t,right:n,bottom:s,left:r,disabled:!1===e}}((0,o.v)(this.options.clip,function(e,t,n){if(!1===n)return!1;const o=u(e,n),s=u(t,n);return{top:s.end,right:o.end,bottom:s.start,left:o.start}}(t.xScale,t.yScale,this.getMaxOverflow())))}update(e){}draw(){const e=this._ctx,t=this.chart,n=this._cachedMeta,o=n.data||[],s=t.chartArea,r=[],i=this._drawStart||0,a=this._drawCount||o.length-i,l=this.options.drawActiveElementsOnTop;let c;for(n.dataset&&n.dataset.draw(e,s,i,a),c=i;c<i+a;++c){const t=o[c];t.hidden||(t.active&&l?r.push(t):t.draw(e,s))}for(c=0;c<r.length;++c)r[c].draw(e,s)}getStyle(e,t){const n=t?"active":"default";return void 0===e&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(e||0,n)}getContext(e,t,n){const s=this.getDataset();let r;if(e>=0&&e<this._cachedMeta.data.length){const t=this._cachedMeta.data[e];r=t.$context||(t.$context=function(e,t,n){return(0,o.h)(e,{active:!1,dataIndex:t,parsed:void 0,raw:void 0,element:n,index:t,mode:"default",type:"data"})}(this.getContext(),e,t)),r.parsed=this.getParsed(e),r.raw=s.data[e],r.index=r.dataIndex=e}else r=this.$context||(this.$context=function(e,t){return(0,o.h)(e,{active:!1,dataset:void 0,datasetIndex:t,index:t,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),r.dataset=s,r.index=r.datasetIndex=this.index;return r.active=!!t,r.mode=n,r}resolveDatasetElementOptions(e){return this._resolveElementOptions(this.datasetElementType.id,e)}resolveDataElementOptions(e,t){return this._resolveElementOptions(this.dataElementType.id,t,e)}_resolveElementOptions(e,t="default",n){const s="active"===t,r=this._cachedDataOpts,i=e+"-"+t,a=r[i],l=this.enableOptionSharing&&(0,o.j)(n);if(a)return _(a,l);const c=this.chart.config,u=c.datasetElementScopeKeys(this._type,e),d=s?[`${e}Hover`,"hover",e,""]:[e,""],h=c.getOptionScopes(this.getDataset(),u),p=Object.keys(o.d.elements[e]),f=c.resolveNamedOptions(h,p,(()=>this.getContext(n,s)),d);return f.$shared&&(f.$shared=l,r[i]=Object.freeze(_(f,l))),f}_resolveAnimations(e,t,n){const o=this.chart,s=this._cachedDataOpts,r=`animation-${t}`,i=s[r];if(i)return i;let a;if(!1!==o.options.animation){const o=this.chart.config,s=o.datasetAnimationScopeKeys(this._type,t),r=o.getOptionScopes(this.getDataset(),s);a=o.createResolver(r,this.getContext(e,n,t))}const l=new c(o,a&&a.animations);return a&&a._cacheable&&(s[r]=Object.freeze(l)),l}getSharedOptions(e){if(e.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},e))}includeOptions(e,t){return!t||b(e)||this.chart._animationsDisabled}_getSharedOptions(e,t){const n=this.resolveDataElementOptions(e,t),o=this._sharedOptions,s=this.getSharedOptions(n),r=this.includeOptions(t,s)||s!==o;return this.updateSharedOptions(s,t,n),{sharedOptions:s,includeOptions:r}}updateElement(e,t,n,o){b(o)?Object.assign(e,n):this._resolveAnimations(t,o).update(e,n)}updateSharedOptions(e,t,n){e&&!b(t)&&this._resolveAnimations(void 0,t).update(e,n)}_setStyle(e,t,n,o){e.active=o;const s=this.getStyle(t,o);this._resolveAnimations(t,n,o).update(e,{options:!o&&this.getSharedOptions(s)||s})}removeHoverStyle(e,t,n){this._setStyle(e,n,"active",!1)}setHoverStyle(e,t,n){this._setStyle(e,n,"active",!0)}_removeDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!1)}_setDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!0)}_resyncElements(e){const t=this._data,n=this._cachedMeta.data;for(const[e,t,n]of this._syncList)this[e](t,n);this._syncList=[];const o=n.length,s=t.length,r=Math.min(s,o);r&&this.parse(0,r),s>o?this._insertElements(o,s-o,e):s<o&&this._removeElements(s,o-s)}_insertElements(e,t,n=!0){const o=this._cachedMeta,s=o.data,r=e+t;let i;const a=e=>{for(e.length+=t,i=e.length-1;i>=r;i--)e[i]=e[i-t]};for(a(s),i=e;i<r;++i)s[i]=new this.dataElementType;this._parsing&&a(o._parsed),this.parse(e,t),n&&this.updateElements(s,e,t,"reset")}updateElements(e,t,n,o){}_removeElements(e,t){const n=this._cachedMeta;if(this._parsing){const o=n._parsed.splice(e,t);n._stacked&&y(n,o)}n.data.splice(e,t)}_sync(e){if(this._parsing)this._syncList.push(e);else{const[t,n,o]=e;this[t](n,o)}this.chart._dataChanges.push([this.index,...e])}_onDataPush(){const e=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-e,e])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(e,t){t&&this._sync(["_removeElements",e,t]);const n=arguments.length-2;n&&this._sync(["_insertElements",e,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function w(e){const t=e.iScale,n=function(e,t){if(!e._cache.$bar){const n=e.getMatchingVisibleMetas(t);let s=[];for(let t=0,o=n.length;t<o;t++)s=s.concat(n[t].controller.getAllParsedValues(e));e._cache.$bar=(0,o._)(s.sort(((e,t)=>e-t)))}return e._cache.$bar}(t,e.type);let s,r,i,a,l=t._length;const c=()=>{32767!==i&&-32768!==i&&((0,o.j)(a)&&(l=Math.min(l,Math.abs(i-a)||l)),a=i)};for(s=0,r=n.length;s<r;++s)i=t.getPixelForValue(n[s]),c();for(a=void 0,s=0,r=t.ticks.length;s<r;++s)i=t.getPixelForTick(s),c();return l}function S(e,t,n,s){return(0,o.b)(e)?function(e,t,n,o){const s=n.parse(e[0],o),r=n.parse(e[1],o),i=Math.min(s,r),a=Math.max(s,r);let l=i,c=a;Math.abs(i)>Math.abs(a)&&(l=a,c=i),t[n.axis]=c,t._custom={barStart:l,barEnd:c,start:s,end:r,min:i,max:a}}(e,t,n,s):t[n.axis]=n.parse(e,s),t}function k(e,t,n,o){const s=e.iScale,r=e.vScale,i=s.getLabels(),a=s===r,l=[];let c,u,d,h;for(c=n,u=n+o;c<u;++c)h=t[c],d={},d[s.axis]=a||s.parse(i[c],c),l.push(S(h,d,r,c));return l}function j(e){return e&&void 0!==e.barStart&&void 0!==e.barEnd}function P(e,t,n,o){let s=t.borderSkipped;const r={};if(!s)return void(e.borderSkipped=r);if(!0===s)return void(e.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:i,end:a,reverse:l,top:c,bottom:u}=function(e){let t,n,o,s,r;return e.horizontal?(t=e.base>e.x,n="left",o="right"):(t=e.base<e.y,n="bottom",o="top"),t?(s="end",r="start"):(s="start",r="end"),{start:n,end:o,reverse:t,top:s,bottom:r}}(e);"middle"===s&&n&&(e.enableBorderRadius=!0,(n._top||0)===o?s=c:(n._bottom||0)===o?s=u:(r[O(u,i,a,l)]=!0,s=c)),r[O(s,i,a,l)]=!0,e.borderSkipped=r}function O(e,t,n,o){var s,r,i;return o?(i=n,e=C(e=(s=e)===(r=t)?i:s===i?r:s,n,t)):e=C(e,t,n),e}function C(e,t,n){return"start"===e?t:"end"===e?n:e}function E(e,{inflateAmount:t},n){e.inflateAmount="auto"===t?1===n?.33:0:t}x.defaults={},x.prototype.datasetElementType=null,x.prototype.dataElementType=null;class T extends x{parsePrimitiveData(e,t,n,o){return k(e,t,n,o)}parseArrayData(e,t,n,o){return k(e,t,n,o)}parseObjectData(e,t,n,s){const{iScale:r,vScale:i}=e,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,c="x"===r.axis?a:l,u="x"===i.axis?a:l,d=[];let h,p,f,m;for(h=n,p=n+s;h<p;++h)m=t[h],f={},f[r.axis]=r.parse((0,o.f)(m,c),h),d.push(S((0,o.f)(m,u),f,i,h));return d}updateRangeFromParsed(e,t,n,o){super.updateRangeFromParsed(e,t,n,o);const s=n._custom;s&&t===this._cachedMeta.vScale&&(e.min=Math.min(e.min,s.min),e.max=Math.max(e.max,s.max))}getMaxOverflow(){return 0}getLabelAndValue(e){const t=this._cachedMeta,{iScale:n,vScale:o}=t,s=this.getParsed(e),r=s._custom,i=j(r)?"["+r.start+", "+r.end+"]":""+o.getLabelForValue(s[o.axis]);return{label:""+n.getLabelForValue(s[n.axis]),value:i}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(e){const t=this._cachedMeta;this.updateElements(t.data,0,t.data.length,e)}updateElements(e,t,n,s){const r="reset"===s,{index:i,_cachedMeta:{vScale:a}}=this,l=a.getBasePixel(),c=a.isHorizontal(),u=this._getRuler(),{sharedOptions:d,includeOptions:h}=this._getSharedOptions(t,s);for(let p=t;p<t+n;p++){const t=this.getParsed(p),n=r||(0,o.k)(t[a.axis])?{base:l,head:l}:this._calculateBarValuePixels(p),f=this._calculateBarIndexPixels(p,u),m=(t._stacks||{})[a.axis],g={horizontal:c,base:n.base,enableBorderRadius:!m||j(t._custom)||i===m._top||i===m._bottom,x:c?n.head:f.center,y:c?f.center:n.head,height:c?f.size:Math.abs(n.size),width:c?Math.abs(n.size):f.size};h&&(g.options=d||this.resolveDataElementOptions(p,e[p].active?"active":s));const v=g.options||e[p].options;P(g,v,m,i),E(g,v,u.ratio),this.updateElement(e[p],p,g,s)}}_getStacks(e,t){const{iScale:n}=this._cachedMeta,s=n.getMatchingVisibleMetas(this._type).filter((e=>e.controller.options.grouped)),r=n.options.stacked,i=[],a=e=>{const n=e.controller.getParsed(t),s=n&&n[e.vScale.axis];if((0,o.k)(s)||isNaN(s))return!0};for(const n of s)if((void 0===t||!a(n))&&((!1===r||-1===i.indexOf(n.stack)||void 0===r&&void 0===n.stack)&&i.push(n.stack),n.index===e))break;return i.length||i.push(void 0),i}_getStackCount(e){return this._getStacks(void 0,e).length}_getStackIndex(e,t,n){const o=this._getStacks(e,n),s=void 0!==t?o.indexOf(t):-1;return-1===s?o.length-1:s}_getRuler(){const e=this.options,t=this._cachedMeta,n=t.iScale,o=[];let s,r;for(s=0,r=t.data.length;s<r;++s)o.push(n.getPixelForValue(this.getParsed(s)[n.axis],s));const i=e.barThickness;return{min:i||w(t),pixels:o,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:e.grouped,ratio:i?1:e.categoryPercentage*e.barPercentage}}_calculateBarValuePixels(e){const{_cachedMeta:{vScale:t,_stacked:n},options:{base:s,minBarLength:r}}=this,i=s||0,a=this.getParsed(e),l=a._custom,c=j(l);let u,d,h=a[t.axis],p=0,f=n?this.applyStack(t,a,n):h;f!==h&&(p=f-h,f=h),c&&(h=l.barStart,f=l.barEnd-l.barStart,0!==h&&(0,o.s)(h)!==(0,o.s)(l.barEnd)&&(p=0),p+=h);const m=(0,o.k)(s)||c?p:s;let g=t.getPixelForValue(m);if(u=this.chart.getDataVisibility(e)?t.getPixelForValue(p+f):g,d=u-g,Math.abs(d)<r){d=function(e,t,n){return 0!==e?(0,o.s)(e):(t.isHorizontal()?1:-1)*(t.min>=n?1:-1)}(d,t,i)*r,h===i&&(g-=d/2);const e=t.getPixelForDecimal(0),n=t.getPixelForDecimal(1),s=Math.min(e,n),a=Math.max(e,n);g=Math.max(Math.min(g,a),s),u=g+d}if(g===t.getPixelForValue(i)){const e=(0,o.s)(d)*t.getLineWidthForValue(i)/2;g+=e,d-=e}return{size:d,base:g,head:u,center:u+d/2}}_calculateBarIndexPixels(e,t){const n=t.scale,s=this.options,r=s.skipNull,i=(0,o.v)(s.maxBarThickness,1/0);let a,l;if(t.grouped){const n=r?this._getStackCount(e):t.stackCount,c="flex"===s.barThickness?function(e,t,n,o){const s=t.pixels,r=s[e];let i=e>0?s[e-1]:null,a=e<s.length-1?s[e+1]:null;const l=n.categoryPercentage;null===i&&(i=r-(null===a?t.end-t.start:a-r)),null===a&&(a=r+r-i);const c=r-(r-Math.min(i,a))/2*l;return{chunk:Math.abs(a-i)/2*l/o,ratio:n.barPercentage,start:c}}(e,t,s,n):function(e,t,n,s){const r=n.barThickness;let i,a;return(0,o.k)(r)?(i=t.min*n.categoryPercentage,a=n.barPercentage):(i=r*s,a=1),{chunk:i/s,ratio:a,start:t.pixels[e]-i/2}}(e,t,s,n),u=this._getStackIndex(this.index,this._cachedMeta.stack,r?e:void 0);a=c.start+c.chunk*u+c.chunk/2,l=Math.min(i,c.chunk*c.ratio)}else a=n.getPixelForValue(this.getParsed(e)[n.axis],e),l=Math.min(i,t.min*t.ratio);return{base:a-l/2,head:a+l/2,center:a,size:l}}draw(){const e=this._cachedMeta,t=e.vScale,n=e.data,o=n.length;let s=0;for(;s<o;++s)null!==this.getParsed(s)[t.axis]&&n[s].draw(this._ctx)}}T.id="bar",T.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},T.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class M extends x{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(e,t,n,o){const s=super.parsePrimitiveData(e,t,n,o);for(let e=0;e<s.length;e++)s[e]._custom=this.resolveDataElementOptions(e+n).radius;return s}parseArrayData(e,t,n,s){const r=super.parseArrayData(e,t,n,s);for(let e=0;e<r.length;e++){const s=t[n+e];r[e]._custom=(0,o.v)(s[2],this.resolveDataElementOptions(e+n).radius)}return r}parseObjectData(e,t,n,s){const r=super.parseObjectData(e,t,n,s);for(let e=0;e<r.length;e++){const s=t[n+e];r[e]._custom=(0,o.v)(s&&s.r&&+s.r,this.resolveDataElementOptions(e+n).radius)}return r}getMaxOverflow(){const e=this._cachedMeta.data;let t=0;for(let n=e.length-1;n>=0;--n)t=Math.max(t,e[n].size(this.resolveDataElementOptions(n))/2);return t>0&&t}getLabelAndValue(e){const t=this._cachedMeta,{xScale:n,yScale:o}=t,s=this.getParsed(e),r=n.getLabelForValue(s.x),i=o.getLabelForValue(s.y),a=s._custom;return{label:t.label,value:"("+r+", "+i+(a?", "+a:"")+")"}}update(e){const t=this._cachedMeta.data;this.updateElements(t,0,t.length,e)}updateElements(e,t,n,o){const s="reset"===o,{iScale:r,vScale:i}=this._cachedMeta,{sharedOptions:a,includeOptions:l}=this._getSharedOptions(t,o),c=r.axis,u=i.axis;for(let d=t;d<t+n;d++){const t=e[d],n=!s&&this.getParsed(d),h={},p=h[c]=s?r.getPixelForDecimal(.5):r.getPixelForValue(n[c]),f=h[u]=s?i.getBasePixel():i.getPixelForValue(n[u]);h.skip=isNaN(p)||isNaN(f),l&&(h.options=a||this.resolveDataElementOptions(d,t.active?"active":o),s&&(h.options.radius=0)),this.updateElement(t,d,h,o)}}resolveDataElementOptions(e,t){const n=this.getParsed(e);let s=super.resolveDataElementOptions(e,t);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const r=s.radius;return"active"!==t&&(s.radius=0),s.radius+=(0,o.v)(n&&n._custom,r),s}}M.id="bubble",M.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},M.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class A extends x{constructor(e,t){super(e,t),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(e,t){const n=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=n;else{let r,i,a=e=>+n[e];if((0,o.i)(n[e])){const{key:e="value"}=this._parsing;a=t=>+(0,o.f)(n[t],e)}for(r=e,i=e+t;r<i;++r)s._parsed[r]=a(r)}}_getRotation(){return(0,o.t)(this.options.rotation-90)}_getCircumference(){return(0,o.t)(this.options.circumference)}_getRotationExtents(){let e=o.T,t=-o.T;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)){const o=this.chart.getDatasetMeta(n).controller,s=o._getRotation(),r=o._getCircumference();e=Math.min(e,s),t=Math.max(t,s+r)}return{rotation:e,circumference:t-e}}update(e){const t=this.chart,{chartArea:n}=t,s=this._cachedMeta,r=s.data,i=this.getMaxBorderWidth()+this.getMaxOffset(r)+this.options.spacing,a=Math.max((Math.min(n.width,n.height)-i)/2,0),l=Math.min((0,o.m)(this.options.cutout,a),1),c=this._getRingWeight(this.index),{circumference:u,rotation:d}=this._getRotationExtents(),{ratioX:h,ratioY:p,offsetX:f,offsetY:m}=function(e,t,n){let s=1,r=1,i=0,a=0;if(t<o.T){const l=e,c=l+t,u=Math.cos(l),d=Math.sin(l),h=Math.cos(c),p=Math.sin(c),f=(e,t,s)=>(0,o.p)(e,l,c,!0)?1:Math.max(t,t*n,s,s*n),m=(e,t,s)=>(0,o.p)(e,l,c,!0)?-1:Math.min(t,t*n,s,s*n),g=f(0,u,h),v=f(o.H,d,p),y=m(o.P,u,h),b=m(o.P+o.H,d,p);s=(g-y)/2,r=(v-b)/2,i=-(g+y)/2,a=-(v+b)/2}return{ratioX:s,ratioY:r,offsetX:i,offsetY:a}}(d,u,l),g=(n.width-i)/h,v=(n.height-i)/p,y=Math.max(Math.min(g,v)/2,0),b=(0,o.n)(this.options.radius,y),_=(b-Math.max(b*l,0))/this._getVisibleDatasetWeightTotal();this.offsetX=f*b,this.offsetY=m*b,s.total=this.calculateTotal(),this.outerRadius=b-_*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-_*c,0),this.updateElements(r,0,r.length,e)}_circumference(e,t){const n=this.options,s=this._cachedMeta,r=this._getCircumference();return t&&n.animation.animateRotate||!this.chart.getDataVisibility(e)||null===s._parsed[e]||s.data[e].hidden?0:this.calculateCircumference(s._parsed[e]*r/o.T)}updateElements(e,t,n,o){const s="reset"===o,r=this.chart,i=r.chartArea,a=r.options.animation,l=(i.left+i.right)/2,c=(i.top+i.bottom)/2,u=s&&a.animateScale,d=u?0:this.innerRadius,h=u?0:this.outerRadius,{sharedOptions:p,includeOptions:f}=this._getSharedOptions(t,o);let m,g=this._getRotation();for(m=0;m<t;++m)g+=this._circumference(m,s);for(m=t;m<t+n;++m){const t=this._circumference(m,s),n=e[m],r={x:l+this.offsetX,y:c+this.offsetY,startAngle:g,endAngle:g+t,circumference:t,outerRadius:h,innerRadius:d};f&&(r.options=p||this.resolveDataElementOptions(m,n.active?"active":o)),g+=t,this.updateElement(n,m,r,o)}}calculateTotal(){const e=this._cachedMeta,t=e.data;let n,o=0;for(n=0;n<t.length;n++){const s=e._parsed[n];null===s||isNaN(s)||!this.chart.getDataVisibility(n)||t[n].hidden||(o+=Math.abs(s))}return o}calculateCircumference(e){const t=this._cachedMeta.total;return t>0&&!isNaN(e)?o.T*(Math.abs(e)/t):0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,s=n.data.labels||[],r=(0,o.o)(t._parsed[e],n.options.locale);return{label:s[e]||"",value:r}}getMaxBorderWidth(e){let t=0;const n=this.chart;let o,s,r,i,a;if(!e)for(o=0,s=n.data.datasets.length;o<s;++o)if(n.isDatasetVisible(o)){r=n.getDatasetMeta(o),e=r.data,i=r.controller;break}if(!e)return 0;for(o=0,s=e.length;o<s;++o)a=i.resolveDataElementOptions(o),"inner"!==a.borderAlign&&(t=Math.max(t,a.borderWidth||0,a.hoverBorderWidth||0));return t}getMaxOffset(e){let t=0;for(let n=0,o=e.length;n<o;++n){const e=this.resolveDataElementOptions(n);t=Math.max(t,e.offset||0,e.hoverOffset||0)}return t}_getRingWeightOffset(e){let t=0;for(let n=0;n<e;++n)this.chart.isDatasetVisible(n)&&(t+=this._getRingWeight(n));return t}_getRingWeight(e){return Math.max((0,o.v)(this.chart.data.datasets[e].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}A.id="doughnut",A.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},A.descriptors={_scriptable:e=>"spacing"!==e,_indexable:e=>"spacing"!==e},A.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=e.legend.options;return t.labels.map(((t,o)=>{const s=e.getDatasetMeta(0).controller.getStyle(o);return{text:t,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,lineWidth:s.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(o),index:o}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(e){let t=e.label;const n=": "+e.formattedValue;return(0,o.b)(t)?(t=t.slice(),t[0]+=n):t+=n,t}}}}};class R extends x{initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(e){const t=this._cachedMeta,{dataset:n,data:s=[],_dataset:r}=t,i=this.chart._animationsDisabled;let{start:a,count:l}=(0,o.q)(t,s,i);this._drawStart=a,this._drawCount=l,(0,o.w)(t)&&(a=0,l=s.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!r._decimated,n.points=s;const c=this.resolveDatasetElementOptions(e);this.options.showLine||(c.borderWidth=0),c.segment=this.options.segment,this.updateElement(n,void 0,{animated:!i,options:c},e),this.updateElements(s,a,l,e)}updateElements(e,t,n,s){const r="reset"===s,{iScale:i,vScale:a,_stacked:l,_dataset:c}=this._cachedMeta,{sharedOptions:u,includeOptions:d}=this._getSharedOptions(t,s),h=i.axis,p=a.axis,{spanGaps:f,segment:m}=this.options,g=(0,o.x)(f)?f:Number.POSITIVE_INFINITY,v=this.chart._animationsDisabled||r||"none"===s;let y=t>0&&this.getParsed(t-1);for(let f=t;f<t+n;++f){const t=e[f],n=this.getParsed(f),b=v?t:{},_=(0,o.k)(n[p]),x=b[h]=i.getPixelForValue(n[h],f),w=b[p]=r||_?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,n,l):n[p],f);b.skip=isNaN(x)||isNaN(w)||_,b.stop=f>0&&Math.abs(n[h]-y[h])>g,m&&(b.parsed=n,b.raw=c.data[f]),d&&(b.options=u||this.resolveDataElementOptions(f,t.active?"active":s)),v||this.updateElement(t,f,b,s),y=n}}getMaxOverflow(){const e=this._cachedMeta,t=e.dataset,n=t.options&&t.options.borderWidth||0,o=e.data||[];if(!o.length)return n;const s=o[0].size(this.resolveDataElementOptions(0)),r=o[o.length-1].size(this.resolveDataElementOptions(o.length-1));return Math.max(n,s,r)/2}draw(){const e=this._cachedMeta;e.dataset.updateControlPoints(this.chart.chartArea,e.iScale.axis),super.draw()}}R.id="line",R.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},R.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class L extends x{constructor(e,t){super(e,t),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,s=n.data.labels||[],r=(0,o.o)(t._parsed[e].r,n.options.locale);return{label:s[e]||"",value:r}}parseObjectData(e,t,n,s){return o.y.bind(this)(e,t,n,s)}update(e){const t=this._cachedMeta.data;this._updateRadius(),this.updateElements(t,0,t.length,e)}getMinMax(){const e=this._cachedMeta,t={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return e.data.forEach(((e,n)=>{const o=this.getParsed(n).r;!isNaN(o)&&this.chart.getDataVisibility(n)&&(o<t.min&&(t.min=o),o>t.max&&(t.max=o))})),t}_updateRadius(){const e=this.chart,t=e.chartArea,n=e.options,o=Math.min(t.right-t.left,t.bottom-t.top),s=Math.max(o/2,0),r=(s-Math.max(n.cutoutPercentage?s/100*n.cutoutPercentage:1,0))/e.getVisibleDatasetCount();this.outerRadius=s-r*this.index,this.innerRadius=this.outerRadius-r}updateElements(e,t,n,s){const r="reset"===s,i=this.chart,a=i.options.animation,l=this._cachedMeta.rScale,c=l.xCenter,u=l.yCenter,d=l.getIndexAngle(0)-.5*o.P;let h,p=d;const f=360/this.countVisibleElements();for(h=0;h<t;++h)p+=this._computeAngle(h,s,f);for(h=t;h<t+n;h++){const t=e[h];let n=p,o=p+this._computeAngle(h,s,f),m=i.getDataVisibility(h)?l.getDistanceFromCenterForValue(this.getParsed(h).r):0;p=o,r&&(a.animateScale&&(m=0),a.animateRotate&&(n=o=d));const g={x:c,y:u,innerRadius:0,outerRadius:m,startAngle:n,endAngle:o,options:this.resolveDataElementOptions(h,t.active?"active":s)};this.updateElement(t,h,g,s)}}countVisibleElements(){const e=this._cachedMeta;let t=0;return e.data.forEach(((e,n)=>{!isNaN(this.getParsed(n).r)&&this.chart.getDataVisibility(n)&&t++})),t}_computeAngle(e,t,n){return this.chart.getDataVisibility(e)?(0,o.t)(this.resolveDataElementOptions(e,t).angle||n):0}}L.id="polarArea",L.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},L.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=e.legend.options;return t.labels.map(((t,o)=>{const s=e.getDatasetMeta(0).controller.getStyle(o);return{text:t,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,lineWidth:s.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(o),index:o}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:e=>e.chart.data.labels[e.dataIndex]+": "+e.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class D extends A{}D.id="pie",D.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class B extends x{getLabelAndValue(e){const t=this._cachedMeta.vScale,n=this.getParsed(e);return{label:t.getLabels()[e],value:""+t.getLabelForValue(n[t.axis])}}parseObjectData(e,t,n,s){return o.y.bind(this)(e,t,n,s)}update(e){const t=this._cachedMeta,n=t.dataset,o=t.data||[],s=t.iScale.getLabels();if(n.points=o,"resize"!==e){const t=this.resolveDatasetElementOptions(e);this.options.showLine||(t.borderWidth=0);const r={_loop:!0,_fullLoop:s.length===o.length,options:t};this.updateElement(n,void 0,r,e)}this.updateElements(o,0,o.length,e)}updateElements(e,t,n,o){const s=this._cachedMeta.rScale,r="reset"===o;for(let i=t;i<t+n;i++){const t=e[i],n=this.resolveDataElementOptions(i,t.active?"active":o),a=s.getPointPositionForValue(i,this.getParsed(i).r),l=r?s.xCenter:a.x,c=r?s.yCenter:a.y,u={x:l,y:c,angle:a.angle,skip:isNaN(l)||isNaN(c),options:n};this.updateElement(t,i,u,o)}}}B.id="radar",B.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},B.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class I{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}hasValue(){return(0,o.x)(this.x)&&(0,o.x)(this.y)}getProps(e,t){const n=this.$animations;if(!t||!n)return this;const o={};return e.forEach((e=>{o[e]=n[e]&&n[e].active()?n[e]._to:this[e]})),o}}I.defaults={},I.defaultRoutes=void 0;const N={values:e=>(0,o.b)(e)?e:""+e,numeric(e,t,n){if(0===e)return"0";const s=this.chart.options.locale;let r,i=e;if(n.length>1){const t=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(t<1e-4||t>1e15)&&(r="scientific"),i=function(e,t){let n=t.length>3?t[2].value-t[1].value:t[1].value-t[0].value;return Math.abs(n)>=1&&e!==Math.floor(e)&&(n=e-Math.floor(e)),n}(e,n)}const a=(0,o.z)(Math.abs(i)),l=Math.max(Math.min(-1*Math.floor(a),20),0),c={notation:r,minimumFractionDigits:l,maximumFractionDigits:l};return Object.assign(c,this.options.ticks.format),(0,o.o)(e,s,c)},logarithmic(e,t,n){if(0===e)return"0";const s=e/Math.pow(10,Math.floor((0,o.z)(e)));return 1===s||2===s||5===s?N.numeric.call(this,e,t,n):""}};var F={formatters:N};function V(e,t,n,s,r){const i=(0,o.v)(s,0),a=Math.min((0,o.v)(r,e.length),e.length);let l,c,u,d=0;for(n=Math.ceil(n),r&&(l=r-s,n=l/Math.floor(l/n)),u=i;u<0;)d++,u=Math.round(i+d*n);for(c=Math.max(i,0);c<a;c++)c===u&&(t.push(e[c]),d++,u=Math.round(i+d*n))}o.d.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(e,t)=>t.lineWidth,tickColor:(e,t)=>t.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:F.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),o.d.route("scale.ticks","color","","color"),o.d.route("scale.grid","color","","borderColor"),o.d.route("scale.grid","borderColor","","borderColor"),o.d.route("scale.title","color","","color"),o.d.describe("scale",{_fallback:!1,_scriptable:e=>!e.startsWith("before")&&!e.startsWith("after")&&"callback"!==e&&"parser"!==e,_indexable:e=>"borderDash"!==e&&"tickBorderDash"!==e}),o.d.describe("scales",{_fallback:"scale"}),o.d.describe("scale.ticks",{_scriptable:e=>"backdropPadding"!==e&&"callback"!==e,_indexable:e=>"backdropPadding"!==e});const $=(e,t,n)=>"top"===t||"left"===t?e[t]+n:e[t]-n;function z(e,t){const n=[],o=e.length/t,s=e.length;let r=0;for(;r<s;r+=o)n.push(e[Math.floor(r)]);return n}function H(e,t,n){const o=e.ticks.length,s=Math.min(t,o-1),r=e._startPixel,i=e._endPixel,a=1e-6;let l,c=e.getPixelForTick(s);if(!(n&&(l=1===o?Math.max(c-r,i-c):0===t?(e.getPixelForTick(1)-c)/2:(c-e.getPixelForTick(s-1))/2,c+=s<t?l:-l,c<r-a||c>i+a)))return c}function U(e){return e.drawTicks?e.tickLength:0}function W(e,t){if(!e.display)return 0;const n=(0,o.O)(e.font,t),s=(0,o.K)(e.padding);return((0,o.b)(e.text)?e.text.length:1)*n.lineHeight+s.height}function G(e,t,n){let s=(0,o.R)(e);return(n&&"right"!==t||!n&&"right"===t)&&(s=(e=>"left"===e?"right":"right"===e?"left":e)(s)),s}class Y extends I{constructor(e){super(),this.id=e.id,this.type=e.type,this.options=void 0,this.ctx=e.ctx,this.chart=e.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(e){this.options=e.setContext(this.getContext()),this.axis=e.axis,this._userMin=this.parse(e.min),this._userMax=this.parse(e.max),this._suggestedMin=this.parse(e.suggestedMin),this._suggestedMax=this.parse(e.suggestedMax)}parse(e,t){return e}getUserBounds(){let{_userMin:e,_userMax:t,_suggestedMin:n,_suggestedMax:s}=this;return e=(0,o.B)(e,Number.POSITIVE_INFINITY),t=(0,o.B)(t,Number.NEGATIVE_INFINITY),n=(0,o.B)(n,Number.POSITIVE_INFINITY),s=(0,o.B)(s,Number.NEGATIVE_INFINITY),{min:(0,o.B)(e,n),max:(0,o.B)(t,s),minDefined:(0,o.g)(e),maxDefined:(0,o.g)(t)}}getMinMax(e){let t,{min:n,max:s,minDefined:r,maxDefined:i}=this.getUserBounds();if(r&&i)return{min:n,max:s};const a=this.getMatchingVisibleMetas();for(let o=0,l=a.length;o<l;++o)t=a[o].controller.getMinMax(this,e),r||(n=Math.min(n,t.min)),i||(s=Math.max(s,t.max));return n=i&&n>s?s:n,s=r&&n>s?n:s,{min:(0,o.B)(n,(0,o.B)(s,n)),max:(0,o.B)(s,(0,o.B)(n,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){(0,o.C)(this.options.beforeUpdate,[this])}update(e,t,n){const{beginAtZero:s,grace:r,ticks:i}=this.options,a=i.sampleSize;this.beforeUpdate(),this.maxWidth=e,this.maxHeight=t,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=(0,o.D)(this,r,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const l=a<this.ticks.length;this._convertTicksToLabels(l?z(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),i.display&&(i.autoSkip||"auto"===i.source)&&(this.ticks=function(e,t){const n=e.options.ticks,s=n.maxTicksLimit||function(e){const t=e.options.offset,n=e._tickSize(),o=e._length/n+(t?0:1),s=e._maxLength/n;return Math.floor(Math.min(o,s))}(e),r=n.major.enabled?function(e){const t=[];let n,o;for(n=0,o=e.length;n<o;n++)e[n].major&&t.push(n);return t}(t):[],i=r.length,a=r[0],l=r[i-1],c=[];if(i>s)return function(e,t,n,o){let s,r=0,i=n[0];for(o=Math.ceil(o),s=0;s<e.length;s++)s===i&&(t.push(e[s]),r++,i=n[r*o])}(t,c,r,i/s),c;const u=function(e,t,n){const s=function(e){const t=e.length;let n,o;if(t<2)return!1;for(o=e[0],n=1;n<t;++n)if(e[n]-e[n-1]!==o)return!1;return o}(e),r=t.length/n;if(!s)return Math.max(r,1);const i=(0,o.A)(s);for(let e=0,t=i.length-1;e<t;e++){const t=i[e];if(t>r)return t}return Math.max(r,1)}(r,t,s);if(i>0){let e,n;const s=i>1?Math.round((l-a)/(i-1)):null;for(V(t,c,u,(0,o.k)(s)?0:a-s,a),e=0,n=i-1;e<n;e++)V(t,c,u,r[e],r[e+1]);return V(t,c,u,l,(0,o.k)(s)?t.length:l+s),c}return V(t,c,u),c}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let e,t,n=this.options.reverse;this.isHorizontal()?(e=this.left,t=this.right):(e=this.top,t=this.bottom,n=!n),this._startPixel=e,this._endPixel=t,this._reversePixels=n,this._length=t-e,this._alignToPixels=this.options.alignToPixels}afterUpdate(){(0,o.C)(this.options.afterUpdate,[this])}beforeSetDimensions(){(0,o.C)(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){(0,o.C)(this.options.afterSetDimensions,[this])}_callHooks(e){this.chart.notifyPlugins(e,this.getContext()),(0,o.C)(this.options[e],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){(0,o.C)(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(e){const t=this.options.ticks;let n,s,r;for(n=0,s=e.length;n<s;n++)r=e[n],r.label=(0,o.C)(t.callback,[r.value,n,e],this)}afterTickToLabelConversion(){(0,o.C)(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){(0,o.C)(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const e=this.options,t=e.ticks,n=this.ticks.length,s=t.minRotation||0,r=t.maxRotation;let i,a,l,c=s;if(!this._isVisible()||!t.display||s>=r||n<=1||!this.isHorizontal())return void(this.labelRotation=s);const u=this._getLabelSizes(),d=u.widest.width,h=u.highest.height,p=(0,o.E)(this.chart.width-d,0,this.maxWidth);i=e.offset?this.maxWidth/n:p/(n-1),d+6>i&&(i=p/(n-(e.offset?.5:1)),a=this.maxHeight-U(e.grid)-t.padding-W(e.title,this.chart.options.font),l=Math.sqrt(d*d+h*h),c=(0,o.F)(Math.min(Math.asin((0,o.E)((u.highest.height+6)/i,-1,1)),Math.asin((0,o.E)(a/l,-1,1))-Math.asin((0,o.E)(h/l,-1,1)))),c=Math.max(s,Math.min(r,c))),this.labelRotation=c}afterCalculateLabelRotation(){(0,o.C)(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){(0,o.C)(this.options.beforeFit,[this])}fit(){const e={width:0,height:0},{chart:t,options:{ticks:n,title:s,grid:r}}=this,i=this._isVisible(),a=this.isHorizontal();if(i){const i=W(s,t.options.font);if(a?(e.width=this.maxWidth,e.height=U(r)+i):(e.height=this.maxHeight,e.width=U(r)+i),n.display&&this.ticks.length){const{first:t,last:s,widest:r,highest:i}=this._getLabelSizes(),l=2*n.padding,c=(0,o.t)(this.labelRotation),u=Math.cos(c),d=Math.sin(c);if(a){const t=n.mirror?0:d*r.width+u*i.height;e.height=Math.min(this.maxHeight,e.height+t+l)}else{const t=n.mirror?0:u*r.width+d*i.height;e.width=Math.min(this.maxWidth,e.width+t+l)}this._calculatePadding(t,s,d,u)}}this._handleMargins(),a?(this.width=this._length=t.width-this._margins.left-this._margins.right,this.height=e.height):(this.width=e.width,this.height=this._length=t.height-this._margins.top-this._margins.bottom)}_calculatePadding(e,t,n,o){const{ticks:{align:s,padding:r},position:i}=this.options,a=0!==this.labelRotation,l="top"!==i&&"x"===this.axis;if(this.isHorizontal()){const i=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let u=0,d=0;a?l?(u=o*e.width,d=n*t.height):(u=n*e.height,d=o*t.width):"start"===s?d=t.width:"end"===s?u=e.width:"inner"!==s&&(u=e.width/2,d=t.width/2),this.paddingLeft=Math.max((u-i+r)*this.width/(this.width-i),0),this.paddingRight=Math.max((d-c+r)*this.width/(this.width-c),0)}else{let n=t.height/2,o=e.height/2;"start"===s?(n=0,o=e.height):"end"===s&&(n=t.height,o=0),this.paddingTop=n+r,this.paddingBottom=o+r}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){(0,o.C)(this.options.afterFit,[this])}isHorizontal(){const{axis:e,position:t}=this.options;return"top"===t||"bottom"===t||"x"===e}isFullSize(){return this.options.fullSize}_convertTicksToLabels(e){let t,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(e),t=0,n=e.length;t<n;t++)(0,o.k)(e[t].label)&&(e.splice(t,1),n--,t--);this.afterTickToLabelConversion()}_getLabelSizes(){let e=this._labelSizes;if(!e){const t=this.options.ticks.sampleSize;let n=this.ticks;t<n.length&&(n=z(n,t)),this._labelSizes=e=this._computeLabelSizes(n,n.length)}return e}_computeLabelSizes(e,t){const{ctx:n,_longestTextCache:s}=this,r=[],i=[];let a,l,c,u,d,h,p,f,m,g,v,y=0,b=0;for(a=0;a<t;++a){if(u=e[a].label,d=this._resolveTickFontOptions(a),n.font=h=d.string,p=s[h]=s[h]||{data:{},gc:[]},f=d.lineHeight,m=g=0,(0,o.k)(u)||(0,o.b)(u)){if((0,o.b)(u))for(l=0,c=u.length;l<c;++l)v=u[l],(0,o.k)(v)||(0,o.b)(v)||(m=(0,o.G)(n,p.data,p.gc,m,v),g+=f)}else m=(0,o.G)(n,p.data,p.gc,m,u),g=f;r.push(m),i.push(g),y=Math.max(m,y),b=Math.max(g,b)}!function(e,t){(0,o.Q)(e,(e=>{const n=e.gc,o=n.length/2;let s;if(o>t){for(s=0;s<o;++s)delete e.data[n[s]];n.splice(0,o)}}))}(s,t);const _=r.indexOf(y),x=i.indexOf(b),w=e=>({width:r[e]||0,height:i[e]||0});return{first:w(0),last:w(t-1),widest:w(_),highest:w(x),widths:r,heights:i}}getLabelForValue(e){return e}getPixelForValue(e,t){return NaN}getValueForPixel(e){}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getPixelForDecimal(e){this._reversePixels&&(e=1-e);const t=this._startPixel+e*this._length;return(0,o.I)(this._alignToPixels?(0,o.J)(this.chart,t,0):t)}getDecimalForPixel(e){const t=(e-this._startPixel)/this._length;return this._reversePixels?1-t:t}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:e,max:t}=this;return e<0&&t<0?t:e>0&&t>0?e:0}getContext(e){const t=this.ticks||[];if(e>=0&&e<t.length){const n=t[e];return n.$context||(n.$context=function(e,t,n){return(0,o.h)(e,{tick:n,index:t,type:"tick"})}(this.getContext(),e,n))}return this.$context||(this.$context=(n=this.chart.getContext(),this,(0,o.h)(n,{scale:this,type:"scale"})));var n}_tickSize(){const e=this.options.ticks,t=(0,o.t)(this.labelRotation),n=Math.abs(Math.cos(t)),s=Math.abs(Math.sin(t)),r=this._getLabelSizes(),i=e.autoSkipPadding||0,a=r?r.widest.width+i:0,l=r?r.highest.height+i:0;return this.isHorizontal()?l*n>a*s?a/n:l/s:l*s<a*n?l/n:a/s}_isVisible(){const e=this.options.display;return"auto"!==e?!!e:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(e){const t=this.axis,n=this.chart,s=this.options,{grid:r,position:i}=s,a=r.offset,l=this.isHorizontal(),c=this.ticks.length+(a?1:0),u=U(r),d=[],h=r.setContext(this.getContext()),p=h.drawBorder?h.borderWidth:0,f=p/2,m=function(e){return(0,o.J)(n,e,p)};let g,v,y,b,_,x,w,S,k,j,P,O;if("top"===i)g=m(this.bottom),x=this.bottom-u,S=g-f,j=m(e.top)+f,O=e.bottom;else if("bottom"===i)g=m(this.top),j=e.top,O=m(e.bottom)-f,x=g+f,S=this.top+u;else if("left"===i)g=m(this.right),_=this.right-u,w=g-f,k=m(e.left)+f,P=e.right;else if("right"===i)g=m(this.left),k=e.left,P=m(e.right)-f,_=g+f,w=this.left+u;else if("x"===t){if("center"===i)g=m((e.top+e.bottom)/2+.5);else if((0,o.i)(i)){const e=Object.keys(i)[0],t=i[e];g=m(this.chart.scales[e].getPixelForValue(t))}j=e.top,O=e.bottom,x=g+f,S=x+u}else if("y"===t){if("center"===i)g=m((e.left+e.right)/2);else if((0,o.i)(i)){const e=Object.keys(i)[0],t=i[e];g=m(this.chart.scales[e].getPixelForValue(t))}_=g-f,w=_-u,k=e.left,P=e.right}const C=(0,o.v)(s.ticks.maxTicksLimit,c),E=Math.max(1,Math.ceil(c/C));for(v=0;v<c;v+=E){const e=r.setContext(this.getContext(v)),t=e.lineWidth,s=e.color,i=e.borderDash||[],c=e.borderDashOffset,u=e.tickWidth,h=e.tickColor,p=e.tickBorderDash||[],f=e.tickBorderDashOffset;y=H(this,v,a),void 0!==y&&(b=(0,o.J)(n,y,t),l?_=w=k=P=b:x=S=j=O=b,d.push({tx1:_,ty1:x,tx2:w,ty2:S,x1:k,y1:j,x2:P,y2:O,width:t,color:s,borderDash:i,borderDashOffset:c,tickWidth:u,tickColor:h,tickBorderDash:p,tickBorderDashOffset:f}))}return this._ticksLength=c,this._borderValue=g,d}_computeLabelItems(e){const t=this.axis,n=this.options,{position:s,ticks:r}=n,i=this.isHorizontal(),a=this.ticks,{align:l,crossAlign:c,padding:u,mirror:d}=r,h=U(n.grid),p=h+u,f=d?-u:p,m=-(0,o.t)(this.labelRotation),g=[];let v,y,b,_,x,w,S,k,j,P,O,C,E="middle";if("top"===s)w=this.bottom-f,S=this._getXAxisLabelAlignment();else if("bottom"===s)w=this.top+f,S=this._getXAxisLabelAlignment();else if("left"===s){const e=this._getYAxisLabelAlignment(h);S=e.textAlign,x=e.x}else if("right"===s){const e=this._getYAxisLabelAlignment(h);S=e.textAlign,x=e.x}else if("x"===t){if("center"===s)w=(e.top+e.bottom)/2+p;else if((0,o.i)(s)){const e=Object.keys(s)[0],t=s[e];w=this.chart.scales[e].getPixelForValue(t)+p}S=this._getXAxisLabelAlignment()}else if("y"===t){if("center"===s)x=(e.left+e.right)/2-p;else if((0,o.i)(s)){const e=Object.keys(s)[0],t=s[e];x=this.chart.scales[e].getPixelForValue(t)}S=this._getYAxisLabelAlignment(h).textAlign}"y"===t&&("start"===l?E="top":"end"===l&&(E="bottom"));const T=this._getLabelSizes();for(v=0,y=a.length;v<y;++v){b=a[v],_=b.label;const e=r.setContext(this.getContext(v));k=this.getPixelForTick(v)+r.labelOffset,j=this._resolveTickFontOptions(v),P=j.lineHeight,O=(0,o.b)(_)?_.length:1;const t=O/2,n=e.color,l=e.textStrokeColor,u=e.textStrokeWidth;let h,p=S;if(i?(x=k,"inner"===S&&(p=v===y-1?this.options.reverse?"left":"right":0===v?this.options.reverse?"right":"left":"center"),C="top"===s?"near"===c||0!==m?-O*P+P/2:"center"===c?-T.highest.height/2-t*P+P:-T.highest.height+P/2:"near"===c||0!==m?P/2:"center"===c?T.highest.height/2-t*P:T.highest.height-O*P,d&&(C*=-1)):(w=k,C=(1-O)*P/2),e.showLabelBackdrop){const t=(0,o.K)(e.backdropPadding),n=T.heights[v],s=T.widths[v];let r=w+C-t.top,i=x-t.left;switch(E){case"middle":r-=n/2;break;case"bottom":r-=n}switch(S){case"center":i-=s/2;break;case"right":i-=s}h={left:i,top:r,width:s+t.width,height:n+t.height,color:e.backdropColor}}g.push({rotation:m,label:_,font:j,color:n,strokeColor:l,strokeWidth:u,textOffset:C,textAlign:p,textBaseline:E,translation:[x,w],backdrop:h})}return g}_getXAxisLabelAlignment(){const{position:e,ticks:t}=this.options;if(-(0,o.t)(this.labelRotation))return"top"===e?"left":"right";let n="center";return"start"===t.align?n="left":"end"===t.align?n="right":"inner"===t.align&&(n="inner"),n}_getYAxisLabelAlignment(e){const{position:t,ticks:{crossAlign:n,mirror:o,padding:s}}=this.options,r=e+s,i=this._getLabelSizes().widest.width;let a,l;return"left"===t?o?(l=this.right+s,"near"===n?a="left":"center"===n?(a="center",l+=i/2):(a="right",l+=i)):(l=this.right-r,"near"===n?a="right":"center"===n?(a="center",l-=i/2):(a="left",l=this.left)):"right"===t?o?(l=this.left+s,"near"===n?a="right":"center"===n?(a="center",l-=i/2):(a="left",l-=i)):(l=this.left+r,"near"===n?a="left":"center"===n?(a="center",l+=i/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const e=this.chart,t=this.options.position;return"left"===t||"right"===t?{top:0,left:this.left,bottom:e.height,right:this.right}:"top"===t||"bottom"===t?{top:this.top,left:0,bottom:this.bottom,right:e.width}:void 0}drawBackground(){const{ctx:e,options:{backgroundColor:t},left:n,top:o,width:s,height:r}=this;t&&(e.save(),e.fillStyle=t,e.fillRect(n,o,s,r),e.restore())}getLineWidthForValue(e){const t=this.options.grid;if(!this._isVisible()||!t.display)return 0;const n=this.ticks.findIndex((t=>t.value===e));return n>=0?t.setContext(this.getContext(n)).lineWidth:0}drawGrid(e){const t=this.options.grid,n=this.ctx,o=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(e));let s,r;const i=(e,t,o)=>{o.width&&o.color&&(n.save(),n.lineWidth=o.width,n.strokeStyle=o.color,n.setLineDash(o.borderDash||[]),n.lineDashOffset=o.borderDashOffset,n.beginPath(),n.moveTo(e.x,e.y),n.lineTo(t.x,t.y),n.stroke(),n.restore())};if(t.display)for(s=0,r=o.length;s<r;++s){const e=o[s];t.drawOnChartArea&&i({x:e.x1,y:e.y1},{x:e.x2,y:e.y2},e),t.drawTicks&&i({x:e.tx1,y:e.ty1},{x:e.tx2,y:e.ty2},{color:e.tickColor,width:e.tickWidth,borderDash:e.tickBorderDash,borderDashOffset:e.tickBorderDashOffset})}}drawBorder(){const{chart:e,ctx:t,options:{grid:n}}=this,s=n.setContext(this.getContext()),r=n.drawBorder?s.borderWidth:0;if(!r)return;const i=n.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let l,c,u,d;this.isHorizontal()?(l=(0,o.J)(e,this.left,r)-r/2,c=(0,o.J)(e,this.right,i)+i/2,u=d=a):(u=(0,o.J)(e,this.top,r)-r/2,d=(0,o.J)(e,this.bottom,i)+i/2,l=c=a),t.save(),t.lineWidth=s.borderWidth,t.strokeStyle=s.borderColor,t.beginPath(),t.moveTo(l,u),t.lineTo(c,d),t.stroke(),t.restore()}drawLabels(e){if(!this.options.ticks.display)return;const t=this.ctx,n=this._computeLabelArea();n&&(0,o.L)(t,n);const s=this._labelItems||(this._labelItems=this._computeLabelItems(e));let r,i;for(r=0,i=s.length;r<i;++r){const e=s[r],n=e.font,i=e.label;e.backdrop&&(t.fillStyle=e.backdrop.color,t.fillRect(e.backdrop.left,e.backdrop.top,e.backdrop.width,e.backdrop.height));let a=e.textOffset;(0,o.M)(t,i,0,a,n,e)}n&&(0,o.N)(t)}drawTitle(){const{ctx:e,options:{position:t,title:n,reverse:s}}=this;if(!n.display)return;const r=(0,o.O)(n.font),i=(0,o.K)(n.padding),a=n.align;let l=r.lineHeight/2;"bottom"===t||"center"===t||(0,o.i)(t)?(l+=i.bottom,(0,o.b)(n.text)&&(l+=r.lineHeight*(n.text.length-1))):l+=i.top;const{titleX:c,titleY:u,maxWidth:d,rotation:h}=function(e,t,n,s){const{top:r,left:i,bottom:a,right:l,chart:c}=e,{chartArea:u,scales:d}=c;let h,p,f,m=0;const g=a-r,v=l-i;if(e.isHorizontal()){if(p=(0,o.S)(s,i,l),(0,o.i)(n)){const e=Object.keys(n)[0],o=n[e];f=d[e].getPixelForValue(o)+g-t}else f="center"===n?(u.bottom+u.top)/2+g-t:$(e,n,t);h=l-i}else{if((0,o.i)(n)){const e=Object.keys(n)[0],o=n[e];p=d[e].getPixelForValue(o)-v+t}else p="center"===n?(u.left+u.right)/2-v+t:$(e,n,t);f=(0,o.S)(s,a,r),m="left"===n?-o.H:o.H}return{titleX:p,titleY:f,maxWidth:h,rotation:m}}(this,l,t,a);(0,o.M)(e,n.text,0,0,r,{color:n.color,maxWidth:d,rotation:h,textAlign:G(a,t,s),textBaseline:"middle",translation:[c,u]})}draw(e){this._isVisible()&&(this.drawBackground(),this.drawGrid(e),this.drawBorder(),this.drawTitle(),this.drawLabels(e))}_layers(){const e=this.options,t=e.ticks&&e.ticks.z||0,n=(0,o.v)(e.grid&&e.grid.z,-1);return this._isVisible()&&this.draw===Y.prototype.draw?[{z:n,draw:e=>{this.drawBackground(),this.drawGrid(e),this.drawTitle()}},{z:n+1,draw:()=>{this.drawBorder()}},{z:t,draw:e=>{this.drawLabels(e)}}]:[{z:t,draw:e=>{this.draw(e)}}]}getMatchingVisibleMetas(e){const t=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",o=[];let s,r;for(s=0,r=t.length;s<r;++s){const r=t[s];r[n]!==this.id||e&&r.type!==e||o.push(r)}return o}_resolveTickFontOptions(e){const t=this.options.ticks.setContext(this.getContext(e));return(0,o.O)(t.font)}_maxDigits(){const e=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/e}}class q{constructor(e,t,n){this.type=e,this.scope=t,this.override=n,this.items=Object.create(null)}isForType(e){return Object.prototype.isPrototypeOf.call(this.type.prototype,e.prototype)}register(e){const t=Object.getPrototypeOf(e);let n;(function(e){return"id"in e&&"defaults"in e})(t)&&(n=this.register(t));const s=this.items,r=e.id,i=this.scope+"."+r;if(!r)throw new Error("class does not have id: "+e);return r in s||(s[r]=e,function(e,t,n){const s=(0,o.V)(Object.create(null),[n?o.d.get(n):{},o.d.get(t),e.defaults]);o.d.set(t,s),e.defaultRoutes&&function(e,t){Object.keys(t).forEach((n=>{const s=n.split("."),r=s.pop(),i=[e].concat(s).join("."),a=t[n].split("."),l=a.pop(),c=a.join(".");o.d.route(i,r,c,l)}))}(t,e.defaultRoutes),e.descriptors&&o.d.describe(t,e.descriptors)}(e,i,n),this.override&&o.d.override(e.id,e.overrides)),i}get(e){return this.items[e]}unregister(e){const t=this.items,n=e.id,s=this.scope;n in t&&delete t[n],s&&n in o.d[s]&&(delete o.d[s][n],this.override&&delete o.U[n])}}var K=new class{constructor(){this.controllers=new q(x,"datasets",!0),this.elements=new q(I,"elements"),this.plugins=new q(Object,"plugins"),this.scales=new q(Y,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...e){this._each("register",e)}remove(...e){this._each("unregister",e)}addControllers(...e){this._each("register",e,this.controllers)}addElements(...e){this._each("register",e,this.elements)}addPlugins(...e){this._each("register",e,this.plugins)}addScales(...e){this._each("register",e,this.scales)}getController(e){return this._get(e,this.controllers,"controller")}getElement(e){return this._get(e,this.elements,"element")}getPlugin(e){return this._get(e,this.plugins,"plugin")}getScale(e){return this._get(e,this.scales,"scale")}removeControllers(...e){this._each("unregister",e,this.controllers)}removeElements(...e){this._each("unregister",e,this.elements)}removePlugins(...e){this._each("unregister",e,this.plugins)}removeScales(...e){this._each("unregister",e,this.scales)}_each(e,t,n){[...t].forEach((t=>{const s=n||this._getRegistryForType(t);n||s.isForType(t)||s===this.plugins&&t.id?this._exec(e,s,t):(0,o.Q)(t,(t=>{const o=n||this._getRegistryForType(t);this._exec(e,o,t)}))}))}_exec(e,t,n){const s=(0,o.W)(e);(0,o.C)(n["before"+s],[],n),t[e](n),(0,o.C)(n["after"+s],[],n)}_getRegistryForType(e){for(let t=0;t<this._typedRegistries.length;t++){const n=this._typedRegistries[t];if(n.isForType(e))return n}return this.plugins}_get(e,t,n){const o=t.get(e);if(void 0===o)throw new Error('"'+e+'" is not a registered '+n+".");return o}};class J extends x{update(e){const t=this._cachedMeta,{data:n=[]}=t,s=this.chart._animationsDisabled;let{start:r,count:i}=(0,o.q)(t,n,s);if(this._drawStart=r,this._drawCount=i,(0,o.w)(t)&&(r=0,i=n.length),this.options.showLine){const{dataset:o,_dataset:r}=t;o._chart=this.chart,o._datasetIndex=this.index,o._decimated=!!r._decimated,o.points=n;const i=this.resolveDatasetElementOptions(e);i.segment=this.options.segment,this.updateElement(o,void 0,{animated:!s,options:i},e)}this.updateElements(n,r,i,e)}addElements(){const{showLine:e}=this.options;!this.datasetElementType&&e&&(this.datasetElementType=K.getElement("line")),super.addElements()}updateElements(e,t,n,s){const r="reset"===s,{iScale:i,vScale:a,_stacked:l,_dataset:c}=this._cachedMeta,u=this.resolveDataElementOptions(t,s),d=this.getSharedOptions(u),h=this.includeOptions(s,d),p=i.axis,f=a.axis,{spanGaps:m,segment:g}=this.options,v=(0,o.x)(m)?m:Number.POSITIVE_INFINITY,y=this.chart._animationsDisabled||r||"none"===s;let b=t>0&&this.getParsed(t-1);for(let u=t;u<t+n;++u){const t=e[u],n=this.getParsed(u),m=y?t:{},_=(0,o.k)(n[f]),x=m[p]=i.getPixelForValue(n[p],u),w=m[f]=r||_?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,n,l):n[f],u);m.skip=isNaN(x)||isNaN(w)||_,m.stop=u>0&&Math.abs(n[p]-b[p])>v,g&&(m.parsed=n,m.raw=c.data[u]),h&&(m.options=d||this.resolveDataElementOptions(u,t.active?"active":s)),y||this.updateElement(t,u,m,s),b=n}this.updateSharedOptions(d,s,u)}getMaxOverflow(){const e=this._cachedMeta,t=e.data||[];if(!this.options.showLine){let e=0;for(let n=t.length-1;n>=0;--n)e=Math.max(e,t[n].size(this.resolveDataElementOptions(n))/2);return e>0&&e}const n=e.dataset,o=n.options&&n.options.borderWidth||0;if(!t.length)return o;const s=t[0].size(this.resolveDataElementOptions(0)),r=t[t.length-1].size(this.resolveDataElementOptions(t.length-1));return Math.max(o,s,r)/2}}J.id="scatter",J.defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1},J.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:e=>"("+e.label+", "+e.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var X=Object.freeze({__proto__:null,BarController:T,BubbleController:M,DoughnutController:A,LineController:R,PolarAreaController:L,PieController:D,RadarController:B,ScatterController:J});function Q(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Z{constructor(e){this.options=e||{}}init(e){}formats(){return Q()}parse(e,t){return Q()}format(e,t){return Q()}add(e,t,n){return Q()}diff(e,t,n){return Q()}startOf(e,t,n){return Q()}endOf(e,t){return Q()}}Z.override=function(e){Object.assign(Z.prototype,e)};var ee={_date:Z};function te(e,t,n,s){const{controller:r,data:i,_sorted:a}=e,l=r._cachedMeta.iScale;if(l&&t===l.axis&&"r"!==t&&a&&i.length){const e=l._reversePixels?o.Y:o.Z;if(!s)return e(i,t,n);if(r._sharedOptions){const o=i[0],s="function"==typeof o.getRange&&o.getRange(t);if(s){const o=e(i,t,n-s),r=e(i,t,n+s);return{lo:o.lo,hi:r.hi}}}}return{lo:0,hi:i.length-1}}function ne(e,t,n,o,s){const r=e.getSortedVisibleDatasetMetas(),i=n[t];for(let e=0,n=r.length;e<n;++e){const{index:n,data:a}=r[e],{lo:l,hi:c}=te(r[e],t,i,s);for(let e=l;e<=c;++e){const t=a[e];t.skip||o(t,n,e)}}}function oe(e,t,n,s,r){const i=[];return r||e.isPointInArea(t)?(ne(e,n,t,(function(n,a,l){(r||(0,o.$)(n,e.chartArea,0))&&n.inRange(t.x,t.y,s)&&i.push({element:n,datasetIndex:a,index:l})}),!0),i):i}function se(e,t,n,s,r,i){return i||e.isPointInArea(t)?"r"!==n||s?function(e,t,n,o,s,r){let i=[];const a=function(e){const t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,o){const s=t?Math.abs(e.x-o.x):0,r=n?Math.abs(e.y-o.y):0;return Math.sqrt(Math.pow(s,2)+Math.pow(r,2))}}(n);let l=Number.POSITIVE_INFINITY;return ne(e,n,t,(function(n,c,u){const d=n.inRange(t.x,t.y,s);if(o&&!d)return;const h=n.getCenterPoint(s);if(!r&&!e.isPointInArea(h)&&!d)return;const p=a(t,h);p<l?(i=[{element:n,datasetIndex:c,index:u}],l=p):p===l&&i.push({element:n,datasetIndex:c,index:u})})),i}(e,t,n,s,r,i):function(e,t,n,s){let r=[];return ne(e,n,t,(function(e,n,i){const{startAngle:a,endAngle:l}=e.getProps(["startAngle","endAngle"],s),{angle:c}=(0,o.a0)(e,{x:t.x,y:t.y});(0,o.p)(c,a,l)&&r.push({element:e,datasetIndex:n,index:i})})),r}(e,t,n,r):[]}function re(e,t,n,o,s){const r=[],i="x"===n?"inXRange":"inYRange";let a=!1;return ne(e,n,t,((e,o,l)=>{e[i](t[n],s)&&(r.push({element:e,datasetIndex:o,index:l}),a=a||e.inRange(t.x,t.y,s))})),o&&!a?[]:r}var ie={evaluateInteractionItems:ne,modes:{index(e,t,n,s){const r=(0,o.X)(t,e),i=n.axis||"x",a=n.includeInvisible||!1,l=n.intersect?oe(e,r,i,s,a):se(e,r,i,!1,s,a),c=[];return l.length?(e.getSortedVisibleDatasetMetas().forEach((e=>{const t=l[0].index,n=e.data[t];n&&!n.skip&&c.push({element:n,datasetIndex:e.index,index:t})})),c):[]},dataset(e,t,n,s){const r=(0,o.X)(t,e),i=n.axis||"xy",a=n.includeInvisible||!1;let l=n.intersect?oe(e,r,i,s,a):se(e,r,i,!1,s,a);if(l.length>0){const t=l[0].datasetIndex,n=e.getDatasetMeta(t).data;l=[];for(let e=0;e<n.length;++e)l.push({element:n[e],datasetIndex:t,index:e})}return l},point:(e,t,n,s)=>oe(e,(0,o.X)(t,e),n.axis||"xy",s,n.includeInvisible||!1),nearest(e,t,n,s){const r=(0,o.X)(t,e),i=n.axis||"xy",a=n.includeInvisible||!1;return se(e,r,i,n.intersect,s,a)},x:(e,t,n,s)=>re(e,(0,o.X)(t,e),"x",n.intersect,s),y:(e,t,n,s)=>re(e,(0,o.X)(t,e),"y",n.intersect,s)}};const ae=["left","top","right","bottom"];function le(e,t){return e.filter((e=>e.pos===t))}function ce(e,t){return e.filter((e=>-1===ae.indexOf(e.pos)&&e.box.axis===t))}function ue(e,t){return e.sort(((e,n)=>{const o=t?n:e,s=t?e:n;return o.weight===s.weight?o.index-s.index:o.weight-s.weight}))}function de(e,t,n,o){return Math.max(e[n],t[n])+Math.max(e[o],t[o])}function he(e,t){e.top=Math.max(e.top,t.top),e.left=Math.max(e.left,t.left),e.bottom=Math.max(e.bottom,t.bottom),e.right=Math.max(e.right,t.right)}function pe(e,t,n,s){const{pos:r,box:i}=n,a=e.maxPadding;if(!(0,o.i)(r)){n.size&&(e[r]-=n.size);const t=s[n.stack]||{size:0,count:1};t.size=Math.max(t.size,n.horizontal?i.height:i.width),n.size=t.size/t.count,e[r]+=n.size}i.getPadding&&he(a,i.getPadding());const l=Math.max(0,t.outerWidth-de(a,e,"left","right")),c=Math.max(0,t.outerHeight-de(a,e,"top","bottom")),u=l!==e.w,d=c!==e.h;return e.w=l,e.h=c,n.horizontal?{same:u,other:d}:{same:d,other:u}}function fe(e,t){const n=t.maxPadding;return function(e){const o={left:0,top:0,right:0,bottom:0};return e.forEach((e=>{o[e]=Math.max(t[e],n[e])})),o}(e?["left","right"]:["top","bottom"])}function me(e,t,n,o){const s=[];let r,i,a,l,c,u;for(r=0,i=e.length,c=0;r<i;++r){a=e[r],l=a.box,l.update(a.width||t.w,a.height||t.h,fe(a.horizontal,t));const{same:i,other:d}=pe(t,n,a,o);c|=i&&s.length,u=u||d,l.fullSize||s.push(a)}return c&&me(s,t,n,o)||u}function ge(e,t,n,o,s){e.top=n,e.left=t,e.right=t+o,e.bottom=n+s,e.width=o,e.height=s}function ve(e,t,n,s){const r=n.padding;let{x:i,y:a}=t;for(const l of e){const e=l.box,c=s[l.stack]||{count:1,placed:0,weight:1},u=l.stackWeight/c.weight||1;if(l.horizontal){const s=t.w*u,i=c.size||e.height;(0,o.j)(c.start)&&(a=c.start),e.fullSize?ge(e,r.left,a,n.outerWidth-r.right-r.left,i):ge(e,t.left+c.placed,a,s,i),c.start=a,c.placed+=s,a=e.bottom}else{const s=t.h*u,a=c.size||e.width;(0,o.j)(c.start)&&(i=c.start),e.fullSize?ge(e,i,r.top,a,n.outerHeight-r.bottom-r.top):ge(e,i,t.top+c.placed,a,s),c.start=i,c.placed+=s,i=e.right}}t.x=i,t.y=a}o.d.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var ye={addBox(e,t){e.boxes||(e.boxes=[]),t.fullSize=t.fullSize||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw(e){t.draw(e)}}]},e.boxes.push(t)},removeBox(e,t){const n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure(e,t,n){t.fullSize=n.fullSize,t.position=n.position,t.weight=n.weight},update(e,t,n,s){if(!e)return;const r=(0,o.K)(e.options.layout.padding),i=Math.max(t-r.width,0),a=Math.max(n-r.height,0),l=function(e){const t=function(e){const t=[];let n,o,s,r,i,a;for(n=0,o=(e||[]).length;n<o;++n)s=e[n],({position:r,options:{stack:i,stackWeight:a=1}}=s),t.push({index:n,box:s,pos:r,horizontal:s.isHorizontal(),weight:s.weight,stack:i&&r+i,stackWeight:a});return t}(e),n=ue(t.filter((e=>e.box.fullSize)),!0),o=ue(le(t,"left"),!0),s=ue(le(t,"right")),r=ue(le(t,"top"),!0),i=ue(le(t,"bottom")),a=ce(t,"x"),l=ce(t,"y");return{fullSize:n,leftAndTop:o.concat(r),rightAndBottom:s.concat(l).concat(i).concat(a),chartArea:le(t,"chartArea"),vertical:o.concat(s).concat(l),horizontal:r.concat(i).concat(a)}}(e.boxes),c=l.vertical,u=l.horizontal;(0,o.Q)(e.boxes,(e=>{"function"==typeof e.beforeLayout&&e.beforeLayout()}));const d=c.reduce(((e,t)=>t.box.options&&!1===t.box.options.display?e:e+1),0)||1,h=Object.freeze({outerWidth:t,outerHeight:n,padding:r,availableWidth:i,availableHeight:a,vBoxMaxWidth:i/2/d,hBoxMaxHeight:a/2}),p=Object.assign({},r);he(p,(0,o.K)(s));const f=Object.assign({maxPadding:p,w:i,h:a,x:r.left,y:r.top},r),m=function(e,t){const n=function(e){const t={};for(const n of e){const{stack:e,pos:o,stackWeight:s}=n;if(!e||!ae.includes(o))continue;const r=t[e]||(t[e]={count:0,placed:0,weight:0,size:0});r.count++,r.weight+=s}return t}(e),{vBoxMaxWidth:o,hBoxMaxHeight:s}=t;let r,i,a;for(r=0,i=e.length;r<i;++r){a=e[r];const{fullSize:i}=a.box,l=n[a.stack],c=l&&a.stackWeight/l.weight;a.horizontal?(a.width=c?c*o:i&&t.availableWidth,a.height=s):(a.width=o,a.height=c?c*s:i&&t.availableHeight)}return n}(c.concat(u),h);me(l.fullSize,f,h,m),me(c,f,h,m),me(u,f,h,m)&&me(c,f,h,m),function(e){const t=e.maxPadding;function n(n){const o=Math.max(t[n]-e[n],0);return e[n]+=o,o}e.y+=n("top"),e.x+=n("left"),n("right"),n("bottom")}(f),ve(l.leftAndTop,f,h,m),f.x+=f.w,f.y+=f.h,ve(l.rightAndBottom,f,h,m),e.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},(0,o.Q)(l.chartArea,(t=>{const n=t.box;Object.assign(n,e.chartArea),n.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class be{acquireContext(e,t){}releaseContext(e){return!1}addEventListener(e,t,n){}removeEventListener(e,t,n){}getDevicePixelRatio(){return 1}getMaximumSize(e,t,n,o){return t=Math.max(0,t||e.width),n=n||e.height,{width:t,height:Math.max(0,o?Math.floor(t/o):n)}}isAttached(e){return!0}updateConfig(e){}}class _e extends be{acquireContext(e){return e&&e.getContext&&e.getContext("2d")||null}updateConfig(e){e.options.animation=!1}}const xe={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},we=e=>null===e||""===e,Se=!!o.a5&&{passive:!0};function ke(e,t,n){e.canvas.removeEventListener(t,n,Se)}function je(e,t){for(const n of e)if(n===t||n.contains(t))return!0}function Pe(e,t,n){const o=e.canvas,s=new MutationObserver((e=>{let t=!1;for(const n of e)t=t||je(n.addedNodes,o),t=t&&!je(n.removedNodes,o);t&&n()}));return s.observe(document,{childList:!0,subtree:!0}),s}function Oe(e,t,n){const o=e.canvas,s=new MutationObserver((e=>{let t=!1;for(const n of e)t=t||je(n.removedNodes,o),t=t&&!je(n.addedNodes,o);t&&n()}));return s.observe(document,{childList:!0,subtree:!0}),s}const Ce=new Map;let Ee=0;function Te(){const e=window.devicePixelRatio;e!==Ee&&(Ee=e,Ce.forEach(((t,n)=>{n.currentDevicePixelRatio!==e&&t()})))}function Me(e,t,n){const s=e.canvas,r=s&&(0,o.a2)(s);if(!r)return;const i=(0,o.a4)(((e,t)=>{const o=r.clientWidth;n(e,t),o<r.clientWidth&&n()}),window),a=new ResizeObserver((e=>{const t=e[0],n=t.contentRect.width,o=t.contentRect.height;0===n&&0===o||i(n,o)}));return a.observe(r),function(e,t){Ce.size||window.addEventListener("resize",Te),Ce.set(e,t)}(e,i),a}function Ae(e,t,n){n&&n.disconnect(),"resize"===t&&function(e){Ce.delete(e),Ce.size||window.removeEventListener("resize",Te)}(e)}function Re(e,t,n){const s=e.canvas,r=(0,o.a4)((t=>{null!==e.ctx&&n(function(e,t){const n=xe[e.type]||e.type,{x:s,y:r}=(0,o.X)(e,t);return{type:n,chart:t,native:e,x:void 0!==s?s:null,y:void 0!==r?r:null}}(t,e))}),e,(e=>{const t=e[0];return[t,t.offsetX,t.offsetY]}));return function(e,t,n){e.addEventListener(t,n,Se)}(s,t,r),r}class Le extends be{acquireContext(e,t){const n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(function(e,t){const n=e.style,s=e.getAttribute("height"),r=e.getAttribute("width");if(e.$chartjs={initial:{height:s,width:r,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",we(r)){const t=(0,o.a3)(e,"width");void 0!==t&&(e.width=t)}if(we(s))if(""===e.style.height)e.height=e.width/(t||2);else{const t=(0,o.a3)(e,"height");void 0!==t&&(e.height=t)}}(e,t),n):null}releaseContext(e){const t=e.canvas;if(!t.$chartjs)return!1;const n=t.$chartjs.initial;["height","width"].forEach((e=>{const s=n[e];(0,o.k)(s)?t.removeAttribute(e):t.setAttribute(e,s)}));const s=n.style||{};return Object.keys(s).forEach((e=>{t.style[e]=s[e]})),t.width=t.width,delete t.$chartjs,!0}addEventListener(e,t,n){this.removeEventListener(e,t);const o=e.$proxies||(e.$proxies={}),s={attach:Pe,detach:Oe,resize:Me}[t]||Re;o[t]=s(e,t,n)}removeEventListener(e,t){const n=e.$proxies||(e.$proxies={}),o=n[t];o&&(({attach:Ae,detach:Ae,resize:Ae}[t]||ke)(e,t,o),n[t]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(e,t,n,s){return(0,o.a1)(e,t,n,s)}isAttached(e){const t=(0,o.a2)(e);return!(!t||!t.isConnected)}}function De(e){return!(0,o.a6)()||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas?_e:Le}class Be{constructor(){this._init=[]}notify(e,t,n,o){"beforeInit"===t&&(this._init=this._createDescriptors(e,!0),this._notify(this._init,e,"install"));const s=o?this._descriptors(e).filter(o):this._descriptors(e),r=this._notify(s,e,t,n);return"afterDestroy"===t&&(this._notify(s,e,"stop"),this._notify(this._init,e,"uninstall")),r}_notify(e,t,n,s){s=s||{};for(const r of e){const e=r.plugin,i=e[n],a=[t,s,r.options];if(!1===(0,o.C)(i,a,e)&&s.cancelable)return!1}return!0}invalidate(){(0,o.k)(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(e){if(this._cache)return this._cache;const t=this._cache=this._createDescriptors(e);return this._notifyStateChanges(e),t}_createDescriptors(e,t){const n=e&&e.config,s=(0,o.v)(n.options&&n.options.plugins,{}),r=function(e){const t={},n=[],o=Object.keys(K.plugins.items);for(let e=0;e<o.length;e++)n.push(K.getPlugin(o[e]));const s=e.plugins||[];for(let e=0;e<s.length;e++){const o=s[e];-1===n.indexOf(o)&&(n.push(o),t[o.id]=!0)}return{plugins:n,localIds:t}}(n);return!1!==s||t?function(e,{plugins:t,localIds:n},o,s){const r=[],i=e.getContext();for(const a of t){const t=a.id,l=Ie(o[t],s);null!==l&&r.push({plugin:a,options:Ne(e.config,{plugin:a,local:n[t]},l,i)})}return r}(e,r,s,t):[]}_notifyStateChanges(e){const t=this._oldCache||[],n=this._cache,o=(e,t)=>e.filter((e=>!t.some((t=>e.plugin.id===t.plugin.id))));this._notify(o(t,n),e,"stop"),this._notify(o(n,t),e,"start")}}function Ie(e,t){return t||!1!==e?!0===e?{}:e:null}function Ne(e,{plugin:t,local:n},o,s){const r=e.pluginScopeKeys(t),i=e.getOptionScopes(o,r);return n&&t.defaults&&i.push(t.defaults),e.createResolver(i,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Fe(e,t){const n=o.d.datasets[e]||{};return((t.datasets||{})[e]||{}).indexAxis||t.indexAxis||n.indexAxis||"x"}function Ve(e,t){return"x"===e||"y"===e?e:t.axis||("top"===(n=t.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||e.charAt(0).toLowerCase();var n}function $e(e){const t=e.options||(e.options={});t.plugins=(0,o.v)(t.plugins,{}),t.scales=function(e,t){const n=o.U[e.type]||{scales:{}},s=t.scales||{},r=Fe(e.type,t),i=Object.create(null),a=Object.create(null);return Object.keys(s).forEach((e=>{const t=s[e];if(!(0,o.i)(t))return console.error(`Invalid scale configuration for scale: ${e}`);if(t._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const l=Ve(e,t),c=function(e,t){return e===t?"_index_":"_value_"}(l,r),u=n.scales||{};i[l]=i[l]||e,a[e]=(0,o.ac)(Object.create(null),[{axis:l},t,u[l],u[c]])})),e.data.datasets.forEach((n=>{const r=n.type||e.type,l=n.indexAxis||Fe(r,t),c=(o.U[r]||{}).scales||{};Object.keys(c).forEach((e=>{const t=function(e,t){let n=e;return"_index_"===e?n=t:"_value_"===e&&(n="x"===t?"y":"x"),n}(e,l),r=n[t+"AxisID"]||i[t]||t;a[r]=a[r]||Object.create(null),(0,o.ac)(a[r],[{axis:t},s[r],c[e]])}))})),Object.keys(a).forEach((e=>{const t=a[e];(0,o.ac)(t,[o.d.scales[t.type],o.d.scale])})),a}(e,t)}function ze(e){return(e=e||{}).datasets=e.datasets||[],e.labels=e.labels||[],e}const He=new Map,Ue=new Set;function We(e,t){let n=He.get(e);return n||(n=t(),He.set(e,n),Ue.add(n)),n}const Ge=(e,t,n)=>{const s=(0,o.f)(t,n);void 0!==s&&e.add(s)};class Ye{constructor(e){this._config=function(e){return(e=e||{}).data=ze(e.data),$e(e),e}(e),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(e){this._config.type=e}get data(){return this._config.data}set data(e){this._config.data=ze(e)}get options(){return this._config.options}set options(e){this._config.options=e}get plugins(){return this._config.plugins}update(){const e=this._config;this.clearCache(),$e(e)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(e){return We(e,(()=>[[`datasets.${e}`,""]]))}datasetAnimationScopeKeys(e,t){return We(`${e}.transition.${t}`,(()=>[[`datasets.${e}.transitions.${t}`,`transitions.${t}`],[`datasets.${e}`,""]]))}datasetElementScopeKeys(e,t){return We(`${e}-${t}`,(()=>[[`datasets.${e}.elements.${t}`,`datasets.${e}`,`elements.${t}`,""]]))}pluginScopeKeys(e){const t=e.id;return We(`${this.type}-plugin-${t}`,(()=>[[`plugins.${t}`,...e.additionalOptionScopes||[]]]))}_cachedScopes(e,t){const n=this._scopeCache;let o=n.get(e);return o&&!t||(o=new Map,n.set(e,o)),o}getOptionScopes(e,t,n){const{options:s,type:r}=this,i=this._cachedScopes(e,n),a=i.get(t);if(a)return a;const l=new Set;t.forEach((t=>{e&&(l.add(e),t.forEach((t=>Ge(l,e,t)))),t.forEach((e=>Ge(l,s,e))),t.forEach((e=>Ge(l,o.U[r]||{},e))),t.forEach((e=>Ge(l,o.d,e))),t.forEach((e=>Ge(l,o.a7,e)))}));const c=Array.from(l);return 0===c.length&&c.push(Object.create(null)),Ue.has(t)&&i.set(t,c),c}chartOptionScopes(){const{options:e,type:t}=this;return[e,o.U[t]||{},o.d.datasets[t]||{},{type:t},o.d,o.a7]}resolveNamedOptions(e,t,n,s=[""]){const r={$shared:!0},{resolver:i,subPrefixes:a}=qe(this._resolverCache,e,s);let l=i;if(function(e,t){const{isScriptable:n,isIndexable:s}=(0,o.ab)(e);for(const r of t){const t=n(r),i=s(r),a=(i||t)&&e[r];if(t&&((0,o.a8)(a)||Ke(a))||i&&(0,o.b)(a))return!0}return!1}(i,t)){r.$shared=!1,n=(0,o.a8)(n)?n():n;const t=this.createResolver(e,n,a);l=(0,o.a9)(i,n,t)}for(const e of t)r[e]=l[e];return r}createResolver(e,t,n=[""],s){const{resolver:r}=qe(this._resolverCache,e,n);return(0,o.i)(t)?(0,o.a9)(r,t,void 0,s):r}}function qe(e,t,n){let s=e.get(t);s||(s=new Map,e.set(t,s));const r=n.join();let i=s.get(r);return i||(i={resolver:(0,o.aa)(t,n),subPrefixes:n.filter((e=>!e.toLowerCase().includes("hover")))},s.set(r,i)),i}const Ke=e=>(0,o.i)(e)&&Object.getOwnPropertyNames(e).reduce(((t,n)=>t||(0,o.a8)(e[n])),!1),Je=["top","bottom","left","right","chartArea"];function Xe(e,t){return"top"===e||"bottom"===e||-1===Je.indexOf(e)&&"x"===t}function Qe(e,t){return function(n,o){return n[e]===o[e]?n[t]-o[t]:n[e]-o[e]}}function Ze(e){const t=e.chart,n=t.options.animation;t.notifyPlugins("afterRender"),(0,o.C)(n&&n.onComplete,[e],t)}function et(e){const t=e.chart,n=t.options.animation;(0,o.C)(n&&n.onProgress,[e],t)}function tt(e){return(0,o.a6)()&&"string"==typeof e?e=document.getElementById(e):e&&e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas),e}const nt={},ot=e=>{const t=tt(e);return Object.values(nt).filter((e=>e.canvas===t)).pop()};function st(e,t,n){const o=Object.keys(e);for(const s of o){const o=+s;if(o>=t){const r=e[s];delete e[s],(n>0||o>t)&&(e[o+n]=r)}}}class rt{constructor(e,t){const n=this.config=new Ye(t),r=tt(e),i=ot(r);if(i)throw new Error("Canvas is already in use. Chart with ID '"+i.id+"' must be destroyed before the canvas with ID '"+i.canvas.id+"' can be reused.");const a=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||De(r)),this.platform.updateConfig(n);const l=this.platform.acquireContext(r,a.aspectRatio),c=l&&l.canvas,u=c&&c.height,d=c&&c.width;this.id=(0,o.ad)(),this.ctx=l,this.canvas=c,this.width=d,this.height=u,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Be,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=(0,o.ae)((e=>this.update(e)),a.resizeDelay||0),this._dataChanges=[],nt[this.id]=this,l&&c?(s.listen(this,"complete",Ze),s.listen(this,"progress",et),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:e,maintainAspectRatio:t},width:n,height:s,_aspectRatio:r}=this;return(0,o.k)(e)?t&&r?r:s?n/s:null:e}get data(){return this.config.data}set data(e){this.config.data=e}get options(){return this._options}set options(e){this.config.options=e}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():(0,o.af)(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return(0,o.ag)(this.canvas,this.ctx),this}stop(){return s.stop(this),this}resize(e,t){s.running(this)?this._resizeBeforeDraw={width:e,height:t}:this._resize(e,t)}_resize(e,t){const n=this.options,s=this.canvas,r=n.maintainAspectRatio&&this.aspectRatio,i=this.platform.getMaximumSize(s,e,t,r),a=n.devicePixelRatio||this.platform.getDevicePixelRatio(),l=this.width?"resize":"attach";this.width=i.width,this.height=i.height,this._aspectRatio=this.aspectRatio,(0,o.af)(this,a,!0)&&(this.notifyPlugins("resize",{size:i}),(0,o.C)(n.onResize,[this,i],this),this.attached&&this._doResize(l)&&this.render())}ensureScalesHaveIDs(){const e=this.options.scales||{};(0,o.Q)(e,((e,t)=>{e.id=t}))}buildOrUpdateScales(){const e=this.options,t=e.scales,n=this.scales,s=Object.keys(n).reduce(((e,t)=>(e[t]=!1,e)),{});let r=[];t&&(r=r.concat(Object.keys(t).map((e=>{const n=t[e],o=Ve(e,n),s="r"===o,r="x"===o;return{options:n,dposition:s?"chartArea":r?"bottom":"left",dtype:s?"radialLinear":r?"category":"linear"}})))),(0,o.Q)(r,(t=>{const r=t.options,i=r.id,a=Ve(i,r),l=(0,o.v)(r.type,t.dtype);void 0!==r.position&&Xe(r.position,a)===Xe(t.dposition)||(r.position=t.dposition),s[i]=!0;let c=null;i in n&&n[i].type===l?c=n[i]:(c=new(K.getScale(l))({id:i,type:l,ctx:this.ctx,chart:this}),n[c.id]=c),c.init(r,e)})),(0,o.Q)(s,((e,t)=>{e||delete n[t]})),(0,o.Q)(n,(e=>{ye.configure(this,e,e.options),ye.addBox(this,e)}))}_updateMetasets(){const e=this._metasets,t=this.data.datasets.length,n=e.length;if(e.sort(((e,t)=>e.index-t.index)),n>t){for(let e=t;e<n;++e)this._destroyDatasetMeta(e);e.splice(t,n-t)}this._sortedMetasets=e.slice(0).sort(Qe("order","index"))}_removeUnreferencedMetasets(){const{_metasets:e,data:{datasets:t}}=this;e.length>t.length&&delete this._stacks,e.forEach(((e,n)=>{0===t.filter((t=>t===e._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const e=[],t=this.data.datasets;let n,s;for(this._removeUnreferencedMetasets(),n=0,s=t.length;n<s;n++){const s=t[n];let r=this.getDatasetMeta(n);const i=s.type||this.config.type;if(r.type&&r.type!==i&&(this._destroyDatasetMeta(n),r=this.getDatasetMeta(n)),r.type=i,r.indexAxis=s.indexAxis||Fe(i,this.options),r.order=s.order||0,r.index=n,r.label=""+s.label,r.visible=this.isDatasetVisible(n),r.controller)r.controller.updateIndex(n),r.controller.linkScales();else{const t=K.getController(i),{datasetElementType:s,dataElementType:a}=o.d.datasets[i];Object.assign(t.prototype,{dataElementType:K.getElement(a),datasetElementType:s&&K.getElement(s)}),r.controller=new t(this,n),e.push(r.controller)}}return this._updateMetasets(),e}_resetElements(){(0,o.Q)(this.data.datasets,((e,t)=>{this.getDatasetMeta(t).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(e){const t=this.config;t.update();const n=this._options=t.createResolver(t.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:e,cancelable:!0}))return;const r=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let i=0;for(let e=0,t=this.data.datasets.length;e<t;e++){const{controller:t}=this.getDatasetMeta(e),n=!s&&-1===r.indexOf(t);t.buildOrUpdateElements(n),i=Math.max(+t.getMaxOverflow(),i)}i=this._minPadding=n.layout.autoPadding?i:0,this._updateLayout(i),s||(0,o.Q)(r,(e=>{e.reset()})),this._updateDatasets(e),this.notifyPlugins("afterUpdate",{mode:e}),this._layers.sort(Qe("z","_idx"));const{_active:a,_lastEvent:l}=this;l?this._eventHandler(l,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){(0,o.Q)(this.scales,(e=>{ye.removeBox(this,e)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const e=this.options,t=new Set(Object.keys(this._listeners)),n=new Set(e.events);(0,o.ah)(t,n)&&!!this._responsiveListeners===e.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:e}=this,t=this._getUniformDataChanges()||[];for(const{method:n,start:o,count:s}of t)st(e,o,"_removeElements"===n?-s:s)}_getUniformDataChanges(){const e=this._dataChanges;if(!e||!e.length)return;this._dataChanges=[];const t=this.data.datasets.length,n=t=>new Set(e.filter((e=>e[0]===t)).map(((e,t)=>t+","+e.splice(1).join(",")))),s=n(0);for(let e=1;e<t;e++)if(!(0,o.ah)(s,n(e)))return;return Array.from(s).map((e=>e.split(","))).map((e=>({method:e[1],start:+e[2],count:+e[3]})))}_updateLayout(e){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;ye.update(this,this.width,this.height,e);const t=this.chartArea,n=t.width<=0||t.height<=0;this._layers=[],(0,o.Q)(this.boxes,(e=>{n&&"chartArea"===e.position||(e.configure&&e.configure(),this._layers.push(...e._layers()))}),this),this._layers.forEach(((e,t)=>{e._idx=t})),this.notifyPlugins("afterLayout")}_updateDatasets(e){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:e,cancelable:!0})){for(let e=0,t=this.data.datasets.length;e<t;++e)this.getDatasetMeta(e).controller.configure();for(let t=0,n=this.data.datasets.length;t<n;++t)this._updateDataset(t,(0,o.a8)(e)?e({datasetIndex:t}):e);this.notifyPlugins("afterDatasetsUpdate",{mode:e})}}_updateDataset(e,t){const n=this.getDatasetMeta(e),o={meta:n,index:e,mode:t,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",o)&&(n.controller._update(t),o.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",o))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(s.has(this)?this.attached&&!s.running(this)&&s.start(this):(this.draw(),Ze({chart:this})))}draw(){let e;if(this._resizeBeforeDraw){const{width:e,height:t}=this._resizeBeforeDraw;this._resize(e,t),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const t=this._layers;for(e=0;e<t.length&&t[e].z<=0;++e)t[e].draw(this.chartArea);for(this._drawDatasets();e<t.length;++e)t[e].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(e){const t=this._sortedMetasets,n=[];let o,s;for(o=0,s=t.length;o<s;++o){const s=t[o];e&&!s.visible||n.push(s)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const e=this.getSortedVisibleDatasetMetas();for(let t=e.length-1;t>=0;--t)this._drawDataset(e[t]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(e){const t=this.ctx,n=e._clip,s=!n.disabled,r=this.chartArea,i={meta:e,index:e.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",i)&&(s&&(0,o.L)(t,{left:!1===n.left?0:r.left-n.left,right:!1===n.right?this.width:r.right+n.right,top:!1===n.top?0:r.top-n.top,bottom:!1===n.bottom?this.height:r.bottom+n.bottom}),e.controller.draw(),s&&(0,o.N)(t),i.cancelable=!1,this.notifyPlugins("afterDatasetDraw",i))}isPointInArea(e){return(0,o.$)(e,this.chartArea,this._minPadding)}getElementsAtEventForMode(e,t,n,o){const s=ie.modes[t];return"function"==typeof s?s(this,e,n,o):[]}getDatasetMeta(e){const t=this.data.datasets[e],n=this._metasets;let o=n.filter((e=>e&&e._dataset===t)).pop();return o||(o={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:t&&t.order||0,index:e,_dataset:t,_parsed:[],_sorted:!1},n.push(o)),o}getContext(){return this.$context||(this.$context=(0,o.h)(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(e){const t=this.data.datasets[e];if(!t)return!1;const n=this.getDatasetMeta(e);return"boolean"==typeof n.hidden?!n.hidden:!t.hidden}setDatasetVisibility(e,t){this.getDatasetMeta(e).hidden=!t}toggleDataVisibility(e){this._hiddenIndices[e]=!this._hiddenIndices[e]}getDataVisibility(e){return!this._hiddenIndices[e]}_updateVisibility(e,t,n){const s=n?"show":"hide",r=this.getDatasetMeta(e),i=r.controller._resolveAnimations(void 0,s);(0,o.j)(t)?(r.data[t].hidden=!n,this.update()):(this.setDatasetVisibility(e,n),i.update(r,{visible:n}),this.update((t=>t.datasetIndex===e?s:void 0)))}hide(e,t){this._updateVisibility(e,t,!1)}show(e,t){this._updateVisibility(e,t,!0)}_destroyDatasetMeta(e){const t=this._metasets[e];t&&t.controller&&t.controller._destroy(),delete this._metasets[e]}_stop(){let e,t;for(this.stop(),s.remove(this),e=0,t=this.data.datasets.length;e<t;++e)this._destroyDatasetMeta(e)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:e,ctx:t}=this;this._stop(),this.config.clearCache(),e&&(this.unbindEvents(),(0,o.ag)(e,t),this.platform.releaseContext(t),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete nt[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...e){return this.canvas.toDataURL(...e)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const e=this._listeners,t=this.platform,n=(n,o)=>{t.addEventListener(this,n,o),e[n]=o},s=(e,t,n)=>{e.offsetX=t,e.offsetY=n,this._eventHandler(e)};(0,o.Q)(this.options.events,(e=>n(e,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const e=this._responsiveListeners,t=this.platform,n=(n,o)=>{t.addEventListener(this,n,o),e[n]=o},o=(n,o)=>{e[n]&&(t.removeEventListener(this,n,o),delete e[n])},s=(e,t)=>{this.canvas&&this.resize(e,t)};let r;const i=()=>{o("attach",i),this.attached=!0,this.resize(),n("resize",s),n("detach",r)};r=()=>{this.attached=!1,o("resize",s),this._stop(),this._resize(0,0),n("attach",i)},t.isAttached(this.canvas)?i():r()}unbindEvents(){(0,o.Q)(this._listeners,((e,t)=>{this.platform.removeEventListener(this,t,e)})),this._listeners={},(0,o.Q)(this._responsiveListeners,((e,t)=>{this.platform.removeEventListener(this,t,e)})),this._responsiveListeners=void 0}updateHoverStyle(e,t,n){const o=n?"set":"remove";let s,r,i,a;for("dataset"===t&&(s=this.getDatasetMeta(e[0].datasetIndex),s.controller["_"+o+"DatasetHoverStyle"]()),i=0,a=e.length;i<a;++i){r=e[i];const t=r&&this.getDatasetMeta(r.datasetIndex).controller;t&&t[o+"HoverStyle"](r.element,r.datasetIndex,r.index)}}getActiveElements(){return this._active||[]}setActiveElements(e){const t=this._active||[],n=e.map((({datasetIndex:e,index:t})=>{const n=this.getDatasetMeta(e);if(!n)throw new Error("No dataset found at index "+e);return{datasetIndex:e,element:n.data[t],index:t}}));!(0,o.ai)(n,t)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,t))}notifyPlugins(e,t,n){return this._plugins.notify(this,e,t,n)}_updateHoverStyles(e,t,n){const o=this.options.hover,s=(e,t)=>e.filter((e=>!t.some((t=>e.datasetIndex===t.datasetIndex&&e.index===t.index)))),r=s(t,e),i=n?e:s(e,t);r.length&&this.updateHoverStyle(r,o.mode,!1),i.length&&o.mode&&this.updateHoverStyle(i,o.mode,!0)}_eventHandler(e,t){const n={event:e,replay:t,cancelable:!0,inChartArea:this.isPointInArea(e)},o=t=>(t.options.events||this.options.events).includes(e.native.type);if(!1===this.notifyPlugins("beforeEvent",n,o))return;const s=this._handleEvent(e,t,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,o),(s||n.changed)&&this.render(),this}_handleEvent(e,t,n){const{_active:s=[],options:r}=this,i=t,a=this._getActiveElements(e,s,n,i),l=(0,o.aj)(e),c=function(e,t,n,o){return n&&"mouseout"!==e.type?o?t:e:null}(e,this._lastEvent,n,l);n&&(this._lastEvent=null,(0,o.C)(r.onHover,[e,a,this],this),l&&(0,o.C)(r.onClick,[e,a,this],this));const u=!(0,o.ai)(a,s);return(u||t)&&(this._active=a,this._updateHoverStyles(a,s,t)),this._lastEvent=c,u}_getActiveElements(e,t,n,o){if("mouseout"===e.type)return[];if(!n)return t;const s=this.options.hover;return this.getElementsAtEventForMode(e,s.mode,s,o)}}const it=()=>(0,o.Q)(rt.instances,(e=>e._plugins.invalidate())),at=!0;function lt(e,t,n){const{startAngle:s,pixelMargin:r,x:i,y:a,outerRadius:l,innerRadius:c}=t;let u=r/l;e.beginPath(),e.arc(i,a,l,s-u,n+u),c>r?(u=r/c,e.arc(i,a,c,n+u,s-u,!0)):e.arc(i,a,r,n+o.H,s-o.H),e.closePath(),e.clip()}function ct(e,t,n,o){return{x:n+e*Math.cos(t),y:o+e*Math.sin(t)}}function ut(e,t,n,s,r,i){const{x:a,y:l,startAngle:c,pixelMargin:u,innerRadius:d}=t,h=Math.max(t.outerRadius+s+n-u,0),p=d>0?d+s+n+u:0;let f=0;const m=r-c;if(s){const e=((d>0?d-s:0)+(h>0?h-s:0))/2;f=(m-(0!==e?m*e/(e+s):m))/2}const g=(m-Math.max(.001,m*h-n/o.P)/h)/2,v=c+g+f,y=r-g-f,{outerStart:b,outerEnd:_,innerStart:x,innerEnd:w}=function(e,t,n,s){const r=(i=e.options.borderRadius,(0,o.al)(i,["outerStart","outerEnd","innerStart","innerEnd"]));var i;const a=(n-t)/2,l=Math.min(a,s*t/2),c=e=>{const t=(n-Math.min(a,e))*s/2;return(0,o.E)(e,0,Math.min(a,t))};return{outerStart:c(r.outerStart),outerEnd:c(r.outerEnd),innerStart:(0,o.E)(r.innerStart,0,l),innerEnd:(0,o.E)(r.innerEnd,0,l)}}(t,p,h,y-v),S=h-b,k=h-_,j=v+b/S,P=y-_/k,O=p+x,C=p+w,E=v+x/O,T=y-w/C;if(e.beginPath(),i){if(e.arc(a,l,h,j,P),_>0){const t=ct(k,P,a,l);e.arc(t.x,t.y,_,P,y+o.H)}const t=ct(C,y,a,l);if(e.lineTo(t.x,t.y),w>0){const t=ct(C,T,a,l);e.arc(t.x,t.y,w,y+o.H,T+Math.PI)}if(e.arc(a,l,p,y-w/p,v+x/p,!0),x>0){const t=ct(O,E,a,l);e.arc(t.x,t.y,x,E+Math.PI,v-o.H)}const n=ct(S,v,a,l);if(e.lineTo(n.x,n.y),b>0){const t=ct(S,j,a,l);e.arc(t.x,t.y,b,v-o.H,j)}}else{e.moveTo(a,l);const t=Math.cos(j)*h+a,n=Math.sin(j)*h+l;e.lineTo(t,n);const o=Math.cos(P)*h+a,s=Math.sin(P)*h+l;e.lineTo(o,s)}e.closePath()}Object.defineProperties(rt,{defaults:{enumerable:at,value:o.d},instances:{enumerable:at,value:nt},overrides:{enumerable:at,value:o.U},registry:{enumerable:at,value:K},version:{enumerable:at,value:"3.9.1"},getChart:{enumerable:at,value:ot},register:{enumerable:at,value:(...e)=>{K.add(...e),it()}},unregister:{enumerable:at,value:(...e)=>{K.remove(...e),it()}}});class dt extends I{constructor(e){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,e&&Object.assign(this,e)}inRange(e,t,n){const s=this.getProps(["x","y"],n),{angle:r,distance:i}=(0,o.a0)(s,{x:e,y:t}),{startAngle:a,endAngle:l,innerRadius:c,outerRadius:u,circumference:d}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),h=this.options.spacing/2,p=(0,o.v)(d,l-a)>=o.T||(0,o.p)(r,a,l),f=(0,o.ak)(i,c+h,u+h);return p&&f}getCenterPoint(e){const{x:t,y:n,startAngle:o,endAngle:s,innerRadius:r,outerRadius:i}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],e),{offset:a,spacing:l}=this.options,c=(o+s)/2,u=(r+i+l+a)/2;return{x:t+Math.cos(c)*u,y:n+Math.sin(c)*u}}tooltipPosition(e){return this.getCenterPoint(e)}draw(e){const{options:t,circumference:n}=this,s=(t.offset||0)/2,r=(t.spacing||0)/2,i=t.circular;if(this.pixelMargin="inner"===t.borderAlign?.33:0,this.fullCircles=n>o.T?Math.floor(n/o.T):0,0===n||this.innerRadius<0||this.outerRadius<0)return;e.save();let a=0;if(s){a=s/2;const t=(this.startAngle+this.endAngle)/2;e.translate(Math.cos(t)*a,Math.sin(t)*a),this.circumference>=o.P&&(a=s)}e.fillStyle=t.backgroundColor,e.strokeStyle=t.borderColor;const l=function(e,t,n,s,r){const{fullCircles:i,startAngle:a,circumference:l}=t;let c=t.endAngle;if(i){ut(e,t,n,s,a+o.T,r);for(let t=0;t<i;++t)e.fill();isNaN(l)||(c=a+l%o.T,l%o.T==0&&(c+=o.T))}return ut(e,t,n,s,c,r),e.fill(),c}(e,this,a,r,i);(function(e,t,n,s,r,i){const{options:a}=t,{borderWidth:l,borderJoinStyle:c}=a,u="inner"===a.borderAlign;l&&(u?(e.lineWidth=2*l,e.lineJoin=c||"round"):(e.lineWidth=l,e.lineJoin=c||"bevel"),t.fullCircles&&function(e,t,n){const{x:s,y:r,startAngle:i,pixelMargin:a,fullCircles:l}=t,c=Math.max(t.outerRadius-a,0),u=t.innerRadius+a;let d;for(n&&lt(e,t,i+o.T),e.beginPath(),e.arc(s,r,u,i+o.T,i,!0),d=0;d<l;++d)e.stroke();for(e.beginPath(),e.arc(s,r,c,i,i+o.T),d=0;d<l;++d)e.stroke()}(e,t,u),u&&lt(e,t,r),ut(e,t,n,s,r,i),e.stroke())})(e,this,a,r,l,i),e.restore()}}function ht(e,t,n=t){e.lineCap=(0,o.v)(n.borderCapStyle,t.borderCapStyle),e.setLineDash((0,o.v)(n.borderDash,t.borderDash)),e.lineDashOffset=(0,o.v)(n.borderDashOffset,t.borderDashOffset),e.lineJoin=(0,o.v)(n.borderJoinStyle,t.borderJoinStyle),e.lineWidth=(0,o.v)(n.borderWidth,t.borderWidth),e.strokeStyle=(0,o.v)(n.borderColor,t.borderColor)}function pt(e,t,n){e.lineTo(n.x,n.y)}function ft(e,t,n={}){const o=e.length,{start:s=0,end:r=o-1}=n,{start:i,end:a}=t,l=Math.max(s,i),c=Math.min(r,a),u=s<i&&r<i||s>a&&r>a;return{count:o,start:l,loop:t.loop,ilen:c<l&&!u?o+c-l:c-l}}function mt(e,t,n,s){const{points:r,options:i}=t,{count:a,start:l,loop:c,ilen:u}=ft(r,n,s),d=function(e){return e.stepped?o.as:e.tension||"monotone"===e.cubicInterpolationMode?o.at:pt}(i);let h,p,f,{move:m=!0,reverse:g}=s||{};for(h=0;h<=u;++h)p=r[(l+(g?u-h:h))%a],p.skip||(m?(e.moveTo(p.x,p.y),m=!1):d(e,f,p,g,i.stepped),f=p);return c&&(p=r[(l+(g?u:0))%a],d(e,f,p,g,i.stepped)),!!c}function gt(e,t,n,o){const s=t.points,{count:r,start:i,ilen:a}=ft(s,n,o),{move:l=!0,reverse:c}=o||{};let u,d,h,p,f,m,g=0,v=0;const y=e=>(i+(c?a-e:e))%r,b=()=>{p!==f&&(e.lineTo(g,f),e.lineTo(g,p),e.lineTo(g,m))};for(l&&(d=s[y(0)],e.moveTo(d.x,d.y)),u=0;u<=a;++u){if(d=s[y(u)],d.skip)continue;const t=d.x,n=d.y,o=0|t;o===h?(n<p?p=n:n>f&&(f=n),g=(v*g+t)/++v):(b(),e.lineTo(t,n),h=o,v=0,p=f=n),m=n}b()}function vt(e){const t=e.options,n=t.borderDash&&t.borderDash.length;return e._decimated||e._loop||t.tension||"monotone"===t.cubicInterpolationMode||t.stepped||n?mt:gt}dt.id="arc",dt.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0},dt.defaultRoutes={backgroundColor:"backgroundColor"};const yt="function"==typeof Path2D;class bt extends I{constructor(e){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,e&&Object.assign(this,e)}updateControlPoints(e,t){const n=this.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!this._pointsUpdated){const s=n.spanGaps?this._loop:this._fullLoop;(0,o.am)(this._points,n,e,s,t),this._pointsUpdated=!0}}set points(e){this._points=e,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=(0,o.an)(this,this.options.segment))}first(){const e=this.segments,t=this.points;return e.length&&t[e[0].start]}last(){const e=this.segments,t=this.points,n=e.length;return n&&t[e[n-1].end]}interpolate(e,t){const n=this.options,s=e[t],r=this.points,i=(0,o.ao)(this,{property:t,start:s,end:s});if(!i.length)return;const a=[],l=function(e){return e.stepped?o.ap:e.tension||"monotone"===e.cubicInterpolationMode?o.aq:o.ar}(n);let c,u;for(c=0,u=i.length;c<u;++c){const{start:o,end:u}=i[c],d=r[o],h=r[u];if(d===h){a.push(d);continue}const p=l(d,h,Math.abs((s-d[t])/(h[t]-d[t])),n.stepped);p[t]=e[t],a.push(p)}return 1===a.length?a[0]:a}pathSegment(e,t,n){return vt(this)(e,this,t,n)}path(e,t,n){const o=this.segments,s=vt(this);let r=this._loop;t=t||0,n=n||this.points.length-t;for(const i of o)r&=s(e,this,i,{start:t,end:t+n-1});return!!r}draw(e,t,n,o){const s=this.options||{};(this.points||[]).length&&s.borderWidth&&(e.save(),function(e,t,n,o){yt&&!t.options.segment?function(e,t,n,o){let s=t._path;s||(s=t._path=new Path2D,t.path(s,n,o)&&s.closePath()),ht(e,t.options),e.stroke(s)}(e,t,n,o):function(e,t,n,o){const{segments:s,options:r}=t,i=vt(t);for(const a of s)ht(e,r,a.style),e.beginPath(),i(e,t,a,{start:n,end:n+o-1})&&e.closePath(),e.stroke()}(e,t,n,o)}(e,this,n,o),e.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function _t(e,t,n,o){const s=e.options,{[n]:r}=e.getProps([n],o);return Math.abs(t-r)<s.radius+s.hitRadius}bt.id="line",bt.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},bt.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},bt.descriptors={_scriptable:!0,_indexable:e=>"borderDash"!==e&&"fill"!==e};class xt extends I{constructor(e){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,e&&Object.assign(this,e)}inRange(e,t,n){const o=this.options,{x:s,y:r}=this.getProps(["x","y"],n);return Math.pow(e-s,2)+Math.pow(t-r,2)<Math.pow(o.hitRadius+o.radius,2)}inXRange(e,t){return _t(this,e,"x",t)}inYRange(e,t){return _t(this,e,"y",t)}getCenterPoint(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}size(e){let t=(e=e||this.options||{}).radius||0;return t=Math.max(t,t&&e.hoverRadius||0),2*(t+(t&&e.borderWidth||0))}draw(e,t){const n=this.options;this.skip||n.radius<.1||!(0,o.$)(this,t,this.size(n)/2)||(e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.fillStyle=n.backgroundColor,(0,o.au)(e,n,this.x,this.y))}getRange(){const e=this.options||{};return e.radius+e.hitRadius}}function wt(e,t){const{x:n,y:o,base:s,width:r,height:i}=e.getProps(["x","y","base","width","height"],t);let a,l,c,u,d;return e.horizontal?(d=i/2,a=Math.min(n,s),l=Math.max(n,s),c=o-d,u=o+d):(d=r/2,a=n-d,l=n+d,c=Math.min(o,s),u=Math.max(o,s)),{left:a,top:c,right:l,bottom:u}}function St(e,t,n,s){return e?0:(0,o.E)(t,n,s)}function kt(e,t,n,s){const r=null===t,i=null===n,a=e&&!(r&&i)&&wt(e,s);return a&&(r||(0,o.ak)(t,a.left,a.right))&&(i||(0,o.ak)(n,a.top,a.bottom))}function jt(e,t){e.rect(t.x,t.y,t.w,t.h)}function Pt(e,t,n={}){const o=e.x!==n.x?-t:0,s=e.y!==n.y?-t:0,r=(e.x+e.w!==n.x+n.w?t:0)-o,i=(e.y+e.h!==n.y+n.h?t:0)-s;return{x:e.x+o,y:e.y+s,w:e.w+r,h:e.h+i,radius:e.radius}}xt.id="point",xt.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},xt.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Ot extends I{constructor(e){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,e&&Object.assign(this,e)}draw(e){const{inflateAmount:t,options:{borderColor:n,backgroundColor:s}}=this,{inner:r,outer:i}=function(e){const t=wt(e),n=t.right-t.left,s=t.bottom-t.top,r=function(e,t,n){const s=e.options.borderWidth,r=e.borderSkipped,i=(0,o.aw)(s);return{t:St(r.top,i.top,0,n),r:St(r.right,i.right,0,t),b:St(r.bottom,i.bottom,0,n),l:St(r.left,i.left,0,t)}}(e,n/2,s/2),i=function(e,t,n){const{enableBorderRadius:s}=e.getProps(["enableBorderRadius"]),r=e.options.borderRadius,i=(0,o.ax)(r),a=Math.min(t,n),l=e.borderSkipped,c=s||(0,o.i)(r);return{topLeft:St(!c||l.top||l.left,i.topLeft,0,a),topRight:St(!c||l.top||l.right,i.topRight,0,a),bottomLeft:St(!c||l.bottom||l.left,i.bottomLeft,0,a),bottomRight:St(!c||l.bottom||l.right,i.bottomRight,0,a)}}(e,n/2,s/2);return{outer:{x:t.left,y:t.top,w:n,h:s,radius:i},inner:{x:t.left+r.l,y:t.top+r.t,w:n-r.l-r.r,h:s-r.t-r.b,radius:{topLeft:Math.max(0,i.topLeft-Math.max(r.t,r.l)),topRight:Math.max(0,i.topRight-Math.max(r.t,r.r)),bottomLeft:Math.max(0,i.bottomLeft-Math.max(r.b,r.l)),bottomRight:Math.max(0,i.bottomRight-Math.max(r.b,r.r))}}}}(this),a=(l=i.radius).topLeft||l.topRight||l.bottomLeft||l.bottomRight?o.av:jt;var l;e.save(),i.w===r.w&&i.h===r.h||(e.beginPath(),a(e,Pt(i,t,r)),e.clip(),a(e,Pt(r,-t,i)),e.fillStyle=n,e.fill("evenodd")),e.beginPath(),a(e,Pt(r,t)),e.fillStyle=s,e.fill(),e.restore()}inRange(e,t,n){return kt(this,e,t,n)}inXRange(e,t){return kt(this,e,null,t)}inYRange(e,t){return kt(this,null,e,t)}getCenterPoint(e){const{x:t,y:n,base:o,horizontal:s}=this.getProps(["x","y","base","horizontal"],e);return{x:s?(t+o)/2:t,y:s?n:(n+o)/2}}getRange(e){return"x"===e?this.width/2:this.height/2}}Ot.id="bar",Ot.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Ot.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Ct=Object.freeze({__proto__:null,ArcElement:dt,LineElement:bt,PointElement:xt,BarElement:Ot});function Et(e){if(e._decimated){const t=e._data;delete e._decimated,delete e._data,Object.defineProperty(e,"data",{value:t})}}function Tt(e){e.data.datasets.forEach((e=>{Et(e)}))}var Mt={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(e,t,n)=>{if(!n.enabled)return void Tt(e);const s=e.width;e.data.datasets.forEach(((t,r)=>{const{_data:i,indexAxis:a}=t,l=e.getDatasetMeta(r),c=i||t.data;if("y"===(0,o.a)([a,e.options.indexAxis]))return;if(!l.controller.supportsDecimation)return;const u=e.scales[l.xAxisID];if("linear"!==u.type&&"time"!==u.type)return;if(e.options.parsing)return;let d,{start:h,count:p}=function(e,t){const n=t.length;let s,r=0;const{iScale:i}=e,{min:a,max:l,minDefined:c,maxDefined:u}=i.getUserBounds();return c&&(r=(0,o.E)((0,o.Z)(t,i.axis,a).lo,0,n-1)),s=u?(0,o.E)((0,o.Z)(t,i.axis,l).hi+1,r,n)-r:n-r,{start:r,count:s}}(l,c);if(p<=(n.threshold||4*s))Et(t);else{switch((0,o.k)(i)&&(t._data=c,delete t.data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(e){this._data=e}})),n.algorithm){case"lttb":d=function(e,t,n,o,s){const r=s.samples||o;if(r>=n)return e.slice(t,t+n);const i=[],a=(n-2)/(r-2);let l=0;const c=t+n-1;let u,d,h,p,f,m=t;for(i[l++]=e[m],u=0;u<r-2;u++){let o,s=0,r=0;const c=Math.floor((u+1)*a)+1+t,g=Math.min(Math.floor((u+2)*a)+1,n)+t,v=g-c;for(o=c;o<g;o++)s+=e[o].x,r+=e[o].y;s/=v,r/=v;const y=Math.floor(u*a)+1+t,b=Math.min(Math.floor((u+1)*a)+1,n)+t,{x:_,y:x}=e[m];for(h=p=-1,o=y;o<b;o++)p=.5*Math.abs((_-s)*(e[o].y-x)-(_-e[o].x)*(r-x)),p>h&&(h=p,d=e[o],f=o);i[l++]=d,m=f}return i[l++]=e[c],i}(c,h,p,s,n);break;case"min-max":d=function(e,t,n,s){let r,i,a,l,c,u,d,h,p,f,m=0,g=0;const v=[],y=t+n-1,b=e[t].x,_=e[y].x-b;for(r=t;r<t+n;++r){i=e[r],a=(i.x-b)/_*s,l=i.y;const t=0|a;if(t===c)l<p?(p=l,u=r):l>f&&(f=l,d=r),m=(g*m+i.x)/++g;else{const n=r-1;if(!(0,o.k)(u)&&!(0,o.k)(d)){const t=Math.min(u,d),o=Math.max(u,d);t!==h&&t!==n&&v.push({...e[t],x:m}),o!==h&&o!==n&&v.push({...e[o],x:m})}r>0&&n!==h&&v.push(e[n]),v.push(i),c=t,g=0,p=f=l,u=d=h=r}}return v}(c,h,p,s);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}t._decimated=d}}))},destroy(e){Tt(e)}};function At(e,t,n,s){if(s)return;let r=t[e],i=n[e];return"angle"===e&&(r=(0,o.az)(r),i=(0,o.az)(i)),{property:e,start:r,end:i}}function Rt(e,t,n){for(;t>e;t--){const e=n[t];if(!isNaN(e.x)&&!isNaN(e.y))break}return t}function Lt(e,t,n,o){return e&&t?o(e[n],t[n]):e?e[n]:t?t[n]:0}function Dt(e,t){let n=[],s=!1;return(0,o.b)(e)?(s=!0,n=e):n=function(e,t){const{x:n=null,y:o=null}=e||{},s=t.points,r=[];return t.segments.forEach((({start:e,end:t})=>{t=Rt(e,t,s);const i=s[e],a=s[t];null!==o?(r.push({x:i.x,y:o}),r.push({x:a.x,y:o})):null!==n&&(r.push({x:n,y:i.y}),r.push({x:n,y:a.y}))})),r}(e,t),n.length?new bt({points:n,options:{tension:0},_loop:s,_fullLoop:s}):null}function Bt(e){return e&&!1!==e.fill}function It(e,t,n){let s=e[t].fill;const r=[t];let i;if(!n)return s;for(;!1!==s&&-1===r.indexOf(s);){if(!(0,o.g)(s))return s;if(i=e[s],!i)return!1;if(i.visible)return s;r.push(s),s=i.fill}return!1}function Nt(e,t,n){const s=function(e){const t=e.options,n=t.fill;let s=(0,o.v)(n&&n.target,n);return void 0===s&&(s=!!t.backgroundColor),!1!==s&&null!==s&&(!0===s?"origin":s)}(e);if((0,o.i)(s))return!isNaN(s.value)&&s;let r=parseFloat(s);return(0,o.g)(r)&&Math.floor(r)===r?function(e,t,n,o){return"-"!==e&&"+"!==e||(n=t+n),!(n===t||n<0||n>=o)&&n}(s[0],t,r,n):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}function Ft(e,t,n){const o=[];for(let s=0;s<n.length;s++){const r=n[s],{first:i,last:a,point:l}=Vt(r,t,"x");if(!(!l||i&&a))if(i)o.unshift(l);else if(e.push(l),!a)break}e.push(...o)}function Vt(e,t,n){const s=e.interpolate(t,n);if(!s)return{};const r=s[n],i=e.segments,a=e.points;let l=!1,c=!1;for(let e=0;e<i.length;e++){const t=i[e],s=a[t.start][n],u=a[t.end][n];if((0,o.ak)(r,s,u)){l=r===s,c=r===u;break}}return{first:l,last:c,point:s}}class $t{constructor(e){this.x=e.x,this.y=e.y,this.radius=e.radius}pathSegment(e,t,n){const{x:s,y:r,radius:i}=this;return t=t||{start:0,end:o.T},e.arc(s,r,i,t.end,t.start,!0),!n.bounds}interpolate(e){const{x:t,y:n,radius:o}=this,s=e.angle;return{x:t+Math.cos(s)*o,y:n+Math.sin(s)*o,angle:s}}}function zt(e,t,n){const s=function(e){const{chart:t,fill:n,line:s}=e;if((0,o.g)(n))return function(e,t){const n=e.getDatasetMeta(t);return n&&e.isDatasetVisible(t)?n.dataset:null}(t,n);if("stack"===n)return function(e){const{scale:t,index:n,line:o}=e,s=[],r=o.segments,i=o.points,a=function(e,t){const n=[],o=e.getMatchingVisibleMetas("line");for(let e=0;e<o.length;e++){const s=o[e];if(s.index===t)break;s.hidden||n.unshift(s.dataset)}return n}(t,n);a.push(Dt({x:null,y:t.bottom},o));for(let e=0;e<r.length;e++){const t=r[e];for(let e=t.start;e<=t.end;e++)Ft(s,i[e],a)}return new bt({points:s,options:{}})}(e);if("shape"===n)return!0;const r=function(e){return(e.scale||{}).getPointPositionForValue?function(e){const{scale:t,fill:n}=e,s=t.options,r=t.getLabels().length,i=s.reverse?t.max:t.min,a=function(e,t,n){let s;return s="start"===e?n:"end"===e?t.options.reverse?t.min:t.max:(0,o.i)(e)?e.value:t.getBaseValue(),s}(n,t,i),l=[];if(s.grid.circular){const e=t.getPointPositionForValue(0,i);return new $t({x:e.x,y:e.y,radius:t.getDistanceFromCenterForValue(a)})}for(let e=0;e<r;++e)l.push(t.getPointPositionForValue(e,a));return l}(e):function(e){const{scale:t={},fill:n}=e,s=function(e,t){let n=null;return"start"===e?n=t.bottom:"end"===e?n=t.top:(0,o.i)(e)?n=t.getPixelForValue(e.value):t.getBasePixel&&(n=t.getBasePixel()),n}(n,t);if((0,o.g)(s)){const e=t.isHorizontal();return{x:e?s:null,y:e?null:s}}return null}(e)}(e);return r instanceof $t?r:Dt(r,s)}(t),{line:r,scale:i,axis:a}=t,l=r.options,c=l.fill,u=l.backgroundColor,{above:d=u,below:h=u}=c||{};s&&r.points.length&&((0,o.L)(e,n),function(e,t){const{line:n,target:o,above:s,below:r,area:i,scale:a}=t,l=n._loop?"angle":t.axis;e.save(),"x"===l&&r!==s&&(Ht(e,o,i.top),Ut(e,{line:n,target:o,color:s,scale:a,property:l}),e.restore(),e.save(),Ht(e,o,i.bottom)),Ut(e,{line:n,target:o,color:r,scale:a,property:l}),e.restore()}(e,{line:r,target:s,above:d,below:h,area:n,scale:i,axis:a}),(0,o.N)(e))}function Ht(e,t,n){const{segments:o,points:s}=t;let r=!0,i=!1;e.beginPath();for(const a of o){const{start:o,end:l}=a,c=s[o],u=s[Rt(o,l,s)];r?(e.moveTo(c.x,c.y),r=!1):(e.lineTo(c.x,n),e.lineTo(c.x,c.y)),i=!!t.pathSegment(e,a,{move:i}),i?e.closePath():e.lineTo(u.x,n)}e.lineTo(t.first().x,n),e.closePath(),e.clip()}function Ut(e,t){const{line:n,target:s,property:r,color:i,scale:a}=t,l=function(e,t,n){const s=e.segments,r=e.points,i=t.points,a=[];for(const e of s){let{start:s,end:l}=e;l=Rt(s,l,r);const c=At(n,r[s],r[l],e.loop);if(!t.segments){a.push({source:e,target:c,start:r[s],end:r[l]});continue}const u=(0,o.ao)(t,c);for(const t of u){const s=At(n,i[t.start],i[t.end],t.loop),l=(0,o.ay)(e,r,s);for(const e of l)a.push({source:e,target:t,start:{[n]:Lt(c,s,"start",Math.max)},end:{[n]:Lt(c,s,"end",Math.min)}})}}return a}(n,s,r);for(const{source:t,target:o,start:c,end:u}of l){const{style:{backgroundColor:l=i}={}}=t,d=!0!==s;e.save(),e.fillStyle=l,Wt(e,a,d&&At(r,c,u)),e.beginPath();const h=!!n.pathSegment(e,t);let p;if(d){h?e.closePath():Gt(e,s,u,r);const t=!!s.pathSegment(e,o,{move:h,reverse:!0});p=h&&t,p||Gt(e,s,c,r)}e.closePath(),e.fill(p?"evenodd":"nonzero"),e.restore()}}function Wt(e,t,n){const{top:o,bottom:s}=t.chart.chartArea,{property:r,start:i,end:a}=n||{};"x"===r&&(e.beginPath(),e.rect(i,o,a-i,s-o),e.clip())}function Gt(e,t,n,o){const s=t.interpolate(n,o);s&&e.lineTo(s.x,s.y)}var Yt={id:"filler",afterDatasetsUpdate(e,t,n){const o=(e.data.datasets||[]).length,s=[];let r,i,a,l;for(i=0;i<o;++i)r=e.getDatasetMeta(i),a=r.dataset,l=null,a&&a.options&&a instanceof bt&&(l={visible:e.isDatasetVisible(i),index:i,fill:Nt(a,i,o),chart:e,axis:r.controller.options.indexAxis,scale:r.vScale,line:a}),r.$filler=l,s.push(l);for(i=0;i<o;++i)l=s[i],l&&!1!==l.fill&&(l.fill=It(s,i,n.propagate))},beforeDraw(e,t,n){const o="beforeDraw"===n.drawTime,s=e.getSortedVisibleDatasetMetas(),r=e.chartArea;for(let t=s.length-1;t>=0;--t){const n=s[t].$filler;n&&(n.line.updateControlPoints(r,n.axis),o&&n.fill&&zt(e.ctx,n,r))}},beforeDatasetsDraw(e,t,n){if("beforeDatasetsDraw"!==n.drawTime)return;const o=e.getSortedVisibleDatasetMetas();for(let t=o.length-1;t>=0;--t){const n=o[t].$filler;Bt(n)&&zt(e.ctx,n,e.chartArea)}},beforeDatasetDraw(e,t,n){const o=t.meta.$filler;Bt(o)&&"beforeDatasetDraw"===n.drawTime&&zt(e.ctx,o,e.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const qt=(e,t)=>{let{boxHeight:n=t,boxWidth:o=t}=e;return e.usePointStyle&&(n=Math.min(n,t),o=e.pointStyleWidth||Math.min(o,t)),{boxWidth:o,boxHeight:n,itemHeight:Math.max(t,n)}};class Kt extends I{constructor(e){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t,n){this.maxWidth=e,this.maxHeight=t,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const e=this.options.labels||{};let t=(0,o.C)(e.generateLabels,[this.chart],this)||[];e.filter&&(t=t.filter((t=>e.filter(t,this.chart.data)))),e.sort&&(t=t.sort(((t,n)=>e.sort(t,n,this.chart.data)))),this.options.reverse&&t.reverse(),this.legendItems=t}fit(){const{options:e,ctx:t}=this;if(!e.display)return void(this.width=this.height=0);const n=e.labels,s=(0,o.O)(n.font),r=s.size,i=this._computeTitleHeight(),{boxWidth:a,itemHeight:l}=qt(n,r);let c,u;t.font=s.string,this.isHorizontal()?(c=this.maxWidth,u=this._fitRows(i,r,a,l)+10):(u=this.maxHeight,c=this._fitCols(i,r,a,l)+10),this.width=Math.min(c,e.maxWidth||this.maxWidth),this.height=Math.min(u,e.maxHeight||this.maxHeight)}_fitRows(e,t,n,o){const{ctx:s,maxWidth:r,options:{labels:{padding:i}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],c=o+i;let u=e;s.textAlign="left",s.textBaseline="middle";let d=-1,h=-c;return this.legendItems.forEach(((e,p)=>{const f=n+t/2+s.measureText(e.text).width;(0===p||l[l.length-1]+f+2*i>r)&&(u+=c,l[l.length-(p>0?0:1)]=0,h+=c,d++),a[p]={left:0,top:h,row:d,width:f,height:o},l[l.length-1]+=f+i})),u}_fitCols(e,t,n,o){const{ctx:s,maxHeight:r,options:{labels:{padding:i}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],c=r-e;let u=i,d=0,h=0,p=0,f=0;return this.legendItems.forEach(((e,r)=>{const m=n+t/2+s.measureText(e.text).width;r>0&&h+o+2*i>c&&(u+=d+i,l.push({width:d,height:h}),p+=d+i,f++,d=h=0),a[r]={left:p,top:h,col:f,width:m,height:o},d=Math.max(d,m),h+=o+i})),u+=d,l.push({width:d,height:h}),u}adjustHitBoxes(){if(!this.options.display)return;const e=this._computeTitleHeight(),{legendHitBoxes:t,options:{align:n,labels:{padding:s},rtl:r}}=this,i=(0,o.aA)(r,this.left,this.width);if(this.isHorizontal()){let r=0,a=(0,o.S)(n,this.left+s,this.right-this.lineWidths[r]);for(const l of t)r!==l.row&&(r=l.row,a=(0,o.S)(n,this.left+s,this.right-this.lineWidths[r])),l.top+=this.top+e+s,l.left=i.leftForLtr(i.x(a),l.width),a+=l.width+s}else{let r=0,a=(0,o.S)(n,this.top+e+s,this.bottom-this.columnSizes[r].height);for(const l of t)l.col!==r&&(r=l.col,a=(0,o.S)(n,this.top+e+s,this.bottom-this.columnSizes[r].height)),l.top=a,l.left+=this.left+s,l.left=i.leftForLtr(i.x(l.left),l.width),a+=l.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const e=this.ctx;(0,o.L)(e,this),this._draw(),(0,o.N)(e)}}_draw(){const{options:e,columnSizes:t,lineWidths:n,ctx:s}=this,{align:r,labels:i}=e,a=o.d.color,l=(0,o.aA)(e.rtl,this.left,this.width),c=(0,o.O)(i.font),{color:u,padding:d}=i,h=c.size,p=h/2;let f;this.drawTitle(),s.textAlign=l.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=c.string;const{boxWidth:m,boxHeight:g,itemHeight:v}=qt(i,h),y=this.isHorizontal(),b=this._computeTitleHeight();f=y?{x:(0,o.S)(r,this.left+d,this.right-n[0]),y:this.top+d+b,line:0}:{x:this.left+d,y:(0,o.S)(r,this.top+b+d,this.bottom-t[0].height),line:0},(0,o.aB)(this.ctx,e.textDirection);const _=v+d;this.legendItems.forEach(((x,w)=>{s.strokeStyle=x.fontColor||u,s.fillStyle=x.fontColor||u;const S=s.measureText(x.text).width,k=l.textAlign(x.textAlign||(x.textAlign=i.textAlign)),j=m+p+S;let P=f.x,O=f.y;l.setWidth(this.width),y?w>0&&P+j+d>this.right&&(O=f.y+=_,f.line++,P=f.x=(0,o.S)(r,this.left+d,this.right-n[f.line])):w>0&&O+_>this.bottom&&(P=f.x=P+t[f.line].width+d,f.line++,O=f.y=(0,o.S)(r,this.top+b+d,this.bottom-t[f.line].height)),function(e,t,n){if(isNaN(m)||m<=0||isNaN(g)||g<0)return;s.save();const r=(0,o.v)(n.lineWidth,1);if(s.fillStyle=(0,o.v)(n.fillStyle,a),s.lineCap=(0,o.v)(n.lineCap,"butt"),s.lineDashOffset=(0,o.v)(n.lineDashOffset,0),s.lineJoin=(0,o.v)(n.lineJoin,"miter"),s.lineWidth=r,s.strokeStyle=(0,o.v)(n.strokeStyle,a),s.setLineDash((0,o.v)(n.lineDash,[])),i.usePointStyle){const a={radius:g*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:r},c=l.xPlus(e,m/2),u=t+p;(0,o.aE)(s,a,c,u,i.pointStyleWidth&&m)}else{const i=t+Math.max((h-g)/2,0),a=l.leftForLtr(e,m),c=(0,o.ax)(n.borderRadius);s.beginPath(),Object.values(c).some((e=>0!==e))?(0,o.av)(s,{x:a,y:i,w:m,h:g,radius:c}):s.rect(a,i,m,g),s.fill(),0!==r&&s.stroke()}s.restore()}(l.x(P),O,x),P=(0,o.aC)(k,P+m+p,y?P+j:this.right,e.rtl),function(e,t,n){(0,o.M)(s,n.text,e,t+v/2,c,{strikethrough:n.hidden,textAlign:l.textAlign(n.textAlign)})}(l.x(P),O,x),y?f.x+=j+d:f.y+=_})),(0,o.aD)(this.ctx,e.textDirection)}drawTitle(){const e=this.options,t=e.title,n=(0,o.O)(t.font),s=(0,o.K)(t.padding);if(!t.display)return;const r=(0,o.aA)(e.rtl,this.left,this.width),i=this.ctx,a=t.position,l=n.size/2,c=s.top+l;let u,d=this.left,h=this.width;if(this.isHorizontal())h=Math.max(...this.lineWidths),u=this.top+c,d=(0,o.S)(e.align,d,this.right-h);else{const t=this.columnSizes.reduce(((e,t)=>Math.max(e,t.height)),0);u=c+(0,o.S)(e.align,this.top,this.bottom-t-e.labels.padding-this._computeTitleHeight())}const p=(0,o.S)(a,d,d+h);i.textAlign=r.textAlign((0,o.R)(a)),i.textBaseline="middle",i.strokeStyle=t.color,i.fillStyle=t.color,i.font=n.string,(0,o.M)(i,t.text,p,u,n)}_computeTitleHeight(){const e=this.options.title,t=(0,o.O)(e.font),n=(0,o.K)(e.padding);return e.display?t.lineHeight+n.height:0}_getLegendItemAt(e,t){let n,s,r;if((0,o.ak)(e,this.left,this.right)&&(0,o.ak)(t,this.top,this.bottom))for(r=this.legendHitBoxes,n=0;n<r.length;++n)if(s=r[n],(0,o.ak)(e,s.left,s.left+s.width)&&(0,o.ak)(t,s.top,s.top+s.height))return this.legendItems[n];return null}handleEvent(e){const t=this.options;if(!function(e,t){return!("mousemove"!==e&&"mouseout"!==e||!t.onHover&&!t.onLeave)||!(!t.onClick||"click"!==e&&"mouseup"!==e)}(e.type,t))return;const n=this._getLegendItemAt(e.x,e.y);if("mousemove"===e.type||"mouseout"===e.type){const i=this._hoveredItem,a=(r=n,null!==(s=i)&&null!==r&&s.datasetIndex===r.datasetIndex&&s.index===r.index);i&&!a&&(0,o.C)(t.onLeave,[e,i,this],this),this._hoveredItem=n,n&&!a&&(0,o.C)(t.onHover,[e,n,this],this)}else n&&(0,o.C)(t.onClick,[e,n,this],this);var s,r}}var Jt={id:"legend",_element:Kt,start(e,t,n){const o=e.legend=new Kt({ctx:e.ctx,options:n,chart:e});ye.configure(e,o,n),ye.addBox(e,o)},stop(e){ye.removeBox(e,e.legend),delete e.legend},beforeUpdate(e,t,n){const o=e.legend;ye.configure(e,o,n),o.options=n},afterUpdate(e){const t=e.legend;t.buildLabels(),t.adjustHitBoxes()},afterEvent(e,t){t.replay||e.legend.handleEvent(t.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(e,t,n){const o=t.datasetIndex,s=n.chart;s.isDatasetVisible(o)?(s.hide(o),t.hidden=!0):(s.show(o),t.hidden=!1)},onHover:null,onLeave:null,labels:{color:e=>e.chart.options.color,boxWidth:40,padding:10,generateLabels(e){const t=e.data.datasets,{labels:{usePointStyle:n,pointStyle:s,textAlign:r,color:i}}=e.legend.options;return e._getSortedDatasetMetas().map((e=>{const a=e.controller.getStyle(n?0:void 0),l=(0,o.K)(a.borderWidth);return{text:t[e.index].label,fillStyle:a.backgroundColor,fontColor:i,hidden:!e.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(l.width+l.height)/4,strokeStyle:a.borderColor,pointStyle:s||a.pointStyle,rotation:a.rotation,textAlign:r||a.textAlign,borderRadius:0,datasetIndex:e.index}}),this)}},title:{color:e=>e.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:e=>!e.startsWith("on"),labels:{_scriptable:e=>!["generateLabels","filter","sort"].includes(e)}}};class Xt extends I{constructor(e){super(),this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=e,this.height=this.bottom=t;const s=(0,o.b)(n.text)?n.text.length:1;this._padding=(0,o.K)(n.padding);const r=s*(0,o.O)(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=r:this.width=r}isHorizontal(){const e=this.options.position;return"top"===e||"bottom"===e}_drawArgs(e){const{top:t,left:n,bottom:s,right:r,options:i}=this,a=i.align;let l,c,u,d=0;return this.isHorizontal()?(c=(0,o.S)(a,n,r),u=t+e,l=r-n):("left"===i.position?(c=n+e,u=(0,o.S)(a,s,t),d=-.5*o.P):(c=r-e,u=(0,o.S)(a,t,s),d=.5*o.P),l=s-t),{titleX:c,titleY:u,maxWidth:l,rotation:d}}draw(){const e=this.ctx,t=this.options;if(!t.display)return;const n=(0,o.O)(t.font),s=n.lineHeight/2+this._padding.top,{titleX:r,titleY:i,maxWidth:a,rotation:l}=this._drawArgs(s);(0,o.M)(e,t.text,0,0,n,{color:t.color,maxWidth:a,rotation:l,textAlign:(0,o.R)(t.align),textBaseline:"middle",translation:[r,i]})}}var Qt={id:"title",_element:Xt,start(e,t,n){!function(e,t){const n=new Xt({ctx:e.ctx,options:t,chart:e});ye.configure(e,n,t),ye.addBox(e,n),e.titleBlock=n}(e,n)},stop(e){const t=e.titleBlock;ye.removeBox(e,t),delete e.titleBlock},beforeUpdate(e,t,n){const o=e.titleBlock;ye.configure(e,o,n),o.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Zt=new WeakMap;var en={id:"subtitle",start(e,t,n){const o=new Xt({ctx:e.ctx,options:n,chart:e});ye.configure(e,o,n),ye.addBox(e,o),Zt.set(e,o)},stop(e){ye.removeBox(e,Zt.get(e)),Zt.delete(e)},beforeUpdate(e,t,n){const o=Zt.get(e);ye.configure(e,o,n),o.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const tn={average(e){if(!e.length)return!1;let t,n,o=0,s=0,r=0;for(t=0,n=e.length;t<n;++t){const n=e[t].element;if(n&&n.hasValue()){const e=n.tooltipPosition();o+=e.x,s+=e.y,++r}}return{x:o/r,y:s/r}},nearest(e,t){if(!e.length)return!1;let n,s,r,i=t.x,a=t.y,l=Number.POSITIVE_INFINITY;for(n=0,s=e.length;n<s;++n){const s=e[n].element;if(s&&s.hasValue()){const e=s.getCenterPoint(),n=(0,o.aG)(t,e);n<l&&(l=n,r=s)}}if(r){const e=r.tooltipPosition();i=e.x,a=e.y}return{x:i,y:a}}};function nn(e,t){return t&&((0,o.b)(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function on(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function sn(e,t){const{element:n,datasetIndex:o,index:s}=t,r=e.getDatasetMeta(o).controller,{label:i,value:a}=r.getLabelAndValue(s);return{chart:e,label:i,parsed:r.getParsed(s),raw:e.data.datasets[o].data[s],formattedValue:a,dataset:r.getDataset(),dataIndex:s,datasetIndex:o,element:n}}function rn(e,t){const n=e.chart.ctx,{body:s,footer:r,title:i}=e,{boxWidth:a,boxHeight:l}=t,c=(0,o.O)(t.bodyFont),u=(0,o.O)(t.titleFont),d=(0,o.O)(t.footerFont),h=i.length,p=r.length,f=s.length,m=(0,o.K)(t.padding);let g=m.height,v=0,y=s.reduce(((e,t)=>e+t.before.length+t.lines.length+t.after.length),0);y+=e.beforeBody.length+e.afterBody.length,h&&(g+=h*u.lineHeight+(h-1)*t.titleSpacing+t.titleMarginBottom),y&&(g+=f*(t.displayColors?Math.max(l,c.lineHeight):c.lineHeight)+(y-f)*c.lineHeight+(y-1)*t.bodySpacing),p&&(g+=t.footerMarginTop+p*d.lineHeight+(p-1)*t.footerSpacing);let b=0;const _=function(e){v=Math.max(v,n.measureText(e).width+b)};return n.save(),n.font=u.string,(0,o.Q)(e.title,_),n.font=c.string,(0,o.Q)(e.beforeBody.concat(e.afterBody),_),b=t.displayColors?a+2+t.boxPadding:0,(0,o.Q)(s,(e=>{(0,o.Q)(e.before,_),(0,o.Q)(e.lines,_),(0,o.Q)(e.after,_)})),b=0,n.font=d.string,(0,o.Q)(e.footer,_),n.restore(),v+=m.width,{width:v,height:g}}function an(e,t,n,o){const{x:s,width:r}=n,{width:i,chartArea:{left:a,right:l}}=e;let c="center";return"center"===o?c=s<=(a+l)/2?"left":"right":s<=r/2?c="left":s>=i-r/2&&(c="right"),function(e,t,n,o){const{x:s,width:r}=o,i=n.caretSize+n.caretPadding;return"left"===e&&s+r+i>t.width||"right"===e&&s-r-i<0||void 0}(c,e,t,n)&&(c="center"),c}function ln(e,t,n){const o=n.yAlign||t.yAlign||function(e,t){const{y:n,height:o}=t;return n<o/2?"top":n>e.height-o/2?"bottom":"center"}(e,n);return{xAlign:n.xAlign||t.xAlign||an(e,t,n,o),yAlign:o}}function cn(e,t,n,s){const{caretSize:r,caretPadding:i,cornerRadius:a}=e,{xAlign:l,yAlign:c}=n,u=r+i,{topLeft:d,topRight:h,bottomLeft:p,bottomRight:f}=(0,o.ax)(a);let m=function(e,t){let{x:n,width:o}=e;return"right"===t?n-=o:"center"===t&&(n-=o/2),n}(t,l);const g=function(e,t,n){let{y:o,height:s}=e;return"top"===t?o+=n:o-="bottom"===t?s+n:s/2,o}(t,c,u);return"center"===c?"left"===l?m+=u:"right"===l&&(m-=u):"left"===l?m-=Math.max(d,p)+r:"right"===l&&(m+=Math.max(h,f)+r),{x:(0,o.E)(m,0,s.width-t.width),y:(0,o.E)(g,0,s.height-t.height)}}function un(e,t,n){const s=(0,o.K)(n.padding);return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-s.right:e.x+s.left}function dn(e){return nn([],on(e))}function hn(e,t){const n=t&&t.dataset&&t.dataset.tooltip&&t.dataset.tooltip.callbacks;return n?e.override(n):e}class pn extends I{constructor(e){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=e.chart||e._chart,this._chart=this.chart,this.options=e.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(e){this.options=e,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const e=this._cachedAnimations;if(e)return e;const t=this.chart,n=this.options.setContext(this.getContext()),o=n.enabled&&t.options.animation&&n.animations,s=new c(this.chart,o);return o._cacheable&&(this._cachedAnimations=Object.freeze(s)),s}getContext(){return this.$context||(this.$context=(e=this.chart.getContext(),this,t=this._tooltipItems,(0,o.h)(e,{tooltip:this,tooltipItems:t,type:"tooltip"})));var e,t}getTitle(e,t){const{callbacks:n}=t,o=n.beforeTitle.apply(this,[e]),s=n.title.apply(this,[e]),r=n.afterTitle.apply(this,[e]);let i=[];return i=nn(i,on(o)),i=nn(i,on(s)),i=nn(i,on(r)),i}getBeforeBody(e,t){return dn(t.callbacks.beforeBody.apply(this,[e]))}getBody(e,t){const{callbacks:n}=t,s=[];return(0,o.Q)(e,(e=>{const t={before:[],lines:[],after:[]},o=hn(n,e);nn(t.before,on(o.beforeLabel.call(this,e))),nn(t.lines,o.label.call(this,e)),nn(t.after,on(o.afterLabel.call(this,e))),s.push(t)})),s}getAfterBody(e,t){return dn(t.callbacks.afterBody.apply(this,[e]))}getFooter(e,t){const{callbacks:n}=t,o=n.beforeFooter.apply(this,[e]),s=n.footer.apply(this,[e]),r=n.afterFooter.apply(this,[e]);let i=[];return i=nn(i,on(o)),i=nn(i,on(s)),i=nn(i,on(r)),i}_createItems(e){const t=this._active,n=this.chart.data,s=[],r=[],i=[];let a,l,c=[];for(a=0,l=t.length;a<l;++a)c.push(sn(this.chart,t[a]));return e.filter&&(c=c.filter(((t,o,s)=>e.filter(t,o,s,n)))),e.itemSort&&(c=c.sort(((t,o)=>e.itemSort(t,o,n)))),(0,o.Q)(c,(t=>{const n=hn(e.callbacks,t);s.push(n.labelColor.call(this,t)),r.push(n.labelPointStyle.call(this,t)),i.push(n.labelTextColor.call(this,t))})),this.labelColors=s,this.labelPointStyles=r,this.labelTextColors=i,this.dataPoints=c,c}update(e,t){const n=this.options.setContext(this.getContext()),o=this._active;let s,r=[];if(o.length){const e=tn[n.position].call(this,o,this._eventPosition);r=this._createItems(n),this.title=this.getTitle(r,n),this.beforeBody=this.getBeforeBody(r,n),this.body=this.getBody(r,n),this.afterBody=this.getAfterBody(r,n),this.footer=this.getFooter(r,n);const t=this._size=rn(this,n),i=Object.assign({},e,t),a=ln(this.chart,n,i),l=cn(n,i,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,s={opacity:1,x:l.x,y:l.y,width:t.width,height:t.height,caretX:e.x,caretY:e.y}}else 0!==this.opacity&&(s={opacity:0});this._tooltipItems=r,this.$context=void 0,s&&this._resolveAnimations().update(this,s),e&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:t})}drawCaret(e,t,n,o){const s=this.getCaretPosition(e,n,o);t.lineTo(s.x1,s.y1),t.lineTo(s.x2,s.y2),t.lineTo(s.x3,s.y3)}getCaretPosition(e,t,n){const{xAlign:s,yAlign:r}=this,{caretSize:i,cornerRadius:a}=n,{topLeft:l,topRight:c,bottomLeft:u,bottomRight:d}=(0,o.ax)(a),{x:h,y:p}=e,{width:f,height:m}=t;let g,v,y,b,_,x;return"center"===r?(_=p+m/2,"left"===s?(g=h,v=g-i,b=_+i,x=_-i):(g=h+f,v=g+i,b=_-i,x=_+i),y=g):(v="left"===s?h+Math.max(l,u)+i:"right"===s?h+f-Math.max(c,d)-i:this.caretX,"top"===r?(b=p,_=b-i,g=v-i,y=v+i):(b=p+m,_=b+i,g=v+i,y=v-i),x=b),{x1:g,x2:v,x3:y,y1:b,y2:_,y3:x}}drawTitle(e,t,n){const s=this.title,r=s.length;let i,a,l;if(r){const c=(0,o.aA)(n.rtl,this.x,this.width);for(e.x=un(this,n.titleAlign,n),t.textAlign=c.textAlign(n.titleAlign),t.textBaseline="middle",i=(0,o.O)(n.titleFont),a=n.titleSpacing,t.fillStyle=n.titleColor,t.font=i.string,l=0;l<r;++l)t.fillText(s[l],c.x(e.x),e.y+i.lineHeight/2),e.y+=i.lineHeight+a,l+1===r&&(e.y+=n.titleMarginBottom-a)}}_drawColorBox(e,t,n,s,r){const i=this.labelColors[n],a=this.labelPointStyles[n],{boxHeight:l,boxWidth:c,boxPadding:u}=r,d=(0,o.O)(r.bodyFont),h=un(this,"left",r),p=s.x(h),f=l<d.lineHeight?(d.lineHeight-l)/2:0,m=t.y+f;if(r.usePointStyle){const t={radius:Math.min(c,l)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},n=s.leftForLtr(p,c)+c/2,u=m+l/2;e.strokeStyle=r.multiKeyBackground,e.fillStyle=r.multiKeyBackground,(0,o.au)(e,t,n,u),e.strokeStyle=i.borderColor,e.fillStyle=i.backgroundColor,(0,o.au)(e,t,n,u)}else{e.lineWidth=(0,o.i)(i.borderWidth)?Math.max(...Object.values(i.borderWidth)):i.borderWidth||1,e.strokeStyle=i.borderColor,e.setLineDash(i.borderDash||[]),e.lineDashOffset=i.borderDashOffset||0;const t=s.leftForLtr(p,c-u),n=s.leftForLtr(s.xPlus(p,1),c-u-2),a=(0,o.ax)(i.borderRadius);Object.values(a).some((e=>0!==e))?(e.beginPath(),e.fillStyle=r.multiKeyBackground,(0,o.av)(e,{x:t,y:m,w:c,h:l,radius:a}),e.fill(),e.stroke(),e.fillStyle=i.backgroundColor,e.beginPath(),(0,o.av)(e,{x:n,y:m+1,w:c-2,h:l-2,radius:a}),e.fill()):(e.fillStyle=r.multiKeyBackground,e.fillRect(t,m,c,l),e.strokeRect(t,m,c,l),e.fillStyle=i.backgroundColor,e.fillRect(n,m+1,c-2,l-2))}e.fillStyle=this.labelTextColors[n]}drawBody(e,t,n){const{body:s}=this,{bodySpacing:r,bodyAlign:i,displayColors:a,boxHeight:l,boxWidth:c,boxPadding:u}=n,d=(0,o.O)(n.bodyFont);let h=d.lineHeight,p=0;const f=(0,o.aA)(n.rtl,this.x,this.width),m=function(n){t.fillText(n,f.x(e.x+p),e.y+h/2),e.y+=h+r},g=f.textAlign(i);let v,y,b,_,x,w,S;for(t.textAlign=i,t.textBaseline="middle",t.font=d.string,e.x=un(this,g,n),t.fillStyle=n.bodyColor,(0,o.Q)(this.beforeBody,m),p=a&&"right"!==g?"center"===i?c/2+u:c+2+u:0,_=0,w=s.length;_<w;++_){for(v=s[_],y=this.labelTextColors[_],t.fillStyle=y,(0,o.Q)(v.before,m),b=v.lines,a&&b.length&&(this._drawColorBox(t,e,_,f,n),h=Math.max(d.lineHeight,l)),x=0,S=b.length;x<S;++x)m(b[x]),h=d.lineHeight;(0,o.Q)(v.after,m)}p=0,h=d.lineHeight,(0,o.Q)(this.afterBody,m),e.y-=r}drawFooter(e,t,n){const s=this.footer,r=s.length;let i,a;if(r){const l=(0,o.aA)(n.rtl,this.x,this.width);for(e.x=un(this,n.footerAlign,n),e.y+=n.footerMarginTop,t.textAlign=l.textAlign(n.footerAlign),t.textBaseline="middle",i=(0,o.O)(n.footerFont),t.fillStyle=n.footerColor,t.font=i.string,a=0;a<r;++a)t.fillText(s[a],l.x(e.x),e.y+i.lineHeight/2),e.y+=i.lineHeight+n.footerSpacing}}drawBackground(e,t,n,s){const{xAlign:r,yAlign:i}=this,{x:a,y:l}=e,{width:c,height:u}=n,{topLeft:d,topRight:h,bottomLeft:p,bottomRight:f}=(0,o.ax)(s.cornerRadius);t.fillStyle=s.backgroundColor,t.strokeStyle=s.borderColor,t.lineWidth=s.borderWidth,t.beginPath(),t.moveTo(a+d,l),"top"===i&&this.drawCaret(e,t,n,s),t.lineTo(a+c-h,l),t.quadraticCurveTo(a+c,l,a+c,l+h),"center"===i&&"right"===r&&this.drawCaret(e,t,n,s),t.lineTo(a+c,l+u-f),t.quadraticCurveTo(a+c,l+u,a+c-f,l+u),"bottom"===i&&this.drawCaret(e,t,n,s),t.lineTo(a+p,l+u),t.quadraticCurveTo(a,l+u,a,l+u-p),"center"===i&&"left"===r&&this.drawCaret(e,t,n,s),t.lineTo(a,l+d),t.quadraticCurveTo(a,l,a+d,l),t.closePath(),t.fill(),s.borderWidth>0&&t.stroke()}_updateAnimationTarget(e){const t=this.chart,n=this.$animations,o=n&&n.x,s=n&&n.y;if(o||s){const n=tn[e.position].call(this,this._active,this._eventPosition);if(!n)return;const r=this._size=rn(this,e),i=Object.assign({},n,this._size),a=ln(t,e,i),l=cn(e,i,a,t);o._to===l.x&&s._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=r.width,this.height=r.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(e){const t=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(t);const s={width:this.width,height:this.height},r={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const i=(0,o.K)(t.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;t.enabled&&a&&(e.save(),e.globalAlpha=n,this.drawBackground(r,e,s,t),(0,o.aB)(e,t.textDirection),r.y+=i.top,this.drawTitle(r,e,t),this.drawBody(r,e,t),this.drawFooter(r,e,t),(0,o.aD)(e,t.textDirection),e.restore())}getActiveElements(){return this._active||[]}setActiveElements(e,t){const n=this._active,s=e.map((({datasetIndex:e,index:t})=>{const n=this.chart.getDatasetMeta(e);if(!n)throw new Error("Cannot find a dataset at index "+e);return{datasetIndex:e,element:n.data[t],index:t}})),r=!(0,o.ai)(n,s),i=this._positionChanged(s,t);(r||i)&&(this._active=s,this._eventPosition=t,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(e,t,n=!0){if(t&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,r=this._active||[],i=this._getActiveElements(e,r,t,n),a=this._positionChanged(i,e),l=t||!(0,o.ai)(i,r)||a;return l&&(this._active=i,(s.enabled||s.external)&&(this._eventPosition={x:e.x,y:e.y},this.update(!0,t))),l}_getActiveElements(e,t,n,o){const s=this.options;if("mouseout"===e.type)return[];if(!o)return t;const r=this.chart.getElementsAtEventForMode(e,s.mode,s,n);return s.reverse&&r.reverse(),r}_positionChanged(e,t){const{caretX:n,caretY:o,options:s}=this,r=tn[s.position].call(this,e,t);return!1!==r&&(n!==r.x||o!==r.y)}}pn.positioners=tn;var fn={id:"tooltip",_element:pn,positioners:tn,afterInit(e,t,n){n&&(e.tooltip=new pn({chart:e,options:n}))},beforeUpdate(e,t,n){e.tooltip&&e.tooltip.initialize(n)},reset(e,t,n){e.tooltip&&e.tooltip.initialize(n)},afterDraw(e){const t=e.tooltip;if(t&&t._willRender()){const n={tooltip:t};if(!1===e.notifyPlugins("beforeTooltipDraw",n))return;t.draw(e.ctx),e.notifyPlugins("afterTooltipDraw",n)}},afterEvent(e,t){if(e.tooltip){const n=t.replay;e.tooltip.handleEvent(t.event,n,t.inChartArea)&&(t.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(e,t)=>t.bodyFont.size,boxWidth:(e,t)=>t.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:o.aF,title(e){if(e.length>0){const t=e[0],n=t.chart.data.labels,o=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return t.dataset.label||"";if(t.label)return t.label;if(o>0&&t.dataIndex<o)return n[t.dataIndex]}return""},afterTitle:o.aF,beforeBody:o.aF,beforeLabel:o.aF,label(e){if(this&&this.options&&"dataset"===this.options.mode)return e.label+": "+e.formattedValue||e.formattedValue;let t=e.dataset.label||"";t&&(t+=": ");const n=e.formattedValue;return(0,o.k)(n)||(t+=n),t},labelColor(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{borderColor:t.borderColor,backgroundColor:t.backgroundColor,borderWidth:t.borderWidth,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{pointStyle:t.pointStyle,rotation:t.rotation}},afterLabel:o.aF,afterBody:o.aF,beforeFooter:o.aF,footer:o.aF,afterFooter:o.aF}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:e=>"filter"!==e&&"itemSort"!==e&&"external"!==e,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},mn=Object.freeze({__proto__:null,Decimation:Mt,Filler:Yt,Legend:Jt,SubTitle:en,Title:Qt,Tooltip:fn});class gn extends Y{constructor(e){super(e),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(e){const t=this._addedLabels;if(t.length){const e=this.getLabels();for(const{index:n,label:o}of t)e[n]===o&&e.splice(n,1);this._addedLabels=[]}super.init(e)}parse(e,t){if((0,o.k)(e))return null;const n=this.getLabels();return((e,t)=>null===e?null:(0,o.E)(Math.round(e),0,t))(t=isFinite(t)&&n[t]===e?t:function(e,t,n,o){const s=e.indexOf(t);return-1===s?((e,t,n,o)=>("string"==typeof t?(n=e.push(t)-1,o.unshift({index:n,label:t})):isNaN(t)&&(n=null),n))(e,t,n,o):s!==e.lastIndexOf(t)?n:s}(n,e,(0,o.v)(t,e),this._addedLabels),n.length-1)}determineDataLimits(){const{minDefined:e,maxDefined:t}=this.getUserBounds();let{min:n,max:o}=this.getMinMax(!0);"ticks"===this.options.bounds&&(e||(n=0),t||(o=this.getLabels().length-1)),this.min=n,this.max=o}buildTicks(){const e=this.min,t=this.max,n=this.options.offset,o=[];let s=this.getLabels();s=0===e&&t===s.length-1?s:s.slice(e,t+1),this._valueRange=Math.max(s.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=e;n<=t;n++)o.push({value:n});return o}getLabelForValue(e){const t=this.getLabels();return e>=0&&e<t.length?t[e]:e}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(e){return"number"!=typeof e&&(e=this.parse(e)),null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getValueForPixel(e){return Math.round(this._startValue+this.getDecimalForPixel(e)*this._valueRange)}getBasePixel(){return this.bottom}}function vn(e,t,{horizontal:n,minRotation:s}){const r=(0,o.t)(s),i=(n?Math.sin(r):Math.cos(r))||.001,a=.75*t*(""+e).length;return Math.min(t/i,a)}gn.id="category",gn.defaults={ticks:{callback:gn.prototype.getLabelForValue}};class yn extends Y{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(e,t){return(0,o.k)(e)||("number"==typeof e||e instanceof Number)&&!isFinite(+e)?null:+e}handleTickRangeOptions(){const{beginAtZero:e}=this.options,{minDefined:t,maxDefined:n}=this.getUserBounds();let{min:s,max:r}=this;const i=e=>s=t?s:e,a=e=>r=n?r:e;if(e){const e=(0,o.s)(s),t=(0,o.s)(r);e<0&&t<0?a(0):e>0&&t>0&&i(0)}if(s===r){let t=1;(r>=Number.MAX_SAFE_INTEGER||s<=Number.MIN_SAFE_INTEGER)&&(t=Math.abs(.05*r)),a(r+t),e||i(s-t)}this.min=s,this.max=r}getTickLimit(){const e=this.options.ticks;let t,{maxTicksLimit:n,stepSize:o}=e;return o?(t=Math.ceil(this.max/o)-Math.floor(this.min/o)+1,t>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${o} would result generating up to ${t} ticks. Limiting to 1000.`),t=1e3)):(t=this.computeTickLimit(),n=n||11),n&&(t=Math.min(n,t)),t}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const e=this.options,t=e.ticks;let n=this.getTickLimit();n=Math.max(2,n);const s=function(e,t){const n=[],{bounds:s,step:r,min:i,max:a,precision:l,count:c,maxTicks:u,maxDigits:d,includeBounds:h}=e,p=r||1,f=u-1,{min:m,max:g}=t,v=!(0,o.k)(i),y=!(0,o.k)(a),b=!(0,o.k)(c),_=(g-m)/(d+1);let x,w,S,k,j=(0,o.aI)((g-m)/f/p)*p;if(j<1e-14&&!v&&!y)return[{value:m},{value:g}];k=Math.ceil(g/j)-Math.floor(m/j),k>f&&(j=(0,o.aI)(k*j/f/p)*p),(0,o.k)(l)||(x=Math.pow(10,l),j=Math.ceil(j*x)/x),"ticks"===s?(w=Math.floor(m/j)*j,S=Math.ceil(g/j)*j):(w=m,S=g),v&&y&&r&&(0,o.aJ)((a-i)/r,j/1e3)?(k=Math.round(Math.min((a-i)/j,u)),j=(a-i)/k,w=i,S=a):b?(w=v?i:w,S=y?a:S,k=c-1,j=(S-w)/k):(k=(S-w)/j,k=(0,o.aK)(k,Math.round(k),j/1e3)?Math.round(k):Math.ceil(k));const P=Math.max((0,o.aL)(j),(0,o.aL)(w));x=Math.pow(10,(0,o.k)(l)?P:l),w=Math.round(w*x)/x,S=Math.round(S*x)/x;let O=0;for(v&&(h&&w!==i?(n.push({value:i}),w<i&&O++,(0,o.aK)(Math.round((w+O*j)*x)/x,i,vn(i,_,e))&&O++):w<i&&O++);O<k;++O)n.push({value:Math.round((w+O*j)*x)/x});return y&&h&&S!==a?n.length&&(0,o.aK)(n[n.length-1].value,a,vn(a,_,e))?n[n.length-1].value=a:n.push({value:a}):y&&S!==a||n.push({value:S}),n}({maxTicks:n,bounds:e.bounds,min:e.min,max:e.max,precision:t.precision,step:t.stepSize,count:t.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:t.minRotation||0,includeBounds:!1!==t.includeBounds},this._range||this);return"ticks"===e.bounds&&(0,o.aH)(s,this,"value"),e.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const e=this.ticks;let t=this.min,n=this.max;if(super.configure(),this.options.offset&&e.length){const o=(n-t)/Math.max(e.length-1,1)/2;t-=o,n+=o}this._startValue=t,this._endValue=n,this._valueRange=n-t}getLabelForValue(e){return(0,o.o)(e,this.chart.options.locale,this.options.ticks.format)}}class bn extends yn{determineDataLimits(){const{min:e,max:t}=this.getMinMax(!0);this.min=(0,o.g)(e)?e:0,this.max=(0,o.g)(t)?t:1,this.handleTickRangeOptions()}computeTickLimit(){const e=this.isHorizontal(),t=e?this.width:this.height,n=(0,o.t)(this.options.ticks.minRotation),s=(e?Math.sin(n):Math.cos(n))||.001,r=this._resolveTickFontOptions(0);return Math.ceil(t/Math.min(40,r.lineHeight/s))}getPixelForValue(e){return null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getValueForPixel(e){return this._startValue+this.getDecimalForPixel(e)*this._valueRange}}function _n(e){return 1==e/Math.pow(10,Math.floor((0,o.z)(e)))}bn.id="linear",bn.defaults={ticks:{callback:F.formatters.numeric}};class xn extends Y{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(e,t){const n=yn.prototype.parse.apply(this,[e,t]);if(0!==n)return(0,o.g)(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const{min:e,max:t}=this.getMinMax(!0);this.min=(0,o.g)(e)?Math.max(0,e):null,this.max=(0,o.g)(t)?Math.max(0,t):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:e,maxDefined:t}=this.getUserBounds();let n=this.min,s=this.max;const r=t=>n=e?n:t,i=e=>s=t?s:e,a=(e,t)=>Math.pow(10,Math.floor((0,o.z)(e))+t);n===s&&(n<=0?(r(1),i(10)):(r(a(n,-1)),i(a(s,1)))),n<=0&&r(a(s,-1)),s<=0&&i(a(n,1)),this._zero&&this.min!==this._suggestedMin&&n===a(this.min,0)&&r(a(n,-1)),this.min=n,this.max=s}buildTicks(){const e=this.options,t=function(e,t){const n=Math.floor((0,o.z)(t.max)),s=Math.ceil(t.max/Math.pow(10,n)),r=[];let i=(0,o.B)(e.min,Math.pow(10,Math.floor((0,o.z)(t.min)))),a=Math.floor((0,o.z)(i)),l=Math.floor(i/Math.pow(10,a)),c=a<0?Math.pow(10,Math.abs(a)):1;do{r.push({value:i,major:_n(i)}),++l,10===l&&(l=1,++a,c=a>=0?1:c),i=Math.round(l*Math.pow(10,a)*c)/c}while(a<n||a===n&&l<s);const u=(0,o.B)(e.max,i);return r.push({value:u,major:_n(i)}),r}({min:this._userMin,max:this._userMax},this);return"ticks"===e.bounds&&(0,o.aH)(t,this,"value"),e.reverse?(t.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),t}getLabelForValue(e){return void 0===e?"0":(0,o.o)(e,this.chart.options.locale,this.options.ticks.format)}configure(){const e=this.min;super.configure(),this._startValue=(0,o.z)(e),this._valueRange=(0,o.z)(this.max)-(0,o.z)(e)}getPixelForValue(e){return void 0!==e&&0!==e||(e=this.min),null===e||isNaN(e)?NaN:this.getPixelForDecimal(e===this.min?0:((0,o.z)(e)-this._startValue)/this._valueRange)}getValueForPixel(e){const t=this.getDecimalForPixel(e);return Math.pow(10,this._startValue+t*this._valueRange)}}function wn(e){const t=e.ticks;if(t.display&&e.display){const e=(0,o.K)(t.backdropPadding);return(0,o.v)(t.font&&t.font.size,o.d.font.size)+e.height}return 0}function Sn(e,t,n,o,s){return e===o||e===s?{start:t-n/2,end:t+n/2}:e<o||e>s?{start:t-n,end:t}:{start:t,end:t+n}}function kn(e,t,n,o,s){const r=Math.abs(Math.sin(n)),i=Math.abs(Math.cos(n));let a=0,l=0;o.start<t.l?(a=(t.l-o.start)/r,e.l=Math.min(e.l,t.l-a)):o.end>t.r&&(a=(o.end-t.r)/r,e.r=Math.max(e.r,t.r+a)),s.start<t.t?(l=(t.t-s.start)/i,e.t=Math.min(e.t,t.t-l)):s.end>t.b&&(l=(s.end-t.b)/i,e.b=Math.max(e.b,t.b+l))}function jn(e){return 0===e||180===e?"center":e<180?"left":"right"}function Pn(e,t,n){return 90===n||270===n?e-=t/2:(n>270||n<90)&&(e-=t),e}function On(e,t,n,s){const{ctx:r}=e;if(n)r.arc(e.xCenter,e.yCenter,t,0,o.T);else{let n=e.getPointPosition(0,t);r.moveTo(n.x,n.y);for(let o=1;o<s;o++)n=e.getPointPosition(o,t),r.lineTo(n.x,n.y)}}xn.id="logarithmic",xn.defaults={ticks:{callback:F.formatters.logarithmic,major:{enabled:!0}}};class Cn extends yn{constructor(e){super(e),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const e=this._padding=(0,o.K)(wn(this.options)/2),t=this.width=this.maxWidth-e.width,n=this.height=this.maxHeight-e.height;this.xCenter=Math.floor(this.left+t/2+e.left),this.yCenter=Math.floor(this.top+n/2+e.top),this.drawingArea=Math.floor(Math.min(t,n)/2)}determineDataLimits(){const{min:e,max:t}=this.getMinMax(!1);this.min=(0,o.g)(e)&&!isNaN(e)?e:0,this.max=(0,o.g)(t)&&!isNaN(t)?t:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/wn(this.options))}generateTickLabels(e){yn.prototype.generateTickLabels.call(this,e),this._pointLabels=this.getLabels().map(((e,t)=>{const n=(0,o.C)(this.options.pointLabels.callback,[e,t],this);return n||0===n?n:""})).filter(((e,t)=>this.chart.getDataVisibility(t)))}fit(){const e=this.options;e.display&&e.pointLabels.display?function(e){const t={l:e.left+e._padding.left,r:e.right-e._padding.right,t:e.top+e._padding.top,b:e.bottom-e._padding.bottom},n=Object.assign({},t),s=[],r=[],i=e._pointLabels.length,a=e.options.pointLabels,l=a.centerPointLabels?o.P/i:0;for(let h=0;h<i;h++){const i=a.setContext(e.getPointLabelContext(h));r[h]=i.padding;const p=e.getPointPosition(h,e.drawingArea+r[h],l),f=(0,o.O)(i.font),m=(c=e.ctx,u=f,d=e._pointLabels[h],d=(0,o.b)(d)?d:[d],{w:(0,o.aM)(c,u.string,d),h:d.length*u.lineHeight});s[h]=m;const g=(0,o.az)(e.getIndexAngle(h)+l),v=Math.round((0,o.F)(g));kn(n,t,g,Sn(v,p.x,m.w,0,180),Sn(v,p.y,m.h,90,270))}var c,u,d;e.setCenterPoint(t.l-n.l,n.r-t.r,t.t-n.t,n.b-t.b),e._pointLabelItems=function(e,t,n){const s=[],r=e._pointLabels.length,i=e.options,a=wn(i)/2,l=e.drawingArea,c=i.pointLabels.centerPointLabels?o.P/r:0;for(let i=0;i<r;i++){const r=e.getPointPosition(i,l+a+n[i],c),p=Math.round((0,o.F)((0,o.az)(r.angle+o.H))),f=t[i],m=Pn(r.y,f.h,p),g=jn(p),v=(u=r.x,d=f.w,"right"===(h=g)?u-=d:"center"===h&&(u-=d/2),u);s.push({x:r.x,y:m,textAlign:g,left:v,top:m,right:v+f.w,bottom:m+f.h})}var u,d,h;return s}(e,s,r)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(e,t,n,o){this.xCenter+=Math.floor((e-t)/2),this.yCenter+=Math.floor((n-o)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(e,t,n,o))}getIndexAngle(e){const t=o.T/(this._pointLabels.length||1),n=this.options.startAngle||0;return(0,o.az)(e*t+(0,o.t)(n))}getDistanceFromCenterForValue(e){if((0,o.k)(e))return NaN;const t=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-e)*t:(e-this.min)*t}getValueForDistanceFromCenter(e){if((0,o.k)(e))return NaN;const t=e/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-t:this.min+t}getPointLabelContext(e){const t=this._pointLabels||[];if(e>=0&&e<t.length){const n=t[e];return function(e,t,n){return(0,o.h)(e,{label:n,index:t,type:"pointLabel"})}(this.getContext(),e,n)}}getPointPosition(e,t,n=0){const s=this.getIndexAngle(e)-o.H+n;return{x:Math.cos(s)*t+this.xCenter,y:Math.sin(s)*t+this.yCenter,angle:s}}getPointPositionForValue(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))}getBasePosition(e){return this.getPointPositionForValue(e||0,this.getBaseValue())}getPointLabelPosition(e){const{left:t,top:n,right:o,bottom:s}=this._pointLabelItems[e];return{left:t,top:n,right:o,bottom:s}}drawBackground(){const{backgroundColor:e,grid:{circular:t}}=this.options;if(e){const n=this.ctx;n.save(),n.beginPath(),On(this,this.getDistanceFromCenterForValue(this._endValue),t,this._pointLabels.length),n.closePath(),n.fillStyle=e,n.fill(),n.restore()}}drawGrid(){const e=this.ctx,t=this.options,{angleLines:n,grid:s}=t,r=this._pointLabels.length;let i,a,l;if(t.pointLabels.display&&function(e,t){const{ctx:n,options:{pointLabels:s}}=e;for(let r=t-1;r>=0;r--){const t=s.setContext(e.getPointLabelContext(r)),i=(0,o.O)(t.font),{x:a,y:l,textAlign:c,left:u,top:d,right:h,bottom:p}=e._pointLabelItems[r],{backdropColor:f}=t;if(!(0,o.k)(f)){const e=(0,o.ax)(t.borderRadius),s=(0,o.K)(t.backdropPadding);n.fillStyle=f;const r=u-s.left,i=d-s.top,a=h-u+s.width,l=p-d+s.height;Object.values(e).some((e=>0!==e))?(n.beginPath(),(0,o.av)(n,{x:r,y:i,w:a,h:l,radius:e}),n.fill()):n.fillRect(r,i,a,l)}(0,o.M)(n,e._pointLabels[r],a,l+i.lineHeight/2,i,{color:t.color,textAlign:c,textBaseline:"middle"})}}(this,r),s.display&&this.ticks.forEach(((e,t)=>{0!==t&&(a=this.getDistanceFromCenterForValue(e.value),function(e,t,n,o){const s=e.ctx,r=t.circular,{color:i,lineWidth:a}=t;!r&&!o||!i||!a||n<0||(s.save(),s.strokeStyle=i,s.lineWidth=a,s.setLineDash(t.borderDash),s.lineDashOffset=t.borderDashOffset,s.beginPath(),On(e,n,r,o),s.closePath(),s.stroke(),s.restore())}(this,s.setContext(this.getContext(t-1)),a,r))})),n.display){for(e.save(),i=r-1;i>=0;i--){const o=n.setContext(this.getPointLabelContext(i)),{color:s,lineWidth:r}=o;r&&s&&(e.lineWidth=r,e.strokeStyle=s,e.setLineDash(o.borderDash),e.lineDashOffset=o.borderDashOffset,a=this.getDistanceFromCenterForValue(t.ticks.reverse?this.min:this.max),l=this.getPointPosition(i,a),e.beginPath(),e.moveTo(this.xCenter,this.yCenter),e.lineTo(l.x,l.y),e.stroke())}e.restore()}}drawBorder(){}drawLabels(){const e=this.ctx,t=this.options,n=t.ticks;if(!n.display)return;const s=this.getIndexAngle(0);let r,i;e.save(),e.translate(this.xCenter,this.yCenter),e.rotate(s),e.textAlign="center",e.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&!t.reverse)return;const l=n.setContext(this.getContext(a)),c=(0,o.O)(l.font);if(r=this.getDistanceFromCenterForValue(this.ticks[a].value),l.showLabelBackdrop){e.font=c.string,i=e.measureText(s.label).width,e.fillStyle=l.backdropColor;const t=(0,o.K)(l.backdropPadding);e.fillRect(-i/2-t.left,-r-c.size/2-t.top,i+t.width,c.size+t.height)}(0,o.M)(e,s.label,0,-r,c,{color:l.color})})),e.restore()}drawTitle(){}}Cn.id="radialLinear",Cn.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:F.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:e=>e,padding:5,centerPointLabels:!1}},Cn.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Cn.descriptors={angleLines:{_fallback:"grid"}};const En={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Tn=Object.keys(En);function Mn(e,t){return e-t}function An(e,t){if((0,o.k)(t))return null;const n=e._adapter,{parser:s,round:r,isoWeekday:i}=e._parseOpts;let a=t;return"function"==typeof s&&(a=s(a)),(0,o.g)(a)||(a="string"==typeof s?n.parse(a,s):n.parse(a)),null===a?null:(r&&(a="week"!==r||!(0,o.x)(i)&&!0!==i?n.startOf(a,r):n.startOf(a,"isoWeek",i)),+a)}function Rn(e,t,n,o){const s=Tn.length;for(let r=Tn.indexOf(e);r<s-1;++r){const e=En[Tn[r]],s=e.steps?e.steps:Number.MAX_SAFE_INTEGER;if(e.common&&Math.ceil((n-t)/(s*e.size))<=o)return Tn[r]}return Tn[s-1]}function Ln(e,t,n){if(n){if(n.length){const{lo:s,hi:r}=(0,o.aO)(n,t);e[n[s]>=t?n[s]:n[r]]=!0}}else e[t]=!0}function Dn(e,t,n){const o=[],s={},r=t.length;let i,a;for(i=0;i<r;++i)a=t[i],s[a]=i,o.push({value:a,major:!1});return 0!==r&&n?function(e,t,n,o){const s=e._adapter,r=+s.startOf(t[0].value,o),i=t[t.length-1].value;let a,l;for(a=r;a<=i;a=+s.add(a,1,o))l=n[a],l>=0&&(t[l].major=!0);return t}(e,o,s,n):o}class Bn extends Y{constructor(e){super(e),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(e,t){const n=e.time||(e.time={}),s=this._adapter=new ee._date(e.adapters.date);s.init(t),(0,o.ac)(n.displayFormats,s.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(e),this._normalized=t.normalized}parse(e,t){return void 0===e?null:An(this,e)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const e=this.options,t=this._adapter,n=e.time.unit||"day";let{min:s,max:r,minDefined:i,maxDefined:a}=this.getUserBounds();function l(e){i||isNaN(e.min)||(s=Math.min(s,e.min)),a||isNaN(e.max)||(r=Math.max(r,e.max))}i&&a||(l(this._getLabelBounds()),"ticks"===e.bounds&&"labels"===e.ticks.source||l(this.getMinMax(!1))),s=(0,o.g)(s)&&!isNaN(s)?s:+t.startOf(Date.now(),n),r=(0,o.g)(r)&&!isNaN(r)?r:+t.endOf(Date.now(),n)+1,this.min=Math.min(s,r-1),this.max=Math.max(s+1,r)}_getLabelBounds(){const e=this.getLabelTimestamps();let t=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return e.length&&(t=e[0],n=e[e.length-1]),{min:t,max:n}}buildTicks(){const e=this.options,t=e.time,n=e.ticks,s="labels"===n.source?this.getLabelTimestamps():this._generate();"ticks"===e.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const r=this.min,i=this.max,a=(0,o.aN)(s,r,i);return this._unit=t.unit||(n.autoSkip?Rn(t.minUnit,this.min,this.max,this._getLabelCapacity(r)):function(e,t,n,o,s){for(let r=Tn.length-1;r>=Tn.indexOf(n);r--){const n=Tn[r];if(En[n].common&&e._adapter.diff(s,o,n)>=t-1)return n}return Tn[n?Tn.indexOf(n):0]}(this,a.length,t.minUnit,this.min,this.max)),this._majorUnit=n.major.enabled&&"year"!==this._unit?function(e){for(let t=Tn.indexOf(e)+1,n=Tn.length;t<n;++t)if(En[Tn[t]].common)return Tn[t]}(this._unit):void 0,this.initOffsets(s),e.reverse&&a.reverse(),Dn(this,a,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((e=>+e.value)))}initOffsets(e){let t,n,s=0,r=0;this.options.offset&&e.length&&(t=this.getDecimalForValue(e[0]),s=1===e.length?1-t:(this.getDecimalForValue(e[1])-t)/2,n=this.getDecimalForValue(e[e.length-1]),r=1===e.length?n:(n-this.getDecimalForValue(e[e.length-2]))/2);const i=e.length<3?.5:.25;s=(0,o.E)(s,0,i),r=(0,o.E)(r,0,i),this._offsets={start:s,end:r,factor:1/(s+1+r)}}_generate(){const e=this._adapter,t=this.min,n=this.max,s=this.options,r=s.time,i=r.unit||Rn(r.minUnit,t,n,this._getLabelCapacity(t)),a=(0,o.v)(r.stepSize,1),l="week"===i&&r.isoWeekday,c=(0,o.x)(l)||!0===l,u={};let d,h,p=t;if(c&&(p=+e.startOf(p,"isoWeek",l)),p=+e.startOf(p,c?"day":i),e.diff(n,t,i)>1e5*a)throw new Error(t+" and "+n+" are too far apart with stepSize of "+a+" "+i);const f="data"===s.ticks.source&&this.getDataTimestamps();for(d=p,h=0;d<n;d=+e.add(d,a,i),h++)Ln(u,d,f);return d!==n&&"ticks"!==s.bounds&&1!==h||Ln(u,d,f),Object.keys(u).sort(((e,t)=>e-t)).map((e=>+e))}getLabelForValue(e){const t=this._adapter,n=this.options.time;return n.tooltipFormat?t.format(e,n.tooltipFormat):t.format(e,n.displayFormats.datetime)}_tickFormatFunction(e,t,n,s){const r=this.options,i=r.time.displayFormats,a=this._unit,l=this._majorUnit,c=a&&i[a],u=l&&i[l],d=n[t],h=l&&u&&d&&d.major,p=this._adapter.format(e,s||(h?u:c)),f=r.ticks.callback;return f?(0,o.C)(f,[p,t,n],this):p}generateTickLabels(e){let t,n,o;for(t=0,n=e.length;t<n;++t)o=e[t],o.label=this._tickFormatFunction(o.value,t,e)}getDecimalForValue(e){return null===e?NaN:(e-this.min)/(this.max-this.min)}getPixelForValue(e){const t=this._offsets,n=this.getDecimalForValue(e);return this.getPixelForDecimal((t.start+n)*t.factor)}getValueForPixel(e){const t=this._offsets,n=this.getDecimalForPixel(e)/t.factor-t.end;return this.min+n*(this.max-this.min)}_getLabelSize(e){const t=this.options.ticks,n=this.ctx.measureText(e).width,s=(0,o.t)(this.isHorizontal()?t.maxRotation:t.minRotation),r=Math.cos(s),i=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:n*r+a*i,h:n*i+a*r}}_getLabelCapacity(e){const t=this.options.time,n=t.displayFormats,o=n[t.unit]||n.millisecond,s=this._tickFormatFunction(e,0,Dn(this,[e],this._majorUnit),o),r=this._getLabelSize(s),i=Math.floor(this.isHorizontal()?this.width/r.w:this.height/r.h)-1;return i>0?i:1}getDataTimestamps(){let e,t,n=this._cache.data||[];if(n.length)return n;const o=this.getMatchingVisibleMetas();if(this._normalized&&o.length)return this._cache.data=o[0].controller.getAllParsedValues(this);for(e=0,t=o.length;e<t;++e)n=n.concat(o[e].controller.getAllParsedValues(this));return this._cache.data=this.normalize(n)}getLabelTimestamps(){const e=this._cache.labels||[];let t,n;if(e.length)return e;const o=this.getLabels();for(t=0,n=o.length;t<n;++t)e.push(An(this,o[t]));return this._cache.labels=this._normalized?e:this.normalize(e)}normalize(e){return(0,o._)(e.sort(Mn))}}function In(e,t,n){let s,r,i,a,l=0,c=e.length-1;n?(t>=e[l].pos&&t<=e[c].pos&&({lo:l,hi:c}=(0,o.Z)(e,"pos",t)),({pos:s,time:i}=e[l]),({pos:r,time:a}=e[c])):(t>=e[l].time&&t<=e[c].time&&({lo:l,hi:c}=(0,o.Z)(e,"time",t)),({time:s,pos:i}=e[l]),({time:r,pos:a}=e[c]));const u=r-s;return u?i+(a-i)*(t-s)/u:i}Bn.id="time",Bn.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Nn extends Bn{constructor(e){super(e),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const e=this._getTimestampsForTable(),t=this._table=this.buildLookupTable(e);this._minPos=In(t,this.min),this._tableRange=In(t,this.max)-this._minPos,super.initOffsets(e)}buildLookupTable(e){const{min:t,max:n}=this,o=[],s=[];let r,i,a,l,c;for(r=0,i=e.length;r<i;++r)l=e[r],l>=t&&l<=n&&o.push(l);if(o.length<2)return[{time:t,pos:0},{time:n,pos:1}];for(r=0,i=o.length;r<i;++r)c=o[r+1],a=o[r-1],l=o[r],Math.round((c+a)/2)!==l&&s.push({time:l,pos:r/(i-1)});return s}_getTimestampsForTable(){let e=this._cache.all||[];if(e.length)return e;const t=this.getDataTimestamps(),n=this.getLabelTimestamps();return e=t.length&&n.length?this.normalize(t.concat(n)):t.length?t:n,e=this._cache.all=e,e}getDecimalForValue(e){return(In(this._table,e)-this._minPos)/this._tableRange}getValueForPixel(e){const t=this._offsets,n=this.getDecimalForPixel(e)/t.factor-t.end;return In(this._table,n*this._tableRange+this._minPos,!0)}}Nn.id="timeseries",Nn.defaults=Bn.defaults;var Fn=Object.freeze({__proto__:null,CategoryScale:gn,LinearScale:bn,LogarithmicScale:xn,RadialLinearScale:Cn,TimeScale:Bn,TimeSeriesScale:Nn});const Vn=[X,Ct,mn,Fn]},"./node_modules/chart.js/dist/chunks/helpers.segment.mjs":(e,t,n)=>{"use strict";function o(){}n.r(t),n.d(t,{$:()=>vt,A:()=>z,B:()=>c,C:()=>p,D:()=>Lt,E:()=>te,F:()=>q,G:()=>dt,H:()=>B,I:()=>ne,J:()=>pt,K:()=>Mt,L:()=>yt,M:()=>wt,N:()=>bt,O:()=>At,P:()=>M,Q:()=>f,R:()=>ge,S:()=>ve,T:()=>A,U:()=>rt,V:()=>b,W:()=>P,X:()=>dn,Y:()=>ie,Z:()=>re,_:()=>de,a:()=>Rt,a$:()=>Ot,a0:()=>J,a1:()=>pn,a2:()=>sn,a3:()=>gn,a4:()=>fe,a5:()=>mn,a6:()=>on,a7:()=>it,a8:()=>C,a9:()=>It,aA:()=>wn,aB:()=>Sn,aC:()=>ye,aD:()=>kn,aE:()=>gt,aF:()=>o,aG:()=>X,aH:()=>G,aI:()=>$,aJ:()=>W,aK:()=>U,aL:()=>K,aM:()=>ht,aN:()=>ae,aO:()=>se,aP:()=>nt,aQ:()=>st,aR:()=>g,aS:()=>y,aT:()=>x,aU:()=>w,aV:()=>j,aW:()=>ut,aX:()=>Zt,aY:()=>en,aZ:()=>ln,a_:()=>he,aa:()=>Bt,ab:()=>Nt,ac:()=>_,ad:()=>s,ae:()=>me,af:()=>fn,ag:()=>ft,ah:()=>E,ai:()=>m,aj:()=>T,ak:()=>oe,al:()=>Ct,am:()=>nn,an:()=>En,ao:()=>Cn,ap:()=>yn,aq:()=>bn,ar:()=>vn,as:()=>_t,at:()=>xt,au:()=>mt,av:()=>kt,aw:()=>Et,ax:()=>Tt,ay:()=>On,az:()=>Z,b:()=>i,b0:()=>R,b1:()=>L,b2:()=>D,b3:()=>I,b4:()=>N,b5:()=>Q,c:()=>ot,d:()=>ct,e:()=>ke,f:()=>k,g:()=>l,h:()=>Dt,i:()=>a,j:()=>O,k:()=>r,l:()=>ce,m:()=>d,n:()=>h,o:()=>xn,p:()=>ee,q:()=>be,r:()=>pe,s:()=>V,t:()=>Y,u:()=>ue,v:()=>u,w:()=>_e,x:()=>H,y:()=>Kt,z:()=>F});const s=function(){let e=0;return function(){return e++}}();function r(e){return null==e}function i(e){if(Array.isArray&&Array.isArray(e))return!0;const t=Object.prototype.toString.call(e);return"[object"===t.slice(0,7)&&"Array]"===t.slice(-6)}function a(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)}const l=e=>("number"==typeof e||e instanceof Number)&&isFinite(+e);function c(e,t){return l(e)?e:t}function u(e,t){return void 0===e?t:e}const d=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100:e/t,h=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100*t:+e;function p(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)}function f(e,t,n,o){let s,r,l;if(i(e))if(r=e.length,o)for(s=r-1;s>=0;s--)t.call(n,e[s],s);else for(s=0;s<r;s++)t.call(n,e[s],s);else if(a(e))for(l=Object.keys(e),r=l.length,s=0;s<r;s++)t.call(n,e[l[s]],l[s])}function m(e,t){let n,o,s,r;if(!e||!t||e.length!==t.length)return!1;for(n=0,o=e.length;n<o;++n)if(s=e[n],r=t[n],s.datasetIndex!==r.datasetIndex||s.index!==r.index)return!1;return!0}function g(e){if(i(e))return e.map(g);if(a(e)){const t=Object.create(null),n=Object.keys(e),o=n.length;let s=0;for(;s<o;++s)t[n[s]]=g(e[n[s]]);return t}return e}function v(e){return-1===["__proto__","prototype","constructor"].indexOf(e)}function y(e,t,n,o){if(!v(e))return;const s=t[e],r=n[e];a(s)&&a(r)?b(s,r,o):t[e]=g(r)}function b(e,t,n){const o=i(t)?t:[t],s=o.length;if(!a(e))return e;const r=(n=n||{}).merger||y;for(let i=0;i<s;++i){if(!a(t=o[i]))continue;const s=Object.keys(t);for(let o=0,i=s.length;o<i;++o)r(s[o],e,t,n)}return e}function _(e,t){return b(e,t,{merger:x})}function x(e,t,n){if(!v(e))return;const o=t[e],s=n[e];a(o)&&a(s)?_(o,s):Object.prototype.hasOwnProperty.call(t,e)||(t[e]=g(s))}function w(e,t,n,o){void 0!==t&&console.warn(e+': "'+n+'" is deprecated. Please use "'+o+'" instead')}const S={"":e=>e,x:e=>e.x,y:e=>e.y};function k(e,t){const n=S[t]||(S[t]=function(e){const t=j(e);return e=>{for(const n of t){if(""===n)break;e=e&&e[n]}return e}}(t));return n(e)}function j(e){const t=e.split("."),n=[];let o="";for(const e of t)o+=e,o.endsWith("\\")?o=o.slice(0,-1)+".":(n.push(o),o="");return n}function P(e){return e.charAt(0).toUpperCase()+e.slice(1)}const O=e=>void 0!==e,C=e=>"function"==typeof e,E=(e,t)=>{if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0};function T(e){return"mouseup"===e.type||"click"===e.type||"contextmenu"===e.type}const M=Math.PI,A=2*M,R=A+M,L=Number.POSITIVE_INFINITY,D=M/180,B=M/2,I=M/4,N=2*M/3,F=Math.log10,V=Math.sign;function $(e){const t=Math.round(e);e=U(e,t,e/1e3)?t:e;const n=Math.pow(10,Math.floor(F(e))),o=e/n;return(o<=1?1:o<=2?2:o<=5?5:10)*n}function z(e){const t=[],n=Math.sqrt(e);let o;for(o=1;o<n;o++)e%o==0&&(t.push(o),t.push(e/o));return n===(0|n)&&t.push(n),t.sort(((e,t)=>e-t)).pop(),t}function H(e){return!isNaN(parseFloat(e))&&isFinite(e)}function U(e,t,n){return Math.abs(e-t)<n}function W(e,t){const n=Math.round(e);return n-t<=e&&n+t>=e}function G(e,t,n){let o,s,r;for(o=0,s=e.length;o<s;o++)r=e[o][n],isNaN(r)||(t.min=Math.min(t.min,r),t.max=Math.max(t.max,r))}function Y(e){return e*(M/180)}function q(e){return e*(180/M)}function K(e){if(!l(e))return;let t=1,n=0;for(;Math.round(e*t)/t!==e;)t*=10,n++;return n}function J(e,t){const n=t.x-e.x,o=t.y-e.y,s=Math.sqrt(n*n+o*o);let r=Math.atan2(o,n);return r<-.5*M&&(r+=A),{angle:r,distance:s}}function X(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function Q(e,t){return(e-t+R)%A-M}function Z(e){return(e%A+A)%A}function ee(e,t,n,o){const s=Z(e),r=Z(t),i=Z(n),a=Z(r-s),l=Z(i-s),c=Z(s-r),u=Z(s-i);return s===r||s===i||o&&r===i||a>l&&c<u}function te(e,t,n){return Math.max(t,Math.min(n,e))}function ne(e){return te(e,-32768,32767)}function oe(e,t,n,o=1e-6){return e>=Math.min(t,n)-o&&e<=Math.max(t,n)+o}function se(e,t,n){n=n||(n=>e[n]<t);let o,s=e.length-1,r=0;for(;s-r>1;)o=r+s>>1,n(o)?r=o:s=o;return{lo:r,hi:s}}const re=(e,t,n,o)=>se(e,n,o?o=>e[o][t]<=n:o=>e[o][t]<n),ie=(e,t,n)=>se(e,n,(o=>e[o][t]>=n));function ae(e,t,n){let o=0,s=e.length;for(;o<s&&e[o]<t;)o++;for(;s>o&&e[s-1]>n;)s--;return o>0||s<e.length?e.slice(o,s):e}const le=["push","pop","shift","splice","unshift"];function ce(e,t){e._chartjs?e._chartjs.listeners.push(t):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),le.forEach((t=>{const n="_onData"+P(t),o=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value(...t){const s=o.apply(this,t);return e._chartjs.listeners.forEach((e=>{"function"==typeof e[n]&&e[n](...t)})),s}})})))}function ue(e,t){const n=e._chartjs;if(!n)return;const o=n.listeners,s=o.indexOf(t);-1!==s&&o.splice(s,1),o.length>0||(le.forEach((t=>{delete e[t]})),delete e._chartjs)}function de(e){const t=new Set;let n,o;for(n=0,o=e.length;n<o;++n)t.add(e[n]);return t.size===o?e:Array.from(t)}function he(e,t,n){return t+" "+e+"px "+n}const pe="undefined"==typeof window?function(e){return e()}:window.requestAnimationFrame;function fe(e,t,n){const o=n||(e=>Array.prototype.slice.call(e));let s=!1,r=[];return function(...n){r=o(n),s||(s=!0,pe.call(window,(()=>{s=!1,e.apply(t,r)})))}}function me(e,t){let n;return function(...o){return t?(clearTimeout(n),n=setTimeout(e,t,o)):e.apply(this,o),t}}const ge=e=>"start"===e?"left":"end"===e?"right":"center",ve=(e,t,n)=>"start"===e?t:"end"===e?n:(t+n)/2,ye=(e,t,n,o)=>e===(o?"left":"right")?n:"center"===e?(t+n)/2:t;function be(e,t,n){const o=t.length;let s=0,r=o;if(e._sorted){const{iScale:i,_parsed:a}=e,l=i.axis,{min:c,max:u,minDefined:d,maxDefined:h}=i.getUserBounds();d&&(s=te(Math.min(re(a,i.axis,c).lo,n?o:re(t,l,i.getPixelForValue(c)).lo),0,o-1)),r=h?te(Math.max(re(a,i.axis,u,!0).hi+1,n?0:re(t,l,i.getPixelForValue(u),!0).hi+1),s,o)-s:o-s}return{start:s,count:r}}function _e(e){const{xScale:t,yScale:n,_scaleRanges:o}=e,s={xmin:t.min,xmax:t.max,ymin:n.min,ymax:n.max};if(!o)return e._scaleRanges=s,!0;const r=o.xmin!==t.min||o.xmax!==t.max||o.ymin!==n.min||o.ymax!==n.max;return Object.assign(o,s),r}const xe=e=>0===e||1===e,we=(e,t,n)=>-Math.pow(2,10*(e-=1))*Math.sin((e-t)*A/n),Se=(e,t,n)=>Math.pow(2,-10*e)*Math.sin((e-t)*A/n)+1,ke={linear:e=>e,easeInQuad:e=>e*e,easeOutQuad:e=>-e*(e-2),easeInOutQuad:e=>(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1),easeInCubic:e=>e*e*e,easeOutCubic:e=>(e-=1)*e*e+1,easeInOutCubic:e=>(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2),easeInQuart:e=>e*e*e*e,easeOutQuart:e=>-((e-=1)*e*e*e-1),easeInOutQuart:e=>(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2),easeInQuint:e=>e*e*e*e*e,easeOutQuint:e=>(e-=1)*e*e*e*e+1,easeInOutQuint:e=>(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2),easeInSine:e=>1-Math.cos(e*B),easeOutSine:e=>Math.sin(e*B),easeInOutSine:e=>-.5*(Math.cos(M*e)-1),easeInExpo:e=>0===e?0:Math.pow(2,10*(e-1)),easeOutExpo:e=>1===e?1:1-Math.pow(2,-10*e),easeInOutExpo:e=>xe(e)?e:e<.5?.5*Math.pow(2,10*(2*e-1)):.5*(2-Math.pow(2,-10*(2*e-1))),easeInCirc:e=>e>=1?e:-(Math.sqrt(1-e*e)-1),easeOutCirc:e=>Math.sqrt(1-(e-=1)*e),easeInOutCirc:e=>(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1),easeInElastic:e=>xe(e)?e:we(e,.075,.3),easeOutElastic:e=>xe(e)?e:Se(e,.075,.3),easeInOutElastic(e){const t=.1125;return xe(e)?e:e<.5?.5*we(2*e,t,.45):.5+.5*Se(2*e-1,t,.45)},easeInBack(e){const t=1.70158;return e*e*((t+1)*e-t)},easeOutBack(e){const t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack(e){let t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:e=>1-ke.easeOutBounce(1-e),easeOutBounce(e){const t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375},easeInOutBounce:e=>e<.5?.5*ke.easeInBounce(2*e):.5*ke.easeOutBounce(2*e-1)+.5};function je(e){return e+.5|0}const Pe=(e,t,n)=>Math.max(Math.min(e,n),t);function Oe(e){return Pe(je(2.55*e),0,255)}function Ce(e){return Pe(je(255*e),0,255)}function Ee(e){return Pe(je(e/2.55)/100,0,1)}function Te(e){return Pe(je(100*e),0,100)}const Me={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},Ae=[..."0123456789ABCDEF"],Re=e=>Ae[15&e],Le=e=>Ae[(240&e)>>4]+Ae[15&e],De=e=>(240&e)>>4==(15&e);const Be=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Ie(e,t,n){const o=t*Math.min(n,1-n),s=(t,s=(t+e/30)%12)=>n-o*Math.max(Math.min(s-3,9-s,1),-1);return[s(0),s(8),s(4)]}function Ne(e,t,n){const o=(o,s=(o+e/60)%6)=>n-n*t*Math.max(Math.min(s,4-s,1),0);return[o(5),o(3),o(1)]}function Fe(e,t,n){const o=Ie(e,1,.5);let s;for(t+n>1&&(s=1/(t+n),t*=s,n*=s),s=0;s<3;s++)o[s]*=1-t-n,o[s]+=t;return o}function Ve(e){const t=e.r/255,n=e.g/255,o=e.b/255,s=Math.max(t,n,o),r=Math.min(t,n,o),i=(s+r)/2;let a,l,c;return s!==r&&(c=s-r,l=i>.5?c/(2-s-r):c/(s+r),a=function(e,t,n,o,s){return e===s?(t-n)/o+(t<n?6:0):t===s?(n-e)/o+2:(e-t)/o+4}(t,n,o,c,s),a=60*a+.5),[0|a,l||0,i]}function $e(e,t,n,o){return(Array.isArray(t)?e(t[0],t[1],t[2]):e(t,n,o)).map(Ce)}function ze(e,t,n){return $e(Ie,e,t,n)}function He(e){return(e%360+360)%360}const Ue={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},We={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Ge;const Ye=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,qe=e=>e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055,Ke=e=>e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4);function Je(e,t,n){if(e){let o=Ve(e);o[t]=Math.max(0,Math.min(o[t]+o[t]*n,0===t?360:1)),o=ze(o),e.r=o[0],e.g=o[1],e.b=o[2]}}function Xe(e,t){return e?Object.assign(t||{},e):e}function Qe(e){var t={r:0,g:0,b:0,a:255};return Array.isArray(e)?e.length>=3&&(t={r:e[0],g:e[1],b:e[2],a:255},e.length>3&&(t.a=Ce(e[3]))):(t=Xe(e,{r:0,g:0,b:0,a:1})).a=Ce(t.a),t}function Ze(e){return"r"===e.charAt(0)?function(e){const t=Ye.exec(e);let n,o,s,r=255;if(t){if(t[7]!==n){const e=+t[7];r=t[8]?Oe(e):Pe(255*e,0,255)}return n=+t[1],o=+t[3],s=+t[5],n=255&(t[2]?Oe(n):Pe(n,0,255)),o=255&(t[4]?Oe(o):Pe(o,0,255)),s=255&(t[6]?Oe(s):Pe(s,0,255)),{r:n,g:o,b:s,a:r}}}(e):function(e){const t=Be.exec(e);let n,o=255;if(!t)return;t[5]!==n&&(o=t[6]?Oe(+t[5]):Ce(+t[5]));const s=He(+t[2]),r=+t[3]/100,i=+t[4]/100;return n="hwb"===t[1]?function(e,t,n){return $e(Fe,e,t,n)}(s,r,i):"hsv"===t[1]?function(e,t,n){return $e(Ne,e,t,n)}(s,r,i):ze(s,r,i),{r:n[0],g:n[1],b:n[2],a:o}}(e)}class et{constructor(e){if(e instanceof et)return e;const t=typeof e;let n;var o,s,r;"object"===t?n=Qe(e):"string"===t&&(r=(o=e).length,"#"===o[0]&&(4===r||5===r?s={r:255&17*Me[o[1]],g:255&17*Me[o[2]],b:255&17*Me[o[3]],a:5===r?17*Me[o[4]]:255}:7!==r&&9!==r||(s={r:Me[o[1]]<<4|Me[o[2]],g:Me[o[3]]<<4|Me[o[4]],b:Me[o[5]]<<4|Me[o[6]],a:9===r?Me[o[7]]<<4|Me[o[8]]:255})),n=s||function(e){Ge||(Ge=function(){const e={},t=Object.keys(We),n=Object.keys(Ue);let o,s,r,i,a;for(o=0;o<t.length;o++){for(i=a=t[o],s=0;s<n.length;s++)r=n[s],a=a.replace(r,Ue[r]);r=parseInt(We[i],16),e[a]=[r>>16&255,r>>8&255,255&r]}return e}(),Ge.transparent=[0,0,0,0]);const t=Ge[e.toLowerCase()];return t&&{r:t[0],g:t[1],b:t[2],a:4===t.length?t[3]:255}}(e)||Ze(e)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var e=Xe(this._rgb);return e&&(e.a=Ee(e.a)),e}set rgb(e){this._rgb=Qe(e)}rgbString(){return this._valid?(e=this._rgb)&&(e.a<255?`rgba(${e.r}, ${e.g}, ${e.b}, ${Ee(e.a)})`:`rgb(${e.r}, ${e.g}, ${e.b})`):void 0;var e}hexString(){return this._valid?(e=this._rgb,t=(e=>De(e.r)&&De(e.g)&&De(e.b)&&De(e.a))(e)?Re:Le,e?"#"+t(e.r)+t(e.g)+t(e.b)+((e,t)=>e<255?t(e):"")(e.a,t):void 0):void 0;var e,t}hslString(){return this._valid?function(e){if(!e)return;const t=Ve(e),n=t[0],o=Te(t[1]),s=Te(t[2]);return e.a<255?`hsla(${n}, ${o}%, ${s}%, ${Ee(e.a)})`:`hsl(${n}, ${o}%, ${s}%)`}(this._rgb):void 0}mix(e,t){if(e){const n=this.rgb,o=e.rgb;let s;const r=t===s?.5:t,i=2*r-1,a=n.a-o.a,l=((i*a==-1?i:(i+a)/(1+i*a))+1)/2;s=1-l,n.r=255&l*n.r+s*o.r+.5,n.g=255&l*n.g+s*o.g+.5,n.b=255&l*n.b+s*o.b+.5,n.a=r*n.a+(1-r)*o.a,this.rgb=n}return this}interpolate(e,t){return e&&(this._rgb=function(e,t,n){const o=Ke(Ee(e.r)),s=Ke(Ee(e.g)),r=Ke(Ee(e.b));return{r:Ce(qe(o+n*(Ke(Ee(t.r))-o))),g:Ce(qe(s+n*(Ke(Ee(t.g))-s))),b:Ce(qe(r+n*(Ke(Ee(t.b))-r))),a:e.a+n*(t.a-e.a)}}(this._rgb,e._rgb,t)),this}clone(){return new et(this.rgb)}alpha(e){return this._rgb.a=Ce(e),this}clearer(e){return this._rgb.a*=1-e,this}greyscale(){const e=this._rgb,t=je(.3*e.r+.59*e.g+.11*e.b);return e.r=e.g=e.b=t,this}opaquer(e){return this._rgb.a*=1+e,this}negate(){const e=this._rgb;return e.r=255-e.r,e.g=255-e.g,e.b=255-e.b,this}lighten(e){return Je(this._rgb,2,e),this}darken(e){return Je(this._rgb,2,-e),this}saturate(e){return Je(this._rgb,1,e),this}desaturate(e){return Je(this._rgb,1,-e),this}rotate(e){return function(e,t){var n=Ve(e);n[0]=He(n[0]+t),n=ze(n),e.r=n[0],e.g=n[1],e.b=n[2]}(this._rgb,e),this}}function tt(e){return new et(e)}function nt(e){if(e&&"object"==typeof e){const t=e.toString();return"[object CanvasPattern]"===t||"[object CanvasGradient]"===t}return!1}function ot(e){return nt(e)?e:tt(e)}function st(e){return nt(e)?e:tt(e).saturate(.5).darken(.1).hexString()}const rt=Object.create(null),it=Object.create(null);function at(e,t){if(!t)return e;const n=t.split(".");for(let t=0,o=n.length;t<o;++t){const o=n[t];e=e[o]||(e[o]=Object.create(null))}return e}function lt(e,t,n){return"string"==typeof t?b(at(e,t),n):b(at(e,""),t)}var ct=new class{constructor(e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=e=>e.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(e,t)=>st(t.backgroundColor),this.hoverBorderColor=(e,t)=>st(t.borderColor),this.hoverColor=(e,t)=>st(t.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(e)}set(e,t){return lt(this,e,t)}get(e){return at(this,e)}describe(e,t){return lt(it,e,t)}override(e,t){return lt(rt,e,t)}route(e,t,n,o){const s=at(this,e),r=at(this,n),i="_"+t;Object.defineProperties(s,{[i]:{value:s[t],writable:!0},[t]:{enumerable:!0,get(){const e=this[i],t=r[o];return a(e)?Object.assign({},t,e):u(e,t)},set(e){this[i]=e}}})}}({_scriptable:e=>!e.startsWith("on"),_indexable:e=>"events"!==e,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function ut(e){return!e||r(e.size)||r(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}function dt(e,t,n,o,s){let r=t[s];return r||(r=t[s]=e.measureText(s).width,n.push(s)),r>o&&(o=r),o}function ht(e,t,n,o){let s=(o=o||{}).data=o.data||{},r=o.garbageCollect=o.garbageCollect||[];o.font!==t&&(s=o.data={},r=o.garbageCollect=[],o.font=t),e.save(),e.font=t;let a=0;const l=n.length;let c,u,d,h,p;for(c=0;c<l;c++)if(h=n[c],null!=h&&!0!==i(h))a=dt(e,s,r,a,h);else if(i(h))for(u=0,d=h.length;u<d;u++)p=h[u],null==p||i(p)||(a=dt(e,s,r,a,p));e.restore();const f=r.length/2;if(f>n.length){for(c=0;c<f;c++)delete s[r[c]];r.splice(0,f)}return a}function pt(e,t,n){const o=e.currentDevicePixelRatio,s=0!==n?Math.max(n/2,.5):0;return Math.round((t-s)*o)/o+s}function ft(e,t){(t=t||e.getContext("2d")).save(),t.resetTransform(),t.clearRect(0,0,e.width,e.height),t.restore()}function mt(e,t,n,o){gt(e,t,n,o,null)}function gt(e,t,n,o,s){let r,i,a,l,c,u;const d=t.pointStyle,h=t.rotation,p=t.radius;let f=(h||0)*D;if(d&&"object"==typeof d&&(r=d.toString(),"[object HTMLImageElement]"===r||"[object HTMLCanvasElement]"===r))return e.save(),e.translate(n,o),e.rotate(f),e.drawImage(d,-d.width/2,-d.height/2,d.width,d.height),void e.restore();if(!(isNaN(p)||p<=0)){switch(e.beginPath(),d){default:s?e.ellipse(n,o,s/2,p,0,0,A):e.arc(n,o,p,0,A),e.closePath();break;case"triangle":e.moveTo(n+Math.sin(f)*p,o-Math.cos(f)*p),f+=N,e.lineTo(n+Math.sin(f)*p,o-Math.cos(f)*p),f+=N,e.lineTo(n+Math.sin(f)*p,o-Math.cos(f)*p),e.closePath();break;case"rectRounded":c=.516*p,l=p-c,i=Math.cos(f+I)*l,a=Math.sin(f+I)*l,e.arc(n-i,o-a,c,f-M,f-B),e.arc(n+a,o-i,c,f-B,f),e.arc(n+i,o+a,c,f,f+B),e.arc(n-a,o+i,c,f+B,f+M),e.closePath();break;case"rect":if(!h){l=Math.SQRT1_2*p,u=s?s/2:l,e.rect(n-u,o-l,2*u,2*l);break}f+=I;case"rectRot":i=Math.cos(f)*p,a=Math.sin(f)*p,e.moveTo(n-i,o-a),e.lineTo(n+a,o-i),e.lineTo(n+i,o+a),e.lineTo(n-a,o+i),e.closePath();break;case"crossRot":f+=I;case"cross":i=Math.cos(f)*p,a=Math.sin(f)*p,e.moveTo(n-i,o-a),e.lineTo(n+i,o+a),e.moveTo(n+a,o-i),e.lineTo(n-a,o+i);break;case"star":i=Math.cos(f)*p,a=Math.sin(f)*p,e.moveTo(n-i,o-a),e.lineTo(n+i,o+a),e.moveTo(n+a,o-i),e.lineTo(n-a,o+i),f+=I,i=Math.cos(f)*p,a=Math.sin(f)*p,e.moveTo(n-i,o-a),e.lineTo(n+i,o+a),e.moveTo(n+a,o-i),e.lineTo(n-a,o+i);break;case"line":i=s?s/2:Math.cos(f)*p,a=Math.sin(f)*p,e.moveTo(n-i,o-a),e.lineTo(n+i,o+a);break;case"dash":e.moveTo(n,o),e.lineTo(n+Math.cos(f)*p,o+Math.sin(f)*p)}e.fill(),t.borderWidth>0&&e.stroke()}}function vt(e,t,n){return n=n||.5,!t||e&&e.x>t.left-n&&e.x<t.right+n&&e.y>t.top-n&&e.y<t.bottom+n}function yt(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()}function bt(e){e.restore()}function _t(e,t,n,o,s){if(!t)return e.lineTo(n.x,n.y);if("middle"===s){const o=(t.x+n.x)/2;e.lineTo(o,t.y),e.lineTo(o,n.y)}else"after"===s!=!!o?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y);e.lineTo(n.x,n.y)}function xt(e,t,n,o){if(!t)return e.lineTo(n.x,n.y);e.bezierCurveTo(o?t.cp1x:t.cp2x,o?t.cp1y:t.cp2y,o?n.cp2x:n.cp1x,o?n.cp2y:n.cp1y,n.x,n.y)}function wt(e,t,n,o,s,a={}){const l=i(t)?t:[t],c=a.strokeWidth>0&&""!==a.strokeColor;let u,d;for(e.save(),e.font=s.string,function(e,t){t.translation&&e.translate(t.translation[0],t.translation[1]),r(t.rotation)||e.rotate(t.rotation),t.color&&(e.fillStyle=t.color),t.textAlign&&(e.textAlign=t.textAlign),t.textBaseline&&(e.textBaseline=t.textBaseline)}(e,a),u=0;u<l.length;++u)d=l[u],c&&(a.strokeColor&&(e.strokeStyle=a.strokeColor),r(a.strokeWidth)||(e.lineWidth=a.strokeWidth),e.strokeText(d,n,o,a.maxWidth)),e.fillText(d,n,o,a.maxWidth),St(e,n,o,d,a),o+=s.lineHeight;e.restore()}function St(e,t,n,o,s){if(s.strikethrough||s.underline){const r=e.measureText(o),i=t-r.actualBoundingBoxLeft,a=t+r.actualBoundingBoxRight,l=n-r.actualBoundingBoxAscent,c=n+r.actualBoundingBoxDescent,u=s.strikethrough?(l+c)/2:c;e.strokeStyle=e.fillStyle,e.beginPath(),e.lineWidth=s.decorationWidth||2,e.moveTo(i,u),e.lineTo(a,u),e.stroke()}}function kt(e,t){const{x:n,y:o,w:s,h:r,radius:i}=t;e.arc(n+i.topLeft,o+i.topLeft,i.topLeft,-B,M,!0),e.lineTo(n,o+r-i.bottomLeft),e.arc(n+i.bottomLeft,o+r-i.bottomLeft,i.bottomLeft,M,B,!0),e.lineTo(n+s-i.bottomRight,o+r),e.arc(n+s-i.bottomRight,o+r-i.bottomRight,i.bottomRight,B,0,!0),e.lineTo(n+s,o+i.topRight),e.arc(n+s-i.topRight,o+i.topRight,i.topRight,0,-B,!0),e.lineTo(n+i.topLeft,o)}const jt=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),Pt=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function Ot(e,t){const n=(""+e).match(jt);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e}function Ct(e,t){const n={},o=a(t),s=o?Object.keys(t):t,r=a(e)?o?n=>u(e[n],e[t[n]]):t=>e[t]:()=>e;for(const e of s)n[e]=+r(e)||0;return n}function Et(e){return Ct(e,{top:"y",right:"x",bottom:"y",left:"x"})}function Tt(e){return Ct(e,["topLeft","topRight","bottomLeft","bottomRight"])}function Mt(e){const t=Et(e);return t.width=t.left+t.right,t.height=t.top+t.bottom,t}function At(e,t){e=e||{},t=t||ct.font;let n=u(e.size,t.size);"string"==typeof n&&(n=parseInt(n,10));let o=u(e.style,t.style);o&&!(""+o).match(Pt)&&(console.warn('Invalid font style specified: "'+o+'"'),o="");const s={family:u(e.family,t.family),lineHeight:Ot(u(e.lineHeight,t.lineHeight),n),size:n,style:o,weight:u(e.weight,t.weight),string:""};return s.string=ut(s),s}function Rt(e,t,n,o){let s,r,a,l=!0;for(s=0,r=e.length;s<r;++s)if(a=e[s],void 0!==a&&(void 0!==t&&"function"==typeof a&&(a=a(t),l=!1),void 0!==n&&i(a)&&(a=a[n%a.length],l=!1),void 0!==a))return o&&!l&&(o.cacheable=!1),a}function Lt(e,t,n){const{min:o,max:s}=e,r=h(t,(s-o)/2),i=(e,t)=>n&&0===e?0:e+t;return{min:i(o,-Math.abs(r)),max:i(s,r)}}function Dt(e,t){return Object.assign(Object.create(e),t)}function Bt(e,t=[""],n=e,o,s=(()=>e[0])){O(o)||(o=Yt("_fallback",e));const r={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:e,_rootScopes:n,_fallback:o,_getTarget:s,override:s=>Bt([s,...e],t,n,o)};return new Proxy(r,{deleteProperty:(t,n)=>(delete t[n],delete t._keys,delete e[0][n],!0),get:(n,o)=>$t(n,o,(()=>function(e,t,n,o){let s;for(const r of t)if(s=Yt(Ft(r,e),n),O(s))return Vt(e,s)?Wt(n,o,e,s):s}(o,t,e,n))),getOwnPropertyDescriptor:(e,t)=>Reflect.getOwnPropertyDescriptor(e._scopes[0],t),getPrototypeOf:()=>Reflect.getPrototypeOf(e[0]),has:(e,t)=>qt(e).includes(t),ownKeys:e=>qt(e),set(e,t,n){const o=e._storage||(e._storage=s());return e[t]=o[t]=n,delete e._keys,!0}})}function It(e,t,n,o){const s={_cacheable:!1,_proxy:e,_context:t,_subProxy:n,_stack:new Set,_descriptors:Nt(e,o),setContext:t=>It(e,t,n,o),override:s=>It(e.override(s),t,n,o)};return new Proxy(s,{deleteProperty:(t,n)=>(delete t[n],delete e[n],!0),get:(e,t,n)=>$t(e,t,(()=>function(e,t,n){const{_proxy:o,_context:s,_subProxy:r,_descriptors:l}=e;let c=o[t];return C(c)&&l.isScriptable(t)&&(c=function(e,t,n,o){const{_proxy:s,_context:r,_subProxy:i,_stack:a}=n;if(a.has(e))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+e);return a.add(e),t=t(r,i||o),a.delete(e),Vt(e,t)&&(t=Wt(s._scopes,s,e,t)),t}(t,c,e,n)),i(c)&&c.length&&(c=function(e,t,n,o){const{_proxy:s,_context:r,_subProxy:i,_descriptors:l}=n;if(O(r.index)&&o(e))t=t[r.index%t.length];else if(a(t[0])){const n=t,o=s._scopes.filter((e=>e!==n));t=[];for(const a of n){const n=Wt(o,s,e,a);t.push(It(n,r,i&&i[e],l))}}return t}(t,c,e,l.isIndexable)),Vt(t,c)&&(c=It(c,s,r&&r[t],l)),c}(e,t,n))),getOwnPropertyDescriptor:(t,n)=>t._descriptors.allKeys?Reflect.has(e,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(e,n),getPrototypeOf:()=>Reflect.getPrototypeOf(e),has:(t,n)=>Reflect.has(e,n),ownKeys:()=>Reflect.ownKeys(e),set:(t,n,o)=>(e[n]=o,delete t[n],!0)})}function Nt(e,t={scriptable:!0,indexable:!0}){const{_scriptable:n=t.scriptable,_indexable:o=t.indexable,_allKeys:s=t.allKeys}=e;return{allKeys:s,scriptable:n,indexable:o,isScriptable:C(n)?n:()=>n,isIndexable:C(o)?o:()=>o}}const Ft=(e,t)=>e?e+P(t):t,Vt=(e,t)=>a(t)&&"adapters"!==e&&(null===Object.getPrototypeOf(t)||t.constructor===Object);function $t(e,t,n){if(Object.prototype.hasOwnProperty.call(e,t))return e[t];const o=n();return e[t]=o,o}function zt(e,t,n){return C(e)?e(t,n):e}const Ht=(e,t)=>!0===e?t:"string"==typeof e?k(t,e):void 0;function Ut(e,t,n,o,s){for(const r of t){const t=Ht(n,r);if(t){e.add(t);const r=zt(t._fallback,n,s);if(O(r)&&r!==n&&r!==o)return r}else if(!1===t&&O(o)&&n!==o)return null}return!1}function Wt(e,t,n,o){const s=t._rootScopes,r=zt(t._fallback,n,o),l=[...e,...s],c=new Set;c.add(o);let u=Gt(c,l,n,r||n,o);return null!==u&&(!O(r)||r===n||(u=Gt(c,l,r,u,o),null!==u))&&Bt(Array.from(c),[""],s,r,(()=>function(e,t,n){const o=e._getTarget();t in o||(o[t]={});const s=o[t];return i(s)&&a(n)?n:s}(t,n,o)))}function Gt(e,t,n,o,s){for(;n;)n=Ut(e,t,n,o,s);return n}function Yt(e,t){for(const n of t){if(!n)continue;const t=n[e];if(O(t))return t}}function qt(e){let t=e._keys;return t||(t=e._keys=function(e){const t=new Set;for(const n of e)for(const e of Object.keys(n).filter((e=>!e.startsWith("_"))))t.add(e);return Array.from(t)}(e._scopes)),t}function Kt(e,t,n,o){const{iScale:s}=e,{key:r="r"}=this._parsing,i=new Array(o);let a,l,c,u;for(a=0,l=o;a<l;++a)c=a+n,u=t[c],i[a]={r:s.parse(k(u,r),c)};return i}const Jt=Number.EPSILON||1e-14,Xt=(e,t)=>t<e.length&&!e[t].skip&&e[t],Qt=e=>"x"===e?"y":"x";function Zt(e,t,n,o){const s=e.skip?t:e,r=t,i=n.skip?t:n,a=X(r,s),l=X(i,r);let c=a/(a+l),u=l/(a+l);c=isNaN(c)?0:c,u=isNaN(u)?0:u;const d=o*c,h=o*u;return{previous:{x:r.x-d*(i.x-s.x),y:r.y-d*(i.y-s.y)},next:{x:r.x+h*(i.x-s.x),y:r.y+h*(i.y-s.y)}}}function en(e,t="x"){const n=Qt(t),o=e.length,s=Array(o).fill(0),r=Array(o);let i,a,l,c=Xt(e,0);for(i=0;i<o;++i)if(a=l,l=c,c=Xt(e,i+1),l){if(c){const e=c[t]-l[t];s[i]=0!==e?(c[n]-l[n])/e:0}r[i]=a?c?V(s[i-1])!==V(s[i])?0:(s[i-1]+s[i])/2:s[i-1]:s[i]}!function(e,t,n){const o=e.length;let s,r,i,a,l,c=Xt(e,0);for(let u=0;u<o-1;++u)l=c,c=Xt(e,u+1),l&&c&&(U(t[u],0,Jt)?n[u]=n[u+1]=0:(s=n[u]/t[u],r=n[u+1]/t[u],a=Math.pow(s,2)+Math.pow(r,2),a<=9||(i=3/Math.sqrt(a),n[u]=s*i*t[u],n[u+1]=r*i*t[u])))}(e,s,r),function(e,t,n="x"){const o=Qt(n),s=e.length;let r,i,a,l=Xt(e,0);for(let c=0;c<s;++c){if(i=a,a=l,l=Xt(e,c+1),!a)continue;const s=a[n],u=a[o];i&&(r=(s-i[n])/3,a[`cp1${n}`]=s-r,a[`cp1${o}`]=u-r*t[c]),l&&(r=(l[n]-s)/3,a[`cp2${n}`]=s+r,a[`cp2${o}`]=u+r*t[c])}}(e,r,t)}function tn(e,t,n){return Math.max(Math.min(e,n),t)}function nn(e,t,n,o,s){let r,i,a,l;if(t.spanGaps&&(e=e.filter((e=>!e.skip))),"monotone"===t.cubicInterpolationMode)en(e,s);else{let n=o?e[e.length-1]:e[0];for(r=0,i=e.length;r<i;++r)a=e[r],l=Zt(n,a,e[Math.min(r+1,i-(o?0:1))%i],t.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,n=a}t.capBezierPoints&&function(e,t){let n,o,s,r,i,a=vt(e[0],t);for(n=0,o=e.length;n<o;++n)i=r,r=a,a=n<o-1&&vt(e[n+1],t),r&&(s=e[n],i&&(s.cp1x=tn(s.cp1x,t.left,t.right),s.cp1y=tn(s.cp1y,t.top,t.bottom)),a&&(s.cp2x=tn(s.cp2x,t.left,t.right),s.cp2y=tn(s.cp2y,t.top,t.bottom)))}(e,n)}function on(){return"undefined"!=typeof window&&"undefined"!=typeof document}function sn(e){let t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t}function rn(e,t,n){let o;return"string"==typeof e?(o=parseInt(e,10),-1!==e.indexOf("%")&&(o=o/100*t.parentNode[n])):o=e,o}const an=e=>window.getComputedStyle(e,null);function ln(e,t){return an(e).getPropertyValue(t)}const cn=["top","right","bottom","left"];function un(e,t,n){const o={};n=n?"-"+n:"";for(let s=0;s<4;s++){const r=cn[s];o[r]=parseFloat(e[t+"-"+r+n])||0}return o.width=o.left+o.right,o.height=o.top+o.bottom,o}function dn(e,t){if("native"in e)return e;const{canvas:n,currentDevicePixelRatio:o}=t,s=an(n),r="border-box"===s.boxSizing,i=un(s,"padding"),a=un(s,"border","width"),{x:l,y:c,box:u}=function(e,t){const n=e.touches,o=n&&n.length?n[0]:e,{offsetX:s,offsetY:r}=o;let i,a,l=!1;if(((e,t,n)=>(e>0||t>0)&&(!n||!n.shadowRoot))(s,r,e.target))i=s,a=r;else{const e=t.getBoundingClientRect();i=o.clientX-e.left,a=o.clientY-e.top,l=!0}return{x:i,y:a,box:l}}(e,n),d=i.left+(u&&a.left),h=i.top+(u&&a.top);let{width:p,height:f}=t;return r&&(p-=i.width+a.width,f-=i.height+a.height),{x:Math.round((l-d)/p*n.width/o),y:Math.round((c-h)/f*n.height/o)}}const hn=e=>Math.round(10*e)/10;function pn(e,t,n,o){const s=an(e),r=un(s,"margin"),i=rn(s.maxWidth,e,"clientWidth")||L,a=rn(s.maxHeight,e,"clientHeight")||L,l=function(e,t,n){let o,s;if(void 0===t||void 0===n){const r=sn(e);if(r){const e=r.getBoundingClientRect(),i=an(r),a=un(i,"border","width"),l=un(i,"padding");t=e.width-l.width-a.width,n=e.height-l.height-a.height,o=rn(i.maxWidth,r,"clientWidth"),s=rn(i.maxHeight,r,"clientHeight")}else t=e.clientWidth,n=e.clientHeight}return{width:t,height:n,maxWidth:o||L,maxHeight:s||L}}(e,t,n);let{width:c,height:u}=l;if("content-box"===s.boxSizing){const e=un(s,"border","width"),t=un(s,"padding");c-=t.width+e.width,u-=t.height+e.height}return c=Math.max(0,c-r.width),u=Math.max(0,o?Math.floor(c/o):u-r.height),c=hn(Math.min(c,i,l.maxWidth)),u=hn(Math.min(u,a,l.maxHeight)),c&&!u&&(u=hn(c/2)),{width:c,height:u}}function fn(e,t,n){const o=t||1,s=Math.floor(e.height*o),r=Math.floor(e.width*o);e.height=s/o,e.width=r/o;const i=e.canvas;return i.style&&(n||!i.style.height&&!i.style.width)&&(i.style.height=`${e.height}px`,i.style.width=`${e.width}px`),(e.currentDevicePixelRatio!==o||i.height!==s||i.width!==r)&&(e.currentDevicePixelRatio=o,i.height=s,i.width=r,e.ctx.setTransform(o,0,0,o,0,0),!0)}const mn=function(){let e=!1;try{const t={get passive(){return e=!0,!1}};window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(e){}return e}();function gn(e,t){const n=ln(e,t),o=n&&n.match(/^(\d+)(\.\d+)?px$/);return o?+o[1]:void 0}function vn(e,t,n,o){return{x:e.x+n*(t.x-e.x),y:e.y+n*(t.y-e.y)}}function yn(e,t,n,o){return{x:e.x+n*(t.x-e.x),y:"middle"===o?n<.5?e.y:t.y:"after"===o?n<1?e.y:t.y:n>0?t.y:e.y}}function bn(e,t,n,o){const s={x:e.cp2x,y:e.cp2y},r={x:t.cp1x,y:t.cp1y},i=vn(e,s,n),a=vn(s,r,n),l=vn(r,t,n),c=vn(i,a,n),u=vn(a,l,n);return vn(c,u,n)}const _n=new Map;function xn(e,t,n){return function(e,t){t=t||{};const n=e+JSON.stringify(t);let o=_n.get(n);return o||(o=new Intl.NumberFormat(e,t),_n.set(n,o)),o}(t,n).format(e)}function wn(e,t,n){return e?function(e,t){return{x:n=>e+e+t-n,setWidth(e){t=e},textAlign:e=>"center"===e?e:"right"===e?"left":"right",xPlus:(e,t)=>e-t,leftForLtr:(e,t)=>e-t}}(t,n):{x:e=>e,setWidth(e){},textAlign:e=>e,xPlus:(e,t)=>e+t,leftForLtr:(e,t)=>e}}function Sn(e,t){let n,o;"ltr"!==t&&"rtl"!==t||(n=e.canvas.style,o=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",t,"important"),e.prevTextDirection=o)}function kn(e,t){void 0!==t&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))}function jn(e){return"angle"===e?{between:ee,compare:Q,normalize:Z}:{between:oe,compare:(e,t)=>e-t,normalize:e=>e}}function Pn({start:e,end:t,count:n,loop:o,style:s}){return{start:e%n,end:t%n,loop:o&&(t-e+1)%n==0,style:s}}function On(e,t,n){if(!n)return[e];const{property:o,start:s,end:r}=n,i=t.length,{compare:a,between:l,normalize:c}=jn(o),{start:u,end:d,loop:h,style:p}=function(e,t,n){const{property:o,start:s,end:r}=n,{between:i,normalize:a}=jn(o),l=t.length;let c,u,{start:d,end:h,loop:p}=e;if(p){for(d+=l,h+=l,c=0,u=l;c<u&&i(a(t[d%l][o]),s,r);++c)d--,h--;d%=l,h%=l}return h<d&&(h+=l),{start:d,end:h,loop:p,style:e.style}}(e,t,n),f=[];let m,g,v,y=!1,b=null;for(let e=u,n=u;e<=d;++e)g=t[e%i],g.skip||(m=c(g[o]),m!==v&&(y=l(m,s,r),null===b&&(y||l(s,v,m)&&0!==a(s,v))&&(b=0===a(m,s)?e:n),null!==b&&(!y||0===a(r,m)||l(r,v,m))&&(f.push(Pn({start:b,end:e,loop:h,count:i,style:p})),b=null),n=e,v=m));return null!==b&&f.push(Pn({start:b,end:d,loop:h,count:i,style:p})),f}function Cn(e,t){const n=[],o=e.segments;for(let s=0;s<o.length;s++){const r=On(o[s],e.points,t);r.length&&n.push(...r)}return n}function En(e,t){const n=e.points,o=e.options.spanGaps,s=n.length;if(!s)return[];const r=!!e._loop,{start:i,end:a}=function(e,t,n,o){let s=0,r=t-1;if(n&&!o)for(;s<t&&!e[s].skip;)s++;for(;s<t&&e[s].skip;)s++;for(s%=t,n&&(r+=s);r>s&&e[r%t].skip;)r--;return r%=t,{start:s,end:r}}(n,s,r,o);return Tn(e,!0===o?[{start:i,end:a,loop:r}]:function(e,t,n,o){const s=e.length,r=[];let i,a=t,l=e[t];for(i=t+1;i<=n;++i){const n=e[i%s];n.skip||n.stop?l.skip||(o=!1,r.push({start:t%s,end:(i-1)%s,loop:o}),t=a=n.stop?i:null):(a=i,l.skip&&(t=i)),l=n}return null!==a&&r.push({start:t%s,end:a%s,loop:o}),r}(n,i,a<i?a+s:a,!!e._fullLoop&&0===i&&a===s-1),n,t)}function Tn(e,t,n,o){return o&&o.setContext&&n?function(e,t,n,o){const s=e._chart.getContext(),r=Mn(e.options),{_datasetIndex:i,options:{spanGaps:a}}=e,l=n.length,c=[];let u=r,d=t[0].start,h=d;function p(e,t,o,s){const r=a?-1:1;if(e!==t){for(e+=l;n[e%l].skip;)e-=r;for(;n[t%l].skip;)t+=r;e%l!=t%l&&(c.push({start:e%l,end:t%l,loop:o,style:s}),u=s,d=t%l)}}for(const e of t){d=a?d:e.start;let t,r=n[d%l];for(h=d+1;h<=e.end;h++){const a=n[h%l];t=Mn(o.setContext(Dt(s,{type:"segment",p0:r,p1:a,p0DataIndex:(h-1)%l,p1DataIndex:h%l,datasetIndex:i}))),An(t,u)&&p(d,h-1,e.loop,u),r=a,u=t}d<h-1&&p(d,h-1,e.loop,u)}return c}(e,t,n,o):t}function Mn(e){return{backgroundColor:e.backgroundColor,borderCapStyle:e.borderCapStyle,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderJoinStyle:e.borderJoinStyle,borderWidth:e.borderWidth,borderColor:e.borderColor}}function An(e,t){return t&&JSON.stringify(e)!==JSON.stringify(t)}},"./node_modules/vue-router/dist/vue-router.mjs":(e,t,n)=>{"use strict";n.r(t),n.d(t,{NavigationFailureType:()=>I,RouterLink:()=>$e,RouterView:()=>We,START_LOCATION:()=>D,createMemoryHistory:()=>A,createRouter:()=>at,createRouterMatcher:()=>X,createWebHashHistory:()=>R,createWebHistory:()=>M,isNavigationFailure:()=>V,loadRouteLocation:()=>Fe,matchedRouteKey:()=>Ce,onBeforeRouteLeave:()=>De,onBeforeRouteUpdate:()=>Be,parseQuery:()=>je,routeLocationKey:()=>Me,routerKey:()=>Te,routerViewLocationKey:()=>Ae,stringifyQuery:()=>Pe,useLink:()=>Ve,useRoute:()=>ut,useRouter:()=>ct,viewDepthKey:()=>Ee});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/index.js");const r="undefined"!=typeof window;function i(e){return e.__esModule||"Module"===e[Symbol.toStringTag]}const a=Object.assign;function l(e,t){const n={};for(const o in t){const s=t[o];n[o]=u(s)?s.map(e):e(s)}return n}const c=()=>{},u=Array.isArray;function d(e){const t=Array.from(arguments).slice(1);console.warn.apply(console,["[Vue Router warn]: "+e].concat(t))}const h=/\/$/;function p(e,t,n="/"){let o,s={},r="",i="";const a=t.indexOf("#");let l=t.indexOf("?");return a<l&&a>=0&&(l=-1),l>-1&&(o=t.slice(0,l),r=t.slice(l+1,a>-1?a:t.length),s=e(r)),a>-1&&(o=o||t.slice(0,a),i=t.slice(a,t.length)),o=function(e,t){if(e.startsWith("/"))return e;if(!t.startsWith("/"))return d(`Cannot resolve a relative location without an absolute path. Trying to resolve "${e}" from "${t}". It should look like "/${t}".`),e;if(!e)return t;const n=t.split("/"),o=e.split("/");let s,r,i=n.length-1;for(s=0;s<o.length;s++)if(r=o[s],"."!==r){if(".."!==r)break;i>1&&i--}return n.slice(0,i).join("/")+"/"+o.slice(s-(s===o.length?1:0)).join("/")}(null!=o?o:t,n),{fullPath:o+(r&&"?")+r+i,path:o,query:s,hash:i}}function f(e,t){return t&&e.toLowerCase().startsWith(t.toLowerCase())?e.slice(t.length)||"/":e}function m(e,t,n){const o=t.matched.length-1,s=n.matched.length-1;return o>-1&&o===s&&g(t.matched[o],n.matched[s])&&v(t.params,n.params)&&e(t.query)===e(n.query)&&t.hash===n.hash}function g(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function v(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(!y(e[n],t[n]))return!1;return!0}function y(e,t){return u(e)?b(e,t):u(t)?b(t,e):e===t}function b(e,t){return u(t)?e.length===t.length&&e.every(((e,n)=>e===t[n])):1===e.length&&e[0]===t}var _,x;function w(e){if(!e)if(r){const t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return"/"!==e[0]&&"#"!==e[0]&&(e="/"+e),e.replace(h,"")}!function(e){e.pop="pop",e.push="push"}(_||(_={})),function(e){e.back="back",e.forward="forward",e.unknown=""}(x||(x={}));const S=/^[^#]+#/;function k(e,t){return e.replace(S,"#")+t}const j=()=>({left:window.pageXOffset,top:window.pageYOffset});function P(e,t){return(history.state?history.state.position-t:-1)+e}const O=new Map;let C=()=>location.protocol+"//"+location.host;function E(e,t){const{pathname:n,search:o,hash:s}=t,r=e.indexOf("#");if(r>-1){let t=s.includes(e.slice(r))?e.slice(r).length:1,n=s.slice(t);return"/"!==n[0]&&(n="/"+n),f(n,"")}return f(n,e)+o+s}function T(e,t,n,o=!1,s=!1){return{back:e,current:t,forward:n,replaced:o,position:window.history.length,scroll:s?j():null}}function M(e){const t=function(e){const{history:t,location:n}=window,o={value:E(e,n)},s={value:t.state};function r(o,r,i){const a=e.indexOf("#"),l=a>-1?(n.host&&document.querySelector("base")?e:e.slice(a))+o:C()+e+o;try{t[i?"replaceState":"pushState"](r,"",l),s.value=r}catch(e){d("Error with push/replace State",e),n[i?"replace":"assign"](l)}}return s.value||r(o.value,{back:null,current:o.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0),{location:o,state:s,push:function(e,n){const i=a({},s.value,t.state,{forward:e,scroll:j()});t.state||d("history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\n\nhistory.replaceState(history.state, '', url)\n\nYou can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state."),r(i.current,i,!0),r(e,a({},T(o.value,e,null),{position:i.position+1},n),!1),o.value=e},replace:function(e,n){r(e,a({},t.state,T(s.value.back,e,s.value.forward,!0),n,{position:s.value.position}),!0),o.value=e}}}(e=w(e)),n=function(e,t,n,o){let s=[],r=[],i=null;const l=({state:r})=>{const a=E(e,location),l=n.value,c=t.value;let u=0;if(r){if(n.value=a,t.value=r,i&&i===l)return void(i=null);u=c?r.position-c.position:0}else o(a);s.forEach((e=>{e(n.value,l,{delta:u,type:_.pop,direction:u?u>0?x.forward:x.back:x.unknown})}))};function c(){const{history:e}=window;e.state&&e.replaceState(a({},e.state,{scroll:j()}),"")}return window.addEventListener("popstate",l),window.addEventListener("beforeunload",c),{pauseListeners:function(){i=n.value},listen:function(e){s.push(e);const t=()=>{const t=s.indexOf(e);t>-1&&s.splice(t,1)};return r.push(t),t},destroy:function(){for(const e of r)e();r=[],window.removeEventListener("popstate",l),window.removeEventListener("beforeunload",c)}}}(e,t.state,t.location,t.replace),o=a({location:"",base:e,go:function(e,t=!0){t||n.pauseListeners(),history.go(e)},createHref:k.bind(null,e)},t,n);return Object.defineProperty(o,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(o,"state",{enumerable:!0,get:()=>t.state.value}),o}function A(e=""){let t=[],n=[""],o=0;function s(e){o++,o===n.length||n.splice(o),n.push(e)}const r={location:"",state:{},base:e=w(e),createHref:k.bind(null,e),replace(e){n.splice(o--,1),s(e)},push(e,t){s(e)},listen:e=>(t.push(e),()=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)}),destroy(){t=[],n=[""],o=0},go(e,s=!0){const r=this.location,i=e<0?x.back:x.forward;o=Math.max(0,Math.min(o+e,n.length-1)),s&&function(e,n,{direction:o,delta:s}){const r={direction:o,delta:s,type:_.pop};for(const o of t)o(e,n,r)}(this.location,r,{direction:i,delta:e})}};return Object.defineProperty(r,"location",{enumerable:!0,get:()=>n[o]}),r}function R(e){return(e=location.host?e||location.pathname+location.search:"").includes("#")||(e+="#"),e.endsWith("#/")||e.endsWith("#")||d(`A hash base must end with a "#":\n"${e}" should be "${e.replace(/#.*$/,"#")}".`),M(e)}function L(e){return"string"==typeof e||"symbol"==typeof e}const D={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},B=Symbol("navigation failure");var I;!function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"}(I||(I={}));const N={1:({location:e,currentLocation:t})=>`No match for\n ${JSON.stringify(e)}${t?"\nwhile being at\n"+JSON.stringify(t):""}`,2:({from:e,to:t})=>`Redirected from "${e.fullPath}" to "${function(e){if("string"==typeof e)return e;if("path"in e)return e.path;const t={};for(const n of $)n in e&&(t[n]=e[n]);return JSON.stringify(t,null,2)}(t)}" via a navigation guard.`,4:({from:e,to:t})=>`Navigation aborted from "${e.fullPath}" to "${t.fullPath}" via a navigation guard.`,8:({from:e,to:t})=>`Navigation cancelled from "${e.fullPath}" to "${t.fullPath}" with a new navigation.`,16:({from:e,to:t})=>`Avoided redundant navigation to current location: "${e.fullPath}".`};function F(e,t){return a(new Error(N[e](t)),{type:e,[B]:!0},t)}function V(e,t){return e instanceof Error&&B in e&&(null==t||!!(e.type&t))}const $=["params","query","hash"],z="[^/]+?",H={sensitive:!1,strict:!1,start:!0,end:!0},U=/[.+*?^${}()[\]/\\]/g;function W(e,t){let n=0;for(;n<e.length&&n<t.length;){const o=t[n]-e[n];if(o)return o;n++}return e.length<t.length?1===e.length&&80===e[0]?-1:1:e.length>t.length?1===t.length&&80===t[0]?1:-1:0}function G(e,t){let n=0;const o=e.score,s=t.score;for(;n<o.length&&n<s.length;){const e=W(o[n],s[n]);if(e)return e;n++}if(1===Math.abs(s.length-o.length)){if(Y(o))return 1;if(Y(s))return-1}return s.length-o.length}function Y(e){const t=e[e.length-1];return e.length>0&&t[t.length-1]<0}const q={type:0,value:""},K=/[a-zA-Z0-9_]/;function J(e,t,n){const o=function(e,t){const n=a({},H,t),o=[];let s=n.start?"^":"";const r=[];for(const t of e){const e=t.length?[]:[90];n.strict&&!t.length&&(s+="/");for(let o=0;o<t.length;o++){const i=t[o];let a=40+(n.sensitive?.25:0);if(0===i.type)o||(s+="/"),s+=i.value.replace(U,"\\$&"),a+=40;else if(1===i.type){const{value:e,repeatable:n,optional:l,regexp:c}=i;r.push({name:e,repeatable:n,optional:l});const u=c||z;if(u!==z){a+=10;try{new RegExp(`(${u})`)}catch(t){throw new Error(`Invalid custom RegExp for param "${e}" (${u}): `+t.message)}}let d=n?`((?:${u})(?:/(?:${u}))*)`:`(${u})`;o||(d=l&&t.length<2?`(?:/${d})`:"/"+d),l&&(d+="?"),s+=d,a+=20,l&&(a+=-8),n&&(a+=-20),".*"===u&&(a+=-50)}e.push(a)}o.push(e)}if(n.strict&&n.end){const e=o.length-1;o[e][o[e].length-1]+=.7000000000000001}n.strict||(s+="/?"),n.end?s+="$":n.strict&&(s+="(?:/|$)");const i=new RegExp(s,n.sensitive?"":"i");return{re:i,score:o,keys:r,parse:function(e){const t=e.match(i),n={};if(!t)return null;for(let e=1;e<t.length;e++){const o=t[e]||"",s=r[e-1];n[s.name]=o&&s.repeatable?o.split("/"):o}return n},stringify:function(t){let n="",o=!1;for(const s of e){o&&n.endsWith("/")||(n+="/"),o=!1;for(const e of s)if(0===e.type)n+=e.value;else if(1===e.type){const{value:r,repeatable:i,optional:a}=e,l=r in t?t[r]:"";if(u(l)&&!i)throw new Error(`Provided param "${r}" is an array but it is not repeatable (* or + modifiers)`);const c=u(l)?l.join("/"):l;if(!c){if(!a)throw new Error(`Missing required param "${r}"`);s.length<2&&(n.endsWith("/")?n=n.slice(0,-1):o=!0)}n+=c}}return n||"/"}}}(function(e){if(!e)return[[]];if("/"===e)return[[q]];if(!e.startsWith("/"))throw new Error(`Route paths should start with a "/": "${e}" should be "/${e}".`);function t(e){throw new Error(`ERR (${n})/"${c}": ${e}`)}let n=0,o=n;const s=[];let r;function i(){r&&s.push(r),r=[]}let a,l=0,c="",u="";function d(){c&&(0===n?r.push({type:0,value:c}):1===n||2===n||3===n?(r.length>1&&("*"===a||"+"===a)&&t(`A repeatable param (${c}) must be alone in its segment. eg: '/:ids+.`),r.push({type:1,value:c,regexp:u,repeatable:"*"===a||"+"===a,optional:"*"===a||"?"===a})):t("Invalid state to consume buffer"),c="")}function h(){c+=a}for(;l<e.length;)if(a=e[l++],"\\"!==a||2===n)switch(n){case 0:"/"===a?(c&&d(),i()):":"===a?(d(),n=1):h();break;case 4:h(),n=o;break;case 1:"("===a?n=2:K.test(a)?h():(d(),n=0,"*"!==a&&"?"!==a&&"+"!==a&&l--);break;case 2:")"===a?"\\"==u[u.length-1]?u=u.slice(0,-1)+a:n=3:u+=a;break;case 3:d(),n=0,"*"!==a&&"?"!==a&&"+"!==a&&l--,u="";break;default:t("Unknown state")}else o=n,n=4;return 2===n&&t(`Unfinished custom RegExp for param "${c}"`),d(),i(),s}(e.path),n);{const t=new Set;for(const n of o.keys)t.has(n.name)&&d(`Found duplicated params with name "${n.name}" for path "${e.path}". Only the last one will be available on "$route.params".`),t.add(n.name)}const s=a(o,{record:e,parent:t,children:[],alias:[]});return t&&!s.record.aliasOf==!t.record.aliasOf&&t.children.push(s),s}function X(e,t){const n=[],o=new Map;function s(e,n,o){const l=!o,u=function(e){return{path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:void 0,beforeEnter:e.beforeEnter,props:Z(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||null:e.component&&{default:e.component}}}(e);(function(e,t){t&&t.record.name&&!e.name&&!e.path&&d(`The route named "${String(t.record.name)}" has a child without a name and an empty path. Using that name won't render the empty path child so you probably want to move the name to the child instead. If this is intentional, add a name to the child route to remove the warning.`)})(u,n),u.aliasOf=o&&o.record;const h=ne(t,e),p=[u];if("alias"in e){const t="string"==typeof e.alias?[e.alias]:e.alias;for(const e of t)p.push(a({},u,{components:o?o.record.components:u.components,path:e,aliasOf:o?o.record:u}))}let f,m;for(const t of p){const{path:a}=t;if(n&&"/"!==a[0]){const e=n.record.path,o="/"===e[e.length-1]?"":"/";t.path=n.record.path+(a&&o+a)}if("*"===t.path)throw new Error('Catch all routes ("*") must now be defined using a param with a custom regexp.\nSee more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');if(f=J(t,n,h),n&&"/"===a[0]&&re(f,n),o?(o.alias.push(f),se(o,f)):(m=m||f,m!==f&&m.alias.push(f),l&&e.name&&!ee(f)&&r(e.name)),u.children){const e=u.children;for(let t=0;t<e.length;t++)s(e[t],f,o&&o.children[t])}o=o||f,i(f)}return m?()=>{r(m)}:c}function r(e){if(L(e)){const t=o.get(e);t&&(o.delete(e),n.splice(n.indexOf(t),1),t.children.forEach(r),t.alias.forEach(r))}else{const t=n.indexOf(e);t>-1&&(n.splice(t,1),e.record.name&&o.delete(e.record.name),e.children.forEach(r),e.alias.forEach(r))}}function i(e){let t=0;for(;t<n.length&&G(e,n[t])>=0&&(e.record.path!==n[t].record.path||!ie(e,n[t]));)t++;n.splice(t,0,e),e.record.name&&!ee(e)&&o.set(e.record.name,e)}return t=ne({strict:!1,end:!0,sensitive:!1},t),e.forEach((e=>s(e))),{addRoute:s,resolve:function(e,t){let s,r,i,l={};if("name"in e&&e.name){if(s=o.get(e.name),!s)throw F(1,{location:e});{const t=Object.keys(e.params||{}).filter((e=>!s.keys.find((t=>t.name===e))));t.length&&d(`Discarded invalid param(s) "${t.join('", "')}" when navigating. See https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#414-2022-08-22 for more details.`)}i=s.record.name,l=a(Q(t.params,s.keys.filter((e=>!e.optional)).map((e=>e.name))),e.params&&Q(e.params,s.keys.map((e=>e.name)))),r=s.stringify(l)}else if("path"in e)r=e.path,r.startsWith("/")||d(`The Matcher cannot resolve relative paths but received "${r}". Unless you directly called \`matcher.resolve("${r}")\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/router.`),s=n.find((e=>e.re.test(r))),s&&(l=s.parse(r),i=s.record.name);else{if(s=t.name?o.get(t.name):n.find((e=>e.re.test(t.path))),!s)throw F(1,{location:e,currentLocation:t});i=s.record.name,l=a({},t.params,e.params),r=s.stringify(l)}const c=[];let u=s;for(;u;)c.unshift(u.record),u=u.parent;return{name:i,path:r,params:l,matched:c,meta:te(c)}},removeRoute:r,getRoutes:function(){return n},getRecordMatcher:function(e){return o.get(e)}}}function Q(e,t){const n={};for(const o of t)o in e&&(n[o]=e[o]);return n}function Z(e){const t={},n=e.props||!1;if("component"in e)t.default=n;else for(const o in e.components)t[o]="boolean"==typeof n?n:n[o];return t}function ee(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function te(e){return e.reduce(((e,t)=>a(e,t.meta)),{})}function ne(e,t){const n={};for(const o in e)n[o]=o in t?t[o]:e[o];return n}function oe(e,t){return e.name===t.name&&e.optional===t.optional&&e.repeatable===t.repeatable}function se(e,t){for(const n of e.keys)if(!n.optional&&!t.keys.find(oe.bind(null,n)))return d(`Alias "${t.record.path}" and the original record: "${e.record.path}" must have the exact same param named "${n.name}"`);for(const n of t.keys)if(!n.optional&&!e.keys.find(oe.bind(null,n)))return d(`Alias "${t.record.path}" and the original record: "${e.record.path}" must have the exact same param named "${n.name}"`)}function re(e,t){for(const n of t.keys)if(!e.keys.find(oe.bind(null,n)))return d(`Absolute path "${e.record.path}" must have the exact same param named "${n.name}" as its parent "${t.record.path}".`)}function ie(e,t){return t.children.some((t=>t===e||ie(e,t)))}const ae=/#/g,le=/&/g,ce=/\//g,ue=/=/g,de=/\?/g,he=/\+/g,pe=/%5B/g,fe=/%5D/g,me=/%5E/g,ge=/%60/g,ve=/%7B/g,ye=/%7C/g,be=/%7D/g,_e=/%20/g;function xe(e){return encodeURI(""+e).replace(ye,"|").replace(pe,"[").replace(fe,"]")}function we(e){return xe(e).replace(he,"%2B").replace(_e,"+").replace(ae,"%23").replace(le,"%26").replace(ge,"`").replace(ve,"{").replace(be,"}").replace(me,"^")}function Se(e){return null==e?"":function(e){return xe(e).replace(ae,"%23").replace(de,"%3F")}(e).replace(ce,"%2F")}function ke(e){try{return decodeURIComponent(""+e)}catch(t){d(`Error decoding "${e}". Using original value`)}return""+e}function je(e){const t={};if(""===e||"?"===e)return t;const n=("?"===e[0]?e.slice(1):e).split("&");for(let e=0;e<n.length;++e){const o=n[e].replace(he," "),s=o.indexOf("="),r=ke(s<0?o:o.slice(0,s)),i=s<0?null:ke(o.slice(s+1));if(r in t){let e=t[r];u(e)||(e=t[r]=[e]),e.push(i)}else t[r]=i}return t}function Pe(e){let t="";for(let n in e){const o=e[n];(n=we(n).replace(ue,"%3D"),null!=o)?(u(o)?o.map((e=>e&&we(e))):[o&&we(o)]).forEach((e=>{void 0!==e&&(t+=(t.length?"&":"")+n,null!=e&&(t+="="+e))})):void 0!==o&&(t+=(t.length?"&":"")+n)}return t}function Oe(e){const t={};for(const n in e){const o=e[n];void 0!==o&&(t[n]=u(o)?o.map((e=>null==e?null:""+e)):null==o?o:""+o)}return t}const Ce=Symbol("router view location matched"),Ee=Symbol("router view depth"),Te=Symbol("router"),Me=Symbol("route location"),Ae=Symbol("router view location");function Re(){let e=[];return{add:function(t){return e.push(t),()=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)}},list:()=>e,reset:function(){e=[]}}}function Le(e,t,n){const s=()=>{e[t].delete(n)};(0,o.onUnmounted)(s),(0,o.onDeactivated)(s),(0,o.onActivated)((()=>{e[t].add(n)})),e[t].add(n)}function De(e){if(!(0,o.getCurrentInstance)())return void d("getCurrentInstance() returned null. onBeforeRouteLeave() must be called at the top of a setup function");const t=(0,o.inject)(Ce,{}).value;t?Le(t,"leaveGuards",e):d("No active route record was found when calling `onBeforeRouteLeave()`. Make sure you call this function inside a component child of <router-view>. Maybe you called it inside of App.vue?")}function Be(e){if(!(0,o.getCurrentInstance)())return void d("getCurrentInstance() returned null. onBeforeRouteUpdate() must be called at the top of a setup function");const t=(0,o.inject)(Ce,{}).value;t?Le(t,"updateGuards",e):d("No active route record was found when calling `onBeforeRouteUpdate()`. Make sure you call this function inside a component child of <router-view>. Maybe you called it inside of App.vue?")}function Ie(e,t,n,o,s){const r=o&&(o.enterCallbacks[s]=o.enterCallbacks[s]||[]);return()=>new Promise(((i,a)=>{const l=e=>{var l;!1===e?a(F(4,{from:n,to:t})):e instanceof Error?a(e):"string"==typeof(l=e)||l&&"object"==typeof l?a(F(2,{from:t,to:e})):(r&&o.enterCallbacks[s]===r&&"function"==typeof e&&r.push(e),i())},c=e.call(o&&o.instances[s],t,n,function(e,t,n){let o=0;return function(){1==o++&&d(`The "next" callback was called more than once in one navigation guard when going from "${n.fullPath}" to "${t.fullPath}". It should be called exactly one time in each navigation guard. This will fail in production.`),e._called=!0,1===o&&e.apply(null,arguments)}}(l,t,n));let u=Promise.resolve(c);if(e.length<3&&(u=u.then(l)),e.length>2){const t=`The "next" callback was never called inside of ${e.name?'"'+e.name+'"':""}:\n${e.toString()}\n. If you are returning a value instead of calling "next", make sure to remove the "next" parameter from your function.`;if("object"==typeof c&&"then"in c)u=u.then((e=>l._called?e:(d(t),Promise.reject(new Error("Invalid navigation guard")))));else if(void 0!==c&&!l._called)return d(t),void a(new Error("Invalid navigation guard"))}u.catch((e=>a(e)))}))}function Ne(e,t,n,o){const s=[];for(const a of e){a.components||a.children.length||d(`Record with path "${a.path}" is either missing a "component(s)" or "children" property.`);for(const e in a.components){let l=a.components[e];if(!l||"object"!=typeof l&&"function"!=typeof l)throw d(`Component "${e}" in record with path "${a.path}" is not a valid component. Received "${String(l)}".`),new Error("Invalid route component");if("then"in l){d(`Component "${e}" in record with path "${a.path}" is a Promise instead of a function that returns a Promise. Did you write "import('./MyPage.vue')" instead of "() => import('./MyPage.vue')" ? This will break in production if not fixed.`);const t=l;l=()=>t}else l.__asyncLoader&&!l.__warnedDefineAsync&&(l.__warnedDefineAsync=!0,d(`Component "${e}" in record with path "${a.path}" is defined using "defineAsyncComponent()". Write "() => import('./MyPage.vue')" instead of "defineAsyncComponent(() => import('./MyPage.vue'))".`));if("beforeRouteEnter"===t||a.instances[e])if("object"==typeof(r=l)||"displayName"in r||"props"in r||"__vccOpts"in r){const r=(l.__vccOpts||l)[t];r&&s.push(Ie(r,n,o,a,e))}else{let r=l();"catch"in r||(d(`Component "${e}" in record with path "${a.path}" is a function that does not return a Promise. If you were passing a functional component, make sure to add a "displayName" to the component. This will break in production if not fixed.`),r=Promise.resolve(r)),s.push((()=>r.then((s=>{if(!s)return Promise.reject(new Error(`Couldn't resolve component "${e}" at "${a.path}"`));const r=i(s)?s.default:s;a.components[e]=r;const l=(r.__vccOpts||r)[t];return l&&Ie(l,n,o,a,e)()}))))}}}var r;return s}function Fe(e){return e.matched.every((e=>e.redirect))?Promise.reject(new Error("Cannot load a route that redirects.")):Promise.all(e.matched.map((e=>e.components&&Promise.all(Object.keys(e.components).reduce(((t,n)=>{const o=e.components[n];return"function"!=typeof o||"displayName"in o||t.push(o().then((t=>{if(!t)return Promise.reject(new Error(`Couldn't resolve component "${n}" at "${e.path}". Ensure you passed a function that returns a promise.`));const o=i(t)?t.default:t;e.components[n]=o}))),t}),[]))))).then((()=>e))}function Ve(e){const t=(0,o.inject)(Te),n=(0,o.inject)(Me),s=(0,o.computed)((()=>t.resolve((0,o.unref)(e.to)))),i=(0,o.computed)((()=>{const{matched:e}=s.value,{length:t}=e,o=e[t-1],r=n.matched;if(!o||!r.length)return-1;const i=r.findIndex(g.bind(null,o));if(i>-1)return i;const a=ze(e[t-2]);return t>1&&ze(o)===a&&r[r.length-1].path!==a?r.findIndex(g.bind(null,e[t-2])):i})),a=(0,o.computed)((()=>i.value>-1&&function(e,t){for(const n in t){const o=t[n],s=e[n];if("string"==typeof o){if(o!==s)return!1}else if(!u(s)||s.length!==o.length||o.some(((e,t)=>e!==s[t])))return!1}return!0}(n.params,s.value.params))),l=(0,o.computed)((()=>i.value>-1&&i.value===n.matched.length-1&&v(n.params,s.value.params)));if(r){const e=(0,o.getCurrentInstance)();if(e){const t={route:s.value,isActive:a.value,isExactActive:l.value};e.__vrl_devtools=e.__vrl_devtools||[],e.__vrl_devtools.push(t),(0,o.watchEffect)((()=>{t.route=s.value,t.isActive=a.value,t.isExactActive=l.value}),{flush:"post"})}}return{route:s,href:(0,o.computed)((()=>s.value.href)),isActive:a,isExactActive:l,navigate:function(n={}){return function(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){const t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}(n)?t[(0,o.unref)(e.replace)?"replace":"push"]((0,o.unref)(e.to)).catch(c):Promise.resolve()}}}const $e=(0,o.defineComponent)({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Ve,setup(e,{slots:t}){const n=(0,o.reactive)(Ve(e)),{options:s}=(0,o.inject)(Te),r=(0,o.computed)((()=>({[He(e.activeClass,s.linkActiveClass,"router-link-active")]:n.isActive,[He(e.exactActiveClass,s.linkExactActiveClass,"router-link-exact-active")]:n.isExactActive})));return()=>{const s=t.default&&t.default(n);return e.custom?s:(0,o.h)("a",{"aria-current":n.isExactActive?e.ariaCurrentValue:null,href:n.href,onClick:n.navigate,class:r.value},s)}}});function ze(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const He=(e,t,n)=>null!=e?e:null!=t?t:n;function Ue(e,t){if(!e)return null;const n=e(t);return 1===n.length?n[0]:n}const We=(0,o.defineComponent)({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(e,{attrs:t,slots:n}){!function(){const e=(0,o.getCurrentInstance)(),t=e.parent&&e.parent.type.name;if(t&&("KeepAlive"===t||t.includes("Transition"))){const e="KeepAlive"===t?"keep-alive":"transition";d(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.\nUse slot props instead:\n\n<router-view v-slot="{ Component }">\n  <${e}>\n    <component :is="Component" />\n  </${e}>\n</router-view>`)}}();const s=(0,o.inject)(Ae),i=(0,o.computed)((()=>e.route||s.value)),l=(0,o.inject)(Ee,0),c=(0,o.computed)((()=>{let e=(0,o.unref)(l);const{matched:t}=i.value;let n;for(;(n=t[e])&&!n.components;)e++;return e})),h=(0,o.computed)((()=>i.value.matched[c.value]));(0,o.provide)(Ee,(0,o.computed)((()=>c.value+1))),(0,o.provide)(Ce,h),(0,o.provide)(Ae,i);const p=(0,o.ref)();return(0,o.watch)((()=>[p.value,h.value,e.name]),(([e,t,n],[o,s,r])=>{t&&(t.instances[n]=e,s&&s!==t&&e&&e===o&&(t.leaveGuards.size||(t.leaveGuards=s.leaveGuards),t.updateGuards.size||(t.updateGuards=s.updateGuards))),!e||!t||s&&g(t,s)&&o||(t.enterCallbacks[n]||[]).forEach((t=>t(e)))}),{flush:"post"}),()=>{const s=i.value,l=e.name,d=h.value,f=d&&d.components[l];if(!f)return Ue(n.default,{Component:f,route:s});const m=d.props[l],g=m?!0===m?s.params:"function"==typeof m?m(s):m:null,v=(0,o.h)(f,a({},g,t,{onVnodeUnmounted:e=>{e.component.isUnmounted&&(d.instances[l]=null)},ref:p}));if(r&&v.ref){const e={depth:c.value,name:d.name,path:d.path,meta:d.meta};(u(v.ref)?v.ref.map((e=>e.i)):[v.ref.i]).forEach((t=>{t.__vrv_devtools=e}))}return Ue(n.default,{Component:v,route:s})||v}}});function Ge(e,t){const n=a({},e,{matched:e.matched.map((e=>function(e,t){const n={};for(const o in e)t.includes(o)||(n[o]=e[o]);return n}(e,["instances","children","aliasOf"])))});return{_custom:{type:null,readOnly:!0,display:e.fullPath,tooltip:t,value:n}}}function Ye(e){return{_custom:{display:e}}}let qe=0;function Ke(e,t,n){if(t.__hasDevtools)return;t.__hasDevtools=!0;const r=qe++;(0,s.setupDevtoolsPlugin)({id:"org.vuejs.router"+(r?"."+r:""),label:"Vue Router",packageName:"vue-router",homepage:"https://router.vuejs.org",logo:"https://router.vuejs.org/logo.png",componentStateTypes:["Routing"],app:e},(s=>{"function"!=typeof s.now&&console.warn("[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html."),s.on.inspectComponent(((e,n)=>{e.instanceData&&e.instanceData.state.push({type:"Routing",key:"$route",editable:!1,value:Ge(t.currentRoute.value,"Current Route")})})),s.on.visitComponentTree((({treeNode:e,componentInstance:t})=>{if(t.__vrv_devtools){const n=t.__vrv_devtools;e.tags.push({label:(n.name?`${n.name.toString()}: `:"")+n.path,textColor:0,tooltip:"This component is rendered by &lt;router-view&gt;",backgroundColor:Xe})}u(t.__vrl_devtools)&&(t.__devtoolsApi=s,t.__vrl_devtools.forEach((t=>{let n=et,o="";t.isExactActive?(n=Ze,o="This is exactly active"):t.isActive&&(n=Qe,o="This link is active"),e.tags.push({label:t.route.path,textColor:0,tooltip:o,backgroundColor:n})})))})),(0,o.watch)(t.currentRoute,(()=>{c(),s.notifyComponentUpdate(),s.sendInspectorTree(l),s.sendInspectorState(l)}));const i="router:navigations:"+r;s.addTimelineLayer({id:i,label:`Router${r?" "+r:""} Navigations`,color:4237508}),t.onError(((e,t)=>{s.addTimelineEvent({layerId:i,event:{title:"Error during Navigation",subtitle:t.fullPath,logType:"error",time:s.now(),data:{error:e},groupId:t.meta.__navigationId}})}));let a=0;t.beforeEach(((e,t)=>{const n={guard:Ye("beforeEach"),from:Ge(t,"Current Location during this navigation"),to:Ge(e,"Target location")};Object.defineProperty(e.meta,"__navigationId",{value:a++}),s.addTimelineEvent({layerId:i,event:{time:s.now(),title:"Start of navigation",subtitle:e.fullPath,data:n,groupId:e.meta.__navigationId}})})),t.afterEach(((e,t,n)=>{const o={guard:Ye("afterEach")};n?(o.failure={_custom:{type:Error,readOnly:!0,display:n?n.message:"",tooltip:"Navigation Failure",value:n}},o.status=Ye("❌")):o.status=Ye("✅"),o.from=Ge(t,"Current Location during this navigation"),o.to=Ge(e,"Target location"),s.addTimelineEvent({layerId:i,event:{title:"End of navigation",subtitle:e.fullPath,time:s.now(),data:o,logType:n?"warning":"default",groupId:e.meta.__navigationId}})}));const l="router-inspector:"+r;function c(){if(!d)return;const e=d;let o=n.getRoutes().filter((e=>!e.parent));o.forEach(rt),e.filter&&(o=o.filter((t=>it(t,e.filter.toLowerCase())))),o.forEach((e=>st(e,t.currentRoute.value))),e.rootNodes=o.map(tt)}let d;s.addInspector({id:l,label:"Routes"+(r?" "+r:""),icon:"book",treeFilterPlaceholder:"Search routes"}),s.on.getInspectorTree((t=>{d=t,t.app===e&&t.inspectorId===l&&c()})),s.on.getInspectorState((t=>{if(t.app===e&&t.inspectorId===l){const e=n.getRoutes().find((e=>e.record.__vd_id===t.nodeId));e&&(t.state={options:Je(e)})}})),s.sendInspectorTree(l),s.sendInspectorState(l)}))}function Je(e){const{record:t}=e,n=[{editable:!1,key:"path",value:t.path}];return null!=t.name&&n.push({editable:!1,key:"name",value:t.name}),n.push({editable:!1,key:"regexp",value:e.re}),e.keys.length&&n.push({editable:!1,key:"keys",value:{_custom:{type:null,readOnly:!0,display:e.keys.map((e=>`${e.name}${function(e){return e.optional?e.repeatable?"*":"?":e.repeatable?"+":""}(e)}`)).join(" "),tooltip:"Param keys",value:e.keys}}}),null!=t.redirect&&n.push({editable:!1,key:"redirect",value:t.redirect}),e.alias.length&&n.push({editable:!1,key:"aliases",value:e.alias.map((e=>e.record.path))}),Object.keys(e.record.meta).length&&n.push({editable:!1,key:"meta",value:e.record.meta}),n.push({key:"score",editable:!1,value:{_custom:{type:null,readOnly:!0,display:e.score.map((e=>e.join(", "))).join(" | "),tooltip:"Score used to sort routes",value:e.score}}}),n}const Xe=15485081,Qe=2450411,Ze=8702998,et=16486972;function tt(e){const t=[],{record:n}=e;null!=n.name&&t.push({label:String(n.name),textColor:0,backgroundColor:2282478}),n.aliasOf&&t.push({label:"alias",textColor:0,backgroundColor:et}),e.__vd_match&&t.push({label:"matches",textColor:0,backgroundColor:Xe}),e.__vd_exactActive&&t.push({label:"exact",textColor:0,backgroundColor:Ze}),e.__vd_active&&t.push({label:"active",textColor:0,backgroundColor:Qe}),n.redirect&&t.push({label:"string"==typeof n.redirect?`redirect: ${n.redirect}`:"redirects",textColor:16777215,backgroundColor:6710886});let o=n.__vd_id;return null==o&&(o=String(nt++),n.__vd_id=o),{id:o,label:n.path,tags:t,children:e.children.map(tt)}}let nt=0;const ot=/^\/(.*)\/([a-z]*)$/;function st(e,t){const n=t.matched.length&&g(t.matched[t.matched.length-1],e.record);e.__vd_exactActive=e.__vd_active=n,n||(e.__vd_active=t.matched.some((t=>g(t,e.record)))),e.children.forEach((e=>st(e,t)))}function rt(e){e.__vd_match=!1,e.children.forEach(rt)}function it(e,t){const n=String(e.re).match(ot);if(e.__vd_match=!1,!n||n.length<3)return!1;if(new RegExp(n[1].replace(/\$$/,""),n[2]).test(t))return e.children.forEach((e=>it(e,t))),("/"!==e.record.path||"/"===t)&&(e.__vd_match=e.re.test(t),!0);const o=e.record.path.toLowerCase(),s=ke(o);return!(t.startsWith("/")||!s.includes(t)&&!o.includes(t))||!(!s.startsWith(t)&&!o.startsWith(t))||!(!e.record.name||!String(e.record.name).includes(t))||e.children.some((e=>it(e,t)))}function at(e){const t=X(e.routes,e),n=e.parseQuery||je,s=e.stringifyQuery||Pe,i=e.history;if(!i)throw new Error('Provide the "history" option when calling "createRouter()": https://next.router.vuejs.org/api/#history.');const h=Re(),f=Re(),v=Re(),y=(0,o.shallowRef)(D);let b=D;r&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const x=l.bind(null,(e=>""+e)),w=l.bind(null,Se),S=l.bind(null,ke);function k(e,o){if(o=a({},o||y.value),"string"==typeof e){const s=p(n,e,o.path),r=t.resolve({path:s.path},o),l=i.createHref(s.fullPath);return l.startsWith("//")?d(`Location "${e}" resolved to "${l}". A resolved location cannot start with multiple slashes.`):r.matched.length||d(`No match found for location with path "${e}"`),a(s,r,{params:S(r.params),hash:ke(s.hash),redirectedFrom:void 0,href:l})}let r;if("path"in e)"params"in e&&!("name"in e)&&Object.keys(e.params).length&&d(`Path "${e.path}" was passed with params but they will be ignored. Use a named route alongside params instead.`),r=a({},e,{path:p(n,e.path,o.path).path});else{const t=a({},e.params);for(const e in t)null==t[e]&&delete t[e];r=a({},e,{params:w(e.params)}),o.params=w(o.params)}const l=t.resolve(r,o),c=e.hash||"";c&&!c.startsWith("#")&&d(`A \`hash\` should always start with the character "#". Replace "${c}" with "#${c}".`),l.params=x(S(l.params));const u=function(e,t){const n=t.query?e(t.query):"";return t.path+(n&&"?")+n+(t.hash||"")}(s,a({},e,{hash:(h=c,xe(h).replace(ve,"{").replace(be,"}").replace(me,"^")),path:l.path}));var h;const f=i.createHref(u);return f.startsWith("//")?d(`Location "${e}" resolved to "${f}". A resolved location cannot start with multiple slashes.`):l.matched.length||d(`No match found for location with path "${"path"in e?e.path:e}"`),a({fullPath:u,hash:c,query:s===Pe?Oe(e.query):e.query||{}},l,{redirectedFrom:void 0,href:f})}function C(e){return"string"==typeof e?p(n,e,y.value.path):a({},e)}function E(e,t){if(b!==e)return F(8,{from:t,to:e})}function T(e){return A(e)}function M(e){const t=e.matched[e.matched.length-1];if(t&&t.redirect){const{redirect:n}=t;let o="function"==typeof n?n(e):n;if("string"==typeof o&&(o=o.includes("?")||o.includes("#")?o=C(o):{path:o},o.params={}),!("path"in o)&&!("name"in o))throw d(`Invalid redirect found:\n${JSON.stringify(o,null,2)}\n when navigating to "${e.fullPath}". A redirect must contain a name or path. This will break in production.`),new Error("Invalid redirect");return a({query:e.query,hash:e.hash,params:"path"in o?{}:e.params},o)}}function A(e,t){const n=b=k(e),o=y.value,r=e.state,i=e.force,l=!0===e.replace,c=M(n);if(c)return A(a(C(c),{state:"object"==typeof c?a({},r,c.state):r,force:i,replace:l}),t||n);const u=n;let h;return u.redirectedFrom=t,!i&&m(s,o,n)&&(h=F(16,{to:u,from:o}),Y(o,o,!0,!1)),(h?Promise.resolve(h):B(u,o)).catch((e=>V(e)?V(e,2)?e:G(e):W(e,u,o))).then((e=>{if(e){if(V(e,2))return m(s,k(e.to),u)&&t&&(t._count=t._count?t._count+1:1)>10?(d(`Detected an infinite redirection in a navigation guard when going from "${o.fullPath}" to "${u.fullPath}". Aborting to avoid a Stack Overflow. This will break in production if not fixed.`),Promise.reject(new Error("Infinite redirect in navigation guard"))):A(a({replace:l},C(e.to),{state:"object"==typeof e.to?a({},r,e.to.state):r,force:i}),t||u)}else e=N(u,o,!0,l,r);return I(u,o,e),e}))}function R(e,t){const n=E(e,t);return n?Promise.reject(n):Promise.resolve()}function B(e,t){let n;const[o,s,r]=function(e,t){const n=[],o=[],s=[],r=Math.max(t.matched.length,e.matched.length);for(let i=0;i<r;i++){const r=t.matched[i];r&&(e.matched.find((e=>g(e,r)))?o.push(r):n.push(r));const a=e.matched[i];a&&(t.matched.find((e=>g(e,a)))||s.push(a))}return[n,o,s]}(e,t);n=Ne(o.reverse(),"beforeRouteLeave",e,t);for(const s of o)s.leaveGuards.forEach((o=>{n.push(Ie(o,e,t))}));const i=R.bind(null,e,t);return n.push(i),lt(n).then((()=>{n=[];for(const o of h.list())n.push(Ie(o,e,t));return n.push(i),lt(n)})).then((()=>{n=Ne(s,"beforeRouteUpdate",e,t);for(const o of s)o.updateGuards.forEach((o=>{n.push(Ie(o,e,t))}));return n.push(i),lt(n)})).then((()=>{n=[];for(const o of e.matched)if(o.beforeEnter&&!t.matched.includes(o))if(u(o.beforeEnter))for(const s of o.beforeEnter)n.push(Ie(s,e,t));else n.push(Ie(o.beforeEnter,e,t));return n.push(i),lt(n)})).then((()=>(e.matched.forEach((e=>e.enterCallbacks={})),n=Ne(r,"beforeRouteEnter",e,t),n.push(i),lt(n)))).then((()=>{n=[];for(const o of f.list())n.push(Ie(o,e,t));return n.push(i),lt(n)})).catch((e=>V(e,8)?e:Promise.reject(e)))}function I(e,t,n){for(const o of v.list())o(e,t,n)}function N(e,t,n,o,s){const l=E(e,t);if(l)return l;const c=t===D,u=r?history.state:{};n&&(o||c?i.replace(e.fullPath,a({scroll:c&&u&&u.scroll},s)):i.push(e.fullPath,s)),y.value=e,Y(e,t,n,c),G()}let $;let z,H=Re(),U=Re();function W(e,t,n){G(e);const o=U.list();return o.length?o.forEach((o=>o(e,t,n))):(d("uncaught error during route navigation:"),console.error(e)),Promise.reject(e)}function G(e){return z||(z=!e,$||($=i.listen(((e,t,n)=>{if(!Q.listening)return;const o=k(e),s=M(o);if(s)return void A(a(s,{replace:!0}),o).catch(c);b=o;const l=y.value;var u,d;r&&(u=P(l.fullPath,n.delta),d=j(),O.set(u,d)),B(o,l).catch((e=>V(e,12)?e:V(e,2)?(A(e.to,o).then((e=>{V(e,20)&&!n.delta&&n.type===_.pop&&i.go(-1,!1)})).catch(c),Promise.reject()):(n.delta&&i.go(-n.delta,!1),W(e,o,l)))).then((e=>{(e=e||N(o,l,!1))&&(n.delta&&!V(e,8)?i.go(-n.delta,!1):n.type===_.pop&&V(e,20)&&i.go(-1,!1)),I(o,l,e)})).catch(c)}))),H.list().forEach((([t,n])=>e?n(e):t())),H.reset()),e}function Y(t,n,s,i){const{scrollBehavior:a}=e;if(!r||!a)return Promise.resolve();const l=!s&&function(e){const t=O.get(e);return O.delete(e),t}(P(t.fullPath,0))||(i||!s)&&history.state&&history.state.scroll||null;return(0,o.nextTick)().then((()=>a(t,n,l))).then((e=>e&&function(e){let t;if("el"in e){const n=e.el,o="string"==typeof n&&n.startsWith("#");if(!("string"!=typeof e.el||o&&document.getElementById(e.el.slice(1))))try{const t=document.querySelector(e.el);if(o&&t)return void d(`The selector "${e.el}" should be passed as "el: document.querySelector('${e.el}')" because it starts with "#".`)}catch(t){return void d(`The selector "${e.el}" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`)}const s="string"==typeof n?o?document.getElementById(n.slice(1)):document.querySelector(n):n;if(!s)return void d(`Couldn't find element using selector "${e.el}" returned by scrollBehavior.`);t=function(e,t){const n=document.documentElement.getBoundingClientRect(),o=e.getBoundingClientRect();return{behavior:t.behavior,left:o.left-n.left-(t.left||0),top:o.top-n.top-(t.top||0)}}(s,e)}else t=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(null!=t.left?t.left:window.pageXOffset,null!=t.top?t.top:window.pageYOffset)}(e))).catch((e=>W(e,t,n)))}const q=e=>i.go(e);let K;const J=new Set,Q={currentRoute:y,listening:!0,addRoute:function(e,n){let o,s;return L(e)?(o=t.getRecordMatcher(e),s=n):s=e,t.addRoute(s,o)},removeRoute:function(e){const n=t.getRecordMatcher(e);n?t.removeRoute(n):d(`Cannot remove non-existent route "${String(e)}"`)},hasRoute:function(e){return!!t.getRecordMatcher(e)},getRoutes:function(){return t.getRoutes().map((e=>e.record))},resolve:k,options:e,push:T,replace:function(e){return T(a(C(e),{replace:!0}))},go:q,back:()=>q(-1),forward:()=>q(1),beforeEach:h.add,beforeResolve:f.add,afterEach:v.add,onError:U.add,isReady:function(){return z&&y.value!==D?Promise.resolve():new Promise(((e,t)=>{H.add([e,t])}))},install(e){const n=this;e.component("RouterLink",$e),e.component("RouterView",We),e.config.globalProperties.$router=n,Object.defineProperty(e.config.globalProperties,"$route",{enumerable:!0,get:()=>(0,o.unref)(y)}),r&&!K&&y.value===D&&(K=!0,T(i.location).catch((e=>{d("Unexpected error when starting the router:",e)})));const s={};for(const e in D)s[e]=(0,o.computed)((()=>y.value[e]));e.provide(Te,n),e.provide(Me,(0,o.reactive)(s)),e.provide(Ae,y);const a=e.unmount;J.add(e),e.unmount=function(){J.delete(e),J.size<1&&(b=D,$&&$(),$=null,y.value=D,K=!1,z=!1),a()},r&&Ke(e,n,t)}};return Q}function lt(e){return e.reduce(((e,t)=>e.then((()=>t()))),Promise.resolve())}function ct(){return(0,o.inject)(Te)}function ut(){return(0,o.inject)(Me)}}},t={};function n(o){var s=t[o];if(void 0!==s)return s.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{"use strict";n.r(o);var e=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),t=n("./node_modules/@wordpress/hooks/build-module/index.js"),s=(n("./src/i18n.js"),n("./src/mixins/i18n.js")),r=n("./src/App.vue"),i=n("./src/router/index.js"),a=(n("./src/styles/main.scss"),n("./src/utils/menu-fix.js"),n("./src/store/index.js")),l=(0,e.createApp)({extends:r.default,mixins:[s.default]});l.config.devtools=!0,l.use(i.default).use(a.default),l.mount("#wp-emailer"),window.wpEmailerHooks=(0,t.createHooks)(),wpEmailerHooks.addFilter=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10;wpEmailerHooks.hooks.addFilter(e,t,(function(e){return e.push(n),e}),o)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,