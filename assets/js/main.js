/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={"./node_modules/@tannin/compile/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@tannin/postfix/index.js"),s=n("./node_modules/@tannin/evaluate/index.js");function r(e){var t=(0,o.default)(e);return function(e){return(0,s.default)(t,e)}}},"./node_modules/@tannin/evaluate/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o={"!":function(e){return!e},"*":function(e,t){return e*t},"/":function(e,t){return e/t},"%":function(e,t){return e%t},"+":function(e,t){return e+t},"-":function(e,t){return e-t},"<":function(e,t){return e<t},"<=":function(e,t){return e<=t},">":function(e,t){return e>t},">=":function(e,t){return e>=t},"==":function(e,t){return e===t},"!=":function(e,t){return e!==t},"&&":function(e,t){return e&&t},"||":function(e,t){return e||t},"?:":function(e,t,n){if(e)throw t;return n}};function s(e,t){var n,s,r,i,a,l,c=[];for(n=0;n<e.length;n++){if(a=e[n],i=o[a]){for(s=i.length,r=Array(s);s--;)r[s]=c.pop();try{l=i.apply(null,r)}catch(e){return e}}else l=t.hasOwnProperty(a)?t[a]:+a;c.push(l)}return c[0]}},"./node_modules/@tannin/plural-forms/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/@tannin/compile/index.js");function s(e){var t=(0,o.default)(e);return function(e){return+t({n:e})}}},"./node_modules/@tannin/postfix/index.js":(e,t,n)=>{"use strict";var o,s,r,i;function a(e){for(var t,n,a,l,c=[],u=[];t=e.match(i);){for(n=t[0],(a=e.substr(0,t.index).trim())&&c.push(a);l=u.pop();){if(r[n]){if(r[n][0]===l){n=r[n][1]||n;break}}else if(s.indexOf(l)>=0||o[l]<o[n]){u.push(l);break}c.push(l)}r[n]||u.push(n),e=e.substr(t.index+n.length)}return(e=e.trim())&&c.push(e),c.concat(u.reverse())}n.r(t),n.d(t,{default:()=>a}),o={"(":9,"!":8,"*":7,"/":7,"%":7,"+":6,"-":6,"<":5,"<=":5,">":5,">=":5,"==":4,"!=":4,"&&":3,"||":2,"?":1,"?:":1},s=["(","?"],r={")":["("],":":["?","?:"]},i=/<=|>=|==|!=|&&|\|\||\?:|\(|!|\*|\/|%|\+|-|<|>|\?|\)|:/},"./node_modules/@vue/devtools-api/lib/esm/const.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{HOOK_PLUGIN_SETTINGS_SET:()=>s,HOOK_SETUP:()=>o});const o="devtools-plugin:setup",s="plugin:settings:set"},"./node_modules/@vue/devtools-api/lib/esm/env.js":(e,t,n)=>{"use strict";function o(){return s().__VUE_DEVTOOLS_GLOBAL_HOOK__}function s(){return"undefined"!=typeof navigator&&"undefined"!=typeof window?window:void 0!==n.g?n.g:{}}n.r(t),n.d(t,{getDevtoolsGlobalHook:()=>o,getTarget:()=>s,isProxyAvailable:()=>r});const r="function"==typeof Proxy},"./node_modules/@vue/devtools-api/lib/esm/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isPerformanceSupported:()=>i.isPerformanceSupported,now:()=>i.now,setupDevtoolsPlugin:()=>a});var o=n("./node_modules/@vue/devtools-api/lib/esm/env.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/const.js"),r=n("./node_modules/@vue/devtools-api/lib/esm/proxy.js"),i=n("./node_modules/@vue/devtools-api/lib/esm/time.js");function a(e,t){const n=e,i=(0,o.getTarget)(),a=(0,o.getDevtoolsGlobalHook)(),l=o.isProxyAvailable&&n.enableEarlyProxy;if(!a||!i.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__&&l){const e=l?new r.ApiProxy(n,a):null;(i.__VUE_DEVTOOLS_PLUGINS__=i.__VUE_DEVTOOLS_PLUGINS__||[]).push({pluginDescriptor:n,setupFn:t,proxy:e}),e&&t(e.proxiedTarget)}else a.emit(s.HOOK_SETUP,e,t)}},"./node_modules/@vue/devtools-api/lib/esm/proxy.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{ApiProxy:()=>r});var o=n("./node_modules/@vue/devtools-api/lib/esm/const.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/time.js");class r{constructor(e,t){this.target=null,this.targetQueue=[],this.onQueue=[],this.plugin=e,this.hook=t;const n={};if(e.settings)for(const t in e.settings){const o=e.settings[t];n[t]=o.defaultValue}const r=`__vue-devtools-plugin-settings__${e.id}`;let i=Object.assign({},n);try{const e=localStorage.getItem(r),t=JSON.parse(e);Object.assign(i,t)}catch(e){}this.fallbacks={getSettings:()=>i,setSettings(e){try{localStorage.setItem(r,JSON.stringify(e))}catch(e){}i=e},now:()=>(0,s.now)()},t&&t.on(o.HOOK_PLUGIN_SETTINGS_SET,((e,t)=>{e===this.plugin.id&&this.fallbacks.setSettings(t)})),this.proxiedOn=new Proxy({},{get:(e,t)=>this.target?this.target.on[t]:(...e)=>{this.onQueue.push({method:t,args:e})}}),this.proxiedTarget=new Proxy({},{get:(e,t)=>this.target?this.target[t]:"on"===t?this.proxiedOn:Object.keys(this.fallbacks).includes(t)?(...e)=>(this.targetQueue.push({method:t,args:e,resolve:()=>{}}),this.fallbacks[t](...e)):(...e)=>new Promise((n=>{this.targetQueue.push({method:t,args:e,resolve:n})}))})}async setRealTarget(e){this.target=e;for(const e of this.onQueue)this.target.on[e.method](...e.args);for(const e of this.targetQueue)e.resolve(await this.target[e.method](...e.args))}}},"./node_modules/@vue/devtools-api/lib/esm/time.js":(e,t,n)=>{"use strict";let o,s;function r(){var e;return void 0!==o||("undefined"!=typeof window&&window.performance?(o=!0,s=window.performance):void 0!==n.g&&(null===(e=n.g.perf_hooks)||void 0===e?void 0:e.performance)?(o=!0,s=n.g.perf_hooks.performance):o=!1),o}function i(){return r()?s.now():Date.now()}n.r(t),n.d(t,{isPerformanceSupported:()=>r,now:()=>i})},"./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{EffectScope:()=>i,ITERATE_KEY:()=>y,ReactiveEffect:()=>_,computed:()=>tt,customRef:()=>qe,deferredComputed:()=>at,effect:()=>w,effectScope:()=>a,enableTracking:()=>O,getCurrentScope:()=>c,isProxy:()=>Me,isReactive:()=>Ce,isReadonly:()=>Ee,isRef:()=>Ne,isShallow:()=>Te,markRaw:()=>Re,onScopeDispose:()=>u,pauseTracking:()=>P,proxyRefs:()=>Ge,reactive:()=>Se,readonly:()=>je,ref:()=>Fe,resetTracking:()=>C,shallowReactive:()=>ke,shallowReadonly:()=>Pe,shallowRef:()=>Ve,stop:()=>S,toRaw:()=>Ae,toRef:()=>Xe,toRefs:()=>Ke,track:()=>E,trigger:()=>M,triggerRef:()=>He,unref:()=>Ue});var o=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js");function s(e,...t){console.warn(`[Vue warn] ${e}`,...t)}let r;class i{constructor(e=!1){this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=r,!e&&r&&(this.index=(r.scopes||(r.scopes=[])).push(this)-1)}run(e){if(this.active){const t=r;try{return r=this,e()}finally{r=t}}else s("cannot run an inactive effect scope.")}on(){r=this}off(){r=this.parent}stop(e){if(this.active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0,this.active=!1}}}function a(e){return new i(e)}function l(e,t=r){t&&t.active&&t.effects.push(e)}function c(){return r}function u(e){r?r.cleanups.push(e):s("onScopeDispose() is called when there is no active effect scope to be associated with.")}const d=e=>{const t=new Set(e);return t.w=0,t.n=0,t},h=e=>(e.w&v)>0,p=e=>(e.n&v)>0,f=new WeakMap;let m,g=0,v=1;const y=Symbol("iterate"),b=Symbol("Map key iterate");class _{constructor(e,t=null,n){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,l(this,n)}run(){if(!this.active)return this.fn();let e=m,t=k;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=m,m=this,k=!0,v=1<<++g,g<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=v})(this):x(this),this.fn()}finally{g<=30&&(e=>{const{deps:t}=e;if(t.length){let n=0;for(let o=0;o<t.length;o++){const s=t[o];h(s)&&!p(s)?s.delete(e):t[n++]=s,s.w&=~v,s.n&=~v}t.length=n}})(this),v=1<<--g,m=this.parent,k=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){m===this?this.deferStop=!0:this.active&&(x(this),this.onStop&&this.onStop(),this.active=!1)}}function x(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}function w(e,t){e.effect&&(e=e.effect.fn);const n=new _(e);t&&((0,o.extend)(n,t),t.scope&&l(n,t.scope)),t&&t.lazy||n.run();const s=n.run.bind(n);return s.effect=n,s}function S(e){e.effect.stop()}let k=!0;const j=[];function P(){j.push(k),k=!1}function O(){j.push(k),k=!0}function C(){const e=j.pop();k=void 0===e||e}function E(e,t,n){if(k&&m){let o=f.get(e);o||f.set(e,o=new Map);let s=o.get(n);s||o.set(n,s=d()),T(s,{effect:m,target:e,type:t,key:n})}}function T(e,t){let n=!1;g<=30?p(e)||(e.n|=v,n=!h(e)):n=!e.has(m),n&&(e.add(m),m.deps.push(e),m.onTrack&&m.onTrack(Object.assign({effect:m},t)))}function M(e,t,n,s,r,i){const a=f.get(e);if(!a)return;let l=[];if("clear"===t)l=[...a.values()];else if("length"===n&&(0,o.isArray)(e))a.forEach(((e,t)=>{("length"===t||t>=s)&&l.push(e)}));else switch(void 0!==n&&l.push(a.get(n)),t){case"add":(0,o.isArray)(e)?(0,o.isIntegerKey)(n)&&l.push(a.get("length")):(l.push(a.get(y)),(0,o.isMap)(e)&&l.push(a.get(b)));break;case"delete":(0,o.isArray)(e)||(l.push(a.get(y)),(0,o.isMap)(e)&&l.push(a.get(b)));break;case"set":(0,o.isMap)(e)&&l.push(a.get(y))}const c={target:e,type:t,key:n,newValue:s,oldValue:r,oldTarget:i};if(1===l.length)l[0]&&A(l[0],c);else{const e=[];for(const t of l)t&&e.push(...t);A(d(e),c)}}function A(e,t){const n=(0,o.isArray)(e)?e:[...e];for(const e of n)e.computed&&R(e,t);for(const e of n)e.computed||R(e,t)}function R(e,t){(e!==m||e.allowRecurse)&&(e.onTrigger&&e.onTrigger((0,o.extend)({effect:e},t)),e.scheduler?e.scheduler():e.run())}const L=(0,o.makeMap)("__proto__,__v_isRef,__isVue"),D=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(o.isSymbol)),B=z(),I=z(!1,!0),N=z(!0),F=z(!0,!0),V=$();function $(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=Ae(this);for(let e=0,t=this.length;e<t;e++)E(n,"get",e+"");const o=n[t](...e);return-1===o||!1===o?n[t](...e.map(Ae)):o}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){P();const n=Ae(this)[t].apply(this,e);return C(),n}})),e}function z(e=!1,t=!1){return function(n,s,r){if("__v_isReactive"===s)return!e;if("__v_isReadonly"===s)return e;if("__v_isShallow"===s)return t;if("__v_raw"===s&&r===(e?t?we:xe:t?_e:be).get(n))return n;const i=(0,o.isArray)(n);if(!e&&i&&(0,o.hasOwn)(V,s))return Reflect.get(V,s,r);const a=Reflect.get(n,s,r);return((0,o.isSymbol)(s)?D.has(s):L(s))?a:(e||E(n,"get",s),t?a:Ne(a)?i&&(0,o.isIntegerKey)(s)?a:a.value:(0,o.isObject)(a)?e?je(a):Se(a):a)}}const H=W(),U=W(!0);function W(e=!1){return function(t,n,s,r){let i=t[n];if(Ee(i)&&Ne(i)&&!Ne(s))return!1;if(!e&&(Te(s)||Ee(s)||(i=Ae(i),s=Ae(s)),!(0,o.isArray)(t)&&Ne(i)&&!Ne(s)))return i.value=s,!0;const a=(0,o.isArray)(t)&&(0,o.isIntegerKey)(n)?Number(n)<t.length:(0,o.hasOwn)(t,n),l=Reflect.set(t,n,s,r);return t===Ae(r)&&(a?(0,o.hasChanged)(s,i)&&M(t,"set",n,s,i):M(t,"add",n,s)),l}}const G={get:B,set:H,deleteProperty:function(e,t){const n=(0,o.hasOwn)(e,t),s=e[t],r=Reflect.deleteProperty(e,t);return r&&n&&M(e,"delete",t,void 0,s),r},has:function(e,t){const n=Reflect.has(e,t);return(0,o.isSymbol)(t)&&D.has(t)||E(e,"has",t),n},ownKeys:function(e){return E(e,"iterate",(0,o.isArray)(e)?"length":y),Reflect.ownKeys(e)}},Y={get:N,set:(e,t)=>(s(`Set operation on key "${String(t)}" failed: target is readonly.`,e),!0),deleteProperty:(e,t)=>(s(`Delete operation on key "${String(t)}" failed: target is readonly.`,e),!0)},q=(0,o.extend)({},G,{get:I,set:U}),K=(0,o.extend)({},Y,{get:F}),J=e=>e,X=e=>Reflect.getPrototypeOf(e);function Q(e,t,n=!1,o=!1){const s=Ae(e=e.__v_raw),r=Ae(t);n||(t!==r&&E(s,"get",t),E(s,"get",r));const{has:i}=X(s),a=o?J:n?De:Le;return i.call(s,t)?a(e.get(t)):i.call(s,r)?a(e.get(r)):void(e!==s&&e.get(t))}function Z(e,t=!1){const n=this.__v_raw,o=Ae(n),s=Ae(e);return t||(e!==s&&E(o,"has",e),E(o,"has",s)),e===s?n.has(e):n.has(e)||n.has(s)}function ee(e,t=!1){return e=e.__v_raw,!t&&E(Ae(e),"iterate",y),Reflect.get(e,"size",e)}function te(e){e=Ae(e);const t=Ae(this);return X(t).has.call(t,e)||(t.add(e),M(t,"add",e,e)),this}function ne(e,t){t=Ae(t);const n=Ae(this),{has:s,get:r}=X(n);let i=s.call(n,e);i?ye(n,s,e):(e=Ae(e),i=s.call(n,e));const a=r.call(n,e);return n.set(e,t),i?(0,o.hasChanged)(t,a)&&M(n,"set",e,t,a):M(n,"add",e,t),this}function oe(e){const t=Ae(this),{has:n,get:o}=X(t);let s=n.call(t,e);s?ye(t,n,e):(e=Ae(e),s=n.call(t,e));const r=o?o.call(t,e):void 0,i=t.delete(e);return s&&M(t,"delete",e,void 0,r),i}function se(){const e=Ae(this),t=0!==e.size,n=(0,o.isMap)(e)?new Map(e):new Set(e),s=e.clear();return t&&M(e,"clear",void 0,void 0,n),s}function re(e,t){return function(n,o){const s=this,r=s.__v_raw,i=Ae(r),a=t?J:e?De:Le;return!e&&E(i,"iterate",y),r.forEach(((e,t)=>n.call(o,a(e),a(t),s)))}}function ie(e,t,n){return function(...s){const r=this.__v_raw,i=Ae(r),a=(0,o.isMap)(i),l="entries"===e||e===Symbol.iterator&&a,c="keys"===e&&a,u=r[e](...s),d=n?J:t?De:Le;return!t&&E(i,"iterate",c?b:y),{next(){const{value:e,done:t}=u.next();return t?{value:e,done:t}:{value:l?[d(e[0]),d(e[1])]:d(e),done:t}},[Symbol.iterator](){return this}}}}function ae(e){return function(...t){{const n=t[0]?`on key "${t[0]}" `:"";console.warn(`${(0,o.capitalize)(e)} operation ${n}failed: target is readonly.`,Ae(this))}return"delete"!==e&&this}}function le(){const e={get(e){return Q(this,e)},get size(){return ee(this)},has:Z,add:te,set:ne,delete:oe,clear:se,forEach:re(!1,!1)},t={get(e){return Q(this,e,!1,!0)},get size(){return ee(this)},has:Z,add:te,set:ne,delete:oe,clear:se,forEach:re(!1,!0)},n={get(e){return Q(this,e,!0)},get size(){return ee(this,!0)},has(e){return Z.call(this,e,!0)},add:ae("add"),set:ae("set"),delete:ae("delete"),clear:ae("clear"),forEach:re(!0,!1)},o={get(e){return Q(this,e,!0,!0)},get size(){return ee(this,!0)},has(e){return Z.call(this,e,!0)},add:ae("add"),set:ae("set"),delete:ae("delete"),clear:ae("clear"),forEach:re(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((s=>{e[s]=ie(s,!1,!1),n[s]=ie(s,!0,!1),t[s]=ie(s,!1,!0),o[s]=ie(s,!0,!0)})),[e,n,t,o]}const[ce,ue,de,he]=le();function pe(e,t){const n=t?e?he:de:e?ue:ce;return(t,s,r)=>"__v_isReactive"===s?!e:"__v_isReadonly"===s?e:"__v_raw"===s?t:Reflect.get((0,o.hasOwn)(n,s)&&s in t?n:t,s,r)}const fe={get:pe(!1,!1)},me={get:pe(!1,!0)},ge={get:pe(!0,!1)},ve={get:pe(!0,!0)};function ye(e,t,n){const s=Ae(n);if(s!==n&&t.call(e,s)){const t=(0,o.toRawType)(e);console.warn(`Reactive ${t} contains both the raw and reactive versions of the same object${"Map"===t?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}const be=new WeakMap,_e=new WeakMap,xe=new WeakMap,we=new WeakMap;function Se(e){return Ee(e)?e:Oe(e,!1,G,fe,be)}function ke(e){return Oe(e,!1,q,me,_e)}function je(e){return Oe(e,!0,Y,ge,xe)}function Pe(e){return Oe(e,!0,K,ve,we)}function Oe(e,t,n,s,r){if(!(0,o.isObject)(e))return console.warn(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const i=r.get(e);if(i)return i;const a=(l=e).__v_skip||!Object.isExtensible(l)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((0,o.toRawType)(l));var l;if(0===a)return e;const c=new Proxy(e,2===a?s:n);return r.set(e,c),c}function Ce(e){return Ee(e)?Ce(e.__v_raw):!(!e||!e.__v_isReactive)}function Ee(e){return!(!e||!e.__v_isReadonly)}function Te(e){return!(!e||!e.__v_isShallow)}function Me(e){return Ce(e)||Ee(e)}function Ae(e){const t=e&&e.__v_raw;return t?Ae(t):e}function Re(e){return(0,o.def)(e,"__v_skip",!0),e}const Le=e=>(0,o.isObject)(e)?Se(e):e,De=e=>(0,o.isObject)(e)?je(e):e;function Be(e){k&&m&&T((e=Ae(e)).dep||(e.dep=d()),{target:e,type:"get",key:"value"})}function Ie(e,t){(e=Ae(e)).dep&&A(e.dep,{target:e,type:"set",key:"value",newValue:t})}function Ne(e){return!(!e||!0!==e.__v_isRef)}function Fe(e){return $e(e,!1)}function Ve(e){return $e(e,!0)}function $e(e,t){return Ne(e)?e:new ze(e,t)}class ze{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:Ae(e),this._value=t?e:Le(e)}get value(){return Be(this),this._value}set value(e){const t=this.__v_isShallow||Te(e)||Ee(e);e=t?e:Ae(e),(0,o.hasChanged)(e,this._rawValue)&&(this._rawValue=e,this._value=t?e:Le(e),Ie(this,e))}}function He(e){Ie(e,e.value)}function Ue(e){return Ne(e)?e.value:e}const We={get:(e,t,n)=>Ue(Reflect.get(e,t,n)),set:(e,t,n,o)=>{const s=e[t];return Ne(s)&&!Ne(n)?(s.value=n,!0):Reflect.set(e,t,n,o)}};function Ge(e){return Ce(e)?e:new Proxy(e,We)}class Ye{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:n}=e((()=>Be(this)),(()=>Ie(this)));this._get=t,this._set=n}get value(){return this._get()}set value(e){this._set(e)}}function qe(e){return new Ye(e)}function Ke(e){Me(e)||console.warn("toRefs() expects a reactive object but received a plain one.");const t=(0,o.isArray)(e)?new Array(e.length):{};for(const n in e)t[n]=Xe(e,n);return t}class Je{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Xe(e,t,n){const o=e[t];return Ne(o)?o:new Je(e,t,n)}var Qe,Ze;class et{constructor(e,t,n,o){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this[Qe]=!1,this._dirty=!0,this.effect=new _(e,(()=>{this._dirty||(this._dirty=!0,Ie(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!o,this.__v_isReadonly=n}get value(){const e=Ae(this);return Be(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}function tt(e,t,n=!1){let s,r;const i=(0,o.isFunction)(e);i?(s=e,r=()=>{console.warn("Write operation failed: computed value is readonly")}):(s=e.get,r=e.set);const a=new et(s,r,i||!r,n);return t&&!n&&(a.effect.onTrack=t.onTrack,a.effect.onTrigger=t.onTrigger),a}Qe="__v_isReadonly";const nt=Promise.resolve(),ot=[];let st=!1;const rt=()=>{for(let e=0;e<ot.length;e++)ot[e]();ot.length=0,st=!1};class it{constructor(e){let t;this.dep=void 0,this._dirty=!0,this.__v_isRef=!0,this[Ze]=!0;let n=!1,o=!1;this.effect=new _(e,(e=>{if(this.dep){if(e)t=this._value,n=!0;else if(!o){const e=n?t:this._value;o=!0,n=!1,s=()=>{this.effect.active&&this._get()!==e&&Ie(this),o=!1},ot.push(s),st||(st=!0,nt.then(rt))}for(const e of this.dep)e.computed instanceof it&&e.scheduler(!0)}var s;this._dirty=!0})),this.effect.computed=this}_get(){return this._dirty?(this._dirty=!1,this._value=this.effect.run()):this._value}get value(){return Be(this),Ae(this)._get()}}function at(e){return new it(e)}Ze="__v_isReadonly"},"./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>Ve,Comment:()=>Fn,EffectScope:()=>o.EffectScope,Fragment:()=>In,KeepAlive:()=>Qe,ReactiveEffect:()=>o.ReactiveEffect,Static:()=>Vn,Suspense:()=>_e,Teleport:()=>Bn,Text:()=>Nn,callWithAsyncErrorHandling:()=>p,callWithErrorHandling:()=>h,camelize:()=>s.camelize,capitalize:()=>s.capitalize,cloneVNode:()=>io,compatUtils:()=>cs,computed:()=>$o,createBlock:()=>Jn,createCommentVNode:()=>uo,createElementBlock:()=>Kn,createElementVNode:()=>oo,createHydrationRenderer:()=>Cn,createPropsRestProxy:()=>Xo,createRenderer:()=>On,createSlots:()=>Et,createStaticVNode:()=>co,createTextVNode:()=>lo,createVNode:()=>so,customRef:()=>o.customRef,defineAsyncComponent:()=>Ke,defineComponent:()=>Ye,defineEmits:()=>Uo,defineExpose:()=>Wo,defineProps:()=>Ho,devtools:()=>$,effect:()=>o.effect,effectScope:()=>o.effectScope,getCurrentInstance:()=>xo,getCurrentScope:()=>o.getCurrentScope,getTransitionRawChildren:()=>Ge,guardReactiveProps:()=>ro,h:()=>Zo,handleError:()=>f,initCustomFormatter:()=>os,inject:()=>Ce,isMemoSame:()=>rs,isProxy:()=>o.isProxy,isReactive:()=>o.isReactive,isReadonly:()=>o.isReadonly,isRef:()=>o.isRef,isRuntimeOnly:()=>Ro,isShallow:()=>o.isShallow,isVNode:()=>Xn,markRaw:()=>o.markRaw,mergeDefaults:()=>Jo,mergeProps:()=>mo,nextTick:()=>k,normalizeClass:()=>s.normalizeClass,normalizeProps:()=>s.normalizeProps,normalizeStyle:()=>s.normalizeStyle,onActivated:()=>et,onBeforeMount:()=>lt,onBeforeUnmount:()=>ht,onBeforeUpdate:()=>ut,onDeactivated:()=>tt,onErrorCaptured:()=>vt,onMounted:()=>ct,onRenderTracked:()=>gt,onRenderTriggered:()=>mt,onScopeDispose:()=>o.onScopeDispose,onServerPrefetch:()=>ft,onUnmounted:()=>pt,onUpdated:()=>dt,openBlock:()=>Hn,popScopeId:()=>ie,provide:()=>Oe,proxyRefs:()=>o.proxyRefs,pushScopeId:()=>re,queuePostFlushCb:()=>O,reactive:()=>o.reactive,readonly:()=>o.readonly,ref:()=>o.ref,registerRuntimeCompiler:()=>Ao,renderList:()=>Ct,renderSlot:()=>Tt,resolveComponent:()=>wt,resolveDirective:()=>jt,resolveDynamicComponent:()=>kt,resolveFilter:()=>ls,resolveTransitionHooks:()=>ze,setBlockTracking:()=>Yn,setDevtoolsHook:()=>W,setTransitionHooks:()=>We,shallowReactive:()=>o.shallowReactive,shallowReadonly:()=>o.shallowReadonly,shallowRef:()=>o.shallowRef,ssrContextKey:()=>es,ssrUtils:()=>as,stop:()=>o.stop,toDisplayString:()=>s.toDisplayString,toHandlerKey:()=>s.toHandlerKey,toHandlers:()=>At,toRaw:()=>o.toRaw,toRef:()=>o.toRef,toRefs:()=>o.toRefs,transformVNodeArgs:()=>Zn,triggerRef:()=>o.triggerRef,unref:()=>o.unref,useAttrs:()=>qo,useSSRContext:()=>ts,useSlots:()=>Yo,useTransitionState:()=>Ne,version:()=>is,warn:()=>l,watch:()=>Re,watchEffect:()=>Ee,watchPostEffect:()=>Te,watchSyncEffect:()=>Me,withAsyncContext:()=>Qo,withCtx:()=>le,withDefaults:()=>Go,withDirectives:()=>bt,withMemo:()=>ss,withScopeId:()=>ae});var o=n("./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js"),s=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js");const r=[];function i(e){r.push(e)}function a(){r.pop()}function l(e,...t){(0,o.pauseTracking)();const n=r.length?r[r.length-1].component:null,s=n&&n.appContext.config.warnHandler,i=function(){let e=r[r.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}();if(s)h(s,n,11,[e+t.join(""),n&&n.proxy,i.map((({vnode:e})=>`at <${Fo(n,e.type)}>`)).join("\n"),i]);else{const n=[`[Vue warn]: ${e}`,...t];i.length&&n.push("\n",...function(e){const t=[];return e.forEach(((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=!!e.component&&null==e.component.parent,s=` at <${Fo(e.component,e.type,o)}`,r=">"+n;return e.props?[s,...c(e.props),r]:[s+r]}(e))})),t}(i)),console.warn(...n)}(0,o.resetTracking)()}function c(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach((n=>{t.push(...u(n,e[n]))})),n.length>3&&t.push(" ..."),t}function u(e,t,n){return(0,s.isString)(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?n?t:[`${e}=${t}`]:(0,o.isRef)(t)?(t=u(e,(0,o.toRaw)(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):(0,s.isFunction)(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=(0,o.toRaw)(t),n?t:[`${e}=`,t])}const d={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core"};function h(e,t,n,o){let s;try{s=o?e(...o):e()}catch(e){f(e,t,n)}return s}function p(e,t,n,o){if((0,s.isFunction)(e)){const r=h(e,t,n,o);return r&&(0,s.isPromise)(r)&&r.catch((e=>{f(e,t,n)})),r}const r=[];for(let s=0;s<e.length;s++)r.push(p(e[s],t,n,o));return r}function f(e,t,n,o=!0){const s=t?t.vnode:null;if(t){let o=t.parent;const s=t.proxy,r=d[n];for(;o;){const t=o.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,s,r))return;o=o.parent}const i=t.appContext.config.errorHandler;if(i)return void h(i,null,10,[e,s,r])}!function(e,t,n,o=!0){{const s=d[t];if(n&&i(n),l("Unhandled error"+(s?` during execution of ${s}`:"")),n&&a(),o)throw e;console.error(e)}}(e,n,s,o)}let m=!1,g=!1;const v=[];let y=0;const b=[];let _=null,x=0;const w=Promise.resolve();let S=null;function k(e){const t=S||w;return e?t.then(this?e.bind(this):e):t}function j(e){v.length&&v.includes(e,m&&e.allowRecurse?y+1:y)||(null==e.id?v.push(e):v.splice(function(e){let t=y+1,n=v.length;for(;t<n;){const o=t+n>>>1;T(v[o])<e?t=o+1:n=o}return t}(e.id),0,e),P())}function P(){m||g||(g=!0,S=w.then(A))}function O(e){(0,s.isArray)(e)?b.push(...e):_&&_.includes(e,e.allowRecurse?x+1:x)||b.push(e),P()}function C(e,t=(m?y+1:0)){for(e=e||new Map;t<v.length;t++){const n=v[t];if(n&&n.pre){if(R(e,n))continue;v.splice(t,1),t--,n()}}}function E(e){if(b.length){const t=[...new Set(b)];if(b.length=0,_)return void _.push(...t);for(_=t,e=e||new Map,_.sort(((e,t)=>T(e)-T(t))),x=0;x<_.length;x++)R(e,_[x])||_[x]();_=null,x=0}}const T=e=>null==e.id?1/0:e.id,M=(e,t)=>{const n=T(e)-T(t);if(0===n){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return n};function A(e){g=!1,m=!0,e=e||new Map,v.sort(M);const t=t=>R(e,t);try{for(y=0;y<v.length;y++){const e=v[y];if(e&&!1!==e.active){if(t(e))continue;h(e,null,14)}}}finally{y=0,v.length=0,E(e),m=!1,S=null,(v.length||b.length)&&A(e)}}function R(e,t){if(e.has(t)){const n=e.get(t);if(n>100){const e=t.ownerInstance,n=e&&No(e.type);return l(`Maximum recursive updates exceeded${n?` in component <${n}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`),!0}e.set(t,n+1)}else e.set(t,1)}let L=!1;const D=new Set;(0,s.getGlobalThis)().__VUE_HMR_RUNTIME__={createRecord:V(I),rerender:V((function(e,t){const n=B.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach((e=>{t&&(e.render=t,N(e.type).render=t),e.renderCache=[],L=!0,e.update(),L=!1})))})),reload:V((function(e,t){const n=B.get(e);if(!n)return;t=N(t),F(n.initialDef,t);const o=[...n.instances];for(const e of o){const o=N(e.type);D.has(o)||(o!==n.initialDef&&F(o,t),D.add(o)),e.appContext.optionsCache.delete(e.type),e.ceReload?(D.add(o),e.ceReload(t.styles),D.delete(o)):e.parent?(j(e.parent.update),e.parent.type.__asyncLoader&&e.parent.ceReload&&e.parent.ceReload(t.styles)):e.appContext.reload?e.appContext.reload():"undefined"!=typeof window?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required.")}O((()=>{for(const e of o)D.delete(N(e.type))}))}))};const B=new Map;function I(e,t){return!B.has(e)&&(B.set(e,{initialDef:N(t),instances:new Set}),!0)}function N(e){return Vo(e)?e.__vccOpts:e}function F(e,t){(0,s.extend)(e,t);for(const n in e)"__file"===n||n in t||delete e[n]}function V(e){return(t,n)=>{try{return e(t,n)}catch(e){console.error(e),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}let $,z=[],H=!1;function U(e,...t){$?$.emit(e,...t):H||z.push({event:e,args:t})}function W(e,t){var n,o;$=e,$?($.enabled=!0,z.forEach((({event:e,args:t})=>$.emit(e,...t))),z=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(o=null===(n=window.navigator)||void 0===n?void 0:n.userAgent)||void 0===o?void 0:o.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{W(e,t)})),setTimeout((()=>{$||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,H=!0,z=[])}),3e3)):(H=!0,z=[])}const G=K("component:added"),Y=K("component:updated"),q=K("component:removed");function K(e){return t=>{U(e,t.appContext.app,t.uid,t.parent?t.parent.uid:void 0,t)}}const J=Q("perf:start"),X=Q("perf:end");function Q(e){return(t,n,o)=>{U(e,t.appContext.app,t.uid,t,n,o)}}function Z(e,t,...n){if(e.isUnmounted)return;const o=e.vnode.props||s.EMPTY_OBJ;{const{emitsOptions:o,propsOptions:[r]}=e;if(o)if(t in o){const e=o[t];(0,s.isFunction)(e)&&(e(...n)||l(`Invalid event arguments: event validation failed for event "${t}".`))}else r&&(0,s.toHandlerKey)(t)in r||l(`Component emitted event "${t}" but it is neither declared in the emits option nor as an "${(0,s.toHandlerKey)(t)}" prop.`)}let r=n;const i=t.startsWith("update:"),a=i&&t.slice(7);if(a&&a in o){const e=`${"modelValue"===a?"model":a}Modifiers`,{number:t,trim:i}=o[e]||s.EMPTY_OBJ;i&&(r=n.map((e=>e.trim()))),t&&(r=n.map(s.toNumber))}!function(e,t,n){U("component:emit",e.appContext.app,e,t,n)}(e,t,r);{const n=t.toLowerCase();n!==t&&o[(0,s.toHandlerKey)(n)]&&l(`Event "${n}" is emitted in component ${Fo(e,e.type)} but the handler is registered for "${t}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${(0,s.hyphenate)(t)}" instead of "${t}".`)}let c,u=o[c=(0,s.toHandlerKey)(t)]||o[c=(0,s.toHandlerKey)((0,s.camelize)(t))];!u&&i&&(u=o[c=(0,s.toHandlerKey)((0,s.hyphenate)(t))]),u&&p(u,e,6,r);const d=o[c+"Once"];if(d){if(e.emitted){if(e.emitted[c])return}else e.emitted={};e.emitted[c]=!0,p(d,e,6,r)}}function ee(e,t,n=!1){const o=t.emitsCache,r=o.get(e);if(void 0!==r)return r;const i=e.emits;let a={},l=!1;if(__VUE_OPTIONS_API__&&!(0,s.isFunction)(e)){const o=e=>{const n=ee(e,t,!0);n&&(l=!0,(0,s.extend)(a,n))};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}return i||l?((0,s.isArray)(i)?i.forEach((e=>a[e]=null)):(0,s.extend)(a,i),(0,s.isObject)(e)&&o.set(e,a),a):((0,s.isObject)(e)&&o.set(e,null),null)}function te(e,t){return!(!e||!(0,s.isOn)(t))&&(t=t.slice(2).replace(/Once$/,""),(0,s.hasOwn)(e,t[0].toLowerCase()+t.slice(1))||(0,s.hasOwn)(e,(0,s.hyphenate)(t))||(0,s.hasOwn)(e,t))}let ne=null,oe=null;function se(e){const t=ne;return ne=e,oe=e&&e.type.__scopeId||null,t}function re(e){oe=e}function ie(){oe=null}const ae=e=>le;function le(e,t=ne,n){if(!t)return e;if(e._n)return e;const o=(...n)=>{o._d&&Yn(-1);const s=se(t);let r;try{r=e(...n)}finally{se(s),o._d&&Yn(1)}return Y(t),r};return o._n=!0,o._c=!0,o._d=!0,o}let ce=!1;function ue(){ce=!0}function de(e){const{type:t,vnode:n,proxy:o,withProxy:r,props:i,propsOptions:[a],slots:c,attrs:u,emit:d,render:h,renderCache:p,data:m,setupState:g,ctx:v,inheritAttrs:y}=e;let b,_;const x=se(e);ce=!1;try{if(4&n.shapeFlag){const e=r||o;b=ho(h.call(e,e,p,i,g,m,v)),_=u}else{const e=t;u===i&&ue(),b=ho(e.length>1?e(i,{get attrs(){return ue(),u},slots:c,emit:d}):e(i,null)),_=t.props?u:fe(u)}}catch(t){$n.length=0,f(t,e,1),b=so(Fn)}let w,S=b;if(b.patchFlag>0&&2048&b.patchFlag&&([S,w]=he(b)),_&&!1!==y){const e=Object.keys(_),{shapeFlag:t}=S;if(e.length)if(7&t)a&&e.some(s.isModelListener)&&(_=me(_,a)),S=io(S,_);else if(!ce&&S.type!==Fn){const e=Object.keys(u),t=[],n=[];for(let o=0,r=e.length;o<r;o++){const r=e[o];(0,s.isOn)(r)?(0,s.isModelListener)(r)||t.push(r[2].toLowerCase()+r.slice(3)):n.push(r)}n.length&&l(`Extraneous non-props attributes (${n.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`),t.length&&l(`Extraneous non-emits event listeners (${t.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`)}}return n.dirs&&(ge(S)||l("Runtime directive used on component with non-element root node. The directives will not function as intended."),S=io(S),S.dirs=S.dirs?S.dirs.concat(n.dirs):n.dirs),n.transition&&(ge(S)||l("Component inside <Transition> renders non-element root node that cannot be animated."),S.transition=n.transition),w?w(S):b=S,se(x),b}const he=e=>{const t=e.children,n=e.dynamicChildren,o=pe(t);if(!o)return[e,void 0];const s=t.indexOf(o),r=n?n.indexOf(o):-1;return[ho(o),o=>{t[s]=o,n&&(r>-1?n[r]=o:o.patchFlag>0&&(e.dynamicChildren=[...n,o]))}]};function pe(e){let t;for(let n=0;n<e.length;n++){const o=e[n];if(!Xn(o))return;if(o.type!==Fn||"v-if"===o.children){if(t)return;t=o}}return t}const fe=e=>{let t;for(const n in e)("class"===n||"style"===n||(0,s.isOn)(n))&&((t||(t={}))[n]=e[n]);return t},me=(e,t)=>{const n={};for(const o in e)(0,s.isModelListener)(o)&&o.slice(9)in t||(n[o]=e[o]);return n},ge=e=>7&e.shapeFlag||e.type===Fn;function ve(e,t,n){const o=Object.keys(t);if(o.length!==Object.keys(e).length)return!0;for(let s=0;s<o.length;s++){const r=o[s];if(t[r]!==e[r]&&!te(n,r))return!0}return!1}function ye({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const be=e=>e.__isSuspense,_e={name:"Suspense",__isSuspense:!0,process(e,t,n,o,s,r,i,a,l,c){null==e?function(e,t,n,o,s,r,i,a,l){const{p:c,o:{createElement:u}}=l,d=u("div"),h=e.suspense=Se(e,s,o,t,d,n,r,i,a,l);c(null,h.pendingBranch=e.ssContent,d,null,o,h,r,i),h.deps>0?(xe(e,"onPending"),xe(e,"onFallback"),c(null,e.ssFallback,t,n,o,null,r,i),Pe(h,e.ssFallback)):h.resolve()}(t,n,o,s,r,i,a,l,c):function(e,t,n,o,s,r,i,a,{p:l,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const h=t.ssContent,p=t.ssFallback,{activeBranch:f,pendingBranch:m,isInFallback:g,isHydrating:v}=d;if(m)d.pendingBranch=h,Qn(h,m)?(l(m,h,d.hiddenContainer,null,s,d,r,i,a),d.deps<=0?d.resolve():g&&(l(f,p,n,o,s,null,r,i,a),Pe(d,p))):(d.pendingId++,v?(d.isHydrating=!1,d.activeBranch=m):c(m,s,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),g?(l(null,h,d.hiddenContainer,null,s,d,r,i,a),d.deps<=0?d.resolve():(l(f,p,n,o,s,null,r,i,a),Pe(d,p))):f&&Qn(h,f)?(l(f,h,n,o,s,d,r,i,a),d.resolve(!0)):(l(null,h,d.hiddenContainer,null,s,d,r,i,a),d.deps<=0&&d.resolve()));else if(f&&Qn(h,f))l(f,h,n,o,s,d,r,i,a),Pe(d,h);else if(xe(t,"onPending"),d.pendingBranch=h,d.pendingId++,l(null,h,d.hiddenContainer,null,s,d,r,i,a),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(p)}),e):0===e&&d.fallback(p)}}(e,t,n,o,s,i,a,l,c)},hydrate:function(e,t,n,o,s,r,i,a,l){const c=t.suspense=Se(t,o,n,e.parentNode,document.createElement("div"),null,s,r,i,a,!0),u=l(e,c.pendingBranch=t.ssContent,n,c,r,i);return 0===c.deps&&c.resolve(),u},create:Se,normalize:function(e){const{shapeFlag:t,children:n}=e,o=32&t;e.ssContent=ke(o?n.default:n),e.ssFallback=o?ke(n.fallback):so(Fn)}};function xe(e,t){const n=e.props&&e.props[t];(0,s.isFunction)(n)&&n()}let we=!1;function Se(e,t,n,o,r,l,c,u,d,h,p=!1){we||(we=!0,console[console.info?"info":"log"]("<Suspense> is an experimental feature and its API will likely change."));const{p:m,m:g,um:v,n:y,o:{parentNode:b,remove:_}}=h,x=(0,s.toNumber)(e.props&&e.props.timeout),w={vnode:e,parent:t,parentComponent:n,isSVG:c,container:o,hiddenContainer:r,anchor:l,deps:0,pendingId:0,timeout:"number"==typeof x?x:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:p,isUnmounted:!1,effects:[],resolve(e=!1){if(!e&&!w.pendingBranch)throw new Error("suspense.resolve() is called without a pending branch.");if(w.isUnmounted)throw new Error("suspense.resolve() is called on an already unmounted suspense boundary.");const{vnode:t,activeBranch:n,pendingBranch:o,pendingId:s,effects:r,parentComponent:i,container:a}=w;if(w.isHydrating)w.isHydrating=!1;else if(!e){const e=n&&o.transition&&"out-in"===o.transition.mode;e&&(n.transition.afterLeave=()=>{s===w.pendingId&&g(o,a,t,0)});let{anchor:t}=w;n&&(t=y(n),v(n,i,w,!0)),e||g(o,a,t,0)}Pe(w,o),w.pendingBranch=null,w.isInFallback=!1;let l=w.parent,c=!1;for(;l;){if(l.pendingBranch){l.effects.push(...r),c=!0;break}l=l.parent}c||O(r),w.effects=[],xe(t,"onResolve")},fallback(e){if(!w.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:o,container:s,isSVG:r}=w;xe(t,"onFallback");const i=y(n),a=()=>{w.isInFallback&&(m(null,e,s,i,o,null,r,u,d),Pe(w,e))},l=e.transition&&"out-in"===e.transition.mode;l&&(n.transition.afterLeave=a),w.isInFallback=!0,v(n,o,null,!0),l||a()},move(e,t,n){w.activeBranch&&g(w.activeBranch,e,t,n),w.container=e},next:()=>w.activeBranch&&y(w.activeBranch),registerDep(e,t){const n=!!w.pendingBranch;n&&w.deps++;const o=e.vnode.el;e.asyncDep.catch((t=>{f(t,e,0)})).then((s=>{if(e.isUnmounted||w.isUnmounted||w.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:r}=e;i(r),Mo(e,s,!1),o&&(r.el=o);const l=!o&&e.subTree.el;t(e,r,b(o||e.subTree.el),o?null:y(e.subTree),w,c,d),l&&_(l),ye(e,r.el),a(),n&&0==--w.deps&&w.resolve()}))},unmount(e,t){w.isUnmounted=!0,w.activeBranch&&v(w.activeBranch,n,e,t),w.pendingBranch&&v(w.pendingBranch,n,e,t)}};return w}function ke(e){let t;if((0,s.isFunction)(e)){const n=Gn&&e._c;n&&(e._d=!1,Hn()),e=e(),n&&(e._d=!0,t=zn,Un())}if((0,s.isArray)(e)){const t=pe(e);t||l("<Suspense> slots expect a single root node."),e=t}return e=ho(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function je(e,t){t&&t.pendingBranch?(0,s.isArray)(e)?t.effects.push(...e):t.effects.push(e):O(e)}function Pe(e,t){e.activeBranch=t;const{vnode:n,parentComponent:o}=e,s=n.el=t.el;o&&o.subTree===n&&(o.vnode.el=s,ye(o,s))}function Oe(e,t){if(_o){let n=_o.provides;const o=_o.parent&&_o.parent.provides;o===n&&(n=_o.provides=Object.create(o)),n[e]=t}else l("provide() can only be used inside setup().")}function Ce(e,t,n=!1){const o=_o||ne;if(o){const r=null==o.parent?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides;if(r&&e in r)return r[e];if(arguments.length>1)return n&&(0,s.isFunction)(t)?t.call(o.proxy):t;l(`injection "${String(e)}" not found.`)}else l("inject() can only be used inside setup() or functional components.")}function Ee(e,t){return Le(e,null,t)}function Te(e,t){return Le(e,null,Object.assign(Object.assign({},t),{flush:"post"}))}function Me(e,t){return Le(e,null,Object.assign(Object.assign({},t),{flush:"sync"}))}const Ae={};function Re(e,t,n){return(0,s.isFunction)(t)||l("`watch(fn, options?)` signature has been moved to a separate API. Use `watchEffect(fn, options?)` instead. `watch` now only supports `watch(source, cb, options?) signature."),Le(e,t,n)}function Le(e,t,{immediate:n,deep:r,flush:i,onTrack:a,onTrigger:c}=s.EMPTY_OBJ){t||(void 0!==n&&l('watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.'),void 0!==r&&l('watch() "deep" option is only respected when using the watch(source, callback, options?) signature.'));const u=e=>{l("Invalid watch source: ",e,"A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.")},d=_o;let f,m,g=!1,v=!1;if((0,o.isRef)(e)?(f=()=>e.value,g=(0,o.isShallow)(e)):(0,o.isReactive)(e)?(f=()=>e,r=!0):(0,s.isArray)(e)?(v=!0,g=e.some((e=>(0,o.isReactive)(e)||(0,o.isShallow)(e))),f=()=>e.map((e=>(0,o.isRef)(e)?e.value:(0,o.isReactive)(e)?Ie(e):(0,s.isFunction)(e)?h(e,d,2):void u(e)))):(0,s.isFunction)(e)?f=t?()=>h(e,d,2):()=>{if(!d||!d.isUnmounted)return m&&m(),p(e,d,3,[y])}:(f=s.NOOP,u(e)),t&&r){const e=f;f=()=>Ie(e())}let y=e=>{m=w.onStop=()=>{h(e,d,4)}};if(Eo)return y=s.NOOP,t?n&&p(t,d,3,[f(),v?[]:void 0,y]):f(),s.NOOP;let b=v?[]:Ae;const _=()=>{if(w.active)if(t){const e=w.run();(r||g||(v?e.some(((e,t)=>(0,s.hasChanged)(e,b[t]))):(0,s.hasChanged)(e,b)))&&(m&&m(),p(t,d,3,[e,b===Ae?void 0:b,y]),b=e)}else w.run()};let x;_.allowRecurse=!!t,"sync"===i?x=_:"post"===i?x=()=>Pn(_,d&&d.suspense):(_.pre=!0,d&&(_.id=d.uid),x=()=>j(_));const w=new o.ReactiveEffect(f,x);return w.onTrack=a,w.onTrigger=c,t?n?_():b=w.run():"post"===i?Pn(w.run.bind(w),d&&d.suspense):w.run(),()=>{w.stop(),d&&d.scope&&(0,s.remove)(d.scope.effects,w)}}function De(e,t,n){const o=this.proxy,r=(0,s.isString)(e)?e.includes(".")?Be(o,e):()=>o[e]:e.bind(o,o);let i;(0,s.isFunction)(t)?i=t:(i=t.handler,n=t);const a=_o;wo(this);const l=Le(r,i.bind(o),n);return a?wo(a):So(),l}function Be(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function Ie(e,t){if(!(0,s.isObject)(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),(0,o.isRef)(e))Ie(e.value,t);else if((0,s.isArray)(e))for(let n=0;n<e.length;n++)Ie(e[n],t);else if((0,s.isSet)(e)||(0,s.isMap)(e))e.forEach((e=>{Ie(e,t)}));else if((0,s.isPlainObject)(e))for(const n in e)Ie(e[n],t);return e}function Ne(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return ct((()=>{e.isMounted=!0})),ht((()=>{e.isUnmounting=!0})),e}const Fe=[Function,Array],Ve={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Fe,onEnter:Fe,onAfterEnter:Fe,onEnterCancelled:Fe,onBeforeLeave:Fe,onLeave:Fe,onAfterLeave:Fe,onLeaveCancelled:Fe,onBeforeAppear:Fe,onAppear:Fe,onAfterAppear:Fe,onAppearCancelled:Fe},setup(e,{slots:t}){const n=xo(),s=Ne();let r;return()=>{const i=t.default&&Ge(t.default(),!0);if(!i||!i.length)return;let a=i[0];if(i.length>1){let e=!1;for(const t of i)if(t.type!==Fn){if(e){l("<transition> can only be used on a single element or component. Use <transition-group> for lists.");break}a=t,e=!0}}const c=(0,o.toRaw)(e),{mode:u}=c;if(u&&"in-out"!==u&&"out-in"!==u&&"default"!==u&&l(`invalid <transition> mode: ${u}`),s.isLeaving)return He(a);const d=Ue(a);if(!d)return He(a);const h=ze(d,c,s,n);We(d,h);const p=n.subTree,f=p&&Ue(p);let m=!1;const{getTransitionKey:g}=d.type;if(g){const e=g();void 0===r?r=e:e!==r&&(r=e,m=!0)}if(f&&f.type!==Fn&&(!Qn(d,f)||m)){const e=ze(f,c,s,n);if(We(f,e),"out-in"===u)return s.isLeaving=!0,e.afterLeave=()=>{s.isLeaving=!1,n.update()},He(a);"in-out"===u&&d.type!==Fn&&(e.delayLeave=(e,t,n)=>{$e(s,f)[String(f.key)]=f,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete h.delayedLeave},h.delayedLeave=n})}return a}}};function $e(e,t){const{leavingVNodes:n}=e;let o=n.get(t.type);return o||(o=Object.create(null),n.set(t.type,o)),o}function ze(e,t,n,o){const{appear:r,mode:i,persisted:a=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:h,onLeave:f,onAfterLeave:m,onLeaveCancelled:g,onBeforeAppear:v,onAppear:y,onAfterAppear:b,onAppearCancelled:_}=t,x=String(e.key),w=$e(n,e),S=(e,t)=>{e&&p(e,o,9,t)},k=(e,t)=>{const n=t[1];S(e,t),(0,s.isArray)(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},j={mode:i,persisted:a,beforeEnter(t){let o=l;if(!n.isMounted){if(!r)return;o=v||l}t._leaveCb&&t._leaveCb(!0);const s=w[x];s&&Qn(e,s)&&s.el._leaveCb&&s.el._leaveCb(),S(o,[t])},enter(e){let t=c,o=u,s=d;if(!n.isMounted){if(!r)return;t=y||c,o=b||u,s=_||d}let i=!1;const a=e._enterCb=t=>{i||(i=!0,S(t?s:o,[e]),j.delayedLeave&&j.delayedLeave(),e._enterCb=void 0)};t?k(t,[e,a]):a()},leave(t,o){const s=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return o();S(h,[t]);let r=!1;const i=t._leaveCb=n=>{r||(r=!0,o(),S(n?g:m,[t]),t._leaveCb=void 0,w[s]===e&&delete w[s])};w[s]=e,f?k(f,[t,i]):i()},clone:e=>ze(e,t,n,o)};return j}function He(e){if(Xe(e))return(e=io(e)).children=null,e}function Ue(e){return Xe(e)?e.children?e.children[0]:void 0:e}function We(e,t){6&e.shapeFlag&&e.component?We(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ge(e,t=!1,n){let o=[],s=0;for(let r=0;r<e.length;r++){let i=e[r];const a=null==n?i.key:String(n)+String(null!=i.key?i.key:r);i.type===In?(128&i.patchFlag&&s++,o=o.concat(Ge(i.children,t,a))):(t||i.type!==Fn)&&o.push(null!=a?io(i,{key:a}):i)}if(s>1)for(let e=0;e<o.length;e++)o[e].patchFlag=-2;return o}function Ye(e){return(0,s.isFunction)(e)?{setup:e,name:e.name}:e}const qe=e=>!!e.type.__asyncLoader;function Ke(e){(0,s.isFunction)(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:r,delay:i=200,timeout:a,suspensible:c=!0,onError:u}=e;let d,h=null,p=0;const m=()=>{let e;return h||(e=h=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),u)return new Promise(((t,n)=>{u(e,(()=>t((p++,h=null,m()))),(()=>n(e)),p+1)}));throw e})).then((t=>{if(e!==h&&h)return h;if(t||l("Async component loader resolved to undefined. If you are using retry(), make sure to return its return value."),t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),t&&!(0,s.isObject)(t)&&!(0,s.isFunction)(t))throw new Error(`Invalid async component load result: ${t}`);return d=t,t})))};return Ye({name:"AsyncComponentWrapper",__asyncLoader:m,get __asyncResolved(){return d},setup(){const e=_o;if(d)return()=>Je(d,e);const t=t=>{h=null,f(t,e,13,!r)};if(c&&e.suspense||Eo)return m().then((t=>()=>Je(t,e))).catch((e=>(t(e),()=>r?so(r,{error:e}):null)));const s=(0,o.ref)(!1),l=(0,o.ref)(),u=(0,o.ref)(!!i);return i&&setTimeout((()=>{u.value=!1}),i),null!=a&&setTimeout((()=>{if(!s.value&&!l.value){const e=new Error(`Async component timed out after ${a}ms.`);t(e),l.value=e}}),a),m().then((()=>{s.value=!0,e.parent&&Xe(e.parent.vnode)&&j(e.parent.update)})).catch((e=>{t(e),l.value=e})),()=>s.value&&d?Je(d,e):l.value&&r?so(r,{error:l.value}):n&&!u.value?so(n):void 0}})}function Je(e,{vnode:{ref:t,props:n,children:o,shapeFlag:s},parent:r}){const i=so(e,n,o);return i.ref=t,i}const Xe=e=>e.type.__isKeepAlive,Qe={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=xo(),o=n.ctx;if(!o.renderer)return()=>{const e=t.default&&t.default();return e&&1===e.length?e[0]:e};const r=new Map,i=new Set;let a=null;n.__v_cache=r;const c=n.suspense,{renderer:{p:u,m:d,um:h,o:{createElement:p}}}=o,f=p("div");function m(e){st(e),h(e,n,c,!0)}function g(e){r.forEach(((t,n)=>{const o=No(t.type);!o||e&&e(o)||v(n)}))}function v(e){const t=r.get(e);a&&t.type===a.type?a&&st(a):m(t),r.delete(e),i.delete(e)}o.activate=(e,t,n,o,r)=>{const i=e.component;d(e,t,n,0,c),u(i.vnode,e,t,n,i,c,o,e.slotScopeIds,r),Pn((()=>{i.isDeactivated=!1,i.a&&(0,s.invokeArrayFns)(i.a);const t=e.props&&e.props.onVnodeMounted;t&&go(t,i.parent,e)}),c),G(i)},o.deactivate=e=>{const t=e.component;d(e,f,null,1,c),Pn((()=>{t.da&&(0,s.invokeArrayFns)(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&go(n,t.parent,e),t.isDeactivated=!0}),c),G(t)},Re((()=>[e.include,e.exclude]),(([e,t])=>{e&&g((t=>Ze(e,t))),t&&g((e=>!Ze(t,e)))}),{flush:"post",deep:!0});let y=null;const b=()=>{null!=y&&r.set(y,rt(n.subTree))};return ct(b),dt(b),ht((()=>{r.forEach((e=>{const{subTree:t,suspense:o}=n,s=rt(t);if(e.type!==s.type)m(e);else{st(s);const e=s.component.da;e&&Pn(e,o)}}))})),()=>{if(y=null,!t.default)return null;const n=t.default(),o=n[0];if(n.length>1)return l("KeepAlive should contain exactly one component child."),a=null,n;if(!Xn(o)||!(4&o.shapeFlag||128&o.shapeFlag))return a=null,o;let s=rt(o);const c=s.type,u=No(qe(s)?s.type.__asyncResolved||{}:c),{include:d,exclude:h,max:p}=e;if(d&&(!u||!Ze(d,u))||h&&u&&Ze(h,u))return a=s,o;const f=null==s.key?c:s.key,m=r.get(f);return s.el&&(s=io(s),128&o.shapeFlag&&(o.ssContent=s)),y=f,m?(s.el=m.el,s.component=m.component,s.transition&&We(s,s.transition),s.shapeFlag|=512,i.delete(f),i.add(f)):(i.add(f),p&&i.size>parseInt(p,10)&&v(i.values().next().value)),s.shapeFlag|=256,a=s,be(o.type)?o:s}}};function Ze(e,t){return(0,s.isArray)(e)?e.some((e=>Ze(e,t))):(0,s.isString)(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function et(e,t){nt(e,"a",t)}function tt(e,t){nt(e,"da",t)}function nt(e,t,n=_o){const o=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(it(t,o,n),n){let e=n.parent;for(;e&&e.parent;)Xe(e.parent.vnode)&&ot(o,t,n,e),e=e.parent}}function ot(e,t,n,o){const r=it(t,e,o,!0);pt((()=>{(0,s.remove)(o[t],r)}),n)}function st(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function rt(e){return 128&e.shapeFlag?e.ssContent:e}function it(e,t,n=_o,r=!1){if(n){const s=n[e]||(n[e]=[]),i=t.__weh||(t.__weh=(...s)=>{if(n.isUnmounted)return;(0,o.pauseTracking)(),wo(n);const r=p(t,n,e,s);return So(),(0,o.resetTracking)(),r});return r?s.unshift(i):s.push(i),i}l(`${(0,s.toHandlerKey)(d[e].replace(/ hook$/,""))} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`)}const at=e=>(t,n=_o)=>(!Eo||"sp"===e)&&it(e,((...e)=>t(...e)),n),lt=at("bm"),ct=at("m"),ut=at("bu"),dt=at("u"),ht=at("bum"),pt=at("um"),ft=at("sp"),mt=at("rtg"),gt=at("rtc");function vt(e,t=_o){it("ec",e,t)}function yt(e){(0,s.isBuiltInDirective)(e)&&l("Do not use built-in directive ids as custom directive id: "+e)}function bt(e,t){const n=ne;if(null===n)return l("withDirectives can only be used inside render functions."),e;const o=Bo(n)||n.proxy,r=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[n,i,a,l=s.EMPTY_OBJ]=t[e];(0,s.isFunction)(n)&&(n={mounted:n,updated:n}),n.deep&&Ie(i),r.push({dir:n,instance:o,value:i,oldValue:void 0,arg:a,modifiers:l})}return e}function _t(e,t,n,s){const r=e.dirs,i=t&&t.dirs;for(let a=0;a<r.length;a++){const l=r[a];i&&(l.oldValue=i[a].value);let c=l.dir[s];c&&((0,o.pauseTracking)(),p(c,n,8,[e.el,l,e,t]),(0,o.resetTracking)())}}const xt="components";function wt(e,t){return Pt(xt,e,!0,t)||e}const St=Symbol();function kt(e){return(0,s.isString)(e)?Pt(xt,e,!1)||e:e||St}function jt(e){return Pt("directives",e)}function Pt(e,t,n=!0,o=!1){const r=ne||_o;if(r){const i=r.type;if(e===xt){const e=No(i,!1);if(e&&(e===t||e===(0,s.camelize)(t)||e===(0,s.capitalize)((0,s.camelize)(t))))return i}const a=Ot(r[e]||i[e],t)||Ot(r.appContext[e],t);if(!a&&o)return i;if(n&&!a){const n=e===xt?"\nIf this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.":"";l(`Failed to resolve ${e.slice(0,-1)}: ${t}${n}`)}return a}l(`resolve${(0,s.capitalize)(e.slice(0,-1))} can only be used in render() or setup().`)}function Ot(e,t){return e&&(e[t]||e[(0,s.camelize)(t)]||e[(0,s.capitalize)((0,s.camelize)(t))])}function Ct(e,t,n,o){let r;const i=n&&n[o];if((0,s.isArray)(e)||(0,s.isString)(e)){r=new Array(e.length);for(let n=0,o=e.length;n<o;n++)r[n]=t(e[n],n,void 0,i&&i[n])}else if("number"==typeof e){Number.isInteger(e)||l(`The v-for range expect an integer value but got ${e}.`),r=new Array(e);for(let n=0;n<e;n++)r[n]=t(n+1,n,void 0,i&&i[n])}else if((0,s.isObject)(e))if(e[Symbol.iterator])r=Array.from(e,((e,n)=>t(e,n,void 0,i&&i[n])));else{const n=Object.keys(e);r=new Array(n.length);for(let o=0,s=n.length;o<s;o++){const s=n[o];r[o]=t(e[s],s,o,i&&i[o])}}else r=[];return n&&(n[o]=r),r}function Et(e,t){for(let n=0;n<t.length;n++){const o=t[n];if((0,s.isArray)(o))for(let t=0;t<o.length;t++)e[o[t].name]=o[t].fn;else o&&(e[o.name]=o.key?(...e)=>{const t=o.fn(...e);return t&&(t.key=o.key),t}:o.fn)}return e}function Tt(e,t,n={},o,s){if(ne.isCE||ne.parent&&qe(ne.parent)&&ne.parent.isCE)return so("slot","default"===t?null:{name:t},o&&o());let r=e[t];r&&r.length>1&&(l("SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template."),r=()=>[]),r&&r._c&&(r._d=!1),Hn();const i=r&&Mt(r(n)),a=Jn(In,{key:n.key||i&&i.key||`_${t}`},i||(o?o():[]),i&&1===e._?64:-2);return!s&&a.scopeId&&(a.slotScopeIds=[a.scopeId+"-s"]),r&&r._c&&(r._d=!0),a}function Mt(e){return e.some((e=>!Xn(e)||e.type!==Fn&&!(e.type===In&&!Mt(e.children))))?e:null}function At(e,t){const n={};if(!(0,s.isObject)(e))return l("v-on with no argument expects an object value."),n;for(const o in e)n[t&&/[A-Z]/.test(o)?`on:${o}`:(0,s.toHandlerKey)(o)]=e[o];return n}const Rt=e=>e?Po(e)?Bo(e)||e.proxy:Rt(e.parent):null,Lt=(0,s.extend)(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>(0,o.shallowReadonly)(e.props),$attrs:e=>(0,o.shallowReadonly)(e.attrs),$slots:e=>(0,o.shallowReadonly)(e.slots),$refs:e=>(0,o.shallowReadonly)(e.refs),$parent:e=>Rt(e.parent),$root:e=>Rt(e.root),$emit:e=>e.emit,$options:e=>__VUE_OPTIONS_API__?$t(e):e.type,$forceUpdate:e=>e.f||(e.f=()=>j(e.update)),$nextTick:e=>e.n||(e.n=k.bind(e.proxy)),$watch:e=>__VUE_OPTIONS_API__?De.bind(e):s.NOOP}),Dt=e=>"_"===e||"$"===e,Bt={get({_:e},t){const{ctx:n,setupState:r,data:i,props:a,accessCache:c,type:u,appContext:d}=e;if("__isVue"===t)return!0;if(r!==s.EMPTY_OBJ&&r.__isScriptSetup&&(0,s.hasOwn)(r,t))return r[t];let h;if("$"!==t[0]){const o=c[t];if(void 0!==o)switch(o){case 1:return r[t];case 2:return i[t];case 4:return n[t];case 3:return a[t]}else{if(r!==s.EMPTY_OBJ&&(0,s.hasOwn)(r,t))return c[t]=1,r[t];if(i!==s.EMPTY_OBJ&&(0,s.hasOwn)(i,t))return c[t]=2,i[t];if((h=e.propsOptions[0])&&(0,s.hasOwn)(h,t))return c[t]=3,a[t];if(n!==s.EMPTY_OBJ&&(0,s.hasOwn)(n,t))return c[t]=4,n[t];__VUE_OPTIONS_API__&&!Nt||(c[t]=0)}}const p=Lt[t];let f,m;return p?("$attrs"===t&&((0,o.track)(e,"get",t),ue()),p(e)):(f=u.__cssModules)&&(f=f[t])?f:n!==s.EMPTY_OBJ&&(0,s.hasOwn)(n,t)?(c[t]=4,n[t]):(m=d.config.globalProperties,(0,s.hasOwn)(m,t)?m[t]:void(!ne||(0,s.isString)(t)&&0===t.indexOf("__v")||(i!==s.EMPTY_OBJ&&Dt(t[0])&&(0,s.hasOwn)(i,t)?l(`Property ${JSON.stringify(t)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`):e===ne&&l(`Property ${JSON.stringify(t)} was accessed during render but is not defined on instance.`))))},set({_:e},t,n){const{data:o,setupState:r,ctx:i}=e;return r!==s.EMPTY_OBJ&&(0,s.hasOwn)(r,t)?(r[t]=n,!0):o!==s.EMPTY_OBJ&&(0,s.hasOwn)(o,t)?(o[t]=n,!0):(0,s.hasOwn)(e.props,t)?(l(`Attempting to mutate prop "${t}". Props are readonly.`,e),!1):"$"===t[0]&&t.slice(1)in e?(l(`Attempting to mutate public property "${t}". Properties starting with $ are reserved and readonly.`,e),!1):(t in e.appContext.config.globalProperties?Object.defineProperty(i,t,{enumerable:!0,configurable:!0,value:n}):i[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:o,appContext:r,propsOptions:i}},a){let l;return!!n[a]||e!==s.EMPTY_OBJ&&(0,s.hasOwn)(e,a)||t!==s.EMPTY_OBJ&&(0,s.hasOwn)(t,a)||(l=i[0])&&(0,s.hasOwn)(l,a)||(0,s.hasOwn)(o,a)||(0,s.hasOwn)(Lt,a)||(0,s.hasOwn)(r.config.globalProperties,a)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:(0,s.hasOwn)(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)},ownKeys:e=>(l("Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead."),Reflect.ownKeys(e))},It=(0,s.extend)({},Bt,{get(e,t){if(t!==Symbol.unscopables)return Bt.get(e,t,e)},has(e,t){const n="_"!==t[0]&&!(0,s.isGloballyWhitelisted)(t);return!n&&Bt.has(e,t)&&l(`Property ${JSON.stringify(t)} should not start with _ which is a reserved prefix for Vue internals.`),n}});let Nt=!0;function Ft(e,t,n){p((0,s.isArray)(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function Vt(e,t,n,o){const r=o.includes(".")?Be(n,o):()=>n[o];if((0,s.isString)(e)){const n=t[e];(0,s.isFunction)(n)?Re(r,n):l(`Invalid watch handler specified by key "${e}"`,n)}else if((0,s.isFunction)(e))Re(r,e.bind(n));else if((0,s.isObject)(e))if((0,s.isArray)(e))e.forEach((e=>Vt(e,t,n,o)));else{const o=(0,s.isFunction)(e.handler)?e.handler.bind(n):t[e.handler];(0,s.isFunction)(o)?Re(r,o,e):l(`Invalid watch handler specified by key "${e.handler}"`,o)}else l(`Invalid watch option: "${o}"`,e)}function $t(e){const t=e.type,{mixins:n,extends:o}=t,{mixins:r,optionsCache:i,config:{optionMergeStrategies:a}}=e.appContext,l=i.get(t);let c;return l?c=l:r.length||n||o?(c={},r.length&&r.forEach((e=>zt(c,e,a,!0))),zt(c,t,a)):c=t,(0,s.isObject)(t)&&i.set(t,c),c}function zt(e,t,n,o=!1){const{mixins:s,extends:r}=t;r&&zt(e,r,n,!0),s&&s.forEach((t=>zt(e,t,n,!0)));for(const s in t)if(o&&"expose"===s)l('"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.');else{const o=Ht[s]||n&&n[s];e[s]=o?o(e[s],t[s]):t[s]}return e}const Ht={data:Ut,props:Yt,emits:Yt,methods:Yt,computed:Yt,beforeCreate:Gt,created:Gt,beforeMount:Gt,mounted:Gt,beforeUpdate:Gt,updated:Gt,beforeDestroy:Gt,beforeUnmount:Gt,destroyed:Gt,unmounted:Gt,activated:Gt,deactivated:Gt,errorCaptured:Gt,serverPrefetch:Gt,components:Yt,directives:Yt,watch:function(e,t){if(!e)return t;if(!t)return e;const n=(0,s.extend)(Object.create(null),e);for(const o in t)n[o]=Gt(e[o],t[o]);return n},provide:Ut,inject:function(e,t){return Yt(Wt(e),Wt(t))}};function Ut(e,t){return t?e?function(){return(0,s.extend)((0,s.isFunction)(e)?e.call(this,this):e,(0,s.isFunction)(t)?t.call(this,this):t)}:t:e}function Wt(e){if((0,s.isArray)(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Gt(e,t){return e?[...new Set([].concat(e,t))]:t}function Yt(e,t){return e?(0,s.extend)((0,s.extend)(Object.create(null),e),t):t}function qt(e,t,n,r){const[i,a]=e.propsOptions;let l,c=!1;if(t)for(let o in t){if((0,s.isReservedProp)(o))continue;const u=t[o];let d;i&&(0,s.hasOwn)(i,d=(0,s.camelize)(o))?a&&a.includes(d)?(l||(l={}))[d]=u:n[d]=u:te(e.emitsOptions,o)||o in r&&u===r[o]||(r[o]=u,c=!0)}if(a){const t=(0,o.toRaw)(n),r=l||s.EMPTY_OBJ;for(let o=0;o<a.length;o++){const l=a[o];n[l]=Kt(i,t,l,r[l],e,!(0,s.hasOwn)(r,l))}}return c}function Kt(e,t,n,o,r,i){const a=e[n];if(null!=a){const e=(0,s.hasOwn)(a,"default");if(e&&void 0===o){const e=a.default;if(a.type!==Function&&(0,s.isFunction)(e)){const{propsDefaults:s}=r;n in s?o=s[n]:(wo(r),o=s[n]=e.call(null,t),So())}else o=e}a[0]&&(i&&!e?o=!1:!a[1]||""!==o&&o!==(0,s.hyphenate)(n)||(o=!0))}return o}function Jt(e,t,n=!1){const o=t.propsCache,r=o.get(e);if(r)return r;const i=e.props,a={},c=[];let u=!1;if(__VUE_OPTIONS_API__&&!(0,s.isFunction)(e)){const o=e=>{u=!0;const[n,o]=Jt(e,t,!0);(0,s.extend)(a,n),o&&c.push(...o)};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}if(!i&&!u)return(0,s.isObject)(e)&&o.set(e,s.EMPTY_ARR),s.EMPTY_ARR;if((0,s.isArray)(i))for(let e=0;e<i.length;e++){(0,s.isString)(i[e])||l("props must be strings when using array syntax.",i[e]);const t=(0,s.camelize)(i[e]);Xt(t)&&(a[t]=s.EMPTY_OBJ)}else if(i){(0,s.isObject)(i)||l("invalid props options",i);for(const e in i){const t=(0,s.camelize)(e);if(Xt(t)){const n=i[e],o=a[t]=(0,s.isArray)(n)||(0,s.isFunction)(n)?{type:n}:n;if(o){const e=en(Boolean,o.type),n=en(String,o.type);o[0]=e>-1,o[1]=n<0||e<n,(e>-1||(0,s.hasOwn)(o,"default"))&&c.push(t)}}}}const d=[a,c];return(0,s.isObject)(e)&&o.set(e,d),d}function Xt(e){return"$"!==e[0]||(l(`Invalid prop name: "${e}" is a reserved property.`),!1)}function Qt(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Zt(e,t){return Qt(e)===Qt(t)}function en(e,t){return(0,s.isArray)(t)?t.findIndex((t=>Zt(t,e))):(0,s.isFunction)(t)&&Zt(t,e)?0:-1}function tn(e,t,n){const r=(0,o.toRaw)(t),i=n.propsOptions[0];for(const t in i){let n=i[t];null!=n&&nn(t,r[t],n,!(0,s.hasOwn)(e,t)&&!(0,s.hasOwn)(e,(0,s.hyphenate)(t)))}}function nn(e,t,n,o){const{type:r,required:i,validator:a}=n;if(i&&o)l('Missing required prop: "'+e+'"');else if(null!=t||n.required){if(null!=r&&!0!==r){let n=!1;const o=(0,s.isArray)(r)?r:[r],i=[];for(let e=0;e<o.length&&!n;e++){const{valid:s,expectedType:r}=sn(t,o[e]);i.push(r||""),n=s}if(!n)return void l(function(e,t,n){let o=`Invalid prop: type check failed for prop "${e}". Expected ${n.map(s.capitalize).join(" | ")}`;const r=n[0],i=(0,s.toRawType)(t),a=rn(t,r),l=rn(t,i);return 1===n.length&&an(r)&&!function(...e){return e.some((e=>"boolean"===e.toLowerCase()))}(r,i)&&(o+=` with value ${a}`),o+=`, got ${i} `,an(i)&&(o+=`with value ${l}.`),o}(e,t,i))}a&&!a(t)&&l('Invalid prop: custom validator check failed for prop "'+e+'".')}}const on=(0,s.makeMap)("String,Number,Boolean,Function,Symbol,BigInt");function sn(e,t){let n;const o=Qt(t);if(on(o)){const s=typeof e;n=s===o.toLowerCase(),n||"object"!==s||(n=e instanceof t)}else n="Object"===o?(0,s.isObject)(e):"Array"===o?(0,s.isArray)(e):"null"===o?null===e:e instanceof t;return{valid:n,expectedType:o}}function rn(e,t){return"String"===t?`"${e}"`:"Number"===t?`${Number(e)}`:`${e}`}function an(e){return["string","number","boolean"].some((t=>e.toLowerCase()===t))}const ln=e=>"_"===e[0]||"$stable"===e,cn=e=>(0,s.isArray)(e)?e.map(ho):[ho(e)],un=(e,t,n)=>{if(t._n)return t;const o=le(((...n)=>(_o&&l(`Slot "${e}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`),cn(t(...n)))),n);return o._c=!1,o},dn=(e,t,n)=>{const o=e._ctx;for(const n in e){if(ln(n))continue;const r=e[n];if((0,s.isFunction)(r))t[n]=un(n,r,o);else if(null!=r){l(`Non-function value encountered for slot "${n}". Prefer function slots for better performance.`);const e=cn(r);t[n]=()=>e}}},hn=(e,t)=>{Xe(e.vnode)||l("Non-function value encountered for default slot. Prefer function slots for better performance.");const n=cn(t);e.slots.default=()=>n};function pn(){return{app:null,config:{isNativeTag:s.NO,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let fn=0;function mn(e,t){return function(n,o=null){(0,s.isFunction)(n)||(n=Object.assign({},n)),null==o||(0,s.isObject)(o)||(l("root props passed to app.mount() must be an object."),o=null);const r=pn(),i=new Set;let a=!1;const c=r.app={_uid:fn++,_component:n,_props:o,_container:null,_context:r,_instance:null,version:is,get config(){return r.config},set config(e){l("app.config cannot be replaced. Modify individual options instead.")},use:(e,...t)=>(i.has(e)?l("Plugin has already been applied to target app."):e&&(0,s.isFunction)(e.install)?(i.add(e),e.install(c,...t)):(0,s.isFunction)(e)?(i.add(e),e(c,...t)):l('A plugin must either be a function or an object with an "install" function.'),c),mixin:e=>(__VUE_OPTIONS_API__?r.mixins.includes(e)?l("Mixin has already been applied to target app"+(e.name?`: ${e.name}`:"")):r.mixins.push(e):l("Mixins are only available in builds supporting Options API"),c),component:(e,t)=>(jo(e,r.config),t?(r.components[e]&&l(`Component "${e}" has already been registered in target app.`),r.components[e]=t,c):r.components[e]),directive:(e,t)=>(yt(e),t?(r.directives[e]&&l(`Directive "${e}" has already been registered in target app.`),r.directives[e]=t,c):r.directives[e]),mount(s,i,u){if(!a){s.__vue_app__&&l("There is already an app instance mounted on the host container.\n If you want to mount another app on the same host container, you need to unmount the previous app by calling `app.unmount()` first.");const d=so(n,o);return d.appContext=r,r.reload=()=>{e(io(d),s,u)},i&&t?t(d,s):e(d,s,u),a=!0,c._container=s,s.__vue_app__=c,c._instance=d.component,function(e,t){U("app:init",e,t,{Fragment:In,Text:Nn,Comment:Fn,Static:Vn})}(c,is),Bo(d.component)||d.component.proxy}l("App has already been mounted.\nIf you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. `const createMyApp = () => createApp(App)`")},unmount(){a?(e(null,c._container),c._instance=null,function(e){U("app:unmount",e)}(c),delete c._container.__vue_app__):l("Cannot unmount an app that is not mounted.")},provide:(e,t)=>(e in r.provides&&l(`App already provides property with key "${String(e)}". It will be overwritten with the new value.`),r.provides[e]=t,c)};return c}}function gn(e,t,n,r,i=!1){if((0,s.isArray)(e))return void e.forEach(((e,o)=>gn(e,t&&((0,s.isArray)(t)?t[o]:t),n,r,i)));if(qe(r)&&!i)return;const a=4&r.shapeFlag?Bo(r.component)||r.component.proxy:r.el,c=i?null:a,{i:u,r:d}=e;if(!u)return void l("Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.");const p=t&&t.r,f=u.refs===s.EMPTY_OBJ?u.refs={}:u.refs,m=u.setupState;if(null!=p&&p!==d&&((0,s.isString)(p)?(f[p]=null,(0,s.hasOwn)(m,p)&&(m[p]=null)):(0,o.isRef)(p)&&(p.value=null)),(0,s.isFunction)(d))h(d,u,12,[c,f]);else{const t=(0,s.isString)(d),r=(0,o.isRef)(d);if(t||r){const o=()=>{if(e.f){const n=t?(0,s.hasOwn)(m,d)?m[d]:f[d]:d.value;i?(0,s.isArray)(n)&&(0,s.remove)(n,a):(0,s.isArray)(n)?n.includes(a)||n.push(a):t?(f[d]=[a],(0,s.hasOwn)(m,d)&&(m[d]=f[d])):(d.value=[a],e.k&&(f[e.k]=d.value))}else t?(f[d]=c,(0,s.hasOwn)(m,d)&&(m[d]=c)):r?(d.value=c,e.k&&(f[e.k]=c)):l("Invalid template ref type:",d,`(${typeof d})`)};c?(o.id=-1,Pn(o,n)):o()}else l("Invalid template ref type:",d,`(${typeof d})`)}}let vn=!1;const yn=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,bn=e=>8===e.nodeType;function _n(e){const{mt:t,p:n,o:{patchProp:o,createText:r,nextSibling:i,parentNode:a,remove:c,insert:u,createComment:d}}=e,h=(n,o,s,c,d,y=!1)=>{const b=bn(n)&&"["===n.data,_=()=>g(n,o,s,c,d,b),{type:x,ref:w,shapeFlag:S,patchFlag:k}=o;let j=n.nodeType;o.el=n,-2===k&&(y=!1,o.dynamicChildren=null);let P=null;switch(x){case Nn:3!==j?""===o.children?(u(o.el=r(""),a(n),n),P=n):P=_():(n.data!==o.children&&(vn=!0,l(`Hydration text mismatch:\n- Client: ${JSON.stringify(n.data)}\n- Server: ${JSON.stringify(o.children)}`),n.data=o.children),P=i(n));break;case Fn:P=8!==j||b?_():i(n);break;case Vn:if(b&&(j=(n=i(n)).nodeType),1===j||3===j){P=n;const e=!o.children.length;for(let t=0;t<o.staticCount;t++)e&&(o.children+=1===P.nodeType?P.outerHTML:P.data),t===o.staticCount-1&&(o.anchor=P),P=i(P);return b?i(P):P}_();break;case In:P=b?m(n,o,s,c,d,y):_();break;default:if(1&S)P=1!==j||o.type.toLowerCase()!==n.tagName.toLowerCase()?_():p(n,o,s,c,d,y);else if(6&S){o.slotScopeIds=d;const e=a(n);if(t(o,e,null,s,c,yn(e),y),P=b?v(n):i(n),P&&bn(P)&&"teleport end"===P.data&&(P=i(P)),qe(o)){let t;b?(t=so(In),t.anchor=P?P.previousSibling:e.lastChild):t=3===n.nodeType?lo(""):so("div"),t.el=n,o.component.subTree=t}}else 64&S?P=8!==j?_():o.type.hydrate(n,o,s,c,d,y,e,f):128&S?P=o.type.hydrate(n,o,s,c,yn(a(n)),d,y,e,h):l("Invalid HostVNode type:",x,`(${typeof x})`)}return null!=w&&gn(w,null,c,o),P},p=(e,t,n,r,i,a)=>{a=a||!!t.dynamicChildren;const{type:u,props:d,patchFlag:h,shapeFlag:p,dirs:m}=t,g="input"===u&&m||"option"===u;{if(m&&_t(t,null,n,"created"),d)if(g||!a||48&h)for(const t in d)(g&&t.endsWith("value")||(0,s.isOn)(t)&&!(0,s.isReservedProp)(t))&&o(e,t,null,d[t],!1,void 0,n);else d.onClick&&o(e,"onClick",null,d.onClick,!1,void 0,n);let u;if((u=d&&d.onVnodeBeforeMount)&&go(u,n,t),m&&_t(t,null,n,"beforeMount"),((u=d&&d.onVnodeMounted)||m)&&je((()=>{u&&go(u,n,t),m&&_t(t,null,n,"mounted")}),r),16&p&&(!d||!d.innerHTML&&!d.textContent)){let o=f(e.firstChild,t,e,n,r,i,a),s=!1;for(;o;){vn=!0,s||(l(`Hydration children mismatch in <${t.type}>: server rendered element contains more child nodes than client vdom.`),s=!0);const e=o;o=o.nextSibling,c(e)}}else 8&p&&e.textContent!==t.children&&(vn=!0,l(`Hydration text content mismatch in <${t.type}>:\n- Client: ${e.textContent}\n- Server: ${t.children}`),e.textContent=t.children)}return e.nextSibling},f=(e,t,o,s,r,i,a)=>{a=a||!!t.dynamicChildren;const c=t.children,u=c.length;let d=!1;for(let t=0;t<u;t++){const u=a?c[t]:c[t]=ho(c[t]);if(e)e=h(e,u,s,r,i,a);else{if(u.type===Nn&&!u.children)continue;vn=!0,d||(l(`Hydration children mismatch in <${o.tagName.toLowerCase()}>: server rendered element contains fewer child nodes than client vdom.`),d=!0),n(null,u,o,null,s,r,yn(o),i)}}return e},m=(e,t,n,o,s,r)=>{const{slotScopeIds:l}=t;l&&(s=s?s.concat(l):l);const c=a(e),h=f(i(e),t,c,n,o,s,r);return h&&bn(h)&&"]"===h.data?i(t.anchor=h):(vn=!0,u(t.anchor=d("]"),c,h),h)},g=(e,t,o,s,r,u)=>{if(vn=!0,l("Hydration node mismatch:\n- Client vnode:",t.type,"\n- Server rendered DOM:",e,3===e.nodeType?"(text)":bn(e)&&"["===e.data?"(start of fragment)":""),t.el=null,u){const t=v(e);for(;;){const n=i(e);if(!n||n===t)break;c(n)}}const d=i(e),h=a(e);return c(e),n(null,t,h,d,o,s,yn(h),r),d},v=e=>{let t=0;for(;e;)if((e=i(e))&&bn(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return i(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return l("Attempting to hydrate existing markup but container is empty. Performing full mount instead."),n(null,e,t),E(),void(t._vnode=e);vn=!1,h(t.firstChild,e,null,null,null),E(),t._vnode=e,vn&&console.error("Hydration completed but contains mismatches.")},h]}let xn,wn;function Sn(e,t){e.appContext.config.performance&&jn()&&wn.mark(`vue-${t}-${e.uid}`),J(e,t,jn()?wn.now():Date.now())}function kn(e,t){if(e.appContext.config.performance&&jn()){const n=`vue-${t}-${e.uid}`,o=n+":end";wn.mark(o),wn.measure(`<${Fo(e,e.type)}> ${t}`,n,o),wn.clearMarks(n),wn.clearMarks(o)}X(e,t,jn()?wn.now():Date.now())}function jn(){return void 0!==xn||("undefined"!=typeof window&&window.performance?(xn=!0,wn=window.performance):xn=!1),xn}const Pn=je;function On(e){return En(e)}function Cn(e){return En(e,_n)}function En(e,t){!function(){const e=[];if("boolean"!=typeof __VUE_OPTIONS_API__&&(e.push("__VUE_OPTIONS_API__"),(0,s.getGlobalThis)().__VUE_OPTIONS_API__=!0),"boolean"!=typeof __VUE_PROD_DEVTOOLS__&&(e.push("__VUE_PROD_DEVTOOLS__"),(0,s.getGlobalThis)().__VUE_PROD_DEVTOOLS__=!1),e.length){const t=e.length>1;console.warn(`Feature flag${t?"s":""} ${e.join(", ")} ${t?"are":"is"} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.\n\nFor more details, see https://link.vuejs.org/feature-flags.`)}}();const n=(0,s.getGlobalThis)();n.__VUE__=!0,W(n.__VUE_DEVTOOLS_GLOBAL_HOOK__,n);const{insert:r,remove:c,patchProp:u,createElement:d,createText:h,createComment:p,setText:f,setElementText:m,parentNode:g,nextSibling:b,setScopeId:_=s.NOOP,insertStaticContent:x}=e,w=(e,t,n,o=null,s=null,r=null,i=!1,a=null,c=!L&&!!t.dynamicChildren)=>{if(e===t)return;e&&!Qn(e,t)&&(o=le(e),oe(e,s,r,!0),e=null),-2===t.patchFlag&&(c=!1,t.dynamicChildren=null);const{type:u,ref:d,shapeFlag:h}=t;switch(u){case Nn:S(e,t,n,o);break;case Fn:k(e,t,n,o);break;case Vn:null==e?P(t,n,o,i):O(e,t,n,i);break;case In:z(e,t,n,o,s,r,i,a,c);break;default:1&h?M(e,t,n,o,s,r,i,a,c):6&h?H(e,t,n,o,s,r,i,a,c):64&h||128&h?u.process(e,t,n,o,s,r,i,a,c,ue):l("Invalid VNode type:",u,`(${typeof u})`)}null!=d&&s&&gn(d,e&&e.ref,r,t||e,!t)},S=(e,t,n,o)=>{if(null==e)r(t.el=h(t.children),n,o);else{const n=t.el=e.el;t.children!==e.children&&f(n,t.children)}},k=(e,t,n,o)=>{null==e?r(t.el=p(t.children||""),n,o):t.el=e.el},P=(e,t,n,o)=>{[e.el,e.anchor]=x(e.children,t,n,o,e.el,e.anchor)},O=(e,t,n,o)=>{if(t.children!==e.children){const s=b(e.anchor);T(e),[t.el,t.anchor]=x(t.children,n,s,o)}else t.el=e.el,t.anchor=e.anchor},T=({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=b(e),c(e),e=n;c(t)},M=(e,t,n,o,s,r,i,a,l)=>{i=i||"svg"===t.type,null==e?A(t,n,o,s,r,i,a,l):N(e,t,s,r,i,a,l)},A=(e,t,n,o,i,a,l,c)=>{let h,p;const{type:f,props:g,shapeFlag:v,transition:y,dirs:b}=e;if(h=e.el=d(e.type,a,g&&g.is,g),8&v?m(h,e.children):16&v&&D(e.children,h,null,o,i,a&&"foreignObject"!==f,l,c),b&&_t(e,null,o,"created"),g){for(const t in g)"value"===t||(0,s.isReservedProp)(t)||u(h,t,null,g[t],a,e.children,o,i,ae);"value"in g&&u(h,"value",null,g.value),(p=g.onVnodeBeforeMount)&&go(p,o,e)}R(h,e,e.scopeId,l,o),Object.defineProperty(h,"__vnode",{value:e,enumerable:!1}),Object.defineProperty(h,"__vueParentComponent",{value:o,enumerable:!1}),b&&_t(e,null,o,"beforeMount");const _=(!i||i&&!i.pendingBranch)&&y&&!y.persisted;_&&y.beforeEnter(h),r(h,t,n),((p=g&&g.onVnodeMounted)||_||b)&&Pn((()=>{p&&go(p,o,e),_&&y.enter(h),b&&_t(e,null,o,"mounted")}),i)},R=(e,t,n,o,s)=>{if(n&&_(e,n),o)for(let t=0;t<o.length;t++)_(e,o[t]);if(s){let n=s.subTree;if(n.patchFlag>0&&2048&n.patchFlag&&(n=pe(n.children)||n),t===n){const t=s.vnode;R(e,t,t.scopeId,t.slotScopeIds,s.parent)}}},D=(e,t,n,o,s,r,i,a,l=0)=>{for(let c=l;c<e.length;c++){const l=e[c]=a?po(e[c]):ho(e[c]);w(null,l,t,n,o,s,r,i,a)}},N=(e,t,n,o,r,i,a)=>{const l=t.el=e.el;let{patchFlag:c,dynamicChildren:d,dirs:h}=t;c|=16&e.patchFlag;const p=e.props||s.EMPTY_OBJ,f=t.props||s.EMPTY_OBJ;let g;n&&Tn(n,!1),(g=f.onVnodeBeforeUpdate)&&go(g,n,t,e),h&&_t(t,e,n,"beforeUpdate"),n&&Tn(n,!0),L&&(c=0,a=!1,d=null);const v=r&&"foreignObject"!==t.type;if(d?(F(e.dynamicChildren,d,l,n,o,v,i),n&&n.type.__hmrId&&Mn(e,t)):a||Q(e,t,l,null,n,o,v,i,!1),c>0){if(16&c)V(l,t,p,f,n,o,r);else if(2&c&&p.class!==f.class&&u(l,"class",null,f.class,r),4&c&&u(l,"style",p.style,f.style,r),8&c){const s=t.dynamicProps;for(let t=0;t<s.length;t++){const i=s[t],a=p[i],c=f[i];c===a&&"value"!==i||u(l,i,a,c,r,e.children,n,o,ae)}}1&c&&e.children!==t.children&&m(l,t.children)}else a||null!=d||V(l,t,p,f,n,o,r);((g=f.onVnodeUpdated)||h)&&Pn((()=>{g&&go(g,n,t,e),h&&_t(t,e,n,"updated")}),o)},F=(e,t,n,o,s,r,i)=>{for(let a=0;a<t.length;a++){const l=e[a],c=t[a],u=l.el&&(l.type===In||!Qn(l,c)||70&l.shapeFlag)?g(l.el):n;w(l,c,u,null,o,s,r,i,!0)}},V=(e,t,n,o,r,i,a)=>{if(n!==o){if(n!==s.EMPTY_OBJ)for(const l in n)(0,s.isReservedProp)(l)||l in o||u(e,l,n[l],null,a,t.children,r,i,ae);for(const l in o){if((0,s.isReservedProp)(l))continue;const c=o[l],d=n[l];c!==d&&"value"!==l&&u(e,l,d,c,a,t.children,r,i,ae)}"value"in o&&u(e,"value",n.value,o.value)}},z=(e,t,n,o,s,i,a,l,c)=>{const u=t.el=e?e.el:h(""),d=t.anchor=e?e.anchor:h("");let{patchFlag:p,dynamicChildren:f,slotScopeIds:m}=t;(L||2048&p)&&(p=0,c=!1,f=null),m&&(l=l?l.concat(m):m),null==e?(r(u,n,o),r(d,n,o),D(t.children,n,d,s,i,a,l,c)):p>0&&64&p&&f&&e.dynamicChildren?(F(e.dynamicChildren,f,n,s,i,a,l),s&&s.type.__hmrId?Mn(e,t):(null!=t.key||s&&t===s.subTree)&&Mn(e,t,!0)):Q(e,t,n,d,s,i,a,l,c)},H=(e,t,n,o,s,r,i,a,l)=>{t.slotScopeIds=a,null==e?512&t.shapeFlag?s.ctx.activate(t,n,o,i,l):U(t,n,o,s,r,i,l):K(e,t,l)},U=(e,t,n,o,s,r,l)=>{const c=e.component=bo(e,o,s);if(c.type.__hmrId&&function(e){const t=e.type.__hmrId;let n=B.get(t);n||(I(t,e.type),n=B.get(t)),n.instances.add(e)}(c),i(e),Sn(c,"mount"),Xe(e)&&(c.ctx.renderer=ue),Sn(c,"init"),To(c),kn(c,"init"),c.asyncDep){if(s&&s.registerDep(c,J),!e.el){const e=c.subTree=so(Fn);k(null,e,t,n)}}else J(c,e,t,n,s,r,l),a(),kn(c,"mount")},K=(e,t,n)=>{const o=t.component=e.component;if(function(e,t,n){const{props:o,children:s,component:r}=e,{props:i,children:a,patchFlag:l}=t,c=r.emitsOptions;if((s||a)&&L)return!0;if(t.dirs||t.transition)return!0;if(!(n&&l>=0))return!(!s&&!a||a&&a.$stable)||o!==i&&(o?!i||ve(o,i,c):!!i);if(1024&l)return!0;if(16&l)return o?ve(o,i,c):!!i;if(8&l){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(i[n]!==o[n]&&!te(c,n))return!0}}return!1}(e,t,n)){if(o.asyncDep&&!o.asyncResolved)return i(t),X(o,t,n),void a();o.next=t,function(e){const t=v.indexOf(e);t>y&&v.splice(t,1)}(o.update),o.update()}else t.el=e.el,o.vnode=t},J=(e,t,n,r,l,c,u)=>{const d=e.effect=new o.ReactiveEffect((()=>{if(e.isMounted){let t,{next:n,bu:o,u:r,parent:d,vnode:h}=e,p=n;i(n||e.vnode),Tn(e,!1),n?(n.el=h.el,X(e,n,u)):n=h,o&&(0,s.invokeArrayFns)(o),(t=n.props&&n.props.onVnodeBeforeUpdate)&&go(t,d,n,h),Tn(e,!0),Sn(e,"render");const f=de(e);kn(e,"render");const m=e.subTree;e.subTree=f,Sn(e,"patch"),w(m,f,g(m.el),le(m),e,l,c),kn(e,"patch"),n.el=f.el,null===p&&ye(e,f.el),r&&Pn(r,l),(t=n.props&&n.props.onVnodeUpdated)&&Pn((()=>go(t,d,n,h)),l),Y(e),a()}else{let o;const{el:i,props:a}=t,{bm:u,m:d,parent:h}=e,p=qe(t);if(Tn(e,!1),u&&(0,s.invokeArrayFns)(u),!p&&(o=a&&a.onVnodeBeforeMount)&&go(o,h,t),Tn(e,!0),i&&fe){const n=()=>{Sn(e,"render"),e.subTree=de(e),kn(e,"render"),Sn(e,"hydrate"),fe(i,e.subTree,e,l,null),kn(e,"hydrate")};p?t.type.__asyncLoader().then((()=>!e.isUnmounted&&n())):n()}else{Sn(e,"render");const o=e.subTree=de(e);kn(e,"render"),Sn(e,"patch"),w(null,o,n,r,e,l,c),kn(e,"patch"),t.el=o.el}if(d&&Pn(d,l),!p&&(o=a&&a.onVnodeMounted)){const e=t;Pn((()=>go(o,h,e)),l)}(256&t.shapeFlag||h&&qe(h.vnode)&&256&h.vnode.shapeFlag)&&e.a&&Pn(e.a,l),e.isMounted=!0,G(e),t=n=r=null}}),(()=>j(h)),e.scope),h=e.update=()=>d.run();h.id=e.uid,Tn(e,!0),d.onTrack=e.rtc?t=>(0,s.invokeArrayFns)(e.rtc,t):void 0,d.onTrigger=e.rtg?t=>(0,s.invokeArrayFns)(e.rtg,t):void 0,h.ownerInstance=e,h()},X=(e,t,n)=>{t.component=e;const r=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,r){const{props:i,attrs:a,vnode:{patchFlag:l}}=e,c=(0,o.toRaw)(i),[u]=e.propsOptions;let d=!1;if(function(e){for(;e;){if(e.type.__hmrId)return!0;e=e.parent}}(e)||!(r||l>0)||16&l){let o;qt(e,t,i,a)&&(d=!0);for(const r in c)t&&((0,s.hasOwn)(t,r)||(o=(0,s.hyphenate)(r))!==r&&(0,s.hasOwn)(t,o))||(u?!n||void 0===n[r]&&void 0===n[o]||(i[r]=Kt(u,c,r,void 0,e,!0)):delete i[r]);if(a!==c)for(const e in a)t&&(0,s.hasOwn)(t,e)||(delete a[e],d=!0)}else if(8&l){const n=e.vnode.dynamicProps;for(let o=0;o<n.length;o++){let r=n[o];if(te(e.emitsOptions,r))continue;const l=t[r];if(u)if((0,s.hasOwn)(a,r))l!==a[r]&&(a[r]=l,d=!0);else{const t=(0,s.camelize)(r);i[t]=Kt(u,c,t,l,e,!1)}else l!==a[r]&&(a[r]=l,d=!0)}}d&&(0,o.trigger)(e,"set","$attrs"),tn(t||{},i,e)}(e,t.props,r,n),((e,t,n)=>{const{vnode:o,slots:r}=e;let i=!0,a=s.EMPTY_OBJ;if(32&o.shapeFlag){const e=t._;e?L?(0,s.extend)(r,t):n&&1===e?i=!1:((0,s.extend)(r,t),n||1!==e||delete r._):(i=!t.$stable,dn(t,r)),a=t}else t&&(hn(e,t),a={default:1});if(i)for(const e in r)ln(e)||e in a||delete r[e]})(e,t.children,n),(0,o.pauseTracking)(),C(),(0,o.resetTracking)()},Q=(e,t,n,o,s,r,i,a,l=!1)=>{const c=e&&e.children,u=e?e.shapeFlag:0,d=t.children,{patchFlag:h,shapeFlag:p}=t;if(h>0){if(128&h)return void ee(c,d,n,o,s,r,i,a,l);if(256&h)return void Z(c,d,n,o,s,r,i,a,l)}8&p?(16&u&&ae(c,s,r),d!==c&&m(n,d)):16&u?16&p?ee(c,d,n,o,s,r,i,a,l):ae(c,s,r,!0):(8&u&&m(n,""),16&p&&D(d,n,o,s,r,i,a,l))},Z=(e,t,n,o,r,i,a,l,c)=>{e=e||s.EMPTY_ARR,t=t||s.EMPTY_ARR;const u=e.length,d=t.length,h=Math.min(u,d);let p;for(p=0;p<h;p++){const o=t[p]=c?po(t[p]):ho(t[p]);w(e[p],o,n,null,r,i,a,l,c)}u>d?ae(e,r,i,!0,!1,h):D(t,n,o,r,i,a,l,c,h)},ee=(e,t,n,o,r,i,a,c,u)=>{let d=0;const h=t.length;let p=e.length-1,f=h-1;for(;d<=p&&d<=f;){const o=e[d],s=t[d]=u?po(t[d]):ho(t[d]);if(!Qn(o,s))break;w(o,s,n,null,r,i,a,c,u),d++}for(;d<=p&&d<=f;){const o=e[p],s=t[f]=u?po(t[f]):ho(t[f]);if(!Qn(o,s))break;w(o,s,n,null,r,i,a,c,u),p--,f--}if(d>p){if(d<=f){const e=f+1,s=e<h?t[e].el:o;for(;d<=f;)w(null,t[d]=u?po(t[d]):ho(t[d]),n,s,r,i,a,c,u),d++}}else if(d>f)for(;d<=p;)oe(e[d],r,i,!0),d++;else{const m=d,g=d,v=new Map;for(d=g;d<=f;d++){const e=t[d]=u?po(t[d]):ho(t[d]);null!=e.key&&(v.has(e.key)&&l("Duplicate keys found during update:",JSON.stringify(e.key),"Make sure keys are unique."),v.set(e.key,d))}let y,b=0;const _=f-g+1;let x=!1,S=0;const k=new Array(_);for(d=0;d<_;d++)k[d]=0;for(d=m;d<=p;d++){const o=e[d];if(b>=_){oe(o,r,i,!0);continue}let s;if(null!=o.key)s=v.get(o.key);else for(y=g;y<=f;y++)if(0===k[y-g]&&Qn(o,t[y])){s=y;break}void 0===s?oe(o,r,i,!0):(k[s-g]=d+1,s>=S?S=s:x=!0,w(o,t[s],n,null,r,i,a,c,u),b++)}const j=x?function(e){const t=e.slice(),n=[0];let o,s,r,i,a;const l=e.length;for(o=0;o<l;o++){const l=e[o];if(0!==l){if(s=n[n.length-1],e[s]<l){t[o]=s,n.push(o);continue}for(r=0,i=n.length-1;r<i;)a=r+i>>1,e[n[a]]<l?r=a+1:i=a;l<e[n[r]]&&(r>0&&(t[o]=n[r-1]),n[r]=o)}}for(r=n.length,i=n[r-1];r-- >0;)n[r]=i,i=t[i];return n}(k):s.EMPTY_ARR;for(y=j.length-1,d=_-1;d>=0;d--){const e=g+d,s=t[e],l=e+1<h?t[e+1].el:o;0===k[d]?w(null,s,n,l,r,i,a,c,u):x&&(y<0||d!==j[y]?ne(s,n,l,2):y--)}}},ne=(e,t,n,o,s=null)=>{const{el:i,type:a,transition:l,children:c,shapeFlag:u}=e;if(6&u)ne(e.component.subTree,t,n,o);else if(128&u)e.suspense.move(t,n,o);else if(64&u)a.move(e,t,n,ue);else if(a!==In)if(a!==Vn)if(2!==o&&1&u&&l)if(0===o)l.beforeEnter(i),r(i,t,n),Pn((()=>l.enter(i)),s);else{const{leave:e,delayLeave:o,afterLeave:s}=l,a=()=>r(i,t,n),c=()=>{e(i,(()=>{a(),s&&s()}))};o?o(i,a,c):c()}else r(i,t,n);else(({el:e,anchor:t},n,o)=>{let s;for(;e&&e!==t;)s=b(e),r(e,n,o),e=s;r(t,n,o)})(e,t,n);else{r(i,t,n);for(let e=0;e<c.length;e++)ne(c[e],t,n,o);r(e.anchor,t,n)}},oe=(e,t,n,o=!1,s=!1)=>{const{type:r,props:i,ref:a,children:l,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:h}=e;if(null!=a&&gn(a,null,n,e,!0),256&u)return void t.ctx.deactivate(e);const p=1&u&&h,f=!qe(e);let m;if(f&&(m=i&&i.onVnodeBeforeUnmount)&&go(m,t,e),6&u)ie(e.component,n,o);else{if(128&u)return void e.suspense.unmount(n,o);p&&_t(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,s,ue,o):c&&(r!==In||d>0&&64&d)?ae(c,t,n,!1,!0):(r===In&&384&d||!s&&16&u)&&ae(l,t,n),o&&se(e)}(f&&(m=i&&i.onVnodeUnmounted)||p)&&Pn((()=>{m&&go(m,t,e),p&&_t(e,null,t,"unmounted")}),n)},se=e=>{const{type:t,el:n,anchor:o,transition:s}=e;if(t===In)return void(e.patchFlag>0&&2048&e.patchFlag&&s&&!s.persisted?e.children.forEach((e=>{e.type===Fn?c(e.el):se(e)})):re(n,o));if(t===Vn)return void T(e);const r=()=>{c(n),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:o}=s,i=()=>t(n,r);o?o(e.el,r,i):i()}else r()},re=(e,t)=>{let n;for(;e!==t;)n=b(e),c(e),e=n;c(t)},ie=(e,t,n)=>{e.type.__hmrId&&function(e){B.get(e.type.__hmrId).instances.delete(e)}(e);const{bum:o,scope:r,update:i,subTree:a,um:l}=e;var c;o&&(0,s.invokeArrayFns)(o),r.stop(),i&&(i.active=!1,oe(a,e,t,n)),l&&Pn(l,t),Pn((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve()),c=e,$&&"function"==typeof $.cleanupBuffer&&!$.cleanupBuffer(c)&&q(c)},ae=(e,t,n,o=!1,s=!1,r=0)=>{for(let i=r;i<e.length;i++)oe(e[i],t,n,o,s)},le=e=>6&e.shapeFlag?le(e.component.subTree):128&e.shapeFlag?e.suspense.next():b(e.anchor||e.el),ce=(e,t,n)=>{null==e?t._vnode&&oe(t._vnode,null,null,!0):w(t._vnode||null,e,t,null,null,null,n),C(),E(),t._vnode=e},ue={p:w,um:oe,m:ne,r:se,mt:U,mc:D,pc:Q,pbc:F,n:le,o:e};let he,fe;return t&&([he,fe]=t(ue)),{render:ce,hydrate:he,createApp:mn(ce,he)}}function Tn({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function Mn(e,t,n=!1){const o=e.children,r=t.children;if((0,s.isArray)(o)&&(0,s.isArray)(r))for(let e=0;e<o.length;e++){const t=o[e];let s=r[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=r[e]=po(r[e]),s.el=t.el),n||Mn(t,s)),s.type!==Fn||s.el||(s.el=t.el)}}const An=e=>e&&(e.disabled||""===e.disabled),Rn=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,Ln=(e,t)=>{const n=e&&e.to;if((0,s.isString)(n)){if(t){const e=t(n);return e||l(`Failed to locate Teleport target with selector "${n}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`),e}return l("Current renderer does not support string target for Teleports. (missing querySelector renderer option)"),null}return n||An(e)||l(`Invalid Teleport target: ${n}`),n};function Dn(e,t,n,{o:{insert:o},m:s},r=2){0===r&&o(e.targetAnchor,t,n);const{el:i,anchor:a,shapeFlag:l,children:c,props:u}=e,d=2===r;if(d&&o(i,t,n),(!d||An(u))&&16&l)for(let e=0;e<c.length;e++)s(c[e],t,n,2);d&&o(a,t,n)}const Bn={__isTeleport:!0,process(e,t,n,o,s,r,i,a,c,u){const{mc:d,pc:h,pbc:p,o:{insert:f,querySelector:m,createText:g,createComment:v}}=u,y=An(t.props);let{shapeFlag:b,children:_,dynamicChildren:x}=t;if(L&&(c=!1,x=null),null==e){const e=t.el=v("teleport start"),u=t.anchor=v("teleport end");f(e,n,o),f(u,n,o);const h=t.target=Ln(t.props,m),p=t.targetAnchor=g("");h?(f(p,h),i=i||Rn(h)):y||l("Invalid Teleport target on mount:",h,`(${typeof h})`);const x=(e,t)=>{16&b&&d(_,e,t,s,r,i,a,c)};y?x(n,u):h&&x(h,p)}else{t.el=e.el;const o=t.anchor=e.anchor,d=t.target=e.target,f=t.targetAnchor=e.targetAnchor,g=An(e.props),v=g?n:d,b=g?o:f;if(i=i||Rn(d),x?(p(e.dynamicChildren,x,v,s,r,i,a),Mn(e,t,!0)):c||h(e,t,v,b,s,r,i,a,!1),y)g||Dn(t,n,o,u,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=Ln(t.props,m);e?Dn(t,e,null,u,0):l("Invalid Teleport target on update:",d,`(${typeof d})`)}else g&&Dn(t,d,f,u,1)}},remove(e,t,n,o,{um:s,o:{remove:r}},i){const{shapeFlag:a,children:l,anchor:c,targetAnchor:u,target:d,props:h}=e;if(d&&r(u),(i||!An(h))&&(r(c),16&a))for(let e=0;e<l.length;e++){const o=l[e];s(o,t,n,!0,!!o.dynamicChildren)}},move:Dn,hydrate:function(e,t,n,o,s,r,{o:{nextSibling:i,parentNode:a,querySelector:l}},c){const u=t.target=Ln(t.props,l);if(u){const l=u._lpa||u.firstChild;if(16&t.shapeFlag)if(An(t.props))t.anchor=c(i(e),t,a(e),n,o,s,r),t.targetAnchor=l;else{t.anchor=i(e);let a=l;for(;a;)if(a=i(a),a&&8===a.nodeType&&"teleport anchor"===a.data){t.targetAnchor=a,u._lpa=t.targetAnchor&&i(t.targetAnchor);break}c(l,t,u,n,o,s,r)}}return t.anchor&&i(t.anchor)}},In=Symbol("Fragment"),Nn=Symbol("Text"),Fn=Symbol("Comment"),Vn=Symbol("Static"),$n=[];let zn=null;function Hn(e=!1){$n.push(zn=e?null:[])}function Un(){$n.pop(),zn=$n[$n.length-1]||null}let Wn,Gn=1;function Yn(e){Gn+=e}function qn(e){return e.dynamicChildren=Gn>0?zn||s.EMPTY_ARR:null,Un(),Gn>0&&zn&&zn.push(e),e}function Kn(e,t,n,o,s,r){return qn(oo(e,t,n,o,s,r,!0))}function Jn(e,t,n,o,s){return qn(so(e,t,n,o,s,!0))}function Xn(e){return!!e&&!0===e.__v_isVNode}function Qn(e,t){return!(6&t.shapeFlag&&D.has(t.type))&&e.type===t.type&&e.key===t.key}function Zn(e){Wn=e}const eo="__vInternal",to=({key:e})=>null!=e?e:null,no=({ref:e,ref_key:t,ref_for:n})=>null!=e?(0,s.isString)(e)||(0,o.isRef)(e)||(0,s.isFunction)(e)?{i:ne,r:e,k:t,f:!!n}:e:null;function oo(e,t=null,n=null,o=0,r=null,i=(e===In?0:1),a=!1,c=!1){const u={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&to(t),ref:t&&no(t),scopeId:oe,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:o,dynamicProps:r,dynamicChildren:null,appContext:null};return c?(fo(u,n),128&i&&e.normalize(u)):n&&(u.shapeFlag|=(0,s.isString)(n)?8:16),u.key!=u.key&&l("VNode created with invalid key (NaN). VNode type:",u.type),Gn>0&&!a&&zn&&(u.patchFlag>0||6&i)&&32!==u.patchFlag&&zn.push(u),u}const so=(...e)=>function(e,t=null,n=null,r=0,i=null,a=!1){if(e&&e!==St||(e||l(`Invalid vnode type when creating vnode: ${e}.`),e=Fn),Xn(e)){const o=io(e,t,!0);return n&&fo(o,n),Gn>0&&!a&&zn&&(6&o.shapeFlag?zn[zn.indexOf(e)]=o:zn.push(o)),o.patchFlag|=-2,o}if(Vo(e)&&(e=e.__vccOpts),t){t=ro(t);let{class:e,style:n}=t;e&&!(0,s.isString)(e)&&(t.class=(0,s.normalizeClass)(e)),(0,s.isObject)(n)&&((0,o.isProxy)(n)&&!(0,s.isArray)(n)&&(n=(0,s.extend)({},n)),t.style=(0,s.normalizeStyle)(n))}const c=(0,s.isString)(e)?1:be(e)?128:(e=>e.__isTeleport)(e)?64:(0,s.isObject)(e)?4:(0,s.isFunction)(e)?2:0;return 4&c&&(0,o.isProxy)(e)&&l("Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with `markRaw` or using `shallowRef` instead of `ref`.","\nComponent that was made reactive: ",e=(0,o.toRaw)(e)),oo(e,t,n,r,i,c,a,!0)}(...Wn?Wn(e,ne):e);function ro(e){return e?(0,o.isProxy)(e)||eo in e?(0,s.extend)({},e):e:null}function io(e,t,n=!1){const{props:o,ref:r,patchFlag:i,children:a}=e,l=t?mo(o||{},t):o;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&to(l),ref:t&&t.ref?n&&r?(0,s.isArray)(r)?r.concat(no(t)):[r,no(t)]:no(t):r,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:-1===i&&(0,s.isArray)(a)?a.map(ao):a,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==In?-1===i?16:16|i:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&io(e.ssContent),ssFallback:e.ssFallback&&io(e.ssFallback),el:e.el,anchor:e.anchor}}function ao(e){const t=io(e);return(0,s.isArray)(e.children)&&(t.children=e.children.map(ao)),t}function lo(e=" ",t=0){return so(Nn,null,e,t)}function co(e,t){const n=so(Vn,null,e);return n.staticCount=t,n}function uo(e="",t=!1){return t?(Hn(),Jn(Fn,null,e)):so(Fn,null,e)}function ho(e){return null==e||"boolean"==typeof e?so(Fn):(0,s.isArray)(e)?so(In,null,e.slice()):"object"==typeof e?po(e):so(Nn,null,String(e))}function po(e){return null===e.el&&-1!==e.patchFlag||e.memo?e:io(e)}function fo(e,t){let n=0;const{shapeFlag:o}=e;if(null==t)t=null;else if((0,s.isArray)(t))n=16;else if("object"==typeof t){if(65&o){const n=t.default;return void(n&&(n._c&&(n._d=!1),fo(e,n()),n._c&&(n._d=!0)))}{n=32;const o=t._;o||eo in t?3===o&&ne&&(1===ne.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ne}}else(0,s.isFunction)(t)?(t={default:t,_ctx:ne},n=32):(t=String(t),64&o?(n=16,t=[lo(t)]):n=8);e.children=t,e.shapeFlag|=n}function mo(...e){const t={};for(let n=0;n<e.length;n++){const o=e[n];for(const e in o)if("class"===e)t.class!==o.class&&(t.class=(0,s.normalizeClass)([t.class,o.class]));else if("style"===e)t.style=(0,s.normalizeStyle)([t.style,o.style]);else if((0,s.isOn)(e)){const n=t[e],r=o[e];!r||n===r||(0,s.isArray)(n)&&n.includes(r)||(t[e]=n?[].concat(n,r):r)}else""!==e&&(t[e]=o[e])}return t}function go(e,t,n,o=null){p(e,t,7,[n,o])}const vo=pn();let yo=0;function bo(e,t,n){const r=e.type,i=(t?t.appContext:e.appContext)||vo,a={uid:yo++,vnode:e,type:r,parent:t,appContext:i,root:null,next:null,subTree:null,effect:null,update:null,scope:new o.EffectScope(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(i.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Jt(r,i),emitsOptions:ee(r,i),emit:null,emitted:null,propsDefaults:s.EMPTY_OBJ,inheritAttrs:r.inheritAttrs,ctx:s.EMPTY_OBJ,data:s.EMPTY_OBJ,props:s.EMPTY_OBJ,attrs:s.EMPTY_OBJ,slots:s.EMPTY_OBJ,refs:s.EMPTY_OBJ,setupState:s.EMPTY_OBJ,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return a.ctx=function(e){const t={};return Object.defineProperty(t,"_",{configurable:!0,enumerable:!1,get:()=>e}),Object.keys(Lt).forEach((n=>{Object.defineProperty(t,n,{configurable:!0,enumerable:!1,get:()=>Lt[n](e),set:s.NOOP})})),t}(a),a.root=t?t.root:a,a.emit=Z.bind(null,a),e.ce&&e.ce(a),a}let _o=null;const xo=()=>_o||ne,wo=e=>{_o=e,e.scope.on()},So=()=>{_o&&_o.scope.off(),_o=null},ko=(0,s.makeMap)("slot,component");function jo(e,t){const n=t.isNativeTag||s.NO;(ko(e)||n(e))&&l("Do not use built-in or reserved HTML elements as component id: "+e)}function Po(e){return 4&e.vnode.shapeFlag}let Oo,Co,Eo=!1;function To(e,t=!1){Eo=t;const{props:n,children:r}=e.vnode,i=Po(e);!function(e,t,n,r=!1){const i={},a={};(0,s.def)(a,eo,1),e.propsDefaults=Object.create(null),qt(e,t,i,a);for(const t in e.propsOptions[0])t in i||(i[t]=void 0);tn(t||{},i,e),n?e.props=r?i:(0,o.shallowReactive)(i):e.type.props?e.props=i:e.props=a,e.attrs=a}(e,n,i,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=(0,o.toRaw)(t),(0,s.def)(t,"_",n)):dn(t,e.slots={})}else e.slots={},t&&hn(e,t);(0,s.def)(e.slots,eo,1)})(e,r);const a=i?function(e,t){var n;const r=e.type;if(r.name&&jo(r.name,e.appContext.config),r.components){const t=Object.keys(r.components);for(let n=0;n<t.length;n++)jo(t[n],e.appContext.config)}if(r.directives){const e=Object.keys(r.directives);for(let t=0;t<e.length;t++)yt(e[t])}r.compilerOptions&&Ro()&&l('"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.'),e.accessCache=Object.create(null),e.proxy=(0,o.markRaw)(new Proxy(e.ctx,Bt)),function(e){const{ctx:t,propsOptions:[n]}=e;n&&Object.keys(n).forEach((n=>{Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>e.props[n],set:s.NOOP})}))}(e);const{setup:i}=r;if(i){const a=e.setupContext=i.length>1?Do(e):null;wo(e),(0,o.pauseTracking)();const c=h(i,e,0,[(0,o.shallowReadonly)(e.props),a]);if((0,o.resetTracking)(),So(),(0,s.isPromise)(c)){if(c.then(So,So),t)return c.then((n=>{Mo(e,n,t)})).catch((t=>{f(t,e,0)}));e.asyncDep=c,e.suspense||l(`Component <${null!==(n=r.name)&&void 0!==n?n:"Anonymous"}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`)}else Mo(e,c,t)}else Lo(e,t)}(e,t):void 0;return Eo=!1,a}function Mo(e,t,n){(0,s.isFunction)(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:(0,s.isObject)(t)?(Xn(t)&&l("setup() should not return VNodes directly - return a render function instead."),e.devtoolsRawSetupState=t,e.setupState=(0,o.proxyRefs)(t),function(e){const{ctx:t,setupState:n}=e;Object.keys((0,o.toRaw)(n)).forEach((e=>{if(!n.__isScriptSetup){if(Dt(e[0]))return void l(`setup() return property ${JSON.stringify(e)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:()=>n[e],set:s.NOOP})}}))}(e)):void 0!==t&&l("setup() should return an object. Received: "+(null===t?"null":typeof t)),Lo(e,n)}function Ao(e){Oo=e,Co=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,It))}}const Ro=()=>!Oo;function Lo(e,t,n){const r=e.type;if(!e.render){if(!t&&Oo&&!r.render){const t=r.template||$t(e).template;if(t){Sn(e,"compile");const{isCustomElement:n,compilerOptions:o}=e.appContext.config,{delimiters:i,compilerOptions:a}=r,l=(0,s.extend)((0,s.extend)({isCustomElement:n,delimiters:i},o),a);r.render=Oo(t,l),kn(e,"compile")}}e.render=r.render||s.NOOP,Co&&Co(e)}__VUE_OPTIONS_API__&&(wo(e),(0,o.pauseTracking)(),function(e){const t=$t(e),n=e.proxy,r=e.ctx;Nt=!1,t.beforeCreate&&Ft(t.beforeCreate,e,"bc");const{data:i,computed:a,methods:c,watch:u,provide:d,inject:h,created:p,beforeMount:f,mounted:m,beforeUpdate:g,updated:v,activated:y,deactivated:b,beforeDestroy:_,beforeUnmount:x,destroyed:w,unmounted:S,render:k,renderTracked:j,renderTriggered:P,errorCaptured:O,serverPrefetch:C,expose:E,inheritAttrs:T,components:M,directives:A,filters:R}=t,L=function(){const e=Object.create(null);return(t,n)=>{e[n]?l(`${t} property "${n}" is already defined in ${e[n]}.`):e[n]=t}}();{const[t]=e.propsOptions;if(t)for(const e in t)L("Props",e)}if(h&&function(e,t,n=s.NOOP,r=!1){(0,s.isArray)(e)&&(e=Wt(e));for(const i in e){const a=e[i];let c;c=(0,s.isObject)(a)?"default"in a?Ce(a.from||i,a.default,!0):Ce(a.from||i):Ce(a),(0,o.isRef)(c)?r?Object.defineProperty(t,i,{enumerable:!0,configurable:!0,get:()=>c.value,set:e=>c.value=e}):(l(`injected property "${i}" is a ref and will be auto-unwrapped and no longer needs \`.value\` in the next minor release. To opt-in to the new behavior now, set \`app.config.unwrapInjectedRef = true\` (this config is temporary and will not be needed in the future.)`),t[i]=c):t[i]=c,n("Inject",i)}}(h,r,L,e.appContext.config.unwrapInjectedRef),c)for(const e in c){const t=c[e];(0,s.isFunction)(t)?(Object.defineProperty(r,e,{value:t.bind(n),configurable:!0,enumerable:!0,writable:!0}),L("Methods",e)):l(`Method "${e}" has type "${typeof t}" in the component definition. Did you reference the function correctly?`)}if(i){(0,s.isFunction)(i)||l("The data option must be a function. Plain object usage is no longer supported.");const t=i.call(n,n);if((0,s.isPromise)(t)&&l("data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>."),(0,s.isObject)(t)){e.data=(0,o.reactive)(t);for(const e in t)L("Data",e),Dt(e[0])||Object.defineProperty(r,e,{configurable:!0,enumerable:!0,get:()=>t[e],set:s.NOOP})}else l("data() should return an object.")}if(Nt=!0,a)for(const e in a){const t=a[e],o=(0,s.isFunction)(t)?t.bind(n,n):(0,s.isFunction)(t.get)?t.get.bind(n,n):s.NOOP;o===s.NOOP&&l(`Computed property "${e}" has no getter.`);const i=!(0,s.isFunction)(t)&&(0,s.isFunction)(t.set)?t.set.bind(n):()=>{l(`Write operation failed: computed property "${e}" is readonly.`)},c=$o({get:o,set:i});Object.defineProperty(r,e,{enumerable:!0,configurable:!0,get:()=>c.value,set:e=>c.value=e}),L("Computed",e)}if(u)for(const e in u)Vt(u[e],r,n,e);if(d){const e=(0,s.isFunction)(d)?d.call(n):d;Reflect.ownKeys(e).forEach((t=>{Oe(t,e[t])}))}function D(e,t){(0,s.isArray)(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(p&&Ft(p,e,"c"),D(lt,f),D(ct,m),D(ut,g),D(dt,v),D(et,y),D(tt,b),D(vt,O),D(gt,j),D(mt,P),D(ht,x),D(pt,S),D(ft,C),(0,s.isArray)(E))if(E.length){const t=e.exposed||(e.exposed={});E.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});k&&e.render===s.NOOP&&(e.render=k),null!=T&&(e.inheritAttrs=T),M&&(e.components=M),A&&(e.directives=A)}(e),(0,o.resetTracking)(),So()),r.render||e.render!==s.NOOP||t||(!Oo&&r.template?l('Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".'):l("Component is missing template or render function."))}function Do(e){let t;return Object.freeze({get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,n)=>(ue(),(0,o.track)(e,"get","$attrs"),t[n]),set:()=>(l("setupContext.attrs is readonly."),!1),deleteProperty:()=>(l("setupContext.attrs is readonly."),!1)})}(e))},get slots(){return(0,o.shallowReadonly)(e.slots)},get emit(){return(t,...n)=>e.emit(t,...n)},expose:t=>{e.exposed&&l("expose() should be called only once per setup()."),e.exposed=t||{}}})}function Bo(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy((0,o.proxyRefs)((0,o.markRaw)(e.exposed)),{get:(t,n)=>n in t?t[n]:n in Lt?Lt[n](e):void 0}))}const Io=/(?:^|[-_])(\w)/g;function No(e,t=!0){return(0,s.isFunction)(e)?e.displayName||e.name:e.name||t&&e.__name}function Fo(e,t,n=!1){let o=No(t);if(!o&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(o=e[1])}if(!o&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};o=n(e.components||e.parent.type.components)||n(e.appContext.components)}return o?o.replace(Io,(e=>e.toUpperCase())).replace(/[-_]/g,""):n?"App":"Anonymous"}function Vo(e){return(0,s.isFunction)(e)&&"__vccOpts"in e}const $o=(e,t)=>(0,o.computed)(e,t,Eo),zo=e=>l(`${e}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);function Ho(){return zo("defineProps"),null}function Uo(){return zo("defineEmits"),null}function Wo(e){zo("defineExpose")}function Go(e,t){return zo("withDefaults"),null}function Yo(){return Ko().slots}function qo(){return Ko().attrs}function Ko(){const e=xo();return e||l("useContext() called without active instance."),e.setupContext||(e.setupContext=Do(e))}function Jo(e,t){const n=(0,s.isArray)(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const o=n[e];o?(0,s.isArray)(o)||(0,s.isFunction)(o)?n[e]={type:o,default:t[e]}:o.default=t[e]:null===o?n[e]={default:t[e]}:l(`props default key "${e}" has no corresponding declaration.`)}return n}function Xo(e,t){const n={};for(const o in e)t.includes(o)||Object.defineProperty(n,o,{enumerable:!0,get:()=>e[o]});return n}function Qo(e){const t=xo();t||l("withAsyncContext called without active current instance. This is likely a bug.");let n=e();return So(),(0,s.isPromise)(n)&&(n=n.catch((e=>{throw wo(t),e}))),[n,()=>wo(t)]}function Zo(e,t,n){const o=arguments.length;return 2===o?(0,s.isObject)(t)&&!(0,s.isArray)(t)?Xn(t)?so(e,null,[t]):so(e,t):so(e,null,t):(o>3?n=Array.prototype.slice.call(arguments,2):3===o&&Xn(n)&&(n=[n]),so(e,t,n))}const es=Symbol("ssrContext"),ts=()=>{{const e=Ce(es);return e||l("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function ns(e){return!(!e||!e.__v_isShallow)}function os(){if("undefined"==typeof window)return;const e={style:"color:#3ba776"},t={style:"color:#0b1bc9"},n={style:"color:#b62e24"},r={style:"color:#9d288c"},i={header:t=>{return(0,s.isObject)(t)?t.__isVue?["div",e,"VueInstance"]:(0,o.isRef)(t)?["div",{},["span",e,(n=t,ns(n)?"ShallowRef":n.effect?"ComputedRef":"Ref")],"<",c(t.value),">"]:(0,o.isReactive)(t)?["div",{},["span",e,ns(t)?"ShallowReactive":"Reactive"],"<",c(t),">"+((0,o.isReadonly)(t)?" (readonly)":"")]:(0,o.isReadonly)(t)?["div",{},["span",e,ns(t)?"ShallowReadonly":"Readonly"],"<",c(t),">"]:null:null;var n},hasBody:e=>e&&e.__isVue,body(e){if(e&&e.__isVue)return["div",{},...a(e.$)]}};function a(e){const t=[];e.type.props&&e.props&&t.push(l("props",(0,o.toRaw)(e.props))),e.setupState!==s.EMPTY_OBJ&&t.push(l("setup",e.setupState)),e.data!==s.EMPTY_OBJ&&t.push(l("data",(0,o.toRaw)(e.data)));const n=u(e,"computed");n&&t.push(l("computed",n));const i=u(e,"inject");return i&&t.push(l("injected",i)),t.push(["div",{},["span",{style:r.style+";opacity:0.66"},"$ (internal): "],["object",{object:e}]]),t}function l(e,t){return t=(0,s.extend)({},t),Object.keys(t).length?["div",{style:"line-height:1.25em;margin-bottom:0.6em"},["div",{style:"color:#476582"},e],["div",{style:"padding-left:1.25em"},...Object.keys(t).map((e=>["div",{},["span",r,e+": "],c(t[e],!1)]))]]:["span",{}]}function c(e,i=!0){return"number"==typeof e?["span",t,e]:"string"==typeof e?["span",n,JSON.stringify(e)]:"boolean"==typeof e?["span",r,e]:(0,s.isObject)(e)?["object",{object:i?(0,o.toRaw)(e):e}]:["span",n,String(e)]}function u(e,t){const n=e.type;if((0,s.isFunction)(n))return;const o={};for(const s in e.ctx)d(n,s,t)&&(o[s]=e.ctx[s]);return o}function d(e,t,n){const o=e[n];return!!((0,s.isArray)(o)&&o.includes(t)||(0,s.isObject)(o)&&t in o)||!(!e.extends||!d(e.extends,t,n))||!(!e.mixins||!e.mixins.some((e=>d(e,t,n))))||void 0}window.devtoolsFormatters?window.devtoolsFormatters.push(i):window.devtoolsFormatters=[i]}function ss(e,t,n,o){const s=n[o];if(s&&rs(s,e))return s;const r=t();return r.memo=e.slice(),n[o]=r}function rs(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if((0,s.hasChanged)(n[e],t[e]))return!1;return Gn>0&&zn&&zn.push(e),!0}const is="3.2.41",as={createComponentInstance:bo,setupComponent:To,renderComponentRoot:de,setCurrentRenderingInstance:se,isVNode:Xn,normalizeVNode:ho},ls=null,cs=null},"./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>s.BaseTransition,Comment:()=>s.Comment,EffectScope:()=>s.EffectScope,Fragment:()=>s.Fragment,KeepAlive:()=>s.KeepAlive,ReactiveEffect:()=>s.ReactiveEffect,Static:()=>s.Static,Suspense:()=>s.Suspense,Teleport:()=>s.Teleport,Text:()=>s.Text,Transition:()=>E,TransitionGroup:()=>Y,VueElement:()=>w,callWithAsyncErrorHandling:()=>s.callWithAsyncErrorHandling,callWithErrorHandling:()=>s.callWithErrorHandling,camelize:()=>s.camelize,capitalize:()=>s.capitalize,cloneVNode:()=>s.cloneVNode,compatUtils:()=>s.compatUtils,computed:()=>s.computed,createApp:()=>je,createBlock:()=>s.createBlock,createCommentVNode:()=>s.createCommentVNode,createElementBlock:()=>s.createElementBlock,createElementVNode:()=>s.createElementVNode,createHydrationRenderer:()=>s.createHydrationRenderer,createPropsRestProxy:()=>s.createPropsRestProxy,createRenderer:()=>s.createRenderer,createSSRApp:()=>Pe,createSlots:()=>s.createSlots,createStaticVNode:()=>s.createStaticVNode,createTextVNode:()=>s.createTextVNode,createVNode:()=>s.createVNode,customRef:()=>s.customRef,defineAsyncComponent:()=>s.defineAsyncComponent,defineComponent:()=>s.defineComponent,defineCustomElement:()=>b,defineEmits:()=>s.defineEmits,defineExpose:()=>s.defineExpose,defineProps:()=>s.defineProps,defineSSRCustomElement:()=>_,devtools:()=>s.devtools,effect:()=>s.effect,effectScope:()=>s.effectScope,getCurrentInstance:()=>s.getCurrentInstance,getCurrentScope:()=>s.getCurrentScope,getTransitionRawChildren:()=>s.getTransitionRawChildren,guardReactiveProps:()=>s.guardReactiveProps,h:()=>s.h,handleError:()=>s.handleError,hydrate:()=>ke,initCustomFormatter:()=>s.initCustomFormatter,initDirectivesForSSR:()=>Me,inject:()=>s.inject,isMemoSame:()=>s.isMemoSame,isProxy:()=>s.isProxy,isReactive:()=>s.isReactive,isReadonly:()=>s.isReadonly,isRef:()=>s.isRef,isRuntimeOnly:()=>s.isRuntimeOnly,isShallow:()=>s.isShallow,isVNode:()=>s.isVNode,markRaw:()=>s.markRaw,mergeDefaults:()=>s.mergeDefaults,mergeProps:()=>s.mergeProps,nextTick:()=>s.nextTick,normalizeClass:()=>s.normalizeClass,normalizeProps:()=>s.normalizeProps,normalizeStyle:()=>s.normalizeStyle,onActivated:()=>s.onActivated,onBeforeMount:()=>s.onBeforeMount,onBeforeUnmount:()=>s.onBeforeUnmount,onBeforeUpdate:()=>s.onBeforeUpdate,onDeactivated:()=>s.onDeactivated,onErrorCaptured:()=>s.onErrorCaptured,onMounted:()=>s.onMounted,onRenderTracked:()=>s.onRenderTracked,onRenderTriggered:()=>s.onRenderTriggered,onScopeDispose:()=>s.onScopeDispose,onServerPrefetch:()=>s.onServerPrefetch,onUnmounted:()=>s.onUnmounted,onUpdated:()=>s.onUpdated,openBlock:()=>s.openBlock,popScopeId:()=>s.popScopeId,provide:()=>s.provide,proxyRefs:()=>s.proxyRefs,pushScopeId:()=>s.pushScopeId,queuePostFlushCb:()=>s.queuePostFlushCb,reactive:()=>s.reactive,readonly:()=>s.readonly,ref:()=>s.ref,registerRuntimeCompiler:()=>s.registerRuntimeCompiler,render:()=>Se,renderList:()=>s.renderList,renderSlot:()=>s.renderSlot,resolveComponent:()=>s.resolveComponent,resolveDirective:()=>s.resolveDirective,resolveDynamicComponent:()=>s.resolveDynamicComponent,resolveFilter:()=>s.resolveFilter,resolveTransitionHooks:()=>s.resolveTransitionHooks,setBlockTracking:()=>s.setBlockTracking,setDevtoolsHook:()=>s.setDevtoolsHook,setTransitionHooks:()=>s.setTransitionHooks,shallowReactive:()=>s.shallowReactive,shallowReadonly:()=>s.shallowReadonly,shallowRef:()=>s.shallowRef,ssrContextKey:()=>s.ssrContextKey,ssrUtils:()=>s.ssrUtils,stop:()=>s.stop,toDisplayString:()=>s.toDisplayString,toHandlerKey:()=>s.toHandlerKey,toHandlers:()=>s.toHandlers,toRaw:()=>s.toRaw,toRef:()=>s.toRef,toRefs:()=>s.toRefs,transformVNodeArgs:()=>s.transformVNodeArgs,triggerRef:()=>s.triggerRef,unref:()=>s.unref,useAttrs:()=>s.useAttrs,useCssModule:()=>S,useCssVars:()=>k,useSSRContext:()=>s.useSSRContext,useSlots:()=>s.useSlots,useTransitionState:()=>s.useTransitionState,vModelCheckbox:()=>te,vModelDynamic:()=>le,vModelRadio:()=>oe,vModelSelect:()=>se,vModelText:()=>ee,vShow:()=>ge,version:()=>s.version,warn:()=>s.warn,watch:()=>s.watch,watchEffect:()=>s.watchEffect,watchPostEffect:()=>s.watchPostEffect,watchSyncEffect:()=>s.watchSyncEffect,withAsyncContext:()=>s.withAsyncContext,withCtx:()=>s.withCtx,withDefaults:()=>s.withDefaults,withDirectives:()=>s.withDirectives,withKeys:()=>me,withMemo:()=>s.withMemo,withModifiers:()=>pe,withScopeId:()=>s.withScopeId});var o=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js"),s=n("./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"),r=n("./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js");const i="undefined"!=typeof document?document:null,a=i&&i.createElement("template"),l={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,o)=>{const s=t?i.createElementNS("http://www.w3.org/2000/svg",e):i.createElement(e,n?{is:n}:void 0);return"select"===e&&o&&null!=o.multiple&&s.setAttribute("multiple",o.multiple),s},createText:e=>i.createTextNode(e),createComment:e=>i.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>i.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,o,s,r){const i=n?n.previousSibling:t.lastChild;if(s&&(s===r||s.nextSibling))for(;t.insertBefore(s.cloneNode(!0),n),s!==r&&(s=s.nextSibling););else{a.innerHTML=o?`<svg>${e}</svg>`:e;const s=a.content;if(o){const e=s.firstChild;for(;e.firstChild;)s.appendChild(e.firstChild);s.removeChild(e)}t.insertBefore(s,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},c=/\s*!important$/;function u(e,t,n){if((0,o.isArray)(n))n.forEach((n=>u(e,t,n)));else if(null==n&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const s=function(e,t){const n=h[t];if(n)return n;let s=(0,o.camelize)(t);if("filter"!==s&&s in e)return h[t]=s;s=(0,o.capitalize)(s);for(let n=0;n<d.length;n++){const o=d[n]+s;if(o in e)return h[t]=o}return t}(e,t);c.test(n)?e.setProperty((0,o.hyphenate)(s),n.replace(c,""),"important"):e[s]=n}}const d=["Webkit","Moz","ms"],h={},p="http://www.w3.org/1999/xlink";function f(e,t,n,o){e.addEventListener(t,n,o)}const m=/(?:Once|Passive|Capture)$/;let g=0;const v=Promise.resolve(),y=/^on[a-z]/;function b(e,t){const n=(0,s.defineComponent)(e);class o extends w{constructor(e){super(n,e,t)}}return o.def=n,o}const _=e=>b(e,ke),x="undefined"!=typeof HTMLElement?HTMLElement:class{};class w extends x{constructor(e,t={},n){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&n?n(this._createVNode(),this.shadowRoot):(this.shadowRoot&&(0,s.warn)("Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use `defineSSRCustomElement`."),this.attachShadow({mode:"open"}))}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,(0,s.nextTick)((()=>{this._connected||(Se(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:n}=e,s=!(0,o.isArray)(t),r=t?s?Object.keys(t):t:[];let i;if(s)for(const e in this._props){const n=t[e];(n===Number||n&&n.type===Number)&&(this._props[e]=(0,o.toNumber)(this._props[e]),(i||(i=Object.create(null)))[e]=!0)}this._numberProps=i;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of r.map(o.camelize))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(n),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=(0,o.toNumber)(t)),this._setProp((0,o.camelize)(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,s=!0){t!==this._props[e]&&(this._props[e]=t,s&&this._instance&&this._update(),n&&(!0===t?this.setAttribute((0,o.hyphenate)(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute((0,o.hyphenate)(e),t+""):t||this.removeAttribute((0,o.hyphenate)(e))))}_update(){Se(this._createVNode(),this.shadowRoot)}_createVNode(){const e=(0,s.createVNode)(this._def,(0,o.extend)({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.ceReload=e=>{this._styles&&(this._styles.forEach((e=>this.shadowRoot.removeChild(e))),this._styles.length=0),this._applyStyles(e),this._def.__asyncLoader||(this._instance=null,this._update())},e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof w){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t),(this._styles||(this._styles=[])).push(t)}))}}function S(e="$style"){{const t=(0,s.getCurrentInstance)();if(!t)return(0,s.warn)("useCssModule must be called inside setup()"),o.EMPTY_OBJ;const n=t.type.__cssModules;if(!n)return(0,s.warn)("Current instance does not have CSS modules injected."),o.EMPTY_OBJ;return n[e]||((0,s.warn)(`Current instance does not have CSS module named "${e}".`),o.EMPTY_OBJ)}}function k(e){const t=(0,s.getCurrentInstance)();if(!t)return void(0,s.warn)("useCssVars is called without current active component instance.");const n=()=>j(t.subTree,e(t.proxy));(0,s.watchPostEffect)(n),(0,s.onMounted)((()=>{const e=new MutationObserver(n);e.observe(t.subTree.el.parentNode,{childList:!0}),(0,s.onUnmounted)((()=>e.disconnect()))}))}function j(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{j(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)P(e.el,t);else if(e.type===s.Fragment)e.children.forEach((e=>j(e,t)));else if(e.type===s.Static){let{el:n,anchor:o}=e;for(;n&&(P(n,t),n!==o);)n=n.nextSibling}}function P(e,t){if(1===e.nodeType){const n=e.style;for(const e in t)n.setProperty(`--${e}`,t[e])}}const O="transition",C="animation",E=(e,{slots:t})=>(0,s.h)(s.BaseTransition,L(e),t);E.displayName="Transition";const T={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},M=E.props=(0,o.extend)({},s.BaseTransition.props,T),A=(e,t=[])=>{(0,o.isArray)(e)?e.forEach((e=>e(...t))):e&&e(...t)},R=e=>!!e&&((0,o.isArray)(e)?e.some((e=>e.length>1)):e.length>1);function L(e){const t={};for(const n in e)n in T||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:s,duration:r,enterFromClass:i=`${n}-enter-from`,enterActiveClass:a=`${n}-enter-active`,enterToClass:l=`${n}-enter-to`,appearFromClass:c=i,appearActiveClass:u=a,appearToClass:d=l,leaveFromClass:h=`${n}-leave-from`,leaveActiveClass:p=`${n}-leave-active`,leaveToClass:f=`${n}-leave-to`}=e,m=function(e){if(null==e)return null;if((0,o.isObject)(e))return[D(e.enter),D(e.leave)];{const t=D(e);return[t,t]}}(r),g=m&&m[0],v=m&&m[1],{onBeforeEnter:y,onEnter:b,onEnterCancelled:_,onLeave:x,onLeaveCancelled:w,onBeforeAppear:S=y,onAppear:k=b,onAppearCancelled:j=_}=t,P=(e,t,n)=>{I(e,t?d:l),I(e,t?u:a),n&&n()},O=(e,t)=>{e._isLeaving=!1,I(e,h),I(e,f),I(e,p),t&&t()},C=e=>(t,n)=>{const o=e?k:b,r=()=>P(t,e,n);A(o,[t,r]),N((()=>{I(t,e?c:i),B(t,e?d:l),R(o)||V(t,s,g,r)}))};return(0,o.extend)(t,{onBeforeEnter(e){A(y,[e]),B(e,i),B(e,a)},onBeforeAppear(e){A(S,[e]),B(e,c),B(e,u)},onEnter:C(!1),onAppear:C(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>O(e,t);B(e,h),U(),B(e,p),N((()=>{e._isLeaving&&(I(e,h),B(e,f),R(x)||V(e,s,v,n))})),A(x,[e,n])},onEnterCancelled(e){P(e,!1),A(_,[e])},onAppearCancelled(e){P(e,!0),A(j,[e])},onLeaveCancelled(e){O(e),A(w,[e])}})}function D(e){const t=(0,o.toNumber)(e);return function(e){"number"!=typeof e?(0,s.warn)(`<transition> explicit duration is not a valid number - got ${JSON.stringify(e)}.`):isNaN(e)&&(0,s.warn)("<transition> explicit duration is NaN - the duration expression might be incorrect.")}(t),t}function B(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function I(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function N(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let F=0;function V(e,t,n,o){const s=e._endId=++F,r=()=>{s===e._endId&&o()};if(n)return setTimeout(r,n);const{type:i,timeout:a,propCount:l}=$(e,t);if(!i)return o();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,h),r()},h=t=>{t.target===e&&++u>=l&&d()};setTimeout((()=>{u<l&&d()}),a+1),e.addEventListener(c,h)}function $(e,t){const n=window.getComputedStyle(e),o=e=>(n[e]||"").split(", "),s=o("transitionDelay"),r=o("transitionDuration"),i=z(s,r),a=o("animationDelay"),l=o("animationDuration"),c=z(a,l);let u=null,d=0,h=0;return t===O?i>0&&(u=O,d=i,h=r.length):t===C?c>0&&(u=C,d=c,h=l.length):(d=Math.max(i,c),u=d>0?i>c?O:C:null,h=u?u===O?r.length:l.length:0),{type:u,timeout:d,propCount:h,hasTransform:u===O&&/\b(transform|all)(,|$)/.test(n.transitionProperty)}}function z(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>H(t)+H(e[n]))))}function H(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function U(){return document.body.offsetHeight}const W=new WeakMap,G=new WeakMap,Y={name:"TransitionGroup",props:(0,o.extend)({},M,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=(0,s.getCurrentInstance)(),o=(0,s.useTransitionState)();let i,a;return(0,s.onUpdated)((()=>{if(!i.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const o=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&o.classList.remove(e)))})),n.split(/\s+/).forEach((e=>e&&o.classList.add(e))),o.style.display="none";const s=1===t.nodeType?t:t.parentNode;s.appendChild(o);const{hasTransform:r}=$(o);return s.removeChild(o),r}(i[0].el,n.vnode.el,t))return;i.forEach(q),i.forEach(K);const o=i.filter(J);U(),o.forEach((e=>{const n=e.el,o=n.style;B(n,t),o.transform=o.webkitTransform=o.transitionDuration="";const s=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",s),n._moveCb=null,I(n,t))};n.addEventListener("transitionend",s)}))})),()=>{const l=(0,r.toRaw)(e),c=L(l);let u=l.tag||s.Fragment;i=a,a=t.default?(0,s.getTransitionRawChildren)(t.default()):[];for(let e=0;e<a.length;e++){const t=a[e];null!=t.key?(0,s.setTransitionHooks)(t,(0,s.resolveTransitionHooks)(t,c,o,n)):(0,s.warn)("<TransitionGroup> children must be keyed.")}if(i)for(let e=0;e<i.length;e++){const t=i[e];(0,s.setTransitionHooks)(t,(0,s.resolveTransitionHooks)(t,c,o,n)),W.set(t,t.el.getBoundingClientRect())}return(0,s.createVNode)(u,null,a)}}};function q(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function K(e){G.set(e,e.el.getBoundingClientRect())}function J(e){const t=W.get(e),n=G.get(e),o=t.left-n.left,s=t.top-n.top;if(o||s){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${o}px,${s}px)`,t.transitionDuration="0s",e}}const X=e=>{const t=e.props["onUpdate:modelValue"]||!1;return(0,o.isArray)(t)?e=>(0,o.invokeArrayFns)(t,e):t};function Q(e){e.target.composing=!0}function Z(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const ee={created(e,{modifiers:{lazy:t,trim:n,number:s}},r){e._assign=X(r);const i=s||r.props&&"number"===r.props.type;f(e,t?"change":"input",(t=>{if(t.target.composing)return;let s=e.value;n&&(s=s.trim()),i&&(s=(0,o.toNumber)(s)),e._assign(s)})),n&&f(e,"change",(()=>{e.value=e.value.trim()})),t||(f(e,"compositionstart",Q),f(e,"compositionend",Z),f(e,"change",Z))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:s,number:r}},i){if(e._assign=X(i),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(n)return;if(s&&e.value.trim()===t)return;if((r||"number"===e.type)&&(0,o.toNumber)(e.value)===t)return}const a=null==t?"":t;e.value!==a&&(e.value=a)}},te={deep:!0,created(e,t,n){e._assign=X(n),f(e,"change",(()=>{const t=e._modelValue,n=ie(e),s=e.checked,r=e._assign;if((0,o.isArray)(t)){const e=(0,o.looseIndexOf)(t,n),i=-1!==e;if(s&&!i)r(t.concat(n));else if(!s&&i){const n=[...t];n.splice(e,1),r(n)}}else if((0,o.isSet)(t)){const e=new Set(t);s?e.add(n):e.delete(n),r(e)}else r(ae(e,s))}))},mounted:ne,beforeUpdate(e,t,n){e._assign=X(n),ne(e,t,n)}};function ne(e,{value:t,oldValue:n},s){e._modelValue=t,(0,o.isArray)(t)?e.checked=(0,o.looseIndexOf)(t,s.props.value)>-1:(0,o.isSet)(t)?e.checked=t.has(s.props.value):t!==n&&(e.checked=(0,o.looseEqual)(t,ae(e,!0)))}const oe={created(e,{value:t},n){e.checked=(0,o.looseEqual)(t,n.props.value),e._assign=X(n),f(e,"change",(()=>{e._assign(ie(e))}))},beforeUpdate(e,{value:t,oldValue:n},s){e._assign=X(s),t!==n&&(e.checked=(0,o.looseEqual)(t,s.props.value))}},se={deep:!0,created(e,{value:t,modifiers:{number:n}},s){const r=(0,o.isSet)(t);f(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?(0,o.toNumber)(ie(e)):ie(e)));e._assign(e.multiple?r?new Set(t):t:t[0])})),e._assign=X(s)},mounted(e,{value:t}){re(e,t)},beforeUpdate(e,t,n){e._assign=X(n)},updated(e,{value:t}){re(e,t)}};function re(e,t){const n=e.multiple;if(!n||(0,o.isArray)(t)||(0,o.isSet)(t)){for(let s=0,r=e.options.length;s<r;s++){const r=e.options[s],i=ie(r);if(n)(0,o.isArray)(t)?r.selected=(0,o.looseIndexOf)(t,i)>-1:r.selected=t.has(i);else if((0,o.looseEqual)(ie(r),t))return void(e.selectedIndex!==s&&(e.selectedIndex=s))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}else(0,s.warn)(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(t).slice(8,-1)}.`)}function ie(e){return"_value"in e?e._value:e.value}function ae(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const le={created(e,t,n){ue(e,t,n,null,"created")},mounted(e,t,n){ue(e,t,n,null,"mounted")},beforeUpdate(e,t,n,o){ue(e,t,n,o,"beforeUpdate")},updated(e,t,n,o){ue(e,t,n,o,"updated")}};function ce(e,t){switch(e){case"SELECT":return se;case"TEXTAREA":return ee;default:switch(t){case"checkbox":return te;case"radio":return oe;default:return ee}}}function ue(e,t,n,o,s){const r=ce(e.tagName,n.props&&n.props.type)[s];r&&r(e,t,n,o)}const de=["ctrl","shift","alt","meta"],he={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>de.some((n=>e[`${n}Key`]&&!t.includes(n)))},pe=(e,t)=>(n,...o)=>{for(let e=0;e<t.length;e++){const o=he[t[e]];if(o&&o(n,t))return}return e(n,...o)},fe={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},me=(e,t)=>n=>{if(!("key"in n))return;const s=(0,o.hyphenate)(n.key);return t.some((e=>e===s||fe[e]===s))?e(n):void 0},ge={beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):ve(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:o}){!t!=!n&&(o?t?(o.beforeEnter(e),ve(e,!0),o.enter(e)):o.leave(e,(()=>{ve(e,!1)})):ve(e,t))},beforeUnmount(e,{value:t}){ve(e,t)}};function ve(e,t){e.style.display=t?e._vod:"none"}const ye=(0,o.extend)({patchProp:(e,t,n,r,i=!1,a,l,c,d)=>{"class"===t?function(e,t,n){const o=e._vtc;o&&(t=(t?[t,...o]:[...o]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,r,i):"style"===t?function(e,t,n){const s=e.style,r=(0,o.isString)(n);if(n&&!r){for(const e in n)u(s,e,n[e]);if(t&&!(0,o.isString)(t))for(const e in t)null==n[e]&&u(s,e,"")}else{const o=s.display;r?t!==n&&(s.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(s.display=o)}}(e,n,r):(0,o.isOn)(t)?(0,o.isModelListener)(t)||function(e,t,n,r,i=null){const a=e._vei||(e._vei={}),l=a[t];if(r&&l)l.value=r;else{const[n,c]=function(e){let t;if(m.test(e)){let n;for(t={};n=e.match(m);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[":"===e[2]?e.slice(3):(0,o.hyphenate)(e.slice(2)),t]}(t);if(r){const l=a[t]=function(e,t){const n=e=>{if(e._vts){if(e._vts<=n.attached)return}else e._vts=Date.now();(0,s.callWithAsyncErrorHandling)(function(e,t){if((0,o.isArray)(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=g||(v.then((()=>g=0)),g=Date.now()),n}(r,i);f(e,n,l,c)}else l&&(function(e,t,n,o){e.removeEventListener(t,n,o)}(e,n,l,c),a[t]=void 0)}}(e,t,0,r,l):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,s){return s?"innerHTML"===t||"textContent"===t||!!(t in e&&y.test(t)&&(0,o.isFunction)(n)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!y.test(t)||!(0,o.isString)(n))&&t in e))))}(e,t,r,i))?function(e,t,n,r,i,a,l){if("innerHTML"===t||"textContent"===t)return r&&l(r,i,a),void(e[t]=null==n?"":n);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=n;const o=null==n?"":n;return e.value===o&&"OPTION"!==e.tagName||(e.value=o),void(null==n&&e.removeAttribute(t))}let c=!1;if(""===n||null==n){const s=typeof e[t];"boolean"===s?n=(0,o.includeBooleanAttr)(n):null==n&&"string"===s?(n="",c=!0):"number"===s&&(n=0,c=!0)}try{e[t]=n}catch(o){c||(0,s.warn)(`Failed setting prop "${t}" on <${e.tagName.toLowerCase()}>: value ${n} is invalid.`,o)}c&&e.removeAttribute(t)}(e,t,r,a,l,c,d):("true-value"===t?e._trueValue=r:"false-value"===t&&(e._falseValue=r),function(e,t,n,s,r){if(s&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(p,t.slice(6,t.length)):e.setAttributeNS(p,t,n);else{const s=(0,o.isSpecialBooleanAttr)(t);null==n||s&&!(0,o.includeBooleanAttr)(n)?e.removeAttribute(t):e.setAttribute(t,s?"":n)}}(e,t,r,i))}},l);let be,_e=!1;function xe(){return be||(be=(0,s.createRenderer)(ye))}function we(){return be=_e?be:(0,s.createHydrationRenderer)(ye),_e=!0,be}const Se=(...e)=>{xe().render(...e)},ke=(...e)=>{we().hydrate(...e)},je=(...e)=>{const t=xe().createApp(...e);Oe(t),Ce(t);const{mount:n}=t;return t.mount=e=>{const s=Ee(e);if(!s)return;const r=t._component;(0,o.isFunction)(r)||r.render||r.template||(r.template=s.innerHTML),s.innerHTML="";const i=n(s,!1,s instanceof SVGElement);return s instanceof Element&&(s.removeAttribute("v-cloak"),s.setAttribute("data-v-app","")),i},t},Pe=(...e)=>{const t=we().createApp(...e);Oe(t),Ce(t);const{mount:n}=t;return t.mount=e=>{const t=Ee(e);if(t)return n(t,!0,t instanceof SVGElement)},t};function Oe(e){Object.defineProperty(e.config,"isNativeTag",{value:e=>(0,o.isHTMLTag)(e)||(0,o.isSVGTag)(e),writable:!1})}function Ce(e){if((0,s.isRuntimeOnly)()){const t=e.config.isCustomElement;Object.defineProperty(e.config,"isCustomElement",{get:()=>t,set(){(0,s.warn)("The `isCustomElement` config option is deprecated. Use `compilerOptions.isCustomElement` instead.")}});const n=e.config.compilerOptions,o='The `compilerOptions` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, `compilerOptions` must be passed to `@vue/compiler-dom` in the build setup instead.\n- For vue-loader: pass it via vue-loader\'s `compilerOptions` loader option.\n- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom';Object.defineProperty(e.config,"compilerOptions",{get:()=>((0,s.warn)(o),n),set(){(0,s.warn)(o)}})}}function Ee(e){if((0,o.isString)(e)){const t=document.querySelector(e);return t||(0,s.warn)(`Failed to mount app: mount target selector "${e}" returned null.`),t}return window.ShadowRoot&&e instanceof window.ShadowRoot&&"closed"===e.mode&&(0,s.warn)('mounting on a ShadowRoot with `{mode: "closed"}` may lead to unpredictable bugs'),e}let Te=!1;const Me=()=>{Te||(Te=!0,ee.getSSRProps=({value:e})=>({value:e}),oe.getSSRProps=({value:e},t)=>{if(t.props&&(0,o.looseEqual)(t.props.value,e))return{checked:!0}},te.getSSRProps=({value:e},t)=>{if((0,o.isArray)(e)){if(t.props&&(0,o.looseIndexOf)(e,t.props.value)>-1)return{checked:!0}}else if((0,o.isSet)(e)){if(t.props&&e.has(t.props.value))return{checked:!0}}else if(e)return{checked:!0}},le.getSSRProps=(e,t)=>{if("string"!=typeof t.type)return;const n=ce(t.type.toUpperCase(),t.props&&t.props.type);return n.getSSRProps?n.getSSRProps(e,t):void 0},ge.getSSRProps=({value:e})=>{if(!e)return{style:{display:"none"}}})}},"./node_modules/@vue/shared/dist/shared.esm-bundler.js":(e,t,n)=>{"use strict";function o(e,t){const n=Object.create(null),o=e.split(",");for(let e=0;e<o.length;e++)n[o[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}n.r(t),n.d(t,{EMPTY_ARR:()=>N,EMPTY_OBJ:()=>I,NO:()=>V,NOOP:()=>F,PatchFlagNames:()=>s,camelize:()=>he,capitalize:()=>me,def:()=>be,escapeHtml:()=>T,escapeHtmlComment:()=>A,extend:()=>U,genPropsAccessExp:()=>ke,generateCodeFrame:()=>a,getGlobalThis:()=>we,hasChanged:()=>ve,hasOwn:()=>Y,hyphenate:()=>fe,includeBooleanAttr:()=>d,invokeArrayFns:()=>ye,isArray:()=>q,isBooleanAttr:()=>u,isBuiltInDirective:()=>ce,isDate:()=>X,isFunction:()=>Q,isGloballyWhitelisted:()=>i,isHTMLTag:()=>P,isIntegerKey:()=>ae,isKnownHtmlAttr:()=>v,isKnownSvgAttr:()=>y,isMap:()=>K,isModelListener:()=>H,isNoUnitNumericStyleProp:()=>g,isObject:()=>te,isOn:()=>z,isPlainObject:()=>ie,isPromise:()=>ne,isReservedProp:()=>le,isSSRSafeAttrName:()=>f,isSVGTag:()=>O,isSet:()=>J,isSpecialBooleanAttr:()=>c,isString:()=>Z,isSymbol:()=>ee,isVoidTag:()=>C,looseEqual:()=>R,looseIndexOf:()=>L,makeMap:()=>o,normalizeClass:()=>k,normalizeProps:()=>j,normalizeStyle:()=>b,objectToString:()=>oe,parseStringStyle:()=>w,propsToAttrMap:()=>m,remove:()=>W,slotFlagsText:()=>r,stringifyStyle:()=>S,toDisplayString:()=>D,toHandlerKey:()=>ge,toNumber:()=>_e,toRawType:()=>re,toTypeString:()=>se});const s={1:"TEXT",2:"CLASS",4:"STYLE",8:"PROPS",16:"FULL_PROPS",32:"HYDRATE_EVENTS",64:"STABLE_FRAGMENT",128:"KEYED_FRAGMENT",256:"UNKEYED_FRAGMENT",512:"NEED_PATCH",1024:"DYNAMIC_SLOTS",2048:"DEV_ROOT_FRAGMENT",[-1]:"HOISTED",[-2]:"BAIL"},r={1:"STABLE",2:"DYNAMIC",3:"FORWARDED"},i=o("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt");function a(e,t=0,n=e.length){let o=e.split(/(\r?\n)/);const s=o.filter(((e,t)=>t%2==1));o=o.filter(((e,t)=>t%2==0));let r=0;const i=[];for(let e=0;e<o.length;e++)if(r+=o[e].length+(s[e]&&s[e].length||0),r>=t){for(let a=e-2;a<=e+2||n>r;a++){if(a<0||a>=o.length)continue;const l=a+1;i.push(`${l}${" ".repeat(Math.max(3-String(l).length,0))}|  ${o[a]}`);const c=o[a].length,u=s[a]&&s[a].length||0;if(a===e){const e=t-(r-(c+u)),o=Math.max(1,n>r?c-e:n-t);i.push("   |  "+" ".repeat(e)+"^".repeat(o))}else if(a>e){if(n>r){const e=Math.max(Math.min(n-r,c),1);i.push("   |  "+"^".repeat(e))}r+=c+u}}break}return i.join("\n")}const l="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",c=o(l),u=o(l+",async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");function d(e){return!!e||""===e}const h=/[>/="'\u0009\u000a\u000c\u0020]/,p={};function f(e){if(p.hasOwnProperty(e))return p[e];const t=h.test(e);return t&&console.error(`unsafe attribute name: ${e}`),p[e]=!t}const m={acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},g=o("animation-iteration-count,border-image-outset,border-image-slice,border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,stroke-miterlimit,stroke-opacity,stroke-width"),v=o("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap"),y=o("xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan");function b(e){if(q(e)){const t={};for(let n=0;n<e.length;n++){const o=e[n],s=Z(o)?w(o):b(o);if(s)for(const e in s)t[e]=s[e]}return t}return Z(e)||te(e)?e:void 0}const _=/;(?![^(]*\))/g,x=/:(.+)/;function w(e){const t={};return e.split(_).forEach((e=>{if(e){const n=e.split(x);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function S(e){let t="";if(!e||Z(e))return t;for(const n in e){const o=e[n],s=n.startsWith("--")?n:fe(n);(Z(o)||"number"==typeof o&&g(s))&&(t+=`${s}:${o};`)}return t}function k(e){let t="";if(Z(e))t=e;else if(q(e))for(let n=0;n<e.length;n++){const o=k(e[n]);o&&(t+=o+" ")}else if(te(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function j(e){if(!e)return null;let{class:t,style:n}=e;return t&&!Z(t)&&(e.class=k(t)),n&&(e.style=b(n)),e}const P=o("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),O=o("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),C=o("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr"),E=/["'&<>]/;function T(e){const t=""+e,n=E.exec(t);if(!n)return t;let o,s,r="",i=0;for(s=n.index;s<t.length;s++){switch(t.charCodeAt(s)){case 34:o="&quot;";break;case 38:o="&amp;";break;case 39:o="&#39;";break;case 60:o="&lt;";break;case 62:o="&gt;";break;default:continue}i!==s&&(r+=t.slice(i,s)),i=s+1,r+=o}return i!==s?r+t.slice(i,s):r}const M=/^-?>|<!--|-->|--!>|<!-$/g;function A(e){return e.replace(M,"")}function R(e,t){if(e===t)return!0;let n=X(e),o=X(t);if(n||o)return!(!n||!o)&&e.getTime()===t.getTime();if(n=ee(e),o=ee(t),n||o)return e===t;if(n=q(e),o=q(t),n||o)return!(!n||!o)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let o=0;n&&o<e.length;o++)n=R(e[o],t[o]);return n}(e,t);if(n=te(e),o=te(t),n||o){if(!n||!o)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const o=e.hasOwnProperty(n),s=t.hasOwnProperty(n);if(o&&!s||!o&&s||!R(e[n],t[n]))return!1}}return String(e)===String(t)}function L(e,t){return e.findIndex((e=>R(e,t)))}const D=e=>Z(e)?e:null==e?"":q(e)||te(e)&&(e.toString===oe||!Q(e.toString))?JSON.stringify(e,B,2):String(e),B=(e,t)=>t&&t.__v_isRef?B(e,t.value):K(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:J(t)?{[`Set(${t.size})`]:[...t.values()]}:!te(t)||q(t)||ie(t)?t:String(t),I=Object.freeze({}),N=Object.freeze([]),F=()=>{},V=()=>!1,$=/^on[^a-z]/,z=e=>$.test(e),H=e=>e.startsWith("onUpdate:"),U=Object.assign,W=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},G=Object.prototype.hasOwnProperty,Y=(e,t)=>G.call(e,t),q=Array.isArray,K=e=>"[object Map]"===se(e),J=e=>"[object Set]"===se(e),X=e=>"[object Date]"===se(e),Q=e=>"function"==typeof e,Z=e=>"string"==typeof e,ee=e=>"symbol"==typeof e,te=e=>null!==e&&"object"==typeof e,ne=e=>te(e)&&Q(e.then)&&Q(e.catch),oe=Object.prototype.toString,se=e=>oe.call(e),re=e=>se(e).slice(8,-1),ie=e=>"[object Object]"===se(e),ae=e=>Z(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,le=o(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),ce=o("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),ue=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},de=/-(\w)/g,he=ue((e=>e.replace(de,((e,t)=>t?t.toUpperCase():"")))),pe=/\B([A-Z])/g,fe=ue((e=>e.replace(pe,"-$1").toLowerCase())),me=ue((e=>e.charAt(0).toUpperCase()+e.slice(1))),ge=ue((e=>e?`on${me(e)}`:"")),ve=(e,t)=>!Object.is(e,t),ye=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},be=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},_e=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let xe;const we=()=>xe||(xe="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{}),Se=/^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;function ke(e){return Se.test(e)?`__props.${e}`:`__props[${JSON.stringify(e)}]`}},"./node_modules/@wordpress/hooks/build-module/createAddHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@wordpress/hooks/build-module/validateNamespace.js"),s=n("./node_modules/@wordpress/hooks/build-module/validateHookName.js");const r=function(e,t){return function(n,r,i){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10;const l=e[t];if(!(0,s.default)(n))return;if(!(0,o.default)(r))return;if("function"!=typeof i)return void console.error("The hook callback must be a function.");if("number"!=typeof a)return void console.error("If specified, the hook priority must be a number.");const c={callback:i,priority:a,namespace:r};if(l[n]){const e=l[n].handlers;let t;for(t=e.length;t>0&&!(a>=e[t-1].priority);t--);t===e.length?e[t]=c:e.splice(t,0,c),l.__current.forEach((e=>{e.name===n&&e.currentIndex>=t&&e.currentIndex++}))}else l[n]={handlers:[c],runs:0};"hookAdded"!==n&&e.doAction("hookAdded",n,r,i,a)}}},"./node_modules/@wordpress/hooks/build-module/createCurrentHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){return function(){var n,o;const s=e[t];return null!==(n=null===(o=s.__current[s.__current.length-1])||void 0===o?void 0:o.name)&&void 0!==n?n:null}}},"./node_modules/@wordpress/hooks/build-module/createDidHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/@wordpress/hooks/build-module/validateHookName.js");const s=function(e,t){return function(n){const s=e[t];if((0,o.default)(n))return s[n]&&s[n].runs?s[n].runs:0}}},"./node_modules/@wordpress/hooks/build-module/createDoingHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){return function(n){const o=e[t];return void 0===n?void 0!==o.__current[0]:!!o.__current[0]&&n===o.__current[0].name}}},"./node_modules/@wordpress/hooks/build-module/createHasHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){return function(n,o){const s=e[t];return void 0!==o?n in s&&s[n].handlers.some((e=>e.namespace===o)):n in s}}},"./node_modules/@wordpress/hooks/build-module/createHooks.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{_Hooks:()=>u,default:()=>d});var o=n("./node_modules/@wordpress/hooks/build-module/createAddHook.js"),s=n("./node_modules/@wordpress/hooks/build-module/createRemoveHook.js"),r=n("./node_modules/@wordpress/hooks/build-module/createHasHook.js"),i=n("./node_modules/@wordpress/hooks/build-module/createRunHook.js"),a=n("./node_modules/@wordpress/hooks/build-module/createCurrentHook.js"),l=n("./node_modules/@wordpress/hooks/build-module/createDoingHook.js"),c=n("./node_modules/@wordpress/hooks/build-module/createDidHook.js");class u{constructor(){this.actions=Object.create(null),this.actions.__current=[],this.filters=Object.create(null),this.filters.__current=[],this.addAction=(0,o.default)(this,"actions"),this.addFilter=(0,o.default)(this,"filters"),this.removeAction=(0,s.default)(this,"actions"),this.removeFilter=(0,s.default)(this,"filters"),this.hasAction=(0,r.default)(this,"actions"),this.hasFilter=(0,r.default)(this,"filters"),this.removeAllActions=(0,s.default)(this,"actions",!0),this.removeAllFilters=(0,s.default)(this,"filters",!0),this.doAction=(0,i.default)(this,"actions"),this.applyFilters=(0,i.default)(this,"filters",!0),this.currentAction=(0,a.default)(this,"actions"),this.currentFilter=(0,a.default)(this,"filters"),this.doingAction=(0,l.default)(this,"actions"),this.doingFilter=(0,l.default)(this,"filters"),this.didAction=(0,c.default)(this,"actions"),this.didFilter=(0,c.default)(this,"filters")}}const d=function(){return new u}},"./node_modules/@wordpress/hooks/build-module/createRemoveHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@wordpress/hooks/build-module/validateNamespace.js"),s=n("./node_modules/@wordpress/hooks/build-module/validateHookName.js");const r=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return function(r,i){const a=e[t];if(!(0,s.default)(r))return;if(!n&&!(0,o.default)(i))return;if(!a[r])return 0;let l=0;if(n)l=a[r].handlers.length,a[r]={runs:a[r].runs,handlers:[]};else{const e=a[r].handlers;for(let t=e.length-1;t>=0;t--)e[t].namespace===i&&(e.splice(t,1),l++,a.__current.forEach((e=>{e.name===r&&e.currentIndex>=t&&e.currentIndex--})))}return"hookRemoved"!==r&&e.doAction("hookRemoved",r,i),l}}},"./node_modules/@wordpress/hooks/build-module/createRunHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return function(o){const s=e[t];s[o]||(s[o]={handlers:[],runs:0}),s[o].runs++;const r=s[o].handlers;"hookAdded"!==o&&s.all&&r.push(...s.all.handlers);for(var i=arguments.length,a=new Array(i>1?i-1:0),l=1;l<i;l++)a[l-1]=arguments[l];if(!r||!r.length)return n?a[0]:void 0;const c={name:o,currentIndex:0};for(s.__current.push(c);c.currentIndex<r.length;){const e=r[c.currentIndex].callback.apply(null,a);n&&(a[0]=e),c.currentIndex++}return s.__current.pop(),n?a[0]:void 0}}},"./node_modules/@wordpress/hooks/build-module/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{actions:()=>x,addAction:()=>r,addFilter:()=>i,applyFilters:()=>f,createHooks:()=>o.default,currentAction:()=>m,currentFilter:()=>g,defaultHooks:()=>s,didAction:()=>b,didFilter:()=>_,doAction:()=>p,doingAction:()=>v,doingFilter:()=>y,filters:()=>w,hasAction:()=>c,hasFilter:()=>u,removeAction:()=>a,removeAllActions:()=>d,removeAllFilters:()=>h,removeFilter:()=>l});var o=n("./node_modules/@wordpress/hooks/build-module/createHooks.js");const s=(0,o.default)(),{addAction:r,addFilter:i,removeAction:a,removeFilter:l,hasAction:c,hasFilter:u,removeAllActions:d,removeAllFilters:h,doAction:p,applyFilters:f,currentAction:m,currentFilter:g,doingAction:v,doingFilter:y,didAction:b,didFilter:_,actions:x,filters:w}=s},"./node_modules/@wordpress/hooks/build-module/validateHookName.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e){return"string"!=typeof e||""===e?(console.error("The hook name must be a non-empty string."),!1):/^__/.test(e)?(console.error("The hook name cannot begin with `__`."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(e)||(console.error("The hook name can only contain numbers, letters, dashes, periods and underscores."),!1)}},"./node_modules/@wordpress/hooks/build-module/validateNamespace.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e){return"string"!=typeof e||""===e?(console.error("The namespace must be a non-empty string."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(e)||(console.error("The namespace can only contain numbers, letters, dashes, periods, underscores and slashes."),!1)}},"./node_modules/@wordpress/i18n/build-module/create-i18n.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{createI18n:()=>i});var o=n("./node_modules/tannin/index.js");const s={plural_forms:e=>1===e?0:1},r=/^i18n\.(n?gettext|has_translation)(_|$)/,i=(e,t,n)=>{const i=new o.default({}),a=new Set,l=()=>{a.forEach((e=>e()))},c=function(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"default";i.data[n]={...i.data[n],...e},i.data[n][""]={...s,...null===(t=i.data[n])||void 0===t?void 0:t[""]},delete i.pluralForms[n]},u=(e,t)=>{c(e,t),l()},d=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"default",t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,o=arguments.length>3?arguments[3]:void 0,s=arguments.length>4?arguments[4]:void 0;return i.data[e]||c(void 0,e),i.dcnpgettext(e,t,n,o,s)},h=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"default";return e},p=(e,t,o)=>{let s=d(o,t,e);return n?(s=n.applyFilters("i18n.gettext_with_context",s,e,t,o),n.applyFilters("i18n.gettext_with_context_"+h(o),s,e,t,o)):s};if(e&&u(e,t),n){const e=e=>{r.test(e)&&l()};n.addAction("hookAdded","core/i18n",e),n.addAction("hookRemoved","core/i18n",e)}return{getLocaleData:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"default";return i.data[e]},setLocaleData:u,addLocaleData:function(e){var t;let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"default";i.data[n]={...i.data[n],...e,"":{...s,...null===(t=i.data[n])||void 0===t?void 0:t[""],...null==e?void 0:e[""]}},delete i.pluralForms[n],l()},resetLocaleData:(e,t)=>{i.data={},i.pluralForms={},u(e,t)},subscribe:e=>(a.add(e),()=>a.delete(e)),__:(e,t)=>{let o=d(t,void 0,e);return n?(o=n.applyFilters("i18n.gettext",o,e,t),n.applyFilters("i18n.gettext_"+h(t),o,e,t)):o},_x:p,_n:(e,t,o,s)=>{let r=d(s,void 0,e,t,o);return n?(r=n.applyFilters("i18n.ngettext",r,e,t,o,s),n.applyFilters("i18n.ngettext_"+h(s),r,e,t,o,s)):r},_nx:(e,t,o,s,r)=>{let i=d(r,s,e,t,o);return n?(i=n.applyFilters("i18n.ngettext_with_context",i,e,t,o,s,r),n.applyFilters("i18n.ngettext_with_context_"+h(r),i,e,t,o,s,r)):i},isRTL:()=>"rtl"===p("ltr","text direction"),hasTranslation:(e,t,o)=>{var s,r;const a=t?t+""+e:e;let l=!(null===(s=i.data)||void 0===s||null===(r=s[null!=o?o:"default"])||void 0===r||!r[a]);return n&&(l=n.applyFilters("i18n.has_translation",l,e,t,o),l=n.applyFilters("i18n.has_translation_"+h(o),l,e,t,o)),l}}}},"./node_modules/@wordpress/i18n/build-module/default-i18n.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{__:()=>d,_n:()=>p,_nx:()=>f,_x:()=>h,default:()=>i,getLocaleData:()=>a,hasTranslation:()=>g,isRTL:()=>m,resetLocaleData:()=>c,setLocaleData:()=>l,subscribe:()=>u});var o=n("./node_modules/@wordpress/i18n/build-module/create-i18n.js"),s=n("./node_modules/@wordpress/hooks/build-module/index.js");const r=(0,o.createI18n)(void 0,void 0,s.defaultHooks),i=r,a=r.getLocaleData.bind(r),l=r.setLocaleData.bind(r),c=r.resetLocaleData.bind(r),u=r.subscribe.bind(r),d=r.__.bind(r),h=r._x.bind(r),p=r._n.bind(r),f=r._nx.bind(r),m=r.isRTL.bind(r),g=r.hasTranslation.bind(r)},"./node_modules/@wordpress/i18n/build-module/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{__:()=>r.__,_n:()=>r._n,_nx:()=>r._nx,_x:()=>r._x,createI18n:()=>s.createI18n,defaultI18n:()=>r.default,getLocaleData:()=>r.getLocaleData,hasTranslation:()=>r.hasTranslation,isRTL:()=>r.isRTL,resetLocaleData:()=>r.resetLocaleData,setLocaleData:()=>r.setLocaleData,sprintf:()=>o.sprintf,subscribe:()=>r.subscribe});var o=n("./node_modules/@wordpress/i18n/build-module/sprintf.js"),s=n("./node_modules/@wordpress/i18n/build-module/create-i18n.js"),r=n("./node_modules/@wordpress/i18n/build-module/default-i18n.js")},"./node_modules/@wordpress/i18n/build-module/sprintf.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{sprintf:()=>l});var o=n("./node_modules/memize/index.js"),s=n.n(o),r=n("./node_modules/sprintf-js/src/sprintf.js"),i=n.n(r);const a=s()(console.error);function l(e){try{for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return i().sprintf(e,...n)}catch(t){return t instanceof Error&&a("sprintf error: \n\n"+t.toString()),e}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js"),s=n("./src/utils/menu-fix.js"),r=n("./src/components/tabs/PageTabs.vue"),i=n("./src/components/alert/BaseAlert.vue");function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const c={name:"App",components:{PageTabs:r.default,BaseAlert:i.default},watch:{$route:function(){(0,s.menuFix)(),this.hideAlert()}},created:function(){this.fetchSettings()},methods:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},(0,o.mapActions)(["fetchSettings","hideAlert"]))}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/alert/BaseAlert.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js");function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const a={name:"BaseAlert",computed:r({},(0,o.mapGetters)(["alert"])),methods:r({},(0,o.mapActions)(["setAlert","hideAlert"]))}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/BaseButton.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"BaseButton",components:{BaseSpinner:n("./src/components/spinner/BaseSpinner.vue").default},props:{type:{type:String,required:!1,default:"button"},variant:{type:String,required:!1,default:"default"},loading:{type:Boolean,required:!1,default:!1}},computed:{variantStyles:function(){var e="";switch(this.variant){case"primary":e+="background-color:var(--color-primary)";break;case"error":e+="background-color:var(--color-error)";break;case"default":e+="background-color:var(--color-secondary)"}return e}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/card/BaseCard.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"BaseCard",props:{headerTitle:{type:String,required:!0},headerDescription:{type:String,required:!1,default:""}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChart.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/vue-chartjs/dist/index.js"),s=n("./node_modules/chart.js/dist/chart.mjs"),r={name:"BarChart",components:{Bar:o.Bar},props:{chartId:{type:String,default:"bar-chart"},width:{type:Number,default:400},height:{type:Number,default:400},cssClasses:{default:"",type:String},styles:{type:Object,default:function(){}},plugins:{type:Array,default:function(){return[]}},labels:{type:Array,default:function(){return[]}},datasets:{type:Object,default:function(){}},chartOptions:{type:Object,required:!1,default:{responsive:!0,maintainAspectRatio:!1}}},computed:{chartData:function(){return{labels:this.labels,datasets:this.datasets}}}};const i=Object.assign(r,{setup:function(e,t){(0,t.expose)(),s.Chart.register(s.Title,s.Tooltip,s.Legend,s.BarElement,s.CategoryScale,s.LinearScale);var n={Bar:o.Bar,ChartJS:s.Chart,Title:s.Title,Tooltip:s.Tooltip,Legend:s.Legend,BarElement:s.BarElement,CategoryScale:s.CategoryScale,LinearScale:s.LinearScale};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChartLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"BarChartLoading",components:{SkeletonText:n("./src/components/skeleton/SkeletonText.vue").default}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"BaseInput",props:{name:{type:String,required:!0},type:{type:String,required:!1,default:"text"},value:{type:[String,Number,Array],required:!1,default:""},placeholder:{type:String,required:!1,default:""},required:{type:Boolean,required:!1,default:!1},onChange:{type:Function,required:!1,default:function(){}},min:{type:Number,required:!1},max:{type:Number,required:!1}},computed:{isDefaultInput:function(){return["text","number","email","search","url"].includes(this.type)},isCheckbox:function(){return"switch"===this.type||"checkbox"===this.type},isChecked:function(){return 1===parseInt(this.value)}},methods:{onChangeInput:function(e){this.isCheckbox?this.onChange({key:this.name,value:e.target.checked?1:0}):this.onChange({key:this.name,value:e.target.value})}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/InputSection.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"InputSection",components:{BaseInput:n("./src/components/input/BaseInput.vue").default},props:{label:{type:String,required:!0},name:{type:String,required:!0},type:{type:String,required:!1,default:"text"},value:{type:[String,Number,Array],required:!1,default:""},hint:{type:String,required:!1,default:""},placeholder:{type:String,required:!1,default:""},required:{type:Boolean,required:!1,default:!1},onChange:{type:Function,required:!1,default:function(){}},min:{type:Number,required:!1},max:{type:Number,required:!1}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/BasePagination.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@wordpress/i18n/build-module/index.js"),s={name:"BasePagination",props:{maxVisibleButtons:{type:Number,required:!1,default:3},totalPages:{type:Number,required:!0},perPage:{type:Number,required:!0},currentPage:{type:Number,required:!0},totalItems:{type:Number,default:0}},computed:{isInFirstPage:function(){return 1===this.currentPage},isInLastPage:function(){return this.currentPage===this.totalPages}},methods:{onClickPreviousPage:function(){this.$emit("pagechanged",this.currentPage-1)},onClickNextPage:function(){this.$emit("pagechanged",this.currentPage+1)}}};const r=Object.assign(s,{setup:function(e,t){(0,t.expose)();var n={__:o.__};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/PaginationLoader.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"PaginationLoader",components:{SkeletonText:n("./src/components/skeleton/SkeletonText.vue").default}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingForm.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var o=n("./src/components/card/BaseCard.vue"),s=n("./src/components/button/BaseButton.vue"),r=n("./src/components/input/InputSection.vue"),i=n("./src/components/input/BaseInput.vue"),a=n("./node_modules/@wordpress/i18n/build-module/index.js");function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}var c={name:"SettingForm",components:{BaseCard:o.default,BaseButton:s.default,InputSection:r.default,BaseInput:i.default},props:{change:{type:Function,required:!0},settings:{type:Object,required:!0}},data:function(){return{emailsData:(e=this.settings.emails,function(e){if(Array.isArray(e))return l(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())};var e},methods:{changeInput:function(e){this.change(e)},changeEmailInput:function(e,t){this.emailsData[t]=e.value,this.saveEmails()},appendEmail:function(){this.emailsData.push("")},deleteEmail:function(e){this.emailsData.splice(e,1),this.saveEmails()},saveEmails:function(){this.change({key:"emails",value:this.emailsData.length?this.emailsData:""})},onSubmit:function(e){e.preventDefault()}}};const u=Object.assign(c,{setup:function(e,t){(0,t.expose)();var n={BaseCard:o.default,BaseButton:s.default,InputSection:r.default,BaseInput:i.default,__:a.__};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingFormLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"SettingFormLoading",components:{SkeletonText:n("./src/components/skeleton/SkeletonText.vue").default}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"SkeletonText",props:{width:{type:String,required:!1,default:"100%"}},computed:{skeletonWidthStyle:function(){return{width:this.width}}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/spinner/BaseSpinner.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"BaseSpinner",props:{status:{type:Boolean,default:!0},rotation:{type:Boolean,default:!0},size:{type:Number,default:12},depth:{type:Number,default:3},speed:{type:Number,default:.8},color:{type:String,default:"#4fc08d"}},data:function(){return{rotationAnimations:["forward","backward"],sizeUnits:"px",timeUnits:"s"}},computed:{rotationDirection:function(){return this.rotation?this.rotationAnimations[0]:this.rotationAnimations[1]},spinnerSize:function(){return this.size+this.sizeUnits},spinnerDepth:function(){return this.depth+this.sizeUnits},spinnerSpeed:function(){return this.speed+this.timeUnits},spinnerStyle:function(){return{borderTopColor:this.hexToRGB(this.color,.15),borderRightColor:this.hexToRGB(this.color,.15),borderBottomColor:this.hexToRGB(this.color,.15),borderLeftColor:this.color,width:this.spinnerSize,height:this.spinnerSize,borderWidth:this.spinnerDepth,animationName:this.rotationDirection,animationDuration:this.spinnerSpeed,marginRight:5}}},methods:{hexToRGB:function(e,t){var n=parseInt(e.slice(1,3),16),o=parseInt(e.slice(3,5),16),s=parseInt(e.slice(5,7),16);return t?"rgba(".concat(n,", ").concat(o,", ").concat(s,", ").concat(t,")"):"rgb(".concat(n,", ").concat(o,", ").concat(s,")")}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js");function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const i={name:"BaseTable",components:{TableLoading:n("./src/components/tables/TableLoading.vue").default},props:{headers:{type:Array,required:!0},rows:{type:Object,required:!0},loading:{type:Boolean,required:!1,default:!1},htmlColumns:{type:Array,required:!1,default:function(){return[]}}},computed:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},(0,o.mapGetters)(["settings"])),methods:{isHtml:function(e){return this.htmlColumns.includes(e)}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"TableLoading",components:{SkeletonText:n("./src/components/skeleton/SkeletonText.vue").default}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/PageTabs.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@wordpress/i18n/build-module/index.js"),s={name:"PageTabs"};const r=Object.assign(s,{setup:function(e,t){(0,t.expose)();var n={__:o.__};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/GraphPage.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>h});var o=n("./src/components/chart/BarChart.vue"),s=n("./src/components/chart/BarChartLoading.vue"),r=n("./src/components/spinner/BaseSpinner.vue"),i=n("./node_modules/@wordpress/i18n/build-module/index.js"),a=n("./node_modules/vuex/dist/vuex.esm-bundler.js");function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var d={name:"GraphPage",components:{BarChart:o.default,BaseSpinner:r.default,BarChartLoading:s.default},computed:c({},(0,a.mapGetters)(["graphLoading","graphRefreshing","graphLabels","graphDatasets"])),created:function(){this.getGraphData()},methods:c(c({},(0,a.mapActions)(["getGraphData"])),{},{refreshChart:function(){this.getGraphData(!0)}})};const h=Object.assign(d,{setup:function(e,t){(0,t.expose)();var n={BarChart:o.default,BarChartLoading:s.default,BaseSpinner:r.default,__:i.__,mapActions:a.mapActions,mapGetters:a.mapGetters};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/ListPage.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>h});var o=n("./src/components/tables/BaseTable.vue"),s=n("./src/components/pagination/BasePagination.vue"),r=n("./src/components/pagination/PaginationLoader.vue"),i=n("./node_modules/@wordpress/i18n/build-module/index.js"),a=n("./node_modules/vuex/dist/vuex.esm-bundler.js");function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var d={name:"ListPage",components:{BaseTable:o.default,BasePagination:s.default,PaginationLoader:r.default},data:function(){return{currentPage:1,htmlColumns:["url"]}},computed:c({},(0,a.mapGetters)(["tableLoading","pageTitle","headers","rows","settings"])),watch:{settings:function(){this.getTableData(this.currentPage)}},created:function(){this.getTableData()},methods:c(c({},(0,a.mapActions)(["getTableData"])),{},{onPageChange:function(e){this.currentPage=e,this.getTableData(e)}})};const h=Object.assign(d,{setup:function(e,t){(0,t.expose)();var n={BaseTable:o.default,BasePagination:s.default,PaginationLoader:r.default,__:i.__,mapActions:a.mapActions,mapGetters:a.mapGetters};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/SettingPage.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>d});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js"),s=n("./node_modules/debounce/index.js"),r=n("./src/utils/validation.js"),i=n("./src/components/settings/SettingForm.vue"),a=n("./src/components/settings/SettingFormLoading.vue");function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const d={name:"SettingPage",components:{SettingForm:i.default,SettingFormLoading:a.default},data:function(){return{currentInput:{}}},computed:c({},(0,o.mapGetters)(["alert","isSettingsSaving","isSettingsLoading","settings"])),watch:{currentInput:(0,s.debounce)((function(e){this.storeSettings(e)}),500)},methods:c(c({},(0,o.mapActions)(["storeSettings","setAlert","hideAlert"])),{},{onChangeInput:function(e){var t=(0,r.validateSettings)(e);t.valid?(alert.isVisible&&this.hideAlert(),this.currentInput=e):this.setAlert({message:t.message,type:"error"})}})}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=template&id=7ba5bd90":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>c});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={id:"wp-emailer"},r={class:"main-content"},i=(0,o.createElementVNode)("h2",{role:"wp-emailer-notice","data-text":"Don't remove me, I am super important for admin notice"},null,-1),a={class:"desc"},l={class:"main-content-section"};function c(e,t,n,c,u,d){var h=(0,o.resolveComponent)("PageTabs"),p=(0,o.resolveComponent)("BaseAlert"),f=(0,o.resolveComponent)("router-view");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",r,[i,(0,o.createElementVNode)("h3",null,(0,o.toDisplayString)(e.__("WPEmailer","wp-emailer")),1),(0,o.createElementVNode)("p",a,(0,o.toDisplayString)(e.__("A WordPress plugin using Vue JS framework to work with email settings.","wp-emailer")),1),(0,o.createCommentVNode)(" Page tabs "),(0,o.createVNode)(h),(0,o.createElementVNode)("div",l,[(0,o.createVNode)(p),(0,o.createVNode)(f)])])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/alert/BaseAlert.vue?vue&type=template&id=6f5743d0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,r,i){var a,l;return null!==(a=e.alert)&&void 0!==a&&a.isVisible?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,class:(0,o.normalizeClass)({alert:e.alert,success:"success"===e.alert.type,error:"error"===e.alert.type})},[(0,o.createTextVNode)((0,o.toDisplayString)(null===(l=e.alert)||void 0===l?void 0:l.message)+" ",1),(0,o.createElementVNode)("div",{class:"close-alert",onClick:t[0]||(t[0]=function(){return e.hideAlert&&e.hideAlert.apply(e,arguments)})}," × ")],2)):(0,o.createCommentVNode)("v-if",!0)}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/BaseButton.vue?vue&type=template&id=88e226c0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>i});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s=["type"],r={class:"button-content"};function i(e,t,n,i,a,l){var c=(0,o.resolveComponent)("BaseSpinner");return(0,o.openBlock)(),(0,o.createElementBlock)("button",{type:n.type,style:(0,o.normalizeStyle)(l.variantStyles)},[(0,o.createVNode)(c,{status:n.loading},null,8,["status"]),(0,o.createElementVNode)("span",r,[(0,o.renderSlot)(e.$slots,"default",{},void 0,!0)]),(0,o.createCommentVNode)(" slot button content ")],12,s)}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/card/BaseCard.vue?vue&type=template&id=0db0c5e0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>c});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"wp-emailer-card"},r={class:"wp-emailer-card-header wp-emailer-form-row"},i={class:"title"},a={class:"description"},l={class:"wp-emailer-card-content"};function c(e,t,n,c,u,d){return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",r,[(0,o.createElementVNode)("h2",i,(0,o.toDisplayString)(n.headerTitle),1),(0,o.createElementVNode)("p",a,(0,o.toDisplayString)(n.headerDescription),1)]),(0,o.createElementVNode)("div",l,[(0,o.renderSlot)(e.$slots,"content",{},void 0,!0)])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChart.vue?vue&type=template&id=6a09facc":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,r,i){return(0,o.openBlock)(),(0,o.createElementBlock)("div",null,[(0,o.createVNode)(s.Bar,{"chart-data":i.chartData,"chart-options":n.chartOptions,"chart-id":n.chartId,styles:n.styles,width:n.width,height:n.height,plugins:n.plugins,"css-classes":n.cssClasses},null,8,["chart-data","chart-options","chart-id","styles","width","height","plugins","css-classes"])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChartLoading.vue?vue&type=template&id=5ae1da00&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>r});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"chart-loading-area"};function r(e,t,n,r,i,a){var l=(0,o.resolveComponent)("SkeletonText");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createVNode)(l),(0,o.createVNode)(l),(0,o.createVNode)(l),(0,o.createVNode)(l),(0,o.createVNode)(l)])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=template&id=d0938918&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>c});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"input-area"},r=["id","name","type","value","placeholder","onchange","min","max"],i={key:1},a=["checked","onchange"],l=function(e){return(0,o.pushScopeId)("data-v-d0938918"),e=e(),(0,o.popScopeId)(),e}((function(){return(0,o.createElementVNode)("span",{class:"toggle-switch"},null,-1)}));function c(e,t,n,c,u,d){return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createCommentVNode)(" Handle input component for general inputs like, text, number, email "),d.isDefaultInput?((0,o.openBlock)(),(0,o.createElementBlock)("input",{key:0,id:n.name,class:"input-main",name:n.name,type:n.type,value:n.value,placeholder:n.placeholder,onchange:d.onChangeInput,min:n.min,max:n.max},null,8,r)):(0,o.createCommentVNode)("v-if",!0),(0,o.createCommentVNode)(" Handle input component for switch type input "),d.isCheckbox?((0,o.openBlock)(),(0,o.createElementBlock)("label",i,[(0,o.createElementVNode)("input",{type:"checkbox",checked:d.isChecked,onchange:d.onChangeInput},null,8,a),l,(0,o.createElementVNode)("span",null,(0,o.toDisplayString)(d.isChecked?"On":"Off"),1)])):(0,o.createCommentVNode)("v-if",!0)])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/InputSection.vue?vue&type=template&id=a6a577e0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>u});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"wp-emailer-input wp-emailer-form-row"},r={class:"wp-emailer-input-label"},i=["for"],a={class:"wp-emailer-input-content"},l={class:"flex"},c={key:0,class:"input-hint"};function u(e,t,n,u,d,h){var p=(0,o.resolveComponent)("BaseInput");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",r,[(0,o.createElementVNode)("label",{for:n.name},(0,o.toDisplayString)(n.label),9,i)]),(0,o.createElementVNode)("div",a,[(0,o.renderSlot)(e.$slots,"input-content",{},(function(){return[(0,o.createElementVNode)("div",l,[(0,o.createVNode)(p,{id:n.name,name:n.name,type:n.type,value:n.value,placeholder:n.placeholder,"on-change":n.onChange,min:n.min,max:n.max},null,8,["id","name","type","value","placeholder","on-change","min","max"]),(0,o.createElementVNode)("div",null,[(0,o.renderSlot)(e.$slots,"input-right",{},void 0,!0)])]),n.hint?((0,o.openBlock)(),(0,o.createElementBlock)("p",c,(0,o.toDisplayString)(n.hint),1)):(0,o.createCommentVNode)("v-if",!0)]}),!0)])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/BasePagination.vue?vue&type=template&id=3fa7b0a0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>m});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s=function(e){return(0,o.pushScopeId)("data-v-3fa7b0a0"),e=e(),(0,o.popScopeId)(),e},r={class:"flex justify-between"},i={class:"pagination"},a={class:"pagination-item"},l=["disabled"],c=s((function(){return(0,o.createElementVNode)("span",{"aria-hidden":"true"},"«",-1)})),u={class:"sr-only"},d={class:"pagination-item"},h=["disabled"],p={class:"sr-only"},f=s((function(){return(0,o.createElementVNode)("span",{"aria-hidden":"true"},"»",-1)}));function m(e,t,n,s,m,g){return(0,o.openBlock)(),(0,o.createElementBlock)("div",r,[(0,o.createElementVNode)("div",null,[(0,o.createElementVNode)("p",null,(0,o.toDisplayString)(n.currentPage)+"/"+(0,o.toDisplayString)(n.totalPages)+" "+(0,o.toDisplayString)(n.totalPages<2?s.__("page","wp-emailer"):s.__("pages","wp-emailer")),1)]),(0,o.createElementVNode)("ul",i,[(0,o.createElementVNode)("li",a,[(0,o.createElementVNode)("button",{type:"button",class:"previous-item",disabled:g.isInFirstPage,onClick:t[0]||(t[0]=function(){return g.onClickPreviousPage&&g.onClickPreviousPage.apply(g,arguments)})},[c,(0,o.createElementVNode)("span",u,"   "+(0,o.toDisplayString)(s.__("Previous","wp-emailer")),1)],8,l)]),(0,o.createElementVNode)("li",d,[(0,o.createElementVNode)("button",{type:"button",class:"next-item",disabled:g.isInLastPage,onClick:t[1]||(t[1]=function(){return g.onClickNextPage&&g.onClickNextPage.apply(g,arguments)})},[(0,o.createElementVNode)("span",p,(0,o.toDisplayString)(s.__("Next","wp-emailer"))+"   ",1),f],8,h)])])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/PaginationLoader.vue?vue&type=template&id=1626f362&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>i});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"pagination-loading flex justify-between mt-10"},r={class:"flex"};function i(e,t,n,i,a,l){var c=(0,o.resolveComponent)("SkeletonText");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",null,[(0,o.createVNode)(c,{width:"150px"})]),(0,o.createElementVNode)("div",r,[(0,o.createVNode)(c,{width:"60px"}),(0,o.createVNode)(c,{width:"60px"})])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingForm.vue?vue&type=template&id=271b0f38&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>l});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"settings-form"},r={class:"section"},i={class:"section"},a={class:"mt-20 flex"};function l(e,t,n,l,c,u){return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("form",{method:"post",onSubmit:t[0]||(t[0]=function(){return u.onSubmit&&u.onSubmit.apply(u,arguments)})},[(0,o.createCommentVNode)(" Section 1 "),(0,o.createElementVNode)("div",r,[(0,o.createVNode)(l.BaseCard,{"header-title":l.__("General","wp-emailer"),"header-description":l.__("Change general contents for the settings","wp-emailer")},{content:(0,o.withCtx)((function(){var e,t;return[(0,o.createVNode)(l.InputSection,{type:"number",label:l.__("Number of rows","wp-emailer"),name:"numrows",hint:l.__("How many rows will be displayed on the table","wp-emailer"),value:null===(e=n.settings)||void 0===e?void 0:e.numrows,required:!0,"on-change":u.changeInput,min:1,max:5},null,8,["label","hint","value","on-change"]),(0,o.createVNode)(l.InputSection,{type:"switch",label:l.__("Show human readable date","wp-emailer"),name:"humandate",value:null===(t=n.settings)||void 0===t?void 0:t.humandate,hint:l.__("If the date in the table will be displayed as a human readable format or a timestamp","wp-emailer"),required:!1,"on-change":u.changeInput},null,8,["label","value","hint","on-change"])]})),_:1},8,["header-title","header-description"])]),(0,o.createCommentVNode)(" Section 2 "),(0,o.createElementVNode)("div",i,[(0,o.createVNode)(l.BaseCard,{"header-title":l.__("Email","wp-emailer"),"header-description":l.__("Change your email settings","wp-emailer")},{content:(0,o.withCtx)((function(){return[(0,o.createVNode)(l.InputSection,{type:"email",label:l.__("Emails","wp-emailer"),name:"emails","on-change":u.changeInput},{"input-content":(0,o.withCtx)((function(){return[c.emailsData.length?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createBlock)(l.BaseButton,{key:0,onclick:u.appendEmail,type:"button",variant:"default",class:"email-append-button"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)(" + "+(0,o.toDisplayString)(l.__("Add New","wp-emailer")),1)]})),_:1},8,["onclick"])),((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(c.emailsData,(function(e,t){return(0,o.openBlock)(),(0,o.createElementBlock)("div",{key:t},[(0,o.createElementVNode)("div",a,[(0,o.createVNode)(l.BaseInput,{type:"email",name:"emails_".concat(t),value:e,"on-change":function(e){return u.changeEmailInput(e,t)}},null,8,["name","value","on-change"]),c.emailsData.length<5&&!t?((0,o.openBlock)(),(0,o.createBlock)(l.BaseButton,{key:0,onclick:u.appendEmail,type:"button",variant:"default",class:"email-append-button"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)(" + ")]})),_:1},8,["onclick"])):(0,o.createCommentVNode)("v-if",!0),(0,o.createVNode)(l.BaseButton,{type:"button",onclick:function(){return u.deleteEmail(t)},variant:"error",class:"email-append-button"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)(" - ")]})),_:2},1032,["onclick"])])])})),128))]})),_:1},8,["label","on-change"])]})),_:1},8,["header-title","header-description"])])],32)])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingFormLoading.vue?vue&type=template&id=4a4325d8":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>m});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"mt-50"},r={class:"flex w-full mt-50"},i={class:"ml-50"},a={class:"flex w-full mt-20"},l={class:"ml-50"},c={class:"flex w-full mt-20"},u={class:"ml-50"},d={class:"flex w-full mt-50"},h={class:"ml-50"},p={class:"flex w-full mt-20"},f={class:"ml-50"};function m(e,t,n,m,g,v){var y=(0,o.resolveComponent)("SkeletonText");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createVNode)(y,{width:"200px"}),(0,o.createVNode)(y,{width:"500px"}),(0,o.createElementVNode)("div",r,[(0,o.createElementVNode)("div",null,[(0,o.createVNode)(y,{width:"200px"})]),(0,o.createElementVNode)("div",i,[(0,o.createVNode)(y,{width:"400px"})])]),(0,o.createElementVNode)("div",a,[(0,o.createElementVNode)("div",null,[(0,o.createVNode)(y,{width:"200px"})]),(0,o.createElementVNode)("div",l,[(0,o.createVNode)(y,{width:"400px"})])]),(0,o.createElementVNode)("div",c,[(0,o.createElementVNode)("div",null,[(0,o.createVNode)(y,{width:"200px"})]),(0,o.createElementVNode)("div",u,[(0,o.createVNode)(y,{width:"400px"})])]),(0,o.createElementVNode)("div",d,[(0,o.createElementVNode)("div",null,[(0,o.createVNode)(y,{width:"200px"})]),(0,o.createElementVNode)("div",h,[(0,o.createVNode)(y,{width:"400px"})])]),(0,o.createElementVNode)("div",p,[(0,o.createElementVNode)("div",null,[(0,o.createVNode)(y,{width:"200px"})]),(0,o.createElementVNode)("div",f,[(0,o.createVNode)(y,{width:"400px"})])])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=template&id=1c6d1848&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,r,i){return(0,o.openBlock)(),(0,o.createElementBlock)("div",{class:"skeleton skeleton-text",style:(0,o.normalizeStyle)(i.skeletonWidthStyle)},null,4)}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/spinner/BaseSpinner.vue?vue&type=template&id=64223412":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,r,i){return(0,o.withDirectives)(((0,o.openBlock)(),(0,o.createElementBlock)("div",{class:"sl-spinner",style:(0,o.normalizeStyle)(i.spinnerStyle)},null,4)),[[o.vShow,n.status]])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=template&id=fc36ea7a&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>l});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={className:"table-responsive"},r={key:1},i=["innerHTML"],a={key:1};function l(e,t,n,l,c,u){var d=(0,o.resolveComponent)("TableLoading");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[n.loading?((0,o.openBlock)(),(0,o.createBlock)(d,{key:0})):(0,o.createCommentVNode)("v-if",!0),n.loading?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createElementBlock)("table",r,[(0,o.createElementVNode)("thead",null,[(0,o.createElementVNode)("tr",null,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(n.headers,(function(e){return(0,o.openBlock)(),(0,o.createElementBlock)("th",{key:e},(0,o.toDisplayString)(e),1)})),128))])]),(0,o.createElementVNode)("tbody",null,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(n.rows.data,(function(e){return(0,o.openBlock)(),(0,o.createElementBlock)("tr",{key:e.id},[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(n.headers,(function(t){return(0,o.openBlock)(),(0,o.createElementBlock)("td",{key:t},[u.isHtml(null==t?void 0:t.toLowerCase())?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,innerHTML:null==e?void 0:e[null==t?void 0:t.toLowerCase()]},null,8,i)):((0,o.openBlock)(),(0,o.createElementBlock)("span",a,(0,o.toDisplayString)(null==e?void 0:e[null==t?void 0:t.toLowerCase()]),1))])})),128))])})),128))])]))])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=template&id=344abf38&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,r,i){var a=(0,o.resolveComponent)("SkeletonText");return(0,o.openBlock)(),(0,o.createElementBlock)("table",null,[(0,o.createElementVNode)("thead",null,[(0,o.createElementVNode)("tr",null,[(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})])])]),(0,o.createElementVNode)("tbody",null,[((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(5,(function(e,t){return(0,o.createElementVNode)("tr",{key:t,style:{"margin-top":"50px"}},[(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})])])})),64))])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/PageTabs.vue?vue&type=template&id=69ff8144&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>l});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={id:"wp-emailer-tabs"},r={class:"tab-item"},i={class:"tab-item"},a={class:"tab-item"};function l(e,t,n,l,c,u){var d=(0,o.resolveComponent)("router-link");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",r,[(0,o.createVNode)(d,{to:"/"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)((0,o.toDisplayString)(l.__("Settings","wp-emailer")),1)]})),_:1})]),(0,o.createElementVNode)("div",i,[(0,o.createVNode)(d,{to:"/list"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)((0,o.toDisplayString)(l.__("Top Pages","wp-emailer")),1)]})),_:1})]),(0,o.createElementVNode)("div",a,[(0,o.createVNode)(d,{to:"/graph"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)((0,o.toDisplayString)(l.__("Graph","wp-emailer")),1)]})),_:1})])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/GraphPage.vue?vue&type=template&id=3c6a0889&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>l});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"graph-page"},r={class:"flex justify-between"},i=function(e){return(0,o.pushScopeId)("data-v-3c6a0889"),e=e(),(0,o.popScopeId)(),e}((function(){return(0,o.createElementVNode)("svg",{xmlns:"http://www.w3.org/2000/svg","data-name":"Isolation Mode",viewBox:"0 0 24 24",width:"14",height:"14"},[(0,o.createElementVNode)("path",{d:"M12 2.99a9.03 9.03 0 0 1 6.36 2.65l-2.37 2.37h5.83a1.15 1.15 0 0 0 1.14-1.14V1.04l-2.49 2.49A11.98 11.98 0 0 0 0 12h2.99A9.02 9.02 0 0 1 12 2.99ZM21.01 12a9 9 0 0 1-15.37 6.36l2.37-2.37H2a.96.96 0 0 0-.95.95v6.02l2.49-2.49A11.98 11.98 0 0 0 24 12Z"})],-1)})),a={key:1,class:"text-center"};function l(e,t,n,l,c,u){return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",r,[(0,o.createElementVNode)("h3",null,(0,o.toDisplayString)(l.__("Graph","wp-emailer")),1),(0,o.createElementVNode)("div",null,[e.graphRefreshing?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,class:"refresh-icon",title:"Click to refresh",onClick:t[0]||(t[0]=function(){return u.refreshChart&&u.refreshChart.apply(u,arguments)})},[(0,o.createCommentVNode)(" eslint-disable-next-line vue/max-attributes-per-line "),i])),e.graphRefreshing?((0,o.openBlock)(),(0,o.createElementBlock)("div",a,[(0,o.createVNode)(l.BaseSpinner),(0,o.createTextVNode)(" "+(0,o.toDisplayString)(l.__("Refreshing...","wp-emailer")),1)])):(0,o.createCommentVNode)("v-if",!0)])]),e.graphLoading?((0,o.openBlock)(),(0,o.createBlock)(l.BarChartLoading,{key:0})):(0,o.createCommentVNode)("v-if",!0),e.graphLoading?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createBlock)(l.BarChart,{key:1,labels:e.graphLabels,datasets:e.graphDatasets},null,8,["labels","datasets"]))])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/ListPage.vue?vue&type=template&id=0e7a9b1e&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>a});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"list-page"},r={key:0},i={class:"no-emails"};function a(e,t,n,a,l,c){var u,d,h;return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("h3",null,(0,o.toDisplayString)(e.pageTitle),1),(0,o.createVNode)(a.BaseTable,{loading:e.tableLoading,headers:e.headers,rows:e.rows,"html-columns":l.htmlColumns},null,8,["loading","headers","rows","html-columns"]),(0,o.createElementVNode)("div",null,[e.tableLoading?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createBlock)(a.BasePagination,{key:0,"total-pages":e.rows.totalPage,"total-items":e.rows.totalItems,"per-page":e.rows.perPage,"current-page":l.currentPage,onPagechanged:c.onPageChange},null,8,["total-pages","total-items","per-page","current-page","onPagechanged"])),e.tableLoading?((0,o.openBlock)(),(0,o.createBlock)(a.PaginationLoader,{key:1})):(0,o.createCommentVNode)("v-if",!0)]),(0,o.createElementVNode)("div",null,[(0,o.createElementVNode)("h3",null,(0,o.toDisplayString)(a.__("Emails","wp-emailer")),1),(0,o.createElementVNode)("ul",null,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(null===(u=e.settings)||void 0===u?void 0:u.emails,(function(e,t){return(0,o.openBlock)(),(0,o.createElementBlock)("li",{key:t},(0,o.toDisplayString)(e),1)})),128)),null!==(d=e.settings)&&void 0!==d&&null!==(h=d.emails)&&void 0!==h&&h.length?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createElementBlock)("li",r,[(0,o.createElementVNode)("span",i,(0,o.toDisplayString)(a.__("Sorry, No emails added yet. Please add email from Settings page.","wp-emailer")),1)]))])])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/SettingPage.vue?vue&type=template&id=410b268b":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>r});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"settings-page"};function r(e,t,n,r,i,a){var l=(0,o.resolveComponent)("SettingFormLoading"),c=(0,o.resolveComponent)("SettingForm");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[e.isSettingsLoading?((0,o.openBlock)(),(0,o.createBlock)(l,{key:0})):(0,o.createCommentVNode)("v-if",!0),e.isSettingsLoading?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createBlock)(c,{key:1,default:e.settings,change:a.onChangeInput,settings:e.settings},null,8,["default","change","settings"]))])}},"./src/i18n.js":(e,t,n)=>{"use strict";n.r(t);var o=n("./node_modules/@wordpress/i18n/build-module/index.js");window.__=o.__,window.sprintf=o.sprintf},"./src/mixins/i18n.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={methods:{__:function(e){function t(t,n){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e,t){return __(e,t)})),sprintf:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return sprintf.apply(void 0,[e].concat(n))}))}}},"./src/router/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var o=n("./node_modules/vue-router/dist/vue-router.mjs"),s=n("./src/pages/ListPage.vue"),r=n("./src/pages/SettingPage.vue"),i=n("./src/pages/GraphPage.vue"),a=[{path:"/",name:"SettingPage",component:r.default,alias:"/settings"},{path:"/list",name:"ListPage",component:s.default},{path:"/graph",name:"GraphPage",component:i.default}];const l=(0,o.createRouter)({history:(0,o.createWebHistory)(wpEmailer.site.base_url),routes:a})},"./src/store/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js"),s=n("./src/store/modules/global.js"),r=n("./src/store/modules/settings.js"),i=n("./src/store/modules/tables.js"),a=n("./src/store/modules/graph.js");const l=(0,o.createStore)({modules:{global:s.default,settings:r.default,tables:i.default,graph:a.default},strict:!0,plugins:[(0,o.createLogger)()]})},"./src/store/modules/global.js":(e,t,n)=>{"use strict";function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.r(t),n.d(t,{default:()=>i});const i={state:function(){return{alert:{isVisible:!1,message:"",type:"default"}}},getters:{alert:function(e){return e.alert}},actions:{setAlert:function(e,t){var n=e.commit;n("setAlert",t),"success"===t.type&&setTimeout((function(){n("hideAlert")}),5e3)},showAlert:function(e){(0,e.commit)("setIsAlertVisible",!0)},hideAlert:function(e){(0,e.commit)("hideAlert",!1)}},mutations:{setAlert:function(e,t){e.alert=s(s({},e.alert),{},{isVisible:!0},t)},hideAlert:function(e){e.alert={isVisible:!1,message:"",type:"default"}},setIsAlertVisible:function(e,t){e.alert=s(s({},e.alert),{},{isVisible:t})}}}},"./src/store/modules/graph.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var o=n("./src/utils/ajax.js"),s=n("./src/utils/date-formatter.js");function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(){i=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,o){var s=t&&t.prototype instanceof p?t:p,r=Object.create(s.prototype),i=new j(o||[]);return r._invoke=function(e,t,n){var o="suspendedStart";return function(s,r){if("executing"===o)throw new Error("Generator is already running");if("completed"===o){if("throw"===s)throw r;return{value:void 0,done:!0}}for(n.method=s,n.arg=r;;){var i=n.delegate;if(i){var a=w(i,n);if(a){if(a===h)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===o)throw o="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o="executing";var l=d(e,t,n);if("normal"===l.type){if(o=n.done?"completed":"suspendedYield",l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o="completed",n.method="throw",n.arg=l.arg)}}}(e,n,i),r}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var h={};function p(){}function f(){}function m(){}var g={};c(g,s,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(P([])));y&&y!==t&&n.call(y,s)&&(g=y);var b=m.prototype=p.prototype=Object.create(g);function _(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function o(s,i,a,l){var c=d(e[s],e,i);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==r(h)&&n.call(h,"__await")?t.resolve(h.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(h).then((function(e){u.value=e,a(u)}),(function(e){return o("throw",e,a,l)}))}l(c.arg)}var s;this._invoke=function(e,n){function r(){return new t((function(t,s){o(e,n,t,s)}))}return s=s?s.then(r,r):r()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return h;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=d(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,h;var s=o.arg;return s?s.done?(t[e.resultName]=s.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,h):s:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,h)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function j(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function P(e){if(e){var t=e[s];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,r=function t(){for(;++o<e.length;)if(n.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=void 0,t.done=!0,t};return r.next=r}}return{next:O}}function O(){return{value:void 0,done:!0}}return f.prototype=m,c(b,"constructor",m),c(m,"constructor",f),f.displayName=c(m,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,c(e,l,"GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},_(x.prototype),c(x.prototype,a,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,o,s,r){void 0===r&&(r=Promise);var i=new x(u(t,n,o,s),r);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},_(b),c(b,l,"Generator"),c(b,s,(function(){return this})),c(b,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var o=t.pop();if(o in e)return n.value=o,n.done=!1,n}return n.done=!0,n}},e.values=P,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function o(n,o){return i.type="throw",i.arg=e,t.next=n,o&&(t.method="next",t.arg=void 0),!!o}for(var s=this.tryEntries.length-1;s>=0;--s){var r=this.tryEntries[s],i=r.completion;if("root"===r.tryLoc)return o("end");if(r.tryLoc<=this.prev){var a=n.call(r,"catchLoc"),l=n.call(r,"finallyLoc");if(a&&l){if(this.prev<r.catchLoc)return o(r.catchLoc,!0);if(this.prev<r.finallyLoc)return o(r.finallyLoc)}else if(a){if(this.prev<r.catchLoc)return o(r.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return o(r.finallyLoc)}}}},abrupt:function(e,t){for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o];if(s.tryLoc<=this.prev&&n.call(s,"finallyLoc")&&this.prev<s.finallyLoc){var r=s;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=e,i.arg=t,r?(this.method="next",this.next=r.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var s=o.arg;k(n)}return s}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:P(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),h}},e}function a(e,t,n,o,s,r,i){try{var a=e[r](i),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(o,s)}function l(e){return function(){var t=this,n=arguments;return new Promise((function(o,s){var r=e.apply(t,n);function i(e){a(r,o,s,i,l,"next",e)}function l(e){a(r,o,s,i,l,"throw",e)}i(void 0)}))}}const c={state:function(){return{graphLabels:[],graphDatasets:[],graphLoading:!1,graphRefreshing:!1}},getters:{graphLabels:function(e){return e.graphLabels},graphDatasets:function(e){return e.graphDatasets},graphLoading:function(e){return e.graphLoading},graphRefreshing:function(e){return e.graphRefreshing}},actions:{getGraphData:function(e){var t=arguments;return l(i().mark((function n(){var r,a,l,c;return i().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=e.dispatch,a=e.commit,l=t.length>1&&void 0!==t[1]&&t[1],a("setGraphLoading",!0),c="action=".concat("wp_emailer_get_data"),l&&(c+="&refresh=1",a("setGraphRefreshing",!0)),n.next=7,(0,o.getRequest)(c).then((function(e){if(e.success){var t,n,o=null==e||null===(t=e.data)||void 0===t||null===(n=t.data)||void 0===n?void 0:n.graph;if(void 0!==o){var i=[],c=[];Object.keys(o).forEach((function(e){var t=o[e];i.push((0,s.formatDate)(t.date,!0)),c.push(t.value)}));var u=[{label:"Data",backgroundColor:"#ff982d",data:c}];a("setGraphLabels",i),a("setGraphDatasets",u),l&&r("setAlert",{message:"Graph refreshed successfully.",type:"success"},{root:!0})}}}));case 7:a("setGraphLoading",!1),a("setGraphRefreshing",!1);case 9:case"end":return n.stop()}}),n)})))()}},mutations:{setGraphLabels:function(e,t){e.graphLabels=t},setGraphDatasets:function(e,t){e.graphDatasets=t},setGraphLoading:function(e,t){e.graphLoading=t},setGraphRefreshing:function(e,t){e.graphRefreshing=t}}}},"./src/store/modules/settings.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>d});var o=n("./src/utils/ajax.js");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){l=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},r=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,o){var s=t&&t.prototype instanceof p?t:p,r=Object.create(s.prototype),i=new j(o||[]);return r._invoke=function(e,t,n){var o="suspendedStart";return function(s,r){if("executing"===o)throw new Error("Generator is already running");if("completed"===o){if("throw"===s)throw r;return{value:void 0,done:!0}}for(n.method=s,n.arg=r;;){var i=n.delegate;if(i){var a=w(i,n);if(a){if(a===h)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===o)throw o="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o="executing";var l=d(e,t,n);if("normal"===l.type){if(o=n.done?"completed":"suspendedYield",l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o="completed",n.method="throw",n.arg=l.arg)}}}(e,n,i),r}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var h={};function p(){}function f(){}function m(){}var g={};c(g,r,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(P([])));y&&y!==t&&n.call(y,r)&&(g=y);var b=m.prototype=p.prototype=Object.create(g);function _(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function o(r,i,a,l){var c=d(e[r],e,i);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==s(h)&&n.call(h,"__await")?t.resolve(h.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(h).then((function(e){u.value=e,a(u)}),(function(e){return o("throw",e,a,l)}))}l(c.arg)}var r;this._invoke=function(e,n){function s(){return new t((function(t,s){o(e,n,t,s)}))}return r=r?r.then(s,s):s()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return h;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=d(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,h;var s=o.arg;return s?s.done?(t[e.resultName]=s.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,h):s:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,h)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function j(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function P(e){if(e){var t=e[r];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,s=function t(){for(;++o<e.length;)if(n.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=void 0,t.done=!0,t};return s.next=s}}return{next:O}}function O(){return{value:void 0,done:!0}}return f.prototype=m,c(b,"constructor",m),c(m,"constructor",f),f.displayName=c(m,a,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,c(e,a,"GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},_(x.prototype),c(x.prototype,i,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,o,s,r){void 0===r&&(r=Promise);var i=new x(u(t,n,o,s),r);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},_(b),c(b,a,"Generator"),c(b,r,(function(){return this})),c(b,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var o=t.pop();if(o in e)return n.value=o,n.done=!1,n}return n.done=!0,n}},e.values=P,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function o(n,o){return i.type="throw",i.arg=e,t.next=n,o&&(t.method="next",t.arg=void 0),!!o}for(var s=this.tryEntries.length-1;s>=0;--s){var r=this.tryEntries[s],i=r.completion;if("root"===r.tryLoc)return o("end");if(r.tryLoc<=this.prev){var a=n.call(r,"catchLoc"),l=n.call(r,"finallyLoc");if(a&&l){if(this.prev<r.catchLoc)return o(r.catchLoc,!0);if(this.prev<r.finallyLoc)return o(r.finallyLoc)}else if(a){if(this.prev<r.catchLoc)return o(r.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return o(r.finallyLoc)}}}},abrupt:function(e,t){for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o];if(s.tryLoc<=this.prev&&n.call(s,"finallyLoc")&&this.prev<s.finallyLoc){var r=s;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=e,i.arg=t,r?(this.method="next",this.next=r.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var s=o.arg;k(n)}return s}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:P(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),h}},e}function c(e,t,n,o,s,r,i){try{var a=e[r](i),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(o,s)}function u(e){return function(){var t=this,n=arguments;return new Promise((function(o,s){var r=e.apply(t,n);function i(e){c(r,o,s,i,a,"next",e)}function a(e){c(r,o,s,i,a,"throw",e)}i(void 0)}))}}const d={state:function(){return{settings:{},isSettingsLoading:!1,isSettingsSaving:!1}},getters:{settings:function(e){return e.settings},isSettingsLoading:function(e){return e.isSettingsLoading},isSettingsSaving:function(e){return e.isSettingsSaving}},actions:{fetchSettings:function(e){return u(l().mark((function t(){var n;return l().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return(n=e.commit)("setSettingsLoading",!0),t.next=4,(0,o.getRequest)("action=".concat("wp_emailer_get_settings")).then((function(e){e.success&&(n("storeAllSettings",e.data.data),n("setSettingsLoading",!1))}));case 4:n("setSettingsLoading",!1);case 5:case"end":return t.stop()}}),t)})))()},storeSettings:function(e,t){return u(l().mark((function n(){var s,r,i;return l().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return s=e.dispatch,(r=e.commit)("setSettingsSaving",!0),i={key:t.key,value:t.value,action:"wp_emailer_update_setting"},n.next=5,(0,o.postRequest)(i).then((function(e){var n;null!=e&&e.success&&(r("storeSettingItem",t),s("setAlert",{message:null==e||null===(n=e.data)||void 0===n?void 0:n.message,type:"success"},{root:!0}))})).catch((function(e){var t,n,o=JSON.parse(e.responseText);null!=o&&null!==(t=o.data)&&void 0!==t&&t.message&&s("setAlert",{message:null==o||null===(n=o.data)||void 0===n?void 0:n.message,type:"error"},{root:!0})}));case 5:r("setSettingsSaving",!1);case 6:case"end":return n.stop()}}),n)})))()}},mutations:{storeAllSettings:function(e,t){e.settings=t},storeSettingItem:function(e,t){e.settings=i(i({},e.settings),{},a({},t.key,null==t?void 0:t.value))},setSettingsLoading:function(e,t){e.isSettingsLoading=t},setSettingsSaving:function(e,t){e.isSettingsSaving=t}}}},"./src/store/modules/tables.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>p});var o=n("./src/utils/ajax.js"),s=n("./src/utils/date-formatter.js"),r=n("./src/utils/pagination-response.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(){a=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",r=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,o){var s=t&&t.prototype instanceof p?t:p,r=Object.create(s.prototype),i=new j(o||[]);return r._invoke=function(e,t,n){var o="suspendedStart";return function(s,r){if("executing"===o)throw new Error("Generator is already running");if("completed"===o){if("throw"===s)throw r;return{value:void 0,done:!0}}for(n.method=s,n.arg=r;;){var i=n.delegate;if(i){var a=w(i,n);if(a){if(a===h)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===o)throw o="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o="executing";var l=d(e,t,n);if("normal"===l.type){if(o=n.done?"completed":"suspendedYield",l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o="completed",n.method="throw",n.arg=l.arg)}}}(e,n,i),r}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var h={};function p(){}function f(){}function m(){}var g={};c(g,s,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(P([])));y&&y!==t&&n.call(y,s)&&(g=y);var b=m.prototype=p.prototype=Object.create(g);function _(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function o(s,r,a,l){var c=d(e[s],e,r);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==i(h)&&n.call(h,"__await")?t.resolve(h.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(h).then((function(e){u.value=e,a(u)}),(function(e){return o("throw",e,a,l)}))}l(c.arg)}var s;this._invoke=function(e,n){function r(){return new t((function(t,s){o(e,n,t,s)}))}return s=s?s.then(r,r):r()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return h;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=d(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,h;var s=o.arg;return s?s.done?(t[e.resultName]=s.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,h):s:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,h)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function j(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function P(e){if(e){var t=e[s];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,r=function t(){for(;++o<e.length;)if(n.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=void 0,t.done=!0,t};return r.next=r}}return{next:O}}function O(){return{value:void 0,done:!0}}return f.prototype=m,c(b,"constructor",m),c(m,"constructor",f),f.displayName=c(m,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,c(e,l,"GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},_(x.prototype),c(x.prototype,r,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,o,s,r){void 0===r&&(r=Promise);var i=new x(u(t,n,o,s),r);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},_(b),c(b,l,"Generator"),c(b,s,(function(){return this})),c(b,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var o=t.pop();if(o in e)return n.value=o,n.done=!1,n}return n.done=!0,n}},e.values=P,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function o(n,o){return i.type="throw",i.arg=e,t.next=n,o&&(t.method="next",t.arg=void 0),!!o}for(var s=this.tryEntries.length-1;s>=0;--s){var r=this.tryEntries[s],i=r.completion;if("root"===r.tryLoc)return o("end");if(r.tryLoc<=this.prev){var a=n.call(r,"catchLoc"),l=n.call(r,"finallyLoc");if(a&&l){if(this.prev<r.catchLoc)return o(r.catchLoc,!0);if(this.prev<r.finallyLoc)return o(r.finallyLoc)}else if(a){if(this.prev<r.catchLoc)return o(r.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return o(r.finallyLoc)}}}},abrupt:function(e,t){for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o];if(s.tryLoc<=this.prev&&n.call(s,"finallyLoc")&&this.prev<s.finallyLoc){var r=s;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=e,i.arg=t,r?(this.method="next",this.next=r.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var s=o.arg;k(n)}return s}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:P(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),h}},e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t,n,o,s,r,i){try{var a=e[r](i),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(o,s)}function h(e){return function(){var t=this,n=arguments;return new Promise((function(o,s){var r=e.apply(t,n);function i(e){d(r,o,s,i,a,"next",e)}function a(e){d(r,o,s,i,a,"throw",e)}i(void 0)}))}}const p={state:function(){return{pageTitle:"",headers:[],rows:{data:[],totalPage:0,totalItems:0,currentPage:1,perPage:5},tableLoading:!1}},getters:{pageTitle:function(e){return e.pageTitle},headers:function(e){return e.headers},rows:function(e){return e.rows},tableLoading:function(e){return e.tableLoading}},actions:{getTableData:function(e){var t=arguments;return h(a().mark((function n(){var i,l,u,d,h,p,f,m,g,v,y;return a().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return f=e.commit,m=e.rootState,g=t.length>1&&void 0!==t[1]?t[1]:1,f("setLoading",!0),v=null!==(i=null===(l=m.settings)||void 0===l||null===(u=l.settings)||void 0===u?void 0:u.numrows)&&void 0!==i?i:5,y=parseInt(null!==(d=null===(h=m.settings)||void 0===h||null===(p=h.settings)||void 0===p?void 0:p.humandate)&&void 0!==d?d:1),n.next=7,(0,o.getRequest)("action=".concat("wp_emailer_get_data")).then((function(e){if(e.success){var t,n,o,i,a,l,u,d,h,p,m;f("setPageTitle",null==e||null===(t=e.data)||void 0===t||null===(n=t.data)||void 0===n||null===(o=n.table)||void 0===o?void 0:o.title),f("setHeaders",null==e||null===(i=e.data)||void 0===i||null===(a=i.data)||void 0===a||null===(l=a.table)||void 0===l||null===(u=l.data)||void 0===u?void 0:u.headers);var b=(null==e||null===(d=e.data)||void 0===d||null===(h=d.data)||void 0===h||null===(p=h.table)||void 0===p||null===(m=p.data)||void 0===m?void 0:m.rows).map((function(e){return c(c({},e),{},{date:y?(0,s.formatDate)(e.date,!0):e.date,url:'<a class="page-link" href="'.concat(e.url,'" target="blank">').concat(e.url,"</a>")})}));f("setRows",(0,r.getPaginatedData)(b,g,v))}}));case 7:f("setLoading",!1);case 8:case"end":return n.stop()}}),n)})))()}},mutations:{setPageTitle:function(e,t){e.pageTitle=t},setHeaders:function(e,t){e.headers=t},setRows:function(e,t){e.rows=t},setLoading:function(e,t){e.tableLoading=t}}}},"./src/utils/ajax.js":(e,t,n)=>{"use strict";function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){i=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",r=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,o){var s=t&&t.prototype instanceof p?t:p,r=Object.create(s.prototype),i=new j(o||[]);return r._invoke=function(e,t,n){var o="suspendedStart";return function(s,r){if("executing"===o)throw new Error("Generator is already running");if("completed"===o){if("throw"===s)throw r;return{value:void 0,done:!0}}for(n.method=s,n.arg=r;;){var i=n.delegate;if(i){var a=w(i,n);if(a){if(a===h)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===o)throw o="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o="executing";var l=d(e,t,n);if("normal"===l.type){if(o=n.done?"completed":"suspendedYield",l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o="completed",n.method="throw",n.arg=l.arg)}}}(e,n,i),r}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var h={};function p(){}function f(){}function m(){}var g={};c(g,s,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(P([])));y&&y!==t&&n.call(y,s)&&(g=y);var b=m.prototype=p.prototype=Object.create(g);function _(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function o(s,r,i,l){var c=d(e[s],e,r);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==a(h)&&n.call(h,"__await")?t.resolve(h.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(h).then((function(e){u.value=e,i(u)}),(function(e){return o("throw",e,i,l)}))}l(c.arg)}var s;this._invoke=function(e,n){function r(){return new t((function(t,s){o(e,n,t,s)}))}return s=s?s.then(r,r):r()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return h;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=d(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,h;var s=o.arg;return s?s.done?(t[e.resultName]=s.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,h):s:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,h)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function j(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function P(e){if(e){var t=e[s];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,r=function t(){for(;++o<e.length;)if(n.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=void 0,t.done=!0,t};return r.next=r}}return{next:O}}function O(){return{value:void 0,done:!0}}return f.prototype=m,c(b,"constructor",m),c(m,"constructor",f),f.displayName=c(m,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,c(e,l,"GeneratorFunction")),e.prototype=Object.create(b),e},e.awrap=function(e){return{__await:e}},_(x.prototype),c(x.prototype,r,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,o,s,r){void 0===r&&(r=Promise);var i=new x(u(t,n,o,s),r);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},_(b),c(b,l,"Generator"),c(b,s,(function(){return this})),c(b,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var o=t.pop();if(o in e)return n.value=o,n.done=!1,n}return n.done=!0,n}},e.values=P,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function o(n,o){return i.type="throw",i.arg=e,t.next=n,o&&(t.method="next",t.arg=void 0),!!o}for(var s=this.tryEntries.length-1;s>=0;--s){var r=this.tryEntries[s],i=r.completion;if("root"===r.tryLoc)return o("end");if(r.tryLoc<=this.prev){var a=n.call(r,"catchLoc"),l=n.call(r,"finallyLoc");if(a&&l){if(this.prev<r.catchLoc)return o(r.catchLoc,!0);if(this.prev<r.finallyLoc)return o(r.finallyLoc)}else if(a){if(this.prev<r.catchLoc)return o(r.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return o(r.finallyLoc)}}}},abrupt:function(e,t){for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o];if(s.tryLoc<=this.prev&&n.call(s,"finallyLoc")&&this.prev<s.finallyLoc){var r=s;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=e,i.arg=t,r?(this.method="next",this.next=r.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),k(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var s=o.arg;k(n)}return s}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:P(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),h}},e}function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function l(e,t,n,o,s,r,i){try{var a=e[r](i),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(o,s)}function c(e){return function(){var t=this,n=arguments;return new Promise((function(o,s){var r=e.apply(t,n);function i(e){l(r,o,s,i,a,"next",e)}function a(e){l(r,o,s,i,a,"throw",e)}i(void 0)}))}}n.r(t),n.d(t,{getRequest:()=>d,postRequest:()=>p});var u=jQuery;function d(e){return h.apply(this,arguments)}function h(){return(h=c(i().mark((function e(t){var n;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n="".concat(wpEmailer.ajax_url,"?_wpnonce=").concat(wpEmailer.nonce,"&").concat(t),e.abrupt("return",u.ajax({url:n,type:"GET",processData:!1,contentType:!1}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function p(e){return f.apply(this,arguments)}function f(){return(f=c(i().mark((function e(t){var n;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=s({_wpnonce:wpEmailer.nonce},t),e.abrupt("return",u.ajax({type:"POST",url:wpEmailer.ajax_url,data:m(n),processData:!1,contentType:!1}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var m=function(e){var t=new FormData;return g(t,e),t},g=function e(t,n,o){if(!n||"object"!==a(n)||n instanceof Date||n instanceof File){var s=null==n?"":n;t.append(o,s)}else Object.keys(n).forEach((function(s){e(t,n[s],o?"".concat(o,"[").concat(s,"]"):s)}))}},"./src/utils/date-formatter.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{formatDate:()=>o});var o=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=new Date(e).toString(),o="".concat(n.substring(8,10)," ").concat(n.substring(4,7)," ").concat(n.substring(11,15));return t&&(o+=" at ".concat(n.substring(16,21))),o}},"./src/utils/menu-fix.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{menuFix:()=>s,pluginSlug:()=>o});var o="wp-emailer";function s(){var e=jQuery,t=e("#toplevel_page_"+o),n=window.location.href,s=n.substring(n.indexOf("admin.php"));e("ul.wp-submenu li",t).removeClass("current"),t.on("click","a",(function(){var n=e(this);e("ul.wp-submenu li",t).removeClass("current"),n.hasClass("wp-has-submenu")?e("li.wp-first-item",t).addClass("current"):n.parents("li").addClass("current")})),e("ul.wp-submenu a",t).each((function(t,n){e(n).attr("href").substring(e(n).attr("href").indexOf("/admin.php")+1)===s&&e(n).parent().addClass("current")}))}s()},"./src/utils/pagination-response.js":(e,t,n)=>{"use strict";function o(e,t,n){var o=e.length,s=Math.ceil(o/n),r=n*(t-1),i=r+n;return{totalPage:s,totalItems:o,currentPage:t,perPage:n,data:e.filter((function(e,t){return t>=r&&t<i}))}}n.r(t),n.d(t,{getPaginatedData:()=>o})},"./src/utils/validation.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{validateEmail:()=>r,validateSettings:()=>s});var o=n("./node_modules/@wordpress/i18n/build-module/index.js");function s(e){var t=e.key,n=e.value,s={valid:!0,message:""};switch(t){case"numrows":(n<1||n>5)&&(s.message=(0,o.__)("Please give valid input for number of rows.","wp-emailer"),s.valid=!1);break;case"humandate":0!==parseInt(n)&&1!==parseInt(n)&&(s.message=(0,o.__)("Please check if human readable date will be displayed or not.","wp-emailer"),s.valid=!1);break;case"emails":""!==n&&null!==n&&n.filter((function(e){return!r(e)})).length&&(s.message=(0,o.__)("Please provide valid emails.","wp-emailer"),s.valid=!1)}return s}var r=function(e){return String(e).toLowerCase().match(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/)}},"./node_modules/debounce/index.js":e=>{function t(e,t,n){var o,s,r,i,a;function l(){var c=Date.now()-i;c<t&&c>=0?o=setTimeout(l,t-c):(o=null,n||(a=e.apply(r,s),r=s=null))}null==t&&(t=100);var c=function(){r=this,s=arguments,i=Date.now();var c=n&&!o;return o||(o=setTimeout(l,t)),c&&(a=e.apply(r,s),r=s=null),a};return c.clear=function(){o&&(clearTimeout(o),o=null)},c.flush=function(){o&&(a=e.apply(r,s),r=s=null,clearTimeout(o),o=null)},c}t.debounce=t,e.exports=t},"./node_modules/memize/index.js":e=>{e.exports=function(e,t){var n,o,s=0;function r(){var r,i,a=n,l=arguments.length;e:for(;a;){if(a.args.length===arguments.length){for(i=0;i<l;i++)if(a.args[i]!==arguments[i]){a=a.next;continue e}return a!==n&&(a===o&&(o=a.prev),a.prev.next=a.next,a.next&&(a.next.prev=a.prev),a.next=n,a.prev=null,n.prev=a,n=a),a.val}a=a.next}for(r=new Array(l),i=0;i<l;i++)r[i]=arguments[i];return a={args:r,val:e.apply(null,r)},n?(n.prev=a,a.next=n):o=a,s===t.maxSize?(o=o.prev).next=null:s++,n=a,a.val}return t=t||{},r.clear=function(){n=null,o=null,s=0},r}},"./src/styles/main.scss":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/alert/BaseAlert.vue?vue&type=style&index=0&id=6f5743d0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/BaseButton.vue?vue&type=style&index=0&id=88e226c0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/card/BaseCard.vue?vue&type=style&index=0&id=0db0c5e0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChartLoading.vue?vue&type=style&index=0&id=5ae1da00&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=style&index=0&id=d0938918&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/InputSection.vue?vue&type=style&index=0&id=a6a577e0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/BasePagination.vue?vue&type=style&index=0&id=3fa7b0a0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/PaginationLoader.vue?vue&type=style&index=0&id=1626f362&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingForm.vue?vue&type=style&index=0&id=271b0f38&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=style&index=0&id=1c6d1848&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/spinner/BaseSpinner.vue?vue&type=style&index=0&id=64223412&lang=scss":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=style&index=0&id=fc36ea7a&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=style&index=0&id=344abf38&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/PageTabs.vue?vue&type=style&index=0&id=69ff8144&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/GraphPage.vue?vue&type=style&index=0&id=3c6a0889&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/ListPage.vue?vue&type=style&index=0&id=0e7a9b1e&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/sprintf-js/src/sprintf.js":(e,t,n)=>{var o;!function(){"use strict";var s={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function r(e){return a(c(e),arguments)}function i(e,t){return r.apply(null,[e].concat(t||[]))}function a(e,t){var n,o,i,a,l,c,u,d,h,p=1,f=e.length,m="";for(o=0;o<f;o++)if("string"==typeof e[o])m+=e[o];else if("object"==typeof e[o]){if((a=e[o]).keys)for(n=t[p],i=0;i<a.keys.length;i++){if(null==n)throw new Error(r('[sprintf] Cannot access property "%s" of undefined value "%s"',a.keys[i],a.keys[i-1]));n=n[a.keys[i]]}else n=a.param_no?t[a.param_no]:t[p++];if(s.not_type.test(a.type)&&s.not_primitive.test(a.type)&&n instanceof Function&&(n=n()),s.numeric_arg.test(a.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(r("[sprintf] expecting number but found %T",n));switch(s.number.test(a.type)&&(d=n>=0),a.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,a.width?parseInt(a.width):0);break;case"e":n=a.precision?parseFloat(n).toExponential(a.precision):parseFloat(n).toExponential();break;case"f":n=a.precision?parseFloat(n).toFixed(a.precision):parseFloat(n);break;case"g":n=a.precision?String(Number(n.toPrecision(a.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=a.precision?n.substring(0,a.precision):n;break;case"t":n=String(!!n),n=a.precision?n.substring(0,a.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=a.precision?n.substring(0,a.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=a.precision?n.substring(0,a.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}s.json.test(a.type)?m+=n:(!s.number.test(a.type)||d&&!a.sign?h="":(h=d?"+":"-",n=n.toString().replace(s.sign,"")),c=a.pad_char?"0"===a.pad_char?"0":a.pad_char.charAt(1):" ",u=a.width-(h+n).length,l=a.width&&u>0?c.repeat(u):"",m+=a.align?h+n+l:"0"===c?h+l+n:l+h+n)}return m}var l=Object.create(null);function c(e){if(l[e])return l[e];for(var t,n=e,o=[],r=0;n;){if(null!==(t=s.text.exec(n)))o.push(t[0]);else if(null!==(t=s.modulo.exec(n)))o.push("%");else{if(null===(t=s.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){r|=1;var i=[],a=t[2],c=[];if(null===(c=s.key.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(i.push(c[1]);""!==(a=a.substring(c[0].length));)if(null!==(c=s.key_access.exec(a)))i.push(c[1]);else{if(null===(c=s.index_access.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");i.push(c[1])}t[2]=i}else r|=2;if(3===r)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");o.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return l[e]=o}t.sprintf=r,t.vsprintf=i,"undefined"!=typeof window&&(window.sprintf=r,window.vsprintf=i,void 0===(o=function(){return{sprintf:r,vsprintf:i}}.call(t,n,t,e))||(e.exports=o))}()},"./node_modules/tannin/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/@tannin/plural-forms/index.js"),s={contextDelimiter:"",onMissingKey:null};function r(e,t){var n;for(n in this.data=e,this.pluralForms={},this.options={},s)this.options[n]=void 0!==t&&n in t?t[n]:s[n]}r.prototype.getPluralForm=function(e,t){var n,s,r,i=this.pluralForms[e];return i||("function"!=typeof(r=(n=this.data[e][""])["Plural-Forms"]||n["plural-forms"]||n.plural_forms)&&(s=function(e){var t,n,o;for(t=e.split(";"),n=0;n<t.length;n++)if(0===(o=t[n].trim()).indexOf("plural="))return o.substr(7)}(n["Plural-Forms"]||n["plural-forms"]||n.plural_forms),r=(0,o.default)(s)),i=this.pluralForms[e]=r),i(t)},r.prototype.dcnpgettext=function(e,t,n,o,s){var r,i,a;return r=void 0===s?0:this.getPluralForm(e,s),i=n,t&&(i=t+this.options.contextDelimiter+n),(a=this.data[e][i])&&a[r]?a[r]:(this.options.onMissingKey&&this.options.onMissingKey(n,e),0===r?n:o)}},"./node_modules/vue-chartjs/dist/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Bar:()=>u,Bubble:()=>g,Doughnut:()=>d,Line:()=>h,Pie:()=>p,PolarArea:()=>f,Radar:()=>m,Scatter:()=>v,generateChart:()=>c});var o,s=n("./node_modules/chart.js/dist/chart.mjs"),r=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function i(e,t,n,s){e(t,n),void 0!==s&&s.emit(o.ChartRendered)}function a(e,t){e.destroy(),void 0!==t&&t.emit(o.ChartDestroyed)}function l(e,t,n){const o=[];e.datasets=t.datasets.map((t=>{const s=e.datasets.find((e=>e[n]===t[n]));return s&&t.data&&!o.includes(s)?(o.push(s),Object.assign(s,t),s):{...t}}))}!function(e){e.ChartRendered="chart:rendered",e.ChartUpdated="chart:updated",e.ChartDestroyed="chart:destroyed",e.LabelsUpdated="labels:updated"}(o||(o={}));const c=(e,t,n)=>(0,r.defineComponent)({props:{chartData:{type:Object,required:!0},chartOptions:{type:Object,default:()=>{}},datasetIdKey:{type:String,default:"label"},chartId:{type:String,default:e},width:{type:Number,default:400},height:{type:Number,default:400},cssClasses:{type:String,default:""},styles:{type:Object,default:()=>{}},plugins:{type:Array,default:()=>[]}},setup(e,c){s.Chart.register(n);const u=(0,r.shallowRef)(null),d=(0,r.ref)(null);function h(n,o){if(null!==u.value&&a((0,r.toRaw)(u.value),c),null===d.value)throw new Error("Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components");{const i=function(e,t){const n={labels:void 0===e.labels?[]:[...e.labels],datasets:[]};return l(n,{...e},t),n}(n,e.datasetIdKey),a=d.value.getContext("2d");null!==a&&(u.value=new s.Chart(a,{type:t,data:(0,r.isProxy)(n)?new Proxy(i,{}):i,options:o,plugins:e.plugins}))}}function p(){const e=(0,r.toRaw)(u.value);null!==e?function(e,t){e.update(),void 0!==t&&t.emit(o.ChartUpdated)}(e,c):console.error("Update ERROR: chart instance not found")}return(0,r.watch)((()=>e.chartData),((t,n)=>function(t,n){const s=(0,r.isProxy)(t)?(0,r.toRaw)(t):{...t},d=(0,r.isProxy)(n)?(0,r.toRaw)(n):{...n};if(Object.keys(d).length>0){const t=(0,r.toRaw)(u.value),n=function(e,t){const n=e.datasets.map((e=>e.label)),o=t.datasets.map((e=>e.label));return t.datasets.length===e.datasets.length&&n.every(((e,t)=>e===o[t]))}(s,d);n&&null!==t?(l(null==t?void 0:t.data,s,e.datasetIdKey),void 0!==s.labels&&function(e,t,n){e.data.labels=t,void 0!==n&&n.emit(o.LabelsUpdated)}(t,s.labels,c),p()):(null!==t&&a(t,c),i(h,e.chartData,e.chartOptions,c))}else null!==u.value&&a((0,r.toRaw)(u.value),c),i(h,e.chartData,e.chartOptions,c)}(t,n)),{deep:!0}),(0,r.watch)((()=>e.chartOptions),(t=>function(t){const n=(0,r.toRaw)(u.value);null!==n?(function(e,t){e.options={...t}}(n,t),p()):i(h,e.chartData,e.chartOptions,c)}(t)),{deep:!0}),(0,r.onMounted)((()=>{"datasets"in e.chartData&&e.chartData.datasets.length>0&&i(h,e.chartData,e.chartOptions,c)})),(0,r.onBeforeUnmount)((()=>{null!==u.value&&a((0,r.toRaw)(u.value),c)})),c.expose({chart:u,updateChart:p}),()=>(0,r.h)("div",{style:e.styles,class:e.cssClasses},[(0,r.h)("canvas",{id:e.chartId,width:e.width,height:e.height,ref:d})])}}),u=c("bar-chart","bar",s.BarController),d=c("doughnut-chart","doughnut",s.DoughnutController),h=c("line-chart","line",s.LineController),p=c("pie-chart","pie",s.PieController),f=c("polar-chart","polarArea",s.PolarAreaController),m=c("radar-chart","radar",s.RadarController),g=c("bubble-chart","bubble",s.BubbleController),v=c("scatter-chart","scatter",s.ScatterController)},"./node_modules/vue-loader/dist/exportHelper.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=(e,t)=>{const n=e.__vccOpts||e;for(const[e,o]of t)n[e]=o;return n}},"./src/App.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/App.vue?vue&type=template&id=7ba5bd90"),s=n("./src/App.vue?vue&type=script&lang=js");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/App.vue"]])},"./src/components/alert/BaseAlert.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/alert/BaseAlert.vue?vue&type=template&id=6f5743d0&scoped=true"),s=n("./src/components/alert/BaseAlert.vue?vue&type=script&lang=js");n("./src/components/alert/BaseAlert.vue?vue&type=style&index=0&id=6f5743d0&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-6f5743d0"],["__file","src/components/alert/BaseAlert.vue"]])},"./src/components/button/BaseButton.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/button/BaseButton.vue?vue&type=template&id=88e226c0&scoped=true"),s=n("./src/components/button/BaseButton.vue?vue&type=script&lang=js");n("./src/components/button/BaseButton.vue?vue&type=style&index=0&id=88e226c0&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-88e226c0"],["__file","src/components/button/BaseButton.vue"]])},"./src/components/card/BaseCard.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/card/BaseCard.vue?vue&type=template&id=0db0c5e0&scoped=true"),s=n("./src/components/card/BaseCard.vue?vue&type=script&lang=js");n("./src/components/card/BaseCard.vue?vue&type=style&index=0&id=0db0c5e0&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-0db0c5e0"],["__file","src/components/card/BaseCard.vue"]])},"./src/components/chart/BarChart.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/chart/BarChart.vue?vue&type=template&id=6a09facc"),s=n("./src/components/chart/BarChart.vue?vue&type=script&setup=true&lang=js");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/components/chart/BarChart.vue"]])},"./src/components/chart/BarChartLoading.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/chart/BarChartLoading.vue?vue&type=template&id=5ae1da00&scoped=true"),s=n("./src/components/chart/BarChartLoading.vue?vue&type=script&lang=js");n("./src/components/chart/BarChartLoading.vue?vue&type=style&index=0&id=5ae1da00&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-5ae1da00"],["__file","src/components/chart/BarChartLoading.vue"]])},"./src/components/input/BaseInput.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/input/BaseInput.vue?vue&type=template&id=d0938918&scoped=true"),s=n("./src/components/input/BaseInput.vue?vue&type=script&lang=js");n("./src/components/input/BaseInput.vue?vue&type=style&index=0&id=d0938918&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-d0938918"],["__file","src/components/input/BaseInput.vue"]])},"./src/components/input/InputSection.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/input/InputSection.vue?vue&type=template&id=a6a577e0&scoped=true"),s=n("./src/components/input/InputSection.vue?vue&type=script&lang=js");n("./src/components/input/InputSection.vue?vue&type=style&index=0&id=a6a577e0&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-a6a577e0"],["__file","src/components/input/InputSection.vue"]])},"./src/components/pagination/BasePagination.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/pagination/BasePagination.vue?vue&type=template&id=3fa7b0a0&scoped=true"),s=n("./src/components/pagination/BasePagination.vue?vue&type=script&setup=true&lang=js");n("./src/components/pagination/BasePagination.vue?vue&type=style&index=0&id=3fa7b0a0&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-3fa7b0a0"],["__file","src/components/pagination/BasePagination.vue"]])},"./src/components/pagination/PaginationLoader.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/pagination/PaginationLoader.vue?vue&type=template&id=1626f362&scoped=true"),s=n("./src/components/pagination/PaginationLoader.vue?vue&type=script&lang=js");n("./src/components/pagination/PaginationLoader.vue?vue&type=style&index=0&id=1626f362&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-1626f362"],["__file","src/components/pagination/PaginationLoader.vue"]])},"./src/components/settings/SettingForm.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/settings/SettingForm.vue?vue&type=template&id=271b0f38&scoped=true"),s=n("./src/components/settings/SettingForm.vue?vue&type=script&setup=true&lang=js");n("./src/components/settings/SettingForm.vue?vue&type=style&index=0&id=271b0f38&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-271b0f38"],["__file","src/components/settings/SettingForm.vue"]])},"./src/components/settings/SettingFormLoading.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/settings/SettingFormLoading.vue?vue&type=template&id=4a4325d8"),s=n("./src/components/settings/SettingFormLoading.vue?vue&type=script&lang=js");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/components/settings/SettingFormLoading.vue"]])},"./src/components/skeleton/SkeletonText.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/skeleton/SkeletonText.vue?vue&type=template&id=1c6d1848&scoped=true"),s=n("./src/components/skeleton/SkeletonText.vue?vue&type=script&lang=js");n("./src/components/skeleton/SkeletonText.vue?vue&type=style&index=0&id=1c6d1848&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-1c6d1848"],["__file","src/components/skeleton/SkeletonText.vue"]])},"./src/components/spinner/BaseSpinner.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/spinner/BaseSpinner.vue?vue&type=template&id=64223412"),s=n("./src/components/spinner/BaseSpinner.vue?vue&type=script&lang=js");n("./src/components/spinner/BaseSpinner.vue?vue&type=style&index=0&id=64223412&lang=scss");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/components/spinner/BaseSpinner.vue"]])},"./src/components/tables/BaseTable.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/tables/BaseTable.vue?vue&type=template&id=fc36ea7a&scoped=true"),s=n("./src/components/tables/BaseTable.vue?vue&type=script&lang=js");n("./src/components/tables/BaseTable.vue?vue&type=style&index=0&id=fc36ea7a&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-fc36ea7a"],["__file","src/components/tables/BaseTable.vue"]])},"./src/components/tables/TableLoading.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/tables/TableLoading.vue?vue&type=template&id=344abf38&scoped=true"),s=n("./src/components/tables/TableLoading.vue?vue&type=script&lang=js");n("./src/components/tables/TableLoading.vue?vue&type=style&index=0&id=344abf38&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-344abf38"],["__file","src/components/tables/TableLoading.vue"]])},"./src/components/tabs/PageTabs.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/components/tabs/PageTabs.vue?vue&type=template&id=69ff8144&scoped=true"),s=n("./src/components/tabs/PageTabs.vue?vue&type=script&setup=true&lang=js");n("./src/components/tabs/PageTabs.vue?vue&type=style&index=0&id=69ff8144&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-69ff8144"],["__file","src/components/tabs/PageTabs.vue"]])},"./src/pages/GraphPage.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/pages/GraphPage.vue?vue&type=template&id=3c6a0889&scoped=true"),s=n("./src/pages/GraphPage.vue?vue&type=script&setup=true&lang=js");n("./src/pages/GraphPage.vue?vue&type=style&index=0&id=3c6a0889&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-3c6a0889"],["__file","src/pages/GraphPage.vue"]])},"./src/pages/ListPage.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/pages/ListPage.vue?vue&type=template&id=0e7a9b1e&scoped=true"),s=n("./src/pages/ListPage.vue?vue&type=script&setup=true&lang=js");n("./src/pages/ListPage.vue?vue&type=style&index=0&id=0e7a9b1e&lang=scss&scoped=true");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-0e7a9b1e"],["__file","src/pages/ListPage.vue"]])},"./src/pages/SettingPage.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./src/pages/SettingPage.vue?vue&type=template&id=410b268b"),s=n("./src/pages/SettingPage.vue?vue&type=script&lang=js");const r=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/pages/SettingPage.vue"]])},"./src/App.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=script&lang=js")},"./src/components/alert/BaseAlert.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/alert/BaseAlert.vue?vue&type=script&lang=js")},"./src/components/button/BaseButton.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/BaseButton.vue?vue&type=script&lang=js")},"./src/components/card/BaseCard.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/card/BaseCard.vue?vue&type=script&lang=js")},"./src/components/chart/BarChart.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChart.vue?vue&type=script&setup=true&lang=js")},"./src/components/chart/BarChartLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChartLoading.vue?vue&type=script&lang=js")},"./src/components/input/BaseInput.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=script&lang=js")},"./src/components/input/InputSection.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/InputSection.vue?vue&type=script&lang=js")},"./src/components/pagination/BasePagination.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/BasePagination.vue?vue&type=script&setup=true&lang=js")},"./src/components/pagination/PaginationLoader.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/PaginationLoader.vue?vue&type=script&lang=js")},"./src/components/settings/SettingForm.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingForm.vue?vue&type=script&setup=true&lang=js")},"./src/components/settings/SettingFormLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingFormLoading.vue?vue&type=script&lang=js")},"./src/components/skeleton/SkeletonText.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=script&lang=js")},"./src/components/spinner/BaseSpinner.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/spinner/BaseSpinner.vue?vue&type=script&lang=js")},"./src/components/tables/BaseTable.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=script&lang=js")},"./src/components/tables/TableLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=script&lang=js")},"./src/components/tabs/PageTabs.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/PageTabs.vue?vue&type=script&setup=true&lang=js")},"./src/pages/GraphPage.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/GraphPage.vue?vue&type=script&setup=true&lang=js")},"./src/pages/ListPage.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/ListPage.vue?vue&type=script&setup=true&lang=js")},"./src/pages/SettingPage.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/SettingPage.vue?vue&type=script&lang=js")},"./src/App.vue?vue&type=template&id=7ba5bd90":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=template&id=7ba5bd90")},"./src/components/alert/BaseAlert.vue?vue&type=template&id=6f5743d0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/alert/BaseAlert.vue?vue&type=template&id=6f5743d0&scoped=true")},"./src/components/button/BaseButton.vue?vue&type=template&id=88e226c0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/BaseButton.vue?vue&type=template&id=88e226c0&scoped=true")},"./src/components/card/BaseCard.vue?vue&type=template&id=0db0c5e0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/card/BaseCard.vue?vue&type=template&id=0db0c5e0&scoped=true")},"./src/components/chart/BarChart.vue?vue&type=template&id=6a09facc":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChart.vue?vue&type=template&id=6a09facc")},"./src/components/chart/BarChartLoading.vue?vue&type=template&id=5ae1da00&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChartLoading.vue?vue&type=template&id=5ae1da00&scoped=true")},"./src/components/input/BaseInput.vue?vue&type=template&id=d0938918&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=template&id=d0938918&scoped=true")},"./src/components/input/InputSection.vue?vue&type=template&id=a6a577e0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/InputSection.vue?vue&type=template&id=a6a577e0&scoped=true")},"./src/components/pagination/BasePagination.vue?vue&type=template&id=3fa7b0a0&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/BasePagination.vue?vue&type=template&id=3fa7b0a0&scoped=true")},"./src/components/pagination/PaginationLoader.vue?vue&type=template&id=1626f362&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/PaginationLoader.vue?vue&type=template&id=1626f362&scoped=true")},"./src/components/settings/SettingForm.vue?vue&type=template&id=271b0f38&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingForm.vue?vue&type=template&id=271b0f38&scoped=true")},"./src/components/settings/SettingFormLoading.vue?vue&type=template&id=4a4325d8":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingFormLoading.vue?vue&type=template&id=4a4325d8")},"./src/components/skeleton/SkeletonText.vue?vue&type=template&id=1c6d1848&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=template&id=1c6d1848&scoped=true")},"./src/components/spinner/BaseSpinner.vue?vue&type=template&id=64223412":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/spinner/BaseSpinner.vue?vue&type=template&id=64223412")},"./src/components/tables/BaseTable.vue?vue&type=template&id=fc36ea7a&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=template&id=fc36ea7a&scoped=true")},"./src/components/tables/TableLoading.vue?vue&type=template&id=344abf38&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=template&id=344abf38&scoped=true")},"./src/components/tabs/PageTabs.vue?vue&type=template&id=69ff8144&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/PageTabs.vue?vue&type=template&id=69ff8144&scoped=true")},"./src/pages/GraphPage.vue?vue&type=template&id=3c6a0889&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/GraphPage.vue?vue&type=template&id=3c6a0889&scoped=true")},"./src/pages/ListPage.vue?vue&type=template&id=0e7a9b1e&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/ListPage.vue?vue&type=template&id=0e7a9b1e&scoped=true")},"./src/pages/SettingPage.vue?vue&type=template&id=410b268b":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/SettingPage.vue?vue&type=template&id=410b268b")},"./src/components/alert/BaseAlert.vue?vue&type=style&index=0&id=6f5743d0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/alert/BaseAlert.vue?vue&type=style&index=0&id=6f5743d0&lang=scss&scoped=true")},"./src/components/button/BaseButton.vue?vue&type=style&index=0&id=88e226c0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/BaseButton.vue?vue&type=style&index=0&id=88e226c0&lang=scss&scoped=true")},"./src/components/card/BaseCard.vue?vue&type=style&index=0&id=0db0c5e0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/card/BaseCard.vue?vue&type=style&index=0&id=0db0c5e0&lang=scss&scoped=true")},"./src/components/chart/BarChartLoading.vue?vue&type=style&index=0&id=5ae1da00&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChartLoading.vue?vue&type=style&index=0&id=5ae1da00&lang=scss&scoped=true")},"./src/components/input/BaseInput.vue?vue&type=style&index=0&id=d0938918&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=style&index=0&id=d0938918&lang=scss&scoped=true")},"./src/components/input/InputSection.vue?vue&type=style&index=0&id=a6a577e0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/InputSection.vue?vue&type=style&index=0&id=a6a577e0&lang=scss&scoped=true")},"./src/components/pagination/BasePagination.vue?vue&type=style&index=0&id=3fa7b0a0&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/BasePagination.vue?vue&type=style&index=0&id=3fa7b0a0&lang=scss&scoped=true")},"./src/components/pagination/PaginationLoader.vue?vue&type=style&index=0&id=1626f362&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/pagination/PaginationLoader.vue?vue&type=style&index=0&id=1626f362&lang=scss&scoped=true")},"./src/components/settings/SettingForm.vue?vue&type=style&index=0&id=271b0f38&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/settings/SettingForm.vue?vue&type=style&index=0&id=271b0f38&lang=scss&scoped=true")},"./src/components/skeleton/SkeletonText.vue?vue&type=style&index=0&id=1c6d1848&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=style&index=0&id=1c6d1848&lang=scss&scoped=true")},"./src/components/spinner/BaseSpinner.vue?vue&type=style&index=0&id=64223412&lang=scss":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/spinner/BaseSpinner.vue?vue&type=style&index=0&id=64223412&lang=scss")},"./src/components/tables/BaseTable.vue?vue&type=style&index=0&id=fc36ea7a&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=style&index=0&id=fc36ea7a&lang=scss&scoped=true")},"./src/components/tables/TableLoading.vue?vue&type=style&index=0&id=344abf38&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=style&index=0&id=344abf38&lang=scss&scoped=true")},"./src/components/tabs/PageTabs.vue?vue&type=style&index=0&id=69ff8144&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/PageTabs.vue?vue&type=style&index=0&id=69ff8144&lang=scss&scoped=true")},"./src/pages/GraphPage.vue?vue&type=style&index=0&id=3c6a0889&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/GraphPage.vue?vue&type=style&index=0&id=3c6a0889&lang=scss&scoped=true")},"./src/pages/ListPage.vue?vue&type=style&index=0&id=0e7a9b1e&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/ListPage.vue?vue&type=style&index=0&id=0e7a9b1e&lang=scss&scoped=true")},"./node_modules/vue/dist/vue.runtime.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>s.BaseTransition,Comment:()=>s.Comment,EffectScope:()=>s.EffectScope,Fragment:()=>s.Fragment,KeepAlive:()=>s.KeepAlive,ReactiveEffect:()=>s.ReactiveEffect,Static:()=>s.Static,Suspense:()=>s.Suspense,Teleport:()=>s.Teleport,Text:()=>s.Text,Transition:()=>s.Transition,TransitionGroup:()=>s.TransitionGroup,VueElement:()=>s.VueElement,callWithAsyncErrorHandling:()=>s.callWithAsyncErrorHandling,callWithErrorHandling:()=>s.callWithErrorHandling,camelize:()=>s.camelize,capitalize:()=>s.capitalize,cloneVNode:()=>s.cloneVNode,compatUtils:()=>s.compatUtils,compile:()=>r,computed:()=>s.computed,createApp:()=>s.createApp,createBlock:()=>s.createBlock,createCommentVNode:()=>s.createCommentVNode,createElementBlock:()=>s.createElementBlock,createElementVNode:()=>s.createElementVNode,createHydrationRenderer:()=>s.createHydrationRenderer,createPropsRestProxy:()=>s.createPropsRestProxy,createRenderer:()=>s.createRenderer,createSSRApp:()=>s.createSSRApp,createSlots:()=>s.createSlots,createStaticVNode:()=>s.createStaticVNode,createTextVNode:()=>s.createTextVNode,createVNode:()=>s.createVNode,customRef:()=>s.customRef,defineAsyncComponent:()=>s.defineAsyncComponent,defineComponent:()=>s.defineComponent,defineCustomElement:()=>s.defineCustomElement,defineEmits:()=>s.defineEmits,defineExpose:()=>s.defineExpose,defineProps:()=>s.defineProps,defineSSRCustomElement:()=>s.defineSSRCustomElement,devtools:()=>s.devtools,effect:()=>s.effect,effectScope:()=>s.effectScope,getCurrentInstance:()=>s.getCurrentInstance,getCurrentScope:()=>s.getCurrentScope,getTransitionRawChildren:()=>s.getTransitionRawChildren,guardReactiveProps:()=>s.guardReactiveProps,h:()=>s.h,handleError:()=>s.handleError,hydrate:()=>s.hydrate,initCustomFormatter:()=>s.initCustomFormatter,initDirectivesForSSR:()=>s.initDirectivesForSSR,inject:()=>s.inject,isMemoSame:()=>s.isMemoSame,isProxy:()=>s.isProxy,isReactive:()=>s.isReactive,isReadonly:()=>s.isReadonly,isRef:()=>s.isRef,isRuntimeOnly:()=>s.isRuntimeOnly,isShallow:()=>s.isShallow,isVNode:()=>s.isVNode,markRaw:()=>s.markRaw,mergeDefaults:()=>s.mergeDefaults,mergeProps:()=>s.mergeProps,nextTick:()=>s.nextTick,normalizeClass:()=>s.normalizeClass,normalizeProps:()=>s.normalizeProps,normalizeStyle:()=>s.normalizeStyle,onActivated:()=>s.onActivated,onBeforeMount:()=>s.onBeforeMount,onBeforeUnmount:()=>s.onBeforeUnmount,onBeforeUpdate:()=>s.onBeforeUpdate,onDeactivated:()=>s.onDeactivated,onErrorCaptured:()=>s.onErrorCaptured,onMounted:()=>s.onMounted,onRenderTracked:()=>s.onRenderTracked,onRenderTriggered:()=>s.onRenderTriggered,onScopeDispose:()=>s.onScopeDispose,onServerPrefetch:()=>s.onServerPrefetch,onUnmounted:()=>s.onUnmounted,onUpdated:()=>s.onUpdated,openBlock:()=>s.openBlock,popScopeId:()=>s.popScopeId,provide:()=>s.provide,proxyRefs:()=>s.proxyRefs,pushScopeId:()=>s.pushScopeId,queuePostFlushCb:()=>s.queuePostFlushCb,reactive:()=>s.reactive,readonly:()=>s.readonly,ref:()=>s.ref,registerRuntimeCompiler:()=>s.registerRuntimeCompiler,render:()=>s.render,renderList:()=>s.renderList,renderSlot:()=>s.renderSlot,resolveComponent:()=>s.resolveComponent,resolveDirective:()=>s.resolveDirective,resolveDynamicComponent:()=>s.resolveDynamicComponent,resolveFilter:()=>s.resolveFilter,resolveTransitionHooks:()=>s.resolveTransitionHooks,setBlockTracking:()=>s.setBlockTracking,setDevtoolsHook:()=>s.setDevtoolsHook,setTransitionHooks:()=>s.setTransitionHooks,shallowReactive:()=>s.shallowReactive,shallowReadonly:()=>s.shallowReadonly,shallowRef:()=>s.shallowRef,ssrContextKey:()=>s.ssrContextKey,ssrUtils:()=>s.ssrUtils,stop:()=>s.stop,toDisplayString:()=>s.toDisplayString,toHandlerKey:()=>s.toHandlerKey,toHandlers:()=>s.toHandlers,toRaw:()=>s.toRaw,toRef:()=>s.toRef,toRefs:()=>s.toRefs,transformVNodeArgs:()=>s.transformVNodeArgs,triggerRef:()=>s.triggerRef,unref:()=>s.unref,useAttrs:()=>s.useAttrs,useCssModule:()=>s.useCssModule,useCssVars:()=>s.useCssVars,useSSRContext:()=>s.useSSRContext,useSlots:()=>s.useSlots,useTransitionState:()=>s.useTransitionState,vModelCheckbox:()=>s.vModelCheckbox,vModelDynamic:()=>s.vModelDynamic,vModelRadio:()=>s.vModelRadio,vModelSelect:()=>s.vModelSelect,vModelText:()=>s.vModelText,vShow:()=>s.vShow,version:()=>s.version,warn:()=>s.warn,watch:()=>s.watch,watchEffect:()=>s.watchEffect,watchPostEffect:()=>s.watchPostEffect,watchSyncEffect:()=>s.watchSyncEffect,withAsyncContext:()=>s.withAsyncContext,withCtx:()=>s.withCtx,withDefaults:()=>s.withDefaults,withDirectives:()=>s.withDirectives,withKeys:()=>s.withKeys,withMemo:()=>s.withMemo,withModifiers:()=>s.withModifiers,withScopeId:()=>s.withScopeId});var o=n("./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"),s=n("./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js");(0,o.initCustomFormatter)();const r=()=>{(0,o.warn)('Runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".')}},"./node_modules/vuex/dist/vuex.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Store:()=>I,createLogger:()=>q,createNamespacedHelpers:()=>H,createStore:()=>B,default:()=>Z,mapActions:()=>z,mapGetters:()=>$,mapMutations:()=>V,mapState:()=>F,storeKey:()=>r,useStore:()=>i});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/index.js"),r="store";function i(e){return void 0===e&&(e=null),(0,o.inject)(null!==e?e:r)}function a(e,t){if(void 0===t&&(t=[]),null===e||"object"!=typeof e)return e;var n,o=(n=function(t){return t.original===e},t.filter(n)[0]);if(o)return o.copy;var s=Array.isArray(e)?[]:{};return t.push({original:e,copy:s}),Object.keys(e).forEach((function(n){s[n]=a(e[n],t)})),s}function l(e,t){Object.keys(e).forEach((function(n){return t(e[n],n)}))}function c(e){return null!==e&&"object"==typeof e}function u(e,t){if(!e)throw new Error("[vuex] "+t)}function d(e,t,n){return t.indexOf(e)<0&&(n&&n.prepend?t.unshift(e):t.push(e)),function(){var n=t.indexOf(e);n>-1&&t.splice(n,1)}}function h(e,t){e._actions=Object.create(null),e._mutations=Object.create(null),e._wrappedGetters=Object.create(null),e._modulesNamespaceMap=Object.create(null);var n=e.state;f(e,n,[],e._modules.root,!0),p(e,n,t)}function p(e,t,n){var s=e._state;e.getters={},e._makeLocalGettersCache=Object.create(null);var r=e._wrappedGetters,i={};l(r,(function(t,n){i[n]=function(e,t){return function(){return e(t)}}(t,e),Object.defineProperty(e.getters,n,{get:function(){return i[n]()},enumerable:!0})})),e._state=(0,o.reactive)({data:t}),e.strict&&function(e){(0,o.watch)((function(){return e._state.data}),(function(){u(e._committing,"do not mutate vuex store state outside mutation handlers.")}),{deep:!0,flush:"sync"})}(e),s&&n&&e._withCommit((function(){s.data=null}))}function f(e,t,n,o,s){var r=!n.length,i=e._modules.getNamespace(n);if(o.namespaced&&(e._modulesNamespaceMap[i]&&console.error("[vuex] duplicate namespace "+i+" for the namespaced module "+n.join("/")),e._modulesNamespaceMap[i]=o),!r&&!s){var a=g(t,n.slice(0,-1)),l=n[n.length-1];e._withCommit((function(){l in a&&console.warn('[vuex] state field "'+l+'" was overridden by a module with the same name at "'+n.join(".")+'"'),a[l]=o.state}))}var c=o.context=function(e,t,n){var o=""===t,s={dispatch:o?e.dispatch:function(n,o,s){var r=v(n,o,s),i=r.payload,a=r.options,l=r.type;if(a&&a.root||(l=t+l,e._actions[l]))return e.dispatch(l,i);console.error("[vuex] unknown local action type: "+r.type+", global type: "+l)},commit:o?e.commit:function(n,o,s){var r=v(n,o,s),i=r.payload,a=r.options,l=r.type;a&&a.root||(l=t+l,e._mutations[l])?e.commit(l,i,a):console.error("[vuex] unknown local mutation type: "+r.type+", global type: "+l)}};return Object.defineProperties(s,{getters:{get:o?function(){return e.getters}:function(){return m(e,t)}},state:{get:function(){return g(e.state,n)}}}),s}(e,i,n);o.forEachMutation((function(t,n){!function(e,t,n,o){(e._mutations[t]||(e._mutations[t]=[])).push((function(t){n.call(e,o.state,t)}))}(e,i+n,t,c)})),o.forEachAction((function(t,n){var o=t.root?n:i+n,s=t.handler||t;!function(e,t,n,o){(e._actions[t]||(e._actions[t]=[])).push((function(t){var s,r=n.call(e,{dispatch:o.dispatch,commit:o.commit,getters:o.getters,state:o.state,rootGetters:e.getters,rootState:e.state},t);return(s=r)&&"function"==typeof s.then||(r=Promise.resolve(r)),e._devtoolHook?r.catch((function(t){throw e._devtoolHook.emit("vuex:error",t),t})):r}))}(e,o,s,c)})),o.forEachGetter((function(t,n){!function(e,t,n,o){e._wrappedGetters[t]?console.error("[vuex] duplicate getter key: "+t):e._wrappedGetters[t]=function(e){return n(o.state,o.getters,e.state,e.getters)}}(e,i+n,t,c)})),o.forEachChild((function(o,r){f(e,t,n.concat(r),o,s)}))}function m(e,t){if(!e._makeLocalGettersCache[t]){var n={},o=t.length;Object.keys(e.getters).forEach((function(s){if(s.slice(0,o)===t){var r=s.slice(o);Object.defineProperty(n,r,{get:function(){return e.getters[s]},enumerable:!0})}})),e._makeLocalGettersCache[t]=n}return e._makeLocalGettersCache[t]}function g(e,t){return t.reduce((function(e,t){return e[t]}),e)}function v(e,t,n){return c(e)&&e.type&&(n=t,t=e,e=e.type),u("string"==typeof e,"expects string as the type, but found "+typeof e+"."),{type:e,payload:t,options:n}}var y="vuex:mutations",b="vuex:actions",_="vuex",x=0;function w(e,t){(0,s.setupDevtoolsPlugin)({id:"org.vuejs.vuex",app:e,label:"Vuex",homepage:"https://next.vuex.vuejs.org/",logo:"https://vuejs.org/images/icons/favicon-96x96.png",packageName:"vuex",componentStateTypes:["vuex bindings"]},(function(n){n.addTimelineLayer({id:y,label:"Vuex Mutations",color:S}),n.addTimelineLayer({id:b,label:"Vuex Actions",color:S}),n.addInspector({id:_,label:"Vuex",icon:"storage",treeFilterPlaceholder:"Filter stores..."}),n.on.getInspectorTree((function(n){if(n.app===e&&n.inspectorId===_)if(n.filter){var o=[];O(o,t._modules.root,n.filter,""),n.rootNodes=o}else n.rootNodes=[P(t._modules.root,"")]})),n.on.getInspectorState((function(n){if(n.app===e&&n.inspectorId===_){var o=n.nodeId;m(t,o),n.state=function(e,t,n){t="root"===n?t:t[n];var o=Object.keys(t),s={state:Object.keys(e.state).map((function(t){return{key:t,editable:!0,value:e.state[t]}}))};if(o.length){var r=function(e){var t={};return Object.keys(e).forEach((function(n){var o=n.split("/");if(o.length>1){var s=t,r=o.pop();o.forEach((function(e){s[e]||(s[e]={_custom:{value:{},display:e,tooltip:"Module",abstract:!0}}),s=s[e]._custom.value})),s[r]=C((function(){return e[n]}))}else t[n]=C((function(){return e[n]}))})),t}(t);s.getters=Object.keys(r).map((function(e){return{key:e.endsWith("/")?j(e):e,editable:!1,value:C((function(){return r[e]}))}}))}return s}((s=t._modules,(i=(r=o).split("/").filter((function(e){return e}))).reduce((function(e,t,n){var o=e[t];if(!o)throw new Error('Missing module "'+t+'" for path "'+r+'".');return n===i.length-1?o:o._children}),"root"===r?s:s.root._children)),"root"===o?t.getters:t._makeLocalGettersCache,o)}var s,r,i})),n.on.editInspectorState((function(n){if(n.app===e&&n.inspectorId===_){var o=n.nodeId,s=n.path;"root"!==o&&(s=o.split("/").filter(Boolean).concat(s)),t._withCommit((function(){n.set(t._state.data,s,n.state.value)}))}})),t.subscribe((function(e,t){var o={};e.payload&&(o.payload=e.payload),o.state=t,n.notifyComponentUpdate(),n.sendInspectorTree(_),n.sendInspectorState(_),n.addTimelineEvent({layerId:y,event:{time:Date.now(),title:e.type,data:o}})})),t.subscribeAction({before:function(e,t){var o={};e.payload&&(o.payload=e.payload),e._id=x++,e._time=Date.now(),o.state=t,n.addTimelineEvent({layerId:b,event:{time:e._time,title:e.type,groupId:e._id,subtitle:"start",data:o}})},after:function(e,t){var o={},s=Date.now()-e._time;o.duration={_custom:{type:"duration",display:s+"ms",tooltip:"Action duration",value:s}},e.payload&&(o.payload=e.payload),o.state=t,n.addTimelineEvent({layerId:b,event:{time:Date.now(),title:e.type,groupId:e._id,subtitle:"end",data:o}})}})}))}var S=8702998,k={label:"namespaced",textColor:16777215,backgroundColor:6710886};function j(e){return e&&"root"!==e?e.split("/").slice(-2,-1)[0]:"Root"}function P(e,t){return{id:t||"root",label:j(t),tags:e.namespaced?[k]:[],children:Object.keys(e._children).map((function(n){return P(e._children[n],t+n+"/")}))}}function O(e,t,n,o){o.includes(n)&&e.push({id:o||"root",label:o.endsWith("/")?o.slice(0,o.length-1):o||"Root",tags:t.namespaced?[k]:[]}),Object.keys(t._children).forEach((function(s){O(e,t._children[s],n,o+s+"/")}))}function C(e){try{return e()}catch(e){return e}}var E=function(e,t){this.runtime=t,this._children=Object.create(null),this._rawModule=e;var n=e.state;this.state=("function"==typeof n?n():n)||{}},T={namespaced:{configurable:!0}};T.namespaced.get=function(){return!!this._rawModule.namespaced},E.prototype.addChild=function(e,t){this._children[e]=t},E.prototype.removeChild=function(e){delete this._children[e]},E.prototype.getChild=function(e){return this._children[e]},E.prototype.hasChild=function(e){return e in this._children},E.prototype.update=function(e){this._rawModule.namespaced=e.namespaced,e.actions&&(this._rawModule.actions=e.actions),e.mutations&&(this._rawModule.mutations=e.mutations),e.getters&&(this._rawModule.getters=e.getters)},E.prototype.forEachChild=function(e){l(this._children,e)},E.prototype.forEachGetter=function(e){this._rawModule.getters&&l(this._rawModule.getters,e)},E.prototype.forEachAction=function(e){this._rawModule.actions&&l(this._rawModule.actions,e)},E.prototype.forEachMutation=function(e){this._rawModule.mutations&&l(this._rawModule.mutations,e)},Object.defineProperties(E.prototype,T);var M=function(e){this.register([],e,!1)};function A(e,t,n){if(D(e,n),t.update(n),n.modules)for(var o in n.modules){if(!t.getChild(o))return void console.warn("[vuex] trying to add a new module '"+o+"' on hot reloading, manual reload is needed");A(e.concat(o),t.getChild(o),n.modules[o])}}M.prototype.get=function(e){return e.reduce((function(e,t){return e.getChild(t)}),this.root)},M.prototype.getNamespace=function(e){var t=this.root;return e.reduce((function(e,n){return e+((t=t.getChild(n)).namespaced?n+"/":"")}),"")},M.prototype.update=function(e){A([],this.root,e)},M.prototype.register=function(e,t,n){var o=this;void 0===n&&(n=!0),D(e,t);var s=new E(t,n);0===e.length?this.root=s:this.get(e.slice(0,-1)).addChild(e[e.length-1],s),t.modules&&l(t.modules,(function(t,s){o.register(e.concat(s),t,n)}))},M.prototype.unregister=function(e){var t=this.get(e.slice(0,-1)),n=e[e.length-1],o=t.getChild(n);o?o.runtime&&t.removeChild(n):console.warn("[vuex] trying to unregister module '"+n+"', which is not registered")},M.prototype.isRegistered=function(e){var t=this.get(e.slice(0,-1)),n=e[e.length-1];return!!t&&t.hasChild(n)};var R={assert:function(e){return"function"==typeof e},expected:"function"},L={getters:R,mutations:R,actions:{assert:function(e){return"function"==typeof e||"object"==typeof e&&"function"==typeof e.handler},expected:'function or object with "handler" function'}};function D(e,t){Object.keys(L).forEach((function(n){if(t[n]){var o=L[n];l(t[n],(function(t,s){u(o.assert(t),function(e,t,n,o,s){var r=t+" should be "+s+' but "'+t+"."+n+'"';return e.length>0&&(r+=' in module "'+e.join(".")+'"'),r+" is "+JSON.stringify(o)+"."}(e,n,s,t,o.expected))}))}}))}function B(e){return new I(e)}var I=function e(t){var n=this;void 0===t&&(t={}),u("undefined"!=typeof Promise,"vuex requires a Promise polyfill in this browser."),u(this instanceof e,"store must be called with the new operator.");var o=t.plugins;void 0===o&&(o=[]);var s=t.strict;void 0===s&&(s=!1);var r=t.devtools;this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new M(t),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._makeLocalGettersCache=Object.create(null),this._devtools=r;var i=this,a=this.dispatch,l=this.commit;this.dispatch=function(e,t){return a.call(i,e,t)},this.commit=function(e,t,n){return l.call(i,e,t,n)},this.strict=s;var c=this._modules.root.state;f(this,c,[],this._modules.root),p(this,c),o.forEach((function(e){return e(n)}))},N={state:{configurable:!0}};I.prototype.install=function(e,t){e.provide(t||r,this),e.config.globalProperties.$store=this,(void 0===this._devtools||this._devtools)&&w(e,this)},N.state.get=function(){return this._state.data},N.state.set=function(e){u(!1,"use store.replaceState() to explicit replace store state.")},I.prototype.commit=function(e,t,n){var o=this,s=v(e,t,n),r=s.type,i=s.payload,a=s.options,l={type:r,payload:i},c=this._mutations[r];c?(this._withCommit((function(){c.forEach((function(e){e(i)}))})),this._subscribers.slice().forEach((function(e){return e(l,o.state)})),a&&a.silent&&console.warn("[vuex] mutation type: "+r+". Silent option has been removed. Use the filter functionality in the vue-devtools")):console.error("[vuex] unknown mutation type: "+r)},I.prototype.dispatch=function(e,t){var n=this,o=v(e,t),s=o.type,r=o.payload,i={type:s,payload:r},a=this._actions[s];if(a){try{this._actionSubscribers.slice().filter((function(e){return e.before})).forEach((function(e){return e.before(i,n.state)}))}catch(e){console.warn("[vuex] error in before action subscribers: "),console.error(e)}var l=a.length>1?Promise.all(a.map((function(e){return e(r)}))):a[0](r);return new Promise((function(e,t){l.then((function(t){try{n._actionSubscribers.filter((function(e){return e.after})).forEach((function(e){return e.after(i,n.state)}))}catch(e){console.warn("[vuex] error in after action subscribers: "),console.error(e)}e(t)}),(function(e){try{n._actionSubscribers.filter((function(e){return e.error})).forEach((function(t){return t.error(i,n.state,e)}))}catch(e){console.warn("[vuex] error in error action subscribers: "),console.error(e)}t(e)}))}))}console.error("[vuex] unknown action type: "+s)},I.prototype.subscribe=function(e,t){return d(e,this._subscribers,t)},I.prototype.subscribeAction=function(e,t){return d("function"==typeof e?{before:e}:e,this._actionSubscribers,t)},I.prototype.watch=function(e,t,n){var s=this;return u("function"==typeof e,"store.watch only accepts a function."),(0,o.watch)((function(){return e(s.state,s.getters)}),t,Object.assign({},n))},I.prototype.replaceState=function(e){var t=this;this._withCommit((function(){t._state.data=e}))},I.prototype.registerModule=function(e,t,n){void 0===n&&(n={}),"string"==typeof e&&(e=[e]),u(Array.isArray(e),"module path must be a string or an Array."),u(e.length>0,"cannot register the root module by using registerModule."),this._modules.register(e,t),f(this,this.state,e,this._modules.get(e),n.preserveState),p(this,this.state)},I.prototype.unregisterModule=function(e){var t=this;"string"==typeof e&&(e=[e]),u(Array.isArray(e),"module path must be a string or an Array."),this._modules.unregister(e),this._withCommit((function(){delete g(t.state,e.slice(0,-1))[e[e.length-1]]})),h(this)},I.prototype.hasModule=function(e){return"string"==typeof e&&(e=[e]),u(Array.isArray(e),"module path must be a string or an Array."),this._modules.isRegistered(e)},I.prototype.hotUpdate=function(e){this._modules.update(e),h(this,!0)},I.prototype._withCommit=function(e){var t=this._committing;this._committing=!0,e(),this._committing=t},Object.defineProperties(I.prototype,N);var F=G((function(e,t){var n={};return W(t)||console.error("[vuex] mapState: mapper parameter must be either an Array or an Object"),U(t).forEach((function(t){var o=t.key,s=t.val;n[o]=function(){var t=this.$store.state,n=this.$store.getters;if(e){var o=Y(this.$store,"mapState",e);if(!o)return;t=o.context.state,n=o.context.getters}return"function"==typeof s?s.call(this,t,n):t[s]},n[o].vuex=!0})),n})),V=G((function(e,t){var n={};return W(t)||console.error("[vuex] mapMutations: mapper parameter must be either an Array or an Object"),U(t).forEach((function(t){var o=t.key,s=t.val;n[o]=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];var o=this.$store.commit;if(e){var r=Y(this.$store,"mapMutations",e);if(!r)return;o=r.context.commit}return"function"==typeof s?s.apply(this,[o].concat(t)):o.apply(this.$store,[s].concat(t))}})),n})),$=G((function(e,t){var n={};return W(t)||console.error("[vuex] mapGetters: mapper parameter must be either an Array or an Object"),U(t).forEach((function(t){var o=t.key,s=t.val;s=e+s,n[o]=function(){if(!e||Y(this.$store,"mapGetters",e)){if(s in this.$store.getters)return this.$store.getters[s];console.error("[vuex] unknown getter: "+s)}},n[o].vuex=!0})),n})),z=G((function(e,t){var n={};return W(t)||console.error("[vuex] mapActions: mapper parameter must be either an Array or an Object"),U(t).forEach((function(t){var o=t.key,s=t.val;n[o]=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];var o=this.$store.dispatch;if(e){var r=Y(this.$store,"mapActions",e);if(!r)return;o=r.context.dispatch}return"function"==typeof s?s.apply(this,[o].concat(t)):o.apply(this.$store,[s].concat(t))}})),n})),H=function(e){return{mapState:F.bind(null,e),mapGetters:$.bind(null,e),mapMutations:V.bind(null,e),mapActions:z.bind(null,e)}};function U(e){return W(e)?Array.isArray(e)?e.map((function(e){return{key:e,val:e}})):Object.keys(e).map((function(t){return{key:t,val:e[t]}})):[]}function W(e){return Array.isArray(e)||c(e)}function G(e){return function(t,n){return"string"!=typeof t?(n=t,t=""):"/"!==t.charAt(t.length-1)&&(t+="/"),e(t,n)}}function Y(e,t,n){var o=e._modulesNamespaceMap[n];return o||console.error("[vuex] module namespace not found in "+t+"(): "+n),o}function q(e){void 0===e&&(e={});var t=e.collapsed;void 0===t&&(t=!0);var n=e.filter;void 0===n&&(n=function(e,t,n){return!0});var o=e.transformer;void 0===o&&(o=function(e){return e});var s=e.mutationTransformer;void 0===s&&(s=function(e){return e});var r=e.actionFilter;void 0===r&&(r=function(e,t){return!0});var i=e.actionTransformer;void 0===i&&(i=function(e){return e});var l=e.logMutations;void 0===l&&(l=!0);var c=e.logActions;void 0===c&&(c=!0);var u=e.logger;return void 0===u&&(u=console),function(e){var d=a(e.state);void 0!==u&&(l&&e.subscribe((function(e,r){var i=a(r);if(n(e,d,i)){var l=X(),c=s(e),h="mutation "+e.type+l;K(u,h,t),u.log("%c prev state","color: #9E9E9E; font-weight: bold",o(d)),u.log("%c mutation","color: #03A9F4; font-weight: bold",c),u.log("%c next state","color: #4CAF50; font-weight: bold",o(i)),J(u)}d=i})),c&&e.subscribeAction((function(e,n){if(r(e,n)){var o=X(),s=i(e),a="action "+e.type+o;K(u,a,t),u.log("%c action","color: #03A9F4; font-weight: bold",s),J(u)}})))}}function K(e,t,n){var o=n?e.groupCollapsed:e.group;try{o.call(e,t)}catch(n){e.log(t)}}function J(e){try{e.groupEnd()}catch(t){e.log("—— log end ——")}}function X(){var e=new Date;return" @ "+Q(e.getHours(),2)+":"+Q(e.getMinutes(),2)+":"+Q(e.getSeconds(),2)+"."+Q(e.getMilliseconds(),3)}function Q(e,t){return"0",n=t-e.toString().length,new Array(n+1).join("0")+e;var n}const Z={version:"4.0.2",Store:I,storeKey:r,createStore:B,useStore:i,mapState:F,mapMutations:V,mapGetters:$,mapActions:z,createNamespacedHelpers:H,createLogger:q}},"./node_modules/chart.js/dist/chart.mjs":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Animation:()=>a,Animations:()=>c,ArcElement:()=>dt,BarController:()=>T,BarElement:()=>Ot,BasePlatform:()=>be,BasicPlatform:()=>_e,BubbleController:()=>M,CategoryScale:()=>gn,Chart:()=>rt,DatasetController:()=>x,Decimation:()=>Mt,DomPlatform:()=>Le,DoughnutController:()=>A,Element:()=>I,Filler:()=>Yt,Interaction:()=>ie,Legend:()=>Jt,LineController:()=>R,LineElement:()=>bt,LinearScale:()=>bn,LogarithmicScale:()=>xn,PieController:()=>D,PointElement:()=>xt,PolarAreaController:()=>L,RadarController:()=>B,RadialLinearScale:()=>Cn,Scale:()=>Y,ScatterController:()=>J,SubTitle:()=>en,Ticks:()=>F,TimeScale:()=>Bn,TimeSeriesScale:()=>Nn,Title:()=>Qt,Tooltip:()=>fn,_adapters:()=>ee,_detectPlatform:()=>De,animator:()=>s,controllers:()=>X,defaults:()=>o.d,elements:()=>Ct,layouts:()=>ye,plugins:()=>mn,registerables:()=>Vn,registry:()=>K,scales:()=>Fn});var o=n("./node_modules/chart.js/dist/chunks/helpers.segment.mjs"),s=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(e,t,n,o){const s=t.listeners[o],r=t.duration;s.forEach((o=>o({chart:e,initial:t.initial,numSteps:r,currentStep:Math.min(n-t.start,r)})))}_refresh(){this._request||(this._running=!0,this._request=o.r.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(e=Date.now()){let t=0;this._charts.forEach(((n,o)=>{if(!n.running||!n.items.length)return;const s=n.items;let r,i=s.length-1,a=!1;for(;i>=0;--i)r=s[i],r._active?(r._total>n.duration&&(n.duration=r._total),r.tick(e),a=!0):(s[i]=s[s.length-1],s.pop());a&&(o.draw(),this._notify(o,n,e,"progress")),s.length||(n.running=!1,this._notify(o,n,e,"complete"),n.initial=!1),t+=s.length})),this._lastDate=e,0===t&&(this._running=!1)}_getAnims(e){const t=this._charts;let n=t.get(e);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},t.set(e,n)),n}listen(e,t,n){this._getAnims(e).listeners[t].push(n)}add(e,t){t&&t.length&&this._getAnims(e).items.push(...t)}has(e){return this._getAnims(e).items.length>0}start(e){const t=this._charts.get(e);t&&(t.running=!0,t.start=Date.now(),t.duration=t.items.reduce(((e,t)=>Math.max(e,t._duration)),0),this._refresh())}running(e){if(!this._running)return!1;const t=this._charts.get(e);return!!(t&&t.running&&t.items.length)}stop(e){const t=this._charts.get(e);if(!t||!t.items.length)return;const n=t.items;let o=n.length-1;for(;o>=0;--o)n[o].cancel();t.items=[],this._notify(e,t,Date.now(),"complete")}remove(e){return this._charts.delete(e)}};const r="transparent",i={boolean:(e,t,n)=>n>.5?t:e,color(e,t,n){const s=(0,o.c)(e||r),i=s.valid&&(0,o.c)(t||r);return i&&i.valid?i.mix(s,n).hexString():t},number:(e,t,n)=>e+(t-e)*n};class a{constructor(e,t,n,s){const r=t[n];s=(0,o.a)([e.to,s,r,e.from]);const a=(0,o.a)([e.from,r,s]);this._active=!0,this._fn=e.fn||i[e.type||typeof a],this._easing=o.e[e.easing]||o.e.linear,this._start=Math.floor(Date.now()+(e.delay||0)),this._duration=this._total=Math.floor(e.duration),this._loop=!!e.loop,this._target=t,this._prop=n,this._from=a,this._to=s,this._promises=void 0}active(){return this._active}update(e,t,n){if(this._active){this._notify(!1);const s=this._target[this._prop],r=n-this._start,i=this._duration-r;this._start=n,this._duration=Math.floor(Math.max(i,e.duration)),this._total+=r,this._loop=!!e.loop,this._to=(0,o.a)([e.to,t,s,e.from]),this._from=(0,o.a)([e.from,s,t])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(e){const t=e-this._start,n=this._duration,o=this._prop,s=this._from,r=this._loop,i=this._to;let a;if(this._active=s!==i&&(r||t<n),!this._active)return this._target[o]=i,void this._notify(!0);t<0?this._target[o]=s:(a=t/n%2,a=r&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[o]=this._fn(s,i,a))}wait(){const e=this._promises||(this._promises=[]);return new Promise(((t,n)=>{e.push({res:t,rej:n})}))}_notify(e){const t=e?"res":"rej",n=this._promises||[];for(let e=0;e<n.length;e++)n[e][t]()}}o.d.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const l=Object.keys(o.d.animation);o.d.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:e=>"onProgress"!==e&&"onComplete"!==e&&"fn"!==e}),o.d.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),o.d.describe("animations",{_fallback:"animation"}),o.d.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:e=>0|e}}}});class c{constructor(e,t){this._chart=e,this._properties=new Map,this.configure(t)}configure(e){if(!(0,o.i)(e))return;const t=this._properties;Object.getOwnPropertyNames(e).forEach((n=>{const s=e[n];if(!(0,o.i)(s))return;const r={};for(const e of l)r[e]=s[e];((0,o.b)(s.properties)&&s.properties||[n]).forEach((e=>{e!==n&&t.has(e)||t.set(e,r)}))}))}_animateOptions(e,t){const n=t.options,o=function(e,t){if(!t)return;let n=e.options;if(n)return n.$shared&&(e.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;e.options=t}(e,n);if(!o)return[];const s=this._createAnimations(o,n);return n.$shared&&function(e,t){const n=[],o=Object.keys(t);for(let t=0;t<o.length;t++){const s=e[o[t]];s&&s.active()&&n.push(s.wait())}return Promise.all(n)}(e.options.$animations,n).then((()=>{e.options=n}),(()=>{})),s}_createAnimations(e,t){const n=this._properties,o=[],s=e.$animations||(e.$animations={}),r=Object.keys(t),i=Date.now();let l;for(l=r.length-1;l>=0;--l){const c=r[l];if("$"===c.charAt(0))continue;if("options"===c){o.push(...this._animateOptions(e,t));continue}const u=t[c];let d=s[c];const h=n.get(c);if(d){if(h&&d.active()){d.update(h,u,i);continue}d.cancel()}h&&h.duration?(s[c]=d=new a(h,e,c,u),o.push(d)):e[c]=u}return o}update(e,t){if(0===this._properties.size)return void Object.assign(e,t);const n=this._createAnimations(e,t);return n.length?(s.add(this._chart,n),!0):void 0}}function u(e,t){const n=e&&e.options||{},o=n.reverse,s=void 0===n.min?t:0,r=void 0===n.max?t:0;return{start:o?r:s,end:o?s:r}}function d(e,t){const n=[],o=e._getSortedDatasetMetas(t);let s,r;for(s=0,r=o.length;s<r;++s)n.push(o[s].index);return n}function h(e,t,n,s={}){const r=e.keys,i="single"===s.mode;let a,l,c,u;if(null!==t){for(a=0,l=r.length;a<l;++a){if(c=+r[a],c===n){if(s.all)continue;break}u=e.values[c],(0,o.g)(u)&&(i||0===t||(0,o.s)(t)===(0,o.s)(u))&&(t+=u)}return t}}function p(e,t){const n=e&&e.options.stacked;return n||void 0===n&&void 0!==t.stack}function f(e,t,n){const o=e[t]||(e[t]={});return o[n]||(o[n]={})}function m(e,t,n,o){for(const s of t.getMatchingVisibleMetas(o).reverse()){const t=e[s.index];if(n&&t>0||!n&&t<0)return s.index}return null}function g(e,t){const{chart:n,_cachedMeta:o}=e,s=n._stacks||(n._stacks={}),{iScale:r,vScale:i,index:a}=o,l=r.axis,c=i.axis,u=function(e,t,n){return`${e.id}.${t.id}.${n.stack||n.type}`}(r,i,o),d=t.length;let h;for(let e=0;e<d;++e){const n=t[e],{[l]:r,[c]:d}=n;h=(n._stacks||(n._stacks={}))[c]=f(s,u,r),h[a]=d,h._top=m(h,i,!0,o.type),h._bottom=m(h,i,!1,o.type)}}function v(e,t){const n=e.scales;return Object.keys(n).filter((e=>n[e].axis===t)).shift()}function y(e,t){const n=e.controller.index,o=e.vScale&&e.vScale.axis;if(o){t=t||e._parsed;for(const e of t){const t=e._stacks;if(!t||void 0===t[o]||void 0===t[o][n])return;delete t[o][n]}}}const b=e=>"reset"===e||"none"===e,_=(e,t)=>t?e:Object.assign({},e);class x{constructor(e,t){this.chart=e,this._ctx=e.ctx,this.index=t,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const e=this._cachedMeta;this.configure(),this.linkScales(),e._stacked=p(e.vScale,e),this.addElements()}updateIndex(e){this.index!==e&&y(this._cachedMeta),this.index=e}linkScales(){const e=this.chart,t=this._cachedMeta,n=this.getDataset(),s=(e,t,n,o)=>"x"===e?t:"r"===e?o:n,r=t.xAxisID=(0,o.v)(n.xAxisID,v(e,"x")),i=t.yAxisID=(0,o.v)(n.yAxisID,v(e,"y")),a=t.rAxisID=(0,o.v)(n.rAxisID,v(e,"r")),l=t.indexAxis,c=t.iAxisID=s(l,r,i,a),u=t.vAxisID=s(l,i,r,a);t.xScale=this.getScaleForId(r),t.yScale=this.getScaleForId(i),t.rScale=this.getScaleForId(a),t.iScale=this.getScaleForId(c),t.vScale=this.getScaleForId(u)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(e){return this.chart.scales[e]}_getOtherScale(e){const t=this._cachedMeta;return e===t.iScale?t.vScale:t.iScale}reset(){this._update("reset")}_destroy(){const e=this._cachedMeta;this._data&&(0,o.u)(this._data,this),e._stacked&&y(e)}_dataCheck(){const e=this.getDataset(),t=e.data||(e.data=[]),n=this._data;if((0,o.i)(t))this._data=function(e){const t=Object.keys(e),n=new Array(t.length);let o,s,r;for(o=0,s=t.length;o<s;++o)r=t[o],n[o]={x:r,y:e[r]};return n}(t);else if(n!==t){if(n){(0,o.u)(n,this);const e=this._cachedMeta;y(e),e._parsed=[]}t&&Object.isExtensible(t)&&(0,o.l)(t,this),this._syncList=[],this._data=t}}addElements(){const e=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(e.dataset=new this.datasetElementType)}buildOrUpdateElements(e){const t=this._cachedMeta,n=this.getDataset();let o=!1;this._dataCheck();const s=t._stacked;t._stacked=p(t.vScale,t),t.stack!==n.stack&&(o=!0,y(t),t.stack=n.stack),this._resyncElements(e),(o||s!==t._stacked)&&g(this,t._parsed)}configure(){const e=this.chart.config,t=e.datasetScopeKeys(this._type),n=e.getOptionScopes(this.getDataset(),t,!0);this.options=e.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(e,t){const{_cachedMeta:n,_data:s}=this,{iScale:r,_stacked:i}=n,a=r.axis;let l,c,u,d=0===e&&t===s.length||n._sorted,h=e>0&&n._parsed[e-1];if(!1===this._parsing)n._parsed=s,n._sorted=!0,u=s;else{u=(0,o.b)(s[e])?this.parseArrayData(n,s,e,t):(0,o.i)(s[e])?this.parseObjectData(n,s,e,t):this.parsePrimitiveData(n,s,e,t);const r=()=>null===c[a]||h&&c[a]<h[a];for(l=0;l<t;++l)n._parsed[l+e]=c=u[l],d&&(r()&&(d=!1),h=c);n._sorted=d}i&&g(this,u)}parsePrimitiveData(e,t,n,o){const{iScale:s,vScale:r}=e,i=s.axis,a=r.axis,l=s.getLabels(),c=s===r,u=new Array(o);let d,h,p;for(d=0,h=o;d<h;++d)p=d+n,u[d]={[i]:c||s.parse(l[p],p),[a]:r.parse(t[p],p)};return u}parseArrayData(e,t,n,o){const{xScale:s,yScale:r}=e,i=new Array(o);let a,l,c,u;for(a=0,l=o;a<l;++a)c=a+n,u=t[c],i[a]={x:s.parse(u[0],c),y:r.parse(u[1],c)};return i}parseObjectData(e,t,n,s){const{xScale:r,yScale:i}=e,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,c=new Array(s);let u,d,h,p;for(u=0,d=s;u<d;++u)h=u+n,p=t[h],c[u]={x:r.parse((0,o.f)(p,a),h),y:i.parse((0,o.f)(p,l),h)};return c}getParsed(e){return this._cachedMeta._parsed[e]}getDataElement(e){return this._cachedMeta.data[e]}applyStack(e,t,n){const o=this.chart,s=this._cachedMeta,r=t[e.axis];return h({keys:d(o,!0),values:t._stacks[e.axis]},r,s.index,{mode:n})}updateRangeFromParsed(e,t,n,o){const s=n[t.axis];let r=null===s?NaN:s;const i=o&&n._stacks[t.axis];o&&i&&(o.values=i,r=h(o,s,this._cachedMeta.index)),e.min=Math.min(e.min,r),e.max=Math.max(e.max,r)}getMinMax(e,t){const n=this._cachedMeta,s=n._parsed,r=n._sorted&&e===n.iScale,i=s.length,a=this._getOtherScale(e),l=((e,t,n)=>e&&!t.hidden&&t._stacked&&{keys:d(n,!0),values:null})(t,n,this.chart),c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:u,max:h}=function(e){const{min:t,max:n,minDefined:o,maxDefined:s}=e.getUserBounds();return{min:o?t:Number.NEGATIVE_INFINITY,max:s?n:Number.POSITIVE_INFINITY}}(a);let p,f;function m(){f=s[p];const t=f[a.axis];return!(0,o.g)(f[e.axis])||u>t||h<t}for(p=0;p<i&&(m()||(this.updateRangeFromParsed(c,e,f,l),!r));++p);if(r)for(p=i-1;p>=0;--p)if(!m()){this.updateRangeFromParsed(c,e,f,l);break}return c}getAllParsedValues(e){const t=this._cachedMeta._parsed,n=[];let s,r,i;for(s=0,r=t.length;s<r;++s)i=t[s][e.axis],(0,o.g)(i)&&n.push(i);return n}getMaxOverflow(){return!1}getLabelAndValue(e){const t=this._cachedMeta,n=t.iScale,o=t.vScale,s=this.getParsed(e);return{label:n?""+n.getLabelForValue(s[n.axis]):"",value:o?""+o.getLabelForValue(s[o.axis]):""}}_update(e){const t=this._cachedMeta;this.update(e||"default"),t._clip=function(e){let t,n,s,r;return(0,o.i)(e)?(t=e.top,n=e.right,s=e.bottom,r=e.left):t=n=s=r=e,{top:t,right:n,bottom:s,left:r,disabled:!1===e}}((0,o.v)(this.options.clip,function(e,t,n){if(!1===n)return!1;const o=u(e,n),s=u(t,n);return{top:s.end,right:o.end,bottom:s.start,left:o.start}}(t.xScale,t.yScale,this.getMaxOverflow())))}update(e){}draw(){const e=this._ctx,t=this.chart,n=this._cachedMeta,o=n.data||[],s=t.chartArea,r=[],i=this._drawStart||0,a=this._drawCount||o.length-i,l=this.options.drawActiveElementsOnTop;let c;for(n.dataset&&n.dataset.draw(e,s,i,a),c=i;c<i+a;++c){const t=o[c];t.hidden||(t.active&&l?r.push(t):t.draw(e,s))}for(c=0;c<r.length;++c)r[c].draw(e,s)}getStyle(e,t){const n=t?"active":"default";return void 0===e&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(e||0,n)}getContext(e,t,n){const s=this.getDataset();let r;if(e>=0&&e<this._cachedMeta.data.length){const t=this._cachedMeta.data[e];r=t.$context||(t.$context=function(e,t,n){return(0,o.h)(e,{active:!1,dataIndex:t,parsed:void 0,raw:void 0,element:n,index:t,mode:"default",type:"data"})}(this.getContext(),e,t)),r.parsed=this.getParsed(e),r.raw=s.data[e],r.index=r.dataIndex=e}else r=this.$context||(this.$context=function(e,t){return(0,o.h)(e,{active:!1,dataset:void 0,datasetIndex:t,index:t,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),r.dataset=s,r.index=r.datasetIndex=this.index;return r.active=!!t,r.mode=n,r}resolveDatasetElementOptions(e){return this._resolveElementOptions(this.datasetElementType.id,e)}resolveDataElementOptions(e,t){return this._resolveElementOptions(this.dataElementType.id,t,e)}_resolveElementOptions(e,t="default",n){const s="active"===t,r=this._cachedDataOpts,i=e+"-"+t,a=r[i],l=this.enableOptionSharing&&(0,o.j)(n);if(a)return _(a,l);const c=this.chart.config,u=c.datasetElementScopeKeys(this._type,e),d=s?[`${e}Hover`,"hover",e,""]:[e,""],h=c.getOptionScopes(this.getDataset(),u),p=Object.keys(o.d.elements[e]),f=c.resolveNamedOptions(h,p,(()=>this.getContext(n,s)),d);return f.$shared&&(f.$shared=l,r[i]=Object.freeze(_(f,l))),f}_resolveAnimations(e,t,n){const o=this.chart,s=this._cachedDataOpts,r=`animation-${t}`,i=s[r];if(i)return i;let a;if(!1!==o.options.animation){const o=this.chart.config,s=o.datasetAnimationScopeKeys(this._type,t),r=o.getOptionScopes(this.getDataset(),s);a=o.createResolver(r,this.getContext(e,n,t))}const l=new c(o,a&&a.animations);return a&&a._cacheable&&(s[r]=Object.freeze(l)),l}getSharedOptions(e){if(e.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},e))}includeOptions(e,t){return!t||b(e)||this.chart._animationsDisabled}_getSharedOptions(e,t){const n=this.resolveDataElementOptions(e,t),o=this._sharedOptions,s=this.getSharedOptions(n),r=this.includeOptions(t,s)||s!==o;return this.updateSharedOptions(s,t,n),{sharedOptions:s,includeOptions:r}}updateElement(e,t,n,o){b(o)?Object.assign(e,n):this._resolveAnimations(t,o).update(e,n)}updateSharedOptions(e,t,n){e&&!b(t)&&this._resolveAnimations(void 0,t).update(e,n)}_setStyle(e,t,n,o){e.active=o;const s=this.getStyle(t,o);this._resolveAnimations(t,n,o).update(e,{options:!o&&this.getSharedOptions(s)||s})}removeHoverStyle(e,t,n){this._setStyle(e,n,"active",!1)}setHoverStyle(e,t,n){this._setStyle(e,n,"active",!0)}_removeDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!1)}_setDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!0)}_resyncElements(e){const t=this._data,n=this._cachedMeta.data;for(const[e,t,n]of this._syncList)this[e](t,n);this._syncList=[];const o=n.length,s=t.length,r=Math.min(s,o);r&&this.parse(0,r),s>o?this._insertElements(o,s-o,e):s<o&&this._removeElements(s,o-s)}_insertElements(e,t,n=!0){const o=this._cachedMeta,s=o.data,r=e+t;let i;const a=e=>{for(e.length+=t,i=e.length-1;i>=r;i--)e[i]=e[i-t]};for(a(s),i=e;i<r;++i)s[i]=new this.dataElementType;this._parsing&&a(o._parsed),this.parse(e,t),n&&this.updateElements(s,e,t,"reset")}updateElements(e,t,n,o){}_removeElements(e,t){const n=this._cachedMeta;if(this._parsing){const o=n._parsed.splice(e,t);n._stacked&&y(n,o)}n.data.splice(e,t)}_sync(e){if(this._parsing)this._syncList.push(e);else{const[t,n,o]=e;this[t](n,o)}this.chart._dataChanges.push([this.index,...e])}_onDataPush(){const e=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-e,e])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(e,t){t&&this._sync(["_removeElements",e,t]);const n=arguments.length-2;n&&this._sync(["_insertElements",e,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function w(e){const t=e.iScale,n=function(e,t){if(!e._cache.$bar){const n=e.getMatchingVisibleMetas(t);let s=[];for(let t=0,o=n.length;t<o;t++)s=s.concat(n[t].controller.getAllParsedValues(e));e._cache.$bar=(0,o._)(s.sort(((e,t)=>e-t)))}return e._cache.$bar}(t,e.type);let s,r,i,a,l=t._length;const c=()=>{32767!==i&&-32768!==i&&((0,o.j)(a)&&(l=Math.min(l,Math.abs(i-a)||l)),a=i)};for(s=0,r=n.length;s<r;++s)i=t.getPixelForValue(n[s]),c();for(a=void 0,s=0,r=t.ticks.length;s<r;++s)i=t.getPixelForTick(s),c();return l}function S(e,t,n,s){return(0,o.b)(e)?function(e,t,n,o){const s=n.parse(e[0],o),r=n.parse(e[1],o),i=Math.min(s,r),a=Math.max(s,r);let l=i,c=a;Math.abs(i)>Math.abs(a)&&(l=a,c=i),t[n.axis]=c,t._custom={barStart:l,barEnd:c,start:s,end:r,min:i,max:a}}(e,t,n,s):t[n.axis]=n.parse(e,s),t}function k(e,t,n,o){const s=e.iScale,r=e.vScale,i=s.getLabels(),a=s===r,l=[];let c,u,d,h;for(c=n,u=n+o;c<u;++c)h=t[c],d={},d[s.axis]=a||s.parse(i[c],c),l.push(S(h,d,r,c));return l}function j(e){return e&&void 0!==e.barStart&&void 0!==e.barEnd}function P(e,t,n,o){let s=t.borderSkipped;const r={};if(!s)return void(e.borderSkipped=r);if(!0===s)return void(e.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:i,end:a,reverse:l,top:c,bottom:u}=function(e){let t,n,o,s,r;return e.horizontal?(t=e.base>e.x,n="left",o="right"):(t=e.base<e.y,n="bottom",o="top"),t?(s="end",r="start"):(s="start",r="end"),{start:n,end:o,reverse:t,top:s,bottom:r}}(e);"middle"===s&&n&&(e.enableBorderRadius=!0,(n._top||0)===o?s=c:(n._bottom||0)===o?s=u:(r[O(u,i,a,l)]=!0,s=c)),r[O(s,i,a,l)]=!0,e.borderSkipped=r}function O(e,t,n,o){var s,r,i;return o?(i=n,e=C(e=(s=e)===(r=t)?i:s===i?r:s,n,t)):e=C(e,t,n),e}function C(e,t,n){return"start"===e?t:"end"===e?n:e}function E(e,{inflateAmount:t},n){e.inflateAmount="auto"===t?1===n?.33:0:t}x.defaults={},x.prototype.datasetElementType=null,x.prototype.dataElementType=null;class T extends x{parsePrimitiveData(e,t,n,o){return k(e,t,n,o)}parseArrayData(e,t,n,o){return k(e,t,n,o)}parseObjectData(e,t,n,s){const{iScale:r,vScale:i}=e,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,c="x"===r.axis?a:l,u="x"===i.axis?a:l,d=[];let h,p,f,m;for(h=n,p=n+s;h<p;++h)m=t[h],f={},f[r.axis]=r.parse((0,o.f)(m,c),h),d.push(S((0,o.f)(m,u),f,i,h));return d}updateRangeFromParsed(e,t,n,o){super.updateRangeFromParsed(e,t,n,o);const s=n._custom;s&&t===this._cachedMeta.vScale&&(e.min=Math.min(e.min,s.min),e.max=Math.max(e.max,s.max))}getMaxOverflow(){return 0}getLabelAndValue(e){const t=this._cachedMeta,{iScale:n,vScale:o}=t,s=this.getParsed(e),r=s._custom,i=j(r)?"["+r.start+", "+r.end+"]":""+o.getLabelForValue(s[o.axis]);return{label:""+n.getLabelForValue(s[n.axis]),value:i}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(e){const t=this._cachedMeta;this.updateElements(t.data,0,t.data.length,e)}updateElements(e,t,n,s){const r="reset"===s,{index:i,_cachedMeta:{vScale:a}}=this,l=a.getBasePixel(),c=a.isHorizontal(),u=this._getRuler(),{sharedOptions:d,includeOptions:h}=this._getSharedOptions(t,s);for(let p=t;p<t+n;p++){const t=this.getParsed(p),n=r||(0,o.k)(t[a.axis])?{base:l,head:l}:this._calculateBarValuePixels(p),f=this._calculateBarIndexPixels(p,u),m=(t._stacks||{})[a.axis],g={horizontal:c,base:n.base,enableBorderRadius:!m||j(t._custom)||i===m._top||i===m._bottom,x:c?n.head:f.center,y:c?f.center:n.head,height:c?f.size:Math.abs(n.size),width:c?Math.abs(n.size):f.size};h&&(g.options=d||this.resolveDataElementOptions(p,e[p].active?"active":s));const v=g.options||e[p].options;P(g,v,m,i),E(g,v,u.ratio),this.updateElement(e[p],p,g,s)}}_getStacks(e,t){const{iScale:n}=this._cachedMeta,s=n.getMatchingVisibleMetas(this._type).filter((e=>e.controller.options.grouped)),r=n.options.stacked,i=[],a=e=>{const n=e.controller.getParsed(t),s=n&&n[e.vScale.axis];if((0,o.k)(s)||isNaN(s))return!0};for(const n of s)if((void 0===t||!a(n))&&((!1===r||-1===i.indexOf(n.stack)||void 0===r&&void 0===n.stack)&&i.push(n.stack),n.index===e))break;return i.length||i.push(void 0),i}_getStackCount(e){return this._getStacks(void 0,e).length}_getStackIndex(e,t,n){const o=this._getStacks(e,n),s=void 0!==t?o.indexOf(t):-1;return-1===s?o.length-1:s}_getRuler(){const e=this.options,t=this._cachedMeta,n=t.iScale,o=[];let s,r;for(s=0,r=t.data.length;s<r;++s)o.push(n.getPixelForValue(this.getParsed(s)[n.axis],s));const i=e.barThickness;return{min:i||w(t),pixels:o,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:e.grouped,ratio:i?1:e.categoryPercentage*e.barPercentage}}_calculateBarValuePixels(e){const{_cachedMeta:{vScale:t,_stacked:n},options:{base:s,minBarLength:r}}=this,i=s||0,a=this.getParsed(e),l=a._custom,c=j(l);let u,d,h=a[t.axis],p=0,f=n?this.applyStack(t,a,n):h;f!==h&&(p=f-h,f=h),c&&(h=l.barStart,f=l.barEnd-l.barStart,0!==h&&(0,o.s)(h)!==(0,o.s)(l.barEnd)&&(p=0),p+=h);const m=(0,o.k)(s)||c?p:s;let g=t.getPixelForValue(m);if(u=this.chart.getDataVisibility(e)?t.getPixelForValue(p+f):g,d=u-g,Math.abs(d)<r){d=function(e,t,n){return 0!==e?(0,o.s)(e):(t.isHorizontal()?1:-1)*(t.min>=n?1:-1)}(d,t,i)*r,h===i&&(g-=d/2);const e=t.getPixelForDecimal(0),n=t.getPixelForDecimal(1),s=Math.min(e,n),a=Math.max(e,n);g=Math.max(Math.min(g,a),s),u=g+d}if(g===t.getPixelForValue(i)){const e=(0,o.s)(d)*t.getLineWidthForValue(i)/2;g+=e,d-=e}return{size:d,base:g,head:u,center:u+d/2}}_calculateBarIndexPixels(e,t){const n=t.scale,s=this.options,r=s.skipNull,i=(0,o.v)(s.maxBarThickness,1/0);let a,l;if(t.grouped){const n=r?this._getStackCount(e):t.stackCount,c="flex"===s.barThickness?function(e,t,n,o){const s=t.pixels,r=s[e];let i=e>0?s[e-1]:null,a=e<s.length-1?s[e+1]:null;const l=n.categoryPercentage;null===i&&(i=r-(null===a?t.end-t.start:a-r)),null===a&&(a=r+r-i);const c=r-(r-Math.min(i,a))/2*l;return{chunk:Math.abs(a-i)/2*l/o,ratio:n.barPercentage,start:c}}(e,t,s,n):function(e,t,n,s){const r=n.barThickness;let i,a;return(0,o.k)(r)?(i=t.min*n.categoryPercentage,a=n.barPercentage):(i=r*s,a=1),{chunk:i/s,ratio:a,start:t.pixels[e]-i/2}}(e,t,s,n),u=this._getStackIndex(this.index,this._cachedMeta.stack,r?e:void 0);a=c.start+c.chunk*u+c.chunk/2,l=Math.min(i,c.chunk*c.ratio)}else a=n.getPixelForValue(this.getParsed(e)[n.axis],e),l=Math.min(i,t.min*t.ratio);return{base:a-l/2,head:a+l/2,center:a,size:l}}draw(){const e=this._cachedMeta,t=e.vScale,n=e.data,o=n.length;let s=0;for(;s<o;++s)null!==this.getParsed(s)[t.axis]&&n[s].draw(this._ctx)}}T.id="bar",T.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},T.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class M extends x{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(e,t,n,o){const s=super.parsePrimitiveData(e,t,n,o);for(let e=0;e<s.length;e++)s[e]._custom=this.resolveDataElementOptions(e+n).radius;return s}parseArrayData(e,t,n,s){const r=super.parseArrayData(e,t,n,s);for(let e=0;e<r.length;e++){const s=t[n+e];r[e]._custom=(0,o.v)(s[2],this.resolveDataElementOptions(e+n).radius)}return r}parseObjectData(e,t,n,s){const r=super.parseObjectData(e,t,n,s);for(let e=0;e<r.length;e++){const s=t[n+e];r[e]._custom=(0,o.v)(s&&s.r&&+s.r,this.resolveDataElementOptions(e+n).radius)}return r}getMaxOverflow(){const e=this._cachedMeta.data;let t=0;for(let n=e.length-1;n>=0;--n)t=Math.max(t,e[n].size(this.resolveDataElementOptions(n))/2);return t>0&&t}getLabelAndValue(e){const t=this._cachedMeta,{xScale:n,yScale:o}=t,s=this.getParsed(e),r=n.getLabelForValue(s.x),i=o.getLabelForValue(s.y),a=s._custom;return{label:t.label,value:"("+r+", "+i+(a?", "+a:"")+")"}}update(e){const t=this._cachedMeta.data;this.updateElements(t,0,t.length,e)}updateElements(e,t,n,o){const s="reset"===o,{iScale:r,vScale:i}=this._cachedMeta,{sharedOptions:a,includeOptions:l}=this._getSharedOptions(t,o),c=r.axis,u=i.axis;for(let d=t;d<t+n;d++){const t=e[d],n=!s&&this.getParsed(d),h={},p=h[c]=s?r.getPixelForDecimal(.5):r.getPixelForValue(n[c]),f=h[u]=s?i.getBasePixel():i.getPixelForValue(n[u]);h.skip=isNaN(p)||isNaN(f),l&&(h.options=a||this.resolveDataElementOptions(d,t.active?"active":o),s&&(h.options.radius=0)),this.updateElement(t,d,h,o)}}resolveDataElementOptions(e,t){const n=this.getParsed(e);let s=super.resolveDataElementOptions(e,t);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const r=s.radius;return"active"!==t&&(s.radius=0),s.radius+=(0,o.v)(n&&n._custom,r),s}}M.id="bubble",M.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},M.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class A extends x{constructor(e,t){super(e,t),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(e,t){const n=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=n;else{let r,i,a=e=>+n[e];if((0,o.i)(n[e])){const{key:e="value"}=this._parsing;a=t=>+(0,o.f)(n[t],e)}for(r=e,i=e+t;r<i;++r)s._parsed[r]=a(r)}}_getRotation(){return(0,o.t)(this.options.rotation-90)}_getCircumference(){return(0,o.t)(this.options.circumference)}_getRotationExtents(){let e=o.T,t=-o.T;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)){const o=this.chart.getDatasetMeta(n).controller,s=o._getRotation(),r=o._getCircumference();e=Math.min(e,s),t=Math.max(t,s+r)}return{rotation:e,circumference:t-e}}update(e){const t=this.chart,{chartArea:n}=t,s=this._cachedMeta,r=s.data,i=this.getMaxBorderWidth()+this.getMaxOffset(r)+this.options.spacing,a=Math.max((Math.min(n.width,n.height)-i)/2,0),l=Math.min((0,o.m)(this.options.cutout,a),1),c=this._getRingWeight(this.index),{circumference:u,rotation:d}=this._getRotationExtents(),{ratioX:h,ratioY:p,offsetX:f,offsetY:m}=function(e,t,n){let s=1,r=1,i=0,a=0;if(t<o.T){const l=e,c=l+t,u=Math.cos(l),d=Math.sin(l),h=Math.cos(c),p=Math.sin(c),f=(e,t,s)=>(0,o.p)(e,l,c,!0)?1:Math.max(t,t*n,s,s*n),m=(e,t,s)=>(0,o.p)(e,l,c,!0)?-1:Math.min(t,t*n,s,s*n),g=f(0,u,h),v=f(o.H,d,p),y=m(o.P,u,h),b=m(o.P+o.H,d,p);s=(g-y)/2,r=(v-b)/2,i=-(g+y)/2,a=-(v+b)/2}return{ratioX:s,ratioY:r,offsetX:i,offsetY:a}}(d,u,l),g=(n.width-i)/h,v=(n.height-i)/p,y=Math.max(Math.min(g,v)/2,0),b=(0,o.n)(this.options.radius,y),_=(b-Math.max(b*l,0))/this._getVisibleDatasetWeightTotal();this.offsetX=f*b,this.offsetY=m*b,s.total=this.calculateTotal(),this.outerRadius=b-_*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-_*c,0),this.updateElements(r,0,r.length,e)}_circumference(e,t){const n=this.options,s=this._cachedMeta,r=this._getCircumference();return t&&n.animation.animateRotate||!this.chart.getDataVisibility(e)||null===s._parsed[e]||s.data[e].hidden?0:this.calculateCircumference(s._parsed[e]*r/o.T)}updateElements(e,t,n,o){const s="reset"===o,r=this.chart,i=r.chartArea,a=r.options.animation,l=(i.left+i.right)/2,c=(i.top+i.bottom)/2,u=s&&a.animateScale,d=u?0:this.innerRadius,h=u?0:this.outerRadius,{sharedOptions:p,includeOptions:f}=this._getSharedOptions(t,o);let m,g=this._getRotation();for(m=0;m<t;++m)g+=this._circumference(m,s);for(m=t;m<t+n;++m){const t=this._circumference(m,s),n=e[m],r={x:l+this.offsetX,y:c+this.offsetY,startAngle:g,endAngle:g+t,circumference:t,outerRadius:h,innerRadius:d};f&&(r.options=p||this.resolveDataElementOptions(m,n.active?"active":o)),g+=t,this.updateElement(n,m,r,o)}}calculateTotal(){const e=this._cachedMeta,t=e.data;let n,o=0;for(n=0;n<t.length;n++){const s=e._parsed[n];null===s||isNaN(s)||!this.chart.getDataVisibility(n)||t[n].hidden||(o+=Math.abs(s))}return o}calculateCircumference(e){const t=this._cachedMeta.total;return t>0&&!isNaN(e)?o.T*(Math.abs(e)/t):0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,s=n.data.labels||[],r=(0,o.o)(t._parsed[e],n.options.locale);return{label:s[e]||"",value:r}}getMaxBorderWidth(e){let t=0;const n=this.chart;let o,s,r,i,a;if(!e)for(o=0,s=n.data.datasets.length;o<s;++o)if(n.isDatasetVisible(o)){r=n.getDatasetMeta(o),e=r.data,i=r.controller;break}if(!e)return 0;for(o=0,s=e.length;o<s;++o)a=i.resolveDataElementOptions(o),"inner"!==a.borderAlign&&(t=Math.max(t,a.borderWidth||0,a.hoverBorderWidth||0));return t}getMaxOffset(e){let t=0;for(let n=0,o=e.length;n<o;++n){const e=this.resolveDataElementOptions(n);t=Math.max(t,e.offset||0,e.hoverOffset||0)}return t}_getRingWeightOffset(e){let t=0;for(let n=0;n<e;++n)this.chart.isDatasetVisible(n)&&(t+=this._getRingWeight(n));return t}_getRingWeight(e){return Math.max((0,o.v)(this.chart.data.datasets[e].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}A.id="doughnut",A.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},A.descriptors={_scriptable:e=>"spacing"!==e,_indexable:e=>"spacing"!==e},A.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=e.legend.options;return t.labels.map(((t,o)=>{const s=e.getDatasetMeta(0).controller.getStyle(o);return{text:t,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,lineWidth:s.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(o),index:o}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(e){let t=e.label;const n=": "+e.formattedValue;return(0,o.b)(t)?(t=t.slice(),t[0]+=n):t+=n,t}}}}};class R extends x{initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(e){const t=this._cachedMeta,{dataset:n,data:s=[],_dataset:r}=t,i=this.chart._animationsDisabled;let{start:a,count:l}=(0,o.q)(t,s,i);this._drawStart=a,this._drawCount=l,(0,o.w)(t)&&(a=0,l=s.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!r._decimated,n.points=s;const c=this.resolveDatasetElementOptions(e);this.options.showLine||(c.borderWidth=0),c.segment=this.options.segment,this.updateElement(n,void 0,{animated:!i,options:c},e),this.updateElements(s,a,l,e)}updateElements(e,t,n,s){const r="reset"===s,{iScale:i,vScale:a,_stacked:l,_dataset:c}=this._cachedMeta,{sharedOptions:u,includeOptions:d}=this._getSharedOptions(t,s),h=i.axis,p=a.axis,{spanGaps:f,segment:m}=this.options,g=(0,o.x)(f)?f:Number.POSITIVE_INFINITY,v=this.chart._animationsDisabled||r||"none"===s;let y=t>0&&this.getParsed(t-1);for(let f=t;f<t+n;++f){const t=e[f],n=this.getParsed(f),b=v?t:{},_=(0,o.k)(n[p]),x=b[h]=i.getPixelForValue(n[h],f),w=b[p]=r||_?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,n,l):n[p],f);b.skip=isNaN(x)||isNaN(w)||_,b.stop=f>0&&Math.abs(n[h]-y[h])>g,m&&(b.parsed=n,b.raw=c.data[f]),d&&(b.options=u||this.resolveDataElementOptions(f,t.active?"active":s)),v||this.updateElement(t,f,b,s),y=n}}getMaxOverflow(){const e=this._cachedMeta,t=e.dataset,n=t.options&&t.options.borderWidth||0,o=e.data||[];if(!o.length)return n;const s=o[0].size(this.resolveDataElementOptions(0)),r=o[o.length-1].size(this.resolveDataElementOptions(o.length-1));return Math.max(n,s,r)/2}draw(){const e=this._cachedMeta;e.dataset.updateControlPoints(this.chart.chartArea,e.iScale.axis),super.draw()}}R.id="line",R.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},R.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class L extends x{constructor(e,t){super(e,t),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,s=n.data.labels||[],r=(0,o.o)(t._parsed[e].r,n.options.locale);return{label:s[e]||"",value:r}}parseObjectData(e,t,n,s){return o.y.bind(this)(e,t,n,s)}update(e){const t=this._cachedMeta.data;this._updateRadius(),this.updateElements(t,0,t.length,e)}getMinMax(){const e=this._cachedMeta,t={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return e.data.forEach(((e,n)=>{const o=this.getParsed(n).r;!isNaN(o)&&this.chart.getDataVisibility(n)&&(o<t.min&&(t.min=o),o>t.max&&(t.max=o))})),t}_updateRadius(){const e=this.chart,t=e.chartArea,n=e.options,o=Math.min(t.right-t.left,t.bottom-t.top),s=Math.max(o/2,0),r=(s-Math.max(n.cutoutPercentage?s/100*n.cutoutPercentage:1,0))/e.getVisibleDatasetCount();this.outerRadius=s-r*this.index,this.innerRadius=this.outerRadius-r}updateElements(e,t,n,s){const r="reset"===s,i=this.chart,a=i.options.animation,l=this._cachedMeta.rScale,c=l.xCenter,u=l.yCenter,d=l.getIndexAngle(0)-.5*o.P;let h,p=d;const f=360/this.countVisibleElements();for(h=0;h<t;++h)p+=this._computeAngle(h,s,f);for(h=t;h<t+n;h++){const t=e[h];let n=p,o=p+this._computeAngle(h,s,f),m=i.getDataVisibility(h)?l.getDistanceFromCenterForValue(this.getParsed(h).r):0;p=o,r&&(a.animateScale&&(m=0),a.animateRotate&&(n=o=d));const g={x:c,y:u,innerRadius:0,outerRadius:m,startAngle:n,endAngle:o,options:this.resolveDataElementOptions(h,t.active?"active":s)};this.updateElement(t,h,g,s)}}countVisibleElements(){const e=this._cachedMeta;let t=0;return e.data.forEach(((e,n)=>{!isNaN(this.getParsed(n).r)&&this.chart.getDataVisibility(n)&&t++})),t}_computeAngle(e,t,n){return this.chart.getDataVisibility(e)?(0,o.t)(this.resolveDataElementOptions(e,t).angle||n):0}}L.id="polarArea",L.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},L.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=e.legend.options;return t.labels.map(((t,o)=>{const s=e.getDatasetMeta(0).controller.getStyle(o);return{text:t,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,lineWidth:s.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(o),index:o}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:e=>e.chart.data.labels[e.dataIndex]+": "+e.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class D extends A{}D.id="pie",D.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class B extends x{getLabelAndValue(e){const t=this._cachedMeta.vScale,n=this.getParsed(e);return{label:t.getLabels()[e],value:""+t.getLabelForValue(n[t.axis])}}parseObjectData(e,t,n,s){return o.y.bind(this)(e,t,n,s)}update(e){const t=this._cachedMeta,n=t.dataset,o=t.data||[],s=t.iScale.getLabels();if(n.points=o,"resize"!==e){const t=this.resolveDatasetElementOptions(e);this.options.showLine||(t.borderWidth=0);const r={_loop:!0,_fullLoop:s.length===o.length,options:t};this.updateElement(n,void 0,r,e)}this.updateElements(o,0,o.length,e)}updateElements(e,t,n,o){const s=this._cachedMeta.rScale,r="reset"===o;for(let i=t;i<t+n;i++){const t=e[i],n=this.resolveDataElementOptions(i,t.active?"active":o),a=s.getPointPositionForValue(i,this.getParsed(i).r),l=r?s.xCenter:a.x,c=r?s.yCenter:a.y,u={x:l,y:c,angle:a.angle,skip:isNaN(l)||isNaN(c),options:n};this.updateElement(t,i,u,o)}}}B.id="radar",B.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},B.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class I{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}hasValue(){return(0,o.x)(this.x)&&(0,o.x)(this.y)}getProps(e,t){const n=this.$animations;if(!t||!n)return this;const o={};return e.forEach((e=>{o[e]=n[e]&&n[e].active()?n[e]._to:this[e]})),o}}I.defaults={},I.defaultRoutes=void 0;const N={values:e=>(0,o.b)(e)?e:""+e,numeric(e,t,n){if(0===e)return"0";const s=this.chart.options.locale;let r,i=e;if(n.length>1){const t=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(t<1e-4||t>1e15)&&(r="scientific"),i=function(e,t){let n=t.length>3?t[2].value-t[1].value:t[1].value-t[0].value;return Math.abs(n)>=1&&e!==Math.floor(e)&&(n=e-Math.floor(e)),n}(e,n)}const a=(0,o.z)(Math.abs(i)),l=Math.max(Math.min(-1*Math.floor(a),20),0),c={notation:r,minimumFractionDigits:l,maximumFractionDigits:l};return Object.assign(c,this.options.ticks.format),(0,o.o)(e,s,c)},logarithmic(e,t,n){if(0===e)return"0";const s=e/Math.pow(10,Math.floor((0,o.z)(e)));return 1===s||2===s||5===s?N.numeric.call(this,e,t,n):""}};var F={formatters:N};function V(e,t,n,s,r){const i=(0,o.v)(s,0),a=Math.min((0,o.v)(r,e.length),e.length);let l,c,u,d=0;for(n=Math.ceil(n),r&&(l=r-s,n=l/Math.floor(l/n)),u=i;u<0;)d++,u=Math.round(i+d*n);for(c=Math.max(i,0);c<a;c++)c===u&&(t.push(e[c]),d++,u=Math.round(i+d*n))}o.d.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(e,t)=>t.lineWidth,tickColor:(e,t)=>t.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:F.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),o.d.route("scale.ticks","color","","color"),o.d.route("scale.grid","color","","borderColor"),o.d.route("scale.grid","borderColor","","borderColor"),o.d.route("scale.title","color","","color"),o.d.describe("scale",{_fallback:!1,_scriptable:e=>!e.startsWith("before")&&!e.startsWith("after")&&"callback"!==e&&"parser"!==e,_indexable:e=>"borderDash"!==e&&"tickBorderDash"!==e}),o.d.describe("scales",{_fallback:"scale"}),o.d.describe("scale.ticks",{_scriptable:e=>"backdropPadding"!==e&&"callback"!==e,_indexable:e=>"backdropPadding"!==e});const $=(e,t,n)=>"top"===t||"left"===t?e[t]+n:e[t]-n;function z(e,t){const n=[],o=e.length/t,s=e.length;let r=0;for(;r<s;r+=o)n.push(e[Math.floor(r)]);return n}function H(e,t,n){const o=e.ticks.length,s=Math.min(t,o-1),r=e._startPixel,i=e._endPixel,a=1e-6;let l,c=e.getPixelForTick(s);if(!(n&&(l=1===o?Math.max(c-r,i-c):0===t?(e.getPixelForTick(1)-c)/2:(c-e.getPixelForTick(s-1))/2,c+=s<t?l:-l,c<r-a||c>i+a)))return c}function U(e){return e.drawTicks?e.tickLength:0}function W(e,t){if(!e.display)return 0;const n=(0,o.O)(e.font,t),s=(0,o.K)(e.padding);return((0,o.b)(e.text)?e.text.length:1)*n.lineHeight+s.height}function G(e,t,n){let s=(0,o.R)(e);return(n&&"right"!==t||!n&&"right"===t)&&(s=(e=>"left"===e?"right":"right"===e?"left":e)(s)),s}class Y extends I{constructor(e){super(),this.id=e.id,this.type=e.type,this.options=void 0,this.ctx=e.ctx,this.chart=e.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(e){this.options=e.setContext(this.getContext()),this.axis=e.axis,this._userMin=this.parse(e.min),this._userMax=this.parse(e.max),this._suggestedMin=this.parse(e.suggestedMin),this._suggestedMax=this.parse(e.suggestedMax)}parse(e,t){return e}getUserBounds(){let{_userMin:e,_userMax:t,_suggestedMin:n,_suggestedMax:s}=this;return e=(0,o.B)(e,Number.POSITIVE_INFINITY),t=(0,o.B)(t,Number.NEGATIVE_INFINITY),n=(0,o.B)(n,Number.POSITIVE_INFINITY),s=(0,o.B)(s,Number.NEGATIVE_INFINITY),{min:(0,o.B)(e,n),max:(0,o.B)(t,s),minDefined:(0,o.g)(e),maxDefined:(0,o.g)(t)}}getMinMax(e){let t,{min:n,max:s,minDefined:r,maxDefined:i}=this.getUserBounds();if(r&&i)return{min:n,max:s};const a=this.getMatchingVisibleMetas();for(let o=0,l=a.length;o<l;++o)t=a[o].controller.getMinMax(this,e),r||(n=Math.min(n,t.min)),i||(s=Math.max(s,t.max));return n=i&&n>s?s:n,s=r&&n>s?n:s,{min:(0,o.B)(n,(0,o.B)(s,n)),max:(0,o.B)(s,(0,o.B)(n,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){(0,o.C)(this.options.beforeUpdate,[this])}update(e,t,n){const{beginAtZero:s,grace:r,ticks:i}=this.options,a=i.sampleSize;this.beforeUpdate(),this.maxWidth=e,this.maxHeight=t,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=(0,o.D)(this,r,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const l=a<this.ticks.length;this._convertTicksToLabels(l?z(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),i.display&&(i.autoSkip||"auto"===i.source)&&(this.ticks=function(e,t){const n=e.options.ticks,s=n.maxTicksLimit||function(e){const t=e.options.offset,n=e._tickSize(),o=e._length/n+(t?0:1),s=e._maxLength/n;return Math.floor(Math.min(o,s))}(e),r=n.major.enabled?function(e){const t=[];let n,o;for(n=0,o=e.length;n<o;n++)e[n].major&&t.push(n);return t}(t):[],i=r.length,a=r[0],l=r[i-1],c=[];if(i>s)return function(e,t,n,o){let s,r=0,i=n[0];for(o=Math.ceil(o),s=0;s<e.length;s++)s===i&&(t.push(e[s]),r++,i=n[r*o])}(t,c,r,i/s),c;const u=function(e,t,n){const s=function(e){const t=e.length;let n,o;if(t<2)return!1;for(o=e[0],n=1;n<t;++n)if(e[n]-e[n-1]!==o)return!1;return o}(e),r=t.length/n;if(!s)return Math.max(r,1);const i=(0,o.A)(s);for(let e=0,t=i.length-1;e<t;e++){const t=i[e];if(t>r)return t}return Math.max(r,1)}(r,t,s);if(i>0){let e,n;const s=i>1?Math.round((l-a)/(i-1)):null;for(V(t,c,u,(0,o.k)(s)?0:a-s,a),e=0,n=i-1;e<n;e++)V(t,c,u,r[e],r[e+1]);return V(t,c,u,l,(0,o.k)(s)?t.length:l+s),c}return V(t,c,u),c}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let e,t,n=this.options.reverse;this.isHorizontal()?(e=this.left,t=this.right):(e=this.top,t=this.bottom,n=!n),this._startPixel=e,this._endPixel=t,this._reversePixels=n,this._length=t-e,this._alignToPixels=this.options.alignToPixels}afterUpdate(){(0,o.C)(this.options.afterUpdate,[this])}beforeSetDimensions(){(0,o.C)(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){(0,o.C)(this.options.afterSetDimensions,[this])}_callHooks(e){this.chart.notifyPlugins(e,this.getContext()),(0,o.C)(this.options[e],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){(0,o.C)(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(e){const t=this.options.ticks;let n,s,r;for(n=0,s=e.length;n<s;n++)r=e[n],r.label=(0,o.C)(t.callback,[r.value,n,e],this)}afterTickToLabelConversion(){(0,o.C)(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){(0,o.C)(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const e=this.options,t=e.ticks,n=this.ticks.length,s=t.minRotation||0,r=t.maxRotation;let i,a,l,c=s;if(!this._isVisible()||!t.display||s>=r||n<=1||!this.isHorizontal())return void(this.labelRotation=s);const u=this._getLabelSizes(),d=u.widest.width,h=u.highest.height,p=(0,o.E)(this.chart.width-d,0,this.maxWidth);i=e.offset?this.maxWidth/n:p/(n-1),d+6>i&&(i=p/(n-(e.offset?.5:1)),a=this.maxHeight-U(e.grid)-t.padding-W(e.title,this.chart.options.font),l=Math.sqrt(d*d+h*h),c=(0,o.F)(Math.min(Math.asin((0,o.E)((u.highest.height+6)/i,-1,1)),Math.asin((0,o.E)(a/l,-1,1))-Math.asin((0,o.E)(h/l,-1,1)))),c=Math.max(s,Math.min(r,c))),this.labelRotation=c}afterCalculateLabelRotation(){(0,o.C)(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){(0,o.C)(this.options.beforeFit,[this])}fit(){const e={width:0,height:0},{chart:t,options:{ticks:n,title:s,grid:r}}=this,i=this._isVisible(),a=this.isHorizontal();if(i){const i=W(s,t.options.font);if(a?(e.width=this.maxWidth,e.height=U(r)+i):(e.height=this.maxHeight,e.width=U(r)+i),n.display&&this.ticks.length){const{first:t,last:s,widest:r,highest:i}=this._getLabelSizes(),l=2*n.padding,c=(0,o.t)(this.labelRotation),u=Math.cos(c),d=Math.sin(c);if(a){const t=n.mirror?0:d*r.width+u*i.height;e.height=Math.min(this.maxHeight,e.height+t+l)}else{const t=n.mirror?0:u*r.width+d*i.height;e.width=Math.min(this.maxWidth,e.width+t+l)}this._calculatePadding(t,s,d,u)}}this._handleMargins(),a?(this.width=this._length=t.width-this._margins.left-this._margins.right,this.height=e.height):(this.width=e.width,this.height=this._length=t.height-this._margins.top-this._margins.bottom)}_calculatePadding(e,t,n,o){const{ticks:{align:s,padding:r},position:i}=this.options,a=0!==this.labelRotation,l="top"!==i&&"x"===this.axis;if(this.isHorizontal()){const i=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let u=0,d=0;a?l?(u=o*e.width,d=n*t.height):(u=n*e.height,d=o*t.width):"start"===s?d=t.width:"end"===s?u=e.width:"inner"!==s&&(u=e.width/2,d=t.width/2),this.paddingLeft=Math.max((u-i+r)*this.width/(this.width-i),0),this.paddingRight=Math.max((d-c+r)*this.width/(this.width-c),0)}else{let n=t.height/2,o=e.height/2;"start"===s?(n=0,o=e.height):"end"===s&&(n=t.height,o=0),this.paddingTop=n+r,this.paddingBottom=o+r}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){(0,o.C)(this.options.afterFit,[this])}isHorizontal(){const{axis:e,position:t}=this.options;return"top"===t||"bottom"===t||"x"===e}isFullSize(){return this.options.fullSize}_convertTicksToLabels(e){let t,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(e),t=0,n=e.length;t<n;t++)(0,o.k)(e[t].label)&&(e.splice(t,1),n--,t--);this.afterTickToLabelConversion()}_getLabelSizes(){let e=this._labelSizes;if(!e){const t=this.options.ticks.sampleSize;let n=this.ticks;t<n.length&&(n=z(n,t)),this._labelSizes=e=this._computeLabelSizes(n,n.length)}return e}_computeLabelSizes(e,t){const{ctx:n,_longestTextCache:s}=this,r=[],i=[];let a,l,c,u,d,h,p,f,m,g,v,y=0,b=0;for(a=0;a<t;++a){if(u=e[a].label,d=this._resolveTickFontOptions(a),n.font=h=d.string,p=s[h]=s[h]||{data:{},gc:[]},f=d.lineHeight,m=g=0,(0,o.k)(u)||(0,o.b)(u)){if((0,o.b)(u))for(l=0,c=u.length;l<c;++l)v=u[l],(0,o.k)(v)||(0,o.b)(v)||(m=(0,o.G)(n,p.data,p.gc,m,v),g+=f)}else m=(0,o.G)(n,p.data,p.gc,m,u),g=f;r.push(m),i.push(g),y=Math.max(m,y),b=Math.max(g,b)}!function(e,t){(0,o.Q)(e,(e=>{const n=e.gc,o=n.length/2;let s;if(o>t){for(s=0;s<o;++s)delete e.data[n[s]];n.splice(0,o)}}))}(s,t);const _=r.indexOf(y),x=i.indexOf(b),w=e=>({width:r[e]||0,height:i[e]||0});return{first:w(0),last:w(t-1),widest:w(_),highest:w(x),widths:r,heights:i}}getLabelForValue(e){return e}getPixelForValue(e,t){return NaN}getValueForPixel(e){}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getPixelForDecimal(e){this._reversePixels&&(e=1-e);const t=this._startPixel+e*this._length;return(0,o.I)(this._alignToPixels?(0,o.J)(this.chart,t,0):t)}getDecimalForPixel(e){const t=(e-this._startPixel)/this._length;return this._reversePixels?1-t:t}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:e,max:t}=this;return e<0&&t<0?t:e>0&&t>0?e:0}getContext(e){const t=this.ticks||[];if(e>=0&&e<t.length){const n=t[e];return n.$context||(n.$context=function(e,t,n){return(0,o.h)(e,{tick:n,index:t,type:"tick"})}(this.getContext(),e,n))}return this.$context||(this.$context=(n=this.chart.getContext(),this,(0,o.h)(n,{scale:this,type:"scale"})));var n}_tickSize(){const e=this.options.ticks,t=(0,o.t)(this.labelRotation),n=Math.abs(Math.cos(t)),s=Math.abs(Math.sin(t)),r=this._getLabelSizes(),i=e.autoSkipPadding||0,a=r?r.widest.width+i:0,l=r?r.highest.height+i:0;return this.isHorizontal()?l*n>a*s?a/n:l/s:l*s<a*n?l/n:a/s}_isVisible(){const e=this.options.display;return"auto"!==e?!!e:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(e){const t=this.axis,n=this.chart,s=this.options,{grid:r,position:i}=s,a=r.offset,l=this.isHorizontal(),c=this.ticks.length+(a?1:0),u=U(r),d=[],h=r.setContext(this.getContext()),p=h.drawBorder?h.borderWidth:0,f=p/2,m=function(e){return(0,o.J)(n,e,p)};let g,v,y,b,_,x,w,S,k,j,P,O;if("top"===i)g=m(this.bottom),x=this.bottom-u,S=g-f,j=m(e.top)+f,O=e.bottom;else if("bottom"===i)g=m(this.top),j=e.top,O=m(e.bottom)-f,x=g+f,S=this.top+u;else if("left"===i)g=m(this.right),_=this.right-u,w=g-f,k=m(e.left)+f,P=e.right;else if("right"===i)g=m(this.left),k=e.left,P=m(e.right)-f,_=g+f,w=this.left+u;else if("x"===t){if("center"===i)g=m((e.top+e.bottom)/2+.5);else if((0,o.i)(i)){const e=Object.keys(i)[0],t=i[e];g=m(this.chart.scales[e].getPixelForValue(t))}j=e.top,O=e.bottom,x=g+f,S=x+u}else if("y"===t){if("center"===i)g=m((e.left+e.right)/2);else if((0,o.i)(i)){const e=Object.keys(i)[0],t=i[e];g=m(this.chart.scales[e].getPixelForValue(t))}_=g-f,w=_-u,k=e.left,P=e.right}const C=(0,o.v)(s.ticks.maxTicksLimit,c),E=Math.max(1,Math.ceil(c/C));for(v=0;v<c;v+=E){const e=r.setContext(this.getContext(v)),t=e.lineWidth,s=e.color,i=e.borderDash||[],c=e.borderDashOffset,u=e.tickWidth,h=e.tickColor,p=e.tickBorderDash||[],f=e.tickBorderDashOffset;y=H(this,v,a),void 0!==y&&(b=(0,o.J)(n,y,t),l?_=w=k=P=b:x=S=j=O=b,d.push({tx1:_,ty1:x,tx2:w,ty2:S,x1:k,y1:j,x2:P,y2:O,width:t,color:s,borderDash:i,borderDashOffset:c,tickWidth:u,tickColor:h,tickBorderDash:p,tickBorderDashOffset:f}))}return this._ticksLength=c,this._borderValue=g,d}_computeLabelItems(e){const t=this.axis,n=this.options,{position:s,ticks:r}=n,i=this.isHorizontal(),a=this.ticks,{align:l,crossAlign:c,padding:u,mirror:d}=r,h=U(n.grid),p=h+u,f=d?-u:p,m=-(0,o.t)(this.labelRotation),g=[];let v,y,b,_,x,w,S,k,j,P,O,C,E="middle";if("top"===s)w=this.bottom-f,S=this._getXAxisLabelAlignment();else if("bottom"===s)w=this.top+f,S=this._getXAxisLabelAlignment();else if("left"===s){const e=this._getYAxisLabelAlignment(h);S=e.textAlign,x=e.x}else if("right"===s){const e=this._getYAxisLabelAlignment(h);S=e.textAlign,x=e.x}else if("x"===t){if("center"===s)w=(e.top+e.bottom)/2+p;else if((0,o.i)(s)){const e=Object.keys(s)[0],t=s[e];w=this.chart.scales[e].getPixelForValue(t)+p}S=this._getXAxisLabelAlignment()}else if("y"===t){if("center"===s)x=(e.left+e.right)/2-p;else if((0,o.i)(s)){const e=Object.keys(s)[0],t=s[e];x=this.chart.scales[e].getPixelForValue(t)}S=this._getYAxisLabelAlignment(h).textAlign}"y"===t&&("start"===l?E="top":"end"===l&&(E="bottom"));const T=this._getLabelSizes();for(v=0,y=a.length;v<y;++v){b=a[v],_=b.label;const e=r.setContext(this.getContext(v));k=this.getPixelForTick(v)+r.labelOffset,j=this._resolveTickFontOptions(v),P=j.lineHeight,O=(0,o.b)(_)?_.length:1;const t=O/2,n=e.color,l=e.textStrokeColor,u=e.textStrokeWidth;let h,p=S;if(i?(x=k,"inner"===S&&(p=v===y-1?this.options.reverse?"left":"right":0===v?this.options.reverse?"right":"left":"center"),C="top"===s?"near"===c||0!==m?-O*P+P/2:"center"===c?-T.highest.height/2-t*P+P:-T.highest.height+P/2:"near"===c||0!==m?P/2:"center"===c?T.highest.height/2-t*P:T.highest.height-O*P,d&&(C*=-1)):(w=k,C=(1-O)*P/2),e.showLabelBackdrop){const t=(0,o.K)(e.backdropPadding),n=T.heights[v],s=T.widths[v];let r=w+C-t.top,i=x-t.left;switch(E){case"middle":r-=n/2;break;case"bottom":r-=n}switch(S){case"center":i-=s/2;break;case"right":i-=s}h={left:i,top:r,width:s+t.width,height:n+t.height,color:e.backdropColor}}g.push({rotation:m,label:_,font:j,color:n,strokeColor:l,strokeWidth:u,textOffset:C,textAlign:p,textBaseline:E,translation:[x,w],backdrop:h})}return g}_getXAxisLabelAlignment(){const{position:e,ticks:t}=this.options;if(-(0,o.t)(this.labelRotation))return"top"===e?"left":"right";let n="center";return"start"===t.align?n="left":"end"===t.align?n="right":"inner"===t.align&&(n="inner"),n}_getYAxisLabelAlignment(e){const{position:t,ticks:{crossAlign:n,mirror:o,padding:s}}=this.options,r=e+s,i=this._getLabelSizes().widest.width;let a,l;return"left"===t?o?(l=this.right+s,"near"===n?a="left":"center"===n?(a="center",l+=i/2):(a="right",l+=i)):(l=this.right-r,"near"===n?a="right":"center"===n?(a="center",l-=i/2):(a="left",l=this.left)):"right"===t?o?(l=this.left+s,"near"===n?a="right":"center"===n?(a="center",l-=i/2):(a="left",l-=i)):(l=this.left+r,"near"===n?a="left":"center"===n?(a="center",l+=i/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const e=this.chart,t=this.options.position;return"left"===t||"right"===t?{top:0,left:this.left,bottom:e.height,right:this.right}:"top"===t||"bottom"===t?{top:this.top,left:0,bottom:this.bottom,right:e.width}:void 0}drawBackground(){const{ctx:e,options:{backgroundColor:t},left:n,top:o,width:s,height:r}=this;t&&(e.save(),e.fillStyle=t,e.fillRect(n,o,s,r),e.restore())}getLineWidthForValue(e){const t=this.options.grid;if(!this._isVisible()||!t.display)return 0;const n=this.ticks.findIndex((t=>t.value===e));return n>=0?t.setContext(this.getContext(n)).lineWidth:0}drawGrid(e){const t=this.options.grid,n=this.ctx,o=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(e));let s,r;const i=(e,t,o)=>{o.width&&o.color&&(n.save(),n.lineWidth=o.width,n.strokeStyle=o.color,n.setLineDash(o.borderDash||[]),n.lineDashOffset=o.borderDashOffset,n.beginPath(),n.moveTo(e.x,e.y),n.lineTo(t.x,t.y),n.stroke(),n.restore())};if(t.display)for(s=0,r=o.length;s<r;++s){const e=o[s];t.drawOnChartArea&&i({x:e.x1,y:e.y1},{x:e.x2,y:e.y2},e),t.drawTicks&&i({x:e.tx1,y:e.ty1},{x:e.tx2,y:e.ty2},{color:e.tickColor,width:e.tickWidth,borderDash:e.tickBorderDash,borderDashOffset:e.tickBorderDashOffset})}}drawBorder(){const{chart:e,ctx:t,options:{grid:n}}=this,s=n.setContext(this.getContext()),r=n.drawBorder?s.borderWidth:0;if(!r)return;const i=n.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let l,c,u,d;this.isHorizontal()?(l=(0,o.J)(e,this.left,r)-r/2,c=(0,o.J)(e,this.right,i)+i/2,u=d=a):(u=(0,o.J)(e,this.top,r)-r/2,d=(0,o.J)(e,this.bottom,i)+i/2,l=c=a),t.save(),t.lineWidth=s.borderWidth,t.strokeStyle=s.borderColor,t.beginPath(),t.moveTo(l,u),t.lineTo(c,d),t.stroke(),t.restore()}drawLabels(e){if(!this.options.ticks.display)return;const t=this.ctx,n=this._computeLabelArea();n&&(0,o.L)(t,n);const s=this._labelItems||(this._labelItems=this._computeLabelItems(e));let r,i;for(r=0,i=s.length;r<i;++r){const e=s[r],n=e.font,i=e.label;e.backdrop&&(t.fillStyle=e.backdrop.color,t.fillRect(e.backdrop.left,e.backdrop.top,e.backdrop.width,e.backdrop.height));let a=e.textOffset;(0,o.M)(t,i,0,a,n,e)}n&&(0,o.N)(t)}drawTitle(){const{ctx:e,options:{position:t,title:n,reverse:s}}=this;if(!n.display)return;const r=(0,o.O)(n.font),i=(0,o.K)(n.padding),a=n.align;let l=r.lineHeight/2;"bottom"===t||"center"===t||(0,o.i)(t)?(l+=i.bottom,(0,o.b)(n.text)&&(l+=r.lineHeight*(n.text.length-1))):l+=i.top;const{titleX:c,titleY:u,maxWidth:d,rotation:h}=function(e,t,n,s){const{top:r,left:i,bottom:a,right:l,chart:c}=e,{chartArea:u,scales:d}=c;let h,p,f,m=0;const g=a-r,v=l-i;if(e.isHorizontal()){if(p=(0,o.S)(s,i,l),(0,o.i)(n)){const e=Object.keys(n)[0],o=n[e];f=d[e].getPixelForValue(o)+g-t}else f="center"===n?(u.bottom+u.top)/2+g-t:$(e,n,t);h=l-i}else{if((0,o.i)(n)){const e=Object.keys(n)[0],o=n[e];p=d[e].getPixelForValue(o)-v+t}else p="center"===n?(u.left+u.right)/2-v+t:$(e,n,t);f=(0,o.S)(s,a,r),m="left"===n?-o.H:o.H}return{titleX:p,titleY:f,maxWidth:h,rotation:m}}(this,l,t,a);(0,o.M)(e,n.text,0,0,r,{color:n.color,maxWidth:d,rotation:h,textAlign:G(a,t,s),textBaseline:"middle",translation:[c,u]})}draw(e){this._isVisible()&&(this.drawBackground(),this.drawGrid(e),this.drawBorder(),this.drawTitle(),this.drawLabels(e))}_layers(){const e=this.options,t=e.ticks&&e.ticks.z||0,n=(0,o.v)(e.grid&&e.grid.z,-1);return this._isVisible()&&this.draw===Y.prototype.draw?[{z:n,draw:e=>{this.drawBackground(),this.drawGrid(e),this.drawTitle()}},{z:n+1,draw:()=>{this.drawBorder()}},{z:t,draw:e=>{this.drawLabels(e)}}]:[{z:t,draw:e=>{this.draw(e)}}]}getMatchingVisibleMetas(e){const t=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",o=[];let s,r;for(s=0,r=t.length;s<r;++s){const r=t[s];r[n]!==this.id||e&&r.type!==e||o.push(r)}return o}_resolveTickFontOptions(e){const t=this.options.ticks.setContext(this.getContext(e));return(0,o.O)(t.font)}_maxDigits(){const e=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/e}}class q{constructor(e,t,n){this.type=e,this.scope=t,this.override=n,this.items=Object.create(null)}isForType(e){return Object.prototype.isPrototypeOf.call(this.type.prototype,e.prototype)}register(e){const t=Object.getPrototypeOf(e);let n;(function(e){return"id"in e&&"defaults"in e})(t)&&(n=this.register(t));const s=this.items,r=e.id,i=this.scope+"."+r;if(!r)throw new Error("class does not have id: "+e);return r in s||(s[r]=e,function(e,t,n){const s=(0,o.V)(Object.create(null),[n?o.d.get(n):{},o.d.get(t),e.defaults]);o.d.set(t,s),e.defaultRoutes&&function(e,t){Object.keys(t).forEach((n=>{const s=n.split("."),r=s.pop(),i=[e].concat(s).join("."),a=t[n].split("."),l=a.pop(),c=a.join(".");o.d.route(i,r,c,l)}))}(t,e.defaultRoutes),e.descriptors&&o.d.describe(t,e.descriptors)}(e,i,n),this.override&&o.d.override(e.id,e.overrides)),i}get(e){return this.items[e]}unregister(e){const t=this.items,n=e.id,s=this.scope;n in t&&delete t[n],s&&n in o.d[s]&&(delete o.d[s][n],this.override&&delete o.U[n])}}var K=new class{constructor(){this.controllers=new q(x,"datasets",!0),this.elements=new q(I,"elements"),this.plugins=new q(Object,"plugins"),this.scales=new q(Y,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...e){this._each("register",e)}remove(...e){this._each("unregister",e)}addControllers(...e){this._each("register",e,this.controllers)}addElements(...e){this._each("register",e,this.elements)}addPlugins(...e){this._each("register",e,this.plugins)}addScales(...e){this._each("register",e,this.scales)}getController(e){return this._get(e,this.controllers,"controller")}getElement(e){return this._get(e,this.elements,"element")}getPlugin(e){return this._get(e,this.plugins,"plugin")}getScale(e){return this._get(e,this.scales,"scale")}removeControllers(...e){this._each("unregister",e,this.controllers)}removeElements(...e){this._each("unregister",e,this.elements)}removePlugins(...e){this._each("unregister",e,this.plugins)}removeScales(...e){this._each("unregister",e,this.scales)}_each(e,t,n){[...t].forEach((t=>{const s=n||this._getRegistryForType(t);n||s.isForType(t)||s===this.plugins&&t.id?this._exec(e,s,t):(0,o.Q)(t,(t=>{const o=n||this._getRegistryForType(t);this._exec(e,o,t)}))}))}_exec(e,t,n){const s=(0,o.W)(e);(0,o.C)(n["before"+s],[],n),t[e](n),(0,o.C)(n["after"+s],[],n)}_getRegistryForType(e){for(let t=0;t<this._typedRegistries.length;t++){const n=this._typedRegistries[t];if(n.isForType(e))return n}return this.plugins}_get(e,t,n){const o=t.get(e);if(void 0===o)throw new Error('"'+e+'" is not a registered '+n+".");return o}};class J extends x{update(e){const t=this._cachedMeta,{data:n=[]}=t,s=this.chart._animationsDisabled;let{start:r,count:i}=(0,o.q)(t,n,s);if(this._drawStart=r,this._drawCount=i,(0,o.w)(t)&&(r=0,i=n.length),this.options.showLine){const{dataset:o,_dataset:r}=t;o._chart=this.chart,o._datasetIndex=this.index,o._decimated=!!r._decimated,o.points=n;const i=this.resolveDatasetElementOptions(e);i.segment=this.options.segment,this.updateElement(o,void 0,{animated:!s,options:i},e)}this.updateElements(n,r,i,e)}addElements(){const{showLine:e}=this.options;!this.datasetElementType&&e&&(this.datasetElementType=K.getElement("line")),super.addElements()}updateElements(e,t,n,s){const r="reset"===s,{iScale:i,vScale:a,_stacked:l,_dataset:c}=this._cachedMeta,u=this.resolveDataElementOptions(t,s),d=this.getSharedOptions(u),h=this.includeOptions(s,d),p=i.axis,f=a.axis,{spanGaps:m,segment:g}=this.options,v=(0,o.x)(m)?m:Number.POSITIVE_INFINITY,y=this.chart._animationsDisabled||r||"none"===s;let b=t>0&&this.getParsed(t-1);for(let u=t;u<t+n;++u){const t=e[u],n=this.getParsed(u),m=y?t:{},_=(0,o.k)(n[f]),x=m[p]=i.getPixelForValue(n[p],u),w=m[f]=r||_?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,n,l):n[f],u);m.skip=isNaN(x)||isNaN(w)||_,m.stop=u>0&&Math.abs(n[p]-b[p])>v,g&&(m.parsed=n,m.raw=c.data[u]),h&&(m.options=d||this.resolveDataElementOptions(u,t.active?"active":s)),y||this.updateElement(t,u,m,s),b=n}this.updateSharedOptions(d,s,u)}getMaxOverflow(){const e=this._cachedMeta,t=e.data||[];if(!this.options.showLine){let e=0;for(let n=t.length-1;n>=0;--n)e=Math.max(e,t[n].size(this.resolveDataElementOptions(n))/2);return e>0&&e}const n=e.dataset,o=n.options&&n.options.borderWidth||0;if(!t.length)return o;const s=t[0].size(this.resolveDataElementOptions(0)),r=t[t.length-1].size(this.resolveDataElementOptions(t.length-1));return Math.max(o,s,r)/2}}J.id="scatter",J.defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1},J.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:e=>"("+e.label+", "+e.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var X=Object.freeze({__proto__:null,BarController:T,BubbleController:M,DoughnutController:A,LineController:R,PolarAreaController:L,PieController:D,RadarController:B,ScatterController:J});function Q(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Z{constructor(e){this.options=e||{}}init(e){}formats(){return Q()}parse(e,t){return Q()}format(e,t){return Q()}add(e,t,n){return Q()}diff(e,t,n){return Q()}startOf(e,t,n){return Q()}endOf(e,t){return Q()}}Z.override=function(e){Object.assign(Z.prototype,e)};var ee={_date:Z};function te(e,t,n,s){const{controller:r,data:i,_sorted:a}=e,l=r._cachedMeta.iScale;if(l&&t===l.axis&&"r"!==t&&a&&i.length){const e=l._reversePixels?o.Y:o.Z;if(!s)return e(i,t,n);if(r._sharedOptions){const o=i[0],s="function"==typeof o.getRange&&o.getRange(t);if(s){const o=e(i,t,n-s),r=e(i,t,n+s);return{lo:o.lo,hi:r.hi}}}}return{lo:0,hi:i.length-1}}function ne(e,t,n,o,s){const r=e.getSortedVisibleDatasetMetas(),i=n[t];for(let e=0,n=r.length;e<n;++e){const{index:n,data:a}=r[e],{lo:l,hi:c}=te(r[e],t,i,s);for(let e=l;e<=c;++e){const t=a[e];t.skip||o(t,n,e)}}}function oe(e,t,n,s,r){const i=[];return r||e.isPointInArea(t)?(ne(e,n,t,(function(n,a,l){(r||(0,o.$)(n,e.chartArea,0))&&n.inRange(t.x,t.y,s)&&i.push({element:n,datasetIndex:a,index:l})}),!0),i):i}function se(e,t,n,s,r,i){return i||e.isPointInArea(t)?"r"!==n||s?function(e,t,n,o,s,r){let i=[];const a=function(e){const t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,o){const s=t?Math.abs(e.x-o.x):0,r=n?Math.abs(e.y-o.y):0;return Math.sqrt(Math.pow(s,2)+Math.pow(r,2))}}(n);let l=Number.POSITIVE_INFINITY;return ne(e,n,t,(function(n,c,u){const d=n.inRange(t.x,t.y,s);if(o&&!d)return;const h=n.getCenterPoint(s);if(!r&&!e.isPointInArea(h)&&!d)return;const p=a(t,h);p<l?(i=[{element:n,datasetIndex:c,index:u}],l=p):p===l&&i.push({element:n,datasetIndex:c,index:u})})),i}(e,t,n,s,r,i):function(e,t,n,s){let r=[];return ne(e,n,t,(function(e,n,i){const{startAngle:a,endAngle:l}=e.getProps(["startAngle","endAngle"],s),{angle:c}=(0,o.a0)(e,{x:t.x,y:t.y});(0,o.p)(c,a,l)&&r.push({element:e,datasetIndex:n,index:i})})),r}(e,t,n,r):[]}function re(e,t,n,o,s){const r=[],i="x"===n?"inXRange":"inYRange";let a=!1;return ne(e,n,t,((e,o,l)=>{e[i](t[n],s)&&(r.push({element:e,datasetIndex:o,index:l}),a=a||e.inRange(t.x,t.y,s))})),o&&!a?[]:r}var ie={evaluateInteractionItems:ne,modes:{index(e,t,n,s){const r=(0,o.X)(t,e),i=n.axis||"x",a=n.includeInvisible||!1,l=n.intersect?oe(e,r,i,s,a):se(e,r,i,!1,s,a),c=[];return l.length?(e.getSortedVisibleDatasetMetas().forEach((e=>{const t=l[0].index,n=e.data[t];n&&!n.skip&&c.push({element:n,datasetIndex:e.index,index:t})})),c):[]},dataset(e,t,n,s){const r=(0,o.X)(t,e),i=n.axis||"xy",a=n.includeInvisible||!1;let l=n.intersect?oe(e,r,i,s,a):se(e,r,i,!1,s,a);if(l.length>0){const t=l[0].datasetIndex,n=e.getDatasetMeta(t).data;l=[];for(let e=0;e<n.length;++e)l.push({element:n[e],datasetIndex:t,index:e})}return l},point:(e,t,n,s)=>oe(e,(0,o.X)(t,e),n.axis||"xy",s,n.includeInvisible||!1),nearest(e,t,n,s){const r=(0,o.X)(t,e),i=n.axis||"xy",a=n.includeInvisible||!1;return se(e,r,i,n.intersect,s,a)},x:(e,t,n,s)=>re(e,(0,o.X)(t,e),"x",n.intersect,s),y:(e,t,n,s)=>re(e,(0,o.X)(t,e),"y",n.intersect,s)}};const ae=["left","top","right","bottom"];function le(e,t){return e.filter((e=>e.pos===t))}function ce(e,t){return e.filter((e=>-1===ae.indexOf(e.pos)&&e.box.axis===t))}function ue(e,t){return e.sort(((e,n)=>{const o=t?n:e,s=t?e:n;return o.weight===s.weight?o.index-s.index:o.weight-s.weight}))}function de(e,t,n,o){return Math.max(e[n],t[n])+Math.max(e[o],t[o])}function he(e,t){e.top=Math.max(e.top,t.top),e.left=Math.max(e.left,t.left),e.bottom=Math.max(e.bottom,t.bottom),e.right=Math.max(e.right,t.right)}function pe(e,t,n,s){const{pos:r,box:i}=n,a=e.maxPadding;if(!(0,o.i)(r)){n.size&&(e[r]-=n.size);const t=s[n.stack]||{size:0,count:1};t.size=Math.max(t.size,n.horizontal?i.height:i.width),n.size=t.size/t.count,e[r]+=n.size}i.getPadding&&he(a,i.getPadding());const l=Math.max(0,t.outerWidth-de(a,e,"left","right")),c=Math.max(0,t.outerHeight-de(a,e,"top","bottom")),u=l!==e.w,d=c!==e.h;return e.w=l,e.h=c,n.horizontal?{same:u,other:d}:{same:d,other:u}}function fe(e,t){const n=t.maxPadding;return function(e){const o={left:0,top:0,right:0,bottom:0};return e.forEach((e=>{o[e]=Math.max(t[e],n[e])})),o}(e?["left","right"]:["top","bottom"])}function me(e,t,n,o){const s=[];let r,i,a,l,c,u;for(r=0,i=e.length,c=0;r<i;++r){a=e[r],l=a.box,l.update(a.width||t.w,a.height||t.h,fe(a.horizontal,t));const{same:i,other:d}=pe(t,n,a,o);c|=i&&s.length,u=u||d,l.fullSize||s.push(a)}return c&&me(s,t,n,o)||u}function ge(e,t,n,o,s){e.top=n,e.left=t,e.right=t+o,e.bottom=n+s,e.width=o,e.height=s}function ve(e,t,n,s){const r=n.padding;let{x:i,y:a}=t;for(const l of e){const e=l.box,c=s[l.stack]||{count:1,placed:0,weight:1},u=l.stackWeight/c.weight||1;if(l.horizontal){const s=t.w*u,i=c.size||e.height;(0,o.j)(c.start)&&(a=c.start),e.fullSize?ge(e,r.left,a,n.outerWidth-r.right-r.left,i):ge(e,t.left+c.placed,a,s,i),c.start=a,c.placed+=s,a=e.bottom}else{const s=t.h*u,a=c.size||e.width;(0,o.j)(c.start)&&(i=c.start),e.fullSize?ge(e,i,r.top,a,n.outerHeight-r.bottom-r.top):ge(e,i,t.top+c.placed,a,s),c.start=i,c.placed+=s,i=e.right}}t.x=i,t.y=a}o.d.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var ye={addBox(e,t){e.boxes||(e.boxes=[]),t.fullSize=t.fullSize||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw(e){t.draw(e)}}]},e.boxes.push(t)},removeBox(e,t){const n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure(e,t,n){t.fullSize=n.fullSize,t.position=n.position,t.weight=n.weight},update(e,t,n,s){if(!e)return;const r=(0,o.K)(e.options.layout.padding),i=Math.max(t-r.width,0),a=Math.max(n-r.height,0),l=function(e){const t=function(e){const t=[];let n,o,s,r,i,a;for(n=0,o=(e||[]).length;n<o;++n)s=e[n],({position:r,options:{stack:i,stackWeight:a=1}}=s),t.push({index:n,box:s,pos:r,horizontal:s.isHorizontal(),weight:s.weight,stack:i&&r+i,stackWeight:a});return t}(e),n=ue(t.filter((e=>e.box.fullSize)),!0),o=ue(le(t,"left"),!0),s=ue(le(t,"right")),r=ue(le(t,"top"),!0),i=ue(le(t,"bottom")),a=ce(t,"x"),l=ce(t,"y");return{fullSize:n,leftAndTop:o.concat(r),rightAndBottom:s.concat(l).concat(i).concat(a),chartArea:le(t,"chartArea"),vertical:o.concat(s).concat(l),horizontal:r.concat(i).concat(a)}}(e.boxes),c=l.vertical,u=l.horizontal;(0,o.Q)(e.boxes,(e=>{"function"==typeof e.beforeLayout&&e.beforeLayout()}));const d=c.reduce(((e,t)=>t.box.options&&!1===t.box.options.display?e:e+1),0)||1,h=Object.freeze({outerWidth:t,outerHeight:n,padding:r,availableWidth:i,availableHeight:a,vBoxMaxWidth:i/2/d,hBoxMaxHeight:a/2}),p=Object.assign({},r);he(p,(0,o.K)(s));const f=Object.assign({maxPadding:p,w:i,h:a,x:r.left,y:r.top},r),m=function(e,t){const n=function(e){const t={};for(const n of e){const{stack:e,pos:o,stackWeight:s}=n;if(!e||!ae.includes(o))continue;const r=t[e]||(t[e]={count:0,placed:0,weight:0,size:0});r.count++,r.weight+=s}return t}(e),{vBoxMaxWidth:o,hBoxMaxHeight:s}=t;let r,i,a;for(r=0,i=e.length;r<i;++r){a=e[r];const{fullSize:i}=a.box,l=n[a.stack],c=l&&a.stackWeight/l.weight;a.horizontal?(a.width=c?c*o:i&&t.availableWidth,a.height=s):(a.width=o,a.height=c?c*s:i&&t.availableHeight)}return n}(c.concat(u),h);me(l.fullSize,f,h,m),me(c,f,h,m),me(u,f,h,m)&&me(c,f,h,m),function(e){const t=e.maxPadding;function n(n){const o=Math.max(t[n]-e[n],0);return e[n]+=o,o}e.y+=n("top"),e.x+=n("left"),n("right"),n("bottom")}(f),ve(l.leftAndTop,f,h,m),f.x+=f.w,f.y+=f.h,ve(l.rightAndBottom,f,h,m),e.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},(0,o.Q)(l.chartArea,(t=>{const n=t.box;Object.assign(n,e.chartArea),n.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class be{acquireContext(e,t){}releaseContext(e){return!1}addEventListener(e,t,n){}removeEventListener(e,t,n){}getDevicePixelRatio(){return 1}getMaximumSize(e,t,n,o){return t=Math.max(0,t||e.width),n=n||e.height,{width:t,height:Math.max(0,o?Math.floor(t/o):n)}}isAttached(e){return!0}updateConfig(e){}}class _e extends be{acquireContext(e){return e&&e.getContext&&e.getContext("2d")||null}updateConfig(e){e.options.animation=!1}}const xe={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},we=e=>null===e||""===e,Se=!!o.a5&&{passive:!0};function ke(e,t,n){e.canvas.removeEventListener(t,n,Se)}function je(e,t){for(const n of e)if(n===t||n.contains(t))return!0}function Pe(e,t,n){const o=e.canvas,s=new MutationObserver((e=>{let t=!1;for(const n of e)t=t||je(n.addedNodes,o),t=t&&!je(n.removedNodes,o);t&&n()}));return s.observe(document,{childList:!0,subtree:!0}),s}function Oe(e,t,n){const o=e.canvas,s=new MutationObserver((e=>{let t=!1;for(const n of e)t=t||je(n.removedNodes,o),t=t&&!je(n.addedNodes,o);t&&n()}));return s.observe(document,{childList:!0,subtree:!0}),s}const Ce=new Map;let Ee=0;function Te(){const e=window.devicePixelRatio;e!==Ee&&(Ee=e,Ce.forEach(((t,n)=>{n.currentDevicePixelRatio!==e&&t()})))}function Me(e,t,n){const s=e.canvas,r=s&&(0,o.a2)(s);if(!r)return;const i=(0,o.a4)(((e,t)=>{const o=r.clientWidth;n(e,t),o<r.clientWidth&&n()}),window),a=new ResizeObserver((e=>{const t=e[0],n=t.contentRect.width,o=t.contentRect.height;0===n&&0===o||i(n,o)}));return a.observe(r),function(e,t){Ce.size||window.addEventListener("resize",Te),Ce.set(e,t)}(e,i),a}function Ae(e,t,n){n&&n.disconnect(),"resize"===t&&function(e){Ce.delete(e),Ce.size||window.removeEventListener("resize",Te)}(e)}function Re(e,t,n){const s=e.canvas,r=(0,o.a4)((t=>{null!==e.ctx&&n(function(e,t){const n=xe[e.type]||e.type,{x:s,y:r}=(0,o.X)(e,t);return{type:n,chart:t,native:e,x:void 0!==s?s:null,y:void 0!==r?r:null}}(t,e))}),e,(e=>{const t=e[0];return[t,t.offsetX,t.offsetY]}));return function(e,t,n){e.addEventListener(t,n,Se)}(s,t,r),r}class Le extends be{acquireContext(e,t){const n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(function(e,t){const n=e.style,s=e.getAttribute("height"),r=e.getAttribute("width");if(e.$chartjs={initial:{height:s,width:r,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",we(r)){const t=(0,o.a3)(e,"width");void 0!==t&&(e.width=t)}if(we(s))if(""===e.style.height)e.height=e.width/(t||2);else{const t=(0,o.a3)(e,"height");void 0!==t&&(e.height=t)}}(e,t),n):null}releaseContext(e){const t=e.canvas;if(!t.$chartjs)return!1;const n=t.$chartjs.initial;["height","width"].forEach((e=>{const s=n[e];(0,o.k)(s)?t.removeAttribute(e):t.setAttribute(e,s)}));const s=n.style||{};return Object.keys(s).forEach((e=>{t.style[e]=s[e]})),t.width=t.width,delete t.$chartjs,!0}addEventListener(e,t,n){this.removeEventListener(e,t);const o=e.$proxies||(e.$proxies={}),s={attach:Pe,detach:Oe,resize:Me}[t]||Re;o[t]=s(e,t,n)}removeEventListener(e,t){const n=e.$proxies||(e.$proxies={}),o=n[t];o&&(({attach:Ae,detach:Ae,resize:Ae}[t]||ke)(e,t,o),n[t]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(e,t,n,s){return(0,o.a1)(e,t,n,s)}isAttached(e){const t=(0,o.a2)(e);return!(!t||!t.isConnected)}}function De(e){return!(0,o.a6)()||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas?_e:Le}class Be{constructor(){this._init=[]}notify(e,t,n,o){"beforeInit"===t&&(this._init=this._createDescriptors(e,!0),this._notify(this._init,e,"install"));const s=o?this._descriptors(e).filter(o):this._descriptors(e),r=this._notify(s,e,t,n);return"afterDestroy"===t&&(this._notify(s,e,"stop"),this._notify(this._init,e,"uninstall")),r}_notify(e,t,n,s){s=s||{};for(const r of e){const e=r.plugin,i=e[n],a=[t,s,r.options];if(!1===(0,o.C)(i,a,e)&&s.cancelable)return!1}return!0}invalidate(){(0,o.k)(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(e){if(this._cache)return this._cache;const t=this._cache=this._createDescriptors(e);return this._notifyStateChanges(e),t}_createDescriptors(e,t){const n=e&&e.config,s=(0,o.v)(n.options&&n.options.plugins,{}),r=function(e){const t={},n=[],o=Object.keys(K.plugins.items);for(let e=0;e<o.length;e++)n.push(K.getPlugin(o[e]));const s=e.plugins||[];for(let e=0;e<s.length;e++){const o=s[e];-1===n.indexOf(o)&&(n.push(o),t[o.id]=!0)}return{plugins:n,localIds:t}}(n);return!1!==s||t?function(e,{plugins:t,localIds:n},o,s){const r=[],i=e.getContext();for(const a of t){const t=a.id,l=Ie(o[t],s);null!==l&&r.push({plugin:a,options:Ne(e.config,{plugin:a,local:n[t]},l,i)})}return r}(e,r,s,t):[]}_notifyStateChanges(e){const t=this._oldCache||[],n=this._cache,o=(e,t)=>e.filter((e=>!t.some((t=>e.plugin.id===t.plugin.id))));this._notify(o(t,n),e,"stop"),this._notify(o(n,t),e,"start")}}function Ie(e,t){return t||!1!==e?!0===e?{}:e:null}function Ne(e,{plugin:t,local:n},o,s){const r=e.pluginScopeKeys(t),i=e.getOptionScopes(o,r);return n&&t.defaults&&i.push(t.defaults),e.createResolver(i,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Fe(e,t){const n=o.d.datasets[e]||{};return((t.datasets||{})[e]||{}).indexAxis||t.indexAxis||n.indexAxis||"x"}function Ve(e,t){return"x"===e||"y"===e?e:t.axis||("top"===(n=t.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||e.charAt(0).toLowerCase();var n}function $e(e){const t=e.options||(e.options={});t.plugins=(0,o.v)(t.plugins,{}),t.scales=function(e,t){const n=o.U[e.type]||{scales:{}},s=t.scales||{},r=Fe(e.type,t),i=Object.create(null),a=Object.create(null);return Object.keys(s).forEach((e=>{const t=s[e];if(!(0,o.i)(t))return console.error(`Invalid scale configuration for scale: ${e}`);if(t._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const l=Ve(e,t),c=function(e,t){return e===t?"_index_":"_value_"}(l,r),u=n.scales||{};i[l]=i[l]||e,a[e]=(0,o.ac)(Object.create(null),[{axis:l},t,u[l],u[c]])})),e.data.datasets.forEach((n=>{const r=n.type||e.type,l=n.indexAxis||Fe(r,t),c=(o.U[r]||{}).scales||{};Object.keys(c).forEach((e=>{const t=function(e,t){let n=e;return"_index_"===e?n=t:"_value_"===e&&(n="x"===t?"y":"x"),n}(e,l),r=n[t+"AxisID"]||i[t]||t;a[r]=a[r]||Object.create(null),(0,o.ac)(a[r],[{axis:t},s[r],c[e]])}))})),Object.keys(a).forEach((e=>{const t=a[e];(0,o.ac)(t,[o.d.scales[t.type],o.d.scale])})),a}(e,t)}function ze(e){return(e=e||{}).datasets=e.datasets||[],e.labels=e.labels||[],e}const He=new Map,Ue=new Set;function We(e,t){let n=He.get(e);return n||(n=t(),He.set(e,n),Ue.add(n)),n}const Ge=(e,t,n)=>{const s=(0,o.f)(t,n);void 0!==s&&e.add(s)};class Ye{constructor(e){this._config=function(e){return(e=e||{}).data=ze(e.data),$e(e),e}(e),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(e){this._config.type=e}get data(){return this._config.data}set data(e){this._config.data=ze(e)}get options(){return this._config.options}set options(e){this._config.options=e}get plugins(){return this._config.plugins}update(){const e=this._config;this.clearCache(),$e(e)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(e){return We(e,(()=>[[`datasets.${e}`,""]]))}datasetAnimationScopeKeys(e,t){return We(`${e}.transition.${t}`,(()=>[[`datasets.${e}.transitions.${t}`,`transitions.${t}`],[`datasets.${e}`,""]]))}datasetElementScopeKeys(e,t){return We(`${e}-${t}`,(()=>[[`datasets.${e}.elements.${t}`,`datasets.${e}`,`elements.${t}`,""]]))}pluginScopeKeys(e){const t=e.id;return We(`${this.type}-plugin-${t}`,(()=>[[`plugins.${t}`,...e.additionalOptionScopes||[]]]))}_cachedScopes(e,t){const n=this._scopeCache;let o=n.get(e);return o&&!t||(o=new Map,n.set(e,o)),o}getOptionScopes(e,t,n){const{options:s,type:r}=this,i=this._cachedScopes(e,n),a=i.get(t);if(a)return a;const l=new Set;t.forEach((t=>{e&&(l.add(e),t.forEach((t=>Ge(l,e,t)))),t.forEach((e=>Ge(l,s,e))),t.forEach((e=>Ge(l,o.U[r]||{},e))),t.forEach((e=>Ge(l,o.d,e))),t.forEach((e=>Ge(l,o.a7,e)))}));const c=Array.from(l);return 0===c.length&&c.push(Object.create(null)),Ue.has(t)&&i.set(t,c),c}chartOptionScopes(){const{options:e,type:t}=this;return[e,o.U[t]||{},o.d.datasets[t]||{},{type:t},o.d,o.a7]}resolveNamedOptions(e,t,n,s=[""]){const r={$shared:!0},{resolver:i,subPrefixes:a}=qe(this._resolverCache,e,s);let l=i;if(function(e,t){const{isScriptable:n,isIndexable:s}=(0,o.ab)(e);for(const r of t){const t=n(r),i=s(r),a=(i||t)&&e[r];if(t&&((0,o.a8)(a)||Ke(a))||i&&(0,o.b)(a))return!0}return!1}(i,t)){r.$shared=!1,n=(0,o.a8)(n)?n():n;const t=this.createResolver(e,n,a);l=(0,o.a9)(i,n,t)}for(const e of t)r[e]=l[e];return r}createResolver(e,t,n=[""],s){const{resolver:r}=qe(this._resolverCache,e,n);return(0,o.i)(t)?(0,o.a9)(r,t,void 0,s):r}}function qe(e,t,n){let s=e.get(t);s||(s=new Map,e.set(t,s));const r=n.join();let i=s.get(r);return i||(i={resolver:(0,o.aa)(t,n),subPrefixes:n.filter((e=>!e.toLowerCase().includes("hover")))},s.set(r,i)),i}const Ke=e=>(0,o.i)(e)&&Object.getOwnPropertyNames(e).reduce(((t,n)=>t||(0,o.a8)(e[n])),!1),Je=["top","bottom","left","right","chartArea"];function Xe(e,t){return"top"===e||"bottom"===e||-1===Je.indexOf(e)&&"x"===t}function Qe(e,t){return function(n,o){return n[e]===o[e]?n[t]-o[t]:n[e]-o[e]}}function Ze(e){const t=e.chart,n=t.options.animation;t.notifyPlugins("afterRender"),(0,o.C)(n&&n.onComplete,[e],t)}function et(e){const t=e.chart,n=t.options.animation;(0,o.C)(n&&n.onProgress,[e],t)}function tt(e){return(0,o.a6)()&&"string"==typeof e?e=document.getElementById(e):e&&e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas),e}const nt={},ot=e=>{const t=tt(e);return Object.values(nt).filter((e=>e.canvas===t)).pop()};function st(e,t,n){const o=Object.keys(e);for(const s of o){const o=+s;if(o>=t){const r=e[s];delete e[s],(n>0||o>t)&&(e[o+n]=r)}}}class rt{constructor(e,t){const n=this.config=new Ye(t),r=tt(e),i=ot(r);if(i)throw new Error("Canvas is already in use. Chart with ID '"+i.id+"' must be destroyed before the canvas with ID '"+i.canvas.id+"' can be reused.");const a=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||De(r)),this.platform.updateConfig(n);const l=this.platform.acquireContext(r,a.aspectRatio),c=l&&l.canvas,u=c&&c.height,d=c&&c.width;this.id=(0,o.ad)(),this.ctx=l,this.canvas=c,this.width=d,this.height=u,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Be,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=(0,o.ae)((e=>this.update(e)),a.resizeDelay||0),this._dataChanges=[],nt[this.id]=this,l&&c?(s.listen(this,"complete",Ze),s.listen(this,"progress",et),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:e,maintainAspectRatio:t},width:n,height:s,_aspectRatio:r}=this;return(0,o.k)(e)?t&&r?r:s?n/s:null:e}get data(){return this.config.data}set data(e){this.config.data=e}get options(){return this._options}set options(e){this.config.options=e}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():(0,o.af)(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return(0,o.ag)(this.canvas,this.ctx),this}stop(){return s.stop(this),this}resize(e,t){s.running(this)?this._resizeBeforeDraw={width:e,height:t}:this._resize(e,t)}_resize(e,t){const n=this.options,s=this.canvas,r=n.maintainAspectRatio&&this.aspectRatio,i=this.platform.getMaximumSize(s,e,t,r),a=n.devicePixelRatio||this.platform.getDevicePixelRatio(),l=this.width?"resize":"attach";this.width=i.width,this.height=i.height,this._aspectRatio=this.aspectRatio,(0,o.af)(this,a,!0)&&(this.notifyPlugins("resize",{size:i}),(0,o.C)(n.onResize,[this,i],this),this.attached&&this._doResize(l)&&this.render())}ensureScalesHaveIDs(){const e=this.options.scales||{};(0,o.Q)(e,((e,t)=>{e.id=t}))}buildOrUpdateScales(){const e=this.options,t=e.scales,n=this.scales,s=Object.keys(n).reduce(((e,t)=>(e[t]=!1,e)),{});let r=[];t&&(r=r.concat(Object.keys(t).map((e=>{const n=t[e],o=Ve(e,n),s="r"===o,r="x"===o;return{options:n,dposition:s?"chartArea":r?"bottom":"left",dtype:s?"radialLinear":r?"category":"linear"}})))),(0,o.Q)(r,(t=>{const r=t.options,i=r.id,a=Ve(i,r),l=(0,o.v)(r.type,t.dtype);void 0!==r.position&&Xe(r.position,a)===Xe(t.dposition)||(r.position=t.dposition),s[i]=!0;let c=null;i in n&&n[i].type===l?c=n[i]:(c=new(K.getScale(l))({id:i,type:l,ctx:this.ctx,chart:this}),n[c.id]=c),c.init(r,e)})),(0,o.Q)(s,((e,t)=>{e||delete n[t]})),(0,o.Q)(n,(e=>{ye.configure(this,e,e.options),ye.addBox(this,e)}))}_updateMetasets(){const e=this._metasets,t=this.data.datasets.length,n=e.length;if(e.sort(((e,t)=>e.index-t.index)),n>t){for(let e=t;e<n;++e)this._destroyDatasetMeta(e);e.splice(t,n-t)}this._sortedMetasets=e.slice(0).sort(Qe("order","index"))}_removeUnreferencedMetasets(){const{_metasets:e,data:{datasets:t}}=this;e.length>t.length&&delete this._stacks,e.forEach(((e,n)=>{0===t.filter((t=>t===e._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const e=[],t=this.data.datasets;let n,s;for(this._removeUnreferencedMetasets(),n=0,s=t.length;n<s;n++){const s=t[n];let r=this.getDatasetMeta(n);const i=s.type||this.config.type;if(r.type&&r.type!==i&&(this._destroyDatasetMeta(n),r=this.getDatasetMeta(n)),r.type=i,r.indexAxis=s.indexAxis||Fe(i,this.options),r.order=s.order||0,r.index=n,r.label=""+s.label,r.visible=this.isDatasetVisible(n),r.controller)r.controller.updateIndex(n),r.controller.linkScales();else{const t=K.getController(i),{datasetElementType:s,dataElementType:a}=o.d.datasets[i];Object.assign(t.prototype,{dataElementType:K.getElement(a),datasetElementType:s&&K.getElement(s)}),r.controller=new t(this,n),e.push(r.controller)}}return this._updateMetasets(),e}_resetElements(){(0,o.Q)(this.data.datasets,((e,t)=>{this.getDatasetMeta(t).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(e){const t=this.config;t.update();const n=this._options=t.createResolver(t.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:e,cancelable:!0}))return;const r=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let i=0;for(let e=0,t=this.data.datasets.length;e<t;e++){const{controller:t}=this.getDatasetMeta(e),n=!s&&-1===r.indexOf(t);t.buildOrUpdateElements(n),i=Math.max(+t.getMaxOverflow(),i)}i=this._minPadding=n.layout.autoPadding?i:0,this._updateLayout(i),s||(0,o.Q)(r,(e=>{e.reset()})),this._updateDatasets(e),this.notifyPlugins("afterUpdate",{mode:e}),this._layers.sort(Qe("z","_idx"));const{_active:a,_lastEvent:l}=this;l?this._eventHandler(l,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){(0,o.Q)(this.scales,(e=>{ye.removeBox(this,e)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const e=this.options,t=new Set(Object.keys(this._listeners)),n=new Set(e.events);(0,o.ah)(t,n)&&!!this._responsiveListeners===e.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:e}=this,t=this._getUniformDataChanges()||[];for(const{method:n,start:o,count:s}of t)st(e,o,"_removeElements"===n?-s:s)}_getUniformDataChanges(){const e=this._dataChanges;if(!e||!e.length)return;this._dataChanges=[];const t=this.data.datasets.length,n=t=>new Set(e.filter((e=>e[0]===t)).map(((e,t)=>t+","+e.splice(1).join(",")))),s=n(0);for(let e=1;e<t;e++)if(!(0,o.ah)(s,n(e)))return;return Array.from(s).map((e=>e.split(","))).map((e=>({method:e[1],start:+e[2],count:+e[3]})))}_updateLayout(e){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;ye.update(this,this.width,this.height,e);const t=this.chartArea,n=t.width<=0||t.height<=0;this._layers=[],(0,o.Q)(this.boxes,(e=>{n&&"chartArea"===e.position||(e.configure&&e.configure(),this._layers.push(...e._layers()))}),this),this._layers.forEach(((e,t)=>{e._idx=t})),this.notifyPlugins("afterLayout")}_updateDatasets(e){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:e,cancelable:!0})){for(let e=0,t=this.data.datasets.length;e<t;++e)this.getDatasetMeta(e).controller.configure();for(let t=0,n=this.data.datasets.length;t<n;++t)this._updateDataset(t,(0,o.a8)(e)?e({datasetIndex:t}):e);this.notifyPlugins("afterDatasetsUpdate",{mode:e})}}_updateDataset(e,t){const n=this.getDatasetMeta(e),o={meta:n,index:e,mode:t,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",o)&&(n.controller._update(t),o.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",o))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(s.has(this)?this.attached&&!s.running(this)&&s.start(this):(this.draw(),Ze({chart:this})))}draw(){let e;if(this._resizeBeforeDraw){const{width:e,height:t}=this._resizeBeforeDraw;this._resize(e,t),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const t=this._layers;for(e=0;e<t.length&&t[e].z<=0;++e)t[e].draw(this.chartArea);for(this._drawDatasets();e<t.length;++e)t[e].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(e){const t=this._sortedMetasets,n=[];let o,s;for(o=0,s=t.length;o<s;++o){const s=t[o];e&&!s.visible||n.push(s)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const e=this.getSortedVisibleDatasetMetas();for(let t=e.length-1;t>=0;--t)this._drawDataset(e[t]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(e){const t=this.ctx,n=e._clip,s=!n.disabled,r=this.chartArea,i={meta:e,index:e.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",i)&&(s&&(0,o.L)(t,{left:!1===n.left?0:r.left-n.left,right:!1===n.right?this.width:r.right+n.right,top:!1===n.top?0:r.top-n.top,bottom:!1===n.bottom?this.height:r.bottom+n.bottom}),e.controller.draw(),s&&(0,o.N)(t),i.cancelable=!1,this.notifyPlugins("afterDatasetDraw",i))}isPointInArea(e){return(0,o.$)(e,this.chartArea,this._minPadding)}getElementsAtEventForMode(e,t,n,o){const s=ie.modes[t];return"function"==typeof s?s(this,e,n,o):[]}getDatasetMeta(e){const t=this.data.datasets[e],n=this._metasets;let o=n.filter((e=>e&&e._dataset===t)).pop();return o||(o={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:t&&t.order||0,index:e,_dataset:t,_parsed:[],_sorted:!1},n.push(o)),o}getContext(){return this.$context||(this.$context=(0,o.h)(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(e){const t=this.data.datasets[e];if(!t)return!1;const n=this.getDatasetMeta(e);return"boolean"==typeof n.hidden?!n.hidden:!t.hidden}setDatasetVisibility(e,t){this.getDatasetMeta(e).hidden=!t}toggleDataVisibility(e){this._hiddenIndices[e]=!this._hiddenIndices[e]}getDataVisibility(e){return!this._hiddenIndices[e]}_updateVisibility(e,t,n){const s=n?"show":"hide",r=this.getDatasetMeta(e),i=r.controller._resolveAnimations(void 0,s);(0,o.j)(t)?(r.data[t].hidden=!n,this.update()):(this.setDatasetVisibility(e,n),i.update(r,{visible:n}),this.update((t=>t.datasetIndex===e?s:void 0)))}hide(e,t){this._updateVisibility(e,t,!1)}show(e,t){this._updateVisibility(e,t,!0)}_destroyDatasetMeta(e){const t=this._metasets[e];t&&t.controller&&t.controller._destroy(),delete this._metasets[e]}_stop(){let e,t;for(this.stop(),s.remove(this),e=0,t=this.data.datasets.length;e<t;++e)this._destroyDatasetMeta(e)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:e,ctx:t}=this;this._stop(),this.config.clearCache(),e&&(this.unbindEvents(),(0,o.ag)(e,t),this.platform.releaseContext(t),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete nt[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...e){return this.canvas.toDataURL(...e)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const e=this._listeners,t=this.platform,n=(n,o)=>{t.addEventListener(this,n,o),e[n]=o},s=(e,t,n)=>{e.offsetX=t,e.offsetY=n,this._eventHandler(e)};(0,o.Q)(this.options.events,(e=>n(e,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const e=this._responsiveListeners,t=this.platform,n=(n,o)=>{t.addEventListener(this,n,o),e[n]=o},o=(n,o)=>{e[n]&&(t.removeEventListener(this,n,o),delete e[n])},s=(e,t)=>{this.canvas&&this.resize(e,t)};let r;const i=()=>{o("attach",i),this.attached=!0,this.resize(),n("resize",s),n("detach",r)};r=()=>{this.attached=!1,o("resize",s),this._stop(),this._resize(0,0),n("attach",i)},t.isAttached(this.canvas)?i():r()}unbindEvents(){(0,o.Q)(this._listeners,((e,t)=>{this.platform.removeEventListener(this,t,e)})),this._listeners={},(0,o.Q)(this._responsiveListeners,((e,t)=>{this.platform.removeEventListener(this,t,e)})),this._responsiveListeners=void 0}updateHoverStyle(e,t,n){const o=n?"set":"remove";let s,r,i,a;for("dataset"===t&&(s=this.getDatasetMeta(e[0].datasetIndex),s.controller["_"+o+"DatasetHoverStyle"]()),i=0,a=e.length;i<a;++i){r=e[i];const t=r&&this.getDatasetMeta(r.datasetIndex).controller;t&&t[o+"HoverStyle"](r.element,r.datasetIndex,r.index)}}getActiveElements(){return this._active||[]}setActiveElements(e){const t=this._active||[],n=e.map((({datasetIndex:e,index:t})=>{const n=this.getDatasetMeta(e);if(!n)throw new Error("No dataset found at index "+e);return{datasetIndex:e,element:n.data[t],index:t}}));!(0,o.ai)(n,t)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,t))}notifyPlugins(e,t,n){return this._plugins.notify(this,e,t,n)}_updateHoverStyles(e,t,n){const o=this.options.hover,s=(e,t)=>e.filter((e=>!t.some((t=>e.datasetIndex===t.datasetIndex&&e.index===t.index)))),r=s(t,e),i=n?e:s(e,t);r.length&&this.updateHoverStyle(r,o.mode,!1),i.length&&o.mode&&this.updateHoverStyle(i,o.mode,!0)}_eventHandler(e,t){const n={event:e,replay:t,cancelable:!0,inChartArea:this.isPointInArea(e)},o=t=>(t.options.events||this.options.events).includes(e.native.type);if(!1===this.notifyPlugins("beforeEvent",n,o))return;const s=this._handleEvent(e,t,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,o),(s||n.changed)&&this.render(),this}_handleEvent(e,t,n){const{_active:s=[],options:r}=this,i=t,a=this._getActiveElements(e,s,n,i),l=(0,o.aj)(e),c=function(e,t,n,o){return n&&"mouseout"!==e.type?o?t:e:null}(e,this._lastEvent,n,l);n&&(this._lastEvent=null,(0,o.C)(r.onHover,[e,a,this],this),l&&(0,o.C)(r.onClick,[e,a,this],this));const u=!(0,o.ai)(a,s);return(u||t)&&(this._active=a,this._updateHoverStyles(a,s,t)),this._lastEvent=c,u}_getActiveElements(e,t,n,o){if("mouseout"===e.type)return[];if(!n)return t;const s=this.options.hover;return this.getElementsAtEventForMode(e,s.mode,s,o)}}const it=()=>(0,o.Q)(rt.instances,(e=>e._plugins.invalidate())),at=!0;function lt(e,t,n){const{startAngle:s,pixelMargin:r,x:i,y:a,outerRadius:l,innerRadius:c}=t;let u=r/l;e.beginPath(),e.arc(i,a,l,s-u,n+u),c>r?(u=r/c,e.arc(i,a,c,n+u,s-u,!0)):e.arc(i,a,r,n+o.H,s-o.H),e.closePath(),e.clip()}function ct(e,t,n,o){return{x:n+e*Math.cos(t),y:o+e*Math.sin(t)}}function ut(e,t,n,s,r,i){const{x:a,y:l,startAngle:c,pixelMargin:u,innerRadius:d}=t,h=Math.max(t.outerRadius+s+n-u,0),p=d>0?d+s+n+u:0;let f=0;const m=r-c;if(s){const e=((d>0?d-s:0)+(h>0?h-s:0))/2;f=(m-(0!==e?m*e/(e+s):m))/2}const g=(m-Math.max(.001,m*h-n/o.P)/h)/2,v=c+g+f,y=r-g-f,{outerStart:b,outerEnd:_,innerStart:x,innerEnd:w}=function(e,t,n,s){const r=(i=e.options.borderRadius,(0,o.al)(i,["outerStart","outerEnd","innerStart","innerEnd"]));var i;const a=(n-t)/2,l=Math.min(a,s*t/2),c=e=>{const t=(n-Math.min(a,e))*s/2;return(0,o.E)(e,0,Math.min(a,t))};return{outerStart:c(r.outerStart),outerEnd:c(r.outerEnd),innerStart:(0,o.E)(r.innerStart,0,l),innerEnd:(0,o.E)(r.innerEnd,0,l)}}(t,p,h,y-v),S=h-b,k=h-_,j=v+b/S,P=y-_/k,O=p+x,C=p+w,E=v+x/O,T=y-w/C;if(e.beginPath(),i){if(e.arc(a,l,h,j,P),_>0){const t=ct(k,P,a,l);e.arc(t.x,t.y,_,P,y+o.H)}const t=ct(C,y,a,l);if(e.lineTo(t.x,t.y),w>0){const t=ct(C,T,a,l);e.arc(t.x,t.y,w,y+o.H,T+Math.PI)}if(e.arc(a,l,p,y-w/p,v+x/p,!0),x>0){const t=ct(O,E,a,l);e.arc(t.x,t.y,x,E+Math.PI,v-o.H)}const n=ct(S,v,a,l);if(e.lineTo(n.x,n.y),b>0){const t=ct(S,j,a,l);e.arc(t.x,t.y,b,v-o.H,j)}}else{e.moveTo(a,l);const t=Math.cos(j)*h+a,n=Math.sin(j)*h+l;e.lineTo(t,n);const o=Math.cos(P)*h+a,s=Math.sin(P)*h+l;e.lineTo(o,s)}e.closePath()}Object.defineProperties(rt,{defaults:{enumerable:at,value:o.d},instances:{enumerable:at,value:nt},overrides:{enumerable:at,value:o.U},registry:{enumerable:at,value:K},version:{enumerable:at,value:"3.9.1"},getChart:{enumerable:at,value:ot},register:{enumerable:at,value:(...e)=>{K.add(...e),it()}},unregister:{enumerable:at,value:(...e)=>{K.remove(...e),it()}}});class dt extends I{constructor(e){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,e&&Object.assign(this,e)}inRange(e,t,n){const s=this.getProps(["x","y"],n),{angle:r,distance:i}=(0,o.a0)(s,{x:e,y:t}),{startAngle:a,endAngle:l,innerRadius:c,outerRadius:u,circumference:d}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),h=this.options.spacing/2,p=(0,o.v)(d,l-a)>=o.T||(0,o.p)(r,a,l),f=(0,o.ak)(i,c+h,u+h);return p&&f}getCenterPoint(e){const{x:t,y:n,startAngle:o,endAngle:s,innerRadius:r,outerRadius:i}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],e),{offset:a,spacing:l}=this.options,c=(o+s)/2,u=(r+i+l+a)/2;return{x:t+Math.cos(c)*u,y:n+Math.sin(c)*u}}tooltipPosition(e){return this.getCenterPoint(e)}draw(e){const{options:t,circumference:n}=this,s=(t.offset||0)/2,r=(t.spacing||0)/2,i=t.circular;if(this.pixelMargin="inner"===t.borderAlign?.33:0,this.fullCircles=n>o.T?Math.floor(n/o.T):0,0===n||this.innerRadius<0||this.outerRadius<0)return;e.save();let a=0;if(s){a=s/2;const t=(this.startAngle+this.endAngle)/2;e.translate(Math.cos(t)*a,Math.sin(t)*a),this.circumference>=o.P&&(a=s)}e.fillStyle=t.backgroundColor,e.strokeStyle=t.borderColor;const l=function(e,t,n,s,r){const{fullCircles:i,startAngle:a,circumference:l}=t;let c=t.endAngle;if(i){ut(e,t,n,s,a+o.T,r);for(let t=0;t<i;++t)e.fill();isNaN(l)||(c=a+l%o.T,l%o.T==0&&(c+=o.T))}return ut(e,t,n,s,c,r),e.fill(),c}(e,this,a,r,i);(function(e,t,n,s,r,i){const{options:a}=t,{borderWidth:l,borderJoinStyle:c}=a,u="inner"===a.borderAlign;l&&(u?(e.lineWidth=2*l,e.lineJoin=c||"round"):(e.lineWidth=l,e.lineJoin=c||"bevel"),t.fullCircles&&function(e,t,n){const{x:s,y:r,startAngle:i,pixelMargin:a,fullCircles:l}=t,c=Math.max(t.outerRadius-a,0),u=t.innerRadius+a;let d;for(n&&lt(e,t,i+o.T),e.beginPath(),e.arc(s,r,u,i+o.T,i,!0),d=0;d<l;++d)e.stroke();for(e.beginPath(),e.arc(s,r,c,i,i+o.T),d=0;d<l;++d)e.stroke()}(e,t,u),u&&lt(e,t,r),ut(e,t,n,s,r,i),e.stroke())})(e,this,a,r,l,i),e.restore()}}function ht(e,t,n=t){e.lineCap=(0,o.v)(n.borderCapStyle,t.borderCapStyle),e.setLineDash((0,o.v)(n.borderDash,t.borderDash)),e.lineDashOffset=(0,o.v)(n.borderDashOffset,t.borderDashOffset),e.lineJoin=(0,o.v)(n.borderJoinStyle,t.borderJoinStyle),e.lineWidth=(0,o.v)(n.borderWidth,t.borderWidth),e.strokeStyle=(0,o.v)(n.borderColor,t.borderColor)}function pt(e,t,n){e.lineTo(n.x,n.y)}function ft(e,t,n={}){const o=e.length,{start:s=0,end:r=o-1}=n,{start:i,end:a}=t,l=Math.max(s,i),c=Math.min(r,a),u=s<i&&r<i||s>a&&r>a;return{count:o,start:l,loop:t.loop,ilen:c<l&&!u?o+c-l:c-l}}function mt(e,t,n,s){const{points:r,options:i}=t,{count:a,start:l,loop:c,ilen:u}=ft(r,n,s),d=function(e){return e.stepped?o.as:e.tension||"monotone"===e.cubicInterpolationMode?o.at:pt}(i);let h,p,f,{move:m=!0,reverse:g}=s||{};for(h=0;h<=u;++h)p=r[(l+(g?u-h:h))%a],p.skip||(m?(e.moveTo(p.x,p.y),m=!1):d(e,f,p,g,i.stepped),f=p);return c&&(p=r[(l+(g?u:0))%a],d(e,f,p,g,i.stepped)),!!c}function gt(e,t,n,o){const s=t.points,{count:r,start:i,ilen:a}=ft(s,n,o),{move:l=!0,reverse:c}=o||{};let u,d,h,p,f,m,g=0,v=0;const y=e=>(i+(c?a-e:e))%r,b=()=>{p!==f&&(e.lineTo(g,f),e.lineTo(g,p),e.lineTo(g,m))};for(l&&(d=s[y(0)],e.moveTo(d.x,d.y)),u=0;u<=a;++u){if(d=s[y(u)],d.skip)continue;const t=d.x,n=d.y,o=0|t;o===h?(n<p?p=n:n>f&&(f=n),g=(v*g+t)/++v):(b(),e.lineTo(t,n),h=o,v=0,p=f=n),m=n}b()}function vt(e){const t=e.options,n=t.borderDash&&t.borderDash.length;return e._decimated||e._loop||t.tension||"monotone"===t.cubicInterpolationMode||t.stepped||n?mt:gt}dt.id="arc",dt.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0},dt.defaultRoutes={backgroundColor:"backgroundColor"};const yt="function"==typeof Path2D;class bt extends I{constructor(e){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,e&&Object.assign(this,e)}updateControlPoints(e,t){const n=this.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!this._pointsUpdated){const s=n.spanGaps?this._loop:this._fullLoop;(0,o.am)(this._points,n,e,s,t),this._pointsUpdated=!0}}set points(e){this._points=e,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=(0,o.an)(this,this.options.segment))}first(){const e=this.segments,t=this.points;return e.length&&t[e[0].start]}last(){const e=this.segments,t=this.points,n=e.length;return n&&t[e[n-1].end]}interpolate(e,t){const n=this.options,s=e[t],r=this.points,i=(0,o.ao)(this,{property:t,start:s,end:s});if(!i.length)return;const a=[],l=function(e){return e.stepped?o.ap:e.tension||"monotone"===e.cubicInterpolationMode?o.aq:o.ar}(n);let c,u;for(c=0,u=i.length;c<u;++c){const{start:o,end:u}=i[c],d=r[o],h=r[u];if(d===h){a.push(d);continue}const p=l(d,h,Math.abs((s-d[t])/(h[t]-d[t])),n.stepped);p[t]=e[t],a.push(p)}return 1===a.length?a[0]:a}pathSegment(e,t,n){return vt(this)(e,this,t,n)}path(e,t,n){const o=this.segments,s=vt(this);let r=this._loop;t=t||0,n=n||this.points.length-t;for(const i of o)r&=s(e,this,i,{start:t,end:t+n-1});return!!r}draw(e,t,n,o){const s=this.options||{};(this.points||[]).length&&s.borderWidth&&(e.save(),function(e,t,n,o){yt&&!t.options.segment?function(e,t,n,o){let s=t._path;s||(s=t._path=new Path2D,t.path(s,n,o)&&s.closePath()),ht(e,t.options),e.stroke(s)}(e,t,n,o):function(e,t,n,o){const{segments:s,options:r}=t,i=vt(t);for(const a of s)ht(e,r,a.style),e.beginPath(),i(e,t,a,{start:n,end:n+o-1})&&e.closePath(),e.stroke()}(e,t,n,o)}(e,this,n,o),e.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function _t(e,t,n,o){const s=e.options,{[n]:r}=e.getProps([n],o);return Math.abs(t-r)<s.radius+s.hitRadius}bt.id="line",bt.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},bt.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},bt.descriptors={_scriptable:!0,_indexable:e=>"borderDash"!==e&&"fill"!==e};class xt extends I{constructor(e){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,e&&Object.assign(this,e)}inRange(e,t,n){const o=this.options,{x:s,y:r}=this.getProps(["x","y"],n);return Math.pow(e-s,2)+Math.pow(t-r,2)<Math.pow(o.hitRadius+o.radius,2)}inXRange(e,t){return _t(this,e,"x",t)}inYRange(e,t){return _t(this,e,"y",t)}getCenterPoint(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}size(e){let t=(e=e||this.options||{}).radius||0;return t=Math.max(t,t&&e.hoverRadius||0),2*(t+(t&&e.borderWidth||0))}draw(e,t){const n=this.options;this.skip||n.radius<.1||!(0,o.$)(this,t,this.size(n)/2)||(e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.fillStyle=n.backgroundColor,(0,o.au)(e,n,this.x,this.y))}getRange(){const e=this.options||{};return e.radius+e.hitRadius}}function wt(e,t){const{x:n,y:o,base:s,width:r,height:i}=e.getProps(["x","y","base","width","height"],t);let a,l,c,u,d;return e.horizontal?(d=i/2,a=Math.min(n,s),l=Math.max(n,s),c=o-d,u=o+d):(d=r/2,a=n-d,l=n+d,c=Math.min(o,s),u=Math.max(o,s)),{left:a,top:c,right:l,bottom:u}}function St(e,t,n,s){return e?0:(0,o.E)(t,n,s)}function kt(e,t,n,s){const r=null===t,i=null===n,a=e&&!(r&&i)&&wt(e,s);return a&&(r||(0,o.ak)(t,a.left,a.right))&&(i||(0,o.ak)(n,a.top,a.bottom))}function jt(e,t){e.rect(t.x,t.y,t.w,t.h)}function Pt(e,t,n={}){const o=e.x!==n.x?-t:0,s=e.y!==n.y?-t:0,r=(e.x+e.w!==n.x+n.w?t:0)-o,i=(e.y+e.h!==n.y+n.h?t:0)-s;return{x:e.x+o,y:e.y+s,w:e.w+r,h:e.h+i,radius:e.radius}}xt.id="point",xt.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},xt.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Ot extends I{constructor(e){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,e&&Object.assign(this,e)}draw(e){const{inflateAmount:t,options:{borderColor:n,backgroundColor:s}}=this,{inner:r,outer:i}=function(e){const t=wt(e),n=t.right-t.left,s=t.bottom-t.top,r=function(e,t,n){const s=e.options.borderWidth,r=e.borderSkipped,i=(0,o.aw)(s);return{t:St(r.top,i.top,0,n),r:St(r.right,i.right,0,t),b:St(r.bottom,i.bottom,0,n),l:St(r.left,i.left,0,t)}}(e,n/2,s/2),i=function(e,t,n){const{enableBorderRadius:s}=e.getProps(["enableBorderRadius"]),r=e.options.borderRadius,i=(0,o.ax)(r),a=Math.min(t,n),l=e.borderSkipped,c=s||(0,o.i)(r);return{topLeft:St(!c||l.top||l.left,i.topLeft,0,a),topRight:St(!c||l.top||l.right,i.topRight,0,a),bottomLeft:St(!c||l.bottom||l.left,i.bottomLeft,0,a),bottomRight:St(!c||l.bottom||l.right,i.bottomRight,0,a)}}(e,n/2,s/2);return{outer:{x:t.left,y:t.top,w:n,h:s,radius:i},inner:{x:t.left+r.l,y:t.top+r.t,w:n-r.l-r.r,h:s-r.t-r.b,radius:{topLeft:Math.max(0,i.topLeft-Math.max(r.t,r.l)),topRight:Math.max(0,i.topRight-Math.max(r.t,r.r)),bottomLeft:Math.max(0,i.bottomLeft-Math.max(r.b,r.l)),bottomRight:Math.max(0,i.bottomRight-Math.max(r.b,r.r))}}}}(this),a=(l=i.radius).topLeft||l.topRight||l.bottomLeft||l.bottomRight?o.av:jt;var l;e.save(),i.w===r.w&&i.h===r.h||(e.beginPath(),a(e,Pt(i,t,r)),e.clip(),a(e,Pt(r,-t,i)),e.fillStyle=n,e.fill("evenodd")),e.beginPath(),a(e,Pt(r,t)),e.fillStyle=s,e.fill(),e.restore()}inRange(e,t,n){return kt(this,e,t,n)}inXRange(e,t){return kt(this,e,null,t)}inYRange(e,t){return kt(this,null,e,t)}getCenterPoint(e){const{x:t,y:n,base:o,horizontal:s}=this.getProps(["x","y","base","horizontal"],e);return{x:s?(t+o)/2:t,y:s?n:(n+o)/2}}getRange(e){return"x"===e?this.width/2:this.height/2}}Ot.id="bar",Ot.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Ot.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Ct=Object.freeze({__proto__:null,ArcElement:dt,LineElement:bt,PointElement:xt,BarElement:Ot});function Et(e){if(e._decimated){const t=e._data;delete e._decimated,delete e._data,Object.defineProperty(e,"data",{value:t})}}function Tt(e){e.data.datasets.forEach((e=>{Et(e)}))}var Mt={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(e,t,n)=>{if(!n.enabled)return void Tt(e);const s=e.width;e.data.datasets.forEach(((t,r)=>{const{_data:i,indexAxis:a}=t,l=e.getDatasetMeta(r),c=i||t.data;if("y"===(0,o.a)([a,e.options.indexAxis]))return;if(!l.controller.supportsDecimation)return;const u=e.scales[l.xAxisID];if("linear"!==u.type&&"time"!==u.type)return;if(e.options.parsing)return;let d,{start:h,count:p}=function(e,t){const n=t.length;let s,r=0;const{iScale:i}=e,{min:a,max:l,minDefined:c,maxDefined:u}=i.getUserBounds();return c&&(r=(0,o.E)((0,o.Z)(t,i.axis,a).lo,0,n-1)),s=u?(0,o.E)((0,o.Z)(t,i.axis,l).hi+1,r,n)-r:n-r,{start:r,count:s}}(l,c);if(p<=(n.threshold||4*s))Et(t);else{switch((0,o.k)(i)&&(t._data=c,delete t.data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(e){this._data=e}})),n.algorithm){case"lttb":d=function(e,t,n,o,s){const r=s.samples||o;if(r>=n)return e.slice(t,t+n);const i=[],a=(n-2)/(r-2);let l=0;const c=t+n-1;let u,d,h,p,f,m=t;for(i[l++]=e[m],u=0;u<r-2;u++){let o,s=0,r=0;const c=Math.floor((u+1)*a)+1+t,g=Math.min(Math.floor((u+2)*a)+1,n)+t,v=g-c;for(o=c;o<g;o++)s+=e[o].x,r+=e[o].y;s/=v,r/=v;const y=Math.floor(u*a)+1+t,b=Math.min(Math.floor((u+1)*a)+1,n)+t,{x:_,y:x}=e[m];for(h=p=-1,o=y;o<b;o++)p=.5*Math.abs((_-s)*(e[o].y-x)-(_-e[o].x)*(r-x)),p>h&&(h=p,d=e[o],f=o);i[l++]=d,m=f}return i[l++]=e[c],i}(c,h,p,s,n);break;case"min-max":d=function(e,t,n,s){let r,i,a,l,c,u,d,h,p,f,m=0,g=0;const v=[],y=t+n-1,b=e[t].x,_=e[y].x-b;for(r=t;r<t+n;++r){i=e[r],a=(i.x-b)/_*s,l=i.y;const t=0|a;if(t===c)l<p?(p=l,u=r):l>f&&(f=l,d=r),m=(g*m+i.x)/++g;else{const n=r-1;if(!(0,o.k)(u)&&!(0,o.k)(d)){const t=Math.min(u,d),o=Math.max(u,d);t!==h&&t!==n&&v.push({...e[t],x:m}),o!==h&&o!==n&&v.push({...e[o],x:m})}r>0&&n!==h&&v.push(e[n]),v.push(i),c=t,g=0,p=f=l,u=d=h=r}}return v}(c,h,p,s);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}t._decimated=d}}))},destroy(e){Tt(e)}};function At(e,t,n,s){if(s)return;let r=t[e],i=n[e];return"angle"===e&&(r=(0,o.az)(r),i=(0,o.az)(i)),{property:e,start:r,end:i}}function Rt(e,t,n){for(;t>e;t--){const e=n[t];if(!isNaN(e.x)&&!isNaN(e.y))break}return t}function Lt(e,t,n,o){return e&&t?o(e[n],t[n]):e?e[n]:t?t[n]:0}function Dt(e,t){let n=[],s=!1;return(0,o.b)(e)?(s=!0,n=e):n=function(e,t){const{x:n=null,y:o=null}=e||{},s=t.points,r=[];return t.segments.forEach((({start:e,end:t})=>{t=Rt(e,t,s);const i=s[e],a=s[t];null!==o?(r.push({x:i.x,y:o}),r.push({x:a.x,y:o})):null!==n&&(r.push({x:n,y:i.y}),r.push({x:n,y:a.y}))})),r}(e,t),n.length?new bt({points:n,options:{tension:0},_loop:s,_fullLoop:s}):null}function Bt(e){return e&&!1!==e.fill}function It(e,t,n){let s=e[t].fill;const r=[t];let i;if(!n)return s;for(;!1!==s&&-1===r.indexOf(s);){if(!(0,o.g)(s))return s;if(i=e[s],!i)return!1;if(i.visible)return s;r.push(s),s=i.fill}return!1}function Nt(e,t,n){const s=function(e){const t=e.options,n=t.fill;let s=(0,o.v)(n&&n.target,n);return void 0===s&&(s=!!t.backgroundColor),!1!==s&&null!==s&&(!0===s?"origin":s)}(e);if((0,o.i)(s))return!isNaN(s.value)&&s;let r=parseFloat(s);return(0,o.g)(r)&&Math.floor(r)===r?function(e,t,n,o){return"-"!==e&&"+"!==e||(n=t+n),!(n===t||n<0||n>=o)&&n}(s[0],t,r,n):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}function Ft(e,t,n){const o=[];for(let s=0;s<n.length;s++){const r=n[s],{first:i,last:a,point:l}=Vt(r,t,"x");if(!(!l||i&&a))if(i)o.unshift(l);else if(e.push(l),!a)break}e.push(...o)}function Vt(e,t,n){const s=e.interpolate(t,n);if(!s)return{};const r=s[n],i=e.segments,a=e.points;let l=!1,c=!1;for(let e=0;e<i.length;e++){const t=i[e],s=a[t.start][n],u=a[t.end][n];if((0,o.ak)(r,s,u)){l=r===s,c=r===u;break}}return{first:l,last:c,point:s}}class $t{constructor(e){this.x=e.x,this.y=e.y,this.radius=e.radius}pathSegment(e,t,n){const{x:s,y:r,radius:i}=this;return t=t||{start:0,end:o.T},e.arc(s,r,i,t.end,t.start,!0),!n.bounds}interpolate(e){const{x:t,y:n,radius:o}=this,s=e.angle;return{x:t+Math.cos(s)*o,y:n+Math.sin(s)*o,angle:s}}}function zt(e,t,n){const s=function(e){const{chart:t,fill:n,line:s}=e;if((0,o.g)(n))return function(e,t){const n=e.getDatasetMeta(t);return n&&e.isDatasetVisible(t)?n.dataset:null}(t,n);if("stack"===n)return function(e){const{scale:t,index:n,line:o}=e,s=[],r=o.segments,i=o.points,a=function(e,t){const n=[],o=e.getMatchingVisibleMetas("line");for(let e=0;e<o.length;e++){const s=o[e];if(s.index===t)break;s.hidden||n.unshift(s.dataset)}return n}(t,n);a.push(Dt({x:null,y:t.bottom},o));for(let e=0;e<r.length;e++){const t=r[e];for(let e=t.start;e<=t.end;e++)Ft(s,i[e],a)}return new bt({points:s,options:{}})}(e);if("shape"===n)return!0;const r=function(e){return(e.scale||{}).getPointPositionForValue?function(e){const{scale:t,fill:n}=e,s=t.options,r=t.getLabels().length,i=s.reverse?t.max:t.min,a=function(e,t,n){let s;return s="start"===e?n:"end"===e?t.options.reverse?t.min:t.max:(0,o.i)(e)?e.value:t.getBaseValue(),s}(n,t,i),l=[];if(s.grid.circular){const e=t.getPointPositionForValue(0,i);return new $t({x:e.x,y:e.y,radius:t.getDistanceFromCenterForValue(a)})}for(let e=0;e<r;++e)l.push(t.getPointPositionForValue(e,a));return l}(e):function(e){const{scale:t={},fill:n}=e,s=function(e,t){let n=null;return"start"===e?n=t.bottom:"end"===e?n=t.top:(0,o.i)(e)?n=t.getPixelForValue(e.value):t.getBasePixel&&(n=t.getBasePixel()),n}(n,t);if((0,o.g)(s)){const e=t.isHorizontal();return{x:e?s:null,y:e?null:s}}return null}(e)}(e);return r instanceof $t?r:Dt(r,s)}(t),{line:r,scale:i,axis:a}=t,l=r.options,c=l.fill,u=l.backgroundColor,{above:d=u,below:h=u}=c||{};s&&r.points.length&&((0,o.L)(e,n),function(e,t){const{line:n,target:o,above:s,below:r,area:i,scale:a}=t,l=n._loop?"angle":t.axis;e.save(),"x"===l&&r!==s&&(Ht(e,o,i.top),Ut(e,{line:n,target:o,color:s,scale:a,property:l}),e.restore(),e.save(),Ht(e,o,i.bottom)),Ut(e,{line:n,target:o,color:r,scale:a,property:l}),e.restore()}(e,{line:r,target:s,above:d,below:h,area:n,scale:i,axis:a}),(0,o.N)(e))}function Ht(e,t,n){const{segments:o,points:s}=t;let r=!0,i=!1;e.beginPath();for(const a of o){const{start:o,end:l}=a,c=s[o],u=s[Rt(o,l,s)];r?(e.moveTo(c.x,c.y),r=!1):(e.lineTo(c.x,n),e.lineTo(c.x,c.y)),i=!!t.pathSegment(e,a,{move:i}),i?e.closePath():e.lineTo(u.x,n)}e.lineTo(t.first().x,n),e.closePath(),e.clip()}function Ut(e,t){const{line:n,target:s,property:r,color:i,scale:a}=t,l=function(e,t,n){const s=e.segments,r=e.points,i=t.points,a=[];for(const e of s){let{start:s,end:l}=e;l=Rt(s,l,r);const c=At(n,r[s],r[l],e.loop);if(!t.segments){a.push({source:e,target:c,start:r[s],end:r[l]});continue}const u=(0,o.ao)(t,c);for(const t of u){const s=At(n,i[t.start],i[t.end],t.loop),l=(0,o.ay)(e,r,s);for(const e of l)a.push({source:e,target:t,start:{[n]:Lt(c,s,"start",Math.max)},end:{[n]:Lt(c,s,"end",Math.min)}})}}return a}(n,s,r);for(const{source:t,target:o,start:c,end:u}of l){const{style:{backgroundColor:l=i}={}}=t,d=!0!==s;e.save(),e.fillStyle=l,Wt(e,a,d&&At(r,c,u)),e.beginPath();const h=!!n.pathSegment(e,t);let p;if(d){h?e.closePath():Gt(e,s,u,r);const t=!!s.pathSegment(e,o,{move:h,reverse:!0});p=h&&t,p||Gt(e,s,c,r)}e.closePath(),e.fill(p?"evenodd":"nonzero"),e.restore()}}function Wt(e,t,n){const{top:o,bottom:s}=t.chart.chartArea,{property:r,start:i,end:a}=n||{};"x"===r&&(e.beginPath(),e.rect(i,o,a-i,s-o),e.clip())}function Gt(e,t,n,o){const s=t.interpolate(n,o);s&&e.lineTo(s.x,s.y)}var Yt={id:"filler",afterDatasetsUpdate(e,t,n){const o=(e.data.datasets||[]).length,s=[];let r,i,a,l;for(i=0;i<o;++i)r=e.getDatasetMeta(i),a=r.dataset,l=null,a&&a.options&&a instanceof bt&&(l={visible:e.isDatasetVisible(i),index:i,fill:Nt(a,i,o),chart:e,axis:r.controller.options.indexAxis,scale:r.vScale,line:a}),r.$filler=l,s.push(l);for(i=0;i<o;++i)l=s[i],l&&!1!==l.fill&&(l.fill=It(s,i,n.propagate))},beforeDraw(e,t,n){const o="beforeDraw"===n.drawTime,s=e.getSortedVisibleDatasetMetas(),r=e.chartArea;for(let t=s.length-1;t>=0;--t){const n=s[t].$filler;n&&(n.line.updateControlPoints(r,n.axis),o&&n.fill&&zt(e.ctx,n,r))}},beforeDatasetsDraw(e,t,n){if("beforeDatasetsDraw"!==n.drawTime)return;const o=e.getSortedVisibleDatasetMetas();for(let t=o.length-1;t>=0;--t){const n=o[t].$filler;Bt(n)&&zt(e.ctx,n,e.chartArea)}},beforeDatasetDraw(e,t,n){const o=t.meta.$filler;Bt(o)&&"beforeDatasetDraw"===n.drawTime&&zt(e.ctx,o,e.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const qt=(e,t)=>{let{boxHeight:n=t,boxWidth:o=t}=e;return e.usePointStyle&&(n=Math.min(n,t),o=e.pointStyleWidth||Math.min(o,t)),{boxWidth:o,boxHeight:n,itemHeight:Math.max(t,n)}};class Kt extends I{constructor(e){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t,n){this.maxWidth=e,this.maxHeight=t,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const e=this.options.labels||{};let t=(0,o.C)(e.generateLabels,[this.chart],this)||[];e.filter&&(t=t.filter((t=>e.filter(t,this.chart.data)))),e.sort&&(t=t.sort(((t,n)=>e.sort(t,n,this.chart.data)))),this.options.reverse&&t.reverse(),this.legendItems=t}fit(){const{options:e,ctx:t}=this;if(!e.display)return void(this.width=this.height=0);const n=e.labels,s=(0,o.O)(n.font),r=s.size,i=this._computeTitleHeight(),{boxWidth:a,itemHeight:l}=qt(n,r);let c,u;t.font=s.string,this.isHorizontal()?(c=this.maxWidth,u=this._fitRows(i,r,a,l)+10):(u=this.maxHeight,c=this._fitCols(i,r,a,l)+10),this.width=Math.min(c,e.maxWidth||this.maxWidth),this.height=Math.min(u,e.maxHeight||this.maxHeight)}_fitRows(e,t,n,o){const{ctx:s,maxWidth:r,options:{labels:{padding:i}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],c=o+i;let u=e;s.textAlign="left",s.textBaseline="middle";let d=-1,h=-c;return this.legendItems.forEach(((e,p)=>{const f=n+t/2+s.measureText(e.text).width;(0===p||l[l.length-1]+f+2*i>r)&&(u+=c,l[l.length-(p>0?0:1)]=0,h+=c,d++),a[p]={left:0,top:h,row:d,width:f,height:o},l[l.length-1]+=f+i})),u}_fitCols(e,t,n,o){const{ctx:s,maxHeight:r,options:{labels:{padding:i}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],c=r-e;let u=i,d=0,h=0,p=0,f=0;return this.legendItems.forEach(((e,r)=>{const m=n+t/2+s.measureText(e.text).width;r>0&&h+o+2*i>c&&(u+=d+i,l.push({width:d,height:h}),p+=d+i,f++,d=h=0),a[r]={left:p,top:h,col:f,width:m,height:o},d=Math.max(d,m),h+=o+i})),u+=d,l.push({width:d,height:h}),u}adjustHitBoxes(){if(!this.options.display)return;const e=this._computeTitleHeight(),{legendHitBoxes:t,options:{align:n,labels:{padding:s},rtl:r}}=this,i=(0,o.aA)(r,this.left,this.width);if(this.isHorizontal()){let r=0,a=(0,o.S)(n,this.left+s,this.right-this.lineWidths[r]);for(const l of t)r!==l.row&&(r=l.row,a=(0,o.S)(n,this.left+s,this.right-this.lineWidths[r])),l.top+=this.top+e+s,l.left=i.leftForLtr(i.x(a),l.width),a+=l.width+s}else{let r=0,a=(0,o.S)(n,this.top+e+s,this.bottom-this.columnSizes[r].height);for(const l of t)l.col!==r&&(r=l.col,a=(0,o.S)(n,this.top+e+s,this.bottom-this.columnSizes[r].height)),l.top=a,l.left+=this.left+s,l.left=i.leftForLtr(i.x(l.left),l.width),a+=l.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const e=this.ctx;(0,o.L)(e,this),this._draw(),(0,o.N)(e)}}_draw(){const{options:e,columnSizes:t,lineWidths:n,ctx:s}=this,{align:r,labels:i}=e,a=o.d.color,l=(0,o.aA)(e.rtl,this.left,this.width),c=(0,o.O)(i.font),{color:u,padding:d}=i,h=c.size,p=h/2;let f;this.drawTitle(),s.textAlign=l.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=c.string;const{boxWidth:m,boxHeight:g,itemHeight:v}=qt(i,h),y=this.isHorizontal(),b=this._computeTitleHeight();f=y?{x:(0,o.S)(r,this.left+d,this.right-n[0]),y:this.top+d+b,line:0}:{x:this.left+d,y:(0,o.S)(r,this.top+b+d,this.bottom-t[0].height),line:0},(0,o.aB)(this.ctx,e.textDirection);const _=v+d;this.legendItems.forEach(((x,w)=>{s.strokeStyle=x.fontColor||u,s.fillStyle=x.fontColor||u;const S=s.measureText(x.text).width,k=l.textAlign(x.textAlign||(x.textAlign=i.textAlign)),j=m+p+S;let P=f.x,O=f.y;l.setWidth(this.width),y?w>0&&P+j+d>this.right&&(O=f.y+=_,f.line++,P=f.x=(0,o.S)(r,this.left+d,this.right-n[f.line])):w>0&&O+_>this.bottom&&(P=f.x=P+t[f.line].width+d,f.line++,O=f.y=(0,o.S)(r,this.top+b+d,this.bottom-t[f.line].height)),function(e,t,n){if(isNaN(m)||m<=0||isNaN(g)||g<0)return;s.save();const r=(0,o.v)(n.lineWidth,1);if(s.fillStyle=(0,o.v)(n.fillStyle,a),s.lineCap=(0,o.v)(n.lineCap,"butt"),s.lineDashOffset=(0,o.v)(n.lineDashOffset,0),s.lineJoin=(0,o.v)(n.lineJoin,"miter"),s.lineWidth=r,s.strokeStyle=(0,o.v)(n.strokeStyle,a),s.setLineDash((0,o.v)(n.lineDash,[])),i.usePointStyle){const a={radius:g*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:r},c=l.xPlus(e,m/2),u=t+p;(0,o.aE)(s,a,c,u,i.pointStyleWidth&&m)}else{const i=t+Math.max((h-g)/2,0),a=l.leftForLtr(e,m),c=(0,o.ax)(n.borderRadius);s.beginPath(),Object.values(c).some((e=>0!==e))?(0,o.av)(s,{x:a,y:i,w:m,h:g,radius:c}):s.rect(a,i,m,g),s.fill(),0!==r&&s.stroke()}s.restore()}(l.x(P),O,x),P=(0,o.aC)(k,P+m+p,y?P+j:this.right,e.rtl),function(e,t,n){(0,o.M)(s,n.text,e,t+v/2,c,{strikethrough:n.hidden,textAlign:l.textAlign(n.textAlign)})}(l.x(P),O,x),y?f.x+=j+d:f.y+=_})),(0,o.aD)(this.ctx,e.textDirection)}drawTitle(){const e=this.options,t=e.title,n=(0,o.O)(t.font),s=(0,o.K)(t.padding);if(!t.display)return;const r=(0,o.aA)(e.rtl,this.left,this.width),i=this.ctx,a=t.position,l=n.size/2,c=s.top+l;let u,d=this.left,h=this.width;if(this.isHorizontal())h=Math.max(...this.lineWidths),u=this.top+c,d=(0,o.S)(e.align,d,this.right-h);else{const t=this.columnSizes.reduce(((e,t)=>Math.max(e,t.height)),0);u=c+(0,o.S)(e.align,this.top,this.bottom-t-e.labels.padding-this._computeTitleHeight())}const p=(0,o.S)(a,d,d+h);i.textAlign=r.textAlign((0,o.R)(a)),i.textBaseline="middle",i.strokeStyle=t.color,i.fillStyle=t.color,i.font=n.string,(0,o.M)(i,t.text,p,u,n)}_computeTitleHeight(){const e=this.options.title,t=(0,o.O)(e.font),n=(0,o.K)(e.padding);return e.display?t.lineHeight+n.height:0}_getLegendItemAt(e,t){let n,s,r;if((0,o.ak)(e,this.left,this.right)&&(0,o.ak)(t,this.top,this.bottom))for(r=this.legendHitBoxes,n=0;n<r.length;++n)if(s=r[n],(0,o.ak)(e,s.left,s.left+s.width)&&(0,o.ak)(t,s.top,s.top+s.height))return this.legendItems[n];return null}handleEvent(e){const t=this.options;if(!function(e,t){return!("mousemove"!==e&&"mouseout"!==e||!t.onHover&&!t.onLeave)||!(!t.onClick||"click"!==e&&"mouseup"!==e)}(e.type,t))return;const n=this._getLegendItemAt(e.x,e.y);if("mousemove"===e.type||"mouseout"===e.type){const i=this._hoveredItem,a=(r=n,null!==(s=i)&&null!==r&&s.datasetIndex===r.datasetIndex&&s.index===r.index);i&&!a&&(0,o.C)(t.onLeave,[e,i,this],this),this._hoveredItem=n,n&&!a&&(0,o.C)(t.onHover,[e,n,this],this)}else n&&(0,o.C)(t.onClick,[e,n,this],this);var s,r}}var Jt={id:"legend",_element:Kt,start(e,t,n){const o=e.legend=new Kt({ctx:e.ctx,options:n,chart:e});ye.configure(e,o,n),ye.addBox(e,o)},stop(e){ye.removeBox(e,e.legend),delete e.legend},beforeUpdate(e,t,n){const o=e.legend;ye.configure(e,o,n),o.options=n},afterUpdate(e){const t=e.legend;t.buildLabels(),t.adjustHitBoxes()},afterEvent(e,t){t.replay||e.legend.handleEvent(t.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(e,t,n){const o=t.datasetIndex,s=n.chart;s.isDatasetVisible(o)?(s.hide(o),t.hidden=!0):(s.show(o),t.hidden=!1)},onHover:null,onLeave:null,labels:{color:e=>e.chart.options.color,boxWidth:40,padding:10,generateLabels(e){const t=e.data.datasets,{labels:{usePointStyle:n,pointStyle:s,textAlign:r,color:i}}=e.legend.options;return e._getSortedDatasetMetas().map((e=>{const a=e.controller.getStyle(n?0:void 0),l=(0,o.K)(a.borderWidth);return{text:t[e.index].label,fillStyle:a.backgroundColor,fontColor:i,hidden:!e.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(l.width+l.height)/4,strokeStyle:a.borderColor,pointStyle:s||a.pointStyle,rotation:a.rotation,textAlign:r||a.textAlign,borderRadius:0,datasetIndex:e.index}}),this)}},title:{color:e=>e.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:e=>!e.startsWith("on"),labels:{_scriptable:e=>!["generateLabels","filter","sort"].includes(e)}}};class Xt extends I{constructor(e){super(),this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=e,this.height=this.bottom=t;const s=(0,o.b)(n.text)?n.text.length:1;this._padding=(0,o.K)(n.padding);const r=s*(0,o.O)(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=r:this.width=r}isHorizontal(){const e=this.options.position;return"top"===e||"bottom"===e}_drawArgs(e){const{top:t,left:n,bottom:s,right:r,options:i}=this,a=i.align;let l,c,u,d=0;return this.isHorizontal()?(c=(0,o.S)(a,n,r),u=t+e,l=r-n):("left"===i.position?(c=n+e,u=(0,o.S)(a,s,t),d=-.5*o.P):(c=r-e,u=(0,o.S)(a,t,s),d=.5*o.P),l=s-t),{titleX:c,titleY:u,maxWidth:l,rotation:d}}draw(){const e=this.ctx,t=this.options;if(!t.display)return;const n=(0,o.O)(t.font),s=n.lineHeight/2+this._padding.top,{titleX:r,titleY:i,maxWidth:a,rotation:l}=this._drawArgs(s);(0,o.M)(e,t.text,0,0,n,{color:t.color,maxWidth:a,rotation:l,textAlign:(0,o.R)(t.align),textBaseline:"middle",translation:[r,i]})}}var Qt={id:"title",_element:Xt,start(e,t,n){!function(e,t){const n=new Xt({ctx:e.ctx,options:t,chart:e});ye.configure(e,n,t),ye.addBox(e,n),e.titleBlock=n}(e,n)},stop(e){const t=e.titleBlock;ye.removeBox(e,t),delete e.titleBlock},beforeUpdate(e,t,n){const o=e.titleBlock;ye.configure(e,o,n),o.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Zt=new WeakMap;var en={id:"subtitle",start(e,t,n){const o=new Xt({ctx:e.ctx,options:n,chart:e});ye.configure(e,o,n),ye.addBox(e,o),Zt.set(e,o)},stop(e){ye.removeBox(e,Zt.get(e)),Zt.delete(e)},beforeUpdate(e,t,n){const o=Zt.get(e);ye.configure(e,o,n),o.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const tn={average(e){if(!e.length)return!1;let t,n,o=0,s=0,r=0;for(t=0,n=e.length;t<n;++t){const n=e[t].element;if(n&&n.hasValue()){const e=n.tooltipPosition();o+=e.x,s+=e.y,++r}}return{x:o/r,y:s/r}},nearest(e,t){if(!e.length)return!1;let n,s,r,i=t.x,a=t.y,l=Number.POSITIVE_INFINITY;for(n=0,s=e.length;n<s;++n){const s=e[n].element;if(s&&s.hasValue()){const e=s.getCenterPoint(),n=(0,o.aG)(t,e);n<l&&(l=n,r=s)}}if(r){const e=r.tooltipPosition();i=e.x,a=e.y}return{x:i,y:a}}};function nn(e,t){return t&&((0,o.b)(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function on(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function sn(e,t){const{element:n,datasetIndex:o,index:s}=t,r=e.getDatasetMeta(o).controller,{label:i,value:a}=r.getLabelAndValue(s);return{chart:e,label:i,parsed:r.getParsed(s),raw:e.data.datasets[o].data[s],formattedValue:a,dataset:r.getDataset(),dataIndex:s,datasetIndex:o,element:n}}function rn(e,t){const n=e.chart.ctx,{body:s,footer:r,title:i}=e,{boxWidth:a,boxHeight:l}=t,c=(0,o.O)(t.bodyFont),u=(0,o.O)(t.titleFont),d=(0,o.O)(t.footerFont),h=i.length,p=r.length,f=s.length,m=(0,o.K)(t.padding);let g=m.height,v=0,y=s.reduce(((e,t)=>e+t.before.length+t.lines.length+t.after.length),0);y+=e.beforeBody.length+e.afterBody.length,h&&(g+=h*u.lineHeight+(h-1)*t.titleSpacing+t.titleMarginBottom),y&&(g+=f*(t.displayColors?Math.max(l,c.lineHeight):c.lineHeight)+(y-f)*c.lineHeight+(y-1)*t.bodySpacing),p&&(g+=t.footerMarginTop+p*d.lineHeight+(p-1)*t.footerSpacing);let b=0;const _=function(e){v=Math.max(v,n.measureText(e).width+b)};return n.save(),n.font=u.string,(0,o.Q)(e.title,_),n.font=c.string,(0,o.Q)(e.beforeBody.concat(e.afterBody),_),b=t.displayColors?a+2+t.boxPadding:0,(0,o.Q)(s,(e=>{(0,o.Q)(e.before,_),(0,o.Q)(e.lines,_),(0,o.Q)(e.after,_)})),b=0,n.font=d.string,(0,o.Q)(e.footer,_),n.restore(),v+=m.width,{width:v,height:g}}function an(e,t,n,o){const{x:s,width:r}=n,{width:i,chartArea:{left:a,right:l}}=e;let c="center";return"center"===o?c=s<=(a+l)/2?"left":"right":s<=r/2?c="left":s>=i-r/2&&(c="right"),function(e,t,n,o){const{x:s,width:r}=o,i=n.caretSize+n.caretPadding;return"left"===e&&s+r+i>t.width||"right"===e&&s-r-i<0||void 0}(c,e,t,n)&&(c="center"),c}function ln(e,t,n){const o=n.yAlign||t.yAlign||function(e,t){const{y:n,height:o}=t;return n<o/2?"top":n>e.height-o/2?"bottom":"center"}(e,n);return{xAlign:n.xAlign||t.xAlign||an(e,t,n,o),yAlign:o}}function cn(e,t,n,s){const{caretSize:r,caretPadding:i,cornerRadius:a}=e,{xAlign:l,yAlign:c}=n,u=r+i,{topLeft:d,topRight:h,bottomLeft:p,bottomRight:f}=(0,o.ax)(a);let m=function(e,t){let{x:n,width:o}=e;return"right"===t?n-=o:"center"===t&&(n-=o/2),n}(t,l);const g=function(e,t,n){let{y:o,height:s}=e;return"top"===t?o+=n:o-="bottom"===t?s+n:s/2,o}(t,c,u);return"center"===c?"left"===l?m+=u:"right"===l&&(m-=u):"left"===l?m-=Math.max(d,p)+r:"right"===l&&(m+=Math.max(h,f)+r),{x:(0,o.E)(m,0,s.width-t.width),y:(0,o.E)(g,0,s.height-t.height)}}function un(e,t,n){const s=(0,o.K)(n.padding);return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-s.right:e.x+s.left}function dn(e){return nn([],on(e))}function hn(e,t){const n=t&&t.dataset&&t.dataset.tooltip&&t.dataset.tooltip.callbacks;return n?e.override(n):e}class pn extends I{constructor(e){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=e.chart||e._chart,this._chart=this.chart,this.options=e.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(e){this.options=e,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const e=this._cachedAnimations;if(e)return e;const t=this.chart,n=this.options.setContext(this.getContext()),o=n.enabled&&t.options.animation&&n.animations,s=new c(this.chart,o);return o._cacheable&&(this._cachedAnimations=Object.freeze(s)),s}getContext(){return this.$context||(this.$context=(e=this.chart.getContext(),this,t=this._tooltipItems,(0,o.h)(e,{tooltip:this,tooltipItems:t,type:"tooltip"})));var e,t}getTitle(e,t){const{callbacks:n}=t,o=n.beforeTitle.apply(this,[e]),s=n.title.apply(this,[e]),r=n.afterTitle.apply(this,[e]);let i=[];return i=nn(i,on(o)),i=nn(i,on(s)),i=nn(i,on(r)),i}getBeforeBody(e,t){return dn(t.callbacks.beforeBody.apply(this,[e]))}getBody(e,t){const{callbacks:n}=t,s=[];return(0,o.Q)(e,(e=>{const t={before:[],lines:[],after:[]},o=hn(n,e);nn(t.before,on(o.beforeLabel.call(this,e))),nn(t.lines,o.label.call(this,e)),nn(t.after,on(o.afterLabel.call(this,e))),s.push(t)})),s}getAfterBody(e,t){return dn(t.callbacks.afterBody.apply(this,[e]))}getFooter(e,t){const{callbacks:n}=t,o=n.beforeFooter.apply(this,[e]),s=n.footer.apply(this,[e]),r=n.afterFooter.apply(this,[e]);let i=[];return i=nn(i,on(o)),i=nn(i,on(s)),i=nn(i,on(r)),i}_createItems(e){const t=this._active,n=this.chart.data,s=[],r=[],i=[];let a,l,c=[];for(a=0,l=t.length;a<l;++a)c.push(sn(this.chart,t[a]));return e.filter&&(c=c.filter(((t,o,s)=>e.filter(t,o,s,n)))),e.itemSort&&(c=c.sort(((t,o)=>e.itemSort(t,o,n)))),(0,o.Q)(c,(t=>{const n=hn(e.callbacks,t);s.push(n.labelColor.call(this,t)),r.push(n.labelPointStyle.call(this,t)),i.push(n.labelTextColor.call(this,t))})),this.labelColors=s,this.labelPointStyles=r,this.labelTextColors=i,this.dataPoints=c,c}update(e,t){const n=this.options.setContext(this.getContext()),o=this._active;let s,r=[];if(o.length){const e=tn[n.position].call(this,o,this._eventPosition);r=this._createItems(n),this.title=this.getTitle(r,n),this.beforeBody=this.getBeforeBody(r,n),this.body=this.getBody(r,n),this.afterBody=this.getAfterBody(r,n),this.footer=this.getFooter(r,n);const t=this._size=rn(this,n),i=Object.assign({},e,t),a=ln(this.chart,n,i),l=cn(n,i,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,s={opacity:1,x:l.x,y:l.y,width:t.width,height:t.height,caretX:e.x,caretY:e.y}}else 0!==this.opacity&&(s={opacity:0});this._tooltipItems=r,this.$context=void 0,s&&this._resolveAnimations().update(this,s),e&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:t})}drawCaret(e,t,n,o){const s=this.getCaretPosition(e,n,o);t.lineTo(s.x1,s.y1),t.lineTo(s.x2,s.y2),t.lineTo(s.x3,s.y3)}getCaretPosition(e,t,n){const{xAlign:s,yAlign:r}=this,{caretSize:i,cornerRadius:a}=n,{topLeft:l,topRight:c,bottomLeft:u,bottomRight:d}=(0,o.ax)(a),{x:h,y:p}=e,{width:f,height:m}=t;let g,v,y,b,_,x;return"center"===r?(_=p+m/2,"left"===s?(g=h,v=g-i,b=_+i,x=_-i):(g=h+f,v=g+i,b=_-i,x=_+i),y=g):(v="left"===s?h+Math.max(l,u)+i:"right"===s?h+f-Math.max(c,d)-i:this.caretX,"top"===r?(b=p,_=b-i,g=v-i,y=v+i):(b=p+m,_=b+i,g=v+i,y=v-i),x=b),{x1:g,x2:v,x3:y,y1:b,y2:_,y3:x}}drawTitle(e,t,n){const s=this.title,r=s.length;let i,a,l;if(r){const c=(0,o.aA)(n.rtl,this.x,this.width);for(e.x=un(this,n.titleAlign,n),t.textAlign=c.textAlign(n.titleAlign),t.textBaseline="middle",i=(0,o.O)(n.titleFont),a=n.titleSpacing,t.fillStyle=n.titleColor,t.font=i.string,l=0;l<r;++l)t.fillText(s[l],c.x(e.x),e.y+i.lineHeight/2),e.y+=i.lineHeight+a,l+1===r&&(e.y+=n.titleMarginBottom-a)}}_drawColorBox(e,t,n,s,r){const i=this.labelColors[n],a=this.labelPointStyles[n],{boxHeight:l,boxWidth:c,boxPadding:u}=r,d=(0,o.O)(r.bodyFont),h=un(this,"left",r),p=s.x(h),f=l<d.lineHeight?(d.lineHeight-l)/2:0,m=t.y+f;if(r.usePointStyle){const t={radius:Math.min(c,l)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},n=s.leftForLtr(p,c)+c/2,u=m+l/2;e.strokeStyle=r.multiKeyBackground,e.fillStyle=r.multiKeyBackground,(0,o.au)(e,t,n,u),e.strokeStyle=i.borderColor,e.fillStyle=i.backgroundColor,(0,o.au)(e,t,n,u)}else{e.lineWidth=(0,o.i)(i.borderWidth)?Math.max(...Object.values(i.borderWidth)):i.borderWidth||1,e.strokeStyle=i.borderColor,e.setLineDash(i.borderDash||[]),e.lineDashOffset=i.borderDashOffset||0;const t=s.leftForLtr(p,c-u),n=s.leftForLtr(s.xPlus(p,1),c-u-2),a=(0,o.ax)(i.borderRadius);Object.values(a).some((e=>0!==e))?(e.beginPath(),e.fillStyle=r.multiKeyBackground,(0,o.av)(e,{x:t,y:m,w:c,h:l,radius:a}),e.fill(),e.stroke(),e.fillStyle=i.backgroundColor,e.beginPath(),(0,o.av)(e,{x:n,y:m+1,w:c-2,h:l-2,radius:a}),e.fill()):(e.fillStyle=r.multiKeyBackground,e.fillRect(t,m,c,l),e.strokeRect(t,m,c,l),e.fillStyle=i.backgroundColor,e.fillRect(n,m+1,c-2,l-2))}e.fillStyle=this.labelTextColors[n]}drawBody(e,t,n){const{body:s}=this,{bodySpacing:r,bodyAlign:i,displayColors:a,boxHeight:l,boxWidth:c,boxPadding:u}=n,d=(0,o.O)(n.bodyFont);let h=d.lineHeight,p=0;const f=(0,o.aA)(n.rtl,this.x,this.width),m=function(n){t.fillText(n,f.x(e.x+p),e.y+h/2),e.y+=h+r},g=f.textAlign(i);let v,y,b,_,x,w,S;for(t.textAlign=i,t.textBaseline="middle",t.font=d.string,e.x=un(this,g,n),t.fillStyle=n.bodyColor,(0,o.Q)(this.beforeBody,m),p=a&&"right"!==g?"center"===i?c/2+u:c+2+u:0,_=0,w=s.length;_<w;++_){for(v=s[_],y=this.labelTextColors[_],t.fillStyle=y,(0,o.Q)(v.before,m),b=v.lines,a&&b.length&&(this._drawColorBox(t,e,_,f,n),h=Math.max(d.lineHeight,l)),x=0,S=b.length;x<S;++x)m(b[x]),h=d.lineHeight;(0,o.Q)(v.after,m)}p=0,h=d.lineHeight,(0,o.Q)(this.afterBody,m),e.y-=r}drawFooter(e,t,n){const s=this.footer,r=s.length;let i,a;if(r){const l=(0,o.aA)(n.rtl,this.x,this.width);for(e.x=un(this,n.footerAlign,n),e.y+=n.footerMarginTop,t.textAlign=l.textAlign(n.footerAlign),t.textBaseline="middle",i=(0,o.O)(n.footerFont),t.fillStyle=n.footerColor,t.font=i.string,a=0;a<r;++a)t.fillText(s[a],l.x(e.x),e.y+i.lineHeight/2),e.y+=i.lineHeight+n.footerSpacing}}drawBackground(e,t,n,s){const{xAlign:r,yAlign:i}=this,{x:a,y:l}=e,{width:c,height:u}=n,{topLeft:d,topRight:h,bottomLeft:p,bottomRight:f}=(0,o.ax)(s.cornerRadius);t.fillStyle=s.backgroundColor,t.strokeStyle=s.borderColor,t.lineWidth=s.borderWidth,t.beginPath(),t.moveTo(a+d,l),"top"===i&&this.drawCaret(e,t,n,s),t.lineTo(a+c-h,l),t.quadraticCurveTo(a+c,l,a+c,l+h),"center"===i&&"right"===r&&this.drawCaret(e,t,n,s),t.lineTo(a+c,l+u-f),t.quadraticCurveTo(a+c,l+u,a+c-f,l+u),"bottom"===i&&this.drawCaret(e,t,n,s),t.lineTo(a+p,l+u),t.quadraticCurveTo(a,l+u,a,l+u-p),"center"===i&&"left"===r&&this.drawCaret(e,t,n,s),t.lineTo(a,l+d),t.quadraticCurveTo(a,l,a+d,l),t.closePath(),t.fill(),s.borderWidth>0&&t.stroke()}_updateAnimationTarget(e){const t=this.chart,n=this.$animations,o=n&&n.x,s=n&&n.y;if(o||s){const n=tn[e.position].call(this,this._active,this._eventPosition);if(!n)return;const r=this._size=rn(this,e),i=Object.assign({},n,this._size),a=ln(t,e,i),l=cn(e,i,a,t);o._to===l.x&&s._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=r.width,this.height=r.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(e){const t=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(t);const s={width:this.width,height:this.height},r={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const i=(0,o.K)(t.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;t.enabled&&a&&(e.save(),e.globalAlpha=n,this.drawBackground(r,e,s,t),(0,o.aB)(e,t.textDirection),r.y+=i.top,this.drawTitle(r,e,t),this.drawBody(r,e,t),this.drawFooter(r,e,t),(0,o.aD)(e,t.textDirection),e.restore())}getActiveElements(){return this._active||[]}setActiveElements(e,t){const n=this._active,s=e.map((({datasetIndex:e,index:t})=>{const n=this.chart.getDatasetMeta(e);if(!n)throw new Error("Cannot find a dataset at index "+e);return{datasetIndex:e,element:n.data[t],index:t}})),r=!(0,o.ai)(n,s),i=this._positionChanged(s,t);(r||i)&&(this._active=s,this._eventPosition=t,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(e,t,n=!0){if(t&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,r=this._active||[],i=this._getActiveElements(e,r,t,n),a=this._positionChanged(i,e),l=t||!(0,o.ai)(i,r)||a;return l&&(this._active=i,(s.enabled||s.external)&&(this._eventPosition={x:e.x,y:e.y},this.update(!0,t))),l}_getActiveElements(e,t,n,o){const s=this.options;if("mouseout"===e.type)return[];if(!o)return t;const r=this.chart.getElementsAtEventForMode(e,s.mode,s,n);return s.reverse&&r.reverse(),r}_positionChanged(e,t){const{caretX:n,caretY:o,options:s}=this,r=tn[s.position].call(this,e,t);return!1!==r&&(n!==r.x||o!==r.y)}}pn.positioners=tn;var fn={id:"tooltip",_element:pn,positioners:tn,afterInit(e,t,n){n&&(e.tooltip=new pn({chart:e,options:n}))},beforeUpdate(e,t,n){e.tooltip&&e.tooltip.initialize(n)},reset(e,t,n){e.tooltip&&e.tooltip.initialize(n)},afterDraw(e){const t=e.tooltip;if(t&&t._willRender()){const n={tooltip:t};if(!1===e.notifyPlugins("beforeTooltipDraw",n))return;t.draw(e.ctx),e.notifyPlugins("afterTooltipDraw",n)}},afterEvent(e,t){if(e.tooltip){const n=t.replay;e.tooltip.handleEvent(t.event,n,t.inChartArea)&&(t.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(e,t)=>t.bodyFont.size,boxWidth:(e,t)=>t.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:o.aF,title(e){if(e.length>0){const t=e[0],n=t.chart.data.labels,o=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return t.dataset.label||"";if(t.label)return t.label;if(o>0&&t.dataIndex<o)return n[t.dataIndex]}return""},afterTitle:o.aF,beforeBody:o.aF,beforeLabel:o.aF,label(e){if(this&&this.options&&"dataset"===this.options.mode)return e.label+": "+e.formattedValue||e.formattedValue;let t=e.dataset.label||"";t&&(t+=": ");const n=e.formattedValue;return(0,o.k)(n)||(t+=n),t},labelColor(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{borderColor:t.borderColor,backgroundColor:t.backgroundColor,borderWidth:t.borderWidth,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{pointStyle:t.pointStyle,rotation:t.rotation}},afterLabel:o.aF,afterBody:o.aF,beforeFooter:o.aF,footer:o.aF,afterFooter:o.aF}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:e=>"filter"!==e&&"itemSort"!==e&&"external"!==e,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},mn=Object.freeze({__proto__:null,Decimation:Mt,Filler:Yt,Legend:Jt,SubTitle:en,Title:Qt,Tooltip:fn});class gn extends Y{constructor(e){super(e),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(e){const t=this._addedLabels;if(t.length){const e=this.getLabels();for(const{index:n,label:o}of t)e[n]===o&&e.splice(n,1);this._addedLabels=[]}super.init(e)}parse(e,t){if((0,o.k)(e))return null;const n=this.getLabels();return((e,t)=>null===e?null:(0,o.E)(Math.round(e),0,t))(t=isFinite(t)&&n[t]===e?t:function(e,t,n,o){const s=e.indexOf(t);return-1===s?((e,t,n,o)=>("string"==typeof t?(n=e.push(t)-1,o.unshift({index:n,label:t})):isNaN(t)&&(n=null),n))(e,t,n,o):s!==e.lastIndexOf(t)?n:s}(n,e,(0,o.v)(t,e),this._addedLabels),n.length-1)}determineDataLimits(){const{minDefined:e,maxDefined:t}=this.getUserBounds();let{min:n,max:o}=this.getMinMax(!0);"ticks"===this.options.bounds&&(e||(n=0),t||(o=this.getLabels().length-1)),this.min=n,this.max=o}buildTicks(){const e=this.min,t=this.max,n=this.options.offset,o=[];let s=this.getLabels();s=0===e&&t===s.length-1?s:s.slice(e,t+1),this._valueRange=Math.max(s.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=e;n<=t;n++)o.push({value:n});return o}getLabelForValue(e){const t=this.getLabels();return e>=0&&e<t.length?t[e]:e}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(e){return"number"!=typeof e&&(e=this.parse(e)),null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getValueForPixel(e){return Math.round(this._startValue+this.getDecimalForPixel(e)*this._valueRange)}getBasePixel(){return this.bottom}}function vn(e,t,{horizontal:n,minRotation:s}){const r=(0,o.t)(s),i=(n?Math.sin(r):Math.cos(r))||.001,a=.75*t*(""+e).length;return Math.min(t/i,a)}gn.id="category",gn.defaults={ticks:{callback:gn.prototype.getLabelForValue}};class yn extends Y{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(e,t){return(0,o.k)(e)||("number"==typeof e||e instanceof Number)&&!isFinite(+e)?null:+e}handleTickRangeOptions(){const{beginAtZero:e}=this.options,{minDefined:t,maxDefined:n}=this.getUserBounds();let{min:s,max:r}=this;const i=e=>s=t?s:e,a=e=>r=n?r:e;if(e){const e=(0,o.s)(s),t=(0,o.s)(r);e<0&&t<0?a(0):e>0&&t>0&&i(0)}if(s===r){let t=1;(r>=Number.MAX_SAFE_INTEGER||s<=Number.MIN_SAFE_INTEGER)&&(t=Math.abs(.05*r)),a(r+t),e||i(s-t)}this.min=s,this.max=r}getTickLimit(){const e=this.options.ticks;let t,{maxTicksLimit:n,stepSize:o}=e;return o?(t=Math.ceil(this.max/o)-Math.floor(this.min/o)+1,t>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${o} would result generating up to ${t} ticks. Limiting to 1000.`),t=1e3)):(t=this.computeTickLimit(),n=n||11),n&&(t=Math.min(n,t)),t}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const e=this.options,t=e.ticks;let n=this.getTickLimit();n=Math.max(2,n);const s=function(e,t){const n=[],{bounds:s,step:r,min:i,max:a,precision:l,count:c,maxTicks:u,maxDigits:d,includeBounds:h}=e,p=r||1,f=u-1,{min:m,max:g}=t,v=!(0,o.k)(i),y=!(0,o.k)(a),b=!(0,o.k)(c),_=(g-m)/(d+1);let x,w,S,k,j=(0,o.aI)((g-m)/f/p)*p;if(j<1e-14&&!v&&!y)return[{value:m},{value:g}];k=Math.ceil(g/j)-Math.floor(m/j),k>f&&(j=(0,o.aI)(k*j/f/p)*p),(0,o.k)(l)||(x=Math.pow(10,l),j=Math.ceil(j*x)/x),"ticks"===s?(w=Math.floor(m/j)*j,S=Math.ceil(g/j)*j):(w=m,S=g),v&&y&&r&&(0,o.aJ)((a-i)/r,j/1e3)?(k=Math.round(Math.min((a-i)/j,u)),j=(a-i)/k,w=i,S=a):b?(w=v?i:w,S=y?a:S,k=c-1,j=(S-w)/k):(k=(S-w)/j,k=(0,o.aK)(k,Math.round(k),j/1e3)?Math.round(k):Math.ceil(k));const P=Math.max((0,o.aL)(j),(0,o.aL)(w));x=Math.pow(10,(0,o.k)(l)?P:l),w=Math.round(w*x)/x,S=Math.round(S*x)/x;let O=0;for(v&&(h&&w!==i?(n.push({value:i}),w<i&&O++,(0,o.aK)(Math.round((w+O*j)*x)/x,i,vn(i,_,e))&&O++):w<i&&O++);O<k;++O)n.push({value:Math.round((w+O*j)*x)/x});return y&&h&&S!==a?n.length&&(0,o.aK)(n[n.length-1].value,a,vn(a,_,e))?n[n.length-1].value=a:n.push({value:a}):y&&S!==a||n.push({value:S}),n}({maxTicks:n,bounds:e.bounds,min:e.min,max:e.max,precision:t.precision,step:t.stepSize,count:t.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:t.minRotation||0,includeBounds:!1!==t.includeBounds},this._range||this);return"ticks"===e.bounds&&(0,o.aH)(s,this,"value"),e.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const e=this.ticks;let t=this.min,n=this.max;if(super.configure(),this.options.offset&&e.length){const o=(n-t)/Math.max(e.length-1,1)/2;t-=o,n+=o}this._startValue=t,this._endValue=n,this._valueRange=n-t}getLabelForValue(e){return(0,o.o)(e,this.chart.options.locale,this.options.ticks.format)}}class bn extends yn{determineDataLimits(){const{min:e,max:t}=this.getMinMax(!0);this.min=(0,o.g)(e)?e:0,this.max=(0,o.g)(t)?t:1,this.handleTickRangeOptions()}computeTickLimit(){const e=this.isHorizontal(),t=e?this.width:this.height,n=(0,o.t)(this.options.ticks.minRotation),s=(e?Math.sin(n):Math.cos(n))||.001,r=this._resolveTickFontOptions(0);return Math.ceil(t/Math.min(40,r.lineHeight/s))}getPixelForValue(e){return null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getValueForPixel(e){return this._startValue+this.getDecimalForPixel(e)*this._valueRange}}function _n(e){return 1==e/Math.pow(10,Math.floor((0,o.z)(e)))}bn.id="linear",bn.defaults={ticks:{callback:F.formatters.numeric}};class xn extends Y{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(e,t){const n=yn.prototype.parse.apply(this,[e,t]);if(0!==n)return(0,o.g)(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const{min:e,max:t}=this.getMinMax(!0);this.min=(0,o.g)(e)?Math.max(0,e):null,this.max=(0,o.g)(t)?Math.max(0,t):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:e,maxDefined:t}=this.getUserBounds();let n=this.min,s=this.max;const r=t=>n=e?n:t,i=e=>s=t?s:e,a=(e,t)=>Math.pow(10,Math.floor((0,o.z)(e))+t);n===s&&(n<=0?(r(1),i(10)):(r(a(n,-1)),i(a(s,1)))),n<=0&&r(a(s,-1)),s<=0&&i(a(n,1)),this._zero&&this.min!==this._suggestedMin&&n===a(this.min,0)&&r(a(n,-1)),this.min=n,this.max=s}buildTicks(){const e=this.options,t=function(e,t){const n=Math.floor((0,o.z)(t.max)),s=Math.ceil(t.max/Math.pow(10,n)),r=[];let i=(0,o.B)(e.min,Math.pow(10,Math.floor((0,o.z)(t.min)))),a=Math.floor((0,o.z)(i)),l=Math.floor(i/Math.pow(10,a)),c=a<0?Math.pow(10,Math.abs(a)):1;do{r.push({value:i,major:_n(i)}),++l,10===l&&(l=1,++a,c=a>=0?1:c),i=Math.round(l*Math.pow(10,a)*c)/c}while(a<n||a===n&&l<s);const u=(0,o.B)(e.max,i);return r.push({value:u,major:_n(i)}),r}({min:this._userMin,max:this._userMax},this);return"ticks"===e.bounds&&(0,o.aH)(t,this,"value"),e.reverse?(t.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),t}getLabelForValue(e){return void 0===e?"0":(0,o.o)(e,this.chart.options.locale,this.options.ticks.format)}configure(){const e=this.min;super.configure(),this._startValue=(0,o.z)(e),this._valueRange=(0,o.z)(this.max)-(0,o.z)(e)}getPixelForValue(e){return void 0!==e&&0!==e||(e=this.min),null===e||isNaN(e)?NaN:this.getPixelForDecimal(e===this.min?0:((0,o.z)(e)-this._startValue)/this._valueRange)}getValueForPixel(e){const t=this.getDecimalForPixel(e);return Math.pow(10,this._startValue+t*this._valueRange)}}function wn(e){const t=e.ticks;if(t.display&&e.display){const e=(0,o.K)(t.backdropPadding);return(0,o.v)(t.font&&t.font.size,o.d.font.size)+e.height}return 0}function Sn(e,t,n,o,s){return e===o||e===s?{start:t-n/2,end:t+n/2}:e<o||e>s?{start:t-n,end:t}:{start:t,end:t+n}}function kn(e,t,n,o,s){const r=Math.abs(Math.sin(n)),i=Math.abs(Math.cos(n));let a=0,l=0;o.start<t.l?(a=(t.l-o.start)/r,e.l=Math.min(e.l,t.l-a)):o.end>t.r&&(a=(o.end-t.r)/r,e.r=Math.max(e.r,t.r+a)),s.start<t.t?(l=(t.t-s.start)/i,e.t=Math.min(e.t,t.t-l)):s.end>t.b&&(l=(s.end-t.b)/i,e.b=Math.max(e.b,t.b+l))}function jn(e){return 0===e||180===e?"center":e<180?"left":"right"}function Pn(e,t,n){return 90===n||270===n?e-=t/2:(n>270||n<90)&&(e-=t),e}function On(e,t,n,s){const{ctx:r}=e;if(n)r.arc(e.xCenter,e.yCenter,t,0,o.T);else{let n=e.getPointPosition(0,t);r.moveTo(n.x,n.y);for(let o=1;o<s;o++)n=e.getPointPosition(o,t),r.lineTo(n.x,n.y)}}xn.id="logarithmic",xn.defaults={ticks:{callback:F.formatters.logarithmic,major:{enabled:!0}}};class Cn extends yn{constructor(e){super(e),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const e=this._padding=(0,o.K)(wn(this.options)/2),t=this.width=this.maxWidth-e.width,n=this.height=this.maxHeight-e.height;this.xCenter=Math.floor(this.left+t/2+e.left),this.yCenter=Math.floor(this.top+n/2+e.top),this.drawingArea=Math.floor(Math.min(t,n)/2)}determineDataLimits(){const{min:e,max:t}=this.getMinMax(!1);this.min=(0,o.g)(e)&&!isNaN(e)?e:0,this.max=(0,o.g)(t)&&!isNaN(t)?t:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/wn(this.options))}generateTickLabels(e){yn.prototype.generateTickLabels.call(this,e),this._pointLabels=this.getLabels().map(((e,t)=>{const n=(0,o.C)(this.options.pointLabels.callback,[e,t],this);return n||0===n?n:""})).filter(((e,t)=>this.chart.getDataVisibility(t)))}fit(){const e=this.options;e.display&&e.pointLabels.display?function(e){const t={l:e.left+e._padding.left,r:e.right-e._padding.right,t:e.top+e._padding.top,b:e.bottom-e._padding.bottom},n=Object.assign({},t),s=[],r=[],i=e._pointLabels.length,a=e.options.pointLabels,l=a.centerPointLabels?o.P/i:0;for(let h=0;h<i;h++){const i=a.setContext(e.getPointLabelContext(h));r[h]=i.padding;const p=e.getPointPosition(h,e.drawingArea+r[h],l),f=(0,o.O)(i.font),m=(c=e.ctx,u=f,d=e._pointLabels[h],d=(0,o.b)(d)?d:[d],{w:(0,o.aM)(c,u.string,d),h:d.length*u.lineHeight});s[h]=m;const g=(0,o.az)(e.getIndexAngle(h)+l),v=Math.round((0,o.F)(g));kn(n,t,g,Sn(v,p.x,m.w,0,180),Sn(v,p.y,m.h,90,270))}var c,u,d;e.setCenterPoint(t.l-n.l,n.r-t.r,t.t-n.t,n.b-t.b),e._pointLabelItems=function(e,t,n){const s=[],r=e._pointLabels.length,i=e.options,a=wn(i)/2,l=e.drawingArea,c=i.pointLabels.centerPointLabels?o.P/r:0;for(let i=0;i<r;i++){const r=e.getPointPosition(i,l+a+n[i],c),p=Math.round((0,o.F)((0,o.az)(r.angle+o.H))),f=t[i],m=Pn(r.y,f.h,p),g=jn(p),v=(u=r.x,d=f.w,"right"===(h=g)?u-=d:"center"===h&&(u-=d/2),u);s.push({x:r.x,y:m,textAlign:g,left:v,top:m,right:v+f.w,bottom:m+f.h})}var u,d,h;return s}(e,s,r)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(e,t,n,o){this.xCenter+=Math.floor((e-t)/2),this.yCenter+=Math.floor((n-o)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(e,t,n,o))}getIndexAngle(e){const t=o.T/(this._pointLabels.length||1),n=this.options.startAngle||0;return(0,o.az)(e*t+(0,o.t)(n))}getDistanceFromCenterForValue(e){if((0,o.k)(e))return NaN;const t=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-e)*t:(e-this.min)*t}getValueForDistanceFromCenter(e){if((0,o.k)(e))return NaN;const t=e/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-t:this.min+t}getPointLabelContext(e){const t=this._pointLabels||[];if(e>=0&&e<t.length){const n=t[e];return function(e,t,n){return(0,o.h)(e,{label:n,index:t,type:"pointLabel"})}(this.getContext(),e,n)}}getPointPosition(e,t,n=0){const s=this.getIndexAngle(e)-o.H+n;return{x:Math.cos(s)*t+this.xCenter,y:Math.sin(s)*t+this.yCenter,angle:s}}getPointPositionForValue(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))}getBasePosition(e){return this.getPointPositionForValue(e||0,this.getBaseValue())}getPointLabelPosition(e){const{left:t,top:n,right:o,bottom:s}=this._pointLabelItems[e];return{left:t,top:n,right:o,bottom:s}}drawBackground(){const{backgroundColor:e,grid:{circular:t}}=this.options;if(e){const n=this.ctx;n.save(),n.beginPath(),On(this,this.getDistanceFromCenterForValue(this._endValue),t,this._pointLabels.length),n.closePath(),n.fillStyle=e,n.fill(),n.restore()}}drawGrid(){const e=this.ctx,t=this.options,{angleLines:n,grid:s}=t,r=this._pointLabels.length;let i,a,l;if(t.pointLabels.display&&function(e,t){const{ctx:n,options:{pointLabels:s}}=e;for(let r=t-1;r>=0;r--){const t=s.setContext(e.getPointLabelContext(r)),i=(0,o.O)(t.font),{x:a,y:l,textAlign:c,left:u,top:d,right:h,bottom:p}=e._pointLabelItems[r],{backdropColor:f}=t;if(!(0,o.k)(f)){const e=(0,o.ax)(t.borderRadius),s=(0,o.K)(t.backdropPadding);n.fillStyle=f;const r=u-s.left,i=d-s.top,a=h-u+s.width,l=p-d+s.height;Object.values(e).some((e=>0!==e))?(n.beginPath(),(0,o.av)(n,{x:r,y:i,w:a,h:l,radius:e}),n.fill()):n.fillRect(r,i,a,l)}(0,o.M)(n,e._pointLabels[r],a,l+i.lineHeight/2,i,{color:t.color,textAlign:c,textBaseline:"middle"})}}(this,r),s.display&&this.ticks.forEach(((e,t)=>{0!==t&&(a=this.getDistanceFromCenterForValue(e.value),function(e,t,n,o){const s=e.ctx,r=t.circular,{color:i,lineWidth:a}=t;!r&&!o||!i||!a||n<0||(s.save(),s.strokeStyle=i,s.lineWidth=a,s.setLineDash(t.borderDash),s.lineDashOffset=t.borderDashOffset,s.beginPath(),On(e,n,r,o),s.closePath(),s.stroke(),s.restore())}(this,s.setContext(this.getContext(t-1)),a,r))})),n.display){for(e.save(),i=r-1;i>=0;i--){const o=n.setContext(this.getPointLabelContext(i)),{color:s,lineWidth:r}=o;r&&s&&(e.lineWidth=r,e.strokeStyle=s,e.setLineDash(o.borderDash),e.lineDashOffset=o.borderDashOffset,a=this.getDistanceFromCenterForValue(t.ticks.reverse?this.min:this.max),l=this.getPointPosition(i,a),e.beginPath(),e.moveTo(this.xCenter,this.yCenter),e.lineTo(l.x,l.y),e.stroke())}e.restore()}}drawBorder(){}drawLabels(){const e=this.ctx,t=this.options,n=t.ticks;if(!n.display)return;const s=this.getIndexAngle(0);let r,i;e.save(),e.translate(this.xCenter,this.yCenter),e.rotate(s),e.textAlign="center",e.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&!t.reverse)return;const l=n.setContext(this.getContext(a)),c=(0,o.O)(l.font);if(r=this.getDistanceFromCenterForValue(this.ticks[a].value),l.showLabelBackdrop){e.font=c.string,i=e.measureText(s.label).width,e.fillStyle=l.backdropColor;const t=(0,o.K)(l.backdropPadding);e.fillRect(-i/2-t.left,-r-c.size/2-t.top,i+t.width,c.size+t.height)}(0,o.M)(e,s.label,0,-r,c,{color:l.color})})),e.restore()}drawTitle(){}}Cn.id="radialLinear",Cn.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:F.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:e=>e,padding:5,centerPointLabels:!1}},Cn.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Cn.descriptors={angleLines:{_fallback:"grid"}};const En={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Tn=Object.keys(En);function Mn(e,t){return e-t}function An(e,t){if((0,o.k)(t))return null;const n=e._adapter,{parser:s,round:r,isoWeekday:i}=e._parseOpts;let a=t;return"function"==typeof s&&(a=s(a)),(0,o.g)(a)||(a="string"==typeof s?n.parse(a,s):n.parse(a)),null===a?null:(r&&(a="week"!==r||!(0,o.x)(i)&&!0!==i?n.startOf(a,r):n.startOf(a,"isoWeek",i)),+a)}function Rn(e,t,n,o){const s=Tn.length;for(let r=Tn.indexOf(e);r<s-1;++r){const e=En[Tn[r]],s=e.steps?e.steps:Number.MAX_SAFE_INTEGER;if(e.common&&Math.ceil((n-t)/(s*e.size))<=o)return Tn[r]}return Tn[s-1]}function Ln(e,t,n){if(n){if(n.length){const{lo:s,hi:r}=(0,o.aO)(n,t);e[n[s]>=t?n[s]:n[r]]=!0}}else e[t]=!0}function Dn(e,t,n){const o=[],s={},r=t.length;let i,a;for(i=0;i<r;++i)a=t[i],s[a]=i,o.push({value:a,major:!1});return 0!==r&&n?function(e,t,n,o){const s=e._adapter,r=+s.startOf(t[0].value,o),i=t[t.length-1].value;let a,l;for(a=r;a<=i;a=+s.add(a,1,o))l=n[a],l>=0&&(t[l].major=!0);return t}(e,o,s,n):o}class Bn extends Y{constructor(e){super(e),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(e,t){const n=e.time||(e.time={}),s=this._adapter=new ee._date(e.adapters.date);s.init(t),(0,o.ac)(n.displayFormats,s.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(e),this._normalized=t.normalized}parse(e,t){return void 0===e?null:An(this,e)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const e=this.options,t=this._adapter,n=e.time.unit||"day";let{min:s,max:r,minDefined:i,maxDefined:a}=this.getUserBounds();function l(e){i||isNaN(e.min)||(s=Math.min(s,e.min)),a||isNaN(e.max)||(r=Math.max(r,e.max))}i&&a||(l(this._getLabelBounds()),"ticks"===e.bounds&&"labels"===e.ticks.source||l(this.getMinMax(!1))),s=(0,o.g)(s)&&!isNaN(s)?s:+t.startOf(Date.now(),n),r=(0,o.g)(r)&&!isNaN(r)?r:+t.endOf(Date.now(),n)+1,this.min=Math.min(s,r-1),this.max=Math.max(s+1,r)}_getLabelBounds(){const e=this.getLabelTimestamps();let t=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return e.length&&(t=e[0],n=e[e.length-1]),{min:t,max:n}}buildTicks(){const e=this.options,t=e.time,n=e.ticks,s="labels"===n.source?this.getLabelTimestamps():this._generate();"ticks"===e.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const r=this.min,i=this.max,a=(0,o.aN)(s,r,i);return this._unit=t.unit||(n.autoSkip?Rn(t.minUnit,this.min,this.max,this._getLabelCapacity(r)):function(e,t,n,o,s){for(let r=Tn.length-1;r>=Tn.indexOf(n);r--){const n=Tn[r];if(En[n].common&&e._adapter.diff(s,o,n)>=t-1)return n}return Tn[n?Tn.indexOf(n):0]}(this,a.length,t.minUnit,this.min,this.max)),this._majorUnit=n.major.enabled&&"year"!==this._unit?function(e){for(let t=Tn.indexOf(e)+1,n=Tn.length;t<n;++t)if(En[Tn[t]].common)return Tn[t]}(this._unit):void 0,this.initOffsets(s),e.reverse&&a.reverse(),Dn(this,a,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((e=>+e.value)))}initOffsets(e){let t,n,s=0,r=0;this.options.offset&&e.length&&(t=this.getDecimalForValue(e[0]),s=1===e.length?1-t:(this.getDecimalForValue(e[1])-t)/2,n=this.getDecimalForValue(e[e.length-1]),r=1===e.length?n:(n-this.getDecimalForValue(e[e.length-2]))/2);const i=e.length<3?.5:.25;s=(0,o.E)(s,0,i),r=(0,o.E)(r,0,i),this._offsets={start:s,end:r,factor:1/(s+1+r)}}_generate(){const e=this._adapter,t=this.min,n=this.max,s=this.options,r=s.time,i=r.unit||Rn(r.minUnit,t,n,this._getLabelCapacity(t)),a=(0,o.v)(r.stepSize,1),l="week"===i&&r.isoWeekday,c=(0,o.x)(l)||!0===l,u={};let d,h,p=t;if(c&&(p=+e.startOf(p,"isoWeek",l)),p=+e.startOf(p,c?"day":i),e.diff(n,t,i)>1e5*a)throw new Error(t+" and "+n+" are too far apart with stepSize of "+a+" "+i);const f="data"===s.ticks.source&&this.getDataTimestamps();for(d=p,h=0;d<n;d=+e.add(d,a,i),h++)Ln(u,d,f);return d!==n&&"ticks"!==s.bounds&&1!==h||Ln(u,d,f),Object.keys(u).sort(((e,t)=>e-t)).map((e=>+e))}getLabelForValue(e){const t=this._adapter,n=this.options.time;return n.tooltipFormat?t.format(e,n.tooltipFormat):t.format(e,n.displayFormats.datetime)}_tickFormatFunction(e,t,n,s){const r=this.options,i=r.time.displayFormats,a=this._unit,l=this._majorUnit,c=a&&i[a],u=l&&i[l],d=n[t],h=l&&u&&d&&d.major,p=this._adapter.format(e,s||(h?u:c)),f=r.ticks.callback;return f?(0,o.C)(f,[p,t,n],this):p}generateTickLabels(e){let t,n,o;for(t=0,n=e.length;t<n;++t)o=e[t],o.label=this._tickFormatFunction(o.value,t,e)}getDecimalForValue(e){return null===e?NaN:(e-this.min)/(this.max-this.min)}getPixelForValue(e){const t=this._offsets,n=this.getDecimalForValue(e);return this.getPixelForDecimal((t.start+n)*t.factor)}getValueForPixel(e){const t=this._offsets,n=this.getDecimalForPixel(e)/t.factor-t.end;return this.min+n*(this.max-this.min)}_getLabelSize(e){const t=this.options.ticks,n=this.ctx.measureText(e).width,s=(0,o.t)(this.isHorizontal()?t.maxRotation:t.minRotation),r=Math.cos(s),i=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:n*r+a*i,h:n*i+a*r}}_getLabelCapacity(e){const t=this.options.time,n=t.displayFormats,o=n[t.unit]||n.millisecond,s=this._tickFormatFunction(e,0,Dn(this,[e],this._majorUnit),o),r=this._getLabelSize(s),i=Math.floor(this.isHorizontal()?this.width/r.w:this.height/r.h)-1;return i>0?i:1}getDataTimestamps(){let e,t,n=this._cache.data||[];if(n.length)return n;const o=this.getMatchingVisibleMetas();if(this._normalized&&o.length)return this._cache.data=o[0].controller.getAllParsedValues(this);for(e=0,t=o.length;e<t;++e)n=n.concat(o[e].controller.getAllParsedValues(this));return this._cache.data=this.normalize(n)}getLabelTimestamps(){const e=this._cache.labels||[];let t,n;if(e.length)return e;const o=this.getLabels();for(t=0,n=o.length;t<n;++t)e.push(An(this,o[t]));return this._cache.labels=this._normalized?e:this.normalize(e)}normalize(e){return(0,o._)(e.sort(Mn))}}function In(e,t,n){let s,r,i,a,l=0,c=e.length-1;n?(t>=e[l].pos&&t<=e[c].pos&&({lo:l,hi:c}=(0,o.Z)(e,"pos",t)),({pos:s,time:i}=e[l]),({pos:r,time:a}=e[c])):(t>=e[l].time&&t<=e[c].time&&({lo:l,hi:c}=(0,o.Z)(e,"time",t)),({time:s,pos:i}=e[l]),({time:r,pos:a}=e[c]));const u=r-s;return u?i+(a-i)*(t-s)/u:i}Bn.id="time",Bn.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Nn extends Bn{constructor(e){super(e),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const e=this._getTimestampsForTable(),t=this._table=this.buildLookupTable(e);this._minPos=In(t,this.min),this._tableRange=In(t,this.max)-this._minPos,super.initOffsets(e)}buildLookupTable(e){const{min:t,max:n}=this,o=[],s=[];let r,i,a,l,c;for(r=0,i=e.length;r<i;++r)l=e[r],l>=t&&l<=n&&o.push(l);if(o.length<2)return[{time:t,pos:0},{time:n,pos:1}];for(r=0,i=o.length;r<i;++r)c=o[r+1],a=o[r-1],l=o[r],Math.round((c+a)/2)!==l&&s.push({time:l,pos:r/(i-1)});return s}_getTimestampsForTable(){let e=this._cache.all||[];if(e.length)return e;const t=this.getDataTimestamps(),n=this.getLabelTimestamps();return e=t.length&&n.length?this.normalize(t.concat(n)):t.length?t:n,e=this._cache.all=e,e}getDecimalForValue(e){return(In(this._table,e)-this._minPos)/this._tableRange}getValueForPixel(e){const t=this._offsets,n=this.getDecimalForPixel(e)/t.factor-t.end;return In(this._table,n*this._tableRange+this._minPos,!0)}}Nn.id="timeseries",Nn.defaults=Bn.defaults;var Fn=Object.freeze({__proto__:null,CategoryScale:gn,LinearScale:bn,LogarithmicScale:xn,RadialLinearScale:Cn,TimeScale:Bn,TimeSeriesScale:Nn});const Vn=[X,Ct,mn,Fn]},"./node_modules/chart.js/dist/chunks/helpers.segment.mjs":(e,t,n)=>{"use strict";function o(){}n.r(t),n.d(t,{$:()=>vt,A:()=>z,B:()=>c,C:()=>p,D:()=>Lt,E:()=>te,F:()=>q,G:()=>dt,H:()=>B,I:()=>ne,J:()=>pt,K:()=>Mt,L:()=>yt,M:()=>wt,N:()=>bt,O:()=>At,P:()=>M,Q:()=>f,R:()=>ge,S:()=>ve,T:()=>A,U:()=>rt,V:()=>b,W:()=>P,X:()=>dn,Y:()=>ie,Z:()=>re,_:()=>de,a:()=>Rt,a$:()=>Ot,a0:()=>J,a1:()=>pn,a2:()=>sn,a3:()=>gn,a4:()=>fe,a5:()=>mn,a6:()=>on,a7:()=>it,a8:()=>C,a9:()=>It,aA:()=>wn,aB:()=>Sn,aC:()=>ye,aD:()=>kn,aE:()=>gt,aF:()=>o,aG:()=>X,aH:()=>G,aI:()=>$,aJ:()=>W,aK:()=>U,aL:()=>K,aM:()=>ht,aN:()=>ae,aO:()=>se,aP:()=>nt,aQ:()=>st,aR:()=>g,aS:()=>y,aT:()=>x,aU:()=>w,aV:()=>j,aW:()=>ut,aX:()=>Zt,aY:()=>en,aZ:()=>ln,a_:()=>he,aa:()=>Bt,ab:()=>Nt,ac:()=>_,ad:()=>s,ae:()=>me,af:()=>fn,ag:()=>ft,ah:()=>E,ai:()=>m,aj:()=>T,ak:()=>oe,al:()=>Ct,am:()=>nn,an:()=>En,ao:()=>Cn,ap:()=>yn,aq:()=>bn,ar:()=>vn,as:()=>_t,at:()=>xt,au:()=>mt,av:()=>kt,aw:()=>Et,ax:()=>Tt,ay:()=>On,az:()=>Z,b:()=>i,b0:()=>R,b1:()=>L,b2:()=>D,b3:()=>I,b4:()=>N,b5:()=>Q,c:()=>ot,d:()=>ct,e:()=>ke,f:()=>k,g:()=>l,h:()=>Dt,i:()=>a,j:()=>O,k:()=>r,l:()=>ce,m:()=>d,n:()=>h,o:()=>xn,p:()=>ee,q:()=>be,r:()=>pe,s:()=>V,t:()=>Y,u:()=>ue,v:()=>u,w:()=>_e,x:()=>H,y:()=>Kt,z:()=>F});const s=function(){let e=0;return function(){return e++}}();function r(e){return null==e}function i(e){if(Array.isArray&&Array.isArray(e))return!0;const t=Object.prototype.toString.call(e);return"[object"===t.slice(0,7)&&"Array]"===t.slice(-6)}function a(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)}const l=e=>("number"==typeof e||e instanceof Number)&&isFinite(+e);function c(e,t){return l(e)?e:t}function u(e,t){return void 0===e?t:e}const d=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100:e/t,h=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100*t:+e;function p(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)}function f(e,t,n,o){let s,r,l;if(i(e))if(r=e.length,o)for(s=r-1;s>=0;s--)t.call(n,e[s],s);else for(s=0;s<r;s++)t.call(n,e[s],s);else if(a(e))for(l=Object.keys(e),r=l.length,s=0;s<r;s++)t.call(n,e[l[s]],l[s])}function m(e,t){let n,o,s,r;if(!e||!t||e.length!==t.length)return!1;for(n=0,o=e.length;n<o;++n)if(s=e[n],r=t[n],s.datasetIndex!==r.datasetIndex||s.index!==r.index)return!1;return!0}function g(e){if(i(e))return e.map(g);if(a(e)){const t=Object.create(null),n=Object.keys(e),o=n.length;let s=0;for(;s<o;++s)t[n[s]]=g(e[n[s]]);return t}return e}function v(e){return-1===["__proto__","prototype","constructor"].indexOf(e)}function y(e,t,n,o){if(!v(e))return;const s=t[e],r=n[e];a(s)&&a(r)?b(s,r,o):t[e]=g(r)}function b(e,t,n){const o=i(t)?t:[t],s=o.length;if(!a(e))return e;const r=(n=n||{}).merger||y;for(let i=0;i<s;++i){if(!a(t=o[i]))continue;const s=Object.keys(t);for(let o=0,i=s.length;o<i;++o)r(s[o],e,t,n)}return e}function _(e,t){return b(e,t,{merger:x})}function x(e,t,n){if(!v(e))return;const o=t[e],s=n[e];a(o)&&a(s)?_(o,s):Object.prototype.hasOwnProperty.call(t,e)||(t[e]=g(s))}function w(e,t,n,o){void 0!==t&&console.warn(e+': "'+n+'" is deprecated. Please use "'+o+'" instead')}const S={"":e=>e,x:e=>e.x,y:e=>e.y};function k(e,t){const n=S[t]||(S[t]=function(e){const t=j(e);return e=>{for(const n of t){if(""===n)break;e=e&&e[n]}return e}}(t));return n(e)}function j(e){const t=e.split("."),n=[];let o="";for(const e of t)o+=e,o.endsWith("\\")?o=o.slice(0,-1)+".":(n.push(o),o="");return n}function P(e){return e.charAt(0).toUpperCase()+e.slice(1)}const O=e=>void 0!==e,C=e=>"function"==typeof e,E=(e,t)=>{if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0};function T(e){return"mouseup"===e.type||"click"===e.type||"contextmenu"===e.type}const M=Math.PI,A=2*M,R=A+M,L=Number.POSITIVE_INFINITY,D=M/180,B=M/2,I=M/4,N=2*M/3,F=Math.log10,V=Math.sign;function $(e){const t=Math.round(e);e=U(e,t,e/1e3)?t:e;const n=Math.pow(10,Math.floor(F(e))),o=e/n;return(o<=1?1:o<=2?2:o<=5?5:10)*n}function z(e){const t=[],n=Math.sqrt(e);let o;for(o=1;o<n;o++)e%o==0&&(t.push(o),t.push(e/o));return n===(0|n)&&t.push(n),t.sort(((e,t)=>e-t)).pop(),t}function H(e){return!isNaN(parseFloat(e))&&isFinite(e)}function U(e,t,n){return Math.abs(e-t)<n}function W(e,t){const n=Math.round(e);return n-t<=e&&n+t>=e}function G(e,t,n){let o,s,r;for(o=0,s=e.length;o<s;o++)r=e[o][n],isNaN(r)||(t.min=Math.min(t.min,r),t.max=Math.max(t.max,r))}function Y(e){return e*(M/180)}function q(e){return e*(180/M)}function K(e){if(!l(e))return;let t=1,n=0;for(;Math.round(e*t)/t!==e;)t*=10,n++;return n}function J(e,t){const n=t.x-e.x,o=t.y-e.y,s=Math.sqrt(n*n+o*o);let r=Math.atan2(o,n);return r<-.5*M&&(r+=A),{angle:r,distance:s}}function X(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function Q(e,t){return(e-t+R)%A-M}function Z(e){return(e%A+A)%A}function ee(e,t,n,o){const s=Z(e),r=Z(t),i=Z(n),a=Z(r-s),l=Z(i-s),c=Z(s-r),u=Z(s-i);return s===r||s===i||o&&r===i||a>l&&c<u}function te(e,t,n){return Math.max(t,Math.min(n,e))}function ne(e){return te(e,-32768,32767)}function oe(e,t,n,o=1e-6){return e>=Math.min(t,n)-o&&e<=Math.max(t,n)+o}function se(e,t,n){n=n||(n=>e[n]<t);let o,s=e.length-1,r=0;for(;s-r>1;)o=r+s>>1,n(o)?r=o:s=o;return{lo:r,hi:s}}const re=(e,t,n,o)=>se(e,n,o?o=>e[o][t]<=n:o=>e[o][t]<n),ie=(e,t,n)=>se(e,n,(o=>e[o][t]>=n));function ae(e,t,n){let o=0,s=e.length;for(;o<s&&e[o]<t;)o++;for(;s>o&&e[s-1]>n;)s--;return o>0||s<e.length?e.slice(o,s):e}const le=["push","pop","shift","splice","unshift"];function ce(e,t){e._chartjs?e._chartjs.listeners.push(t):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),le.forEach((t=>{const n="_onData"+P(t),o=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value(...t){const s=o.apply(this,t);return e._chartjs.listeners.forEach((e=>{"function"==typeof e[n]&&e[n](...t)})),s}})})))}function ue(e,t){const n=e._chartjs;if(!n)return;const o=n.listeners,s=o.indexOf(t);-1!==s&&o.splice(s,1),o.length>0||(le.forEach((t=>{delete e[t]})),delete e._chartjs)}function de(e){const t=new Set;let n,o;for(n=0,o=e.length;n<o;++n)t.add(e[n]);return t.size===o?e:Array.from(t)}function he(e,t,n){return t+" "+e+"px "+n}const pe="undefined"==typeof window?function(e){return e()}:window.requestAnimationFrame;function fe(e,t,n){const o=n||(e=>Array.prototype.slice.call(e));let s=!1,r=[];return function(...n){r=o(n),s||(s=!0,pe.call(window,(()=>{s=!1,e.apply(t,r)})))}}function me(e,t){let n;return function(...o){return t?(clearTimeout(n),n=setTimeout(e,t,o)):e.apply(this,o),t}}const ge=e=>"start"===e?"left":"end"===e?"right":"center",ve=(e,t,n)=>"start"===e?t:"end"===e?n:(t+n)/2,ye=(e,t,n,o)=>e===(o?"left":"right")?n:"center"===e?(t+n)/2:t;function be(e,t,n){const o=t.length;let s=0,r=o;if(e._sorted){const{iScale:i,_parsed:a}=e,l=i.axis,{min:c,max:u,minDefined:d,maxDefined:h}=i.getUserBounds();d&&(s=te(Math.min(re(a,i.axis,c).lo,n?o:re(t,l,i.getPixelForValue(c)).lo),0,o-1)),r=h?te(Math.max(re(a,i.axis,u,!0).hi+1,n?0:re(t,l,i.getPixelForValue(u),!0).hi+1),s,o)-s:o-s}return{start:s,count:r}}function _e(e){const{xScale:t,yScale:n,_scaleRanges:o}=e,s={xmin:t.min,xmax:t.max,ymin:n.min,ymax:n.max};if(!o)return e._scaleRanges=s,!0;const r=o.xmin!==t.min||o.xmax!==t.max||o.ymin!==n.min||o.ymax!==n.max;return Object.assign(o,s),r}const xe=e=>0===e||1===e,we=(e,t,n)=>-Math.pow(2,10*(e-=1))*Math.sin((e-t)*A/n),Se=(e,t,n)=>Math.pow(2,-10*e)*Math.sin((e-t)*A/n)+1,ke={linear:e=>e,easeInQuad:e=>e*e,easeOutQuad:e=>-e*(e-2),easeInOutQuad:e=>(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1),easeInCubic:e=>e*e*e,easeOutCubic:e=>(e-=1)*e*e+1,easeInOutCubic:e=>(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2),easeInQuart:e=>e*e*e*e,easeOutQuart:e=>-((e-=1)*e*e*e-1),easeInOutQuart:e=>(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2),easeInQuint:e=>e*e*e*e*e,easeOutQuint:e=>(e-=1)*e*e*e*e+1,easeInOutQuint:e=>(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2),easeInSine:e=>1-Math.cos(e*B),easeOutSine:e=>Math.sin(e*B),easeInOutSine:e=>-.5*(Math.cos(M*e)-1),easeInExpo:e=>0===e?0:Math.pow(2,10*(e-1)),easeOutExpo:e=>1===e?1:1-Math.pow(2,-10*e),easeInOutExpo:e=>xe(e)?e:e<.5?.5*Math.pow(2,10*(2*e-1)):.5*(2-Math.pow(2,-10*(2*e-1))),easeInCirc:e=>e>=1?e:-(Math.sqrt(1-e*e)-1),easeOutCirc:e=>Math.sqrt(1-(e-=1)*e),easeInOutCirc:e=>(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1),easeInElastic:e=>xe(e)?e:we(e,.075,.3),easeOutElastic:e=>xe(e)?e:Se(e,.075,.3),easeInOutElastic(e){const t=.1125;return xe(e)?e:e<.5?.5*we(2*e,t,.45):.5+.5*Se(2*e-1,t,.45)},easeInBack(e){const t=1.70158;return e*e*((t+1)*e-t)},easeOutBack(e){const t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack(e){let t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:e=>1-ke.easeOutBounce(1-e),easeOutBounce(e){const t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375},easeInOutBounce:e=>e<.5?.5*ke.easeInBounce(2*e):.5*ke.easeOutBounce(2*e-1)+.5};function je(e){return e+.5|0}const Pe=(e,t,n)=>Math.max(Math.min(e,n),t);function Oe(e){return Pe(je(2.55*e),0,255)}function Ce(e){return Pe(je(255*e),0,255)}function Ee(e){return Pe(je(e/2.55)/100,0,1)}function Te(e){return Pe(je(100*e),0,100)}const Me={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},Ae=[..."0123456789ABCDEF"],Re=e=>Ae[15&e],Le=e=>Ae[(240&e)>>4]+Ae[15&e],De=e=>(240&e)>>4==(15&e);const Be=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Ie(e,t,n){const o=t*Math.min(n,1-n),s=(t,s=(t+e/30)%12)=>n-o*Math.max(Math.min(s-3,9-s,1),-1);return[s(0),s(8),s(4)]}function Ne(e,t,n){const o=(o,s=(o+e/60)%6)=>n-n*t*Math.max(Math.min(s,4-s,1),0);return[o(5),o(3),o(1)]}function Fe(e,t,n){const o=Ie(e,1,.5);let s;for(t+n>1&&(s=1/(t+n),t*=s,n*=s),s=0;s<3;s++)o[s]*=1-t-n,o[s]+=t;return o}function Ve(e){const t=e.r/255,n=e.g/255,o=e.b/255,s=Math.max(t,n,o),r=Math.min(t,n,o),i=(s+r)/2;let a,l,c;return s!==r&&(c=s-r,l=i>.5?c/(2-s-r):c/(s+r),a=function(e,t,n,o,s){return e===s?(t-n)/o+(t<n?6:0):t===s?(n-e)/o+2:(e-t)/o+4}(t,n,o,c,s),a=60*a+.5),[0|a,l||0,i]}function $e(e,t,n,o){return(Array.isArray(t)?e(t[0],t[1],t[2]):e(t,n,o)).map(Ce)}function ze(e,t,n){return $e(Ie,e,t,n)}function He(e){return(e%360+360)%360}const Ue={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},We={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Ge;const Ye=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,qe=e=>e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055,Ke=e=>e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4);function Je(e,t,n){if(e){let o=Ve(e);o[t]=Math.max(0,Math.min(o[t]+o[t]*n,0===t?360:1)),o=ze(o),e.r=o[0],e.g=o[1],e.b=o[2]}}function Xe(e,t){return e?Object.assign(t||{},e):e}function Qe(e){var t={r:0,g:0,b:0,a:255};return Array.isArray(e)?e.length>=3&&(t={r:e[0],g:e[1],b:e[2],a:255},e.length>3&&(t.a=Ce(e[3]))):(t=Xe(e,{r:0,g:0,b:0,a:1})).a=Ce(t.a),t}function Ze(e){return"r"===e.charAt(0)?function(e){const t=Ye.exec(e);let n,o,s,r=255;if(t){if(t[7]!==n){const e=+t[7];r=t[8]?Oe(e):Pe(255*e,0,255)}return n=+t[1],o=+t[3],s=+t[5],n=255&(t[2]?Oe(n):Pe(n,0,255)),o=255&(t[4]?Oe(o):Pe(o,0,255)),s=255&(t[6]?Oe(s):Pe(s,0,255)),{r:n,g:o,b:s,a:r}}}(e):function(e){const t=Be.exec(e);let n,o=255;if(!t)return;t[5]!==n&&(o=t[6]?Oe(+t[5]):Ce(+t[5]));const s=He(+t[2]),r=+t[3]/100,i=+t[4]/100;return n="hwb"===t[1]?function(e,t,n){return $e(Fe,e,t,n)}(s,r,i):"hsv"===t[1]?function(e,t,n){return $e(Ne,e,t,n)}(s,r,i):ze(s,r,i),{r:n[0],g:n[1],b:n[2],a:o}}(e)}class et{constructor(e){if(e instanceof et)return e;const t=typeof e;let n;var o,s,r;"object"===t?n=Qe(e):"string"===t&&(r=(o=e).length,"#"===o[0]&&(4===r||5===r?s={r:255&17*Me[o[1]],g:255&17*Me[o[2]],b:255&17*Me[o[3]],a:5===r?17*Me[o[4]]:255}:7!==r&&9!==r||(s={r:Me[o[1]]<<4|Me[o[2]],g:Me[o[3]]<<4|Me[o[4]],b:Me[o[5]]<<4|Me[o[6]],a:9===r?Me[o[7]]<<4|Me[o[8]]:255})),n=s||function(e){Ge||(Ge=function(){const e={},t=Object.keys(We),n=Object.keys(Ue);let o,s,r,i,a;for(o=0;o<t.length;o++){for(i=a=t[o],s=0;s<n.length;s++)r=n[s],a=a.replace(r,Ue[r]);r=parseInt(We[i],16),e[a]=[r>>16&255,r>>8&255,255&r]}return e}(),Ge.transparent=[0,0,0,0]);const t=Ge[e.toLowerCase()];return t&&{r:t[0],g:t[1],b:t[2],a:4===t.length?t[3]:255}}(e)||Ze(e)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var e=Xe(this._rgb);return e&&(e.a=Ee(e.a)),e}set rgb(e){this._rgb=Qe(e)}rgbString(){return this._valid?(e=this._rgb)&&(e.a<255?`rgba(${e.r}, ${e.g}, ${e.b}, ${Ee(e.a)})`:`rgb(${e.r}, ${e.g}, ${e.b})`):void 0;var e}hexString(){return this._valid?(e=this._rgb,t=(e=>De(e.r)&&De(e.g)&&De(e.b)&&De(e.a))(e)?Re:Le,e?"#"+t(e.r)+t(e.g)+t(e.b)+((e,t)=>e<255?t(e):"")(e.a,t):void 0):void 0;var e,t}hslString(){return this._valid?function(e){if(!e)return;const t=Ve(e),n=t[0],o=Te(t[1]),s=Te(t[2]);return e.a<255?`hsla(${n}, ${o}%, ${s}%, ${Ee(e.a)})`:`hsl(${n}, ${o}%, ${s}%)`}(this._rgb):void 0}mix(e,t){if(e){const n=this.rgb,o=e.rgb;let s;const r=t===s?.5:t,i=2*r-1,a=n.a-o.a,l=((i*a==-1?i:(i+a)/(1+i*a))+1)/2;s=1-l,n.r=255&l*n.r+s*o.r+.5,n.g=255&l*n.g+s*o.g+.5,n.b=255&l*n.b+s*o.b+.5,n.a=r*n.a+(1-r)*o.a,this.rgb=n}return this}interpolate(e,t){return e&&(this._rgb=function(e,t,n){const o=Ke(Ee(e.r)),s=Ke(Ee(e.g)),r=Ke(Ee(e.b));return{r:Ce(qe(o+n*(Ke(Ee(t.r))-o))),g:Ce(qe(s+n*(Ke(Ee(t.g))-s))),b:Ce(qe(r+n*(Ke(Ee(t.b))-r))),a:e.a+n*(t.a-e.a)}}(this._rgb,e._rgb,t)),this}clone(){return new et(this.rgb)}alpha(e){return this._rgb.a=Ce(e),this}clearer(e){return this._rgb.a*=1-e,this}greyscale(){const e=this._rgb,t=je(.3*e.r+.59*e.g+.11*e.b);return e.r=e.g=e.b=t,this}opaquer(e){return this._rgb.a*=1+e,this}negate(){const e=this._rgb;return e.r=255-e.r,e.g=255-e.g,e.b=255-e.b,this}lighten(e){return Je(this._rgb,2,e),this}darken(e){return Je(this._rgb,2,-e),this}saturate(e){return Je(this._rgb,1,e),this}desaturate(e){return Je(this._rgb,1,-e),this}rotate(e){return function(e,t){var n=Ve(e);n[0]=He(n[0]+t),n=ze(n),e.r=n[0],e.g=n[1],e.b=n[2]}(this._rgb,e),this}}function tt(e){return new et(e)}function nt(e){if(e&&"object"==typeof e){const t=e.toString();return"[object CanvasPattern]"===t||"[object CanvasGradient]"===t}return!1}function ot(e){return nt(e)?e:tt(e)}function st(e){return nt(e)?e:tt(e).saturate(.5).darken(.1).hexString()}const rt=Object.create(null),it=Object.create(null);function at(e,t){if(!t)return e;const n=t.split(".");for(let t=0,o=n.length;t<o;++t){const o=n[t];e=e[o]||(e[o]=Object.create(null))}return e}function lt(e,t,n){return"string"==typeof t?b(at(e,t),n):b(at(e,""),t)}var ct=new class{constructor(e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=e=>e.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(e,t)=>st(t.backgroundColor),this.hoverBorderColor=(e,t)=>st(t.borderColor),this.hoverColor=(e,t)=>st(t.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(e)}set(e,t){return lt(this,e,t)}get(e){return at(this,e)}describe(e,t){return lt(it,e,t)}override(e,t){return lt(rt,e,t)}route(e,t,n,o){const s=at(this,e),r=at(this,n),i="_"+t;Object.defineProperties(s,{[i]:{value:s[t],writable:!0},[t]:{enumerable:!0,get(){const e=this[i],t=r[o];return a(e)?Object.assign({},t,e):u(e,t)},set(e){this[i]=e}}})}}({_scriptable:e=>!e.startsWith("on"),_indexable:e=>"events"!==e,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function ut(e){return!e||r(e.size)||r(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}function dt(e,t,n,o,s){let r=t[s];return r||(r=t[s]=e.measureText(s).width,n.push(s)),r>o&&(o=r),o}function ht(e,t,n,o){let s=(o=o||{}).data=o.data||{},r=o.garbageCollect=o.garbageCollect||[];o.font!==t&&(s=o.data={},r=o.garbageCollect=[],o.font=t),e.save(),e.font=t;let a=0;const l=n.length;let c,u,d,h,p;for(c=0;c<l;c++)if(h=n[c],null!=h&&!0!==i(h))a=dt(e,s,r,a,h);else if(i(h))for(u=0,d=h.length;u<d;u++)p=h[u],null==p||i(p)||(a=dt(e,s,r,a,p));e.restore();const f=r.length/2;if(f>n.length){for(c=0;c<f;c++)delete s[r[c]];r.splice(0,f)}return a}function pt(e,t,n){const o=e.currentDevicePixelRatio,s=0!==n?Math.max(n/2,.5):0;return Math.round((t-s)*o)/o+s}function ft(e,t){(t=t||e.getContext("2d")).save(),t.resetTransform(),t.clearRect(0,0,e.width,e.height),t.restore()}function mt(e,t,n,o){gt(e,t,n,o,null)}function gt(e,t,n,o,s){let r,i,a,l,c,u;const d=t.pointStyle,h=t.rotation,p=t.radius;let f=(h||0)*D;if(d&&"object"==typeof d&&(r=d.toString(),"[object HTMLImageElement]"===r||"[object HTMLCanvasElement]"===r))return e.save(),e.translate(n,o),e.rotate(f),e.drawImage(d,-d.width/2,-d.height/2,d.width,d.height),void e.restore();if(!(isNaN(p)||p<=0)){switch(e.beginPath(),d){default:s?e.ellipse(n,o,s/2,p,0,0,A):e.arc(n,o,p,0,A),e.closePath();break;case"triangle":e.moveTo(n+Math.sin(f)*p,o-Math.cos(f)*p),f+=N,e.lineTo(n+Math.sin(f)*p,o-Math.cos(f)*p),f+=N,e.lineTo(n+Math.sin(f)*p,o-Math.cos(f)*p),e.closePath();break;case"rectRounded":c=.516*p,l=p-c,i=Math.cos(f+I)*l,a=Math.sin(f+I)*l,e.arc(n-i,o-a,c,f-M,f-B),e.arc(n+a,o-i,c,f-B,f),e.arc(n+i,o+a,c,f,f+B),e.arc(n-a,o+i,c,f+B,f+M),e.closePath();break;case"rect":if(!h){l=Math.SQRT1_2*p,u=s?s/2:l,e.rect(n-u,o-l,2*u,2*l);break}f+=I;case"rectRot":i=Math.cos(f)*p,a=Math.sin(f)*p,e.moveTo(n-i,o-a),e.lineTo(n+a,o-i),e.lineTo(n+i,o+a),e.lineTo(n-a,o+i),e.closePath();break;case"crossRot":f+=I;case"cross":i=Math.cos(f)*p,a=Math.sin(f)*p,e.moveTo(n-i,o-a),e.lineTo(n+i,o+a),e.moveTo(n+a,o-i),e.lineTo(n-a,o+i);break;case"star":i=Math.cos(f)*p,a=Math.sin(f)*p,e.moveTo(n-i,o-a),e.lineTo(n+i,o+a),e.moveTo(n+a,o-i),e.lineTo(n-a,o+i),f+=I,i=Math.cos(f)*p,a=Math.sin(f)*p,e.moveTo(n-i,o-a),e.lineTo(n+i,o+a),e.moveTo(n+a,o-i),e.lineTo(n-a,o+i);break;case"line":i=s?s/2:Math.cos(f)*p,a=Math.sin(f)*p,e.moveTo(n-i,o-a),e.lineTo(n+i,o+a);break;case"dash":e.moveTo(n,o),e.lineTo(n+Math.cos(f)*p,o+Math.sin(f)*p)}e.fill(),t.borderWidth>0&&e.stroke()}}function vt(e,t,n){return n=n||.5,!t||e&&e.x>t.left-n&&e.x<t.right+n&&e.y>t.top-n&&e.y<t.bottom+n}function yt(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()}function bt(e){e.restore()}function _t(e,t,n,o,s){if(!t)return e.lineTo(n.x,n.y);if("middle"===s){const o=(t.x+n.x)/2;e.lineTo(o,t.y),e.lineTo(o,n.y)}else"after"===s!=!!o?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y);e.lineTo(n.x,n.y)}function xt(e,t,n,o){if(!t)return e.lineTo(n.x,n.y);e.bezierCurveTo(o?t.cp1x:t.cp2x,o?t.cp1y:t.cp2y,o?n.cp2x:n.cp1x,o?n.cp2y:n.cp1y,n.x,n.y)}function wt(e,t,n,o,s,a={}){const l=i(t)?t:[t],c=a.strokeWidth>0&&""!==a.strokeColor;let u,d;for(e.save(),e.font=s.string,function(e,t){t.translation&&e.translate(t.translation[0],t.translation[1]),r(t.rotation)||e.rotate(t.rotation),t.color&&(e.fillStyle=t.color),t.textAlign&&(e.textAlign=t.textAlign),t.textBaseline&&(e.textBaseline=t.textBaseline)}(e,a),u=0;u<l.length;++u)d=l[u],c&&(a.strokeColor&&(e.strokeStyle=a.strokeColor),r(a.strokeWidth)||(e.lineWidth=a.strokeWidth),e.strokeText(d,n,o,a.maxWidth)),e.fillText(d,n,o,a.maxWidth),St(e,n,o,d,a),o+=s.lineHeight;e.restore()}function St(e,t,n,o,s){if(s.strikethrough||s.underline){const r=e.measureText(o),i=t-r.actualBoundingBoxLeft,a=t+r.actualBoundingBoxRight,l=n-r.actualBoundingBoxAscent,c=n+r.actualBoundingBoxDescent,u=s.strikethrough?(l+c)/2:c;e.strokeStyle=e.fillStyle,e.beginPath(),e.lineWidth=s.decorationWidth||2,e.moveTo(i,u),e.lineTo(a,u),e.stroke()}}function kt(e,t){const{x:n,y:o,w:s,h:r,radius:i}=t;e.arc(n+i.topLeft,o+i.topLeft,i.topLeft,-B,M,!0),e.lineTo(n,o+r-i.bottomLeft),e.arc(n+i.bottomLeft,o+r-i.bottomLeft,i.bottomLeft,M,B,!0),e.lineTo(n+s-i.bottomRight,o+r),e.arc(n+s-i.bottomRight,o+r-i.bottomRight,i.bottomRight,B,0,!0),e.lineTo(n+s,o+i.topRight),e.arc(n+s-i.topRight,o+i.topRight,i.topRight,0,-B,!0),e.lineTo(n+i.topLeft,o)}const jt=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),Pt=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function Ot(e,t){const n=(""+e).match(jt);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e}function Ct(e,t){const n={},o=a(t),s=o?Object.keys(t):t,r=a(e)?o?n=>u(e[n],e[t[n]]):t=>e[t]:()=>e;for(const e of s)n[e]=+r(e)||0;return n}function Et(e){return Ct(e,{top:"y",right:"x",bottom:"y",left:"x"})}function Tt(e){return Ct(e,["topLeft","topRight","bottomLeft","bottomRight"])}function Mt(e){const t=Et(e);return t.width=t.left+t.right,t.height=t.top+t.bottom,t}function At(e,t){e=e||{},t=t||ct.font;let n=u(e.size,t.size);"string"==typeof n&&(n=parseInt(n,10));let o=u(e.style,t.style);o&&!(""+o).match(Pt)&&(console.warn('Invalid font style specified: "'+o+'"'),o="");const s={family:u(e.family,t.family),lineHeight:Ot(u(e.lineHeight,t.lineHeight),n),size:n,style:o,weight:u(e.weight,t.weight),string:""};return s.string=ut(s),s}function Rt(e,t,n,o){let s,r,a,l=!0;for(s=0,r=e.length;s<r;++s)if(a=e[s],void 0!==a&&(void 0!==t&&"function"==typeof a&&(a=a(t),l=!1),void 0!==n&&i(a)&&(a=a[n%a.length],l=!1),void 0!==a))return o&&!l&&(o.cacheable=!1),a}function Lt(e,t,n){const{min:o,max:s}=e,r=h(t,(s-o)/2),i=(e,t)=>n&&0===e?0:e+t;return{min:i(o,-Math.abs(r)),max:i(s,r)}}function Dt(e,t){return Object.assign(Object.create(e),t)}function Bt(e,t=[""],n=e,o,s=(()=>e[0])){O(o)||(o=Yt("_fallback",e));const r={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:e,_rootScopes:n,_fallback:o,_getTarget:s,override:s=>Bt([s,...e],t,n,o)};return new Proxy(r,{deleteProperty:(t,n)=>(delete t[n],delete t._keys,delete e[0][n],!0),get:(n,o)=>$t(n,o,(()=>function(e,t,n,o){let s;for(const r of t)if(s=Yt(Ft(r,e),n),O(s))return Vt(e,s)?Wt(n,o,e,s):s}(o,t,e,n))),getOwnPropertyDescriptor:(e,t)=>Reflect.getOwnPropertyDescriptor(e._scopes[0],t),getPrototypeOf:()=>Reflect.getPrototypeOf(e[0]),has:(e,t)=>qt(e).includes(t),ownKeys:e=>qt(e),set(e,t,n){const o=e._storage||(e._storage=s());return e[t]=o[t]=n,delete e._keys,!0}})}function It(e,t,n,o){const s={_cacheable:!1,_proxy:e,_context:t,_subProxy:n,_stack:new Set,_descriptors:Nt(e,o),setContext:t=>It(e,t,n,o),override:s=>It(e.override(s),t,n,o)};return new Proxy(s,{deleteProperty:(t,n)=>(delete t[n],delete e[n],!0),get:(e,t,n)=>$t(e,t,(()=>function(e,t,n){const{_proxy:o,_context:s,_subProxy:r,_descriptors:l}=e;let c=o[t];return C(c)&&l.isScriptable(t)&&(c=function(e,t,n,o){const{_proxy:s,_context:r,_subProxy:i,_stack:a}=n;if(a.has(e))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+e);return a.add(e),t=t(r,i||o),a.delete(e),Vt(e,t)&&(t=Wt(s._scopes,s,e,t)),t}(t,c,e,n)),i(c)&&c.length&&(c=function(e,t,n,o){const{_proxy:s,_context:r,_subProxy:i,_descriptors:l}=n;if(O(r.index)&&o(e))t=t[r.index%t.length];else if(a(t[0])){const n=t,o=s._scopes.filter((e=>e!==n));t=[];for(const a of n){const n=Wt(o,s,e,a);t.push(It(n,r,i&&i[e],l))}}return t}(t,c,e,l.isIndexable)),Vt(t,c)&&(c=It(c,s,r&&r[t],l)),c}(e,t,n))),getOwnPropertyDescriptor:(t,n)=>t._descriptors.allKeys?Reflect.has(e,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(e,n),getPrototypeOf:()=>Reflect.getPrototypeOf(e),has:(t,n)=>Reflect.has(e,n),ownKeys:()=>Reflect.ownKeys(e),set:(t,n,o)=>(e[n]=o,delete t[n],!0)})}function Nt(e,t={scriptable:!0,indexable:!0}){const{_scriptable:n=t.scriptable,_indexable:o=t.indexable,_allKeys:s=t.allKeys}=e;return{allKeys:s,scriptable:n,indexable:o,isScriptable:C(n)?n:()=>n,isIndexable:C(o)?o:()=>o}}const Ft=(e,t)=>e?e+P(t):t,Vt=(e,t)=>a(t)&&"adapters"!==e&&(null===Object.getPrototypeOf(t)||t.constructor===Object);function $t(e,t,n){if(Object.prototype.hasOwnProperty.call(e,t))return e[t];const o=n();return e[t]=o,o}function zt(e,t,n){return C(e)?e(t,n):e}const Ht=(e,t)=>!0===e?t:"string"==typeof e?k(t,e):void 0;function Ut(e,t,n,o,s){for(const r of t){const t=Ht(n,r);if(t){e.add(t);const r=zt(t._fallback,n,s);if(O(r)&&r!==n&&r!==o)return r}else if(!1===t&&O(o)&&n!==o)return null}return!1}function Wt(e,t,n,o){const s=t._rootScopes,r=zt(t._fallback,n,o),l=[...e,...s],c=new Set;c.add(o);let u=Gt(c,l,n,r||n,o);return null!==u&&(!O(r)||r===n||(u=Gt(c,l,r,u,o),null!==u))&&Bt(Array.from(c),[""],s,r,(()=>function(e,t,n){const o=e._getTarget();t in o||(o[t]={});const s=o[t];return i(s)&&a(n)?n:s}(t,n,o)))}function Gt(e,t,n,o,s){for(;n;)n=Ut(e,t,n,o,s);return n}function Yt(e,t){for(const n of t){if(!n)continue;const t=n[e];if(O(t))return t}}function qt(e){let t=e._keys;return t||(t=e._keys=function(e){const t=new Set;for(const n of e)for(const e of Object.keys(n).filter((e=>!e.startsWith("_"))))t.add(e);return Array.from(t)}(e._scopes)),t}function Kt(e,t,n,o){const{iScale:s}=e,{key:r="r"}=this._parsing,i=new Array(o);let a,l,c,u;for(a=0,l=o;a<l;++a)c=a+n,u=t[c],i[a]={r:s.parse(k(u,r),c)};return i}const Jt=Number.EPSILON||1e-14,Xt=(e,t)=>t<e.length&&!e[t].skip&&e[t],Qt=e=>"x"===e?"y":"x";function Zt(e,t,n,o){const s=e.skip?t:e,r=t,i=n.skip?t:n,a=X(r,s),l=X(i,r);let c=a/(a+l),u=l/(a+l);c=isNaN(c)?0:c,u=isNaN(u)?0:u;const d=o*c,h=o*u;return{previous:{x:r.x-d*(i.x-s.x),y:r.y-d*(i.y-s.y)},next:{x:r.x+h*(i.x-s.x),y:r.y+h*(i.y-s.y)}}}function en(e,t="x"){const n=Qt(t),o=e.length,s=Array(o).fill(0),r=Array(o);let i,a,l,c=Xt(e,0);for(i=0;i<o;++i)if(a=l,l=c,c=Xt(e,i+1),l){if(c){const e=c[t]-l[t];s[i]=0!==e?(c[n]-l[n])/e:0}r[i]=a?c?V(s[i-1])!==V(s[i])?0:(s[i-1]+s[i])/2:s[i-1]:s[i]}!function(e,t,n){const o=e.length;let s,r,i,a,l,c=Xt(e,0);for(let u=0;u<o-1;++u)l=c,c=Xt(e,u+1),l&&c&&(U(t[u],0,Jt)?n[u]=n[u+1]=0:(s=n[u]/t[u],r=n[u+1]/t[u],a=Math.pow(s,2)+Math.pow(r,2),a<=9||(i=3/Math.sqrt(a),n[u]=s*i*t[u],n[u+1]=r*i*t[u])))}(e,s,r),function(e,t,n="x"){const o=Qt(n),s=e.length;let r,i,a,l=Xt(e,0);for(let c=0;c<s;++c){if(i=a,a=l,l=Xt(e,c+1),!a)continue;const s=a[n],u=a[o];i&&(r=(s-i[n])/3,a[`cp1${n}`]=s-r,a[`cp1${o}`]=u-r*t[c]),l&&(r=(l[n]-s)/3,a[`cp2${n}`]=s+r,a[`cp2${o}`]=u+r*t[c])}}(e,r,t)}function tn(e,t,n){return Math.max(Math.min(e,n),t)}function nn(e,t,n,o,s){let r,i,a,l;if(t.spanGaps&&(e=e.filter((e=>!e.skip))),"monotone"===t.cubicInterpolationMode)en(e,s);else{let n=o?e[e.length-1]:e[0];for(r=0,i=e.length;r<i;++r)a=e[r],l=Zt(n,a,e[Math.min(r+1,i-(o?0:1))%i],t.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,n=a}t.capBezierPoints&&function(e,t){let n,o,s,r,i,a=vt(e[0],t);for(n=0,o=e.length;n<o;++n)i=r,r=a,a=n<o-1&&vt(e[n+1],t),r&&(s=e[n],i&&(s.cp1x=tn(s.cp1x,t.left,t.right),s.cp1y=tn(s.cp1y,t.top,t.bottom)),a&&(s.cp2x=tn(s.cp2x,t.left,t.right),s.cp2y=tn(s.cp2y,t.top,t.bottom)))}(e,n)}function on(){return"undefined"!=typeof window&&"undefined"!=typeof document}function sn(e){let t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t}function rn(e,t,n){let o;return"string"==typeof e?(o=parseInt(e,10),-1!==e.indexOf("%")&&(o=o/100*t.parentNode[n])):o=e,o}const an=e=>window.getComputedStyle(e,null);function ln(e,t){return an(e).getPropertyValue(t)}const cn=["top","right","bottom","left"];function un(e,t,n){const o={};n=n?"-"+n:"";for(let s=0;s<4;s++){const r=cn[s];o[r]=parseFloat(e[t+"-"+r+n])||0}return o.width=o.left+o.right,o.height=o.top+o.bottom,o}function dn(e,t){if("native"in e)return e;const{canvas:n,currentDevicePixelRatio:o}=t,s=an(n),r="border-box"===s.boxSizing,i=un(s,"padding"),a=un(s,"border","width"),{x:l,y:c,box:u}=function(e,t){const n=e.touches,o=n&&n.length?n[0]:e,{offsetX:s,offsetY:r}=o;let i,a,l=!1;if(((e,t,n)=>(e>0||t>0)&&(!n||!n.shadowRoot))(s,r,e.target))i=s,a=r;else{const e=t.getBoundingClientRect();i=o.clientX-e.left,a=o.clientY-e.top,l=!0}return{x:i,y:a,box:l}}(e,n),d=i.left+(u&&a.left),h=i.top+(u&&a.top);let{width:p,height:f}=t;return r&&(p-=i.width+a.width,f-=i.height+a.height),{x:Math.round((l-d)/p*n.width/o),y:Math.round((c-h)/f*n.height/o)}}const hn=e=>Math.round(10*e)/10;function pn(e,t,n,o){const s=an(e),r=un(s,"margin"),i=rn(s.maxWidth,e,"clientWidth")||L,a=rn(s.maxHeight,e,"clientHeight")||L,l=function(e,t,n){let o,s;if(void 0===t||void 0===n){const r=sn(e);if(r){const e=r.getBoundingClientRect(),i=an(r),a=un(i,"border","width"),l=un(i,"padding");t=e.width-l.width-a.width,n=e.height-l.height-a.height,o=rn(i.maxWidth,r,"clientWidth"),s=rn(i.maxHeight,r,"clientHeight")}else t=e.clientWidth,n=e.clientHeight}return{width:t,height:n,maxWidth:o||L,maxHeight:s||L}}(e,t,n);let{width:c,height:u}=l;if("content-box"===s.boxSizing){const e=un(s,"border","width"),t=un(s,"padding");c-=t.width+e.width,u-=t.height+e.height}return c=Math.max(0,c-r.width),u=Math.max(0,o?Math.floor(c/o):u-r.height),c=hn(Math.min(c,i,l.maxWidth)),u=hn(Math.min(u,a,l.maxHeight)),c&&!u&&(u=hn(c/2)),{width:c,height:u}}function fn(e,t,n){const o=t||1,s=Math.floor(e.height*o),r=Math.floor(e.width*o);e.height=s/o,e.width=r/o;const i=e.canvas;return i.style&&(n||!i.style.height&&!i.style.width)&&(i.style.height=`${e.height}px`,i.style.width=`${e.width}px`),(e.currentDevicePixelRatio!==o||i.height!==s||i.width!==r)&&(e.currentDevicePixelRatio=o,i.height=s,i.width=r,e.ctx.setTransform(o,0,0,o,0,0),!0)}const mn=function(){let e=!1;try{const t={get passive(){return e=!0,!1}};window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(e){}return e}();function gn(e,t){const n=ln(e,t),o=n&&n.match(/^(\d+)(\.\d+)?px$/);return o?+o[1]:void 0}function vn(e,t,n,o){return{x:e.x+n*(t.x-e.x),y:e.y+n*(t.y-e.y)}}function yn(e,t,n,o){return{x:e.x+n*(t.x-e.x),y:"middle"===o?n<.5?e.y:t.y:"after"===o?n<1?e.y:t.y:n>0?t.y:e.y}}function bn(e,t,n,o){const s={x:e.cp2x,y:e.cp2y},r={x:t.cp1x,y:t.cp1y},i=vn(e,s,n),a=vn(s,r,n),l=vn(r,t,n),c=vn(i,a,n),u=vn(a,l,n);return vn(c,u,n)}const _n=new Map;function xn(e,t,n){return function(e,t){t=t||{};const n=e+JSON.stringify(t);let o=_n.get(n);return o||(o=new Intl.NumberFormat(e,t),_n.set(n,o)),o}(t,n).format(e)}function wn(e,t,n){return e?function(e,t){return{x:n=>e+e+t-n,setWidth(e){t=e},textAlign:e=>"center"===e?e:"right"===e?"left":"right",xPlus:(e,t)=>e-t,leftForLtr:(e,t)=>e-t}}(t,n):{x:e=>e,setWidth(e){},textAlign:e=>e,xPlus:(e,t)=>e+t,leftForLtr:(e,t)=>e}}function Sn(e,t){let n,o;"ltr"!==t&&"rtl"!==t||(n=e.canvas.style,o=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",t,"important"),e.prevTextDirection=o)}function kn(e,t){void 0!==t&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))}function jn(e){return"angle"===e?{between:ee,compare:Q,normalize:Z}:{between:oe,compare:(e,t)=>e-t,normalize:e=>e}}function Pn({start:e,end:t,count:n,loop:o,style:s}){return{start:e%n,end:t%n,loop:o&&(t-e+1)%n==0,style:s}}function On(e,t,n){if(!n)return[e];const{property:o,start:s,end:r}=n,i=t.length,{compare:a,between:l,normalize:c}=jn(o),{start:u,end:d,loop:h,style:p}=function(e,t,n){const{property:o,start:s,end:r}=n,{between:i,normalize:a}=jn(o),l=t.length;let c,u,{start:d,end:h,loop:p}=e;if(p){for(d+=l,h+=l,c=0,u=l;c<u&&i(a(t[d%l][o]),s,r);++c)d--,h--;d%=l,h%=l}return h<d&&(h+=l),{start:d,end:h,loop:p,style:e.style}}(e,t,n),f=[];let m,g,v,y=!1,b=null;for(let e=u,n=u;e<=d;++e)g=t[e%i],g.skip||(m=c(g[o]),m!==v&&(y=l(m,s,r),null===b&&(y||l(s,v,m)&&0!==a(s,v))&&(b=0===a(m,s)?e:n),null!==b&&(!y||0===a(r,m)||l(r,v,m))&&(f.push(Pn({start:b,end:e,loop:h,count:i,style:p})),b=null),n=e,v=m));return null!==b&&f.push(Pn({start:b,end:d,loop:h,count:i,style:p})),f}function Cn(e,t){const n=[],o=e.segments;for(let s=0;s<o.length;s++){const r=On(o[s],e.points,t);r.length&&n.push(...r)}return n}function En(e,t){const n=e.points,o=e.options.spanGaps,s=n.length;if(!s)return[];const r=!!e._loop,{start:i,end:a}=function(e,t,n,o){let s=0,r=t-1;if(n&&!o)for(;s<t&&!e[s].skip;)s++;for(;s<t&&e[s].skip;)s++;for(s%=t,n&&(r+=s);r>s&&e[r%t].skip;)r--;return r%=t,{start:s,end:r}}(n,s,r,o);return Tn(e,!0===o?[{start:i,end:a,loop:r}]:function(e,t,n,o){const s=e.length,r=[];let i,a=t,l=e[t];for(i=t+1;i<=n;++i){const n=e[i%s];n.skip||n.stop?l.skip||(o=!1,r.push({start:t%s,end:(i-1)%s,loop:o}),t=a=n.stop?i:null):(a=i,l.skip&&(t=i)),l=n}return null!==a&&r.push({start:t%s,end:a%s,loop:o}),r}(n,i,a<i?a+s:a,!!e._fullLoop&&0===i&&a===s-1),n,t)}function Tn(e,t,n,o){return o&&o.setContext&&n?function(e,t,n,o){const s=e._chart.getContext(),r=Mn(e.options),{_datasetIndex:i,options:{spanGaps:a}}=e,l=n.length,c=[];let u=r,d=t[0].start,h=d;function p(e,t,o,s){const r=a?-1:1;if(e!==t){for(e+=l;n[e%l].skip;)e-=r;for(;n[t%l].skip;)t+=r;e%l!=t%l&&(c.push({start:e%l,end:t%l,loop:o,style:s}),u=s,d=t%l)}}for(const e of t){d=a?d:e.start;let t,r=n[d%l];for(h=d+1;h<=e.end;h++){const a=n[h%l];t=Mn(o.setContext(Dt(s,{type:"segment",p0:r,p1:a,p0DataIndex:(h-1)%l,p1DataIndex:h%l,datasetIndex:i}))),An(t,u)&&p(d,h-1,e.loop,u),r=a,u=t}d<h-1&&p(d,h-1,e.loop,u)}return c}(e,t,n,o):t}function Mn(e){return{backgroundColor:e.backgroundColor,borderCapStyle:e.borderCapStyle,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderJoinStyle:e.borderJoinStyle,borderWidth:e.borderWidth,borderColor:e.borderColor}}function An(e,t){return t&&JSON.stringify(e)!==JSON.stringify(t)}},"./node_modules/vue-router/dist/vue-router.mjs":(e,t,n)=>{"use strict";n.r(t),n.d(t,{NavigationFailureType:()=>I,RouterLink:()=>$e,RouterView:()=>We,START_LOCATION:()=>D,createMemoryHistory:()=>A,createRouter:()=>at,createRouterMatcher:()=>X,createWebHashHistory:()=>R,createWebHistory:()=>M,isNavigationFailure:()=>V,loadRouteLocation:()=>Fe,matchedRouteKey:()=>Ce,onBeforeRouteLeave:()=>De,onBeforeRouteUpdate:()=>Be,parseQuery:()=>je,routeLocationKey:()=>Me,routerKey:()=>Te,routerViewLocationKey:()=>Ae,stringifyQuery:()=>Pe,useLink:()=>Ve,useRoute:()=>ut,useRouter:()=>ct,viewDepthKey:()=>Ee});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/index.js");const r="undefined"!=typeof window;function i(e){return e.__esModule||"Module"===e[Symbol.toStringTag]}const a=Object.assign;function l(e,t){const n={};for(const o in t){const s=t[o];n[o]=u(s)?s.map(e):e(s)}return n}const c=()=>{},u=Array.isArray;function d(e){const t=Array.from(arguments).slice(1);console.warn.apply(console,["[Vue Router warn]: "+e].concat(t))}const h=/\/$/;function p(e,t,n="/"){let o,s={},r="",i="";const a=t.indexOf("#");let l=t.indexOf("?");return a<l&&a>=0&&(l=-1),l>-1&&(o=t.slice(0,l),r=t.slice(l+1,a>-1?a:t.length),s=e(r)),a>-1&&(o=o||t.slice(0,a),i=t.slice(a,t.length)),o=function(e,t){if(e.startsWith("/"))return e;if(!t.startsWith("/"))return d(`Cannot resolve a relative location without an absolute path. Trying to resolve "${e}" from "${t}". It should look like "/${t}".`),e;if(!e)return t;const n=t.split("/"),o=e.split("/");let s,r,i=n.length-1;for(s=0;s<o.length;s++)if(r=o[s],"."!==r){if(".."!==r)break;i>1&&i--}return n.slice(0,i).join("/")+"/"+o.slice(s-(s===o.length?1:0)).join("/")}(null!=o?o:t,n),{fullPath:o+(r&&"?")+r+i,path:o,query:s,hash:i}}function f(e,t){return t&&e.toLowerCase().startsWith(t.toLowerCase())?e.slice(t.length)||"/":e}function m(e,t,n){const o=t.matched.length-1,s=n.matched.length-1;return o>-1&&o===s&&g(t.matched[o],n.matched[s])&&v(t.params,n.params)&&e(t.query)===e(n.query)&&t.hash===n.hash}function g(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function v(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(!y(e[n],t[n]))return!1;return!0}function y(e,t){return u(e)?b(e,t):u(t)?b(t,e):e===t}function b(e,t){return u(t)?e.length===t.length&&e.every(((e,n)=>e===t[n])):1===e.length&&e[0]===t}var _,x;function w(e){if(!e)if(r){const t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return"/"!==e[0]&&"#"!==e[0]&&(e="/"+e),e.replace(h,"")}!function(e){e.pop="pop",e.push="push"}(_||(_={})),function(e){e.back="back",e.forward="forward",e.unknown=""}(x||(x={}));const S=/^[^#]+#/;function k(e,t){return e.replace(S,"#")+t}const j=()=>({left:window.pageXOffset,top:window.pageYOffset});function P(e,t){return(history.state?history.state.position-t:-1)+e}const O=new Map;let C=()=>location.protocol+"//"+location.host;function E(e,t){const{pathname:n,search:o,hash:s}=t,r=e.indexOf("#");if(r>-1){let t=s.includes(e.slice(r))?e.slice(r).length:1,n=s.slice(t);return"/"!==n[0]&&(n="/"+n),f(n,"")}return f(n,e)+o+s}function T(e,t,n,o=!1,s=!1){return{back:e,current:t,forward:n,replaced:o,position:window.history.length,scroll:s?j():null}}function M(e){const t=function(e){const{history:t,location:n}=window,o={value:E(e,n)},s={value:t.state};function r(o,r,i){const a=e.indexOf("#"),l=a>-1?(n.host&&document.querySelector("base")?e:e.slice(a))+o:C()+e+o;try{t[i?"replaceState":"pushState"](r,"",l),s.value=r}catch(e){d("Error with push/replace State",e),n[i?"replace":"assign"](l)}}return s.value||r(o.value,{back:null,current:o.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0),{location:o,state:s,push:function(e,n){const i=a({},s.value,t.state,{forward:e,scroll:j()});t.state||d("history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\n\nhistory.replaceState(history.state, '', url)\n\nYou can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state."),r(i.current,i,!0),r(e,a({},T(o.value,e,null),{position:i.position+1},n),!1),o.value=e},replace:function(e,n){r(e,a({},t.state,T(s.value.back,e,s.value.forward,!0),n,{position:s.value.position}),!0),o.value=e}}}(e=w(e)),n=function(e,t,n,o){let s=[],r=[],i=null;const l=({state:r})=>{const a=E(e,location),l=n.value,c=t.value;let u=0;if(r){if(n.value=a,t.value=r,i&&i===l)return void(i=null);u=c?r.position-c.position:0}else o(a);s.forEach((e=>{e(n.value,l,{delta:u,type:_.pop,direction:u?u>0?x.forward:x.back:x.unknown})}))};function c(){const{history:e}=window;e.state&&e.replaceState(a({},e.state,{scroll:j()}),"")}return window.addEventListener("popstate",l),window.addEventListener("beforeunload",c),{pauseListeners:function(){i=n.value},listen:function(e){s.push(e);const t=()=>{const t=s.indexOf(e);t>-1&&s.splice(t,1)};return r.push(t),t},destroy:function(){for(const e of r)e();r=[],window.removeEventListener("popstate",l),window.removeEventListener("beforeunload",c)}}}(e,t.state,t.location,t.replace),o=a({location:"",base:e,go:function(e,t=!0){t||n.pauseListeners(),history.go(e)},createHref:k.bind(null,e)},t,n);return Object.defineProperty(o,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(o,"state",{enumerable:!0,get:()=>t.state.value}),o}function A(e=""){let t=[],n=[""],o=0;function s(e){o++,o===n.length||n.splice(o),n.push(e)}const r={location:"",state:{},base:e=w(e),createHref:k.bind(null,e),replace(e){n.splice(o--,1),s(e)},push(e,t){s(e)},listen:e=>(t.push(e),()=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)}),destroy(){t=[],n=[""],o=0},go(e,s=!0){const r=this.location,i=e<0?x.back:x.forward;o=Math.max(0,Math.min(o+e,n.length-1)),s&&function(e,n,{direction:o,delta:s}){const r={direction:o,delta:s,type:_.pop};for(const o of t)o(e,n,r)}(this.location,r,{direction:i,delta:e})}};return Object.defineProperty(r,"location",{enumerable:!0,get:()=>n[o]}),r}function R(e){return(e=location.host?e||location.pathname+location.search:"").includes("#")||(e+="#"),e.endsWith("#/")||e.endsWith("#")||d(`A hash base must end with a "#":\n"${e}" should be "${e.replace(/#.*$/,"#")}".`),M(e)}function L(e){return"string"==typeof e||"symbol"==typeof e}const D={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},B=Symbol("navigation failure");var I;!function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"}(I||(I={}));const N={1:({location:e,currentLocation:t})=>`No match for\n ${JSON.stringify(e)}${t?"\nwhile being at\n"+JSON.stringify(t):""}`,2:({from:e,to:t})=>`Redirected from "${e.fullPath}" to "${function(e){if("string"==typeof e)return e;if("path"in e)return e.path;const t={};for(const n of $)n in e&&(t[n]=e[n]);return JSON.stringify(t,null,2)}(t)}" via a navigation guard.`,4:({from:e,to:t})=>`Navigation aborted from "${e.fullPath}" to "${t.fullPath}" via a navigation guard.`,8:({from:e,to:t})=>`Navigation cancelled from "${e.fullPath}" to "${t.fullPath}" with a new navigation.`,16:({from:e,to:t})=>`Avoided redundant navigation to current location: "${e.fullPath}".`};function F(e,t){return a(new Error(N[e](t)),{type:e,[B]:!0},t)}function V(e,t){return e instanceof Error&&B in e&&(null==t||!!(e.type&t))}const $=["params","query","hash"],z="[^/]+?",H={sensitive:!1,strict:!1,start:!0,end:!0},U=/[.+*?^${}()[\]/\\]/g;function W(e,t){let n=0;for(;n<e.length&&n<t.length;){const o=t[n]-e[n];if(o)return o;n++}return e.length<t.length?1===e.length&&80===e[0]?-1:1:e.length>t.length?1===t.length&&80===t[0]?1:-1:0}function G(e,t){let n=0;const o=e.score,s=t.score;for(;n<o.length&&n<s.length;){const e=W(o[n],s[n]);if(e)return e;n++}if(1===Math.abs(s.length-o.length)){if(Y(o))return 1;if(Y(s))return-1}return s.length-o.length}function Y(e){const t=e[e.length-1];return e.length>0&&t[t.length-1]<0}const q={type:0,value:""},K=/[a-zA-Z0-9_]/;function J(e,t,n){const o=function(e,t){const n=a({},H,t),o=[];let s=n.start?"^":"";const r=[];for(const t of e){const e=t.length?[]:[90];n.strict&&!t.length&&(s+="/");for(let o=0;o<t.length;o++){const i=t[o];let a=40+(n.sensitive?.25:0);if(0===i.type)o||(s+="/"),s+=i.value.replace(U,"\\$&"),a+=40;else if(1===i.type){const{value:e,repeatable:n,optional:l,regexp:c}=i;r.push({name:e,repeatable:n,optional:l});const u=c||z;if(u!==z){a+=10;try{new RegExp(`(${u})`)}catch(t){throw new Error(`Invalid custom RegExp for param "${e}" (${u}): `+t.message)}}let d=n?`((?:${u})(?:/(?:${u}))*)`:`(${u})`;o||(d=l&&t.length<2?`(?:/${d})`:"/"+d),l&&(d+="?"),s+=d,a+=20,l&&(a+=-8),n&&(a+=-20),".*"===u&&(a+=-50)}e.push(a)}o.push(e)}if(n.strict&&n.end){const e=o.length-1;o[e][o[e].length-1]+=.7000000000000001}n.strict||(s+="/?"),n.end?s+="$":n.strict&&(s+="(?:/|$)");const i=new RegExp(s,n.sensitive?"":"i");return{re:i,score:o,keys:r,parse:function(e){const t=e.match(i),n={};if(!t)return null;for(let e=1;e<t.length;e++){const o=t[e]||"",s=r[e-1];n[s.name]=o&&s.repeatable?o.split("/"):o}return n},stringify:function(t){let n="",o=!1;for(const s of e){o&&n.endsWith("/")||(n+="/"),o=!1;for(const e of s)if(0===e.type)n+=e.value;else if(1===e.type){const{value:r,repeatable:i,optional:a}=e,l=r in t?t[r]:"";if(u(l)&&!i)throw new Error(`Provided param "${r}" is an array but it is not repeatable (* or + modifiers)`);const c=u(l)?l.join("/"):l;if(!c){if(!a)throw new Error(`Missing required param "${r}"`);s.length<2&&(n.endsWith("/")?n=n.slice(0,-1):o=!0)}n+=c}}return n||"/"}}}(function(e){if(!e)return[[]];if("/"===e)return[[q]];if(!e.startsWith("/"))throw new Error(`Route paths should start with a "/": "${e}" should be "/${e}".`);function t(e){throw new Error(`ERR (${n})/"${c}": ${e}`)}let n=0,o=n;const s=[];let r;function i(){r&&s.push(r),r=[]}let a,l=0,c="",u="";function d(){c&&(0===n?r.push({type:0,value:c}):1===n||2===n||3===n?(r.length>1&&("*"===a||"+"===a)&&t(`A repeatable param (${c}) must be alone in its segment. eg: '/:ids+.`),r.push({type:1,value:c,regexp:u,repeatable:"*"===a||"+"===a,optional:"*"===a||"?"===a})):t("Invalid state to consume buffer"),c="")}function h(){c+=a}for(;l<e.length;)if(a=e[l++],"\\"!==a||2===n)switch(n){case 0:"/"===a?(c&&d(),i()):":"===a?(d(),n=1):h();break;case 4:h(),n=o;break;case 1:"("===a?n=2:K.test(a)?h():(d(),n=0,"*"!==a&&"?"!==a&&"+"!==a&&l--);break;case 2:")"===a?"\\"==u[u.length-1]?u=u.slice(0,-1)+a:n=3:u+=a;break;case 3:d(),n=0,"*"!==a&&"?"!==a&&"+"!==a&&l--,u="";break;default:t("Unknown state")}else o=n,n=4;return 2===n&&t(`Unfinished custom RegExp for param "${c}"`),d(),i(),s}(e.path),n);{const t=new Set;for(const n of o.keys)t.has(n.name)&&d(`Found duplicated params with name "${n.name}" for path "${e.path}". Only the last one will be available on "$route.params".`),t.add(n.name)}const s=a(o,{record:e,parent:t,children:[],alias:[]});return t&&!s.record.aliasOf==!t.record.aliasOf&&t.children.push(s),s}function X(e,t){const n=[],o=new Map;function s(e,n,o){const l=!o,u=function(e){return{path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:void 0,beforeEnter:e.beforeEnter,props:Z(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||null:e.component&&{default:e.component}}}(e);(function(e,t){t&&t.record.name&&!e.name&&!e.path&&d(`The route named "${String(t.record.name)}" has a child without a name and an empty path. Using that name won't render the empty path child so you probably want to move the name to the child instead. If this is intentional, add a name to the child route to remove the warning.`)})(u,n),u.aliasOf=o&&o.record;const h=ne(t,e),p=[u];if("alias"in e){const t="string"==typeof e.alias?[e.alias]:e.alias;for(const e of t)p.push(a({},u,{components:o?o.record.components:u.components,path:e,aliasOf:o?o.record:u}))}let f,m;for(const t of p){const{path:a}=t;if(n&&"/"!==a[0]){const e=n.record.path,o="/"===e[e.length-1]?"":"/";t.path=n.record.path+(a&&o+a)}if("*"===t.path)throw new Error('Catch all routes ("*") must now be defined using a param with a custom regexp.\nSee more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');if(f=J(t,n,h),n&&"/"===a[0]&&re(f,n),o?(o.alias.push(f),se(o,f)):(m=m||f,m!==f&&m.alias.push(f),l&&e.name&&!ee(f)&&r(e.name)),u.children){const e=u.children;for(let t=0;t<e.length;t++)s(e[t],f,o&&o.children[t])}o=o||f,i(f)}return m?()=>{r(m)}:c}function r(e){if(L(e)){const t=o.get(e);t&&(o.delete(e),n.splice(n.indexOf(t),1),t.children.forEach(r),t.alias.forEach(r))}else{const t=n.indexOf(e);t>-1&&(n.splice(t,1),e.record.name&&o.delete(e.record.name),e.children.forEach(r),e.alias.forEach(r))}}function i(e){let t=0;for(;t<n.length&&G(e,n[t])>=0&&(e.record.path!==n[t].record.path||!ie(e,n[t]));)t++;n.splice(t,0,e),e.record.name&&!ee(e)&&o.set(e.record.name,e)}return t=ne({strict:!1,end:!0,sensitive:!1},t),e.forEach((e=>s(e))),{addRoute:s,resolve:function(e,t){let s,r,i,l={};if("name"in e&&e.name){if(s=o.get(e.name),!s)throw F(1,{location:e});{const t=Object.keys(e.params||{}).filter((e=>!s.keys.find((t=>t.name===e))));t.length&&d(`Discarded invalid param(s) "${t.join('", "')}" when navigating. See https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#414-2022-08-22 for more details.`)}i=s.record.name,l=a(Q(t.params,s.keys.filter((e=>!e.optional)).map((e=>e.name))),e.params&&Q(e.params,s.keys.map((e=>e.name)))),r=s.stringify(l)}else if("path"in e)r=e.path,r.startsWith("/")||d(`The Matcher cannot resolve relative paths but received "${r}". Unless you directly called \`matcher.resolve("${r}")\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/router.`),s=n.find((e=>e.re.test(r))),s&&(l=s.parse(r),i=s.record.name);else{if(s=t.name?o.get(t.name):n.find((e=>e.re.test(t.path))),!s)throw F(1,{location:e,currentLocation:t});i=s.record.name,l=a({},t.params,e.params),r=s.stringify(l)}const c=[];let u=s;for(;u;)c.unshift(u.record),u=u.parent;return{name:i,path:r,params:l,matched:c,meta:te(c)}},removeRoute:r,getRoutes:function(){return n},getRecordMatcher:function(e){return o.get(e)}}}function Q(e,t){const n={};for(const o of t)o in e&&(n[o]=e[o]);return n}function Z(e){const t={},n=e.props||!1;if("component"in e)t.default=n;else for(const o in e.components)t[o]="boolean"==typeof n?n:n[o];return t}function ee(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function te(e){return e.reduce(((e,t)=>a(e,t.meta)),{})}function ne(e,t){const n={};for(const o in e)n[o]=o in t?t[o]:e[o];return n}function oe(e,t){return e.name===t.name&&e.optional===t.optional&&e.repeatable===t.repeatable}function se(e,t){for(const n of e.keys)if(!n.optional&&!t.keys.find(oe.bind(null,n)))return d(`Alias "${t.record.path}" and the original record: "${e.record.path}" must have the exact same param named "${n.name}"`);for(const n of t.keys)if(!n.optional&&!e.keys.find(oe.bind(null,n)))return d(`Alias "${t.record.path}" and the original record: "${e.record.path}" must have the exact same param named "${n.name}"`)}function re(e,t){for(const n of t.keys)if(!e.keys.find(oe.bind(null,n)))return d(`Absolute path "${e.record.path}" must have the exact same param named "${n.name}" as its parent "${t.record.path}".`)}function ie(e,t){return t.children.some((t=>t===e||ie(e,t)))}const ae=/#/g,le=/&/g,ce=/\//g,ue=/=/g,de=/\?/g,he=/\+/g,pe=/%5B/g,fe=/%5D/g,me=/%5E/g,ge=/%60/g,ve=/%7B/g,ye=/%7C/g,be=/%7D/g,_e=/%20/g;function xe(e){return encodeURI(""+e).replace(ye,"|").replace(pe,"[").replace(fe,"]")}function we(e){return xe(e).replace(he,"%2B").replace(_e,"+").replace(ae,"%23").replace(le,"%26").replace(ge,"`").replace(ve,"{").replace(be,"}").replace(me,"^")}function Se(e){return null==e?"":function(e){return xe(e).replace(ae,"%23").replace(de,"%3F")}(e).replace(ce,"%2F")}function ke(e){try{return decodeURIComponent(""+e)}catch(t){d(`Error decoding "${e}". Using original value`)}return""+e}function je(e){const t={};if(""===e||"?"===e)return t;const n=("?"===e[0]?e.slice(1):e).split("&");for(let e=0;e<n.length;++e){const o=n[e].replace(he," "),s=o.indexOf("="),r=ke(s<0?o:o.slice(0,s)),i=s<0?null:ke(o.slice(s+1));if(r in t){let e=t[r];u(e)||(e=t[r]=[e]),e.push(i)}else t[r]=i}return t}function Pe(e){let t="";for(let n in e){const o=e[n];(n=we(n).replace(ue,"%3D"),null!=o)?(u(o)?o.map((e=>e&&we(e))):[o&&we(o)]).forEach((e=>{void 0!==e&&(t+=(t.length?"&":"")+n,null!=e&&(t+="="+e))})):void 0!==o&&(t+=(t.length?"&":"")+n)}return t}function Oe(e){const t={};for(const n in e){const o=e[n];void 0!==o&&(t[n]=u(o)?o.map((e=>null==e?null:""+e)):null==o?o:""+o)}return t}const Ce=Symbol("router view location matched"),Ee=Symbol("router view depth"),Te=Symbol("router"),Me=Symbol("route location"),Ae=Symbol("router view location");function Re(){let e=[];return{add:function(t){return e.push(t),()=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)}},list:()=>e,reset:function(){e=[]}}}function Le(e,t,n){const s=()=>{e[t].delete(n)};(0,o.onUnmounted)(s),(0,o.onDeactivated)(s),(0,o.onActivated)((()=>{e[t].add(n)})),e[t].add(n)}function De(e){if(!(0,o.getCurrentInstance)())return void d("getCurrentInstance() returned null. onBeforeRouteLeave() must be called at the top of a setup function");const t=(0,o.inject)(Ce,{}).value;t?Le(t,"leaveGuards",e):d("No active route record was found when calling `onBeforeRouteLeave()`. Make sure you call this function inside a component child of <router-view>. Maybe you called it inside of App.vue?")}function Be(e){if(!(0,o.getCurrentInstance)())return void d("getCurrentInstance() returned null. onBeforeRouteUpdate() must be called at the top of a setup function");const t=(0,o.inject)(Ce,{}).value;t?Le(t,"updateGuards",e):d("No active route record was found when calling `onBeforeRouteUpdate()`. Make sure you call this function inside a component child of <router-view>. Maybe you called it inside of App.vue?")}function Ie(e,t,n,o,s){const r=o&&(o.enterCallbacks[s]=o.enterCallbacks[s]||[]);return()=>new Promise(((i,a)=>{const l=e=>{var l;!1===e?a(F(4,{from:n,to:t})):e instanceof Error?a(e):"string"==typeof(l=e)||l&&"object"==typeof l?a(F(2,{from:t,to:e})):(r&&o.enterCallbacks[s]===r&&"function"==typeof e&&r.push(e),i())},c=e.call(o&&o.instances[s],t,n,function(e,t,n){let o=0;return function(){1==o++&&d(`The "next" callback was called more than once in one navigation guard when going from "${n.fullPath}" to "${t.fullPath}". It should be called exactly one time in each navigation guard. This will fail in production.`),e._called=!0,1===o&&e.apply(null,arguments)}}(l,t,n));let u=Promise.resolve(c);if(e.length<3&&(u=u.then(l)),e.length>2){const t=`The "next" callback was never called inside of ${e.name?'"'+e.name+'"':""}:\n${e.toString()}\n. If you are returning a value instead of calling "next", make sure to remove the "next" parameter from your function.`;if("object"==typeof c&&"then"in c)u=u.then((e=>l._called?e:(d(t),Promise.reject(new Error("Invalid navigation guard")))));else if(void 0!==c&&!l._called)return d(t),void a(new Error("Invalid navigation guard"))}u.catch((e=>a(e)))}))}function Ne(e,t,n,o){const s=[];for(const a of e){a.components||a.children.length||d(`Record with path "${a.path}" is either missing a "component(s)" or "children" property.`);for(const e in a.components){let l=a.components[e];if(!l||"object"!=typeof l&&"function"!=typeof l)throw d(`Component "${e}" in record with path "${a.path}" is not a valid component. Received "${String(l)}".`),new Error("Invalid route component");if("then"in l){d(`Component "${e}" in record with path "${a.path}" is a Promise instead of a function that returns a Promise. Did you write "import('./MyPage.vue')" instead of "() => import('./MyPage.vue')" ? This will break in production if not fixed.`);const t=l;l=()=>t}else l.__asyncLoader&&!l.__warnedDefineAsync&&(l.__warnedDefineAsync=!0,d(`Component "${e}" in record with path "${a.path}" is defined using "defineAsyncComponent()". Write "() => import('./MyPage.vue')" instead of "defineAsyncComponent(() => import('./MyPage.vue'))".`));if("beforeRouteEnter"===t||a.instances[e])if("object"==typeof(r=l)||"displayName"in r||"props"in r||"__vccOpts"in r){const r=(l.__vccOpts||l)[t];r&&s.push(Ie(r,n,o,a,e))}else{let r=l();"catch"in r||(d(`Component "${e}" in record with path "${a.path}" is a function that does not return a Promise. If you were passing a functional component, make sure to add a "displayName" to the component. This will break in production if not fixed.`),r=Promise.resolve(r)),s.push((()=>r.then((s=>{if(!s)return Promise.reject(new Error(`Couldn't resolve component "${e}" at "${a.path}"`));const r=i(s)?s.default:s;a.components[e]=r;const l=(r.__vccOpts||r)[t];return l&&Ie(l,n,o,a,e)()}))))}}}var r;return s}function Fe(e){return e.matched.every((e=>e.redirect))?Promise.reject(new Error("Cannot load a route that redirects.")):Promise.all(e.matched.map((e=>e.components&&Promise.all(Object.keys(e.components).reduce(((t,n)=>{const o=e.components[n];return"function"!=typeof o||"displayName"in o||t.push(o().then((t=>{if(!t)return Promise.reject(new Error(`Couldn't resolve component "${n}" at "${e.path}". Ensure you passed a function that returns a promise.`));const o=i(t)?t.default:t;e.components[n]=o}))),t}),[]))))).then((()=>e))}function Ve(e){const t=(0,o.inject)(Te),n=(0,o.inject)(Me),s=(0,o.computed)((()=>t.resolve((0,o.unref)(e.to)))),i=(0,o.computed)((()=>{const{matched:e}=s.value,{length:t}=e,o=e[t-1],r=n.matched;if(!o||!r.length)return-1;const i=r.findIndex(g.bind(null,o));if(i>-1)return i;const a=ze(e[t-2]);return t>1&&ze(o)===a&&r[r.length-1].path!==a?r.findIndex(g.bind(null,e[t-2])):i})),a=(0,o.computed)((()=>i.value>-1&&function(e,t){for(const n in t){const o=t[n],s=e[n];if("string"==typeof o){if(o!==s)return!1}else if(!u(s)||s.length!==o.length||o.some(((e,t)=>e!==s[t])))return!1}return!0}(n.params,s.value.params))),l=(0,o.computed)((()=>i.value>-1&&i.value===n.matched.length-1&&v(n.params,s.value.params)));if(r){const e=(0,o.getCurrentInstance)();if(e){const t={route:s.value,isActive:a.value,isExactActive:l.value};e.__vrl_devtools=e.__vrl_devtools||[],e.__vrl_devtools.push(t),(0,o.watchEffect)((()=>{t.route=s.value,t.isActive=a.value,t.isExactActive=l.value}),{flush:"post"})}}return{route:s,href:(0,o.computed)((()=>s.value.href)),isActive:a,isExactActive:l,navigate:function(n={}){return function(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){const t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}(n)?t[(0,o.unref)(e.replace)?"replace":"push"]((0,o.unref)(e.to)).catch(c):Promise.resolve()}}}const $e=(0,o.defineComponent)({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Ve,setup(e,{slots:t}){const n=(0,o.reactive)(Ve(e)),{options:s}=(0,o.inject)(Te),r=(0,o.computed)((()=>({[He(e.activeClass,s.linkActiveClass,"router-link-active")]:n.isActive,[He(e.exactActiveClass,s.linkExactActiveClass,"router-link-exact-active")]:n.isExactActive})));return()=>{const s=t.default&&t.default(n);return e.custom?s:(0,o.h)("a",{"aria-current":n.isExactActive?e.ariaCurrentValue:null,href:n.href,onClick:n.navigate,class:r.value},s)}}});function ze(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const He=(e,t,n)=>null!=e?e:null!=t?t:n;function Ue(e,t){if(!e)return null;const n=e(t);return 1===n.length?n[0]:n}const We=(0,o.defineComponent)({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(e,{attrs:t,slots:n}){!function(){const e=(0,o.getCurrentInstance)(),t=e.parent&&e.parent.type.name;if(t&&("KeepAlive"===t||t.includes("Transition"))){const e="KeepAlive"===t?"keep-alive":"transition";d(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.\nUse slot props instead:\n\n<router-view v-slot="{ Component }">\n  <${e}>\n    <component :is="Component" />\n  </${e}>\n</router-view>`)}}();const s=(0,o.inject)(Ae),i=(0,o.computed)((()=>e.route||s.value)),l=(0,o.inject)(Ee,0),c=(0,o.computed)((()=>{let e=(0,o.unref)(l);const{matched:t}=i.value;let n;for(;(n=t[e])&&!n.components;)e++;return e})),h=(0,o.computed)((()=>i.value.matched[c.value]));(0,o.provide)(Ee,(0,o.computed)((()=>c.value+1))),(0,o.provide)(Ce,h),(0,o.provide)(Ae,i);const p=(0,o.ref)();return(0,o.watch)((()=>[p.value,h.value,e.name]),(([e,t,n],[o,s,r])=>{t&&(t.instances[n]=e,s&&s!==t&&e&&e===o&&(t.leaveGuards.size||(t.leaveGuards=s.leaveGuards),t.updateGuards.size||(t.updateGuards=s.updateGuards))),!e||!t||s&&g(t,s)&&o||(t.enterCallbacks[n]||[]).forEach((t=>t(e)))}),{flush:"post"}),()=>{const s=i.value,l=e.name,d=h.value,f=d&&d.components[l];if(!f)return Ue(n.default,{Component:f,route:s});const m=d.props[l],g=m?!0===m?s.params:"function"==typeof m?m(s):m:null,v=(0,o.h)(f,a({},g,t,{onVnodeUnmounted:e=>{e.component.isUnmounted&&(d.instances[l]=null)},ref:p}));if(r&&v.ref){const e={depth:c.value,name:d.name,path:d.path,meta:d.meta};(u(v.ref)?v.ref.map((e=>e.i)):[v.ref.i]).forEach((t=>{t.__vrv_devtools=e}))}return Ue(n.default,{Component:v,route:s})||v}}});function Ge(e,t){const n=a({},e,{matched:e.matched.map((e=>function(e,t){const n={};for(const o in e)t.includes(o)||(n[o]=e[o]);return n}(e,["instances","children","aliasOf"])))});return{_custom:{type:null,readOnly:!0,display:e.fullPath,tooltip:t,value:n}}}function Ye(e){return{_custom:{display:e}}}let qe=0;function Ke(e,t,n){if(t.__hasDevtools)return;t.__hasDevtools=!0;const r=qe++;(0,s.setupDevtoolsPlugin)({id:"org.vuejs.router"+(r?"."+r:""),label:"Vue Router",packageName:"vue-router",homepage:"https://router.vuejs.org",logo:"https://router.vuejs.org/logo.png",componentStateTypes:["Routing"],app:e},(s=>{"function"!=typeof s.now&&console.warn("[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html."),s.on.inspectComponent(((e,n)=>{e.instanceData&&e.instanceData.state.push({type:"Routing",key:"$route",editable:!1,value:Ge(t.currentRoute.value,"Current Route")})})),s.on.visitComponentTree((({treeNode:e,componentInstance:t})=>{if(t.__vrv_devtools){const n=t.__vrv_devtools;e.tags.push({label:(n.name?`${n.name.toString()}: `:"")+n.path,textColor:0,tooltip:"This component is rendered by &lt;router-view&gt;",backgroundColor:Xe})}u(t.__vrl_devtools)&&(t.__devtoolsApi=s,t.__vrl_devtools.forEach((t=>{let n=et,o="";t.isExactActive?(n=Ze,o="This is exactly active"):t.isActive&&(n=Qe,o="This link is active"),e.tags.push({label:t.route.path,textColor:0,tooltip:o,backgroundColor:n})})))})),(0,o.watch)(t.currentRoute,(()=>{c(),s.notifyComponentUpdate(),s.sendInspectorTree(l),s.sendInspectorState(l)}));const i="router:navigations:"+r;s.addTimelineLayer({id:i,label:`Router${r?" "+r:""} Navigations`,color:4237508}),t.onError(((e,t)=>{s.addTimelineEvent({layerId:i,event:{title:"Error during Navigation",subtitle:t.fullPath,logType:"error",time:s.now(),data:{error:e},groupId:t.meta.__navigationId}})}));let a=0;t.beforeEach(((e,t)=>{const n={guard:Ye("beforeEach"),from:Ge(t,"Current Location during this navigation"),to:Ge(e,"Target location")};Object.defineProperty(e.meta,"__navigationId",{value:a++}),s.addTimelineEvent({layerId:i,event:{time:s.now(),title:"Start of navigation",subtitle:e.fullPath,data:n,groupId:e.meta.__navigationId}})})),t.afterEach(((e,t,n)=>{const o={guard:Ye("afterEach")};n?(o.failure={_custom:{type:Error,readOnly:!0,display:n?n.message:"",tooltip:"Navigation Failure",value:n}},o.status=Ye("❌")):o.status=Ye("✅"),o.from=Ge(t,"Current Location during this navigation"),o.to=Ge(e,"Target location"),s.addTimelineEvent({layerId:i,event:{title:"End of navigation",subtitle:e.fullPath,time:s.now(),data:o,logType:n?"warning":"default",groupId:e.meta.__navigationId}})}));const l="router-inspector:"+r;function c(){if(!d)return;const e=d;let o=n.getRoutes().filter((e=>!e.parent));o.forEach(rt),e.filter&&(o=o.filter((t=>it(t,e.filter.toLowerCase())))),o.forEach((e=>st(e,t.currentRoute.value))),e.rootNodes=o.map(tt)}let d;s.addInspector({id:l,label:"Routes"+(r?" "+r:""),icon:"book",treeFilterPlaceholder:"Search routes"}),s.on.getInspectorTree((t=>{d=t,t.app===e&&t.inspectorId===l&&c()})),s.on.getInspectorState((t=>{if(t.app===e&&t.inspectorId===l){const e=n.getRoutes().find((e=>e.record.__vd_id===t.nodeId));e&&(t.state={options:Je(e)})}})),s.sendInspectorTree(l),s.sendInspectorState(l)}))}function Je(e){const{record:t}=e,n=[{editable:!1,key:"path",value:t.path}];return null!=t.name&&n.push({editable:!1,key:"name",value:t.name}),n.push({editable:!1,key:"regexp",value:e.re}),e.keys.length&&n.push({editable:!1,key:"keys",value:{_custom:{type:null,readOnly:!0,display:e.keys.map((e=>`${e.name}${function(e){return e.optional?e.repeatable?"*":"?":e.repeatable?"+":""}(e)}`)).join(" "),tooltip:"Param keys",value:e.keys}}}),null!=t.redirect&&n.push({editable:!1,key:"redirect",value:t.redirect}),e.alias.length&&n.push({editable:!1,key:"aliases",value:e.alias.map((e=>e.record.path))}),Object.keys(e.record.meta).length&&n.push({editable:!1,key:"meta",value:e.record.meta}),n.push({key:"score",editable:!1,value:{_custom:{type:null,readOnly:!0,display:e.score.map((e=>e.join(", "))).join(" | "),tooltip:"Score used to sort routes",value:e.score}}}),n}const Xe=15485081,Qe=2450411,Ze=8702998,et=16486972;function tt(e){const t=[],{record:n}=e;null!=n.name&&t.push({label:String(n.name),textColor:0,backgroundColor:2282478}),n.aliasOf&&t.push({label:"alias",textColor:0,backgroundColor:et}),e.__vd_match&&t.push({label:"matches",textColor:0,backgroundColor:Xe}),e.__vd_exactActive&&t.push({label:"exact",textColor:0,backgroundColor:Ze}),e.__vd_active&&t.push({label:"active",textColor:0,backgroundColor:Qe}),n.redirect&&t.push({label:"string"==typeof n.redirect?`redirect: ${n.redirect}`:"redirects",textColor:16777215,backgroundColor:6710886});let o=n.__vd_id;return null==o&&(o=String(nt++),n.__vd_id=o),{id:o,label:n.path,tags:t,children:e.children.map(tt)}}let nt=0;const ot=/^\/(.*)\/([a-z]*)$/;function st(e,t){const n=t.matched.length&&g(t.matched[t.matched.length-1],e.record);e.__vd_exactActive=e.__vd_active=n,n||(e.__vd_active=t.matched.some((t=>g(t,e.record)))),e.children.forEach((e=>st(e,t)))}function rt(e){e.__vd_match=!1,e.children.forEach(rt)}function it(e,t){const n=String(e.re).match(ot);if(e.__vd_match=!1,!n||n.length<3)return!1;if(new RegExp(n[1].replace(/\$$/,""),n[2]).test(t))return e.children.forEach((e=>it(e,t))),("/"!==e.record.path||"/"===t)&&(e.__vd_match=e.re.test(t),!0);const o=e.record.path.toLowerCase(),s=ke(o);return!(t.startsWith("/")||!s.includes(t)&&!o.includes(t))||!(!s.startsWith(t)&&!o.startsWith(t))||!(!e.record.name||!String(e.record.name).includes(t))||e.children.some((e=>it(e,t)))}function at(e){const t=X(e.routes,e),n=e.parseQuery||je,s=e.stringifyQuery||Pe,i=e.history;if(!i)throw new Error('Provide the "history" option when calling "createRouter()": https://next.router.vuejs.org/api/#history.');const h=Re(),f=Re(),v=Re(),y=(0,o.shallowRef)(D);let b=D;r&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const x=l.bind(null,(e=>""+e)),w=l.bind(null,Se),S=l.bind(null,ke);function k(e,o){if(o=a({},o||y.value),"string"==typeof e){const s=p(n,e,o.path),r=t.resolve({path:s.path},o),l=i.createHref(s.fullPath);return l.startsWith("//")?d(`Location "${e}" resolved to "${l}". A resolved location cannot start with multiple slashes.`):r.matched.length||d(`No match found for location with path "${e}"`),a(s,r,{params:S(r.params),hash:ke(s.hash),redirectedFrom:void 0,href:l})}let r;if("path"in e)"params"in e&&!("name"in e)&&Object.keys(e.params).length&&d(`Path "${e.path}" was passed with params but they will be ignored. Use a named route alongside params instead.`),r=a({},e,{path:p(n,e.path,o.path).path});else{const t=a({},e.params);for(const e in t)null==t[e]&&delete t[e];r=a({},e,{params:w(e.params)}),o.params=w(o.params)}const l=t.resolve(r,o),c=e.hash||"";c&&!c.startsWith("#")&&d(`A \`hash\` should always start with the character "#". Replace "${c}" with "#${c}".`),l.params=x(S(l.params));const u=function(e,t){const n=t.query?e(t.query):"";return t.path+(n&&"?")+n+(t.hash||"")}(s,a({},e,{hash:(h=c,xe(h).replace(ve,"{").replace(be,"}").replace(me,"^")),path:l.path}));var h;const f=i.createHref(u);return f.startsWith("//")?d(`Location "${e}" resolved to "${f}". A resolved location cannot start with multiple slashes.`):l.matched.length||d(`No match found for location with path "${"path"in e?e.path:e}"`),a({fullPath:u,hash:c,query:s===Pe?Oe(e.query):e.query||{}},l,{redirectedFrom:void 0,href:f})}function C(e){return"string"==typeof e?p(n,e,y.value.path):a({},e)}function E(e,t){if(b!==e)return F(8,{from:t,to:e})}function T(e){return A(e)}function M(e){const t=e.matched[e.matched.length-1];if(t&&t.redirect){const{redirect:n}=t;let o="function"==typeof n?n(e):n;if("string"==typeof o&&(o=o.includes("?")||o.includes("#")?o=C(o):{path:o},o.params={}),!("path"in o)&&!("name"in o))throw d(`Invalid redirect found:\n${JSON.stringify(o,null,2)}\n when navigating to "${e.fullPath}". A redirect must contain a name or path. This will break in production.`),new Error("Invalid redirect");return a({query:e.query,hash:e.hash,params:"path"in o?{}:e.params},o)}}function A(e,t){const n=b=k(e),o=y.value,r=e.state,i=e.force,l=!0===e.replace,c=M(n);if(c)return A(a(C(c),{state:"object"==typeof c?a({},r,c.state):r,force:i,replace:l}),t||n);const u=n;let h;return u.redirectedFrom=t,!i&&m(s,o,n)&&(h=F(16,{to:u,from:o}),Y(o,o,!0,!1)),(h?Promise.resolve(h):B(u,o)).catch((e=>V(e)?V(e,2)?e:G(e):W(e,u,o))).then((e=>{if(e){if(V(e,2))return m(s,k(e.to),u)&&t&&(t._count=t._count?t._count+1:1)>10?(d(`Detected an infinite redirection in a navigation guard when going from "${o.fullPath}" to "${u.fullPath}". Aborting to avoid a Stack Overflow. This will break in production if not fixed.`),Promise.reject(new Error("Infinite redirect in navigation guard"))):A(a({replace:l},C(e.to),{state:"object"==typeof e.to?a({},r,e.to.state):r,force:i}),t||u)}else e=N(u,o,!0,l,r);return I(u,o,e),e}))}function R(e,t){const n=E(e,t);return n?Promise.reject(n):Promise.resolve()}function B(e,t){let n;const[o,s,r]=function(e,t){const n=[],o=[],s=[],r=Math.max(t.matched.length,e.matched.length);for(let i=0;i<r;i++){const r=t.matched[i];r&&(e.matched.find((e=>g(e,r)))?o.push(r):n.push(r));const a=e.matched[i];a&&(t.matched.find((e=>g(e,a)))||s.push(a))}return[n,o,s]}(e,t);n=Ne(o.reverse(),"beforeRouteLeave",e,t);for(const s of o)s.leaveGuards.forEach((o=>{n.push(Ie(o,e,t))}));const i=R.bind(null,e,t);return n.push(i),lt(n).then((()=>{n=[];for(const o of h.list())n.push(Ie(o,e,t));return n.push(i),lt(n)})).then((()=>{n=Ne(s,"beforeRouteUpdate",e,t);for(const o of s)o.updateGuards.forEach((o=>{n.push(Ie(o,e,t))}));return n.push(i),lt(n)})).then((()=>{n=[];for(const o of e.matched)if(o.beforeEnter&&!t.matched.includes(o))if(u(o.beforeEnter))for(const s of o.beforeEnter)n.push(Ie(s,e,t));else n.push(Ie(o.beforeEnter,e,t));return n.push(i),lt(n)})).then((()=>(e.matched.forEach((e=>e.enterCallbacks={})),n=Ne(r,"beforeRouteEnter",e,t),n.push(i),lt(n)))).then((()=>{n=[];for(const o of f.list())n.push(Ie(o,e,t));return n.push(i),lt(n)})).catch((e=>V(e,8)?e:Promise.reject(e)))}function I(e,t,n){for(const o of v.list())o(e,t,n)}function N(e,t,n,o,s){const l=E(e,t);if(l)return l;const c=t===D,u=r?history.state:{};n&&(o||c?i.replace(e.fullPath,a({scroll:c&&u&&u.scroll},s)):i.push(e.fullPath,s)),y.value=e,Y(e,t,n,c),G()}let $;let z,H=Re(),U=Re();function W(e,t,n){G(e);const o=U.list();return o.length?o.forEach((o=>o(e,t,n))):(d("uncaught error during route navigation:"),console.error(e)),Promise.reject(e)}function G(e){return z||(z=!e,$||($=i.listen(((e,t,n)=>{if(!Q.listening)return;const o=k(e),s=M(o);if(s)return void A(a(s,{replace:!0}),o).catch(c);b=o;const l=y.value;var u,d;r&&(u=P(l.fullPath,n.delta),d=j(),O.set(u,d)),B(o,l).catch((e=>V(e,12)?e:V(e,2)?(A(e.to,o).then((e=>{V(e,20)&&!n.delta&&n.type===_.pop&&i.go(-1,!1)})).catch(c),Promise.reject()):(n.delta&&i.go(-n.delta,!1),W(e,o,l)))).then((e=>{(e=e||N(o,l,!1))&&(n.delta&&!V(e,8)?i.go(-n.delta,!1):n.type===_.pop&&V(e,20)&&i.go(-1,!1)),I(o,l,e)})).catch(c)}))),H.list().forEach((([t,n])=>e?n(e):t())),H.reset()),e}function Y(t,n,s,i){const{scrollBehavior:a}=e;if(!r||!a)return Promise.resolve();const l=!s&&function(e){const t=O.get(e);return O.delete(e),t}(P(t.fullPath,0))||(i||!s)&&history.state&&history.state.scroll||null;return(0,o.nextTick)().then((()=>a(t,n,l))).then((e=>e&&function(e){let t;if("el"in e){const n=e.el,o="string"==typeof n&&n.startsWith("#");if(!("string"!=typeof e.el||o&&document.getElementById(e.el.slice(1))))try{const t=document.querySelector(e.el);if(o&&t)return void d(`The selector "${e.el}" should be passed as "el: document.querySelector('${e.el}')" because it starts with "#".`)}catch(t){return void d(`The selector "${e.el}" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`)}const s="string"==typeof n?o?document.getElementById(n.slice(1)):document.querySelector(n):n;if(!s)return void d(`Couldn't find element using selector "${e.el}" returned by scrollBehavior.`);t=function(e,t){const n=document.documentElement.getBoundingClientRect(),o=e.getBoundingClientRect();return{behavior:t.behavior,left:o.left-n.left-(t.left||0),top:o.top-n.top-(t.top||0)}}(s,e)}else t=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(null!=t.left?t.left:window.pageXOffset,null!=t.top?t.top:window.pageYOffset)}(e))).catch((e=>W(e,t,n)))}const q=e=>i.go(e);let K;const J=new Set,Q={currentRoute:y,listening:!0,addRoute:function(e,n){let o,s;return L(e)?(o=t.getRecordMatcher(e),s=n):s=e,t.addRoute(s,o)},removeRoute:function(e){const n=t.getRecordMatcher(e);n?t.removeRoute(n):d(`Cannot remove non-existent route "${String(e)}"`)},hasRoute:function(e){return!!t.getRecordMatcher(e)},getRoutes:function(){return t.getRoutes().map((e=>e.record))},resolve:k,options:e,push:T,replace:function(e){return T(a(C(e),{replace:!0}))},go:q,back:()=>q(-1),forward:()=>q(1),beforeEach:h.add,beforeResolve:f.add,afterEach:v.add,onError:U.add,isReady:function(){return z&&y.value!==D?Promise.resolve():new Promise(((e,t)=>{H.add([e,t])}))},install(e){const n=this;e.component("RouterLink",$e),e.component("RouterView",We),e.config.globalProperties.$router=n,Object.defineProperty(e.config.globalProperties,"$route",{enumerable:!0,get:()=>(0,o.unref)(y)}),r&&!K&&y.value===D&&(K=!0,T(i.location).catch((e=>{d("Unexpected error when starting the router:",e)})));const s={};for(const e in D)s[e]=(0,o.computed)((()=>y.value[e]));e.provide(Te,n),e.provide(Me,(0,o.reactive)(s)),e.provide(Ae,y);const a=e.unmount;J.add(e),e.unmount=function(){J.delete(e),J.size<1&&(b=D,$&&$(),$=null,y.value=D,K=!1,z=!1),a()},r&&Ke(e,n,t)}};return Q}function lt(e){return e.reduce(((e,t)=>e.then((()=>t()))),Promise.resolve())}function ct(){return(0,o.inject)(Te)}function ut(){return(0,o.inject)(Me)}}},t={};function n(o){var s=t[o];if(void 0!==s)return s.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{"use strict";n.r(o);var e=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),t=n("./node_modules/@wordpress/hooks/build-module/index.js"),s=(n("./src/i18n.js"),n("./src/mixins/i18n.js")),r=n("./src/App.vue"),i=n("./src/router/index.js"),a=(n("./src/styles/main.scss"),n("./src/utils/menu-fix.js"),n("./src/store/index.js")),l=(0,e.createApp)({extends:r.default,mixins:[s.default]});l.config.devtools=!0,l.use(i.default).use(a.default),l.mount("#wp-emailer"),window.wpEmailerHooks=(0,t.createHooks)(),wpEmailerHooks.addFilter=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10;wpEmailerHooks.hooks.addFilter(e,t,(function(e){return e.push(n),e}),o)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LGdZQ2lCdEgsU0FqQmlDLCtEQUFnQixVQUFRLENBQUMsQ0FBQyxTQUFTLEVBQUFBLFFBQVEsQ0FBQyxZQUFZLG1CQUFtQixDQUFDLFNBQVMsNlJDZXRILFNBakJpQywrREFBZ0IsVUFBUSxDQUFDLENBQUMsU0FBUyxFQUFBQSxRQUFRLENBQUMsU0FBUyw2WkNtQnRGLFNBakJpQywrREFBZ0IsVUFBUSxDQUFDLENBQUMsU0FBUyxFQUFBQSxRQUFRLENBQUMsWUFBWSxtQkFBbUIsQ0FBQyxTQUFTLDRZQ2lCdEgsU0FqQmlDLCtEQUFnQixVQUFRLENBQUMsQ0FBQyxTQUFTLEVBQUFBLFFBQVEsQ0FBQyxZQUFZLG1CQUFtQixDQUFDLFNBQVMsa1pDaUJ0SCxTQWpCaUMsK0RBQWdCLFVBQVEsQ0FBQyxDQUFDLFNBQVMsRUFBQUEsUUFBUSxDQUFDLFlBQVksbUJBQW1CLENBQUMsU0FBUyw0YkNpQnRILFNBakJpQywrREFBZ0IsVUFBUSxDQUFDLENBQUMsU0FBUyxFQUFBQSxRQUFRLENBQUMsWUFBWSxtQkFBbUIsQ0FBQyxTQUFTLGdjQ2lCdEgsU0FqQmlDLCtEQUFnQixVQUFRLENBQUMsQ0FBQyxTQUFTLEVBQUFBLFFBQVEsQ0FBQyxZQUFZLG1CQUFtQixDQUFDLFNBQVMsaWJDaUJ0SCxTQWpCaUMsK0RBQWdCLFVBQVEsQ0FBQyxDQUFDLFNBQVMsRUFBQUEsUUFBUSxDQUFDLFlBQVksbUJBQW1CLENBQUMsU0FBUyxnVUNldEgsU0FqQmlDLCtEQUFnQixVQUFRLENBQUMsQ0FBQyxTQUFTLEVBQUFBLFFBQVEsQ0FBQyxTQUFTLDBhQ21CdEYsU0FqQmlDLCtEQUFnQixVQUFRLENBQUMsQ0FBQyxTQUFTLEVBQUFBLFFBQVEsQ0FBQyxZQUFZLG1CQUFtQixDQUFDLFNBQVMsb1lDaUJ0SCxTQWpCaUMsK0RBQWdCLFVBQVEsQ0FBQyxDQUFDLFNBQVMsRUFBQUEsUUFBUSxDQUFDLFNBQVMsOFlDaUJ0RixTQWpCaUMsK0RBQWdCLFVBQVEsQ0FBQyxDQUFDLFNBQVMsRUFBQUEsUUFBUSxDQUFDLFlBQVksbUJBQW1CLENB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SCxvQkFBWHY3RCxRQUEwQkEsT0FBT2lwQixhQUMxQ3p0QixPQUFPaTJCLGVBQWU4cEMsRUFBU3Y3RCxPQUFPaXBCLFlBQWEsQ0FBRXJ4QixNQUFPLFdBRTdENEQsT0FBT2kyQixlQUFlOHBDLEVBQVMsYUFBYyxDQUFFM2pFLE9BQU8sR0FBTywwVkNjeEQwZCxHQUFNd3dCLEVBQUFBLEVBQUFBLFdBQVUsQ0FDbEI3dEIsUUFBU2k4SSxFQUFBQSxRQUNUbDhJLE9BQVEsQ0FBQ204SSxFQUFBQSxXQUdiNytJLEVBQUkzSCxPQUFPMkcsVUFBV21JLEVBRXRCbkgsRUFBSWdqQixJQUFJK3dILEVBQUFBLFNBQ0gvd0gsSUFBSTRxQyxFQUFBQSxTQUdUNXRELEVBQUlxakIsTUFBTSxlQUdWai9CLE9BQU8wNkosZ0JBQWlCQyxFQUFBQSxFQUFBQSxlQUN4QkQsZUFBZXpzRyxVQUFZLFNBQUNmLEVBQVVDLEVBQVdyNUMsR0FBNkIsSUFBbEJzNUMsRUFBVyxVQUFILDZDQUFHLEdBQ25Fc3RHLGVBQWVwdEksTUFBTTJnQyxVQUNqQmYsRUFDQUMsR0FDQSxTQUFBbHpCLEdBRUksT0FEQUEsRUFBV3Y3QixLQUFLb1YsR0FDVG1tQixDQUNYLEdBQ0FtekIsRUFFUiIsInNvdXJjZXMiOlsid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy9AdGFubmluL2NvbXBpbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL0B0YW5uaW4vZXZhbHVhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL0B0YW5uaW4vcGx1cmFsLWZvcm1zL2luZGV4LmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy9AdGFubmluL3Bvc3RmaXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL0B2dWUvZGV2dG9vbHMtYXBpL2xpYi9lc20vY29uc3QuanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL0B2dWUvZGV2dG9vbHMtYXBpL2xpYi9lc20vZW52LmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy9AdnVlL2RldnRvb2xzLWFwaS9saWIvZXNtL2luZGV4LmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy9AdnVlL2RldnRvb2xzLWFwaS9saWIvZXNtL3Byb3h5LmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy9AdnVlL2RldnRvb2xzLWFwaS9saWIvZXNtL3RpbWUuanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL0B2dWUvcmVhY3Rpdml0eS9kaXN0L3JlYWN0aXZpdHkuZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL0B2dWUvcnVudGltZS1jb3JlL2Rpc3QvcnVudGltZS1jb3JlLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy9AdnVlL3J1bnRpbWUtZG9tL2Rpc3QvcnVudGltZS1kb20uZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL0B2dWUvc2hhcmVkL2Rpc3Qvc2hhcmVkLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2hvb2tzL2J1aWxkLW1vZHVsZS9jcmVhdGVBZGRIb29rLmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2hvb2tzL2J1aWxkLW1vZHVsZS9jcmVhdGVDdXJyZW50SG9vay5qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9ob29rcy9idWlsZC1tb2R1bGUvY3JlYXRlRGlkSG9vay5qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9ob29rcy9idWlsZC1tb2R1bGUvY3JlYXRlRG9pbmdIb29rLmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2hvb2tzL2J1aWxkLW1vZHVsZS9jcmVhdGVIYXNIb29rLmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2hvb2tzL2J1aWxkLW1vZHVsZS9jcmVhdGVIb29rcy5qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9ob29rcy9idWlsZC1tb2R1bGUvY3JlYXRlUmVtb3ZlSG9vay5qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9ob29rcy9idWlsZC1tb2R1bGUvY3JlYXRlUnVuSG9vay5qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9ob29rcy9idWlsZC1tb2R1bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvaG9va3MvYnVpbGQtbW9kdWxlL3ZhbGlkYXRlSG9va05hbWUuanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvaG9va3MvYnVpbGQtbW9kdWxlL3ZhbGlkYXRlTmFtZXNwYWNlLmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2kxOG4vYnVpbGQtbW9kdWxlL2NyZWF0ZS1pMThuLmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2kxOG4vYnVpbGQtbW9kdWxlL2RlZmF1bHQtaTE4bi5qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9pMThuL2J1aWxkLW1vZHVsZS9zcHJpbnRmLmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9BcHAudnVlIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9jb21wb25lbnRzL2FsZXJ0L0Jhc2VBbGVydC52dWUiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL2NvbXBvbmVudHMvYnV0dG9uL0Jhc2VCdXR0b24udnVlIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9jb21wb25lbnRzL2NhcmQvQmFzZUNhcmQudnVlIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9jb21wb25lbnRzL2NoYXJ0L0JhckNoYXJ0LnZ1ZSIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvY29tcG9uZW50cy9jaGFydC9CYXJDaGFydExvYWRpbmcudnVlIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9jb21wb25lbnRzL2lucHV0L0Jhc2VJbnB1dC52dWUiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL2NvbXBvbmVudHMvaW5wdXQvSW5wdXRTZWN0aW9uLnZ1ZSIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvY29tcG9uZW50cy9wYWdpbmF0aW9uL0Jhc2VQYWdpbmF0aW9uLnZ1ZSIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvY29tcG9uZW50cy9wYWdpbmF0aW9uL1BhZ2luYXRpb25Mb2FkZXIudnVlIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9jb21wb25lbnRzL3NldHRpbmdzL1NldHRpbmdGb3JtLnZ1ZSIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvY29tcG9uZW50cy9zZXR0aW5ncy9TZXR0aW5nRm9ybUxvYWRpbmcudnVlIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9jb21wb25lbnRzL3NrZWxldG9uL1NrZWxldG9uVGV4dC52dWUiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL2NvbXBvbmVudHMvc3Bpbm5lci9CYXNlU3Bpbm5lci52dWUiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL2NvbXBvbmVudHMvdGFibGVzL0Jhc2VUYWJsZS52dWUiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL2NvbXBvbmVudHMvdGFibGVzL1RhYmxlTG9hZGluZy52dWUiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL2NvbXBvbmVudHMvdGFicy9QYWdlVGFicy52dWUiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL3BhZ2VzL0dyYXBoUGFnZS52dWUiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL3BhZ2VzL0xpc3RQYWdlLnZ1ZSIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvcGFnZXMvU2V0dGluZ1BhZ2UudnVlIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9pMThuLmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9taXhpbnMvaTE4bi5qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvcm91dGVyL2luZGV4LmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9zdG9yZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvc3RvcmUvbW9kdWxlcy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL3N0b3JlL21vZHVsZXMvZ3JhcGguanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL3N0b3JlL21vZHVsZXMvc2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL3N0b3JlL21vZHVsZXMvdGFibGVzLmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy91dGlscy9hamF4LmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy91dGlscy9kYXRlLWZvcm1hdHRlci5qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvdXRpbHMvbWVudS1maXguanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL3V0aWxzL3BhZ2luYXRpb24tcmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL3V0aWxzL3ZhbGlkYXRpb24uanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL2RlYm91bmNlL2luZGV4LmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy9tZW1pemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL3NwcmludGYtanMvc3JjL3NwcmludGYuanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL3Rhbm5pbi9pbmRleC5qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9ub2RlX21vZHVsZXMvdnVlLWNoYXJ0anMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvQXBwLnZ1ZT82ODM5Iiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9jb21wb25lbnRzL2FsZXJ0L0Jhc2VBbGVydC52dWU/ZjQ4YyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvY29tcG9uZW50cy9idXR0b24vQmFzZUJ1dHRvbi52dWU/ZWIxMCIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvY29tcG9uZW50cy9jYXJkL0Jhc2VDYXJkLnZ1ZT8zNTZkIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9jb21wb25lbnRzL2NoYXJ0L0JhckNoYXJ0LnZ1ZT80ZjJhIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9jb21wb25lbnRzL2NoYXJ0L0JhckNoYXJ0TG9hZGluZy52dWU/ODJiMCIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvY29tcG9uZW50cy9pbnB1dC9CYXNlSW5wdXQudnVlPzY2YmIiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL2NvbXBvbmVudHMvaW5wdXQvSW5wdXRTZWN0aW9uLnZ1ZT82OTIxIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9jb21wb25lbnRzL3BhZ2luYXRpb24vQmFzZVBhZ2luYXRpb24udnVlPzI3MDkiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9QYWdpbmF0aW9uTG9hZGVyLnZ1ZT80NTc5Iiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9jb21wb25lbnRzL3NldHRpbmdzL1NldHRpbmdGb3JtLnZ1ZT8xMzg4Iiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9jb21wb25lbnRzL3NldHRpbmdzL1NldHRpbmdGb3JtTG9hZGluZy52dWU/MmY4YiIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvY29tcG9uZW50cy9za2VsZXRvbi9Ta2VsZXRvblRleHQudnVlP2EwOTkiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL2NvbXBvbmVudHMvc3Bpbm5lci9CYXNlU3Bpbm5lci52dWU/MzRjNCIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvY29tcG9uZW50cy90YWJsZXMvQmFzZVRhYmxlLnZ1ZT82MTg3Iiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9jb21wb25lbnRzL3RhYmxlcy9UYWJsZUxvYWRpbmcudnVlP2RlYWMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL2NvbXBvbmVudHMvdGFicy9QYWdlVGFicy52dWU/MDMwNyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvcGFnZXMvR3JhcGhQYWdlLnZ1ZT83YTYzIiwid2VicGFjazovL3dwZW1haWxlci8uL3NyYy9wYWdlcy9MaXN0UGFnZS52dWU/Y2E1YSIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9zcmMvcGFnZXMvU2V0dGluZ1BhZ2UudnVlPzRhMDMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovL3dwZW1haWxlci8uL25vZGVfbW9kdWxlcy92dWV4L2Rpc3QvdnVleC5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvZGlzdC9jaGFydC5tanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL2Rpc3QvY2h1bmtzL2hlbHBlcnMuc2VnbWVudC5tanMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vbm9kZV9tb2R1bGVzL3Z1ZS1yb3V0ZXIvZGlzdC92dWUtcm91dGVyLm1qcyIsIndlYnBhY2s6Ly93cGVtYWlsZXIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dwZW1haWxlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vd3BlbWFpbGVyLy4vc3JjL21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBvc3RmaXggZnJvbSAnQHRhbm5pbi9wb3N0Zml4JztcbmltcG9ydCBldmFsdWF0ZSBmcm9tICdAdGFubmluL2V2YWx1YXRlJztcblxuLyoqXG4gKiBHaXZlbiBhIEMgZXhwcmVzc2lvbiwgcmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGNhbiBiZSBjYWxsZWQgdG8gZXZhbHVhdGUgaXRzXG4gKiByZXN1bHQuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IGNvbXBpbGUgZnJvbSAnQHRhbm5pbi9jb21waWxlJztcbiAqXG4gKiBjb25zdCBldmFsdWF0ZSA9IGNvbXBpbGUoICduID4gMScgKTtcbiAqXG4gKiBldmFsdWF0ZSggeyBuOiAyIH0gKTtcbiAqIC8vIOKHkiB0cnVlXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBDIGV4cHJlc3Npb24uXG4gKlxuICogQHJldHVybiB7KHZhcmlhYmxlcz86e1t2YXJpYWJsZTpzdHJpbmddOip9KT0+Kn0gQ29tcGlsZWQgZXZhbHVhdG9yLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21waWxlKCBleHByZXNzaW9uICkge1xuXHR2YXIgdGVybXMgPSBwb3N0Zml4KCBleHByZXNzaW9uICk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uKCB2YXJpYWJsZXMgKSB7XG5cdFx0cmV0dXJuIGV2YWx1YXRlKCB0ZXJtcywgdmFyaWFibGVzICk7XG5cdH07XG59XG4iLCIvKipcbiAqIE9wZXJhdG9yIGNhbGxiYWNrIGZ1bmN0aW9ucy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgT1BFUkFUT1JTID0ge1xuXHQnISc6IGZ1bmN0aW9uKCBhICkge1xuXHRcdHJldHVybiAhIGE7XG5cdH0sXG5cdCcqJzogZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0cmV0dXJuIGEgKiBiO1xuXHR9LFxuXHQnLyc6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhIC8gYjtcblx0fSxcblx0JyUnOiBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRyZXR1cm4gYSAlIGI7XG5cdH0sXG5cdCcrJzogZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0cmV0dXJuIGEgKyBiO1xuXHR9LFxuXHQnLSc6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhIC0gYjtcblx0fSxcblx0JzwnOiBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRyZXR1cm4gYSA8IGI7XG5cdH0sXG5cdCc8PSc6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhIDw9IGI7XG5cdH0sXG5cdCc+JzogZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0cmV0dXJuIGEgPiBiO1xuXHR9LFxuXHQnPj0nOiBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRyZXR1cm4gYSA+PSBiO1xuXHR9LFxuXHQnPT0nOiBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRyZXR1cm4gYSA9PT0gYjtcblx0fSxcblx0JyE9JzogZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0cmV0dXJuIGEgIT09IGI7XG5cdH0sXG5cdCcmJic6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhICYmIGI7XG5cdH0sXG5cdCd8fCc6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhIHx8IGI7XG5cdH0sXG5cdCc/Oic6IGZ1bmN0aW9uKCBhLCBiLCBjICkge1xuXHRcdGlmICggYSApIHtcblx0XHRcdHRocm93IGI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGM7XG5cdH0sXG59O1xuXG4vKipcbiAqIEdpdmVuIGFuIGFycmF5IG9mIHBvc3RmaXggdGVybXMgYW5kIG9wZXJhbmQgdmFyaWFibGVzLCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAqIHRoZSBwb3N0Zml4IGV2YWx1YXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IGV2YWx1YXRlIGZyb20gJ0B0YW5uaW4vZXZhbHVhdGUnO1xuICpcbiAqIC8vIDMgKyA0ICogNSAvIDYg4oeSICczIDQgNSAqIDYgLyArJ1xuICogY29uc3QgdGVybXMgPSBbICczJywgJzQnLCAnNScsICcqJywgJzYnLCAnLycsICcrJyBdO1xuICpcbiAqIGV2YWx1YXRlKCB0ZXJtcywge30gKTtcbiAqIC8vIOKHkiA2LjMzMzMzMzMzMzMzMzMzNFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gcG9zdGZpeCAgIFBvc3RmaXggdGVybXMuXG4gKiBAcGFyYW0ge09iamVjdH0gICB2YXJpYWJsZXMgT3BlcmFuZCB2YXJpYWJsZXMuXG4gKlxuICogQHJldHVybiB7Kn0gUmVzdWx0IG9mIGV2YWx1YXRpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV2YWx1YXRlKCBwb3N0Zml4LCB2YXJpYWJsZXMgKSB7XG5cdHZhciBzdGFjayA9IFtdLFxuXHRcdGksIGosIGFyZ3MsIGdldE9wZXJhdG9yUmVzdWx0LCB0ZXJtLCB2YWx1ZTtcblxuXHRmb3IgKCBpID0gMDsgaSA8IHBvc3RmaXgubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGVybSA9IHBvc3RmaXhbIGkgXTtcblxuXHRcdGdldE9wZXJhdG9yUmVzdWx0ID0gT1BFUkFUT1JTWyB0ZXJtIF07XG5cdFx0aWYgKCBnZXRPcGVyYXRvclJlc3VsdCApIHtcblx0XHRcdC8vIFBvcCBmcm9tIHN0YWNrIGJ5IG51bWJlciBvZiBmdW5jdGlvbiBhcmd1bWVudHMuXG5cdFx0XHRqID0gZ2V0T3BlcmF0b3JSZXN1bHQubGVuZ3RoO1xuXHRcdFx0YXJncyA9IEFycmF5KCBqICk7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0YXJnc1sgaiBdID0gc3RhY2sucG9wKCk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHZhbHVlID0gZ2V0T3BlcmF0b3JSZXN1bHQuYXBwbHkoIG51bGwsIGFyZ3MgKTtcblx0XHRcdH0gY2F0Y2ggKCBlYXJseVJldHVybiApIHtcblx0XHRcdFx0cmV0dXJuIGVhcmx5UmV0dXJuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIHZhcmlhYmxlcy5oYXNPd25Qcm9wZXJ0eSggdGVybSApICkge1xuXHRcdFx0dmFsdWUgPSB2YXJpYWJsZXNbIHRlcm0gXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFsdWUgPSArdGVybTtcblx0XHR9XG5cblx0XHRzdGFjay5wdXNoKCB2YWx1ZSApO1xuXHR9XG5cblx0cmV0dXJuIHN0YWNrWyAwIF07XG59XG4iLCJpbXBvcnQgY29tcGlsZSBmcm9tICdAdGFubmluL2NvbXBpbGUnO1xuXG4vKipcbiAqIEdpdmVuIGEgQyBleHByZXNzaW9uLCByZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gY2FsbGVkIHdpdGggYSB2YWx1ZSxcbiAqIGV2YWx1YXRlcyB0aGUgcmVzdWx0IHdpdGggdGhlIHZhbHVlIGFzc3VtZWQgdG8gYmUgdGhlIFwiblwiIHZhcmlhYmxlIG9mIHRoZVxuICogZXhwcmVzc2lvbi4gVGhlIHJlc3VsdCB3aWxsIGJlIGNvZXJjZWQgdG8gaXRzIG51bWVyaWMgZXF1aXZhbGVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBDIGV4cHJlc3Npb24uXG4gKlxuICogQHJldHVybiB7RnVuY3Rpb259IEV2YWx1YXRvciBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGx1cmFsRm9ybXMoIGV4cHJlc3Npb24gKSB7XG5cdHZhciBldmFsdWF0ZSA9IGNvbXBpbGUoIGV4cHJlc3Npb24gKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24oIG4gKSB7XG5cdFx0cmV0dXJuICtldmFsdWF0ZSggeyBuOiBuIH0gKTtcblx0fTtcbn1cbiIsInZhciBQUkVDRURFTkNFLCBPUEVORVJTLCBURVJNSU5BVE9SUywgUEFUVEVSTjtcblxuLyoqXG4gKiBPcGVyYXRvciBwcmVjZWRlbmNlIG1hcHBpbmcuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuUFJFQ0VERU5DRSA9IHtcblx0JygnOiA5LFxuXHQnISc6IDgsXG5cdCcqJzogNyxcblx0Jy8nOiA3LFxuXHQnJSc6IDcsXG5cdCcrJzogNixcblx0Jy0nOiA2LFxuXHQnPCc6IDUsXG5cdCc8PSc6IDUsXG5cdCc+JzogNSxcblx0Jz49JzogNSxcblx0Jz09JzogNCxcblx0JyE9JzogNCxcblx0JyYmJzogMyxcblx0J3x8JzogMixcblx0Jz8nOiAxLFxuXHQnPzonOiAxLFxufTtcblxuLyoqXG4gKiBDaGFyYWN0ZXJzIHdoaWNoIHNpZ25hbCBwYWlyIG9wZW5pbmcsIHRvIGJlIHRlcm1pbmF0ZWQgYnkgdGVybWluYXRvcnMuXG4gKlxuICogQHR5cGUge3N0cmluZ1tdfVxuICovXG5PUEVORVJTID0gWyAnKCcsICc/JyBdO1xuXG4vKipcbiAqIENoYXJhY3RlcnMgd2hpY2ggc2lnbmFsIHBhaXIgdGVybWluYXRpb24sIHRoZSB2YWx1ZSBhbiBhcnJheSB3aXRoIHRoZVxuICogb3BlbmVyIGFzIGl0cyBmaXJzdCBtZW1iZXIuIFRoZSBzZWNvbmQgbWVtYmVyIGlzIGFuIG9wdGlvbmFsIG9wZXJhdG9yXG4gKiByZXBsYWNlbWVudCB0byBwdXNoIHRvIHRoZSBzdGFjay5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nW119XG4gKi9cblRFUk1JTkFUT1JTID0ge1xuXHQnKSc6IFsgJygnIF0sXG5cdCc6JzogWyAnPycsICc/OicgXSxcbn07XG5cbi8qKlxuICogUGF0dGVybiBtYXRjaGluZyBvcGVyYXRvcnMgYW5kIG9wZW5lcnMuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuUEFUVEVSTiA9IC88PXw+PXw9PXwhPXwmJnxcXHxcXHx8XFw/OnxcXCh8IXxcXCp8XFwvfCV8XFwrfC18PHw+fFxcP3xcXCl8Oi87XG5cbi8qKlxuICogR2l2ZW4gYSBDIGV4cHJlc3Npb24sIHJldHVybnMgdGhlIGVxdWl2YWxlbnQgcG9zdGZpeCAoUmV2ZXJzZSBQb2xpc2gpXG4gKiBub3RhdGlvbiB0ZXJtcyBhcyBhbiBhcnJheS5cbiAqXG4gKiBJZiBhIHBvc3RmaXggc3RyaW5nIGlzIGRlc2lyZWQsIHNpbXBseSBgLmpvaW4oICcgJyApYCB0aGUgcmVzdWx0LlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqIGltcG9ydCBwb3N0Zml4IGZyb20gJ0B0YW5uaW4vcG9zdGZpeCc7XG4gKlxuICogcG9zdGZpeCggJ24gPiAxJyApO1xuICogLy8g4oeSIFsgJ24nLCAnMScsICc+JyBdXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBDIGV4cHJlc3Npb24uXG4gKlxuICogQHJldHVybiB7c3RyaW5nW119IFBvc3RmaXggdGVybXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBvc3RmaXgoIGV4cHJlc3Npb24gKSB7XG5cdHZhciB0ZXJtcyA9IFtdLFxuXHRcdHN0YWNrID0gW10sXG5cdFx0bWF0Y2gsIG9wZXJhdG9yLCB0ZXJtLCBlbGVtZW50O1xuXG5cdHdoaWxlICggKCBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goIFBBVFRFUk4gKSApICkge1xuXHRcdG9wZXJhdG9yID0gbWF0Y2hbIDAgXTtcblxuXHRcdC8vIFRlcm0gaXMgdGhlIHN0cmluZyBwcmVjZWRpbmcgdGhlIG9wZXJhdG9yIG1hdGNoLiBJdCBtYXkgY29udGFpblxuXHRcdC8vIHdoaXRlc3BhY2UsIGFuZCBtYXkgYmUgZW1wdHkgKGlmIG9wZXJhdG9yIGlzIGF0IGJlZ2lubmluZykuXG5cdFx0dGVybSA9IGV4cHJlc3Npb24uc3Vic3RyKCAwLCBtYXRjaC5pbmRleCApLnRyaW0oKTtcblx0XHRpZiAoIHRlcm0gKSB7XG5cdFx0XHR0ZXJtcy5wdXNoKCB0ZXJtICk7XG5cdFx0fVxuXG5cdFx0d2hpbGUgKCAoIGVsZW1lbnQgPSBzdGFjay5wb3AoKSApICkge1xuXHRcdFx0aWYgKCBURVJNSU5BVE9SU1sgb3BlcmF0b3IgXSApIHtcblx0XHRcdFx0aWYgKCBURVJNSU5BVE9SU1sgb3BlcmF0b3IgXVsgMCBdID09PSBlbGVtZW50ICkge1xuXHRcdFx0XHRcdC8vIFN1YnN0aXR1dGlvbiB3b3JrcyBoZXJlIHVuZGVyIGFzc3VtcHRpb24gdGhhdCBiZWNhdXNlXG5cdFx0XHRcdFx0Ly8gdGhlIGFzc2lnbmVkIG9wZXJhdG9yIHdpbGwgbm8gbG9uZ2VyIGJlIGEgdGVybWluYXRvciwgaXRcblx0XHRcdFx0XHQvLyB3aWxsIGJlIHB1c2hlZCB0byB0aGUgc3RhY2sgZHVyaW5nIHRoZSBjb25kaXRpb24gYmVsb3cuXG5cdFx0XHRcdFx0b3BlcmF0b3IgPSBURVJNSU5BVE9SU1sgb3BlcmF0b3IgXVsgMSBdIHx8IG9wZXJhdG9yO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKCBPUEVORVJTLmluZGV4T2YoIGVsZW1lbnQgKSA+PSAwIHx8IFBSRUNFREVOQ0VbIGVsZW1lbnQgXSA8IFBSRUNFREVOQ0VbIG9wZXJhdG9yIF0gKSB7XG5cdFx0XHRcdC8vIFB1c2ggdG8gc3RhY2sgaWYgZWl0aGVyIGFuIG9wZW5lciBvciB3aGVuIHBvcCByZXZlYWxzIGFuXG5cdFx0XHRcdC8vIGVsZW1lbnQgb2YgbG93ZXIgcHJlY2VkZW5jZS5cblx0XHRcdFx0c3RhY2sucHVzaCggZWxlbWVudCApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIGVhY2ggcG9wcGVkIGZyb20gc3RhY2ssIHB1c2ggdG8gdGVybXMuXG5cdFx0XHR0ZXJtcy5wdXNoKCBlbGVtZW50ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhIFRFUk1JTkFUT1JTWyBvcGVyYXRvciBdICkge1xuXHRcdFx0c3RhY2sucHVzaCggb3BlcmF0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBTbGljZSBtYXRjaGVkIGZyYWdtZW50IGZyb20gZXhwcmVzc2lvbiB0byBjb250aW51ZSBtYXRjaC5cblx0XHRleHByZXNzaW9uID0gZXhwcmVzc2lvbi5zdWJzdHIoIG1hdGNoLmluZGV4ICsgb3BlcmF0b3IubGVuZ3RoICk7XG5cdH1cblxuXHQvLyBQdXNoIHJlbWFpbmRlciBvZiBvcGVyYW5kLCBpZiBleGlzdHMsIHRvIHRlcm1zLlxuXHRleHByZXNzaW9uID0gZXhwcmVzc2lvbi50cmltKCk7XG5cdGlmICggZXhwcmVzc2lvbiApIHtcblx0XHR0ZXJtcy5wdXNoKCBleHByZXNzaW9uICk7XG5cdH1cblxuXHQvLyBQb3AgcmVtYWluaW5nIGl0ZW1zIGZyb20gc3RhY2sgaW50byB0ZXJtcy5cblx0cmV0dXJuIHRlcm1zLmNvbmNhdCggc3RhY2sucmV2ZXJzZSgpICk7XG59XG4iLCJleHBvcnQgY29uc3QgSE9PS19TRVRVUCA9ICdkZXZ0b29scy1wbHVnaW46c2V0dXAnO1xuZXhwb3J0IGNvbnN0IEhPT0tfUExVR0lOX1NFVFRJTkdTX1NFVCA9ICdwbHVnaW46c2V0dGluZ3M6c2V0JztcbiIsImV4cG9ydCBmdW5jdGlvbiBnZXREZXZ0b29sc0dsb2JhbEhvb2soKSB7XG4gICAgcmV0dXJuIGdldFRhcmdldCgpLl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICA/IHdpbmRvd1xuICAgICAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IGdsb2JhbFxuICAgICAgICAgICAgOiB7fTtcbn1cbmV4cG9ydCBjb25zdCBpc1Byb3h5QXZhaWxhYmxlID0gdHlwZW9mIFByb3h5ID09PSAnZnVuY3Rpb24nO1xuIiwiaW1wb3J0IHsgZ2V0VGFyZ2V0LCBnZXREZXZ0b29sc0dsb2JhbEhvb2ssIGlzUHJveHlBdmFpbGFibGUgfSBmcm9tICcuL2Vudi5qcyc7XG5pbXBvcnQgeyBIT09LX1NFVFVQIH0gZnJvbSAnLi9jb25zdC5qcyc7XG5pbXBvcnQgeyBBcGlQcm94eSB9IGZyb20gJy4vcHJveHkuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9hcGkvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9wbHVnaW4uanMnO1xuZXhwb3J0ICogZnJvbSAnLi90aW1lLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cERldnRvb2xzUGx1Z2luKHBsdWdpbkRlc2NyaXB0b3IsIHNldHVwRm4pIHtcbiAgICBjb25zdCBkZXNjcmlwdG9yID0gcGx1Z2luRGVzY3JpcHRvcjtcbiAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQoKTtcbiAgICBjb25zdCBob29rID0gZ2V0RGV2dG9vbHNHbG9iYWxIb29rKCk7XG4gICAgY29uc3QgZW5hYmxlUHJveHkgPSBpc1Byb3h5QXZhaWxhYmxlICYmIGRlc2NyaXB0b3IuZW5hYmxlRWFybHlQcm94eTtcbiAgICBpZiAoaG9vayAmJiAodGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1BMVUdJTl9BUElfQVZBSUxBQkxFX18gfHwgIWVuYWJsZVByb3h5KSkge1xuICAgICAgICBob29rLmVtaXQoSE9PS19TRVRVUCwgcGx1Z2luRGVzY3JpcHRvciwgc2V0dXBGbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBwcm94eSA9IGVuYWJsZVByb3h5ID8gbmV3IEFwaVByb3h5KGRlc2NyaXB0b3IsIGhvb2spIDogbnVsbDtcbiAgICAgICAgY29uc3QgbGlzdCA9IHRhcmdldC5fX1ZVRV9ERVZUT09MU19QTFVHSU5TX18gPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfUExVR0lOU19fIHx8IFtdO1xuICAgICAgICBsaXN0LnB1c2goe1xuICAgICAgICAgICAgcGx1Z2luRGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgICAgICAgIHNldHVwRm4sXG4gICAgICAgICAgICBwcm94eSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcm94eSlcbiAgICAgICAgICAgIHNldHVwRm4ocHJveHkucHJveGllZFRhcmdldCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgSE9PS19QTFVHSU5fU0VUVElOR1NfU0VUIH0gZnJvbSAnLi9jb25zdC5qcyc7XG5pbXBvcnQgeyBub3cgfSBmcm9tICcuL3RpbWUuanMnO1xuZXhwb3J0IGNsYXNzIEFwaVByb3h5IHtcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW4sIGhvb2spIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBudWxsO1xuICAgICAgICB0aGlzLnRhcmdldFF1ZXVlID0gW107XG4gICAgICAgIHRoaXMub25RdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5ob29rID0gaG9vaztcbiAgICAgICAgY29uc3QgZGVmYXVsdFNldHRpbmdzID0ge307XG4gICAgICAgIGlmIChwbHVnaW4uc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gcGx1Z2luLnNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHBsdWdpbi5zZXR0aW5nc1tpZF07XG4gICAgICAgICAgICAgICAgZGVmYXVsdFNldHRpbmdzW2lkXSA9IGl0ZW0uZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvY2FsU2V0dGluZ3NTYXZlSWQgPSBgX192dWUtZGV2dG9vbHMtcGx1Z2luLXNldHRpbmdzX18ke3BsdWdpbi5pZH1gO1xuICAgICAgICBsZXQgY3VycmVudFNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFNldHRpbmdzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJhdyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGxvY2FsU2V0dGluZ3NTYXZlSWQpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmF3KTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY3VycmVudFNldHRpbmdzLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gbm9vcFxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmFsbGJhY2tzID0ge1xuICAgICAgICAgICAgZ2V0U2V0dGluZ3MoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRTZXR0aW5ncztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRTZXR0aW5ncyh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGxvY2FsU2V0dGluZ3NTYXZlSWQsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudFNldHRpbmdzID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbm93KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub3coKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGlmIChob29rKSB7XG4gICAgICAgICAgICBob29rLm9uKEhPT0tfUExVR0lOX1NFVFRJTkdTX1NFVCwgKHBsdWdpbklkLCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwbHVnaW5JZCA9PT0gdGhpcy5wbHVnaW4uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWxsYmFja3Muc2V0U2V0dGluZ3ModmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJveGllZE9uID0gbmV3IFByb3h5KHt9LCB7XG4gICAgICAgICAgICBnZXQ6IChfdGFyZ2V0LCBwcm9wKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRhcmdldC5vbltwcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblF1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucHJveGllZFRhcmdldCA9IG5ldyBQcm94eSh7fSwge1xuICAgICAgICAgICAgZ2V0OiAoX3RhcmdldCwgcHJvcCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50YXJnZXRbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3AgPT09ICdvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJveGllZE9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChPYmplY3Qua2V5cyh0aGlzLmZhbGxiYWNrcykuaW5jbHVkZXMocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFF1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6ICgpID0+IHsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFsbGJhY2tzW3Byb3BdKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRRdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBwcm9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHNldFJlYWxUYXJnZXQodGFyZ2V0KSB7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5vblF1ZXVlKSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldC5vbltpdGVtLm1ldGhvZF0oLi4uaXRlbS5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy50YXJnZXRRdWV1ZSkge1xuICAgICAgICAgICAgaXRlbS5yZXNvbHZlKGF3YWl0IHRoaXMudGFyZ2V0W2l0ZW0ubWV0aG9kXSguLi5pdGVtLmFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImxldCBzdXBwb3J0ZWQ7XG5sZXQgcGVyZjtcbmV4cG9ydCBmdW5jdGlvbiBpc1BlcmZvcm1hbmNlU3VwcG9ydGVkKCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoc3VwcG9ydGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHN1cHBvcnRlZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICBwZXJmID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiAoKF9hID0gZ2xvYmFsLnBlcmZfaG9va3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wZXJmb3JtYW5jZSkpIHtcbiAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgcGVyZiA9IGdsb2JhbC5wZXJmX2hvb2tzLnBlcmZvcm1hbmNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3VwcG9ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzdXBwb3J0ZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBpc1BlcmZvcm1hbmNlU3VwcG9ydGVkKCkgPyBwZXJmLm5vdygpIDogRGF0ZS5ub3coKTtcbn1cbiIsImltcG9ydCB7IGV4dGVuZCwgaXNBcnJheSwgaXNNYXAsIGlzSW50ZWdlcktleSwgaGFzT3duLCBpc1N5bWJvbCwgaXNPYmplY3QsIGhhc0NoYW5nZWQsIG1ha2VNYXAsIGNhcGl0YWxpemUsIHRvUmF3VHlwZSwgZGVmLCBpc0Z1bmN0aW9uLCBOT09QIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5mdW5jdGlvbiB3YXJuKG1zZywgLi4uYXJncykge1xuICAgIGNvbnNvbGUud2FybihgW1Z1ZSB3YXJuXSAke21zZ31gLCAuLi5hcmdzKTtcbn1cblxubGV0IGFjdGl2ZUVmZmVjdFNjb3BlO1xuY2xhc3MgRWZmZWN0U2NvcGUge1xuICAgIGNvbnN0cnVjdG9yKGRldGFjaGVkID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5kZXRhY2hlZCA9IGRldGFjaGVkO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZWZmZWN0cyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNsZWFudXBzID0gW107XG4gICAgICAgIHRoaXMucGFyZW50ID0gYWN0aXZlRWZmZWN0U2NvcGU7XG4gICAgICAgIGlmICghZGV0YWNoZWQgJiYgYWN0aXZlRWZmZWN0U2NvcGUpIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPVxuICAgICAgICAgICAgICAgIChhY3RpdmVFZmZlY3RTY29wZS5zY29wZXMgfHwgKGFjdGl2ZUVmZmVjdFNjb3BlLnNjb3BlcyA9IFtdKSkucHVzaCh0aGlzKSAtIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcnVuKGZuKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudEVmZmVjdFNjb3BlID0gYWN0aXZlRWZmZWN0U2NvcGU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gdGhpcztcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gY3VycmVudEVmZmVjdFNjb3BlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgd2FybihgY2Fubm90IHJ1biBhbiBpbmFjdGl2ZSBlZmZlY3Qgc2NvcGUuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gbm9uLWRldGFjaGVkIHNjb3Blc1xuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIG9uKCkge1xuICAgICAgICBhY3RpdmVFZmZlY3RTY29wZSA9IHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIG9uIG5vbi1kZXRhY2hlZCBzY29wZXNcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBvZmYoKSB7XG4gICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gdGhpcy5wYXJlbnQ7XG4gICAgfVxuICAgIHN0b3AoZnJvbVBhcmVudCkge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgIGxldCBpLCBsO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuZWZmZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVmZmVjdHNbaV0uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuY2xlYW51cHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwc1tpXSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcGVzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuc2NvcGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjb3Blc1tpXS5zdG9wKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG5lc3RlZCBzY29wZSwgZGVyZWZlcmVuY2UgZnJvbSBwYXJlbnQgdG8gYXZvaWQgbWVtb3J5IGxlYWtzXG4gICAgICAgICAgICBpZiAoIXRoaXMuZGV0YWNoZWQgJiYgdGhpcy5wYXJlbnQgJiYgIWZyb21QYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBvcHRpbWl6ZWQgTygxKSByZW1vdmFsXG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdCA9IHRoaXMucGFyZW50LnNjb3Blcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdCAmJiBsYXN0ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LnNjb3Blc1t0aGlzLmluZGV4XSA9IGxhc3Q7XG4gICAgICAgICAgICAgICAgICAgIGxhc3QuaW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGVmZmVjdFNjb3BlKGRldGFjaGVkKSB7XG4gICAgcmV0dXJuIG5ldyBFZmZlY3RTY29wZShkZXRhY2hlZCk7XG59XG5mdW5jdGlvbiByZWNvcmRFZmZlY3RTY29wZShlZmZlY3QsIHNjb3BlID0gYWN0aXZlRWZmZWN0U2NvcGUpIHtcbiAgICBpZiAoc2NvcGUgJiYgc2NvcGUuYWN0aXZlKSB7XG4gICAgICAgIHNjb3BlLmVmZmVjdHMucHVzaChlZmZlY3QpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY29wZSgpIHtcbiAgICByZXR1cm4gYWN0aXZlRWZmZWN0U2NvcGU7XG59XG5mdW5jdGlvbiBvblNjb3BlRGlzcG9zZShmbikge1xuICAgIGlmIChhY3RpdmVFZmZlY3RTY29wZSkge1xuICAgICAgICBhY3RpdmVFZmZlY3RTY29wZS5jbGVhbnVwcy5wdXNoKGZuKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm4oYG9uU2NvcGVEaXNwb3NlKCkgaXMgY2FsbGVkIHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGVmZmVjdCBzY29wZWAgK1xuICAgICAgICAgICAgYCB0byBiZSBhc3NvY2lhdGVkIHdpdGguYCk7XG4gICAgfVxufVxuXG5jb25zdCBjcmVhdGVEZXAgPSAoZWZmZWN0cykgPT4ge1xuICAgIGNvbnN0IGRlcCA9IG5ldyBTZXQoZWZmZWN0cyk7XG4gICAgZGVwLncgPSAwO1xuICAgIGRlcC5uID0gMDtcbiAgICByZXR1cm4gZGVwO1xufTtcbmNvbnN0IHdhc1RyYWNrZWQgPSAoZGVwKSA9PiAoZGVwLncgJiB0cmFja09wQml0KSA+IDA7XG5jb25zdCBuZXdUcmFja2VkID0gKGRlcCkgPT4gKGRlcC5uICYgdHJhY2tPcEJpdCkgPiAwO1xuY29uc3QgaW5pdERlcE1hcmtlcnMgPSAoeyBkZXBzIH0pID0+IHtcbiAgICBpZiAoZGVwcy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkZXBzW2ldLncgfD0gdHJhY2tPcEJpdDsgLy8gc2V0IHdhcyB0cmFja2VkXG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgZmluYWxpemVEZXBNYXJrZXJzID0gKGVmZmVjdCkgPT4ge1xuICAgIGNvbnN0IHsgZGVwcyB9ID0gZWZmZWN0O1xuICAgIGlmIChkZXBzLmxlbmd0aCkge1xuICAgICAgICBsZXQgcHRyID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBkZXAgPSBkZXBzW2ldO1xuICAgICAgICAgICAgaWYgKHdhc1RyYWNrZWQoZGVwKSAmJiAhbmV3VHJhY2tlZChkZXApKSB7XG4gICAgICAgICAgICAgICAgZGVwLmRlbGV0ZShlZmZlY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVwc1twdHIrK10gPSBkZXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjbGVhciBiaXRzXG4gICAgICAgICAgICBkZXAudyAmPSB+dHJhY2tPcEJpdDtcbiAgICAgICAgICAgIGRlcC5uICY9IH50cmFja09wQml0O1xuICAgICAgICB9XG4gICAgICAgIGRlcHMubGVuZ3RoID0gcHRyO1xuICAgIH1cbn07XG5cbmNvbnN0IHRhcmdldE1hcCA9IG5ldyBXZWFrTWFwKCk7XG4vLyBUaGUgbnVtYmVyIG9mIGVmZmVjdHMgY3VycmVudGx5IGJlaW5nIHRyYWNrZWQgcmVjdXJzaXZlbHkuXG5sZXQgZWZmZWN0VHJhY2tEZXB0aCA9IDA7XG5sZXQgdHJhY2tPcEJpdCA9IDE7XG4vKipcbiAqIFRoZSBiaXR3aXNlIHRyYWNrIG1hcmtlcnMgc3VwcG9ydCBhdCBtb3N0IDMwIGxldmVscyBvZiByZWN1cnNpb24uXG4gKiBUaGlzIHZhbHVlIGlzIGNob3NlbiB0byBlbmFibGUgbW9kZXJuIEpTIGVuZ2luZXMgdG8gdXNlIGEgU01JIG9uIGFsbCBwbGF0Zm9ybXMuXG4gKiBXaGVuIHJlY3Vyc2lvbiBkZXB0aCBpcyBncmVhdGVyLCBmYWxsIGJhY2sgdG8gdXNpbmcgYSBmdWxsIGNsZWFudXAuXG4gKi9cbmNvbnN0IG1heE1hcmtlckJpdHMgPSAzMDtcbmxldCBhY3RpdmVFZmZlY3Q7XG5jb25zdCBJVEVSQVRFX0tFWSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnaXRlcmF0ZScgOiAnJyk7XG5jb25zdCBNQVBfS0VZX0lURVJBVEVfS0VZID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdNYXAga2V5IGl0ZXJhdGUnIDogJycpO1xuY2xhc3MgUmVhY3RpdmVFZmZlY3Qge1xuICAgIGNvbnN0cnVjdG9yKGZuLCBzY2hlZHVsZXIgPSBudWxsLCBzY29wZSkge1xuICAgICAgICB0aGlzLmZuID0gZm47XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVwcyA9IFtdO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmVjb3JkRWZmZWN0U2NvcGUodGhpcywgc2NvcGUpO1xuICAgIH1cbiAgICBydW4oKSB7XG4gICAgICAgIGlmICghdGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZuKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBhcmVudCA9IGFjdGl2ZUVmZmVjdDtcbiAgICAgICAgbGV0IGxhc3RTaG91bGRUcmFjayA9IHNob3VsZFRyYWNrO1xuICAgICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgICAgICBpZiAocGFyZW50ID09PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBhY3RpdmVFZmZlY3Q7XG4gICAgICAgICAgICBhY3RpdmVFZmZlY3QgPSB0aGlzO1xuICAgICAgICAgICAgc2hvdWxkVHJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgdHJhY2tPcEJpdCA9IDEgPDwgKytlZmZlY3RUcmFja0RlcHRoO1xuICAgICAgICAgICAgaWYgKGVmZmVjdFRyYWNrRGVwdGggPD0gbWF4TWFya2VyQml0cykge1xuICAgICAgICAgICAgICAgIGluaXREZXBNYXJrZXJzKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cEVmZmVjdCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZuKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZWZmZWN0VHJhY2tEZXB0aCA8PSBtYXhNYXJrZXJCaXRzKSB7XG4gICAgICAgICAgICAgICAgZmluYWxpemVEZXBNYXJrZXJzKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJhY2tPcEJpdCA9IDEgPDwgLS1lZmZlY3RUcmFja0RlcHRoO1xuICAgICAgICAgICAgYWN0aXZlRWZmZWN0ID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgICAgICBzaG91bGRUcmFjayA9IGxhc3RTaG91bGRUcmFjaztcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVmZXJTdG9wKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgLy8gc3RvcHBlZCB3aGlsZSBydW5uaW5nIGl0c2VsZiAtIGRlZmVyIHRoZSBjbGVhbnVwXG4gICAgICAgIGlmIChhY3RpdmVFZmZlY3QgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmZXJTdG9wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgICAgICAgY2xlYW51cEVmZmVjdCh0aGlzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9uU3RvcCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25TdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY2xlYW51cEVmZmVjdChlZmZlY3QpIHtcbiAgICBjb25zdCB7IGRlcHMgfSA9IGVmZmVjdDtcbiAgICBpZiAoZGVwcy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkZXBzW2ldLmRlbGV0ZShlZmZlY3QpO1xuICAgICAgICB9XG4gICAgICAgIGRlcHMubGVuZ3RoID0gMDtcbiAgICB9XG59XG5mdW5jdGlvbiBlZmZlY3QoZm4sIG9wdGlvbnMpIHtcbiAgICBpZiAoZm4uZWZmZWN0KSB7XG4gICAgICAgIGZuID0gZm4uZWZmZWN0LmZuO1xuICAgIH1cbiAgICBjb25zdCBfZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KGZuKTtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBleHRlbmQoX2VmZmVjdCwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zLnNjb3BlKVxuICAgICAgICAgICAgcmVjb3JkRWZmZWN0U2NvcGUoX2VmZmVjdCwgb3B0aW9ucy5zY29wZSk7XG4gICAgfVxuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5sYXp5KSB7XG4gICAgICAgIF9lZmZlY3QucnVuKCk7XG4gICAgfVxuICAgIGNvbnN0IHJ1bm5lciA9IF9lZmZlY3QucnVuLmJpbmQoX2VmZmVjdCk7XG4gICAgcnVubmVyLmVmZmVjdCA9IF9lZmZlY3Q7XG4gICAgcmV0dXJuIHJ1bm5lcjtcbn1cbmZ1bmN0aW9uIHN0b3AocnVubmVyKSB7XG4gICAgcnVubmVyLmVmZmVjdC5zdG9wKCk7XG59XG5sZXQgc2hvdWxkVHJhY2sgPSB0cnVlO1xuY29uc3QgdHJhY2tTdGFjayA9IFtdO1xuZnVuY3Rpb24gcGF1c2VUcmFja2luZygpIHtcbiAgICB0cmFja1N0YWNrLnB1c2goc2hvdWxkVHJhY2spO1xuICAgIHNob3VsZFRyYWNrID0gZmFsc2U7XG59XG5mdW5jdGlvbiBlbmFibGVUcmFja2luZygpIHtcbiAgICB0cmFja1N0YWNrLnB1c2goc2hvdWxkVHJhY2spO1xuICAgIHNob3VsZFRyYWNrID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHJlc2V0VHJhY2tpbmcoKSB7XG4gICAgY29uc3QgbGFzdCA9IHRyYWNrU3RhY2sucG9wKCk7XG4gICAgc2hvdWxkVHJhY2sgPSBsYXN0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogbGFzdDtcbn1cbmZ1bmN0aW9uIHRyYWNrKHRhcmdldCwgdHlwZSwga2V5KSB7XG4gICAgaWYgKHNob3VsZFRyYWNrICYmIGFjdGl2ZUVmZmVjdCkge1xuICAgICAgICBsZXQgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgaWYgKCFkZXBzTWFwKSB7XG4gICAgICAgICAgICB0YXJnZXRNYXAuc2V0KHRhcmdldCwgKGRlcHNNYXAgPSBuZXcgTWFwKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGVwID0gZGVwc01hcC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFkZXApIHtcbiAgICAgICAgICAgIGRlcHNNYXAuc2V0KGtleSwgKGRlcCA9IGNyZWF0ZURlcCgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXZlbnRJbmZvID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgICAgICA/IHsgZWZmZWN0OiBhY3RpdmVFZmZlY3QsIHRhcmdldCwgdHlwZSwga2V5IH1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICB0cmFja0VmZmVjdHMoZGVwLCBldmVudEluZm8pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYWNrRWZmZWN0cyhkZXAsIGRlYnVnZ2VyRXZlbnRFeHRyYUluZm8pIHtcbiAgICBsZXQgc2hvdWxkVHJhY2sgPSBmYWxzZTtcbiAgICBpZiAoZWZmZWN0VHJhY2tEZXB0aCA8PSBtYXhNYXJrZXJCaXRzKSB7XG4gICAgICAgIGlmICghbmV3VHJhY2tlZChkZXApKSB7XG4gICAgICAgICAgICBkZXAubiB8PSB0cmFja09wQml0OyAvLyBzZXQgbmV3bHkgdHJhY2tlZFxuICAgICAgICAgICAgc2hvdWxkVHJhY2sgPSAhd2FzVHJhY2tlZChkZXApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBGdWxsIGNsZWFudXAgbW9kZS5cbiAgICAgICAgc2hvdWxkVHJhY2sgPSAhZGVwLmhhcyhhY3RpdmVFZmZlY3QpO1xuICAgIH1cbiAgICBpZiAoc2hvdWxkVHJhY2spIHtcbiAgICAgICAgZGVwLmFkZChhY3RpdmVFZmZlY3QpO1xuICAgICAgICBhY3RpdmVFZmZlY3QuZGVwcy5wdXNoKGRlcCk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgYWN0aXZlRWZmZWN0Lm9uVHJhY2spIHtcbiAgICAgICAgICAgIGFjdGl2ZUVmZmVjdC5vblRyYWNrKE9iamVjdC5hc3NpZ24oeyBlZmZlY3Q6IGFjdGl2ZUVmZmVjdCB9LCBkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0cmlnZ2VyKHRhcmdldCwgdHlwZSwga2V5LCBuZXdWYWx1ZSwgb2xkVmFsdWUsIG9sZFRhcmdldCkge1xuICAgIGNvbnN0IGRlcHNNYXAgPSB0YXJnZXRNYXAuZ2V0KHRhcmdldCk7XG4gICAgaWYgKCFkZXBzTWFwKSB7XG4gICAgICAgIC8vIG5ldmVyIGJlZW4gdHJhY2tlZFxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBkZXBzID0gW107XG4gICAgaWYgKHR5cGUgPT09IFwiY2xlYXJcIiAvKiBUcmlnZ2VyT3BUeXBlcy5DTEVBUiAqLykge1xuICAgICAgICAvLyBjb2xsZWN0aW9uIGJlaW5nIGNsZWFyZWRcbiAgICAgICAgLy8gdHJpZ2dlciBhbGwgZWZmZWN0cyBmb3IgdGFyZ2V0XG4gICAgICAgIGRlcHMgPSBbLi4uZGVwc01hcC52YWx1ZXMoKV07XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleSA9PT0gJ2xlbmd0aCcgJiYgaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgIGRlcHNNYXAuZm9yRWFjaCgoZGVwLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdsZW5ndGgnIHx8IGtleSA+PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGRlcHMucHVzaChkZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIHNjaGVkdWxlIHJ1bnMgZm9yIFNFVCB8IEFERCB8IERFTEVURVxuICAgICAgICBpZiAoa2V5ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldChrZXkpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhbHNvIHJ1biBmb3IgaXRlcmF0aW9uIGtleSBvbiBBREQgfCBERUxFVEUgfCBNYXAuU0VUXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImFkZFwiIC8qIFRyaWdnZXJPcFR5cGVzLkFERCAqLzpcbiAgICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldChNQVBfS0VZX0lURVJBVEVfS0VZKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNJbnRlZ2VyS2V5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV3IGluZGV4IGFkZGVkIHRvIGFycmF5IC0+IGxlbmd0aCBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldCgnbGVuZ3RoJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi86XG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVwcy5wdXNoKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoTUFQX0tFWV9JVEVSQVRFX0tFWSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLzpcbiAgICAgICAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXZlbnRJbmZvID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgID8geyB0YXJnZXQsIHR5cGUsIGtleSwgbmV3VmFsdWUsIG9sZFZhbHVlLCBvbGRUYXJnZXQgfVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBpZiAoZGVwcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKGRlcHNbMF0pIHtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRWZmZWN0cyhkZXBzWzBdLCBldmVudEluZm8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckVmZmVjdHMoZGVwc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGVmZmVjdHMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBkZXAgb2YgZGVwcykge1xuICAgICAgICAgICAgaWYgKGRlcCkge1xuICAgICAgICAgICAgICAgIGVmZmVjdHMucHVzaCguLi5kZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHRyaWdnZXJFZmZlY3RzKGNyZWF0ZURlcChlZmZlY3RzKSwgZXZlbnRJbmZvKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRyaWdnZXJFZmZlY3RzKGNyZWF0ZURlcChlZmZlY3RzKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0cmlnZ2VyRWZmZWN0cyhkZXAsIGRlYnVnZ2VyRXZlbnRFeHRyYUluZm8pIHtcbiAgICAvLyBzcHJlYWQgaW50byBhcnJheSBmb3Igc3RhYmlsaXphdGlvblxuICAgIGNvbnN0IGVmZmVjdHMgPSBpc0FycmF5KGRlcCkgPyBkZXAgOiBbLi4uZGVwXTtcbiAgICBmb3IgKGNvbnN0IGVmZmVjdCBvZiBlZmZlY3RzKSB7XG4gICAgICAgIGlmIChlZmZlY3QuY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIHRyaWdnZXJFZmZlY3QoZWZmZWN0LCBkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGVmZmVjdCBvZiBlZmZlY3RzKSB7XG4gICAgICAgIGlmICghZWZmZWN0LmNvbXB1dGVkKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRWZmZWN0KGVmZmVjdCwgZGVidWdnZXJFdmVudEV4dHJhSW5mbyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0cmlnZ2VyRWZmZWN0KGVmZmVjdCwgZGVidWdnZXJFdmVudEV4dHJhSW5mbykge1xuICAgIGlmIChlZmZlY3QgIT09IGFjdGl2ZUVmZmVjdCB8fCBlZmZlY3QuYWxsb3dSZWN1cnNlKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZWZmZWN0Lm9uVHJpZ2dlcikge1xuICAgICAgICAgICAgZWZmZWN0Lm9uVHJpZ2dlcihleHRlbmQoeyBlZmZlY3QgfSwgZGVidWdnZXJFdmVudEV4dHJhSW5mbykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlZmZlY3Quc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICBlZmZlY3Quc2NoZWR1bGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlZmZlY3QucnVuKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNvbnN0IGlzTm9uVHJhY2thYmxlS2V5cyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChgX19wcm90b19fLF9fdl9pc1JlZixfX2lzVnVlYCk7XG5jb25zdCBidWlsdEluU3ltYm9scyA9IG5ldyBTZXQoXG4vKiNfX1BVUkVfXyovXG5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhTeW1ib2wpXG4gICAgLy8gaW9zMTAueCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhTeW1ib2wpIGNhbiBlbnVtZXJhdGUgJ2FyZ3VtZW50cycgYW5kICdjYWxsZXInXG4gICAgLy8gYnV0IGFjY2Vzc2luZyB0aGVtIG9uIFN5bWJvbCBsZWFkcyB0byBUeXBlRXJyb3IgYmVjYXVzZSBTeW1ib2wgaXMgYSBzdHJpY3QgbW9kZVxuICAgIC8vIGZ1bmN0aW9uXG4gICAgLmZpbHRlcihrZXkgPT4ga2V5ICE9PSAnYXJndW1lbnRzJyAmJiBrZXkgIT09ICdjYWxsZXInKVxuICAgIC5tYXAoa2V5ID0+IFN5bWJvbFtrZXldKVxuICAgIC5maWx0ZXIoaXNTeW1ib2wpKTtcbmNvbnN0IGdldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKCk7XG5jb25zdCBzaGFsbG93R2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIoZmFsc2UsIHRydWUpO1xuY29uc3QgcmVhZG9ubHlHZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUdldHRlcih0cnVlKTtcbmNvbnN0IHNoYWxsb3dSZWFkb25seUdldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKHRydWUsIHRydWUpO1xuY29uc3QgYXJyYXlJbnN0cnVtZW50YXRpb25zID0gLyojX19QVVJFX18qLyBjcmVhdGVBcnJheUluc3RydW1lbnRhdGlvbnMoKTtcbmZ1bmN0aW9uIGNyZWF0ZUFycmF5SW5zdHJ1bWVudGF0aW9ucygpIHtcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0ge307XG4gICAgWydpbmNsdWRlcycsICdpbmRleE9mJywgJ2xhc3RJbmRleE9mJ10uZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpbnN0cnVtZW50YXRpb25zW2tleV0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgYXJyID0gdG9SYXcodGhpcyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdHJhY2soYXJyLCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sIGkgKyAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB3ZSBydW4gdGhlIG1ldGhvZCB1c2luZyB0aGUgb3JpZ2luYWwgYXJncyBmaXJzdCAod2hpY2ggbWF5IGJlIHJlYWN0aXZlKVxuICAgICAgICAgICAgY29uc3QgcmVzID0gYXJyW2tleV0oLi4uYXJncyk7XG4gICAgICAgICAgICBpZiAocmVzID09PSAtMSB8fCByZXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhhdCBkaWRuJ3Qgd29yaywgcnVuIGl0IGFnYWluIHVzaW5nIHJhdyB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycltrZXldKC4uLmFyZ3MubWFwKHRvUmF3KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIFsncHVzaCcsICdwb3AnLCAnc2hpZnQnLCAndW5zaGlmdCcsICdzcGxpY2UnXS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbnNba2V5XSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICAgICAgICBjb25zdCByZXMgPSB0b1Jhdyh0aGlzKVtrZXldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgcmVzZXRUcmFja2luZygpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gaW5zdHJ1bWVudGF0aW9ucztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUdldHRlcihpc1JlYWRvbmx5ID0gZmFsc2UsIHNoYWxsb3cgPSBmYWxzZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBnZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSB7XG4gICAgICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1JFQUNUSVZFICovKSB7XG4gICAgICAgICAgICByZXR1cm4gIWlzUmVhZG9ubHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWRvbmx5XCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFET05MWSAqLykge1xuICAgICAgICAgICAgcmV0dXJuIGlzUmVhZG9ubHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9pc1NoYWxsb3dcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1NIQUxMT1cgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBzaGFsbG93O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIgLyogUmVhY3RpdmVGbGFncy5SQVcgKi8gJiZcbiAgICAgICAgICAgIHJlY2VpdmVyID09PVxuICAgICAgICAgICAgICAgIChpc1JlYWRvbmx5XG4gICAgICAgICAgICAgICAgICAgID8gc2hhbGxvd1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBzaGFsbG93UmVhZG9ubHlNYXBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcmVhZG9ubHlNYXBcbiAgICAgICAgICAgICAgICAgICAgOiBzaGFsbG93XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNoYWxsb3dSZWFjdGl2ZU1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZWFjdGl2ZU1hcCkuZ2V0KHRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0SXNBcnJheSA9IGlzQXJyYXkodGFyZ2V0KTtcbiAgICAgICAgaWYgKCFpc1JlYWRvbmx5ICYmIHRhcmdldElzQXJyYXkgJiYgaGFzT3duKGFycmF5SW5zdHJ1bWVudGF0aW9ucywga2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KGFycmF5SW5zdHJ1bWVudGF0aW9ucywga2V5LCByZWNlaXZlcik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKTtcbiAgICAgICAgaWYgKGlzU3ltYm9sKGtleSkgPyBidWlsdEluU3ltYm9scy5oYXMoa2V5KSA6IGlzTm9uVHJhY2thYmxlS2V5cyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNSZWFkb25seSkge1xuICAgICAgICAgICAgdHJhY2sodGFyZ2V0LCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWxsb3cpIHtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVmKHJlcykpIHtcbiAgICAgICAgICAgIC8vIHJlZiB1bndyYXBwaW5nIC0gc2tpcCB1bndyYXAgZm9yIEFycmF5ICsgaW50ZWdlciBrZXkuXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0SXNBcnJheSAmJiBpc0ludGVnZXJLZXkoa2V5KSA/IHJlcyA6IHJlcy52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgICAgICAgLy8gQ29udmVydCByZXR1cm5lZCB2YWx1ZSBpbnRvIGEgcHJveHkgYXMgd2VsbC4gd2UgZG8gdGhlIGlzT2JqZWN0IGNoZWNrXG4gICAgICAgICAgICAvLyBoZXJlIHRvIGF2b2lkIGludmFsaWQgdmFsdWUgd2FybmluZy4gQWxzbyBuZWVkIHRvIGxhenkgYWNjZXNzIHJlYWRvbmx5XG4gICAgICAgICAgICAvLyBhbmQgcmVhY3RpdmUgaGVyZSB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgICAgICAgICAgcmV0dXJuIGlzUmVhZG9ubHkgPyByZWFkb25seShyZXMpIDogcmVhY3RpdmUocmVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG59XG5jb25zdCBzZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZVNldHRlcigpO1xuY29uc3Qgc2hhbGxvd1NldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlU2V0dGVyKHRydWUpO1xuZnVuY3Rpb24gY3JlYXRlU2V0dGVyKHNoYWxsb3cgPSBmYWxzZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBzZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikge1xuICAgICAgICBsZXQgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcbiAgICAgICAgaWYgKGlzUmVhZG9ubHkob2xkVmFsdWUpICYmIGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaGFsbG93KSB7XG4gICAgICAgICAgICBpZiAoIWlzU2hhbGxvdyh2YWx1ZSkgJiYgIWlzUmVhZG9ubHkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWUgPSB0b1JhdyhvbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSAmJiBpc1JlZihvbGRWYWx1ZSkgJiYgIWlzUmVmKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFkS2V5ID0gaXNBcnJheSh0YXJnZXQpICYmIGlzSW50ZWdlcktleShrZXkpXG4gICAgICAgICAgICA/IE51bWJlcihrZXkpIDwgdGFyZ2V0Lmxlbmd0aFxuICAgICAgICAgICAgOiBoYXNPd24odGFyZ2V0LCBrZXkpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICAgICAgLy8gZG9uJ3QgdHJpZ2dlciBpZiB0YXJnZXQgaXMgc29tZXRoaW5nIHVwIGluIHRoZSBwcm90b3R5cGUgY2hhaW4gb2Ygb3JpZ2luYWxcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gdG9SYXcocmVjZWl2ZXIpKSB7XG4gICAgICAgICAgICBpZiAoIWhhZEtleSkge1xuICAgICAgICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiIC8qIFRyaWdnZXJPcFR5cGVzLkFERCAqLywga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoYXNDaGFuZ2VkKHZhbHVlLCBvbGRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJzZXRcIiAvKiBUcmlnZ2VyT3BUeXBlcy5TRVQgKi8sIGtleSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59XG5mdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSkge1xuICAgIGNvbnN0IGhhZEtleSA9IGhhc093bih0YXJnZXQsIGtleSk7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcbiAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KTtcbiAgICBpZiAocmVzdWx0ICYmIGhhZEtleSkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi8sIGtleSwgdW5kZWZpbmVkLCBvbGRWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBoYXModGFyZ2V0LCBrZXkpIHtcbiAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0Lmhhcyh0YXJnZXQsIGtleSk7XG4gICAgaWYgKCFpc1N5bWJvbChrZXkpIHx8ICFidWlsdEluU3ltYm9scy5oYXMoa2V5KSkge1xuICAgICAgICB0cmFjayh0YXJnZXQsIFwiaGFzXCIgLyogVHJhY2tPcFR5cGVzLkhBUyAqLywga2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG93bktleXModGFyZ2V0KSB7XG4gICAgdHJhY2sodGFyZ2V0LCBcIml0ZXJhdGVcIiAvKiBUcmFja09wVHlwZXMuSVRFUkFURSAqLywgaXNBcnJheSh0YXJnZXQpID8gJ2xlbmd0aCcgOiBJVEVSQVRFX0tFWSk7XG4gICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xufVxuY29uc3QgbXV0YWJsZUhhbmRsZXJzID0ge1xuICAgIGdldCxcbiAgICBzZXQsXG4gICAgZGVsZXRlUHJvcGVydHksXG4gICAgaGFzLFxuICAgIG93bktleXNcbn07XG5jb25zdCByZWFkb25seUhhbmRsZXJzID0ge1xuICAgIGdldDogcmVhZG9ubHlHZXQsXG4gICAgc2V0KHRhcmdldCwga2V5KSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHdhcm4oYFNldCBvcGVyYXRpb24gb24ga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLCB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgd2FybihgRGVsZXRlIG9wZXJhdGlvbiBvbiBrZXkgXCIke1N0cmluZyhrZXkpfVwiIGZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufTtcbmNvbnN0IHNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzID0gLyojX19QVVJFX18qLyBleHRlbmQoe30sIG11dGFibGVIYW5kbGVycywge1xuICAgIGdldDogc2hhbGxvd0dldCxcbiAgICBzZXQ6IHNoYWxsb3dTZXRcbn0pO1xuLy8gUHJvcHMgaGFuZGxlcnMgYXJlIHNwZWNpYWwgaW4gdGhlIHNlbnNlIHRoYXQgaXQgc2hvdWxkIG5vdCB1bndyYXAgdG9wLWxldmVsXG4vLyByZWZzIChpbiBvcmRlciB0byBhbGxvdyByZWZzIHRvIGJlIGV4cGxpY2l0bHkgcGFzc2VkIGRvd24pLCBidXQgc2hvdWxkXG4vLyByZXRhaW4gdGhlIHJlYWN0aXZpdHkgb2YgdGhlIG5vcm1hbCByZWFkb25seSBvYmplY3QuXG5jb25zdCBzaGFsbG93UmVhZG9ubHlIYW5kbGVycyA9IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCByZWFkb25seUhhbmRsZXJzLCB7XG4gICAgZ2V0OiBzaGFsbG93UmVhZG9ubHlHZXRcbn0pO1xuXG5jb25zdCB0b1NoYWxsb3cgPSAodmFsdWUpID0+IHZhbHVlO1xuY29uc3QgZ2V0UHJvdG8gPSAodikgPT4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZih2KTtcbmZ1bmN0aW9uIGdldCQxKHRhcmdldCwga2V5LCBpc1JlYWRvbmx5ID0gZmFsc2UsIGlzU2hhbGxvdyA9IGZhbHNlKSB7XG4gICAgLy8gIzE3NzI6IHJlYWRvbmx5KHJlYWN0aXZlKE1hcCkpIHNob3VsZCByZXR1cm4gcmVhZG9ubHkgKyByZWFjdGl2ZSB2ZXJzaW9uXG4gICAgLy8gb2YgdGhlIHZhbHVlXG4gICAgdGFyZ2V0ID0gdGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovXTtcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gICAgaWYgKCFpc1JlYWRvbmx5KSB7XG4gICAgICAgIGlmIChrZXkgIT09IHJhd0tleSkge1xuICAgICAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sIHJhd0tleSk7XG4gICAgfVxuICAgIGNvbnN0IHsgaGFzIH0gPSBnZXRQcm90byhyYXdUYXJnZXQpO1xuICAgIGNvbnN0IHdyYXAgPSBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiBpc1JlYWRvbmx5ID8gdG9SZWFkb25seSA6IHRvUmVhY3RpdmU7XG4gICAgaWYgKGhhcy5jYWxsKHJhd1RhcmdldCwga2V5KSkge1xuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXQuZ2V0KGtleSkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChoYXMuY2FsbChyYXdUYXJnZXQsIHJhd0tleSkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0LmdldChyYXdLZXkpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGFyZ2V0ICE9PSByYXdUYXJnZXQpIHtcbiAgICAgICAgLy8gIzM2MDIgcmVhZG9ubHkocmVhY3RpdmUoTWFwKSlcbiAgICAgICAgLy8gZW5zdXJlIHRoYXQgdGhlIG5lc3RlZCByZWFjdGl2ZSBgTWFwYCBjYW4gZG8gdHJhY2tpbmcgZm9yIGl0c2VsZlxuICAgICAgICB0YXJnZXQuZ2V0KGtleSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFzJDEoa2V5LCBpc1JlYWRvbmx5ID0gZmFsc2UpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1wiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovXTtcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gICAgaWYgKCFpc1JlYWRvbmx5KSB7XG4gICAgICAgIGlmIChrZXkgIT09IHJhd0tleSkge1xuICAgICAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiIC8qIFRyYWNrT3BUeXBlcy5IQVMgKi8sIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiIC8qIFRyYWNrT3BUeXBlcy5IQVMgKi8sIHJhd0tleSk7XG4gICAgfVxuICAgIHJldHVybiBrZXkgPT09IHJhd0tleVxuICAgICAgICA/IHRhcmdldC5oYXMoa2V5KVxuICAgICAgICA6IHRhcmdldC5oYXMoa2V5KSB8fCB0YXJnZXQuaGFzKHJhd0tleSk7XG59XG5mdW5jdGlvbiBzaXplKHRhcmdldCwgaXNSZWFkb25seSA9IGZhbHNlKSB7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovXTtcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayh0b1Jhdyh0YXJnZXQpLCBcIml0ZXJhdGVcIiAvKiBUcmFja09wVHlwZXMuSVRFUkFURSAqLywgSVRFUkFURV9LRVkpO1xuICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsICdzaXplJywgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xuICAgIGNvbnN0IHByb3RvID0gZ2V0UHJvdG8odGFyZ2V0KTtcbiAgICBjb25zdCBoYWRLZXkgPSBwcm90by5oYXMuY2FsbCh0YXJnZXQsIHZhbHVlKTtcbiAgICBpZiAoIWhhZEtleSkge1xuICAgICAgICB0YXJnZXQuYWRkKHZhbHVlKTtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogVHJpZ2dlck9wVHlwZXMuQUREICovLCB2YWx1ZSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIHNldCQxKGtleSwgdmFsdWUpIHtcbiAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgICBjb25zdCB7IGhhcywgZ2V0IH0gPSBnZXRQcm90byh0YXJnZXQpO1xuICAgIGxldCBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAga2V5ID0gdG9SYXcoa2V5KTtcbiAgICAgICAgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xuICAgIH1cbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSk7XG4gICAgfVxuICAgIGNvbnN0IG9sZFZhbHVlID0gZ2V0LmNhbGwodGFyZ2V0LCBrZXkpO1xuICAgIHRhcmdldC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogVHJpZ2dlck9wVHlwZXMuQUREICovLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkVmFsdWUpKSB7XG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLywga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIGRlbGV0ZUVudHJ5KGtleSkge1xuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xuICAgIGNvbnN0IHsgaGFzLCBnZXQgfSA9IGdldFByb3RvKHRhcmdldCk7XG4gICAgbGV0IGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcbiAgICBpZiAoIWhhZEtleSkge1xuICAgICAgICBrZXkgPSB0b1JhdyhrZXkpO1xuICAgICAgICBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhcywga2V5KTtcbiAgICB9XG4gICAgY29uc3Qgb2xkVmFsdWUgPSBnZXQgPyBnZXQuY2FsbCh0YXJnZXQsIGtleSkgOiB1bmRlZmluZWQ7XG4gICAgLy8gZm9yd2FyZCB0aGUgb3BlcmF0aW9uIGJlZm9yZSBxdWV1ZWluZyByZWFjdGlvbnNcbiAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuZGVsZXRlKGtleSk7XG4gICAgaWYgKGhhZEtleSkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi8sIGtleSwgdW5kZWZpbmVkLCBvbGRWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjbGVhcigpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgICBjb25zdCBoYWRJdGVtcyA9IHRhcmdldC5zaXplICE9PSAwO1xuICAgIGNvbnN0IG9sZFRhcmdldCA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICA/IGlzTWFwKHRhcmdldClcbiAgICAgICAgICAgID8gbmV3IE1hcCh0YXJnZXQpXG4gICAgICAgICAgICA6IG5ldyBTZXQodGFyZ2V0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAvLyBmb3J3YXJkIHRoZSBvcGVyYXRpb24gYmVmb3JlIHF1ZXVlaW5nIHJlYWN0aW9uc1xuICAgIGNvbnN0IHJlc3VsdCA9IHRhcmdldC5jbGVhcigpO1xuICAgIGlmIChoYWRJdGVtcykge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJjbGVhclwiIC8qIFRyaWdnZXJPcFR5cGVzLkNMRUFSICovLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb2xkVGFyZ2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZvckVhY2goaXNSZWFkb25seSwgaXNTaGFsbG93KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZWQgPSB0aGlzO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBvYnNlcnZlZFtcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL107XG4gICAgICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XG4gICAgICAgIGNvbnN0IHdyYXAgPSBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiBpc1JlYWRvbmx5ID8gdG9SZWFkb25seSA6IHRvUmVhY3RpdmU7XG4gICAgICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJpdGVyYXRlXCIgLyogVHJhY2tPcFR5cGVzLklURVJBVEUgKi8sIElURVJBVEVfS0VZKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAvLyBpbXBvcnRhbnQ6IG1ha2Ugc3VyZSB0aGUgY2FsbGJhY2sgaXNcbiAgICAgICAgICAgIC8vIDEuIGludm9rZWQgd2l0aCB0aGUgcmVhY3RpdmUgbWFwIGFzIGB0aGlzYCBhbmQgM3JkIGFyZ1xuICAgICAgICAgICAgLy8gMi4gdGhlIHZhbHVlIHJlY2VpdmVkIHNob3VsZCBiZSBhIGNvcnJlc3BvbmRpbmcgcmVhY3RpdmUvcmVhZG9ubHkuXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB3cmFwKHZhbHVlKSwgd3JhcChrZXkpLCBvYnNlcnZlZCk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIGlzUmVhZG9ubHksIGlzU2hhbGxvdykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1wiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovXTtcbiAgICAgICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcbiAgICAgICAgY29uc3QgdGFyZ2V0SXNNYXAgPSBpc01hcChyYXdUYXJnZXQpO1xuICAgICAgICBjb25zdCBpc1BhaXIgPSBtZXRob2QgPT09ICdlbnRyaWVzJyB8fCAobWV0aG9kID09PSBTeW1ib2wuaXRlcmF0b3IgJiYgdGFyZ2V0SXNNYXApO1xuICAgICAgICBjb25zdCBpc0tleU9ubHkgPSBtZXRob2QgPT09ICdrZXlzJyAmJiB0YXJnZXRJc01hcDtcbiAgICAgICAgY29uc3QgaW5uZXJJdGVyYXRvciA9IHRhcmdldFttZXRob2RdKC4uLmFyZ3MpO1xuICAgICAgICBjb25zdCB3cmFwID0gaXNTaGFsbG93ID8gdG9TaGFsbG93IDogaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xuICAgICAgICAhaXNSZWFkb25seSAmJlxuICAgICAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcIml0ZXJhdGVcIiAvKiBUcmFja09wVHlwZXMuSVRFUkFURSAqLywgaXNLZXlPbmx5ID8gTUFQX0tFWV9JVEVSQVRFX0tFWSA6IElURVJBVEVfS0VZKTtcbiAgICAgICAgLy8gcmV0dXJuIGEgd3JhcHBlZCBpdGVyYXRvciB3aGljaCByZXR1cm5zIG9ic2VydmVkIHZlcnNpb25zIG9mIHRoZVxuICAgICAgICAvLyB2YWx1ZXMgZW1pdHRlZCBmcm9tIHRoZSByZWFsIGl0ZXJhdG9yXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBpdGVyYXRvciBwcm90b2NvbFxuICAgICAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBpbm5lckl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9uZVxuICAgICAgICAgICAgICAgICAgICA/IHsgdmFsdWUsIGRvbmUgfVxuICAgICAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpc1BhaXIgPyBbd3JhcCh2YWx1ZVswXSksIHdyYXAodmFsdWVbMV0pXSA6IHdyYXAodmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIGl0ZXJhYmxlIHByb3RvY29sXG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUmVhZG9ubHlNZXRob2QodHlwZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBhcmdzWzBdID8gYG9uIGtleSBcIiR7YXJnc1swXX1cIiBgIDogYGA7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7Y2FwaXRhbGl6ZSh0eXBlKX0gb3BlcmF0aW9uICR7a2V5fWZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsIHRvUmF3KHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHlwZSA9PT0gXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi8gPyBmYWxzZSA6IHRoaXM7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbnMoKSB7XG4gICAgY29uc3QgbXV0YWJsZUluc3RydW1lbnRhdGlvbnMgPSB7XG4gICAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXkpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBzaXplKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICBoYXM6IGhhcyQxLFxuICAgICAgICBhZGQsXG4gICAgICAgIHNldDogc2V0JDEsXG4gICAgICAgIGRlbGV0ZTogZGVsZXRlRW50cnksXG4gICAgICAgIGNsZWFyLFxuICAgICAgICBmb3JFYWNoOiBjcmVhdGVGb3JFYWNoKGZhbHNlLCBmYWxzZSlcbiAgICB9O1xuICAgIGNvbnN0IHNoYWxsb3dJbnN0cnVtZW50YXRpb25zID0ge1xuICAgICAgICBnZXQoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5LCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBzaXplKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNpemUodGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhczogaGFzJDEsXG4gICAgICAgIGFkZCxcbiAgICAgICAgc2V0OiBzZXQkMSxcbiAgICAgICAgZGVsZXRlOiBkZWxldGVFbnRyeSxcbiAgICAgICAgY2xlYXIsXG4gICAgICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2goZmFsc2UsIHRydWUpXG4gICAgfTtcbiAgICBjb25zdCByZWFkb25seUluc3RydW1lbnRhdGlvbnMgPSB7XG4gICAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXksIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBzaXplKHRoaXMsIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBoYXMoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzJDEuY2FsbCh0aGlzLCBrZXksIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBhZGQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiYWRkXCIgLyogVHJpZ2dlck9wVHlwZXMuQUREICovKSxcbiAgICAgICAgc2V0OiBjcmVhdGVSZWFkb25seU1ldGhvZChcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLyksXG4gICAgICAgIGRlbGV0ZTogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi8pLFxuICAgICAgICBjbGVhcjogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJjbGVhclwiIC8qIFRyaWdnZXJPcFR5cGVzLkNMRUFSICovKSxcbiAgICAgICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaCh0cnVlLCBmYWxzZSlcbiAgICB9O1xuICAgIGNvbnN0IHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnMgPSB7XG4gICAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXksIHRydWUsIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBzaXplKHRoaXMsIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBoYXMoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzJDEuY2FsbCh0aGlzLCBrZXksIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBhZGQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiYWRkXCIgLyogVHJpZ2dlck9wVHlwZXMuQUREICovKSxcbiAgICAgICAgc2V0OiBjcmVhdGVSZWFkb25seU1ldGhvZChcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLyksXG4gICAgICAgIGRlbGV0ZTogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi8pLFxuICAgICAgICBjbGVhcjogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJjbGVhclwiIC8qIFRyaWdnZXJPcFR5cGVzLkNMRUFSICovKSxcbiAgICAgICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaCh0cnVlLCB0cnVlKVxuICAgIH07XG4gICAgY29uc3QgaXRlcmF0b3JNZXRob2RzID0gWydrZXlzJywgJ3ZhbHVlcycsICdlbnRyaWVzJywgU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpdGVyYXRvck1ldGhvZHMuZm9yRWFjaChtZXRob2QgPT4ge1xuICAgICAgICBtdXRhYmxlSW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICByZWFkb25seUluc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICBzaGFsbG93SW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgbXV0YWJsZUluc3RydW1lbnRhdGlvbnMsXG4gICAgICAgIHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyxcbiAgICAgICAgc2hhbGxvd0luc3RydW1lbnRhdGlvbnMsXG4gICAgICAgIHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNcbiAgICBdO1xufVxuY29uc3QgW211dGFibGVJbnN0cnVtZW50YXRpb25zLCByZWFkb25seUluc3RydW1lbnRhdGlvbnMsIHNoYWxsb3dJbnN0cnVtZW50YXRpb25zLCBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zXSA9IC8qICNfX1BVUkVfXyovIGNyZWF0ZUluc3RydW1lbnRhdGlvbnMoKTtcbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihpc1JlYWRvbmx5LCBzaGFsbG93KSB7XG4gICAgY29uc3QgaW5zdHJ1bWVudGF0aW9ucyA9IHNoYWxsb3dcbiAgICAgICAgPyBpc1JlYWRvbmx5XG4gICAgICAgICAgICA/IHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNcbiAgICAgICAgICAgIDogc2hhbGxvd0luc3RydW1lbnRhdGlvbnNcbiAgICAgICAgOiBpc1JlYWRvbmx5XG4gICAgICAgICAgICA/IHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9uc1xuICAgICAgICAgICAgOiBtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucztcbiAgICByZXR1cm4gKHRhcmdldCwga2V5LCByZWNlaXZlcikgPT4ge1xuICAgICAgICBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWN0aXZlXCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFDVElWRSAqLykge1xuICAgICAgICAgICAgcmV0dXJuICFpc1JlYWRvbmx5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBRE9OTFkgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIgLyogUmVhY3RpdmVGbGFncy5SQVcgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KGhhc093bihpbnN0cnVtZW50YXRpb25zLCBrZXkpICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICAgICAgID8gaW5zdHJ1bWVudGF0aW9uc1xuICAgICAgICAgICAgOiB0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xuICAgIH07XG59XG5jb25zdCBtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzID0ge1xuICAgIGdldDogLyojX19QVVJFX18qLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIoZmFsc2UsIGZhbHNlKVxufTtcbmNvbnN0IHNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XG4gICAgZ2V0OiAvKiNfX1BVUkVfXyovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihmYWxzZSwgdHJ1ZSlcbn07XG5jb25zdCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcbiAgICBnZXQ6IC8qI19fUFVSRV9fKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKHRydWUsIGZhbHNlKVxufTtcbmNvbnN0IHNoYWxsb3dSZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcbiAgICBnZXQ6IC8qI19fUFVSRV9fKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKHRydWUsIHRydWUpXG59O1xuZnVuY3Rpb24gY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSkge1xuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gICAgaWYgKHJhd0tleSAhPT0ga2V5ICYmIGhhcy5jYWxsKHRhcmdldCwgcmF3S2V5KSkge1xuICAgICAgICBjb25zdCB0eXBlID0gdG9SYXdUeXBlKHRhcmdldCk7XG4gICAgICAgIGNvbnNvbGUud2FybihgUmVhY3RpdmUgJHt0eXBlfSBjb250YWlucyBib3RoIHRoZSByYXcgYW5kIHJlYWN0aXZlIGAgK1xuICAgICAgICAgICAgYHZlcnNpb25zIG9mIHRoZSBzYW1lIG9iamVjdCR7dHlwZSA9PT0gYE1hcGAgPyBgIGFzIGtleXNgIDogYGB9LCBgICtcbiAgICAgICAgICAgIGB3aGljaCBjYW4gbGVhZCB0byBpbmNvbnNpc3RlbmNpZXMuIGAgK1xuICAgICAgICAgICAgYEF2b2lkIGRpZmZlcmVudGlhdGluZyBiZXR3ZWVuIHRoZSByYXcgYW5kIHJlYWN0aXZlIHZlcnNpb25zIGAgK1xuICAgICAgICAgICAgYG9mIGFuIG9iamVjdCBhbmQgb25seSB1c2UgdGhlIHJlYWN0aXZlIHZlcnNpb24gaWYgcG9zc2libGUuYCk7XG4gICAgfVxufVxuXG5jb25zdCByZWFjdGl2ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBzaGFsbG93UmVhY3RpdmVNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmVhZG9ubHlNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3Qgc2hhbGxvd1JlYWRvbmx5TWFwID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHRhcmdldFR5cGVNYXAocmF3VHlwZSkge1xuICAgIHN3aXRjaCAocmF3VHlwZSkge1xuICAgICAgICBjYXNlICdPYmplY3QnOlxuICAgICAgICBjYXNlICdBcnJheSc6XG4gICAgICAgICAgICByZXR1cm4gMSAvKiBUYXJnZXRUeXBlLkNPTU1PTiAqLztcbiAgICAgICAgY2FzZSAnTWFwJzpcbiAgICAgICAgY2FzZSAnU2V0JzpcbiAgICAgICAgY2FzZSAnV2Vha01hcCc6XG4gICAgICAgIGNhc2UgJ1dlYWtTZXQnOlxuICAgICAgICAgICAgcmV0dXJuIDIgLyogVGFyZ2V0VHlwZS5DT0xMRUNUSU9OICovO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIDAgLyogVGFyZ2V0VHlwZS5JTlZBTElEICovO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFRhcmdldFR5cGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWVbXCJfX3Zfc2tpcFwiIC8qIFJlYWN0aXZlRmxhZ3MuU0tJUCAqL10gfHwgIU9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpXG4gICAgICAgID8gMCAvKiBUYXJnZXRUeXBlLklOVkFMSUQgKi9cbiAgICAgICAgOiB0YXJnZXRUeXBlTWFwKHRvUmF3VHlwZSh2YWx1ZSkpO1xufVxuZnVuY3Rpb24gcmVhY3RpdmUodGFyZ2V0KSB7XG4gICAgLy8gaWYgdHJ5aW5nIHRvIG9ic2VydmUgYSByZWFkb25seSBwcm94eSwgcmV0dXJuIHRoZSByZWFkb25seSB2ZXJzaW9uLlxuICAgIGlmIChpc1JlYWRvbmx5KHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgZmFsc2UsIG11dGFibGVIYW5kbGVycywgbXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycywgcmVhY3RpdmVNYXApO1xufVxuLyoqXG4gKiBSZXR1cm4gYSBzaGFsbG93bHktcmVhY3RpdmUgY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LCB3aGVyZSBvbmx5IHRoZSByb290XG4gKiBsZXZlbCBwcm9wZXJ0aWVzIGFyZSByZWFjdGl2ZS4gSXQgYWxzbyBkb2VzIG5vdCBhdXRvLXVud3JhcCByZWZzIChldmVuIGF0IHRoZVxuICogcm9vdCBsZXZlbCkuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dSZWFjdGl2ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBmYWxzZSwgc2hhbGxvd1JlYWN0aXZlSGFuZGxlcnMsIHNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMsIHNoYWxsb3dSZWFjdGl2ZU1hcCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSByZWFkb25seSBjb3B5IG9mIHRoZSBvcmlnaW5hbCBvYmplY3QuIE5vdGUgdGhlIHJldHVybmVkIGNvcHkgaXMgbm90XG4gKiBtYWRlIHJlYWN0aXZlLCBidXQgYHJlYWRvbmx5YCBjYW4gYmUgY2FsbGVkIG9uIGFuIGFscmVhZHkgcmVhY3RpdmUgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZWFkb25seSh0YXJnZXQpIHtcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCB0cnVlLCByZWFkb25seUhhbmRsZXJzLCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycywgcmVhZG9ubHlNYXApO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVhY3RpdmUtY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LCB3aGVyZSBvbmx5IHRoZSByb290IGxldmVsXG4gKiBwcm9wZXJ0aWVzIGFyZSByZWFkb25seSwgYW5kIGRvZXMgTk9UIHVud3JhcCByZWZzIG5vciByZWN1cnNpdmVseSBjb252ZXJ0XG4gKiByZXR1cm5lZCBwcm9wZXJ0aWVzLlxuICogVGhpcyBpcyB1c2VkIGZvciBjcmVhdGluZyB0aGUgcHJvcHMgcHJveHkgb2JqZWN0IGZvciBzdGF0ZWZ1bCBjb21wb25lbnRzLlxuICovXG5mdW5jdGlvbiBzaGFsbG93UmVhZG9ubHkodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgdHJ1ZSwgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMsIHNoYWxsb3dSZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycywgc2hhbGxvd1JlYWRvbmx5TWFwKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgaXNSZWFkb25seSwgYmFzZUhhbmRsZXJzLCBjb2xsZWN0aW9uSGFuZGxlcnMsIHByb3h5TWFwKSB7XG4gICAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgdmFsdWUgY2Fubm90IGJlIG1hZGUgcmVhY3RpdmU6ICR7U3RyaW5nKHRhcmdldCl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgLy8gdGFyZ2V0IGlzIGFscmVhZHkgYSBQcm94eSwgcmV0dXJuIGl0LlxuICAgIC8vIGV4Y2VwdGlvbjogY2FsbGluZyByZWFkb25seSgpIG9uIGEgcmVhY3RpdmUgb2JqZWN0XG4gICAgaWYgKHRhcmdldFtcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL10gJiZcbiAgICAgICAgIShpc1JlYWRvbmx5ICYmIHRhcmdldFtcIl9fdl9pc1JlYWN0aXZlXCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFDVElWRSAqL10pKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIC8vIHRhcmdldCBhbHJlYWR5IGhhcyBjb3JyZXNwb25kaW5nIFByb3h5XG4gICAgY29uc3QgZXhpc3RpbmdQcm94eSA9IHByb3h5TWFwLmdldCh0YXJnZXQpO1xuICAgIGlmIChleGlzdGluZ1Byb3h5KSB7XG4gICAgICAgIHJldHVybiBleGlzdGluZ1Byb3h5O1xuICAgIH1cbiAgICAvLyBvbmx5IHNwZWNpZmljIHZhbHVlIHR5cGVzIGNhbiBiZSBvYnNlcnZlZC5cbiAgICBjb25zdCB0YXJnZXRUeXBlID0gZ2V0VGFyZ2V0VHlwZSh0YXJnZXQpO1xuICAgIGlmICh0YXJnZXRUeXBlID09PSAwIC8qIFRhcmdldFR5cGUuSU5WQUxJRCAqLykge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICBjb25zdCBwcm94eSA9IG5ldyBQcm94eSh0YXJnZXQsIHRhcmdldFR5cGUgPT09IDIgLyogVGFyZ2V0VHlwZS5DT0xMRUNUSU9OICovID8gY29sbGVjdGlvbkhhbmRsZXJzIDogYmFzZUhhbmRsZXJzKTtcbiAgICBwcm94eU1hcC5zZXQodGFyZ2V0LCBwcm94eSk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuZnVuY3Rpb24gaXNSZWFjdGl2ZSh2YWx1ZSkge1xuICAgIGlmIChpc1JlYWRvbmx5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZVtcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL10pO1xuICAgIH1cbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBQ1RJVkUgKi9dKTtcbn1cbmZ1bmN0aW9uIGlzUmVhZG9ubHkodmFsdWUpIHtcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNSZWFkb25seVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBRE9OTFkgKi9dKTtcbn1cbmZ1bmN0aW9uIGlzU2hhbGxvdyh2YWx1ZSkge1xuICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1NoYWxsb3dcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1NIQUxMT1cgKi9dKTtcbn1cbmZ1bmN0aW9uIGlzUHJveHkodmFsdWUpIHtcbiAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZSkgfHwgaXNSZWFkb25seSh2YWx1ZSk7XG59XG5mdW5jdGlvbiB0b1JhdyhvYnNlcnZlZCkge1xuICAgIGNvbnN0IHJhdyA9IG9ic2VydmVkICYmIG9ic2VydmVkW1wiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovXTtcbiAgICByZXR1cm4gcmF3ID8gdG9SYXcocmF3KSA6IG9ic2VydmVkO1xufVxuZnVuY3Rpb24gbWFya1Jhdyh2YWx1ZSkge1xuICAgIGRlZih2YWx1ZSwgXCJfX3Zfc2tpcFwiIC8qIFJlYWN0aXZlRmxhZ3MuU0tJUCAqLywgdHJ1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuY29uc3QgdG9SZWFjdGl2ZSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhY3RpdmUodmFsdWUpIDogdmFsdWU7XG5jb25zdCB0b1JlYWRvbmx5ID0gKHZhbHVlKSA9PiBpc09iamVjdCh2YWx1ZSkgPyByZWFkb25seSh2YWx1ZSkgOiB2YWx1ZTtcblxuZnVuY3Rpb24gdHJhY2tSZWZWYWx1ZShyZWYpIHtcbiAgICBpZiAoc2hvdWxkVHJhY2sgJiYgYWN0aXZlRWZmZWN0KSB7XG4gICAgICAgIHJlZiA9IHRvUmF3KHJlZik7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHRyYWNrRWZmZWN0cyhyZWYuZGVwIHx8IChyZWYuZGVwID0gY3JlYXRlRGVwKCkpLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiByZWYsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJnZXRcIiAvKiBUcmFja09wVHlwZXMuR0VUICovLFxuICAgICAgICAgICAgICAgIGtleTogJ3ZhbHVlJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cmFja0VmZmVjdHMocmVmLmRlcCB8fCAocmVmLmRlcCA9IGNyZWF0ZURlcCgpKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0cmlnZ2VyUmVmVmFsdWUocmVmLCBuZXdWYWwpIHtcbiAgICByZWYgPSB0b1JhdyhyZWYpO1xuICAgIGlmIChyZWYuZGVwKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHRyaWdnZXJFZmZlY3RzKHJlZi5kZXAsIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHJlZixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLyxcbiAgICAgICAgICAgICAgICBrZXk6ICd2YWx1ZScsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cmlnZ2VyRWZmZWN0cyhyZWYuZGVwKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGlzUmVmKHIpIHtcbiAgICByZXR1cm4gISEociAmJiByLl9fdl9pc1JlZiA9PT0gdHJ1ZSk7XG59XG5mdW5jdGlvbiByZWYodmFsdWUpIHtcbiAgICByZXR1cm4gY3JlYXRlUmVmKHZhbHVlLCBmYWxzZSk7XG59XG5mdW5jdGlvbiBzaGFsbG93UmVmKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVJlZih2YWx1ZSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVSZWYocmF3VmFsdWUsIHNoYWxsb3cpIHtcbiAgICBpZiAoaXNSZWYocmF3VmFsdWUpKSB7XG4gICAgICAgIHJldHVybiByYXdWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZWZJbXBsKHJhd1ZhbHVlLCBzaGFsbG93KTtcbn1cbmNsYXNzIFJlZkltcGwge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCBfX3ZfaXNTaGFsbG93KSB7XG4gICAgICAgIHRoaXMuX192X2lzU2hhbGxvdyA9IF9fdl9pc1NoYWxsb3c7XG4gICAgICAgIHRoaXMuZGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XG4gICAgICAgIHRoaXMuX3Jhd1ZhbHVlID0gX192X2lzU2hhbGxvdyA/IHZhbHVlIDogdG9SYXcodmFsdWUpO1xuICAgICAgICB0aGlzLl92YWx1ZSA9IF9fdl9pc1NoYWxsb3cgPyB2YWx1ZSA6IHRvUmVhY3RpdmUodmFsdWUpO1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHRyYWNrUmVmVmFsdWUodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xuICAgICAgICBjb25zdCB1c2VEaXJlY3RWYWx1ZSA9IHRoaXMuX192X2lzU2hhbGxvdyB8fCBpc1NoYWxsb3cobmV3VmFsKSB8fCBpc1JlYWRvbmx5KG5ld1ZhbCk7XG4gICAgICAgIG5ld1ZhbCA9IHVzZURpcmVjdFZhbHVlID8gbmV3VmFsIDogdG9SYXcobmV3VmFsKTtcbiAgICAgICAgaWYgKGhhc0NoYW5nZWQobmV3VmFsLCB0aGlzLl9yYXdWYWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jhd1ZhbHVlID0gbmV3VmFsO1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB1c2VEaXJlY3RWYWx1ZSA/IG5ld1ZhbCA6IHRvUmVhY3RpdmUobmV3VmFsKTtcbiAgICAgICAgICAgIHRyaWdnZXJSZWZWYWx1ZSh0aGlzLCBuZXdWYWwpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdHJpZ2dlclJlZihyZWYpIHtcbiAgICB0cmlnZ2VyUmVmVmFsdWUocmVmLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyByZWYudmFsdWUgOiB2b2lkIDApO1xufVxuZnVuY3Rpb24gdW5yZWYocmVmKSB7XG4gICAgcmV0dXJuIGlzUmVmKHJlZikgPyByZWYudmFsdWUgOiByZWY7XG59XG5jb25zdCBzaGFsbG93VW53cmFwSGFuZGxlcnMgPSB7XG4gICAgZ2V0OiAodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSA9PiB1bnJlZihSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpKSxcbiAgICBzZXQ6ICh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XG4gICAgICAgIGlmIChpc1JlZihvbGRWYWx1ZSkgJiYgIWlzUmVmKHZhbHVlKSkge1xuICAgICAgICAgICAgb2xkVmFsdWUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3Quc2V0KHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xuICAgICAgICB9XG4gICAgfVxufTtcbmZ1bmN0aW9uIHByb3h5UmVmcyhvYmplY3RXaXRoUmVmcykge1xuICAgIHJldHVybiBpc1JlYWN0aXZlKG9iamVjdFdpdGhSZWZzKVxuICAgICAgICA/IG9iamVjdFdpdGhSZWZzXG4gICAgICAgIDogbmV3IFByb3h5KG9iamVjdFdpdGhSZWZzLCBzaGFsbG93VW53cmFwSGFuZGxlcnMpO1xufVxuY2xhc3MgQ3VzdG9tUmVmSW1wbCB7XG4gICAgY29uc3RydWN0b3IoZmFjdG9yeSkge1xuICAgICAgICB0aGlzLmRlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xuICAgICAgICBjb25zdCB7IGdldCwgc2V0IH0gPSBmYWN0b3J5KCgpID0+IHRyYWNrUmVmVmFsdWUodGhpcyksICgpID0+IHRyaWdnZXJSZWZWYWx1ZSh0aGlzKSk7XG4gICAgICAgIHRoaXMuX2dldCA9IGdldDtcbiAgICAgICAgdGhpcy5fc2V0ID0gc2V0O1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQoKTtcbiAgICB9XG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xuICAgICAgICB0aGlzLl9zZXQobmV3VmFsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjdXN0b21SZWYoZmFjdG9yeSkge1xuICAgIHJldHVybiBuZXcgQ3VzdG9tUmVmSW1wbChmYWN0b3J5KTtcbn1cbmZ1bmN0aW9uIHRvUmVmcyhvYmplY3QpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1Byb3h5KG9iamVjdCkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGB0b1JlZnMoKSBleHBlY3RzIGEgcmVhY3RpdmUgb2JqZWN0IGJ1dCByZWNlaXZlZCBhIHBsYWluIG9uZS5gKTtcbiAgICB9XG4gICAgY29uc3QgcmV0ID0gaXNBcnJheShvYmplY3QpID8gbmV3IEFycmF5KG9iamVjdC5sZW5ndGgpIDoge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIHJldFtrZXldID0gdG9SZWYob2JqZWN0LCBrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuY2xhc3MgT2JqZWN0UmVmSW1wbCB7XG4gICAgY29uc3RydWN0b3IoX29iamVjdCwgX2tleSwgX2RlZmF1bHRWYWx1ZSkge1xuICAgICAgICB0aGlzLl9vYmplY3QgPSBfb2JqZWN0O1xuICAgICAgICB0aGlzLl9rZXkgPSBfa2V5O1xuICAgICAgICB0aGlzLl9kZWZhdWx0VmFsdWUgPSBfZGVmYXVsdFZhbHVlO1xuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy5fb2JqZWN0W3RoaXMuX2tleV07XG4gICAgICAgIHJldHVybiB2YWwgPT09IHVuZGVmaW5lZCA/IHRoaXMuX2RlZmF1bHRWYWx1ZSA6IHZhbDtcbiAgICB9XG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xuICAgICAgICB0aGlzLl9vYmplY3RbdGhpcy5fa2V5XSA9IG5ld1ZhbDtcbiAgICB9XG59XG5mdW5jdGlvbiB0b1JlZihvYmplY3QsIGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgY29uc3QgdmFsID0gb2JqZWN0W2tleV07XG4gICAgcmV0dXJuIGlzUmVmKHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiBuZXcgT2JqZWN0UmVmSW1wbChvYmplY3QsIGtleSwgZGVmYXVsdFZhbHVlKTtcbn1cblxudmFyIF9hO1xuY2xhc3MgQ29tcHV0ZWRSZWZJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihnZXR0ZXIsIF9zZXR0ZXIsIGlzUmVhZG9ubHksIGlzU1NSKSB7XG4gICAgICAgIHRoaXMuX3NldHRlciA9IF9zZXR0ZXI7XG4gICAgICAgIHRoaXMuZGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XG4gICAgICAgIHRoaXNbX2FdID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lZmZlY3QgPSBuZXcgUmVhY3RpdmVFZmZlY3QoZ2V0dGVyLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2RpcnR5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyaWdnZXJSZWZWYWx1ZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWZmZWN0LmNvbXB1dGVkID0gdGhpcztcbiAgICAgICAgdGhpcy5lZmZlY3QuYWN0aXZlID0gdGhpcy5fY2FjaGVhYmxlID0gIWlzU1NSO1xuICAgICAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1JFQURPTkxZICovXSA9IGlzUmVhZG9ubHk7XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgLy8gdGhlIGNvbXB1dGVkIHJlZiBtYXkgZ2V0IHdyYXBwZWQgYnkgb3RoZXIgcHJveGllcyBlLmcuIHJlYWRvbmx5KCkgIzMzNzZcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRvUmF3KHRoaXMpO1xuICAgICAgICB0cmFja1JlZlZhbHVlKHNlbGYpO1xuICAgICAgICBpZiAoc2VsZi5fZGlydHkgfHwgIXNlbGYuX2NhY2hlYWJsZSkge1xuICAgICAgICAgICAgc2VsZi5fZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHNlbGYuX3ZhbHVlID0gc2VsZi5lZmZlY3QucnVuKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlbGYuX3ZhbHVlO1xuICAgIH1cbiAgICBzZXQgdmFsdWUobmV3VmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc2V0dGVyKG5ld1ZhbHVlKTtcbiAgICB9XG59XG5fYSA9IFwiX192X2lzUmVhZG9ubHlcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1JFQURPTkxZICovO1xuZnVuY3Rpb24gY29tcHV0ZWQoZ2V0dGVyT3JPcHRpb25zLCBkZWJ1Z09wdGlvbnMsIGlzU1NSID0gZmFsc2UpIHtcbiAgICBsZXQgZ2V0dGVyO1xuICAgIGxldCBzZXR0ZXI7XG4gICAgY29uc3Qgb25seUdldHRlciA9IGlzRnVuY3Rpb24oZ2V0dGVyT3JPcHRpb25zKTtcbiAgICBpZiAob25seUdldHRlcikge1xuICAgICAgICBnZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnM7XG4gICAgICAgIHNldHRlciA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICAgICAgPyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdXcml0ZSBvcGVyYXRpb24gZmFpbGVkOiBjb21wdXRlZCB2YWx1ZSBpcyByZWFkb25seScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBOT09QO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2V0dGVyID0gZ2V0dGVyT3JPcHRpb25zLmdldDtcbiAgICAgICAgc2V0dGVyID0gZ2V0dGVyT3JPcHRpb25zLnNldDtcbiAgICB9XG4gICAgY29uc3QgY1JlZiA9IG5ldyBDb21wdXRlZFJlZkltcGwoZ2V0dGVyLCBzZXR0ZXIsIG9ubHlHZXR0ZXIgfHwgIXNldHRlciwgaXNTU1IpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZGVidWdPcHRpb25zICYmICFpc1NTUikge1xuICAgICAgICBjUmVmLmVmZmVjdC5vblRyYWNrID0gZGVidWdPcHRpb25zLm9uVHJhY2s7XG4gICAgICAgIGNSZWYuZWZmZWN0Lm9uVHJpZ2dlciA9IGRlYnVnT3B0aW9ucy5vblRyaWdnZXI7XG4gICAgfVxuICAgIHJldHVybiBjUmVmO1xufVxuXG52YXIgX2EkMTtcbmNvbnN0IHRpY2sgPSAvKiNfX1BVUkVfXyovIFByb21pc2UucmVzb2x2ZSgpO1xuY29uc3QgcXVldWUgPSBbXTtcbmxldCBxdWV1ZWQgPSBmYWxzZTtcbmNvbnN0IHNjaGVkdWxlciA9IChmbikgPT4ge1xuICAgIHF1ZXVlLnB1c2goZm4pO1xuICAgIGlmICghcXVldWVkKSB7XG4gICAgICAgIHF1ZXVlZCA9IHRydWU7XG4gICAgICAgIHRpY2sudGhlbihmbHVzaCk7XG4gICAgfVxufTtcbmNvbnN0IGZsdXNoID0gKCkgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcXVldWVbaV0oKTtcbiAgICB9XG4gICAgcXVldWUubGVuZ3RoID0gMDtcbiAgICBxdWV1ZWQgPSBmYWxzZTtcbn07XG5jbGFzcyBEZWZlcnJlZENvbXB1dGVkUmVmSW1wbCB7XG4gICAgY29uc3RydWN0b3IoZ2V0dGVyKSB7XG4gICAgICAgIHRoaXMuZGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcbiAgICAgICAgdGhpc1tfYSQxXSA9IHRydWU7XG4gICAgICAgIGxldCBjb21wYXJlVGFyZ2V0O1xuICAgICAgICBsZXQgaGFzQ29tcGFyZVRhcmdldCA9IGZhbHNlO1xuICAgICAgICBsZXQgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KGdldHRlciwgKGNvbXB1dGVkVHJpZ2dlcikgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXB1dGVkVHJpZ2dlcikge1xuICAgICAgICAgICAgICAgICAgICBjb21wYXJlVGFyZ2V0ID0gdGhpcy5fdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGhhc0NvbXBhcmVUYXJnZXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlVG9Db21wYXJlID0gaGFzQ29tcGFyZVRhcmdldCA/IGNvbXBhcmVUYXJnZXQgOiB0aGlzLl92YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaGFzQ29tcGFyZVRhcmdldCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZWZmZWN0LmFjdGl2ZSAmJiB0aGlzLl9nZXQoKSAhPT0gdmFsdWVUb0NvbXBhcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyUmVmVmFsdWUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGNoYWluZWQgdXBzdHJlYW0gY29tcHV0ZWRzIGFyZSBub3RpZmllZCBzeW5jaHJvbm91c2x5IHRvIGVuc3VyZVxuICAgICAgICAgICAgICAgIC8vIHZhbHVlIGludmFsaWRhdGlvbiBpbiBjYXNlIG9mIHN5bmMgYWNjZXNzOyBub3JtYWwgZWZmZWN0cyBhcmVcbiAgICAgICAgICAgICAgICAvLyBkZWZlcnJlZCB0byBiZSB0cmlnZ2VyZWQgaW4gc2NoZWR1bGVyLlxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLmRlcCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5jb21wdXRlZCBpbnN0YW5jZW9mIERlZmVycmVkQ29tcHV0ZWRSZWZJbXBsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnNjaGVkdWxlcih0cnVlIC8qIGNvbXB1dGVkVHJpZ2dlciAqLyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVmZmVjdC5jb21wdXRlZCA9IHRoaXM7XG4gICAgfVxuICAgIF9nZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5fdmFsdWUgPSB0aGlzLmVmZmVjdC5ydW4oKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHRyYWNrUmVmVmFsdWUodGhpcyk7XG4gICAgICAgIC8vIHRoZSBjb21wdXRlZCByZWYgbWF5IGdldCB3cmFwcGVkIGJ5IG90aGVyIHByb3hpZXMgZS5nLiByZWFkb25seSgpICMzMzc2XG4gICAgICAgIHJldHVybiB0b1Jhdyh0aGlzKS5fZ2V0KCk7XG4gICAgfVxufVxuX2EkMSA9IFwiX192X2lzUmVhZG9ubHlcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1JFQURPTkxZICovO1xuZnVuY3Rpb24gZGVmZXJyZWRDb21wdXRlZChnZXR0ZXIpIHtcbiAgICByZXR1cm4gbmV3IERlZmVycmVkQ29tcHV0ZWRSZWZJbXBsKGdldHRlcik7XG59XG5cbmV4cG9ydCB7IEVmZmVjdFNjb3BlLCBJVEVSQVRFX0tFWSwgUmVhY3RpdmVFZmZlY3QsIGNvbXB1dGVkLCBjdXN0b21SZWYsIGRlZmVycmVkQ29tcHV0ZWQsIGVmZmVjdCwgZWZmZWN0U2NvcGUsIGVuYWJsZVRyYWNraW5nLCBnZXRDdXJyZW50U2NvcGUsIGlzUHJveHksIGlzUmVhY3RpdmUsIGlzUmVhZG9ubHksIGlzUmVmLCBpc1NoYWxsb3csIG1hcmtSYXcsIG9uU2NvcGVEaXNwb3NlLCBwYXVzZVRyYWNraW5nLCBwcm94eVJlZnMsIHJlYWN0aXZlLCByZWFkb25seSwgcmVmLCByZXNldFRyYWNraW5nLCBzaGFsbG93UmVhY3RpdmUsIHNoYWxsb3dSZWFkb25seSwgc2hhbGxvd1JlZiwgc3RvcCwgdG9SYXcsIHRvUmVmLCB0b1JlZnMsIHRyYWNrLCB0cmlnZ2VyLCB0cmlnZ2VyUmVmLCB1bnJlZiB9O1xuIiwiaW1wb3J0IHsgcGF1c2VUcmFja2luZywgcmVzZXRUcmFja2luZywgaXNSZWYsIHRvUmF3LCBpc1NoYWxsb3cgYXMgaXNTaGFsbG93JDEsIGlzUmVhY3RpdmUsIFJlYWN0aXZlRWZmZWN0LCByZWYsIHNoYWxsb3dSZWFkb25seSwgdHJhY2ssIHJlYWN0aXZlLCBzaGFsbG93UmVhY3RpdmUsIHRyaWdnZXIsIGlzUHJveHksIEVmZmVjdFNjb3BlLCBtYXJrUmF3LCBwcm94eVJlZnMsIGNvbXB1dGVkIGFzIGNvbXB1dGVkJDEsIGlzUmVhZG9ubHkgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuZXhwb3J0IHsgRWZmZWN0U2NvcGUsIFJlYWN0aXZlRWZmZWN0LCBjdXN0b21SZWYsIGVmZmVjdCwgZWZmZWN0U2NvcGUsIGdldEN1cnJlbnRTY29wZSwgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIGlzU2hhbGxvdywgbWFya1Jhdywgb25TY29wZURpc3Bvc2UsIHByb3h5UmVmcywgcmVhY3RpdmUsIHJlYWRvbmx5LCByZWYsIHNoYWxsb3dSZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCBzaGFsbG93UmVmLCBzdG9wLCB0b1JhdywgdG9SZWYsIHRvUmVmcywgdHJpZ2dlclJlZiwgdW5yZWYgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzRnVuY3Rpb24sIGlzUHJvbWlzZSwgaXNBcnJheSwgTk9PUCwgZ2V0R2xvYmFsVGhpcywgZXh0ZW5kLCBFTVBUWV9PQkosIHRvSGFuZGxlcktleSwgdG9OdW1iZXIsIGh5cGhlbmF0ZSwgY2FtZWxpemUsIGlzT2JqZWN0LCBpc09uLCBoYXNPd24sIGlzTW9kZWxMaXN0ZW5lciwgaGFzQ2hhbmdlZCwgcmVtb3ZlLCBpc1NldCwgaXNNYXAsIGlzUGxhaW5PYmplY3QsIGludm9rZUFycmF5Rm5zLCBpc0J1aWx0SW5EaXJlY3RpdmUsIGNhcGl0YWxpemUsIGlzR2xvYmFsbHlXaGl0ZWxpc3RlZCwgZGVmLCBpc1Jlc2VydmVkUHJvcCwgRU1QVFlfQVJSLCB0b1Jhd1R5cGUsIG1ha2VNYXAsIE5PLCBub3JtYWxpemVDbGFzcywgbm9ybWFsaXplU3R5bGUgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5leHBvcnQgeyBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVByb3BzLCBub3JtYWxpemVTdHlsZSwgdG9EaXNwbGF5U3RyaW5nLCB0b0hhbmRsZXJLZXkgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHN0YWNrID0gW107XG5mdW5jdGlvbiBwdXNoV2FybmluZ0NvbnRleHQodm5vZGUpIHtcbiAgICBzdGFjay5wdXNoKHZub2RlKTtcbn1cbmZ1bmN0aW9uIHBvcFdhcm5pbmdDb250ZXh0KCkge1xuICAgIHN0YWNrLnBvcCgpO1xufVxuZnVuY3Rpb24gd2Fybihtc2csIC4uLmFyZ3MpIHtcbiAgICAvLyBhdm9pZCBwcm9wcyBmb3JtYXR0aW5nIG9yIHdhcm4gaGFuZGxlciB0cmFja2luZyBkZXBzIHRoYXQgbWlnaHQgYmUgbXV0YXRlZFxuICAgIC8vIGR1cmluZyBwYXRjaCwgbGVhZGluZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgcGF1c2VUcmFja2luZygpO1xuICAgIGNvbnN0IGluc3RhbmNlID0gc3RhY2subGVuZ3RoID8gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0uY29tcG9uZW50IDogbnVsbDtcbiAgICBjb25zdCBhcHBXYXJuSGFuZGxlciA9IGluc3RhbmNlICYmIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLndhcm5IYW5kbGVyO1xuICAgIGNvbnN0IHRyYWNlID0gZ2V0Q29tcG9uZW50VHJhY2UoKTtcbiAgICBpZiAoYXBwV2FybkhhbmRsZXIpIHtcbiAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGFwcFdhcm5IYW5kbGVyLCBpbnN0YW5jZSwgMTEgLyogRXJyb3JDb2Rlcy5BUFBfV0FSTl9IQU5ETEVSICovLCBbXG4gICAgICAgICAgICBtc2cgKyBhcmdzLmpvaW4oJycpLFxuICAgICAgICAgICAgaW5zdGFuY2UgJiYgaW5zdGFuY2UucHJveHksXG4gICAgICAgICAgICB0cmFjZVxuICAgICAgICAgICAgICAgIC5tYXAoKHsgdm5vZGUgfSkgPT4gYGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIHZub2RlLnR5cGUpfT5gKVxuICAgICAgICAgICAgICAgIC5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgIHRyYWNlXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgd2FybkFyZ3MgPSBbYFtWdWUgd2Fybl06ICR7bXNnfWAsIC4uLmFyZ3NdO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHRyYWNlLmxlbmd0aCAmJlxuICAgICAgICAgICAgLy8gYXZvaWQgc3BhbW1pbmcgY29uc29sZSBkdXJpbmcgdGVzdHNcbiAgICAgICAgICAgICFmYWxzZSkge1xuICAgICAgICAgICAgd2FybkFyZ3MucHVzaChgXFxuYCwgLi4uZm9ybWF0VHJhY2UodHJhY2UpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLndhcm4oLi4ud2FybkFyZ3MpO1xuICAgIH1cbiAgICByZXNldFRyYWNraW5nKCk7XG59XG5mdW5jdGlvbiBnZXRDb21wb25lbnRUcmFjZSgpIHtcbiAgICBsZXQgY3VycmVudFZOb2RlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgaWYgKCFjdXJyZW50Vk5vZGUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICAvLyB3ZSBjYW4ndCBqdXN0IHVzZSB0aGUgc3RhY2sgYmVjYXVzZSBpdCB3aWxsIGJlIGluY29tcGxldGUgZHVyaW5nIHVwZGF0ZXNcbiAgICAvLyB0aGF0IGRpZCBub3Qgc3RhcnQgZnJvbSB0aGUgcm9vdC4gUmUtY29uc3RydWN0IHRoZSBwYXJlbnQgY2hhaW4gdXNpbmdcbiAgICAvLyBpbnN0YW5jZSBwYXJlbnQgcG9pbnRlcnMuXG4gICAgY29uc3Qgbm9ybWFsaXplZFN0YWNrID0gW107XG4gICAgd2hpbGUgKGN1cnJlbnRWTm9kZSkge1xuICAgICAgICBjb25zdCBsYXN0ID0gbm9ybWFsaXplZFN0YWNrWzBdO1xuICAgICAgICBpZiAobGFzdCAmJiBsYXN0LnZub2RlID09PSBjdXJyZW50Vk5vZGUpIHtcbiAgICAgICAgICAgIGxhc3QucmVjdXJzZUNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub3JtYWxpemVkU3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgdm5vZGU6IGN1cnJlbnRWTm9kZSxcbiAgICAgICAgICAgICAgICByZWN1cnNlQ291bnQ6IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmVudEluc3RhbmNlID0gY3VycmVudFZOb2RlLmNvbXBvbmVudCAmJiBjdXJyZW50Vk5vZGUuY29tcG9uZW50LnBhcmVudDtcbiAgICAgICAgY3VycmVudFZOb2RlID0gcGFyZW50SW5zdGFuY2UgJiYgcGFyZW50SW5zdGFuY2Uudm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVkU3RhY2s7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZm9ybWF0VHJhY2UodHJhY2UpIHtcbiAgICBjb25zdCBsb2dzID0gW107XG4gICAgdHJhY2UuZm9yRWFjaCgoZW50cnksIGkpID0+IHtcbiAgICAgICAgbG9ncy5wdXNoKC4uLihpID09PSAwID8gW10gOiBbYFxcbmBdKSwgLi4uZm9ybWF0VHJhY2VFbnRyeShlbnRyeSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBsb2dzO1xufVxuZnVuY3Rpb24gZm9ybWF0VHJhY2VFbnRyeSh7IHZub2RlLCByZWN1cnNlQ291bnQgfSkge1xuICAgIGNvbnN0IHBvc3RmaXggPSByZWN1cnNlQ291bnQgPiAwID8gYC4uLiAoJHtyZWN1cnNlQ291bnR9IHJlY3Vyc2l2ZSBjYWxscylgIDogYGA7XG4gICAgY29uc3QgaXNSb290ID0gdm5vZGUuY29tcG9uZW50ID8gdm5vZGUuY29tcG9uZW50LnBhcmVudCA9PSBudWxsIDogZmFsc2U7XG4gICAgY29uc3Qgb3BlbiA9IGAgYXQgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZSh2bm9kZS5jb21wb25lbnQsIHZub2RlLnR5cGUsIGlzUm9vdCl9YDtcbiAgICBjb25zdCBjbG9zZSA9IGA+YCArIHBvc3RmaXg7XG4gICAgcmV0dXJuIHZub2RlLnByb3BzXG4gICAgICAgID8gW29wZW4sIC4uLmZvcm1hdFByb3BzKHZub2RlLnByb3BzKSwgY2xvc2VdXG4gICAgICAgIDogW29wZW4gKyBjbG9zZV07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZm9ybWF0UHJvcHMocHJvcHMpIHtcbiAgICBjb25zdCByZXMgPSBbXTtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1xuICAgIGtleXMuc2xpY2UoMCwgMykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICByZXMucHVzaCguLi5mb3JtYXRQcm9wKGtleSwgcHJvcHNba2V5XSkpO1xuICAgIH0pO1xuICAgIGlmIChrZXlzLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgcmVzLnB1c2goYCAuLi5gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBmb3JtYXRQcm9wKGtleSwgdmFsdWUsIHJhdykge1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT0ke3ZhbHVlfWBdO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1JlZih2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBmb3JtYXRQcm9wKGtleSwgdG9SYXcodmFsdWUudmFsdWUpLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09UmVmPGAsIHZhbHVlLCBgPmBdO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gW2Ake2tleX09Zm4ke3ZhbHVlLm5hbWUgPyBgPCR7dmFsdWUubmFtZX0+YCA6IGBgfWBdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PWAsIHZhbHVlXTtcbiAgICB9XG59XG5cbmNvbnN0IEVycm9yVHlwZVN0cmluZ3MgPSB7XG4gICAgW1wic3BcIiAvKiBMaWZlY3ljbGVIb29rcy5TRVJWRVJfUFJFRkVUQ0ggKi9dOiAnc2VydmVyUHJlZmV0Y2ggaG9vaycsXG4gICAgW1wiYmNcIiAvKiBMaWZlY3ljbGVIb29rcy5CRUZPUkVfQ1JFQVRFICovXTogJ2JlZm9yZUNyZWF0ZSBob29rJyxcbiAgICBbXCJjXCIgLyogTGlmZWN5Y2xlSG9va3MuQ1JFQVRFRCAqL106ICdjcmVhdGVkIGhvb2snLFxuICAgIFtcImJtXCIgLyogTGlmZWN5Y2xlSG9va3MuQkVGT1JFX01PVU5UICovXTogJ2JlZm9yZU1vdW50IGhvb2snLFxuICAgIFtcIm1cIiAvKiBMaWZlY3ljbGVIb29rcy5NT1VOVEVEICovXTogJ21vdW50ZWQgaG9vaycsXG4gICAgW1wiYnVcIiAvKiBMaWZlY3ljbGVIb29rcy5CRUZPUkVfVVBEQVRFICovXTogJ2JlZm9yZVVwZGF0ZSBob29rJyxcbiAgICBbXCJ1XCIgLyogTGlmZWN5Y2xlSG9va3MuVVBEQVRFRCAqL106ICd1cGRhdGVkJyxcbiAgICBbXCJidW1cIiAvKiBMaWZlY3ljbGVIb29rcy5CRUZPUkVfVU5NT1VOVCAqL106ICdiZWZvcmVVbm1vdW50IGhvb2snLFxuICAgIFtcInVtXCIgLyogTGlmZWN5Y2xlSG9va3MuVU5NT1VOVEVEICovXTogJ3VubW91bnRlZCBob29rJyxcbiAgICBbXCJhXCIgLyogTGlmZWN5Y2xlSG9va3MuQUNUSVZBVEVEICovXTogJ2FjdGl2YXRlZCBob29rJyxcbiAgICBbXCJkYVwiIC8qIExpZmVjeWNsZUhvb2tzLkRFQUNUSVZBVEVEICovXTogJ2RlYWN0aXZhdGVkIGhvb2snLFxuICAgIFtcImVjXCIgLyogTGlmZWN5Y2xlSG9va3MuRVJST1JfQ0FQVFVSRUQgKi9dOiAnZXJyb3JDYXB0dXJlZCBob29rJyxcbiAgICBbXCJydGNcIiAvKiBMaWZlY3ljbGVIb29rcy5SRU5ERVJfVFJBQ0tFRCAqL106ICdyZW5kZXJUcmFja2VkIGhvb2snLFxuICAgIFtcInJ0Z1wiIC8qIExpZmVjeWNsZUhvb2tzLlJFTkRFUl9UUklHR0VSRUQgKi9dOiAncmVuZGVyVHJpZ2dlcmVkIGhvb2snLFxuICAgIFswIC8qIEVycm9yQ29kZXMuU0VUVVBfRlVOQ1RJT04gKi9dOiAnc2V0dXAgZnVuY3Rpb24nLFxuICAgIFsxIC8qIEVycm9yQ29kZXMuUkVOREVSX0ZVTkNUSU9OICovXTogJ3JlbmRlciBmdW5jdGlvbicsXG4gICAgWzIgLyogRXJyb3JDb2Rlcy5XQVRDSF9HRVRURVIgKi9dOiAnd2F0Y2hlciBnZXR0ZXInLFxuICAgIFszIC8qIEVycm9yQ29kZXMuV0FUQ0hfQ0FMTEJBQ0sgKi9dOiAnd2F0Y2hlciBjYWxsYmFjaycsXG4gICAgWzQgLyogRXJyb3JDb2Rlcy5XQVRDSF9DTEVBTlVQICovXTogJ3dhdGNoZXIgY2xlYW51cCBmdW5jdGlvbicsXG4gICAgWzUgLyogRXJyb3JDb2Rlcy5OQVRJVkVfRVZFTlRfSEFORExFUiAqL106ICduYXRpdmUgZXZlbnQgaGFuZGxlcicsXG4gICAgWzYgLyogRXJyb3JDb2Rlcy5DT01QT05FTlRfRVZFTlRfSEFORExFUiAqL106ICdjb21wb25lbnQgZXZlbnQgaGFuZGxlcicsXG4gICAgWzcgLyogRXJyb3JDb2Rlcy5WTk9ERV9IT09LICovXTogJ3Zub2RlIGhvb2snLFxuICAgIFs4IC8qIEVycm9yQ29kZXMuRElSRUNUSVZFX0hPT0sgKi9dOiAnZGlyZWN0aXZlIGhvb2snLFxuICAgIFs5IC8qIEVycm9yQ29kZXMuVFJBTlNJVElPTl9IT09LICovXTogJ3RyYW5zaXRpb24gaG9vaycsXG4gICAgWzEwIC8qIEVycm9yQ29kZXMuQVBQX0VSUk9SX0hBTkRMRVIgKi9dOiAnYXBwIGVycm9ySGFuZGxlcicsXG4gICAgWzExIC8qIEVycm9yQ29kZXMuQVBQX1dBUk5fSEFORExFUiAqL106ICdhcHAgd2FybkhhbmRsZXInLFxuICAgIFsxMiAvKiBFcnJvckNvZGVzLkZVTkNUSU9OX1JFRiAqL106ICdyZWYgZnVuY3Rpb24nLFxuICAgIFsxMyAvKiBFcnJvckNvZGVzLkFTWU5DX0NPTVBPTkVOVF9MT0FERVIgKi9dOiAnYXN5bmMgY29tcG9uZW50IGxvYWRlcicsXG4gICAgWzE0IC8qIEVycm9yQ29kZXMuU0NIRURVTEVSICovXTogJ3NjaGVkdWxlciBmbHVzaC4gVGhpcyBpcyBsaWtlbHkgYSBWdWUgaW50ZXJuYWxzIGJ1Zy4gJyArXG4gICAgICAgICdQbGVhc2Ugb3BlbiBhbiBpc3N1ZSBhdCBodHRwczovL25ldy1pc3N1ZS52dWVqcy5vcmcvP3JlcG89dnVlanMvY29yZSdcbn07XG5mdW5jdGlvbiBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSB7XG4gICAgbGV0IHJlcztcbiAgICB0cnkge1xuICAgICAgICByZXMgPSBhcmdzID8gZm4oLi4uYXJncykgOiBmbigpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIHR5cGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGNhbGxXaXRoRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpO1xuICAgICAgICBpZiAocmVzICYmIGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgICAgICByZXMuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm5baV0sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG59XG5mdW5jdGlvbiBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlLCB0aHJvd0luRGV2ID0gdHJ1ZSkge1xuICAgIGNvbnN0IGNvbnRleHRWTm9kZSA9IGluc3RhbmNlID8gaW5zdGFuY2Uudm5vZGUgOiBudWxsO1xuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICBsZXQgY3VyID0gaW5zdGFuY2UucGFyZW50O1xuICAgICAgICAvLyB0aGUgZXhwb3NlZCBpbnN0YW5jZSBpcyB0aGUgcmVuZGVyIHByb3h5IHRvIGtlZXAgaXQgY29uc2lzdGVudCB3aXRoIDIueFxuICAgICAgICBjb25zdCBleHBvc2VkSW5zdGFuY2UgPSBpbnN0YW5jZS5wcm94eTtcbiAgICAgICAgLy8gaW4gcHJvZHVjdGlvbiB0aGUgaG9vayByZWNlaXZlcyBvbmx5IHRoZSBlcnJvciBjb2RlXG4gICAgICAgIGNvbnN0IGVycm9ySW5mbyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IEVycm9yVHlwZVN0cmluZ3NbdHlwZV0gOiB0eXBlO1xuICAgICAgICB3aGlsZSAoY3VyKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvckNhcHR1cmVkSG9va3MgPSBjdXIuZWM7XG4gICAgICAgICAgICBpZiAoZXJyb3JDYXB0dXJlZEhvb2tzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcnJvckNhcHR1cmVkSG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yQ2FwdHVyZWRIb29rc1tpXShlcnIsIGV4cG9zZWRJbnN0YW5jZSwgZXJyb3JJbmZvKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1ciA9IGN1ci5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwLWxldmVsIGhhbmRsaW5nXG4gICAgICAgIGNvbnN0IGFwcEVycm9ySGFuZGxlciA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmVycm9ySGFuZGxlcjtcbiAgICAgICAgaWYgKGFwcEVycm9ySGFuZGxlcikge1xuICAgICAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGFwcEVycm9ySGFuZGxlciwgbnVsbCwgMTAgLyogRXJyb3JDb2Rlcy5BUFBfRVJST1JfSEFORExFUiAqLywgW2VyciwgZXhwb3NlZEluc3RhbmNlLCBlcnJvckluZm9dKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsb2dFcnJvcihlcnIsIHR5cGUsIGNvbnRleHRWTm9kZSwgdGhyb3dJbkRldik7XG59XG5mdW5jdGlvbiBsb2dFcnJvcihlcnIsIHR5cGUsIGNvbnRleHRWTm9kZSwgdGhyb3dJbkRldiA9IHRydWUpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGNvbnN0IGluZm8gPSBFcnJvclR5cGVTdHJpbmdzW3R5cGVdO1xuICAgICAgICBpZiAoY29udGV4dFZOb2RlKSB7XG4gICAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQoY29udGV4dFZOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICB3YXJuKGBVbmhhbmRsZWQgZXJyb3Ike2luZm8gPyBgIGR1cmluZyBleGVjdXRpb24gb2YgJHtpbmZvfWAgOiBgYH1gKTtcbiAgICAgICAgaWYgKGNvbnRleHRWTm9kZSkge1xuICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjcmFzaCBpbiBkZXYgYnkgZGVmYXVsdCBzbyBpdCdzIG1vcmUgbm90aWNlYWJsZVxuICAgICAgICBpZiAodGhyb3dJbkRldikge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyByZWNvdmVyIGluIHByb2QgdG8gcmVkdWNlIHRoZSBpbXBhY3Qgb24gZW5kLXVzZXJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbn1cblxubGV0IGlzRmx1c2hpbmcgPSBmYWxzZTtcbmxldCBpc0ZsdXNoUGVuZGluZyA9IGZhbHNlO1xuY29uc3QgcXVldWUgPSBbXTtcbmxldCBmbHVzaEluZGV4ID0gMDtcbmNvbnN0IHBlbmRpbmdQb3N0Rmx1c2hDYnMgPSBbXTtcbmxldCBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBudWxsO1xubGV0IHBvc3RGbHVzaEluZGV4ID0gMDtcbmNvbnN0IHJlc29sdmVkUHJvbWlzZSA9IC8qI19fUFVSRV9fKi8gUHJvbWlzZS5yZXNvbHZlKCk7XG5sZXQgY3VycmVudEZsdXNoUHJvbWlzZSA9IG51bGw7XG5jb25zdCBSRUNVUlNJT05fTElNSVQgPSAxMDA7XG5mdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgIGNvbnN0IHAgPSBjdXJyZW50Rmx1c2hQcm9taXNlIHx8IHJlc29sdmVkUHJvbWlzZTtcbiAgICByZXR1cm4gZm4gPyBwLnRoZW4odGhpcyA/IGZuLmJpbmQodGhpcykgOiBmbikgOiBwO1xufVxuLy8gIzI3Njhcbi8vIFVzZSBiaW5hcnktc2VhcmNoIHRvIGZpbmQgYSBzdWl0YWJsZSBwb3NpdGlvbiBpbiB0aGUgcXVldWUsXG4vLyBzbyB0aGF0IHRoZSBxdWV1ZSBtYWludGFpbnMgdGhlIGluY3JlYXNpbmcgb3JkZXIgb2Ygam9iJ3MgaWQsXG4vLyB3aGljaCBjYW4gcHJldmVudCB0aGUgam9iIGZyb20gYmVpbmcgc2tpcHBlZCBhbmQgYWxzbyBjYW4gYXZvaWQgcmVwZWF0ZWQgcGF0Y2hpbmcuXG5mdW5jdGlvbiBmaW5kSW5zZXJ0aW9uSW5kZXgoaWQpIHtcbiAgICAvLyB0aGUgc3RhcnQgaW5kZXggc2hvdWxkIGJlIGBmbHVzaEluZGV4ICsgMWBcbiAgICBsZXQgc3RhcnQgPSBmbHVzaEluZGV4ICsgMTtcbiAgICBsZXQgZW5kID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBjb25zdCBtaWRkbGUgPSAoc3RhcnQgKyBlbmQpID4+PiAxO1xuICAgICAgICBjb25zdCBtaWRkbGVKb2JJZCA9IGdldElkKHF1ZXVlW21pZGRsZV0pO1xuICAgICAgICBtaWRkbGVKb2JJZCA8IGlkID8gKHN0YXJ0ID0gbWlkZGxlICsgMSkgOiAoZW5kID0gbWlkZGxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0O1xufVxuZnVuY3Rpb24gcXVldWVKb2Ioam9iKSB7XG4gICAgLy8gdGhlIGRlZHVwZSBzZWFyY2ggdXNlcyB0aGUgc3RhcnRJbmRleCBhcmd1bWVudCBvZiBBcnJheS5pbmNsdWRlcygpXG4gICAgLy8gYnkgZGVmYXVsdCB0aGUgc2VhcmNoIGluZGV4IGluY2x1ZGVzIHRoZSBjdXJyZW50IGpvYiB0aGF0IGlzIGJlaW5nIHJ1blxuICAgIC8vIHNvIGl0IGNhbm5vdCByZWN1cnNpdmVseSB0cmlnZ2VyIGl0c2VsZiBhZ2Fpbi5cbiAgICAvLyBpZiB0aGUgam9iIGlzIGEgd2F0Y2goKSBjYWxsYmFjaywgdGhlIHNlYXJjaCB3aWxsIHN0YXJ0IHdpdGggYSArMSBpbmRleCB0b1xuICAgIC8vIGFsbG93IGl0IHJlY3Vyc2l2ZWx5IHRyaWdnZXIgaXRzZWxmIC0gaXQgaXMgdGhlIHVzZXIncyByZXNwb25zaWJpbGl0eSB0b1xuICAgIC8vIGVuc3VyZSBpdCBkb2Vzbid0IGVuZCB1cCBpbiBhbiBpbmZpbml0ZSBsb29wLlxuICAgIGlmICghcXVldWUubGVuZ3RoIHx8XG4gICAgICAgICFxdWV1ZS5pbmNsdWRlcyhqb2IsIGlzRmx1c2hpbmcgJiYgam9iLmFsbG93UmVjdXJzZSA/IGZsdXNoSW5kZXggKyAxIDogZmx1c2hJbmRleCkpIHtcbiAgICAgICAgaWYgKGpvYi5pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGpvYik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBxdWV1ZS5zcGxpY2UoZmluZEluc2VydGlvbkluZGV4KGpvYi5pZCksIDAsIGpvYik7XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVGbHVzaCgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHF1ZXVlRmx1c2goKSB7XG4gICAgaWYgKCFpc0ZsdXNoaW5nICYmICFpc0ZsdXNoUGVuZGluZykge1xuICAgICAgICBpc0ZsdXNoUGVuZGluZyA9IHRydWU7XG4gICAgICAgIGN1cnJlbnRGbHVzaFByb21pc2UgPSByZXNvbHZlZFByb21pc2UudGhlbihmbHVzaEpvYnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGludmFsaWRhdGVKb2Ioam9iKSB7XG4gICAgY29uc3QgaSA9IHF1ZXVlLmluZGV4T2Yoam9iKTtcbiAgICBpZiAoaSA+IGZsdXNoSW5kZXgpIHtcbiAgICAgICAgcXVldWUuc3BsaWNlKGksIDEpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHF1ZXVlUG9zdEZsdXNoQ2IoY2IpIHtcbiAgICBpZiAoIWlzQXJyYXkoY2IpKSB7XG4gICAgICAgIGlmICghYWN0aXZlUG9zdEZsdXNoQ2JzIHx8XG4gICAgICAgICAgICAhYWN0aXZlUG9zdEZsdXNoQ2JzLmluY2x1ZGVzKGNiLCBjYi5hbGxvd1JlY3Vyc2UgPyBwb3N0Rmx1c2hJbmRleCArIDEgOiBwb3N0Rmx1c2hJbmRleCkpIHtcbiAgICAgICAgICAgIHBlbmRpbmdQb3N0Rmx1c2hDYnMucHVzaChjYik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGlmIGNiIGlzIGFuIGFycmF5LCBpdCBpcyBhIGNvbXBvbmVudCBsaWZlY3ljbGUgaG9vayB3aGljaCBjYW4gb25seSBiZVxuICAgICAgICAvLyB0cmlnZ2VyZWQgYnkgYSBqb2IsIHdoaWNoIGlzIGFscmVhZHkgZGVkdXBlZCBpbiB0aGUgbWFpbiBxdWV1ZSwgc29cbiAgICAgICAgLy8gd2UgY2FuIHNraXAgZHVwbGljYXRlIGNoZWNrIGhlcmUgdG8gaW1wcm92ZSBwZXJmXG4gICAgICAgIHBlbmRpbmdQb3N0Rmx1c2hDYnMucHVzaCguLi5jYik7XG4gICAgfVxuICAgIHF1ZXVlRmx1c2goKTtcbn1cbmZ1bmN0aW9uIGZsdXNoUHJlRmx1c2hDYnMoc2VlbiwgXG4vLyBpZiBjdXJyZW50bHkgZmx1c2hpbmcsIHNraXAgdGhlIGN1cnJlbnQgam9iIGl0c2VsZlxuaSA9IGlzRmx1c2hpbmcgPyBmbHVzaEluZGV4ICsgMSA6IDApIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgZm9yICg7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjYiA9IHF1ZXVlW2ldO1xuICAgICAgICBpZiAoY2IgJiYgY2IucHJlKSB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBjYikpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHF1ZXVlLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBmbHVzaFBvc3RGbHVzaENicyhzZWVuKSB7XG4gICAgaWYgKHBlbmRpbmdQb3N0Rmx1c2hDYnMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGRlZHVwZWQgPSBbLi4ubmV3IFNldChwZW5kaW5nUG9zdEZsdXNoQ2JzKV07XG4gICAgICAgIHBlbmRpbmdQb3N0Rmx1c2hDYnMubGVuZ3RoID0gMDtcbiAgICAgICAgLy8gIzE5NDcgYWxyZWFkeSBoYXMgYWN0aXZlIHF1ZXVlLCBuZXN0ZWQgZmx1c2hQb3N0Rmx1c2hDYnMgY2FsbFxuICAgICAgICBpZiAoYWN0aXZlUG9zdEZsdXNoQ2JzKSB7XG4gICAgICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnMucHVzaCguLi5kZWR1cGVkKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBkZWR1cGVkO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XG4gICAgICAgIH1cbiAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzLnNvcnQoKGEsIGIpID0+IGdldElkKGEpIC0gZ2V0SWQoYikpO1xuICAgICAgICBmb3IgKHBvc3RGbHVzaEluZGV4ID0gMDsgcG9zdEZsdXNoSW5kZXggPCBhY3RpdmVQb3N0Rmx1c2hDYnMubGVuZ3RoOyBwb3N0Rmx1c2hJbmRleCsrKSB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGFjdGl2ZVBvc3RGbHVzaENic1twb3N0Rmx1c2hJbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnNbcG9zdEZsdXNoSW5kZXhdKCk7XG4gICAgICAgIH1cbiAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzID0gbnVsbDtcbiAgICAgICAgcG9zdEZsdXNoSW5kZXggPSAwO1xuICAgIH1cbn1cbmNvbnN0IGdldElkID0gKGpvYikgPT4gam9iLmlkID09IG51bGwgPyBJbmZpbml0eSA6IGpvYi5pZDtcbmNvbnN0IGNvbXBhcmF0b3IgPSAoYSwgYikgPT4ge1xuICAgIGNvbnN0IGRpZmYgPSBnZXRJZChhKSAtIGdldElkKGIpO1xuICAgIGlmIChkaWZmID09PSAwKSB7XG4gICAgICAgIGlmIChhLnByZSAmJiAhYi5wcmUpXG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIGlmIChiLnByZSAmJiAhYS5wcmUpXG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIGRpZmY7XG59O1xuZnVuY3Rpb24gZmx1c2hKb2JzKHNlZW4pIHtcbiAgICBpc0ZsdXNoUGVuZGluZyA9IGZhbHNlO1xuICAgIGlzRmx1c2hpbmcgPSB0cnVlO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgc2VlbiA9IHNlZW4gfHwgbmV3IE1hcCgpO1xuICAgIH1cbiAgICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gICAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkIHNvIGl0cyByZW5kZXIgZWZmZWN0IHdpbGwgaGF2ZSBzbWFsbGVyXG4gICAgLy8gICAgcHJpb3JpdHkgbnVtYmVyKVxuICAgIC8vIDIuIElmIGEgY29tcG9uZW50IGlzIHVubW91bnRlZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3MgdXBkYXRlLFxuICAgIC8vICAgIGl0cyB1cGRhdGUgY2FuIGJlIHNraXBwZWQuXG4gICAgcXVldWUuc29ydChjb21wYXJhdG9yKTtcbiAgICAvLyBjb25kaXRpb25hbCB1c2FnZSBvZiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZSBtdXN0IGJlIGRldGVybWluZWQgb3V0IG9mXG4gICAgLy8gdHJ5IC4uLiBjYXRjaCBibG9jayBzaW5jZSBSb2xsdXAgYnkgZGVmYXVsdCBkZS1vcHRpbWl6ZXMgdHJlZXNoYWtpbmdcbiAgICAvLyBpbnNpZGUgdHJ5LWNhdGNoLiBUaGlzIGNhbiBsZWF2ZSBhbGwgd2FybmluZyBjb2RlIHVuc2hha2VkLiBBbHRob3VnaFxuICAgIC8vIHRoZXkgd291bGQgZ2V0IGV2ZW50dWFsbHkgc2hha2VuIGJ5IGEgbWluaWZpZXIgbGlrZSB0ZXJzZXIsIHNvbWUgbWluaWZpZXJzXG4gICAgLy8gd291bGQgZmFpbCB0byBkbyB0aGF0IChlLmcuIGh0dHBzOi8vZ2l0aHViLmNvbS9ldmFudy9lc2J1aWxkL2lzc3Vlcy8xNjEwKVxuICAgIGNvbnN0IGNoZWNrID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgID8gKGpvYikgPT4gY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGpvYilcbiAgICAgICAgOiBOT09QO1xuICAgIHRyeSB7XG4gICAgICAgIGZvciAoZmx1c2hJbmRleCA9IDA7IGZsdXNoSW5kZXggPCBxdWV1ZS5sZW5ndGg7IGZsdXNoSW5kZXgrKykge1xuICAgICAgICAgICAgY29uc3Qgam9iID0gcXVldWVbZmx1c2hJbmRleF07XG4gICAgICAgICAgICBpZiAoam9iICYmIGpvYi5hY3RpdmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjaGVjayhqb2IpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgcnVubmluZzpgLCBqb2IuaWQpXG4gICAgICAgICAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGpvYiwgbnVsbCwgMTQgLyogRXJyb3JDb2Rlcy5TQ0hFRFVMRVIgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBmbHVzaEluZGV4ID0gMDtcbiAgICAgICAgcXVldWUubGVuZ3RoID0gMDtcbiAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoc2Vlbik7XG4gICAgICAgIGlzRmx1c2hpbmcgPSBmYWxzZTtcbiAgICAgICAgY3VycmVudEZsdXNoUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIC8vIHNvbWUgcG9zdEZsdXNoQ2IgcXVldWVkIGpvYnMhXG4gICAgICAgIC8vIGtlZXAgZmx1c2hpbmcgdW50aWwgaXQgZHJhaW5zLlxuICAgICAgICBpZiAocXVldWUubGVuZ3RoIHx8IHBlbmRpbmdQb3N0Rmx1c2hDYnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmbHVzaEpvYnMoc2Vlbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgZm4pIHtcbiAgICBpZiAoIXNlZW4uaGFzKGZuKSkge1xuICAgICAgICBzZWVuLnNldChmbiwgMSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBjb3VudCA9IHNlZW4uZ2V0KGZuKTtcbiAgICAgICAgaWYgKGNvdW50ID4gUkVDVVJTSU9OX0xJTUlUKSB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGZuLm93bmVySW5zdGFuY2U7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnROYW1lID0gaW5zdGFuY2UgJiYgZ2V0Q29tcG9uZW50TmFtZShpbnN0YW5jZS50eXBlKTtcbiAgICAgICAgICAgIHdhcm4oYE1heGltdW0gcmVjdXJzaXZlIHVwZGF0ZXMgZXhjZWVkZWQke2NvbXBvbmVudE5hbWUgPyBgIGluIGNvbXBvbmVudCA8JHtjb21wb25lbnROYW1lfT5gIDogYGB9LiBgICtcbiAgICAgICAgICAgICAgICBgVGhpcyBtZWFucyB5b3UgaGF2ZSBhIHJlYWN0aXZlIGVmZmVjdCB0aGF0IGlzIG11dGF0aW5nIGl0cyBvd24gYCArXG4gICAgICAgICAgICAgICAgYGRlcGVuZGVuY2llcyBhbmQgdGh1cyByZWN1cnNpdmVseSB0cmlnZ2VyaW5nIGl0c2VsZi4gUG9zc2libGUgc291cmNlcyBgICtcbiAgICAgICAgICAgICAgICBgaW5jbHVkZSBjb21wb25lbnQgdGVtcGxhdGUsIHJlbmRlciBmdW5jdGlvbiwgdXBkYXRlZCBob29rIG9yIGAgK1xuICAgICAgICAgICAgICAgIGB3YXRjaGVyIHNvdXJjZSBmdW5jdGlvbi5gKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2Vlbi5zZXQoZm4sIGNvdW50ICsgMSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xubGV0IGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcbmNvbnN0IGhtckRpcnR5Q29tcG9uZW50cyA9IG5ldyBTZXQoKTtcbi8vIEV4cG9zZSB0aGUgSE1SIHJ1bnRpbWUgb24gdGhlIGdsb2JhbCBvYmplY3Rcbi8vIFRoaXMgbWFrZXMgaXQgZW50aXJlbHkgdHJlZS1zaGFrYWJsZSB3aXRob3V0IHBvbGx1dGluZyB0aGUgZXhwb3J0cyBhbmQgbWFrZXNcbi8vIGl0IGVhc2llciB0byBiZSB1c2VkIGluIHRvb2xpbmdzIGxpa2UgdnVlLWxvYWRlclxuLy8gTm90ZTogZm9yIGEgY29tcG9uZW50IHRvIGJlIGVsaWdpYmxlIGZvciBITVIgaXQgYWxzbyBuZWVkcyB0aGUgX19obXJJZCBvcHRpb25cbi8vIHRvIGJlIHNldCBzbyB0aGF0IGl0cyBpbnN0YW5jZXMgY2FuIGJlIHJlZ2lzdGVyZWQgLyByZW1vdmVkLlxuaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGdldEdsb2JhbFRoaXMoKS5fX1ZVRV9ITVJfUlVOVElNRV9fID0ge1xuICAgICAgICBjcmVhdGVSZWNvcmQ6IHRyeVdyYXAoY3JlYXRlUmVjb3JkKSxcbiAgICAgICAgcmVyZW5kZXI6IHRyeVdyYXAocmVyZW5kZXIpLFxuICAgICAgICByZWxvYWQ6IHRyeVdyYXAocmVsb2FkKVxuICAgIH07XG59XG5jb25zdCBtYXAgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiByZWdpc3RlckhNUihpbnN0YW5jZSkge1xuICAgIGNvbnN0IGlkID0gaW5zdGFuY2UudHlwZS5fX2htcklkO1xuICAgIGxldCByZWNvcmQgPSBtYXAuZ2V0KGlkKTtcbiAgICBpZiAoIXJlY29yZCkge1xuICAgICAgICBjcmVhdGVSZWNvcmQoaWQsIGluc3RhbmNlLnR5cGUpO1xuICAgICAgICByZWNvcmQgPSBtYXAuZ2V0KGlkKTtcbiAgICB9XG4gICAgcmVjb3JkLmluc3RhbmNlcy5hZGQoaW5zdGFuY2UpO1xufVxuZnVuY3Rpb24gdW5yZWdpc3RlckhNUihpbnN0YW5jZSkge1xuICAgIG1hcC5nZXQoaW5zdGFuY2UudHlwZS5fX2htcklkKS5pbnN0YW5jZXMuZGVsZXRlKGluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlY29yZChpZCwgaW5pdGlhbERlZikge1xuICAgIGlmIChtYXAuaGFzKGlkKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG1hcC5zZXQoaWQsIHtcbiAgICAgICAgaW5pdGlhbERlZjogbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoaW5pdGlhbERlZiksXG4gICAgICAgIGluc3RhbmNlczogbmV3IFNldCgpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBub3JtYWxpemVDbGFzc0NvbXBvbmVudChjb21wb25lbnQpIHtcbiAgICByZXR1cm4gaXNDbGFzc0NvbXBvbmVudChjb21wb25lbnQpID8gY29tcG9uZW50Ll9fdmNjT3B0cyA6IGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIHJlcmVuZGVyKGlkLCBuZXdSZW5kZXIpIHtcbiAgICBjb25zdCByZWNvcmQgPSBtYXAuZ2V0KGlkKTtcbiAgICBpZiAoIXJlY29yZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHVwZGF0ZSBpbml0aWFsIHJlY29yZCAoZm9yIG5vdC15ZXQtcmVuZGVyZWQgY29tcG9uZW50KVxuICAgIHJlY29yZC5pbml0aWFsRGVmLnJlbmRlciA9IG5ld1JlbmRlcjtcbiAgICBbLi4ucmVjb3JkLmluc3RhbmNlc10uZm9yRWFjaChpbnN0YW5jZSA9PiB7XG4gICAgICAgIGlmIChuZXdSZW5kZXIpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLnJlbmRlciA9IG5ld1JlbmRlcjtcbiAgICAgICAgICAgIG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluc3RhbmNlLnR5cGUpLnJlbmRlciA9IG5ld1JlbmRlcjtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZS5yZW5kZXJDYWNoZSA9IFtdO1xuICAgICAgICAvLyB0aGlzIGZsYWcgZm9yY2VzIGNoaWxkIGNvbXBvbmVudHMgd2l0aCBzbG90IGNvbnRlbnQgdG8gdXBkYXRlXG4gICAgICAgIGlzSG1yVXBkYXRpbmcgPSB0cnVlO1xuICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgICAgaXNIbXJVcGRhdGluZyA9IGZhbHNlO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gcmVsb2FkKGlkLCBuZXdDb21wKSB7XG4gICAgY29uc3QgcmVjb3JkID0gbWFwLmdldChpZCk7XG4gICAgaWYgKCFyZWNvcmQpXG4gICAgICAgIHJldHVybjtcbiAgICBuZXdDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQobmV3Q29tcCk7XG4gICAgLy8gdXBkYXRlIGluaXRpYWwgZGVmIChmb3Igbm90LXlldC1yZW5kZXJlZCBjb21wb25lbnRzKVxuICAgIHVwZGF0ZUNvbXBvbmVudERlZihyZWNvcmQuaW5pdGlhbERlZiwgbmV3Q29tcCk7XG4gICAgLy8gY3JlYXRlIGEgc25hcHNob3Qgd2hpY2ggYXZvaWRzIHRoZSBzZXQgYmVpbmcgbXV0YXRlZCBkdXJpbmcgdXBkYXRlc1xuICAgIGNvbnN0IGluc3RhbmNlcyA9IFsuLi5yZWNvcmQuaW5zdGFuY2VzXTtcbiAgICBmb3IgKGNvbnN0IGluc3RhbmNlIG9mIGluc3RhbmNlcykge1xuICAgICAgICBjb25zdCBvbGRDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoaW5zdGFuY2UudHlwZSk7XG4gICAgICAgIGlmICghaG1yRGlydHlDb21wb25lbnRzLmhhcyhvbGRDb21wKSkge1xuICAgICAgICAgICAgLy8gMS4gVXBkYXRlIGV4aXN0aW5nIGNvbXAgZGVmaW5pdGlvbiB0byBtYXRjaCBuZXcgb25lXG4gICAgICAgICAgICBpZiAob2xkQ29tcCAhPT0gcmVjb3JkLmluaXRpYWxEZWYpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVDb21wb25lbnREZWYob2xkQ29tcCwgbmV3Q29tcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAyLiBtYXJrIGRlZmluaXRpb24gZGlydHkuIFRoaXMgZm9yY2VzIHRoZSByZW5kZXJlciB0byByZXBsYWNlIHRoZVxuICAgICAgICAgICAgLy8gY29tcG9uZW50IG9uIHBhdGNoLlxuICAgICAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmFkZChvbGRDb21wKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLiBpbnZhbGlkYXRlIG9wdGlvbnMgcmVzb2x1dGlvbiBjYWNoZVxuICAgICAgICBpbnN0YW5jZS5hcHBDb250ZXh0Lm9wdGlvbnNDYWNoZS5kZWxldGUoaW5zdGFuY2UudHlwZSk7XG4gICAgICAgIC8vIDQuIGFjdHVhbGx5IHVwZGF0ZVxuICAgICAgICBpZiAoaW5zdGFuY2UuY2VSZWxvYWQpIHtcbiAgICAgICAgICAgIC8vIGN1c3RvbSBlbGVtZW50XG4gICAgICAgICAgICBobXJEaXJ0eUNvbXBvbmVudHMuYWRkKG9sZENvbXApO1xuICAgICAgICAgICAgaW5zdGFuY2UuY2VSZWxvYWQobmV3Q29tcC5zdHlsZXMpO1xuICAgICAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmRlbGV0ZShvbGRDb21wKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5wYXJlbnQpIHtcbiAgICAgICAgICAgIC8vIDQuIEZvcmNlIHRoZSBwYXJlbnQgaW5zdGFuY2UgdG8gcmUtcmVuZGVyLiBUaGlzIHdpbGwgY2F1c2UgYWxsIHVwZGF0ZWRcbiAgICAgICAgICAgIC8vIGNvbXBvbmVudHMgdG8gYmUgdW5tb3VudGVkIGFuZCByZS1tb3VudGVkLiBRdWV1ZSB0aGUgdXBkYXRlIHNvIHRoYXQgd2VcbiAgICAgICAgICAgIC8vIGRvbid0IGVuZCB1cCBmb3JjaW5nIHRoZSBzYW1lIHBhcmVudCB0byByZS1yZW5kZXIgbXVsdGlwbGUgdGltZXMuXG4gICAgICAgICAgICBxdWV1ZUpvYihpbnN0YW5jZS5wYXJlbnQudXBkYXRlKTtcbiAgICAgICAgICAgIC8vIGluc3RhbmNlIGlzIHRoZSBpbm5lciBjb21wb25lbnQgb2YgYW4gYXN5bmMgY3VzdG9tIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIGludm9rZSB0byByZXNldCBzdHlsZXNcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZS5wYXJlbnQudHlwZS5fX2FzeW5jTG9hZGVyICYmXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UucGFyZW50LmNlUmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UucGFyZW50LmNlUmVsb2FkKG5ld0NvbXAuc3R5bGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LnJlbG9hZCkge1xuICAgICAgICAgICAgLy8gcm9vdCBpbnN0YW5jZSBtb3VudGVkIHZpYSBjcmVhdGVBcHAoKSBoYXMgYSByZWxvYWQgbWV0aG9kXG4gICAgICAgICAgICBpbnN0YW5jZS5hcHBDb250ZXh0LnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAvLyByb290IGluc3RhbmNlIGluc2lkZSB0cmVlIGNyZWF0ZWQgdmlhIHJhdyByZW5kZXIoKS4gRm9yY2UgcmVsb2FkLlxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbSE1SXSBSb290IG9yIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UgbW9kaWZpZWQuIEZ1bGwgcmVsb2FkIHJlcXVpcmVkLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIDUuIG1ha2Ugc3VyZSB0byBjbGVhbnVwIGRpcnR5IGhtciBjb21wb25lbnRzIGFmdGVyIHVwZGF0ZVxuICAgIHF1ZXVlUG9zdEZsdXNoQ2IoKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGluc3RhbmNlIG9mIGluc3RhbmNlcykge1xuICAgICAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmRlbGV0ZShub3JtYWxpemVDbGFzc0NvbXBvbmVudChpbnN0YW5jZS50eXBlKSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudERlZihvbGRDb21wLCBuZXdDb21wKSB7XG4gICAgZXh0ZW5kKG9sZENvbXAsIG5ld0NvbXApO1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9sZENvbXApIHtcbiAgICAgICAgaWYgKGtleSAhPT0gJ19fZmlsZScgJiYgIShrZXkgaW4gbmV3Q29tcCkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvbGRDb21wW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0cnlXcmFwKGZuKSB7XG4gICAgcmV0dXJuIChpZCwgYXJnKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZm4oaWQsIGFyZyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFtITVJdIFNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyBWdWUgY29tcG9uZW50IGhvdC1yZWxvYWQuIGAgK1xuICAgICAgICAgICAgICAgIGBGdWxsIHJlbG9hZCByZXF1aXJlZC5gKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmxldCBkZXZ0b29scztcbmxldCBidWZmZXIgPSBbXTtcbmxldCBkZXZ0b29sc05vdEluc3RhbGxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gZW1pdChldmVudCwgLi4uYXJncykge1xuICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICBkZXZ0b29scy5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWRldnRvb2xzTm90SW5zdGFsbGVkKSB7XG4gICAgICAgIGJ1ZmZlci5wdXNoKHsgZXZlbnQsIGFyZ3MgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0RGV2dG9vbHNIb29rKGhvb2ssIHRhcmdldCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgZGV2dG9vbHMgPSBob29rO1xuICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICBkZXZ0b29scy5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgYnVmZmVyLmZvckVhY2goKHsgZXZlbnQsIGFyZ3MgfSkgPT4gZGV2dG9vbHMuZW1pdChldmVudCwgLi4uYXJncykpO1xuICAgICAgICBidWZmZXIgPSBbXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoXG4gICAgLy8gaGFuZGxlIGxhdGUgZGV2dG9vbHMgaW5qZWN0aW9uIC0gb25seSBkbyB0aGlzIGlmIHdlIGFyZSBpbiBhbiBhY3R1YWxcbiAgICAvLyBicm93c2VyIGVudmlyb25tZW50IHRvIGF2b2lkIHRoZSB0aW1lciBoYW5kbGUgc3RhbGxpbmcgdGVzdCBydW5uZXIgZXhpdFxuICAgIC8vICgjNDgxNSlcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAvLyBzb21lIGVudnMgbW9jayB3aW5kb3cgYnV0IG5vdCBmdWxseVxuICAgICAgICB3aW5kb3cuSFRNTEVsZW1lbnQgJiZcbiAgICAgICAgLy8gYWxzbyBleGNsdWRlIGpzZG9tXG4gICAgICAgICEoKF9iID0gKF9hID0gd2luZG93Lm5hdmlnYXRvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnVzZXJBZ2VudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmluY2x1ZGVzKCdqc2RvbScpKSkge1xuICAgICAgICBjb25zdCByZXBsYXkgPSAodGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18gPVxuICAgICAgICAgICAgdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18gfHwgW10pO1xuICAgICAgICByZXBsYXkucHVzaCgobmV3SG9vaykgPT4ge1xuICAgICAgICAgICAgc2V0RGV2dG9vbHNIb29rKG5ld0hvb2ssIHRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBjbGVhciBidWZmZXIgYWZ0ZXIgM3MgLSB0aGUgdXNlciBwcm9iYWJseSBkb2Vzbid0IGhhdmUgZGV2dG9vbHMgaW5zdGFsbGVkXG4gICAgICAgIC8vIGF0IGFsbCwgYW5kIGtlZXBpbmcgdGhlIGJ1ZmZlciB3aWxsIGNhdXNlIG1lbW9yeSBsZWFrcyAoIzQ3MzgpXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFkZXZ0b29scykge1xuICAgICAgICAgICAgICAgIHRhcmdldC5fX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fID0gbnVsbDtcbiAgICAgICAgICAgICAgICBkZXZ0b29sc05vdEluc3RhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDMwMDApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gbm9uLWJyb3dzZXIgZW52LCBhc3N1bWUgbm90IGluc3RhbGxlZFxuICAgICAgICBkZXZ0b29sc05vdEluc3RhbGxlZCA9IHRydWU7XG4gICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldnRvb2xzSW5pdEFwcChhcHAsIHZlcnNpb24pIHtcbiAgICBlbWl0KFwiYXBwOmluaXRcIiAvKiBEZXZ0b29sc0hvb2tzLkFQUF9JTklUICovLCBhcHAsIHZlcnNpb24sIHtcbiAgICAgICAgRnJhZ21lbnQsXG4gICAgICAgIFRleHQsXG4gICAgICAgIENvbW1lbnQsXG4gICAgICAgIFN0YXRpY1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZGV2dG9vbHNVbm1vdW50QXBwKGFwcCkge1xuICAgIGVtaXQoXCJhcHA6dW5tb3VudFwiIC8qIERldnRvb2xzSG9va3MuQVBQX1VOTU9VTlQgKi8sIGFwcCk7XG59XG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudEFkZGVkID0gLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6YWRkZWRcIiAvKiBEZXZ0b29sc0hvb2tzLkNPTVBPTkVOVF9BRERFRCAqLyk7XG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQgPSBcbi8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OnVwZGF0ZWRcIiAvKiBEZXZ0b29sc0hvb2tzLkNPTVBPTkVOVF9VUERBVEVEICovKTtcbmNvbnN0IF9kZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhcImNvbXBvbmVudDpyZW1vdmVkXCIgLyogRGV2dG9vbHNIb29rcy5DT01QT05FTlRfUkVNT1ZFRCAqLyk7XG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSAoY29tcG9uZW50KSA9PiB7XG4gICAgaWYgKGRldnRvb2xzICYmXG4gICAgICAgIHR5cGVvZiBkZXZ0b29scy5jbGVhbnVwQnVmZmVyID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIC8vIHJlbW92ZSB0aGUgY29tcG9uZW50IGlmIGl0IHdhc24ndCBidWZmZXJlZFxuICAgICAgICAhZGV2dG9vbHMuY2xlYW51cEJ1ZmZlcihjb21wb25lbnQpKSB7XG4gICAgICAgIF9kZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQoY29tcG9uZW50KTtcbiAgICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKGhvb2spIHtcbiAgICByZXR1cm4gKGNvbXBvbmVudCkgPT4ge1xuICAgICAgICBlbWl0KGhvb2ssIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCwgY29tcG9uZW50LnVpZCwgY29tcG9uZW50LnBhcmVudCA/IGNvbXBvbmVudC5wYXJlbnQudWlkIDogdW5kZWZpbmVkLCBjb21wb25lbnQpO1xuICAgIH07XG59XG5jb25zdCBkZXZ0b29sc1BlcmZTdGFydCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNQZXJmb3JtYW5jZUhvb2soXCJwZXJmOnN0YXJ0XCIgLyogRGV2dG9vbHNIb29rcy5QRVJGT1JNQU5DRV9TVEFSVCAqLyk7XG5jb25zdCBkZXZ0b29sc1BlcmZFbmQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzUGVyZm9ybWFuY2VIb29rKFwicGVyZjplbmRcIiAvKiBEZXZ0b29sc0hvb2tzLlBFUkZPUk1BTkNFX0VORCAqLyk7XG5mdW5jdGlvbiBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhob29rKSB7XG4gICAgcmV0dXJuIChjb21wb25lbnQsIHR5cGUsIHRpbWUpID0+IHtcbiAgICAgICAgZW1pdChob29rLCBjb21wb25lbnQuYXBwQ29udGV4dC5hcHAsIGNvbXBvbmVudC51aWQsIGNvbXBvbmVudCwgdHlwZSwgdGltZSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRldnRvb2xzQ29tcG9uZW50RW1pdChjb21wb25lbnQsIGV2ZW50LCBwYXJhbXMpIHtcbiAgICBlbWl0KFwiY29tcG9uZW50OmVtaXRcIiAvKiBEZXZ0b29sc0hvb2tzLkNPTVBPTkVOVF9FTUlUICovLCBjb21wb25lbnQuYXBwQ29udGV4dC5hcHAsIGNvbXBvbmVudCwgZXZlbnQsIHBhcmFtcyk7XG59XG5cbmZ1bmN0aW9uIGVtaXQkMShpbnN0YW5jZSwgZXZlbnQsIC4uLnJhd0FyZ3MpIHtcbiAgICBpZiAoaW5zdGFuY2UuaXNVbm1vdW50ZWQpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBwcm9wcyA9IGluc3RhbmNlLnZub2RlLnByb3BzIHx8IEVNUFRZX09CSjtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGNvbnN0IHsgZW1pdHNPcHRpb25zLCBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdIH0gPSBpbnN0YW5jZTtcbiAgICAgICAgaWYgKGVtaXRzT3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKCEoZXZlbnQgaW4gZW1pdHNPcHRpb25zKSAmJlxuICAgICAgICAgICAgICAgICEoZmFsc2UgKSkge1xuICAgICAgICAgICAgICAgIGlmICghcHJvcHNPcHRpb25zIHx8ICEodG9IYW5kbGVyS2V5KGV2ZW50KSBpbiBwcm9wc09wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBlbWl0dGVkIGV2ZW50IFwiJHtldmVudH1cIiBidXQgaXQgaXMgbmVpdGhlciBkZWNsYXJlZCBpbiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGB0aGUgZW1pdHMgb3B0aW9uIG5vciBhcyBhbiBcIiR7dG9IYW5kbGVyS2V5KGV2ZW50KX1cIiBwcm9wLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IGVtaXRzT3B0aW9uc1tldmVudF07XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsaWRhdG9yKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1ZhbGlkID0gdmFsaWRhdG9yKC4uLnJhd0FyZ3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEludmFsaWQgZXZlbnQgYXJndW1lbnRzOiBldmVudCB2YWxpZGF0aW9uIGZhaWxlZCBmb3IgZXZlbnQgXCIke2V2ZW50fVwiLmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBhcmdzID0gcmF3QXJncztcbiAgICBjb25zdCBpc01vZGVsTGlzdGVuZXIgPSBldmVudC5zdGFydHNXaXRoKCd1cGRhdGU6Jyk7XG4gICAgLy8gZm9yIHYtbW9kZWwgdXBkYXRlOnh4eCBldmVudHMsIGFwcGx5IG1vZGlmaWVycyBvbiBhcmdzXG4gICAgY29uc3QgbW9kZWxBcmcgPSBpc01vZGVsTGlzdGVuZXIgJiYgZXZlbnQuc2xpY2UoNyk7XG4gICAgaWYgKG1vZGVsQXJnICYmIG1vZGVsQXJnIGluIHByb3BzKSB7XG4gICAgICAgIGNvbnN0IG1vZGlmaWVyc0tleSA9IGAke21vZGVsQXJnID09PSAnbW9kZWxWYWx1ZScgPyAnbW9kZWwnIDogbW9kZWxBcmd9TW9kaWZpZXJzYDtcbiAgICAgICAgY29uc3QgeyBudW1iZXIsIHRyaW0gfSA9IHByb3BzW21vZGlmaWVyc0tleV0gfHwgRU1QVFlfT0JKO1xuICAgICAgICBpZiAodHJpbSkge1xuICAgICAgICAgICAgYXJncyA9IHJhd0FyZ3MubWFwKGEgPT4gYS50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW1iZXIpIHtcbiAgICAgICAgICAgIGFyZ3MgPSByYXdBcmdzLm1hcCh0b051bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgZGV2dG9vbHNDb21wb25lbnRFbWl0KGluc3RhbmNlLCBldmVudCwgYXJncyk7XG4gICAgfVxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgY29uc3QgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHByb3BzW3RvSGFuZGxlcktleShsb3dlckNhc2VFdmVudCldKSB7XG4gICAgICAgICAgICB3YXJuKGBFdmVudCBcIiR7bG93ZXJDYXNlRXZlbnR9XCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgYCArXG4gICAgICAgICAgICAgICAgYCR7Zm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgaW5zdGFuY2UudHlwZSl9IGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcIiR7ZXZlbnR9XCIuIGAgK1xuICAgICAgICAgICAgICAgIGBOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBgICtcbiAgICAgICAgICAgICAgICBgdi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIGAgK1xuICAgICAgICAgICAgICAgIGBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcIiR7aHlwaGVuYXRlKGV2ZW50KX1cIiBpbnN0ZWFkIG9mIFwiJHtldmVudH1cIi5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgaGFuZGxlck5hbWU7XG4gICAgbGV0IGhhbmRsZXIgPSBwcm9wc1soaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoZXZlbnQpKV0gfHxcbiAgICAgICAgLy8gYWxzbyB0cnkgY2FtZWxDYXNlIGV2ZW50IGhhbmRsZXIgKCMyMjQ5KVxuICAgICAgICBwcm9wc1soaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoY2FtZWxpemUoZXZlbnQpKSldO1xuICAgIC8vIGZvciB2LW1vZGVsIHVwZGF0ZTp4eHggZXZlbnRzLCBhbHNvIHRyaWdnZXIga2ViYWItY2FzZSBlcXVpdmFsZW50XG4gICAgLy8gZm9yIHByb3BzIHBhc3NlZCB2aWEga2ViYWItY2FzZVxuICAgIGlmICghaGFuZGxlciAmJiBpc01vZGVsTGlzdGVuZXIpIHtcbiAgICAgICAgaGFuZGxlciA9IHByb3BzWyhoYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShoeXBoZW5hdGUoZXZlbnQpKSldO1xuICAgIH1cbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhoYW5kbGVyLCBpbnN0YW5jZSwgNiAvKiBFcnJvckNvZGVzLkNPTVBPTkVOVF9FVkVOVF9IQU5ETEVSICovLCBhcmdzKTtcbiAgICB9XG4gICAgY29uc3Qgb25jZUhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZSArIGBPbmNlYF07XG4gICAgaWYgKG9uY2VIYW5kbGVyKSB7XG4gICAgICAgIGlmICghaW5zdGFuY2UuZW1pdHRlZCkge1xuICAgICAgICAgICAgaW5zdGFuY2UuZW1pdHRlZCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLmVtaXR0ZWRbaGFuZGxlck5hbWVdKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UuZW1pdHRlZFtoYW5kbGVyTmFtZV0gPSB0cnVlO1xuICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhvbmNlSGFuZGxlciwgaW5zdGFuY2UsIDYgLyogRXJyb3JDb2Rlcy5DT01QT05FTlRfRVZFTlRfSEFORExFUiAqLywgYXJncyk7XG4gICAgfVxufVxuZnVuY3Rpb24gbm9ybWFsaXplRW1pdHNPcHRpb25zKGNvbXAsIGFwcENvbnRleHQsIGFzTWl4aW4gPSBmYWxzZSkge1xuICAgIGNvbnN0IGNhY2hlID0gYXBwQ29udGV4dC5lbWl0c0NhY2hlO1xuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChjb21wKTtcbiAgICBpZiAoY2FjaGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgY29uc3QgcmF3ID0gY29tcC5lbWl0cztcbiAgICBsZXQgbm9ybWFsaXplZCA9IHt9O1xuICAgIC8vIGFwcGx5IG1peGluL2V4dGVuZHMgcHJvcHNcbiAgICBsZXQgaGFzRXh0ZW5kcyA9IGZhbHNlO1xuICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fICYmICFpc0Z1bmN0aW9uKGNvbXApKSB7XG4gICAgICAgIGNvbnN0IGV4dGVuZEVtaXRzID0gKHJhdykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZEZyb21FeHRlbmQgPSBub3JtYWxpemVFbWl0c09wdGlvbnMocmF3LCBhcHBDb250ZXh0LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkRnJvbUV4dGVuZCkge1xuICAgICAgICAgICAgICAgIGhhc0V4dGVuZHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGV4dGVuZChub3JtYWxpemVkLCBub3JtYWxpemVkRnJvbUV4dGVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICghYXNNaXhpbiAmJiBhcHBDb250ZXh0Lm1peGlucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFwcENvbnRleHQubWl4aW5zLmZvckVhY2goZXh0ZW5kRW1pdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wLmV4dGVuZHMpIHtcbiAgICAgICAgICAgIGV4dGVuZEVtaXRzKGNvbXAuZXh0ZW5kcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXAubWl4aW5zKSB7XG4gICAgICAgICAgICBjb21wLm1peGlucy5mb3JFYWNoKGV4dGVuZEVtaXRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXJhdyAmJiAhaGFzRXh0ZW5kcykge1xuICAgICAgICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICAgICAgICAgIGNhY2hlLnNldChjb21wLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgICAgICByYXcuZm9yRWFjaChrZXkgPT4gKG5vcm1hbGl6ZWRba2V5XSA9IG51bGwpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV4dGVuZChub3JtYWxpemVkLCByYXcpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICAgICAgY2FjaGUuc2V0KGNvbXAsIG5vcm1hbGl6ZWQpO1xuICAgIH1cbiAgICByZXR1cm4gbm9ybWFsaXplZDtcbn1cbi8vIENoZWNrIGlmIGFuIGluY29taW5nIHByb3Aga2V5IGlzIGEgZGVjbGFyZWQgZW1pdCBldmVudCBsaXN0ZW5lci5cbi8vIGUuZy4gV2l0aCBgZW1pdHM6IHsgY2xpY2s6IG51bGwgfWAsIHByb3BzIG5hbWVkIGBvbkNsaWNrYCBhbmQgYG9uY2xpY2tgIGFyZVxuLy8gYm90aCBjb25zaWRlcmVkIG1hdGNoZWQgbGlzdGVuZXJzLlxuZnVuY3Rpb24gaXNFbWl0TGlzdGVuZXIob3B0aW9ucywga2V5KSB7XG4gICAgaWYgKCFvcHRpb25zIHx8ICFpc09uKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBrZXkgPSBrZXkuc2xpY2UoMikucmVwbGFjZSgvT25jZSQvLCAnJyk7XG4gICAgcmV0dXJuIChoYXNPd24ob3B0aW9ucywga2V5WzBdLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSkpIHx8XG4gICAgICAgIGhhc093bihvcHRpb25zLCBoeXBoZW5hdGUoa2V5KSkgfHxcbiAgICAgICAgaGFzT3duKG9wdGlvbnMsIGtleSkpO1xufVxuXG4vKipcbiAqIG1hcmsgdGhlIGN1cnJlbnQgcmVuZGVyaW5nIGluc3RhbmNlIGZvciBhc3NldCByZXNvbHV0aW9uIChlLmcuXG4gKiByZXNvbHZlQ29tcG9uZW50LCByZXNvbHZlRGlyZWN0aXZlKSBkdXJpbmcgcmVuZGVyXG4gKi9cbmxldCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xubGV0IGN1cnJlbnRTY29wZUlkID0gbnVsbDtcbi8qKlxuICogTm90ZTogcmVuZGVyaW5nIGNhbGxzIG1heWJlIG5lc3RlZC4gVGhlIGZ1bmN0aW9uIHJldHVybnMgdGhlIHBhcmVudCByZW5kZXJpbmdcbiAqIGluc3RhbmNlIGlmIHByZXNlbnQsIHdoaWNoIHNob3VsZCBiZSByZXN0b3JlZCBhZnRlciB0aGUgcmVuZGVyIGlzIGRvbmU6XG4gKlxuICogYGBganNcbiAqIGNvbnN0IHByZXYgPSBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaSlcbiAqIC8vIC4uLnJlbmRlclxuICogc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKHByZXYpXG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKGluc3RhbmNlKSB7XG4gICAgY29uc3QgcHJldiA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICBjdXJyZW50U2NvcGVJZCA9IChpbnN0YW5jZSAmJiBpbnN0YW5jZS50eXBlLl9fc2NvcGVJZCkgfHwgbnVsbDtcbiAgICByZXR1cm4gcHJldjtcbn1cbi8qKlxuICogU2V0IHNjb3BlIGlkIHdoZW4gY3JlYXRpbmcgaG9pc3RlZCB2bm9kZXMuXG4gKiBAcHJpdmF0ZSBjb21waWxlciBoZWxwZXJcbiAqL1xuZnVuY3Rpb24gcHVzaFNjb3BlSWQoaWQpIHtcbiAgICBjdXJyZW50U2NvcGVJZCA9IGlkO1xufVxuLyoqXG4gKiBUZWNobmljYWxseSB3ZSBubyBsb25nZXIgbmVlZCB0aGlzIGFmdGVyIDMuMC44IGJ1dCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHNhbWVcbiAqIEFQSSBmb3IgYmFja3dhcmRzIGNvbXBhdCB3LyBjb2RlIGdlbmVyYXRlZCBieSBjb21waWxlcnMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwb3BTY29wZUlkKCkge1xuICAgIGN1cnJlbnRTY29wZUlkID0gbnVsbDtcbn1cbi8qKlxuICogT25seSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgd2l0aFNjb3BlSWQgPSAoX2lkKSA9PiB3aXRoQ3R4O1xuLyoqXG4gKiBXcmFwIGEgc2xvdCBmdW5jdGlvbiB0byBtZW1vaXplIGN1cnJlbnQgcmVuZGVyaW5nIGluc3RhbmNlXG4gKiBAcHJpdmF0ZSBjb21waWxlciBoZWxwZXJcbiAqL1xuZnVuY3Rpb24gd2l0aEN0eChmbiwgY3R4ID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLCBpc05vblNjb3BlZFNsb3QgLy8gZmFsc2Ugb25seVxuKSB7XG4gICAgaWYgKCFjdHgpXG4gICAgICAgIHJldHVybiBmbjtcbiAgICAvLyBhbHJlYWR5IG5vcm1hbGl6ZWRcbiAgICBpZiAoZm4uX24pIHtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgICBjb25zdCByZW5kZXJGbldpdGhDb250ZXh0ID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgLy8gSWYgYSB1c2VyIGNhbGxzIGEgY29tcGlsZWQgc2xvdCBpbnNpZGUgYSB0ZW1wbGF0ZSBleHByZXNzaW9uICgjMTc0NSksIGl0XG4gICAgICAgIC8vIGNhbiBtZXNzIHVwIGJsb2NrIHRyYWNraW5nLCBzbyBieSBkZWZhdWx0IHdlIGRpc2FibGUgYmxvY2sgdHJhY2tpbmcgYW5kXG4gICAgICAgIC8vIGZvcmNlIGJhaWwgb3V0IHdoZW4gaW52b2tpbmcgYSBjb21waWxlZCBzbG90IChpbmRpY2F0ZWQgYnkgdGhlIC5fZCBmbGFnKS5cbiAgICAgICAgLy8gVGhpcyBpc24ndCBuZWNlc3NhcnkgaWYgcmVuZGVyaW5nIGEgY29tcGlsZWQgYDxzbG90PmAsIHNvIHdlIGZsaXAgdGhlXG4gICAgICAgIC8vIC5fZCBmbGFnIG9mZiB3aGVuIGludm9raW5nIHRoZSB3cmFwcGVkIGZuIGluc2lkZSBgcmVuZGVyU2xvdGAuXG4gICAgICAgIGlmIChyZW5kZXJGbldpdGhDb250ZXh0Ll9kKSB7XG4gICAgICAgICAgICBzZXRCbG9ja1RyYWNraW5nKC0xKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmV2SW5zdGFuY2UgPSBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoY3R4KTtcbiAgICAgICAgbGV0IHJlcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlcyA9IGZuKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKHByZXZJbnN0YW5jZSk7XG4gICAgICAgICAgICBpZiAocmVuZGVyRm5XaXRoQ29udGV4dC5fZCkge1xuICAgICAgICAgICAgICAgIHNldEJsb2NrVHJhY2tpbmcoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZChjdHgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbiAgICAvLyBtYXJrIG5vcm1hbGl6ZWQgdG8gYXZvaWQgZHVwbGljYXRlZCB3cmFwcGluZ1xuICAgIHJlbmRlckZuV2l0aENvbnRleHQuX24gPSB0cnVlO1xuICAgIC8vIG1hcmsgdGhpcyBhcyBjb21waWxlZCBieSBkZWZhdWx0XG4gICAgLy8gdGhpcyBpcyB1c2VkIGluIHZub2RlLnRzIC0+IG5vcm1hbGl6ZUNoaWxkcmVuKCkgdG8gc2V0IHRoZSBzbG90XG4gICAgLy8gcmVuZGVyaW5nIGZsYWcuXG4gICAgcmVuZGVyRm5XaXRoQ29udGV4dC5fYyA9IHRydWU7XG4gICAgLy8gZGlzYWJsZSBibG9jayB0cmFja2luZyBieSBkZWZhdWx0XG4gICAgcmVuZGVyRm5XaXRoQ29udGV4dC5fZCA9IHRydWU7XG4gICAgcmV0dXJuIHJlbmRlckZuV2l0aENvbnRleHQ7XG59XG5cbi8qKlxuICogZGV2IG9ubHkgZmxhZyB0byB0cmFjayB3aGV0aGVyICRhdHRycyB3YXMgdXNlZCBkdXJpbmcgcmVuZGVyLlxuICogSWYgJGF0dHJzIHdhcyB1c2VkIGR1cmluZyByZW5kZXIgdGhlbiB0aGUgd2FybmluZyBmb3IgZmFpbGVkIGF0dHJzXG4gKiBmYWxsdGhyb3VnaCBjYW4gYmUgc3VwcHJlc3NlZC5cbiAqL1xubGV0IGFjY2Vzc2VkQXR0cnMgPSBmYWxzZTtcbmZ1bmN0aW9uIG1hcmtBdHRyc0FjY2Vzc2VkKCkge1xuICAgIGFjY2Vzc2VkQXR0cnMgPSB0cnVlO1xufVxuZnVuY3Rpb24gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSkge1xuICAgIGNvbnN0IHsgdHlwZTogQ29tcG9uZW50LCB2bm9kZSwgcHJveHksIHdpdGhQcm94eSwgcHJvcHMsIHByb3BzT3B0aW9uczogW3Byb3BzT3B0aW9uc10sIHNsb3RzLCBhdHRycywgZW1pdCwgcmVuZGVyLCByZW5kZXJDYWNoZSwgZGF0YSwgc2V0dXBTdGF0ZSwgY3R4LCBpbmhlcml0QXR0cnMgfSA9IGluc3RhbmNlO1xuICAgIGxldCByZXN1bHQ7XG4gICAgbGV0IGZhbGx0aHJvdWdoQXR0cnM7XG4gICAgY29uc3QgcHJldiA9IHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBhY2Nlc3NlZEF0dHJzID0gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA0IC8qIFNoYXBlRmxhZ3MuU1RBVEVGVUxfQ09NUE9ORU5UICovKSB7XG4gICAgICAgICAgICAvLyB3aXRoUHJveHkgaXMgYSBwcm94eSB3aXRoIGEgZGlmZmVyZW50IGBoYXNgIHRyYXAgb25seSBmb3JcbiAgICAgICAgICAgIC8vIHJ1bnRpbWUtY29tcGlsZWQgcmVuZGVyIGZ1bmN0aW9ucyB1c2luZyBgd2l0aGAgYmxvY2suXG4gICAgICAgICAgICBjb25zdCBwcm94eVRvVXNlID0gd2l0aFByb3h5IHx8IHByb3h5O1xuICAgICAgICAgICAgcmVzdWx0ID0gbm9ybWFsaXplVk5vZGUocmVuZGVyLmNhbGwocHJveHlUb1VzZSwgcHJveHlUb1VzZSwgcmVuZGVyQ2FjaGUsIHByb3BzLCBzZXR1cFN0YXRlLCBkYXRhLCBjdHgpKTtcbiAgICAgICAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBhdHRycztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uYWxcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlciA9IENvbXBvbmVudDtcbiAgICAgICAgICAgIC8vIGluIGRldiwgbWFyayBhdHRycyBhY2Nlc3NlZCBpZiBvcHRpb25hbCBwcm9wcyAoYXR0cnMgPT09IHByb3BzKVxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBhdHRycyA9PT0gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ID0gbm9ybWFsaXplVk5vZGUocmVuZGVyLmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgICA/IHJlbmRlcihwcm9wcywgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0IGF0dHJzKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF0dHJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3RzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogeyBhdHRycywgc2xvdHMsIGVtaXQgfSlcbiAgICAgICAgICAgICAgICA6IHJlbmRlcihwcm9wcywgbnVsbCAvKiB3ZSBrbm93IGl0IGRvZXNuJ3QgbmVlZCBpdCAqLykpO1xuICAgICAgICAgICAgZmFsbHRocm91Z2hBdHRycyA9IENvbXBvbmVudC5wcm9wc1xuICAgICAgICAgICAgICAgID8gYXR0cnNcbiAgICAgICAgICAgICAgICA6IGdldEZ1bmN0aW9uYWxGYWxsdGhyb3VnaChhdHRycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBibG9ja1N0YWNrLmxlbmd0aCA9IDA7XG4gICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIDEgLyogRXJyb3JDb2Rlcy5SRU5ERVJfRlVOQ1RJT04gKi8pO1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVWTm9kZShDb21tZW50KTtcbiAgICB9XG4gICAgLy8gYXR0ciBtZXJnaW5nXG4gICAgLy8gaW4gZGV2IG1vZGUsIGNvbW1lbnRzIGFyZSBwcmVzZXJ2ZWQsIGFuZCBpdCdzIHBvc3NpYmxlIGZvciBhIHRlbXBsYXRlXG4gICAgLy8gdG8gaGF2ZSBjb21tZW50cyBhbG9uZyBzaWRlIHRoZSByb290IGVsZW1lbnQgd2hpY2ggbWFrZXMgaXQgYSBmcmFnbWVudFxuICAgIGxldCByb290ID0gcmVzdWx0O1xuICAgIGxldCBzZXRSb290ID0gdW5kZWZpbmVkO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgcmVzdWx0LnBhdGNoRmxhZyA+IDAgJiZcbiAgICAgICAgcmVzdWx0LnBhdGNoRmxhZyAmIDIwNDggLyogUGF0Y2hGbGFncy5ERVZfUk9PVF9GUkFHTUVOVCAqLykge1xuICAgICAgICBbcm9vdCwgc2V0Um9vdF0gPSBnZXRDaGlsZFJvb3QocmVzdWx0KTtcbiAgICB9XG4gICAgaWYgKGZhbGx0aHJvdWdoQXR0cnMgJiYgaW5oZXJpdEF0dHJzICE9PSBmYWxzZSkge1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZmFsbHRocm91Z2hBdHRycyk7XG4gICAgICAgIGNvbnN0IHsgc2hhcGVGbGFnIH0gPSByb290O1xuICAgICAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAoMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi8gfCA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovKSkge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wc09wdGlvbnMgJiYga2V5cy5zb21lKGlzTW9kZWxMaXN0ZW5lcikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSB2LW1vZGVsIGxpc3RlbmVyIChvblVwZGF0ZTp4eHgpIGhhcyBhIGNvcnJlc3BvbmRpbmcgZGVjbGFyZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJvcCwgaXQgaW5kaWNhdGVzIHRoaXMgY29tcG9uZW50IGV4cGVjdHMgdG8gaGFuZGxlIHYtbW9kZWwgYW5kXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0IHNob3VsZCBub3QgZmFsbHRocm91Z2guXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbGF0ZWQ6ICMxNTQzLCAjMTY0MywgIzE5ODlcbiAgICAgICAgICAgICAgICAgICAgZmFsbHRocm91Z2hBdHRycyA9IGZpbHRlck1vZGVsTGlzdGVuZXJzKGZhbGx0aHJvdWdoQXR0cnMsIHByb3BzT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJvb3QgPSBjbG9uZVZOb2RlKHJvb3QsIGZhbGx0aHJvdWdoQXR0cnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFhY2Nlc3NlZEF0dHJzICYmIHJvb3QudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFsbEF0dHJzID0gT2JqZWN0LmtleXMoYXR0cnMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50QXR0cnMgPSBbXTtcbiAgICAgICAgICAgICAgICBjb25zdCBleHRyYUF0dHJzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhbGxBdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYWxsQXR0cnNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc09uKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSB2LW1vZGVsIGhhbmRsZXJzIHdoZW4gdGhleSBmYWlsIHRvIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGBvbmAsIGxvd2VyY2FzZSBmaXJzdCBsZXR0ZXIgdG8gcmVmbGVjdCBldmVudCBjYXNpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhY2N1cmF0ZWx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRBdHRycy5wdXNoKGtleVsyXS50b0xvd2VyQ2FzZSgpICsga2V5LnNsaWNlKDMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhQXR0cnMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChleHRyYUF0dHJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBFeHRyYW5lb3VzIG5vbi1wcm9wcyBhdHRyaWJ1dGVzIChgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGAke2V4dHJhQXR0cnMuam9pbignLCAnKX0pIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYHdlcmUgcGFzc2VkIHRvIGNvbXBvbmVudCBidXQgY291bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgaW5oZXJpdGVkIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGJlY2F1c2UgY29tcG9uZW50IHJlbmRlcnMgZnJhZ21lbnQgb3IgdGV4dCByb290IG5vZGVzLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRBdHRycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgRXh0cmFuZW91cyBub24tZW1pdHMgZXZlbnQgbGlzdGVuZXJzIChgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGAke2V2ZW50QXR0cnMuam9pbignLCAnKX0pIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYHdlcmUgcGFzc2VkIHRvIGNvbXBvbmVudCBidXQgY291bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgaW5oZXJpdGVkIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGJlY2F1c2UgY29tcG9uZW50IHJlbmRlcnMgZnJhZ21lbnQgb3IgdGV4dCByb290IG5vZGVzLiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBJZiB0aGUgbGlzdGVuZXIgaXMgaW50ZW5kZWQgdG8gYmUgYSBjb21wb25lbnQgY3VzdG9tIGV2ZW50IGxpc3RlbmVyIG9ubHksIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGRlY2xhcmUgaXQgdXNpbmcgdGhlIFwiZW1pdHNcIiBvcHRpb24uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGluaGVyaXQgZGlyZWN0aXZlc1xuICAgIGlmICh2bm9kZS5kaXJzKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcbiAgICAgICAgICAgIHdhcm4oYFJ1bnRpbWUgZGlyZWN0aXZlIHVzZWQgb24gY29tcG9uZW50IHdpdGggbm9uLWVsZW1lbnQgcm9vdCBub2RlLiBgICtcbiAgICAgICAgICAgICAgICBgVGhlIGRpcmVjdGl2ZXMgd2lsbCBub3QgZnVuY3Rpb24gYXMgaW50ZW5kZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2xvbmUgYmVmb3JlIG11dGF0aW5nIHNpbmNlIHRoZSByb290IG1heSBiZSBhIGhvaXN0ZWQgdm5vZGVcbiAgICAgICAgcm9vdCA9IGNsb25lVk5vZGUocm9vdCk7XG4gICAgICAgIHJvb3QuZGlycyA9IHJvb3QuZGlycyA/IHJvb3QuZGlycy5jb25jYXQodm5vZGUuZGlycykgOiB2bm9kZS5kaXJzO1xuICAgIH1cbiAgICAvLyBpbmhlcml0IHRyYW5zaXRpb24gZGF0YVxuICAgIGlmICh2bm9kZS50cmFuc2l0aW9uKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcbiAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBpbnNpZGUgPFRyYW5zaXRpb24+IHJlbmRlcnMgbm9uLWVsZW1lbnQgcm9vdCBub2RlIGAgK1xuICAgICAgICAgICAgICAgIGB0aGF0IGNhbm5vdCBiZSBhbmltYXRlZC5gKTtcbiAgICAgICAgfVxuICAgICAgICByb290LnRyYW5zaXRpb24gPSB2bm9kZS50cmFuc2l0aW9uO1xuICAgIH1cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHNldFJvb3QpIHtcbiAgICAgICAgc2V0Um9vdChyb290KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHJvb3Q7XG4gICAgfVxuICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBkZXYgb25seVxuICogSW4gZGV2IG1vZGUsIHRlbXBsYXRlIHJvb3QgbGV2ZWwgY29tbWVudHMgYXJlIHJlbmRlcmVkLCB3aGljaCB0dXJucyB0aGVcbiAqIHRlbXBsYXRlIGludG8gYSBmcmFnbWVudCByb290LCBidXQgd2UgbmVlZCB0byBsb2NhdGUgdGhlIHNpbmdsZSBlbGVtZW50XG4gKiByb290IGZvciBhdHRycyBhbmQgc2NvcGUgaWQgcHJvY2Vzc2luZy5cbiAqL1xuY29uc3QgZ2V0Q2hpbGRSb290ID0gKHZub2RlKSA9PiB7XG4gICAgY29uc3QgcmF3Q2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBjb25zdCBkeW5hbWljQ2hpbGRyZW4gPSB2bm9kZS5keW5hbWljQ2hpbGRyZW47XG4gICAgY29uc3QgY2hpbGRSb290ID0gZmlsdGVyU2luZ2xlUm9vdChyYXdDaGlsZHJlbik7XG4gICAgaWYgKCFjaGlsZFJvb3QpIHtcbiAgICAgICAgcmV0dXJuIFt2bm9kZSwgdW5kZWZpbmVkXTtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSByYXdDaGlsZHJlbi5pbmRleE9mKGNoaWxkUm9vdCk7XG4gICAgY29uc3QgZHluYW1pY0luZGV4ID0gZHluYW1pY0NoaWxkcmVuID8gZHluYW1pY0NoaWxkcmVuLmluZGV4T2YoY2hpbGRSb290KSA6IC0xO1xuICAgIGNvbnN0IHNldFJvb3QgPSAodXBkYXRlZFJvb3QpID0+IHtcbiAgICAgICAgcmF3Q2hpbGRyZW5baW5kZXhdID0gdXBkYXRlZFJvb3Q7XG4gICAgICAgIGlmIChkeW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChkeW5hbWljSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbltkeW5hbWljSW5kZXhdID0gdXBkYXRlZFJvb3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh1cGRhdGVkUm9vdC5wYXRjaEZsYWcgPiAwKSB7XG4gICAgICAgICAgICAgICAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID0gWy4uLmR5bmFtaWNDaGlsZHJlbiwgdXBkYXRlZFJvb3RdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gW25vcm1hbGl6ZVZOb2RlKGNoaWxkUm9vdCksIHNldFJvb3RdO1xufTtcbmZ1bmN0aW9uIGZpbHRlclNpbmdsZVJvb3QoY2hpbGRyZW4pIHtcbiAgICBsZXQgc2luZ2xlUm9vdDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgIGlmIChpc1ZOb2RlKGNoaWxkKSkge1xuICAgICAgICAgICAgLy8gaWdub3JlIHVzZXIgY29tbWVudFxuICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgIT09IENvbW1lbnQgfHwgY2hpbGQuY2hpbGRyZW4gPT09ICd2LWlmJykge1xuICAgICAgICAgICAgICAgIGlmIChzaW5nbGVSb290KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhcyBtb3JlIHRoYW4gMSBub24tY29tbWVudCBjaGlsZCwgcmV0dXJuIG5vd1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzaW5nbGVSb290ID0gY2hpbGQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzaW5nbGVSb290O1xufVxuY29uc3QgZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoID0gKGF0dHJzKSA9PiB7XG4gICAgbGV0IHJlcztcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xuICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnIHx8IGtleSA9PT0gJ3N0eWxlJyB8fCBpc09uKGtleSkpIHtcbiAgICAgICAgICAgIChyZXMgfHwgKHJlcyA9IHt9KSlba2V5XSA9IGF0dHJzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn07XG5jb25zdCBmaWx0ZXJNb2RlbExpc3RlbmVycyA9IChhdHRycywgcHJvcHMpID0+IHtcbiAgICBjb25zdCByZXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xuICAgICAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpIHx8ICEoa2V5LnNsaWNlKDkpIGluIHByb3BzKSkge1xuICAgICAgICAgICAgcmVzW2tleV0gPSBhdHRyc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59O1xuY29uc3QgaXNFbGVtZW50Um9vdCA9ICh2bm9kZSkgPT4ge1xuICAgIHJldHVybiAodm5vZGUuc2hhcGVGbGFnICYgKDYgLyogU2hhcGVGbGFncy5DT01QT05FTlQgKi8gfCAxIC8qIFNoYXBlRmxhZ3MuRUxFTUVOVCAqLykgfHxcbiAgICAgICAgdm5vZGUudHlwZSA9PT0gQ29tbWVudCAvLyBwb3RlbnRpYWwgdi1pZiBicmFuY2ggc3dpdGNoXG4gICAgKTtcbn07XG5mdW5jdGlvbiBzaG91bGRVcGRhdGVDb21wb25lbnQocHJldlZOb2RlLCBuZXh0Vk5vZGUsIG9wdGltaXplZCkge1xuICAgIGNvbnN0IHsgcHJvcHM6IHByZXZQcm9wcywgY2hpbGRyZW46IHByZXZDaGlsZHJlbiwgY29tcG9uZW50IH0gPSBwcmV2Vk5vZGU7XG4gICAgY29uc3QgeyBwcm9wczogbmV4dFByb3BzLCBjaGlsZHJlbjogbmV4dENoaWxkcmVuLCBwYXRjaEZsYWcgfSA9IG5leHRWTm9kZTtcbiAgICBjb25zdCBlbWl0cyA9IGNvbXBvbmVudC5lbWl0c09wdGlvbnM7XG4gICAgLy8gUGFyZW50IGNvbXBvbmVudCdzIHJlbmRlciBmdW5jdGlvbiB3YXMgaG90LXVwZGF0ZWQuIFNpbmNlIHRoaXMgbWF5IGhhdmVcbiAgICAvLyBjYXVzZWQgdGhlIGNoaWxkIGNvbXBvbmVudCdzIHNsb3RzIGNvbnRlbnQgdG8gaGF2ZSBjaGFuZ2VkLCB3ZSBuZWVkIHRvXG4gICAgLy8gZm9yY2UgdGhlIGNoaWxkIHRvIHVwZGF0ZSBhcyB3ZWxsLlxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgKHByZXZDaGlsZHJlbiB8fCBuZXh0Q2hpbGRyZW4pICYmIGlzSG1yVXBkYXRpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIGZvcmNlIGNoaWxkIHVwZGF0ZSBmb3IgcnVudGltZSBkaXJlY3RpdmUgb3IgdHJhbnNpdGlvbiBvbiBjb21wb25lbnQgdm5vZGUuXG4gICAgaWYgKG5leHRWTm9kZS5kaXJzIHx8IG5leHRWTm9kZS50cmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAob3B0aW1pemVkICYmIHBhdGNoRmxhZyA+PSAwKSB7XG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiAxMDI0IC8qIFBhdGNoRmxhZ3MuRFlOQU1JQ19TTE9UUyAqLykge1xuICAgICAgICAgICAgLy8gc2xvdCBjb250ZW50IHRoYXQgcmVmZXJlbmNlcyB2YWx1ZXMgdGhhdCBtaWdodCBoYXZlIGNoYW5nZWQsXG4gICAgICAgICAgICAvLyBlLmcuIGluIGEgdi1mb3JcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiAxNiAvKiBQYXRjaEZsYWdzLkZVTExfUFJPUFMgKi8pIHtcbiAgICAgICAgICAgIGlmICghcHJldlByb3BzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhbmV4dFByb3BzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcHJlc2VuY2Ugb2YgdGhpcyBmbGFnIGluZGljYXRlcyBwcm9wcyBhcmUgYWx3YXlzIG5vbi1udWxsXG4gICAgICAgICAgICByZXR1cm4gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGF0Y2hGbGFnICYgOCAvKiBQYXRjaEZsYWdzLlBST1BTICovKSB7XG4gICAgICAgICAgICBjb25zdCBkeW5hbWljUHJvcHMgPSBuZXh0Vk5vZGUuZHluYW1pY1Byb3BzO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkeW5hbWljUHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBkeW5hbWljUHJvcHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKG5leHRQcm9wc1trZXldICE9PSBwcmV2UHJvcHNba2V5XSAmJlxuICAgICAgICAgICAgICAgICAgICAhaXNFbWl0TGlzdGVuZXIoZW1pdHMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyB0aGlzIHBhdGggaXMgb25seSB0YWtlbiBieSBtYW51YWxseSB3cml0dGVuIHJlbmRlciBmdW5jdGlvbnNcbiAgICAgICAgLy8gc28gcHJlc2VuY2Ugb2YgYW55IGNoaWxkcmVuIGxlYWRzIHRvIGEgZm9yY2VkIHVwZGF0ZVxuICAgICAgICBpZiAocHJldkNoaWxkcmVuIHx8IG5leHRDaGlsZHJlbikge1xuICAgICAgICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4gfHwgIW5leHRDaGlsZHJlbi4kc3RhYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZQcm9wcyA9PT0gbmV4dFByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwcmV2UHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiAhIW5leHRQcm9wcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW5leHRQcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHMpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNQcm9wc0NoYW5nZWQocHJldlByb3BzLCBuZXh0UHJvcHMsIGVtaXRzT3B0aW9ucykge1xuICAgIGNvbnN0IG5leHRLZXlzID0gT2JqZWN0LmtleXMobmV4dFByb3BzKTtcbiAgICBpZiAobmV4dEtleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhwcmV2UHJvcHMpLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXh0S2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBuZXh0S2V5c1tpXTtcbiAgICAgICAgaWYgKG5leHRQcm9wc1trZXldICE9PSBwcmV2UHJvcHNba2V5XSAmJlxuICAgICAgICAgICAgIWlzRW1pdExpc3RlbmVyKGVtaXRzT3B0aW9ucywga2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gdXBkYXRlSE9DSG9zdEVsKHsgdm5vZGUsIHBhcmVudCB9LCBlbCAvLyBIb3N0Tm9kZVxuKSB7XG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuc3ViVHJlZSA9PT0gdm5vZGUpIHtcbiAgICAgICAgKHZub2RlID0gcGFyZW50LnZub2RlKS5lbCA9IGVsO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbn1cblxuY29uc3QgaXNTdXNwZW5zZSA9ICh0eXBlKSA9PiB0eXBlLl9faXNTdXNwZW5zZTtcbi8vIFN1c3BlbnNlIGV4cG9zZXMgYSBjb21wb25lbnQtbGlrZSBBUEksIGFuZCBpcyB0cmVhdGVkIGxpa2UgYSBjb21wb25lbnRcbi8vIGluIHRoZSBjb21waWxlciwgYnV0IGludGVybmFsbHkgaXQncyBhIHNwZWNpYWwgYnVpbHQtaW4gdHlwZSB0aGF0IGhvb2tzXG4vLyBkaXJlY3RseSBpbnRvIHRoZSByZW5kZXJlci5cbmNvbnN0IFN1c3BlbnNlSW1wbCA9IHtcbiAgICBuYW1lOiAnU3VzcGVuc2UnLFxuICAgIC8vIEluIG9yZGVyIHRvIG1ha2UgU3VzcGVuc2UgdHJlZS1zaGFrYWJsZSwgd2UgbmVlZCB0byBhdm9pZCBpbXBvcnRpbmcgaXRcbiAgICAvLyBkaXJlY3RseSBpbiB0aGUgcmVuZGVyZXIuIFRoZSByZW5kZXJlciBjaGVja3MgZm9yIHRoZSBfX2lzU3VzcGVuc2UgZmxhZ1xuICAgIC8vIG9uIGEgdm5vZGUncyB0eXBlIGFuZCBjYWxscyB0aGUgYHByb2Nlc3NgIG1ldGhvZCwgcGFzc2luZyBpbiByZW5kZXJlclxuICAgIC8vIGludGVybmFscy5cbiAgICBfX2lzU3VzcGVuc2U6IHRydWUsXG4gICAgcHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIFxuICAgIC8vIHBsYXRmb3JtLXNwZWNpZmljIGltcGwgcGFzc2VkIGZyb20gcmVuZGVyZXJcbiAgICByZW5kZXJlckludGVybmFscykge1xuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgICAgICAgbW91bnRTdXNwZW5zZShuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGF0Y2hTdXNwZW5zZShuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBoeWRyYXRlOiBoeWRyYXRlU3VzcGVuc2UsXG4gICAgY3JlYXRlOiBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5LFxuICAgIG5vcm1hbGl6ZTogbm9ybWFsaXplU3VzcGVuc2VDaGlsZHJlblxufTtcbi8vIEZvcmNlLWNhc3RlZCBwdWJsaWMgdHlwaW5nIGZvciBoIGFuZCBUU1ggcHJvcHMgaW5mZXJlbmNlXG5jb25zdCBTdXNwZW5zZSA9IChTdXNwZW5zZUltcGxcbiAgICApO1xuZnVuY3Rpb24gdHJpZ2dlckV2ZW50KHZub2RlLCBuYW1lKSB7XG4gICAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzW25hbWVdO1xuICAgIGlmIChpc0Z1bmN0aW9uKGV2ZW50TGlzdGVuZXIpKSB7XG4gICAgICAgIGV2ZW50TGlzdGVuZXIoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscykge1xuICAgIGNvbnN0IHsgcDogcGF0Y2gsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0gPSByZW5kZXJlckludGVybmFscztcbiAgICBjb25zdCBoaWRkZW5Db250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBzdXNwZW5zZSA9ICh2bm9kZS5zdXNwZW5zZSA9IGNyZWF0ZVN1c3BlbnNlQm91bmRhcnkodm5vZGUsIHBhcmVudFN1c3BlbnNlLCBwYXJlbnRDb21wb25lbnQsIGNvbnRhaW5lciwgaGlkZGVuQ29udGFpbmVyLCBhbmNob3IsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpKTtcbiAgICAvLyBzdGFydCBtb3VudGluZyB0aGUgY29udGVudCBzdWJ0cmVlIGluIGFuIG9mZi1kb20gY29udGFpbmVyXG4gICAgcGF0Y2gobnVsbCwgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSB2bm9kZS5zc0NvbnRlbnQpLCBoaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMpO1xuICAgIC8vIG5vdyBjaGVjayBpZiB3ZSBoYXZlIGVuY291bnRlcmVkIGFueSBhc3luYyBkZXBzXG4gICAgaWYgKHN1c3BlbnNlLmRlcHMgPiAwKSB7XG4gICAgICAgIC8vIGhhcyBhc3luY1xuICAgICAgICAvLyBpbnZva2UgQGZhbGxiYWNrIGV2ZW50XG4gICAgICAgIHRyaWdnZXJFdmVudCh2bm9kZSwgJ29uUGVuZGluZycpO1xuICAgICAgICB0cmlnZ2VyRXZlbnQodm5vZGUsICdvbkZhbGxiYWNrJyk7XG4gICAgICAgIC8vIG1vdW50IHRoZSBmYWxsYmFjayB0cmVlXG4gICAgICAgIHBhdGNoKG51bGwsIHZub2RlLnNzRmFsbGJhY2ssIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XG4gICAgICAgIGlzU1ZHLCBzbG90U2NvcGVJZHMpO1xuICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIHZub2RlLnNzRmFsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gU3VzcGVuc2UgaGFzIG5vIGFzeW5jIGRlcHMuIEp1c3QgcmVzb2x2ZS5cbiAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhdGNoU3VzcGVuc2UobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHsgcDogcGF0Y2gsIHVtOiB1bm1vdW50LCBvOiB7IGNyZWF0ZUVsZW1lbnQgfSB9KSB7XG4gICAgY29uc3Qgc3VzcGVuc2UgPSAobjIuc3VzcGVuc2UgPSBuMS5zdXNwZW5zZSk7XG4gICAgc3VzcGVuc2Uudm5vZGUgPSBuMjtcbiAgICBuMi5lbCA9IG4xLmVsO1xuICAgIGNvbnN0IG5ld0JyYW5jaCA9IG4yLnNzQ29udGVudDtcbiAgICBjb25zdCBuZXdGYWxsYmFjayA9IG4yLnNzRmFsbGJhY2s7XG4gICAgY29uc3QgeyBhY3RpdmVCcmFuY2gsIHBlbmRpbmdCcmFuY2gsIGlzSW5GYWxsYmFjaywgaXNIeWRyYXRpbmcgfSA9IHN1c3BlbnNlO1xuICAgIGlmIChwZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBuZXdCcmFuY2g7XG4gICAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBwZW5kaW5nQnJhbmNoKSkge1xuICAgICAgICAgICAgLy8gc2FtZSByb290IHR5cGUgYnV0IGNvbnRlbnQgbWF5IGhhdmUgY2hhbmdlZC5cbiAgICAgICAgICAgIHBhdGNoKHBlbmRpbmdCcmFuY2gsIG5ld0JyYW5jaCwgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xuICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzSW5GYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHBhdGNoKGFjdGl2ZUJyYW5jaCwgbmV3RmFsbGJhY2ssIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XG4gICAgICAgICAgICAgICAgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0ZhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRvZ2dsZWQgYmVmb3JlIHBlbmRpbmcgdHJlZSBpcyByZXNvbHZlZFxuICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkKys7XG4gICAgICAgICAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB0b2dnbGVkIGJlZm9yZSBoeWRyYXRpb24gaXMgZmluaXNoZWQsIHRoZSBjdXJyZW50IERPTSB0cmVlIGlzXG4gICAgICAgICAgICAgICAgLy8gbm8gbG9uZ2VyIHZhbGlkLiBzZXQgaXQgYXMgdGhlIGFjdGl2ZSBicmFuY2ggc28gaXQgd2lsbCBiZSB1bm1vdW50ZWRcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHJlc29sdmVkXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UuaXNIeWRyYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggPSBwZW5kaW5nQnJhbmNoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdW5tb3VudChwZW5kaW5nQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGluY3JlbWVudCBwZW5kaW5nIElELiB0aGlzIGlzIHVzZWQgdG8gaW52YWxpZGF0ZSBhc3luYyBjYWxsYmFja3NcbiAgICAgICAgICAgIC8vIHJlc2V0IHN1c3BlbnNlIHN0YXRlXG4gICAgICAgICAgICBzdXNwZW5zZS5kZXBzID0gMDtcbiAgICAgICAgICAgIC8vIGRpc2NhcmQgZWZmZWN0cyBmcm9tIHBlbmRpbmcgYnJhbmNoXG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAvLyBkaXNjYXJkIHByZXZpb3VzIGNvbnRhaW5lclxuICAgICAgICAgICAgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBpZiAoaXNJbkZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgLy8gYWxyZWFkeSBpbiBmYWxsYmFjayBzdGF0ZVxuICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIG5ld0JyYW5jaCwgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2goYWN0aXZlQnJhbmNoLCBuZXdGYWxsYmFjaywgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdGYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWN0aXZlQnJhbmNoICYmIGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIGFjdGl2ZUJyYW5jaCkpIHtcbiAgICAgICAgICAgICAgICAvLyB0b2dnbGVkIFwiYmFja1wiIHRvIGN1cnJlbnQgYWN0aXZlIGJyYW5jaFxuICAgICAgICAgICAgICAgIHBhdGNoKGFjdGl2ZUJyYW5jaCwgbmV3QnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICAvLyBmb3JjZSByZXNvbHZlXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHN3aXRjaGVkIHRvIGEgM3JkIGJyYW5jaFxuICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIG5ld0JyYW5jaCwgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGFjdGl2ZUJyYW5jaCAmJiBpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBhY3RpdmVCcmFuY2gpKSB7XG4gICAgICAgICAgICAvLyByb290IGRpZCBub3QgY2hhbmdlLCBqdXN0IG5vcm1hbCBwYXRjaFxuICAgICAgICAgICAgcGF0Y2goYWN0aXZlQnJhbmNoLCBuZXdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdCcmFuY2gpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gcm9vdCBub2RlIHRvZ2dsZWRcbiAgICAgICAgICAgIC8vIGludm9rZSBAcGVuZGluZyBldmVudFxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KG4yLCAnb25QZW5kaW5nJyk7XG4gICAgICAgICAgICAvLyBtb3VudCBwZW5kaW5nIGJyYW5jaCBpbiBvZmYtZG9tIGNvbnRhaW5lclxuICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IG5ld0JyYW5jaDtcbiAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdJZCsrO1xuICAgICAgICAgICAgcGF0Y2gobnVsbCwgbmV3QnJhbmNoLCBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gaW5jb21pbmcgYnJhbmNoIGhhcyBubyBhc3luYyBkZXBzLCByZXNvbHZlIG5vdy5cbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRpbWVvdXQsIHBlbmRpbmdJZCB9ID0gc3VzcGVuc2U7XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdJZCA9PT0gcGVuZGluZ0lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UuZmFsbGJhY2sobmV3RmFsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGltZW91dCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5mYWxsYmFjayhuZXdGYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxubGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xuZnVuY3Rpb24gY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSh2bm9kZSwgcGFyZW50LCBwYXJlbnRDb21wb25lbnQsIGNvbnRhaW5lciwgaGlkZGVuQ29udGFpbmVyLCBhbmNob3IsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGlzSHlkcmF0aW5nID0gZmFsc2UpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFmYWxzZSAmJiAhaGFzV2FybmVkKSB7XG4gICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgYGNvbnNvbGUuaW5mb2AgY2Fubm90IGJlIG51bGwgZXJyb3JcbiAgICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oYDxTdXNwZW5zZT4gaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUgYW5kIGl0cyBBUEkgd2lsbCBsaWtlbHkgY2hhbmdlLmApO1xuICAgIH1cbiAgICBjb25zdCB7IHA6IHBhdGNoLCBtOiBtb3ZlLCB1bTogdW5tb3VudCwgbjogbmV4dCwgbzogeyBwYXJlbnROb2RlLCByZW1vdmUgfSB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XG4gICAgY29uc3QgdGltZW91dCA9IHRvTnVtYmVyKHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLnRpbWVvdXQpO1xuICAgIGNvbnN0IHN1c3BlbnNlID0ge1xuICAgICAgICB2bm9kZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIGlzU1ZHLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGhpZGRlbkNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBkZXBzOiAwLFxuICAgICAgICBwZW5kaW5nSWQ6IDAsXG4gICAgICAgIHRpbWVvdXQ6IHR5cGVvZiB0aW1lb3V0ID09PSAnbnVtYmVyJyA/IHRpbWVvdXQgOiAtMSxcbiAgICAgICAgYWN0aXZlQnJhbmNoOiBudWxsLFxuICAgICAgICBwZW5kaW5nQnJhbmNoOiBudWxsLFxuICAgICAgICBpc0luRmFsbGJhY2s6IHRydWUsXG4gICAgICAgIGlzSHlkcmF0aW5nLFxuICAgICAgICBpc1VubW91bnRlZDogZmFsc2UsXG4gICAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgICByZXNvbHZlKHJlc3VtZSA9IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bWUgJiYgIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzdXNwZW5zZS5yZXNvbHZlKCkgaXMgY2FsbGVkIHdpdGhvdXQgYSBwZW5kaW5nIGJyYW5jaC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmlzVW5tb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc3VzcGVuc2UucmVzb2x2ZSgpIGlzIGNhbGxlZCBvbiBhbiBhbHJlYWR5IHVubW91bnRlZCBzdXNwZW5zZSBib3VuZGFyeS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IHZub2RlLCBhY3RpdmVCcmFuY2gsIHBlbmRpbmdCcmFuY2gsIHBlbmRpbmdJZCwgZWZmZWN0cywgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIgfSA9IHN1c3BlbnNlO1xuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmlzSHlkcmF0aW5nKSB7XG4gICAgICAgICAgICAgICAgc3VzcGVuc2UuaXNIeWRyYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFyZXN1bWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWxheUVudGVyID0gYWN0aXZlQnJhbmNoICYmXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdCcmFuY2gudHJhbnNpdGlvbiAmJlxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nQnJhbmNoLnRyYW5zaXRpb24ubW9kZSA9PT0gJ291dC1pbic7XG4gICAgICAgICAgICAgICAgaWYgKGRlbGF5RW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlQnJhbmNoLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nSWQgPT09IHN1c3BlbnNlLnBlbmRpbmdJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdmUocGVuZGluZ0JyYW5jaCwgY29udGFpbmVyLCBhbmNob3IsIDAgLyogTW92ZVR5cGUuRU5URVIgKi8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGluaXRpYWwgYW5jaG9yIG9uIG1vdW50XG4gICAgICAgICAgICAgICAgbGV0IHsgYW5jaG9yIH0gPSBzdXNwZW5zZTtcbiAgICAgICAgICAgICAgICAvLyB1bm1vdW50IGN1cnJlbnQgYWN0aXZlIHRyZWVcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlQnJhbmNoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBmYWxsYmFjayB0cmVlIHdhcyBtb3VudGVkLCBpdCBtYXkgaGF2ZSBiZWVuIG1vdmVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzIHBhcnQgb2YgYSBwYXJlbnQgc3VzcGVuc2UuIGdldCB0aGUgbGF0ZXN0IGFuY2hvciBmb3IgaW5zZXJ0aW9uXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvciA9IG5leHQoYWN0aXZlQnJhbmNoKTtcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudChhY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWRlbGF5RW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBjb250ZW50IGZyb20gb2ZmLWRvbSBjb250YWluZXIgdG8gYWN0dWFsIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICBtb3ZlKHBlbmRpbmdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCAwIC8qIE1vdmVUeXBlLkVOVEVSICovKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIHBlbmRpbmdCcmFuY2gpO1xuICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IG51bGw7XG4gICAgICAgICAgICBzdXNwZW5zZS5pc0luRmFsbGJhY2sgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIGZsdXNoIGJ1ZmZlcmVkIGVmZmVjdHNcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgcGVuZGluZyBwYXJlbnQgc3VzcGVuc2VcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSBzdXNwZW5zZS5wYXJlbnQ7XG4gICAgICAgICAgICBsZXQgaGFzVW5yZXNvbHZlZEFuY2VzdG9yID0gZmFsc2U7XG4gICAgICAgICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudC5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZvdW5kIGEgcGVuZGluZyBwYXJlbnQgc3VzcGVuc2UsIG1lcmdlIGJ1ZmZlcmVkIHBvc3Qgam9ic1xuICAgICAgICAgICAgICAgICAgICAvLyBpbnRvIHRoYXQgcGFyZW50XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5lZmZlY3RzLnB1c2goLi4uZWZmZWN0cyk7XG4gICAgICAgICAgICAgICAgICAgIGhhc1VucmVzb2x2ZWRBbmNlc3RvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbm8gcGVuZGluZyBwYXJlbnQgc3VzcGVuc2UsIGZsdXNoIGFsbCBqb2JzXG4gICAgICAgICAgICBpZiAoIWhhc1VucmVzb2x2ZWRBbmNlc3Rvcikge1xuICAgICAgICAgICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZWZmZWN0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzID0gW107XG4gICAgICAgICAgICAvLyBpbnZva2UgQHJlc29sdmUgZXZlbnRcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudCh2bm9kZSwgJ29uUmVzb2x2ZScpO1xuICAgICAgICB9LFxuICAgICAgICBmYWxsYmFjayhmYWxsYmFja1ZOb2RlKSB7XG4gICAgICAgICAgICBpZiAoIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IHZub2RlLCBhY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyLCBpc1NWRyB9ID0gc3VzcGVuc2U7XG4gICAgICAgICAgICAvLyBpbnZva2UgQGZhbGxiYWNrIGV2ZW50XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQodm5vZGUsICdvbkZhbGxiYWNrJyk7XG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0KGFjdGl2ZUJyYW5jaCk7XG4gICAgICAgICAgICBjb25zdCBtb3VudEZhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghc3VzcGVuc2UuaXNJbkZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gbW91bnQgdGhlIGZhbGxiYWNrIHRyZWVcbiAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBmYWxsYmFja1ZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgICAgICAgICAgIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBmYWxsYmFja1ZOb2RlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBkZWxheUVudGVyID0gZmFsbGJhY2tWTm9kZS50cmFuc2l0aW9uICYmIGZhbGxiYWNrVk5vZGUudHJhbnNpdGlvbi5tb2RlID09PSAnb3V0LWluJztcbiAgICAgICAgICAgIGlmIChkZWxheUVudGVyKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlQnJhbmNoLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSA9IG1vdW50RmFsbGJhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdXNwZW5zZS5pc0luRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgLy8gdW5tb3VudCBjdXJyZW50IGFjdGl2ZSBicmFuY2hcbiAgICAgICAgICAgIHVubW91bnQoYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIG5vIHN1c3BlbnNlIHNvIHVubW91bnQgaG9va3MgZmlyZSBub3dcbiAgICAgICAgICAgIHRydWUgLy8gc2hvdWxkUmVtb3ZlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFkZWxheUVudGVyKSB7XG4gICAgICAgICAgICAgICAgbW91bnRGYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb3ZlKGNvbnRhaW5lciwgYW5jaG9yLCB0eXBlKSB7XG4gICAgICAgICAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggJiZcbiAgICAgICAgICAgICAgICBtb3ZlKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCwgY29udGFpbmVyLCBhbmNob3IsIHR5cGUpO1xuICAgICAgICAgICAgc3VzcGVuc2UuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCAmJiBuZXh0KHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlZ2lzdGVyRGVwKGluc3RhbmNlLCBzZXR1cFJlbmRlckVmZmVjdCkge1xuICAgICAgICAgICAgY29uc3QgaXNJblBlbmRpbmdTdXNwZW5zZSA9ICEhc3VzcGVuc2UucGVuZGluZ0JyYW5jaDtcbiAgICAgICAgICAgIGlmIChpc0luUGVuZGluZ1N1c3BlbnNlKSB7XG4gICAgICAgICAgICAgICAgc3VzcGVuc2UuZGVwcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaHlkcmF0ZWRFbCA9IGluc3RhbmNlLnZub2RlLmVsO1xuICAgICAgICAgICAgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAuYXN5bmNEZXAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCAwIC8qIEVycm9yQ29kZXMuU0VUVVBfRlVOQ1RJT04gKi8pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihhc3luY1NldHVwUmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICAvLyByZXRyeSB3aGVuIHRoZSBzZXR1cCgpIHByb21pc2UgcmVzb2x2ZXMuXG4gICAgICAgICAgICAgICAgLy8gY29tcG9uZW50IG1heSBoYXZlIGJlZW4gdW5tb3VudGVkIGJlZm9yZSByZXNvbHZlLlxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5pc1VubW91bnRlZCB8fFxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5pc1VubW91bnRlZCB8fFxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQgIT09IGluc3RhbmNlLnN1c3BlbnNlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyByZXRyeSBmcm9tIHRoaXMgY29tcG9uZW50XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB2bm9kZSB9ID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQodm5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgYXN5bmNTZXR1cFJlc3VsdCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmIChoeWRyYXRlZEVsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHZub2RlIG1heSBoYXZlIGJlZW4gcmVwbGFjZWQgaWYgYW4gdXBkYXRlIGhhcHBlbmVkIGJlZm9yZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gYXN5bmMgZGVwIGlzIHJlc29sdmVkLlxuICAgICAgICAgICAgICAgICAgICB2bm9kZS5lbCA9IGh5ZHJhdGVkRWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gIWh5ZHJhdGVkRWwgJiYgaW5zdGFuY2Uuc3ViVHJlZS5lbDtcbiAgICAgICAgICAgICAgICBzZXR1cFJlbmRlckVmZmVjdChpbnN0YW5jZSwgdm5vZGUsIFxuICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBtYXkgaGF2ZSBiZWVuIG1vdmVkIGJlZm9yZSByZXNvbHZlLlxuICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgbm90IGEgaHlkcmF0aW9uLCBpbnN0YW5jZS5zdWJUcmVlIHdpbGwgYmUgdGhlIGNvbW1lbnRcbiAgICAgICAgICAgICAgICAvLyBwbGFjZWhvbGRlci5cbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlKGh5ZHJhdGVkRWwgfHwgaW5zdGFuY2Uuc3ViVHJlZS5lbCksIFxuICAgICAgICAgICAgICAgIC8vIGFuY2hvciB3aWxsIG5vdCBiZSB1c2VkIGlmIHRoaXMgaXMgaHlkcmF0aW9uLCBzbyBvbmx5IG5lZWQgdG9cbiAgICAgICAgICAgICAgICAvLyBjb25zaWRlciB0aGUgY29tbWVudCBwbGFjZWhvbGRlciBjYXNlLlxuICAgICAgICAgICAgICAgIGh5ZHJhdGVkRWwgPyBudWxsIDogbmV4dChpbnN0YW5jZS5zdWJUcmVlKSwgc3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIGlmIChwbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmUocGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1cGRhdGVIT0NIb3N0RWwoaW5zdGFuY2UsIHZub2RlLmVsKTtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG9ubHkgZGVjcmVhc2UgZGVwcyBjb3VudCBpZiBzdXNwZW5zZSBpcyBub3QgYWxyZWFkeSByZXNvbHZlZFxuICAgICAgICAgICAgICAgIGlmIChpc0luUGVuZGluZ1N1c3BlbnNlICYmIC0tc3VzcGVuc2UuZGVwcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHVubW91bnQocGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKSB7XG4gICAgICAgICAgICBzdXNwZW5zZS5pc1VubW91bnRlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UuYWN0aXZlQnJhbmNoKSB7XG4gICAgICAgICAgICAgICAgdW5tb3VudChzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgICAgICAgICAgdW5tb3VudChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBzdXNwZW5zZTtcbn1cbmZ1bmN0aW9uIGh5ZHJhdGVTdXNwZW5zZShub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaHlkcmF0ZU5vZGUpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbiAgICBjb25zdCBzdXNwZW5zZSA9ICh2bm9kZS5zdXNwZW5zZSA9IGNyZWF0ZVN1c3BlbnNlQm91bmRhcnkodm5vZGUsIHBhcmVudFN1c3BlbnNlLCBwYXJlbnRDb21wb25lbnQsIG5vZGUucGFyZW50Tm9kZSwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIG51bGwsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIHRydWUgLyogaHlkcmF0aW5nICovKSk7XG4gICAgLy8gdGhlcmUgYXJlIHR3byBwb3NzaWJsZSBzY2VuYXJpb3MgZm9yIHNlcnZlci1yZW5kZXJlZCBzdXNwZW5zZTpcbiAgICAvLyAtIHN1Y2Nlc3M6IHNzciBjb250ZW50IHNob3VsZCBiZSBmdWxseSByZXNvbHZlZFxuICAgIC8vIC0gZmFpbHVyZTogc3NyIGNvbnRlbnQgc2hvdWxkIGJlIHRoZSBmYWxsYmFjayBicmFuY2guXG4gICAgLy8gaG93ZXZlciwgb24gdGhlIGNsaWVudCB3ZSBkb24ndCByZWFsbHkga25vdyBpZiBpdCBoYXMgZmFpbGVkIG9yIG5vdFxuICAgIC8vIGF0dGVtcHQgdG8gaHlkcmF0ZSB0aGUgRE9NIGFzc3VtaW5nIGl0IGhhcyBzdWNjZWVkZWQsIGJ1dCB3ZSBzdGlsbFxuICAgIC8vIG5lZWQgdG8gY29uc3RydWN0IGEgc3VzcGVuc2UgYm91bmRhcnkgZmlyc3RcbiAgICBjb25zdCByZXN1bHQgPSBoeWRyYXRlTm9kZShub2RlLCAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IHZub2RlLnNzQ29udGVudCksIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICBpZiAoc3VzcGVuc2UuZGVwcyA9PT0gMCkge1xuICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW4odm5vZGUpIHtcbiAgICBjb25zdCB7IHNoYXBlRmxhZywgY2hpbGRyZW4gfSA9IHZub2RlO1xuICAgIGNvbnN0IGlzU2xvdENoaWxkcmVuID0gc2hhcGVGbGFnICYgMzIgLyogU2hhcGVGbGFncy5TTE9UU19DSElMRFJFTiAqLztcbiAgICB2bm9kZS5zc0NvbnRlbnQgPSBub3JtYWxpemVTdXNwZW5zZVNsb3QoaXNTbG90Q2hpbGRyZW4gPyBjaGlsZHJlbi5kZWZhdWx0IDogY2hpbGRyZW4pO1xuICAgIHZub2RlLnNzRmFsbGJhY2sgPSBpc1Nsb3RDaGlsZHJlblxuICAgICAgICA/IG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChjaGlsZHJlbi5mYWxsYmFjaylcbiAgICAgICAgOiBjcmVhdGVWTm9kZShDb21tZW50KTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChzKSB7XG4gICAgbGV0IGJsb2NrO1xuICAgIGlmIChpc0Z1bmN0aW9uKHMpKSB7XG4gICAgICAgIGNvbnN0IHRyYWNrQmxvY2sgPSBpc0Jsb2NrVHJlZUVuYWJsZWQgJiYgcy5fYztcbiAgICAgICAgaWYgKHRyYWNrQmxvY2spIHtcbiAgICAgICAgICAgIC8vIGRpc2FibGVUcmFja2luZzogZmFsc2VcbiAgICAgICAgICAgIC8vIGFsbG93IGJsb2NrIHRyYWNraW5nIGZvciBjb21waWxlZCBzbG90c1xuICAgICAgICAgICAgLy8gKHNlZSAuL2NvbXBvbmVudFJlbmRlckNvbnRleHQudHMpXG4gICAgICAgICAgICBzLl9kID0gZmFsc2U7XG4gICAgICAgICAgICBvcGVuQmxvY2soKTtcbiAgICAgICAgfVxuICAgICAgICBzID0gcygpO1xuICAgICAgICBpZiAodHJhY2tCbG9jaykge1xuICAgICAgICAgICAgcy5fZCA9IHRydWU7XG4gICAgICAgICAgICBibG9jayA9IGN1cnJlbnRCbG9jaztcbiAgICAgICAgICAgIGNsb3NlQmxvY2soKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNBcnJheShzKSkge1xuICAgICAgICBjb25zdCBzaW5nbGVDaGlsZCA9IGZpbHRlclNpbmdsZVJvb3Qocyk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXNpbmdsZUNoaWxkKSB7XG4gICAgICAgICAgICB3YXJuKGA8U3VzcGVuc2U+IHNsb3RzIGV4cGVjdCBhIHNpbmdsZSByb290IG5vZGUuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcyA9IHNpbmdsZUNoaWxkO1xuICAgIH1cbiAgICBzID0gbm9ybWFsaXplVk5vZGUocyk7XG4gICAgaWYgKGJsb2NrICYmICFzLmR5bmFtaWNDaGlsZHJlbikge1xuICAgICAgICBzLmR5bmFtaWNDaGlsZHJlbiA9IGJsb2NrLmZpbHRlcihjID0+IGMgIT09IHMpO1xuICAgIH1cbiAgICByZXR1cm4gcztcbn1cbmZ1bmN0aW9uIHF1ZXVlRWZmZWN0V2l0aFN1c3BlbnNlKGZuLCBzdXNwZW5zZSkge1xuICAgIGlmIChzdXNwZW5zZSAmJiBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgIGlmIChpc0FycmF5KGZuKSkge1xuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cy5wdXNoKC4uLmZuKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaChmbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZm4pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgYnJhbmNoKSB7XG4gICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoID0gYnJhbmNoO1xuICAgIGNvbnN0IHsgdm5vZGUsIHBhcmVudENvbXBvbmVudCB9ID0gc3VzcGVuc2U7XG4gICAgY29uc3QgZWwgPSAodm5vZGUuZWwgPSBicmFuY2guZWwpO1xuICAgIC8vIGluIGNhc2Ugc3VzcGVuc2UgaXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNvbXBvbmVudCxcbiAgICAvLyByZWN1cnNpdmVseSB1cGRhdGUgdGhlIEhPQyBlbFxuICAgIGlmIChwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LnN1YlRyZWUgPT09IHZub2RlKSB7XG4gICAgICAgIHBhcmVudENvbXBvbmVudC52bm9kZS5lbCA9IGVsO1xuICAgICAgICB1cGRhdGVIT0NIb3N0RWwocGFyZW50Q29tcG9uZW50LCBlbCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwcm92aWRlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoIWN1cnJlbnRJbnN0YW5jZSkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICB3YXJuKGBwcm92aWRlKCkgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgc2V0dXAoKS5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IHByb3ZpZGVzID0gY3VycmVudEluc3RhbmNlLnByb3ZpZGVzO1xuICAgICAgICAvLyBieSBkZWZhdWx0IGFuIGluc3RhbmNlIGluaGVyaXRzIGl0cyBwYXJlbnQncyBwcm92aWRlcyBvYmplY3RcbiAgICAgICAgLy8gYnV0IHdoZW4gaXQgbmVlZHMgdG8gcHJvdmlkZSB2YWx1ZXMgb2YgaXRzIG93biwgaXQgY3JlYXRlcyBpdHNcbiAgICAgICAgLy8gb3duIHByb3ZpZGVzIG9iamVjdCB1c2luZyBwYXJlbnQgcHJvdmlkZXMgb2JqZWN0IGFzIHByb3RvdHlwZS5cbiAgICAgICAgLy8gdGhpcyB3YXkgaW4gYGluamVjdGAgd2UgY2FuIHNpbXBseSBsb29rIHVwIGluamVjdGlvbnMgZnJvbSBkaXJlY3RcbiAgICAgICAgLy8gcGFyZW50IGFuZCBsZXQgdGhlIHByb3RvdHlwZSBjaGFpbiBkbyB0aGUgd29yay5cbiAgICAgICAgY29uc3QgcGFyZW50UHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucGFyZW50ICYmIGN1cnJlbnRJbnN0YW5jZS5wYXJlbnQucHJvdmlkZXM7XG4gICAgICAgIGlmIChwYXJlbnRQcm92aWRlcyA9PT0gcHJvdmlkZXMpIHtcbiAgICAgICAgICAgIHByb3ZpZGVzID0gY3VycmVudEluc3RhbmNlLnByb3ZpZGVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRQcm92aWRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVFMgZG9lc24ndCBhbGxvdyBzeW1ib2wgYXMgaW5kZXggdHlwZVxuICAgICAgICBwcm92aWRlc1trZXldID0gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gaW5qZWN0KGtleSwgZGVmYXVsdFZhbHVlLCB0cmVhdERlZmF1bHRBc0ZhY3RvcnkgPSBmYWxzZSkge1xuICAgIC8vIGZhbGxiYWNrIHRvIGBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2VgIHNvIHRoYXQgdGhpcyBjYW4gYmUgY2FsbGVkIGluXG4gICAgLy8gYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICAgIGNvbnN0IGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgLy8gIzI0MDBcbiAgICAgICAgLy8gdG8gc3VwcG9ydCBgYXBwLnVzZWAgcGx1Z2lucyxcbiAgICAgICAgLy8gZmFsbGJhY2sgdG8gYXBwQ29udGV4dCdzIGBwcm92aWRlc2AgaWYgdGhlIGluc3RhbmNlIGlzIGF0IHJvb3RcbiAgICAgICAgY29uc3QgcHJvdmlkZXMgPSBpbnN0YW5jZS5wYXJlbnQgPT0gbnVsbFxuICAgICAgICAgICAgPyBpbnN0YW5jZS52bm9kZS5hcHBDb250ZXh0ICYmIGluc3RhbmNlLnZub2RlLmFwcENvbnRleHQucHJvdmlkZXNcbiAgICAgICAgICAgIDogaW5zdGFuY2UucGFyZW50LnByb3ZpZGVzO1xuICAgICAgICBpZiAocHJvdmlkZXMgJiYga2V5IGluIHByb3ZpZGVzKSB7XG4gICAgICAgICAgICAvLyBUUyBkb2Vzbid0IGFsbG93IHN5bWJvbCBhcyBpbmRleCB0eXBlXG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSAmJiBpc0Z1bmN0aW9uKGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgICAgICAgICA/IGRlZmF1bHRWYWx1ZS5jYWxsKGluc3RhbmNlLnByb3h5KVxuICAgICAgICAgICAgICAgIDogZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgd2FybihgaW5qZWN0aW9uIFwiJHtTdHJpbmcoa2V5KX1cIiBub3QgZm91bmQuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm4oYGluamVjdCgpIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHNldHVwKCkgb3IgZnVuY3Rpb25hbCBjb21wb25lbnRzLmApO1xuICAgIH1cbn1cblxuLy8gU2ltcGxlIGVmZmVjdC5cbmZ1bmN0aW9uIHdhdGNoRWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xuICAgIHJldHVybiBkb1dhdGNoKGVmZmVjdCwgbnVsbCwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiB3YXRjaFBvc3RFZmZlY3QoZWZmZWN0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGRvV2F0Y2goZWZmZWN0LCBudWxsLCAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgID8gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBmbHVzaDogJ3Bvc3QnIH0pIDogeyBmbHVzaDogJ3Bvc3QnIH0pKTtcbn1cbmZ1bmN0aW9uIHdhdGNoU3luY0VmZmVjdChlZmZlY3QsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZG9XYXRjaChlZmZlY3QsIG51bGwsICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgPyBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGZsdXNoOiAnc3luYycgfSkgOiB7IGZsdXNoOiAnc3luYycgfSkpO1xufVxuLy8gaW5pdGlhbCB2YWx1ZSBmb3Igd2F0Y2hlcnMgdG8gdHJpZ2dlciBvbiB1bmRlZmluZWQgaW5pdGlhbCB2YWx1ZXNcbmNvbnN0IElOSVRJQUxfV0FUQ0hFUl9WQUxVRSA9IHt9O1xuLy8gaW1wbGVtZW50YXRpb25cbmZ1bmN0aW9uIHdhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0Z1bmN0aW9uKGNiKSkge1xuICAgICAgICB3YXJuKGBcXGB3YXRjaChmbiwgb3B0aW9ucz8pXFxgIHNpZ25hdHVyZSBoYXMgYmVlbiBtb3ZlZCB0byBhIHNlcGFyYXRlIEFQSS4gYCArXG4gICAgICAgICAgICBgVXNlIFxcYHdhdGNoRWZmZWN0KGZuLCBvcHRpb25zPylcXGAgaW5zdGVhZC4gXFxgd2F0Y2hcXGAgbm93IG9ubHkgYCArXG4gICAgICAgICAgICBgc3VwcG9ydHMgXFxgd2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucz8pIHNpZ25hdHVyZS5gKTtcbiAgICB9XG4gICAgcmV0dXJuIGRvV2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBkb1dhdGNoKHNvdXJjZSwgY2IsIHsgaW1tZWRpYXRlLCBkZWVwLCBmbHVzaCwgb25UcmFjaywgb25UcmlnZ2VyIH0gPSBFTVBUWV9PQkopIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFjYikge1xuICAgICAgICBpZiAoaW1tZWRpYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdhcm4oYHdhdGNoKCkgXCJpbW1lZGlhdGVcIiBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyB0aGUgYCArXG4gICAgICAgICAgICAgICAgYHdhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd2Fybihgd2F0Y2goKSBcImRlZXBcIiBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyB0aGUgYCArXG4gICAgICAgICAgICAgICAgYHdhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgd2FybkludmFsaWRTb3VyY2UgPSAocykgPT4ge1xuICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIHNvdXJjZTogYCwgcywgYEEgd2F0Y2ggc291cmNlIGNhbiBvbmx5IGJlIGEgZ2V0dGVyL2VmZmVjdCBmdW5jdGlvbiwgYSByZWYsIGAgK1xuICAgICAgICAgICAgYGEgcmVhY3RpdmUgb2JqZWN0LCBvciBhbiBhcnJheSBvZiB0aGVzZSB0eXBlcy5gKTtcbiAgICB9O1xuICAgIGNvbnN0IGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlO1xuICAgIGxldCBnZXR0ZXI7XG4gICAgbGV0IGZvcmNlVHJpZ2dlciA9IGZhbHNlO1xuICAgIGxldCBpc011bHRpU291cmNlID0gZmFsc2U7XG4gICAgaWYgKGlzUmVmKHNvdXJjZSkpIHtcbiAgICAgICAgZ2V0dGVyID0gKCkgPT4gc291cmNlLnZhbHVlO1xuICAgICAgICBmb3JjZVRyaWdnZXIgPSBpc1NoYWxsb3ckMShzb3VyY2UpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1JlYWN0aXZlKHNvdXJjZSkpIHtcbiAgICAgICAgZ2V0dGVyID0gKCkgPT4gc291cmNlO1xuICAgICAgICBkZWVwID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIGlzTXVsdGlTb3VyY2UgPSB0cnVlO1xuICAgICAgICBmb3JjZVRyaWdnZXIgPSBzb3VyY2Uuc29tZShzID0+IGlzUmVhY3RpdmUocykgfHwgaXNTaGFsbG93JDEocykpO1xuICAgICAgICBnZXR0ZXIgPSAoKSA9PiBzb3VyY2UubWFwKHMgPT4ge1xuICAgICAgICAgICAgaWYgKGlzUmVmKHMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlYWN0aXZlKHMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYXZlcnNlKHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNGdW5jdGlvbihzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsV2l0aEVycm9ySGFuZGxpbmcocywgaW5zdGFuY2UsIDIgLyogRXJyb3JDb2Rlcy5XQVRDSF9HRVRURVIgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm5JbnZhbGlkU291cmNlKHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XG4gICAgICAgIGlmIChjYikge1xuICAgICAgICAgICAgLy8gZ2V0dGVyIHdpdGggY2JcbiAgICAgICAgICAgIGdldHRlciA9ICgpID0+IGNhbGxXaXRoRXJyb3JIYW5kbGluZyhzb3VyY2UsIGluc3RhbmNlLCAyIC8qIEVycm9yQ29kZXMuV0FUQ0hfR0VUVEVSICovKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vIGNiIC0+IHNpbXBsZSBlZmZlY3RcbiAgICAgICAgICAgIGdldHRlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuaXNVbm1vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2xlYW51cCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhzb3VyY2UsIGluc3RhbmNlLCAzIC8qIEVycm9yQ29kZXMuV0FUQ0hfQ0FMTEJBQ0sgKi8sIFtvbkNsZWFudXBdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdldHRlciA9IE5PT1A7XG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuSW52YWxpZFNvdXJjZShzb3VyY2UpO1xuICAgIH1cbiAgICBpZiAoY2IgJiYgZGVlcCkge1xuICAgICAgICBjb25zdCBiYXNlR2V0dGVyID0gZ2V0dGVyO1xuICAgICAgICBnZXR0ZXIgPSAoKSA9PiB0cmF2ZXJzZShiYXNlR2V0dGVyKCkpO1xuICAgIH1cbiAgICBsZXQgY2xlYW51cDtcbiAgICBsZXQgb25DbGVhbnVwID0gKGZuKSA9PiB7XG4gICAgICAgIGNsZWFudXAgPSBlZmZlY3Qub25TdG9wID0gKCkgPT4ge1xuICAgICAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgNCAvKiBFcnJvckNvZGVzLldBVENIX0NMRUFOVVAgKi8pO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgLy8gaW4gU1NSIHRoZXJlIGlzIG5vIG5lZWQgdG8gc2V0dXAgYW4gYWN0dWFsIGVmZmVjdCwgYW5kIGl0IHNob3VsZCBiZSBub29wXG4gICAgLy8gdW5sZXNzIGl0J3MgZWFnZXJcbiAgICBpZiAoaXNJblNTUkNvbXBvbmVudFNldHVwKSB7XG4gICAgICAgIC8vIHdlIHdpbGwgYWxzbyBub3QgY2FsbCB0aGUgaW52YWxpZGF0ZSBjYWxsYmFjayAoKyBydW5uZXIgaXMgbm90IHNldCB1cClcbiAgICAgICAgb25DbGVhbnVwID0gTk9PUDtcbiAgICAgICAgaWYgKCFjYikge1xuICAgICAgICAgICAgZ2V0dGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhjYiwgaW5zdGFuY2UsIDMgLyogRXJyb3JDb2Rlcy5XQVRDSF9DQUxMQkFDSyAqLywgW1xuICAgICAgICAgICAgICAgIGdldHRlcigpLFxuICAgICAgICAgICAgICAgIGlzTXVsdGlTb3VyY2UgPyBbXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBvbkNsZWFudXBcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOT09QO1xuICAgIH1cbiAgICBsZXQgb2xkVmFsdWUgPSBpc011bHRpU291cmNlID8gW10gOiBJTklUSUFMX1dBVENIRVJfVkFMVUU7XG4gICAgY29uc3Qgam9iID0gKCkgPT4ge1xuICAgICAgICBpZiAoIWVmZmVjdC5hY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgIC8vIHdhdGNoKHNvdXJjZSwgY2IpXG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGVmZmVjdC5ydW4oKTtcbiAgICAgICAgICAgIGlmIChkZWVwIHx8XG4gICAgICAgICAgICAgICAgZm9yY2VUcmlnZ2VyIHx8XG4gICAgICAgICAgICAgICAgKGlzTXVsdGlTb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgPyBuZXdWYWx1ZS5zb21lKCh2LCBpKSA9PiBoYXNDaGFuZ2VkKHYsIG9sZFZhbHVlW2ldKSlcbiAgICAgICAgICAgICAgICAgICAgOiBoYXNDaGFuZ2VkKG5ld1ZhbHVlLCBvbGRWYWx1ZSkpIHx8XG4gICAgICAgICAgICAgICAgKGZhbHNlICApKSB7XG4gICAgICAgICAgICAgICAgLy8gY2xlYW51cCBiZWZvcmUgcnVubmluZyBjYiBhZ2FpblxuICAgICAgICAgICAgICAgIGlmIChjbGVhbnVwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoY2IsIGluc3RhbmNlLCAzIC8qIEVycm9yQ29kZXMuV0FUQ0hfQ0FMTEJBQ0sgKi8sIFtcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIC8vIHBhc3MgdW5kZWZpbmVkIGFzIHRoZSBvbGQgdmFsdWUgd2hlbiBpdCdzIGNoYW5nZWQgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlID09PSBJTklUSUFMX1dBVENIRVJfVkFMVUUgPyB1bmRlZmluZWQgOiBvbGRWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgb25DbGVhbnVwXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHdhdGNoRWZmZWN0XG4gICAgICAgICAgICBlZmZlY3QucnVuKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIGltcG9ydGFudDogbWFyayB0aGUgam9iIGFzIGEgd2F0Y2hlciBjYWxsYmFjayBzbyB0aGF0IHNjaGVkdWxlciBrbm93c1xuICAgIC8vIGl0IGlzIGFsbG93ZWQgdG8gc2VsZi10cmlnZ2VyICgjMTcyNylcbiAgICBqb2IuYWxsb3dSZWN1cnNlID0gISFjYjtcbiAgICBsZXQgc2NoZWR1bGVyO1xuICAgIGlmIChmbHVzaCA9PT0gJ3N5bmMnKSB7XG4gICAgICAgIHNjaGVkdWxlciA9IGpvYjsgLy8gdGhlIHNjaGVkdWxlciBmdW5jdGlvbiBnZXRzIGNhbGxlZCBkaXJlY3RseVxuICAgIH1cbiAgICBlbHNlIGlmIChmbHVzaCA9PT0gJ3Bvc3QnKSB7XG4gICAgICAgIHNjaGVkdWxlciA9ICgpID0+IHF1ZXVlUG9zdFJlbmRlckVmZmVjdChqb2IsIGluc3RhbmNlICYmIGluc3RhbmNlLnN1c3BlbnNlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGRlZmF1bHQ6ICdwcmUnXG4gICAgICAgIGpvYi5wcmUgPSB0cnVlO1xuICAgICAgICBpZiAoaW5zdGFuY2UpXG4gICAgICAgICAgICBqb2IuaWQgPSBpbnN0YW5jZS51aWQ7XG4gICAgICAgIHNjaGVkdWxlciA9ICgpID0+IHF1ZXVlSm9iKGpvYik7XG4gICAgfVxuICAgIGNvbnN0IGVmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChnZXR0ZXIsIHNjaGVkdWxlcik7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBlZmZlY3Qub25UcmFjayA9IG9uVHJhY2s7XG4gICAgICAgIGVmZmVjdC5vblRyaWdnZXIgPSBvblRyaWdnZXI7XG4gICAgfVxuICAgIC8vIGluaXRpYWwgcnVuXG4gICAgaWYgKGNiKSB7XG4gICAgICAgIGlmIChpbW1lZGlhdGUpIHtcbiAgICAgICAgICAgIGpvYigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2xkVmFsdWUgPSBlZmZlY3QucnVuKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoZmx1c2ggPT09ICdwb3N0Jykge1xuICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoZWZmZWN0LnJ1bi5iaW5kKGVmZmVjdCksIGluc3RhbmNlICYmIGluc3RhbmNlLnN1c3BlbnNlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVmZmVjdC5ydW4oKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZWZmZWN0LnN0b3AoKTtcbiAgICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLnNjb3BlKSB7XG4gICAgICAgICAgICByZW1vdmUoaW5zdGFuY2Uuc2NvcGUuZWZmZWN0cywgZWZmZWN0KTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vLyB0aGlzLiR3YXRjaFxuZnVuY3Rpb24gaW5zdGFuY2VXYXRjaChzb3VyY2UsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHVibGljVGhpcyA9IHRoaXMucHJveHk7XG4gICAgY29uc3QgZ2V0dGVyID0gaXNTdHJpbmcoc291cmNlKVxuICAgICAgICA/IHNvdXJjZS5pbmNsdWRlcygnLicpXG4gICAgICAgICAgICA/IGNyZWF0ZVBhdGhHZXR0ZXIocHVibGljVGhpcywgc291cmNlKVxuICAgICAgICAgICAgOiAoKSA9PiBwdWJsaWNUaGlzW3NvdXJjZV1cbiAgICAgICAgOiBzb3VyY2UuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKTtcbiAgICBsZXQgY2I7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgIGNiID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYiA9IHZhbHVlLmhhbmRsZXI7XG4gICAgICAgIG9wdGlvbnMgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgY3VyID0gY3VycmVudEluc3RhbmNlO1xuICAgIHNldEN1cnJlbnRJbnN0YW5jZSh0aGlzKTtcbiAgICBjb25zdCByZXMgPSBkb1dhdGNoKGdldHRlciwgY2IuYmluZChwdWJsaWNUaGlzKSwgb3B0aW9ucyk7XG4gICAgaWYgKGN1cikge1xuICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoY3VyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHVuc2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoR2V0dGVyKGN0eCwgcGF0aCkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxldCBjdXIgPSBjdHg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoICYmIGN1cjsgaSsrKSB7XG4gICAgICAgICAgICBjdXIgPSBjdXJbc2VnbWVudHNbaV1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXI7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRyYXZlcnNlKHZhbHVlLCBzZWVuKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWVbXCJfX3Zfc2tpcFwiIC8qIFJlYWN0aXZlRmxhZ3MuU0tJUCAqL10pIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzZWVuID0gc2VlbiB8fCBuZXcgU2V0KCk7XG4gICAgaWYgKHNlZW4uaGFzKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHNlZW4uYWRkKHZhbHVlKTtcbiAgICBpZiAoaXNSZWYodmFsdWUpKSB7XG4gICAgICAgIHRyYXZlcnNlKHZhbHVlLnZhbHVlLCBzZWVuKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWVbaV0sIHNlZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbHVlKSB8fCBpc01hcCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaCgodikgPT4ge1xuICAgICAgICAgICAgdHJhdmVyc2Uodiwgc2Vlbik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWVba2V5XSwgc2Vlbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiB1c2VUcmFuc2l0aW9uU3RhdGUoKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgIGlzTW91bnRlZDogZmFsc2UsXG4gICAgICAgIGlzTGVhdmluZzogZmFsc2UsXG4gICAgICAgIGlzVW5tb3VudGluZzogZmFsc2UsXG4gICAgICAgIGxlYXZpbmdWTm9kZXM6IG5ldyBNYXAoKVxuICAgIH07XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgICAgc3RhdGUuaXNNb3VudGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgICBzdGF0ZS5pc1VubW91bnRpbmcgPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiBzdGF0ZTtcbn1cbmNvbnN0IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yID0gW0Z1bmN0aW9uLCBBcnJheV07XG5jb25zdCBCYXNlVHJhbnNpdGlvbkltcGwgPSB7XG4gICAgbmFtZTogYEJhc2VUcmFuc2l0aW9uYCxcbiAgICBwcm9wczoge1xuICAgICAgICBtb2RlOiBTdHJpbmcsXG4gICAgICAgIGFwcGVhcjogQm9vbGVhbixcbiAgICAgICAgcGVyc2lzdGVkOiBCb29sZWFuLFxuICAgICAgICAvLyBlbnRlclxuICAgICAgICBvbkJlZm9yZUVudGVyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgICAgICAgb25FbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uQWZ0ZXJFbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uRW50ZXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICAvLyBsZWF2ZVxuICAgICAgICBvbkJlZm9yZUxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgICAgICAgb25MZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uQWZ0ZXJMZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uTGVhdmVDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICAvLyBhcHBlYXJcbiAgICAgICAgb25CZWZvcmVBcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICBvbkFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uQWZ0ZXJBcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICBvbkFwcGVhckNhbmNlbGxlZDogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3JcbiAgICB9LFxuICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB1c2VUcmFuc2l0aW9uU3RhdGUoKTtcbiAgICAgICAgbGV0IHByZXZUcmFuc2l0aW9uS2V5O1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ICYmIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihzbG90cy5kZWZhdWx0KCksIHRydWUpO1xuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNoaWxkID0gY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGxldCBoYXNGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIGxvY2F0ZSBmaXJzdCBub24tY29tbWVudCBjaGlsZFxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYyBvZiBjaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYy50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGhhc0ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2FybiBtb3JlIHRoYW4gb25lIG5vbi1jb21tZW50IGNoaWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybignPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudCBvciBjb21wb25lbnQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVXNlIDx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IGM7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoZXJlJ3Mgbm8gbmVlZCB0byB0cmFjayByZWFjdGl2aXR5IGZvciB0aGVzZSBwcm9wcyBzbyB1c2UgdGhlIHJhd1xuICAgICAgICAgICAgLy8gcHJvcHMgZm9yIGEgYml0IGJldHRlciBwZXJmXG4gICAgICAgICAgICBjb25zdCByYXdQcm9wcyA9IHRvUmF3KHByb3BzKTtcbiAgICAgICAgICAgIGNvbnN0IHsgbW9kZSB9ID0gcmF3UHJvcHM7XG4gICAgICAgICAgICAvLyBjaGVjayBtb2RlXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgbW9kZSAmJlxuICAgICAgICAgICAgICAgIG1vZGUgIT09ICdpbi1vdXQnICYmXG4gICAgICAgICAgICAgICAgbW9kZSAhPT0gJ291dC1pbicgJiZcbiAgICAgICAgICAgICAgICBtb2RlICE9PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAke21vZGV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNMZWF2aW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgPHRyYW5zaXRpb24+PGtlZXAtYWxpdmUvPjwvdHJhbnNpdGlvbj4sIHdlIG5lZWQgdG9cbiAgICAgICAgICAgIC8vIGNvbXBhcmUgdGhlIHR5cGUgb2YgdGhlIGtlcHQtYWxpdmUgY2hpbGRyZW4uXG4gICAgICAgICAgICBjb25zdCBpbm5lckNoaWxkID0gZ2V0S2VlcEFsaXZlQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgaWYgKCFpbm5lckNoaWxkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZW50ZXJIb29rcyA9IHJlc29sdmVUcmFuc2l0aW9uSG9va3MoaW5uZXJDaGlsZCwgcmF3UHJvcHMsIHN0YXRlLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoaW5uZXJDaGlsZCwgZW50ZXJIb29rcyk7XG4gICAgICAgICAgICBjb25zdCBvbGRDaGlsZCA9IGluc3RhbmNlLnN1YlRyZWU7XG4gICAgICAgICAgICBjb25zdCBvbGRJbm5lckNoaWxkID0gb2xkQ2hpbGQgJiYgZ2V0S2VlcEFsaXZlQ2hpbGQob2xkQ2hpbGQpO1xuICAgICAgICAgICAgbGV0IHRyYW5zaXRpb25LZXlDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCB7IGdldFRyYW5zaXRpb25LZXkgfSA9IGlubmVyQ2hpbGQudHlwZTtcbiAgICAgICAgICAgIGlmIChnZXRUcmFuc2l0aW9uS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZ2V0VHJhbnNpdGlvbktleSgpO1xuICAgICAgICAgICAgICAgIGlmIChwcmV2VHJhbnNpdGlvbktleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZUcmFuc2l0aW9uS2V5ID0ga2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09IHByZXZUcmFuc2l0aW9uS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZUcmFuc2l0aW9uS2V5ID0ga2V5O1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uS2V5Q2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaGFuZGxlIG1vZGVcbiAgICAgICAgICAgIGlmIChvbGRJbm5lckNoaWxkICYmXG4gICAgICAgICAgICAgICAgb2xkSW5uZXJDaGlsZC50eXBlICE9PSBDb21tZW50ICYmXG4gICAgICAgICAgICAgICAgKCFpc1NhbWVWTm9kZVR5cGUoaW5uZXJDaGlsZCwgb2xkSW5uZXJDaGlsZCkgfHwgdHJhbnNpdGlvbktleUNoYW5nZWQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVhdmluZ0hvb2tzID0gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCByYXdQcm9wcywgc3RhdGUsIGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgb2xkIHRyZWUncyBob29rcyBpbiBjYXNlIG9mIGR5bmFtaWMgdHJhbnNpdGlvblxuICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCBsZWF2aW5nSG9va3MpO1xuICAgICAgICAgICAgICAgIC8vIHN3aXRjaGluZyBiZXR3ZWVuIGRpZmZlcmVudCB2aWV3c1xuICAgICAgICAgICAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgICAgICAgICAgICAgbGVhdmluZ0hvb2tzLmFmdGVyTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHlQbGFjZWhvbGRlcihjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnICYmIGlubmVyQ2hpbGQudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBsZWF2aW5nSG9va3MuZGVsYXlMZWF2ZSA9IChlbCwgZWFybHlSZW1vdmUsIGRlbGF5ZWRMZWF2ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gZ2V0TGVhdmluZ05vZGVzRm9yVHlwZShzdGF0ZSwgb2xkSW5uZXJDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVbU3RyaW5nKG9sZElubmVyQ2hpbGQua2V5KV0gPSBvbGRJbm5lckNoaWxkO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWFybHkgcmVtb3ZhbCBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuX2xlYXZlQ2IgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFybHlSZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZW50ZXJIb29rcy5kZWxheWVkTGVhdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXJIb29rcy5kZWxheWVkTGVhdmUgPSBkZWxheWVkTGVhdmU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgICB9O1xuICAgIH1cbn07XG4vLyBleHBvcnQgdGhlIHB1YmxpYyB0eXBlIGZvciBoL3RzeCBpbmZlcmVuY2Vcbi8vIGFsc28gdG8gYXZvaWQgaW5saW5lIGltcG9ydCgpIGluIGdlbmVyYXRlZCBkLnRzIGZpbGVzXG5jb25zdCBCYXNlVHJhbnNpdGlvbiA9IEJhc2VUcmFuc2l0aW9uSW1wbDtcbmZ1bmN0aW9uIGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIHZub2RlKSB7XG4gICAgY29uc3QgeyBsZWF2aW5nVk5vZGVzIH0gPSBzdGF0ZTtcbiAgICBsZXQgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gbGVhdmluZ1ZOb2Rlcy5nZXQodm5vZGUudHlwZSk7XG4gICAgaWYgKCFsZWF2aW5nVk5vZGVzQ2FjaGUpIHtcbiAgICAgICAgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgbGVhdmluZ1ZOb2Rlcy5zZXQodm5vZGUudHlwZSwgbGVhdmluZ1ZOb2Rlc0NhY2hlKTtcbiAgICB9XG4gICAgcmV0dXJuIGxlYXZpbmdWTm9kZXNDYWNoZTtcbn1cbi8vIFRoZSB0cmFuc2l0aW9uIGhvb2tzIGFyZSBhdHRhY2hlZCB0byB0aGUgdm5vZGUgYXMgdm5vZGUudHJhbnNpdGlvblxuLy8gYW5kIHdpbGwgYmUgY2FsbGVkIGF0IGFwcHJvcHJpYXRlIHRpbWluZyBpbiB0aGUgcmVuZGVyZXIuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKHZub2RlLCBwcm9wcywgc3RhdGUsIGluc3RhbmNlKSB7XG4gICAgY29uc3QgeyBhcHBlYXIsIG1vZGUsIHBlcnNpc3RlZCA9IGZhbHNlLCBvbkJlZm9yZUVudGVyLCBvbkVudGVyLCBvbkFmdGVyRW50ZXIsIG9uRW50ZXJDYW5jZWxsZWQsIG9uQmVmb3JlTGVhdmUsIG9uTGVhdmUsIG9uQWZ0ZXJMZWF2ZSwgb25MZWF2ZUNhbmNlbGxlZCwgb25CZWZvcmVBcHBlYXIsIG9uQXBwZWFyLCBvbkFmdGVyQXBwZWFyLCBvbkFwcGVhckNhbmNlbGxlZCB9ID0gcHJvcHM7XG4gICAgY29uc3Qga2V5ID0gU3RyaW5nKHZub2RlLmtleSk7XG4gICAgY29uc3QgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gZ2V0TGVhdmluZ05vZGVzRm9yVHlwZShzdGF0ZSwgdm5vZGUpO1xuICAgIGNvbnN0IGNhbGxIb29rID0gKGhvb2ssIGFyZ3MpID0+IHtcbiAgICAgICAgaG9vayAmJlxuICAgICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgaW5zdGFuY2UsIDkgLyogRXJyb3JDb2Rlcy5UUkFOU0lUSU9OX0hPT0sgKi8sIGFyZ3MpO1xuICAgIH07XG4gICAgY29uc3QgY2FsbEFzeW5jSG9vayA9IChob29rLCBhcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IGRvbmUgPSBhcmdzWzFdO1xuICAgICAgICBjYWxsSG9vayhob29rLCBhcmdzKTtcbiAgICAgICAgaWYgKGlzQXJyYXkoaG9vaykpIHtcbiAgICAgICAgICAgIGlmIChob29rLmV2ZXJ5KGhvb2sgPT4gaG9vay5sZW5ndGggPD0gMSkpXG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhvb2subGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaG9va3MgPSB7XG4gICAgICAgIG1vZGUsXG4gICAgICAgIHBlcnNpc3RlZCxcbiAgICAgICAgYmVmb3JlRW50ZXIoZWwpIHtcbiAgICAgICAgICAgIGxldCBob29rID0gb25CZWZvcmVFbnRlcjtcbiAgICAgICAgICAgIGlmICghc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICAgICAgICAgICAgICBob29rID0gb25CZWZvcmVBcHBlYXIgfHwgb25CZWZvcmVFbnRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmb3Igc2FtZSBlbGVtZW50ICh2LXNob3cpXG4gICAgICAgICAgICBpZiAoZWwuX2xlYXZlQ2IpIHtcbiAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYih0cnVlIC8qIGNhbmNlbGxlZCAqLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmb3IgdG9nZ2xlZCBlbGVtZW50IHdpdGggc2FtZSBrZXkgKHYtaWYpXG4gICAgICAgICAgICBjb25zdCBsZWF2aW5nVk5vZGUgPSBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XTtcbiAgICAgICAgICAgIGlmIChsZWF2aW5nVk5vZGUgJiZcbiAgICAgICAgICAgICAgICBpc1NhbWVWTm9kZVR5cGUodm5vZGUsIGxlYXZpbmdWTm9kZSkgJiZcbiAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGUuZWwuX2xlYXZlQ2IpIHtcbiAgICAgICAgICAgICAgICAvLyBmb3JjZSBlYXJseSByZW1vdmFsIChub3QgY2FuY2VsbGVkKVxuICAgICAgICAgICAgICAgIGxlYXZpbmdWTm9kZS5lbC5fbGVhdmVDYigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbEhvb2soaG9vaywgW2VsXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudGVyKGVsKSB7XG4gICAgICAgICAgICBsZXQgaG9vayA9IG9uRW50ZXI7XG4gICAgICAgICAgICBsZXQgYWZ0ZXJIb29rID0gb25BZnRlckVudGVyO1xuICAgICAgICAgICAgbGV0IGNhbmNlbEhvb2sgPSBvbkVudGVyQ2FuY2VsbGVkO1xuICAgICAgICAgICAgaWYgKCFzdGF0ZS5pc01vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvb2sgPSBvbkFwcGVhciB8fCBvbkVudGVyO1xuICAgICAgICAgICAgICAgICAgICBhZnRlckhvb2sgPSBvbkFmdGVyQXBwZWFyIHx8IG9uQWZ0ZXJFbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsSG9vayA9IG9uQXBwZWFyQ2FuY2VsbGVkIHx8IG9uRW50ZXJDYW5jZWxsZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgZG9uZSA9IChlbC5fZW50ZXJDYiA9IChjYW5jZWxsZWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGVkKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKGNhbmNlbEhvb2ssIFtlbF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbEhvb2soYWZ0ZXJIb29rLCBbZWxdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGhvb2tzLmRlbGF5ZWRMZWF2ZSkge1xuICAgICAgICAgICAgICAgICAgICBob29rcy5kZWxheWVkTGVhdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWwuX2VudGVyQ2IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChob29rKSB7XG4gICAgICAgICAgICAgICAgY2FsbEFzeW5jSG9vayhob29rLCBbZWwsIGRvbmVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGVhdmUoZWwsIHJlbW92ZSkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gU3RyaW5nKHZub2RlLmtleSk7XG4gICAgICAgICAgICBpZiAoZWwuX2VudGVyQ2IpIHtcbiAgICAgICAgICAgICAgICBlbC5fZW50ZXJDYih0cnVlIC8qIGNhbmNlbGxlZCAqLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNVbm1vdW50aW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbEhvb2sob25CZWZvcmVMZWF2ZSwgW2VsXSk7XG4gICAgICAgICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBkb25lID0gKGVsLl9sZWF2ZUNiID0gKGNhbmNlbGxlZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjYWxsZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbEhvb2sob25MZWF2ZUNhbmNlbGxlZCwgW2VsXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYWxsSG9vayhvbkFmdGVyTGVhdmUsIFtlbF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAobGVhdmluZ1ZOb2Rlc0NhY2hlW2tleV0gPT09IHZub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxlYXZpbmdWTm9kZXNDYWNoZVtrZXldID0gdm5vZGU7XG4gICAgICAgICAgICBpZiAob25MZWF2ZSkge1xuICAgICAgICAgICAgICAgIGNhbGxBc3luY0hvb2sob25MZWF2ZSwgW2VsLCBkb25lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb25lKHZub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBob29rcztcbn1cbi8vIHRoZSBwbGFjZWhvbGRlciByZWFsbHkgb25seSBoYW5kbGVzIG9uZSBzcGVjaWFsIGNhc2U6IEtlZXBBbGl2ZVxuLy8gaW4gdGhlIGNhc2Ugb2YgYSBLZWVwQWxpdmUgaW4gYSBsZWF2ZSBwaGFzZSB3ZSBuZWVkIHRvIHJldHVybiBhIEtlZXBBbGl2ZVxuLy8gcGxhY2Vob2xkZXIgd2l0aCBlbXB0eSBjb250ZW50IHRvIGF2b2lkIHRoZSBLZWVwQWxpdmUgaW5zdGFuY2UgZnJvbSBiZWluZ1xuLy8gdW5tb3VudGVkLlxuZnVuY3Rpb24gZW1wdHlQbGFjZWhvbGRlcih2bm9kZSkge1xuICAgIGlmIChpc0tlZXBBbGl2ZSh2bm9kZSkpIHtcbiAgICAgICAgdm5vZGUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4gPSBudWxsO1xuICAgICAgICByZXR1cm4gdm5vZGU7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0S2VlcEFsaXZlQ2hpbGQodm5vZGUpIHtcbiAgICByZXR1cm4gaXNLZWVwQWxpdmUodm5vZGUpXG4gICAgICAgID8gdm5vZGUuY2hpbGRyZW5cbiAgICAgICAgICAgID8gdm5vZGUuY2hpbGRyZW5bMF1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgIDogdm5vZGU7XG59XG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUsIGhvb2tzKSB7XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDYgLyogU2hhcGVGbGFncy5DT01QT05FTlQgKi8gJiYgdm5vZGUuY29tcG9uZW50KSB7XG4gICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyh2bm9kZS5jb21wb25lbnQuc3ViVHJlZSwgaG9va3MpO1xuICAgIH1cbiAgICBlbHNlIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqLykge1xuICAgICAgICB2bm9kZS5zc0NvbnRlbnQudHJhbnNpdGlvbiA9IGhvb2tzLmNsb25lKHZub2RlLnNzQ29udGVudCk7XG4gICAgICAgIHZub2RlLnNzRmFsbGJhY2sudHJhbnNpdGlvbiA9IGhvb2tzLmNsb25lKHZub2RlLnNzRmFsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdm5vZGUudHJhbnNpdGlvbiA9IGhvb2tzO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihjaGlsZHJlbiwga2VlcENvbW1lbnQgPSBmYWxzZSwgcGFyZW50S2V5KSB7XG4gICAgbGV0IHJldCA9IFtdO1xuICAgIGxldCBrZXllZEZyYWdtZW50Q291bnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgIC8vICM1MzYwIGluaGVyaXQgcGFyZW50IGtleSBpbiBjYXNlIG9mIDx0ZW1wbGF0ZSB2LWZvcj5cbiAgICAgICAgY29uc3Qga2V5ID0gcGFyZW50S2V5ID09IG51bGxcbiAgICAgICAgICAgID8gY2hpbGQua2V5XG4gICAgICAgICAgICA6IFN0cmluZyhwYXJlbnRLZXkpICsgU3RyaW5nKGNoaWxkLmtleSAhPSBudWxsID8gY2hpbGQua2V5IDogaSk7XG4gICAgICAgIC8vIGhhbmRsZSBmcmFnbWVudCBjaGlsZHJlbiBjYXNlLCBlLmcuIHYtZm9yXG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhdGNoRmxhZyAmIDEyOCAvKiBQYXRjaEZsYWdzLktFWUVEX0ZSQUdNRU5UICovKVxuICAgICAgICAgICAgICAgIGtleWVkRnJhZ21lbnRDb3VudCsrO1xuICAgICAgICAgICAgcmV0ID0gcmV0LmNvbmNhdChnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGQuY2hpbGRyZW4sIGtlZXBDb21tZW50LCBrZXkpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb21tZW50IHBsYWNlaG9sZGVycyBzaG91bGQgYmUgc2tpcHBlZCwgZS5nLiB2LWlmXG4gICAgICAgIGVsc2UgaWYgKGtlZXBDb21tZW50IHx8IGNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgICAgIHJldC5wdXNoKGtleSAhPSBudWxsID8gY2xvbmVWTm9kZShjaGlsZCwgeyBrZXkgfSkgOiBjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gIzExMjYgaWYgYSB0cmFuc2l0aW9uIGNoaWxkcmVuIGxpc3QgY29udGFpbnMgbXVsdGlwbGUgc3ViIGZyYWdtZW50cywgdGhlc2VcbiAgICAvLyBmcmFnbWVudHMgd2lsbCBiZSBtZXJnZWQgaW50byBhIGZsYXQgY2hpbGRyZW4gYXJyYXkuIFNpbmNlIGVhY2ggdi1mb3JcbiAgICAvLyBmcmFnbWVudCBtYXkgY29udGFpbiBkaWZmZXJlbnQgc3RhdGljIGJpbmRpbmdzIGluc2lkZSwgd2UgbmVlZCB0byBkZS1vcFxuICAgIC8vIHRoZXNlIGNoaWxkcmVuIHRvIGZvcmNlIGZ1bGwgZGlmZnMgdG8gZW5zdXJlIGNvcnJlY3QgYmVoYXZpb3IuXG4gICAgaWYgKGtleWVkRnJhZ21lbnRDb3VudCA+IDEpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJldFtpXS5wYXRjaEZsYWcgPSAtMiAvKiBQYXRjaEZsYWdzLkJBSUwgKi87XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxuLy8gaW1wbGVtZW50YXRpb24sIGNsb3NlIHRvIG5vLW9wXG5mdW5jdGlvbiBkZWZpbmVDb21wb25lbnQob3B0aW9ucykge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKG9wdGlvbnMpID8geyBzZXR1cDogb3B0aW9ucywgbmFtZTogb3B0aW9ucy5uYW1lIH0gOiBvcHRpb25zO1xufVxuXG5jb25zdCBpc0FzeW5jV3JhcHBlciA9IChpKSA9PiAhIWkudHlwZS5fX2FzeW5jTG9hZGVyO1xuZnVuY3Rpb24gZGVmaW5lQXN5bmNDb21wb25lbnQoc291cmNlKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oc291cmNlKSkge1xuICAgICAgICBzb3VyY2UgPSB7IGxvYWRlcjogc291cmNlIH07XG4gICAgfVxuICAgIGNvbnN0IHsgbG9hZGVyLCBsb2FkaW5nQ29tcG9uZW50LCBlcnJvckNvbXBvbmVudCwgZGVsYXkgPSAyMDAsIHRpbWVvdXQsIC8vIHVuZGVmaW5lZCA9IG5ldmVyIHRpbWVzIG91dFxuICAgIHN1c3BlbnNpYmxlID0gdHJ1ZSwgb25FcnJvcjogdXNlck9uRXJyb3IgfSA9IHNvdXJjZTtcbiAgICBsZXQgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xuICAgIGxldCByZXNvbHZlZENvbXA7XG4gICAgbGV0IHJldHJpZXMgPSAwO1xuICAgIGNvbnN0IHJldHJ5ID0gKCkgPT4ge1xuICAgICAgICByZXRyaWVzKys7XG4gICAgICAgIHBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGxvYWQoKTtcbiAgICB9O1xuICAgIGNvbnN0IGxvYWQgPSAoKSA9PiB7XG4gICAgICAgIGxldCB0aGlzUmVxdWVzdDtcbiAgICAgICAgcmV0dXJuIChwZW5kaW5nUmVxdWVzdCB8fFxuICAgICAgICAgICAgKHRoaXNSZXF1ZXN0ID0gcGVuZGluZ1JlcXVlc3QgPVxuICAgICAgICAgICAgICAgIGxvYWRlcigpXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlcnIgPSBlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyciA6IG5ldyBFcnJvcihTdHJpbmcoZXJyKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VyT25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VyUmV0cnkgPSAoKSA9PiByZXNvbHZlKHJldHJ5KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJGYWlsID0gKCkgPT4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck9uRXJyb3IoZXJyLCB1c2VyUmV0cnksIHVzZXJGYWlsLCByZXRyaWVzICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChjb21wKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzUmVxdWVzdCAhPT0gcGVuZGluZ1JlcXVlc3QgJiYgcGVuZGluZ1JlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwZW5kaW5nUmVxdWVzdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFjb21wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBBc3luYyBjb21wb25lbnQgbG9hZGVyIHJlc29sdmVkIHRvIHVuZGVmaW5lZC4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYElmIHlvdSBhcmUgdXNpbmcgcmV0cnkoKSwgbWFrZSBzdXJlIHRvIHJldHVybiBpdHMgcmV0dXJuIHZhbHVlLmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGludGVyb3AgbW9kdWxlIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChjb21wLl9fZXNNb2R1bGUgfHwgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjb21wICYmICFpc09iamVjdChjb21wKSAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGFzeW5jIGNvbXBvbmVudCBsb2FkIHJlc3VsdDogJHtjb21wfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkQ29tcCA9IGNvbXA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wO1xuICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgfTtcbiAgICByZXR1cm4gZGVmaW5lQ29tcG9uZW50KHtcbiAgICAgICAgbmFtZTogJ0FzeW5jQ29tcG9uZW50V3JhcHBlcicsXG4gICAgICAgIF9fYXN5bmNMb2FkZXI6IGxvYWQsXG4gICAgICAgIGdldCBfX2FzeW5jUmVzb2x2ZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRDb21wO1xuICAgICAgICB9LFxuICAgICAgICBzZXR1cCgpIHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlO1xuICAgICAgICAgICAgLy8gYWxyZWFkeSByZXNvbHZlZFxuICAgICAgICAgICAgaWYgKHJlc29sdmVkQ29tcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBjcmVhdGVJbm5lckNvbXAocmVzb2x2ZWRDb21wLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvbkVycm9yID0gKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCAxMyAvKiBFcnJvckNvZGVzLkFTWU5DX0NPTVBPTkVOVF9MT0FERVIgKi8sICFlcnJvckNvbXBvbmVudCAvKiBkbyBub3QgdGhyb3cgaW4gZGV2IGlmIHVzZXIgcHJvdmlkZWQgZXJyb3IgY29tcG9uZW50ICovKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBzdXNwZW5zZS1jb250cm9sbGVkIG9yIFNTUi5cbiAgICAgICAgICAgIGlmICgoc3VzcGVuc2libGUgJiYgaW5zdGFuY2Uuc3VzcGVuc2UpIHx8XG4gICAgICAgICAgICAgICAgKGlzSW5TU1JDb21wb25lbnRTZXR1cCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZCgpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGNvbXAgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKGNvbXAsIGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gZXJyb3JDb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY3JlYXRlVk5vZGUoZXJyb3JDb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9hZGVkID0gcmVmKGZhbHNlKTtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gcmVmKCk7XG4gICAgICAgICAgICBjb25zdCBkZWxheWVkID0gcmVmKCEhZGVsYXkpO1xuICAgICAgICAgICAgaWYgKGRlbGF5KSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGF5ZWQudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbG9hZGVkLnZhbHVlICYmICFlcnJvci52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKGBBc3luYyBjb21wb25lbnQgdGltZWQgb3V0IGFmdGVyICR7dGltZW91dH1tcy5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2FkKClcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgbG9hZGVkLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UucGFyZW50ICYmIGlzS2VlcEFsaXZlKGluc3RhbmNlLnBhcmVudC52bm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFyZW50IGlzIGtlZXAtYWxpdmUsIGZvcmNlIHVwZGF0ZSBzbyB0aGUgbG9hZGVkIGNvbXBvbmVudCdzXG4gICAgICAgICAgICAgICAgICAgIC8vIG5hbWUgaXMgdGFrZW4gaW50byBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlSm9iKGluc3RhbmNlLnBhcmVudC51cGRhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChsb2FkZWQudmFsdWUgJiYgcmVzb2x2ZWRDb21wKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbm5lckNvbXAocmVzb2x2ZWRDb21wLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVycm9yLnZhbHVlICYmIGVycm9yQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShlcnJvckNvbXBvbmVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChsb2FkaW5nQ29tcG9uZW50ICYmICFkZWxheWVkLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShsb2FkaW5nQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVJbm5lckNvbXAoY29tcCwgeyB2bm9kZTogeyByZWYsIHByb3BzLCBjaGlsZHJlbiwgc2hhcGVGbGFnIH0sIHBhcmVudCB9KSB7XG4gICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShjb21wLCBwcm9wcywgY2hpbGRyZW4pO1xuICAgIC8vIGVuc3VyZSBpbm5lciBjb21wb25lbnQgaW5oZXJpdHMgdGhlIGFzeW5jIHdyYXBwZXIncyByZWYgb3duZXJcbiAgICB2bm9kZS5yZWYgPSByZWY7XG4gICAgcmV0dXJuIHZub2RlO1xufVxuXG5jb25zdCBpc0tlZXBBbGl2ZSA9ICh2bm9kZSkgPT4gdm5vZGUudHlwZS5fX2lzS2VlcEFsaXZlO1xuY29uc3QgS2VlcEFsaXZlSW1wbCA9IHtcbiAgICBuYW1lOiBgS2VlcEFsaXZlYCxcbiAgICAvLyBNYXJrZXIgZm9yIHNwZWNpYWwgaGFuZGxpbmcgaW5zaWRlIHRoZSByZW5kZXJlci4gV2UgYXJlIG5vdCB1c2luZyBhID09PVxuICAgIC8vIGNoZWNrIGRpcmVjdGx5IG9uIEtlZXBBbGl2ZSBpbiB0aGUgcmVuZGVyZXIsIGJlY2F1c2UgaW1wb3J0aW5nIGl0IGRpcmVjdGx5XG4gICAgLy8gd291bGQgcHJldmVudCBpdCBmcm9tIGJlaW5nIHRyZWUtc2hha2VuLlxuICAgIF9faXNLZWVwQWxpdmU6IHRydWUsXG4gICAgcHJvcHM6IHtcbiAgICAgICAgaW5jbHVkZTogW1N0cmluZywgUmVnRXhwLCBBcnJheV0sXG4gICAgICAgIGV4Y2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxuICAgICAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl1cbiAgICB9LFxuICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgLy8gS2VlcEFsaXZlIGNvbW11bmljYXRlcyB3aXRoIHRoZSBpbnN0YW50aWF0ZWQgcmVuZGVyZXIgdmlhIHRoZVxuICAgICAgICAvLyBjdHggd2hlcmUgdGhlIHJlbmRlcmVyIHBhc3NlcyBpbiBpdHMgaW50ZXJuYWxzLFxuICAgICAgICAvLyBhbmQgdGhlIEtlZXBBbGl2ZSBpbnN0YW5jZSBleHBvc2VzIGFjdGl2YXRlL2RlYWN0aXZhdGUgaW1wbGVtZW50YXRpb25zLlxuICAgICAgICAvLyBUaGUgd2hvbGUgcG9pbnQgb2YgdGhpcyBpcyB0byBhdm9pZCBpbXBvcnRpbmcgS2VlcEFsaXZlIGRpcmVjdGx5IGluIHRoZVxuICAgICAgICAvLyByZW5kZXJlciB0byBmYWNpbGl0YXRlIHRyZWUtc2hha2luZy5cbiAgICAgICAgY29uc3Qgc2hhcmVkQ29udGV4dCA9IGluc3RhbmNlLmN0eDtcbiAgICAgICAgLy8gaWYgdGhlIGludGVybmFsIHJlbmRlcmVyIGlzIG5vdCByZWdpc3RlcmVkLCBpdCBpbmRpY2F0ZXMgdGhhdCB0aGlzIGlzIHNlcnZlci1zaWRlIHJlbmRlcmluZyxcbiAgICAgICAgLy8gZm9yIEtlZXBBbGl2ZSwgd2UganVzdCBuZWVkIHRvIHJlbmRlciBpdHMgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFzaGFyZWRDb250ZXh0LnJlbmRlcmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25zdCBrZXlzID0gbmV3IFNldCgpO1xuICAgICAgICBsZXQgY3VycmVudCA9IG51bGw7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5fX3ZfY2FjaGUgPSBjYWNoZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJlbnRTdXNwZW5zZSA9IGluc3RhbmNlLnN1c3BlbnNlO1xuICAgICAgICBjb25zdCB7IHJlbmRlcmVyOiB7IHA6IHBhdGNoLCBtOiBtb3ZlLCB1bTogX3VubW91bnQsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0gfSA9IHNoYXJlZENvbnRleHQ7XG4gICAgICAgIGNvbnN0IHN0b3JhZ2VDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgc2hhcmVkQ29udGV4dC5hY3RpdmF0ZSA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50O1xuICAgICAgICAgICAgbW92ZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIDAgLyogTW92ZVR5cGUuRU5URVIgKi8sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIC8vIGluIGNhc2UgcHJvcHMgaGF2ZSBjaGFuZ2VkXG4gICAgICAgICAgICBwYXRjaChpbnN0YW5jZS52bm9kZSwgdm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCB2bm9kZS5zbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLmlzRGVhY3RpdmF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuYSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5hKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZU1vdW50ZWQ7XG4gICAgICAgICAgICAgICAgaWYgKHZub2RlSG9vaykge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZS5wYXJlbnQsIHZub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBjb21wb25lbnRzIHRyZWVcbiAgICAgICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc2hhcmVkQ29udGV4dC5kZWFjdGl2YXRlID0gKHZub2RlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudDtcbiAgICAgICAgICAgIG1vdmUodm5vZGUsIHN0b3JhZ2VDb250YWluZXIsIG51bGwsIDEgLyogTW92ZVR5cGUuTEVBVkUgKi8sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGluc3RhbmNlLmRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZVVubW91bnRlZDtcbiAgICAgICAgICAgICAgICBpZiAodm5vZGVIb29rKSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIGluc3RhbmNlLnBhcmVudCwgdm5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc0RlYWN0aXZhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGNvbXBvbmVudHMgdHJlZVxuICAgICAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50QWRkZWQoaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiB1bm1vdW50KHZub2RlKSB7XG4gICAgICAgICAgICAvLyByZXNldCB0aGUgc2hhcGVGbGFnIHNvIGl0IGNhbiBiZSBwcm9wZXJseSB1bm1vdW50ZWRcbiAgICAgICAgICAgIHJlc2V0U2hhcGVGbGFnKHZub2RlKTtcbiAgICAgICAgICAgIF91bm1vdW50KHZub2RlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBydW5lQ2FjaGUoZmlsdGVyKSB7XG4gICAgICAgICAgICBjYWNoZS5mb3JFYWNoKCh2bm9kZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGdldENvbXBvbmVudE5hbWUodm5vZGUudHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgJiYgKCFmaWx0ZXIgfHwgIWZpbHRlcihuYW1lKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5KGtleSkge1xuICAgICAgICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnQgfHwgY2FjaGVkLnR5cGUgIT09IGN1cnJlbnQudHlwZSkge1xuICAgICAgICAgICAgICAgIHVubW91bnQoY2FjaGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGFjdGl2ZSBpbnN0YW5jZSBzaG91bGQgbm8gbG9uZ2VyIGJlIGtlcHQtYWxpdmUuXG4gICAgICAgICAgICAgICAgLy8gd2UgY2FuJ3QgdW5tb3VudCBpdCBub3cgYnV0IGl0IG1pZ2h0IGJlIGxhdGVyLCBzbyByZXNldCBpdHMgZmxhZyBub3cuXG4gICAgICAgICAgICAgICAgcmVzZXRTaGFwZUZsYWcoY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWNoZS5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIGtleXMuZGVsZXRlKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHJ1bmUgY2FjaGUgb24gaW5jbHVkZS9leGNsdWRlIHByb3AgY2hhbmdlXG4gICAgICAgIHdhdGNoKCgpID0+IFtwcm9wcy5pbmNsdWRlLCBwcm9wcy5leGNsdWRlXSwgKFtpbmNsdWRlLCBleGNsdWRlXSkgPT4ge1xuICAgICAgICAgICAgaW5jbHVkZSAmJiBwcnVuZUNhY2hlKG5hbWUgPT4gbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSk7XG4gICAgICAgICAgICBleGNsdWRlICYmIHBydW5lQ2FjaGUobmFtZSA9PiAhbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSk7XG4gICAgICAgIH0sIFxuICAgICAgICAvLyBwcnVuZSBwb3N0LXJlbmRlciBhZnRlciBgY3VycmVudGAgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgICB7IGZsdXNoOiAncG9zdCcsIGRlZXA6IHRydWUgfSk7XG4gICAgICAgIC8vIGNhY2hlIHN1YiB0cmVlIGFmdGVyIHJlbmRlclxuICAgICAgICBsZXQgcGVuZGluZ0NhY2hlS2V5ID0gbnVsbDtcbiAgICAgICAgY29uc3QgY2FjaGVTdWJ0cmVlID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gZml4ICMxNjIxLCB0aGUgcGVuZGluZ0NhY2hlS2V5IGNvdWxkIGJlIDBcbiAgICAgICAgICAgIGlmIChwZW5kaW5nQ2FjaGVLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNhY2hlLnNldChwZW5kaW5nQ2FjaGVLZXksIGdldElubmVyQ2hpbGQoaW5zdGFuY2Uuc3ViVHJlZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBvbk1vdW50ZWQoY2FjaGVTdWJ0cmVlKTtcbiAgICAgICAgb25VcGRhdGVkKGNhY2hlU3VidHJlZSk7XG4gICAgICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICAgICAgICBjYWNoZS5mb3JFYWNoKGNhY2hlZCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzdWJUcmVlLCBzdXNwZW5zZSB9ID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGUgPSBnZXRJbm5lckNoaWxkKHN1YlRyZWUpO1xuICAgICAgICAgICAgICAgIGlmIChjYWNoZWQudHlwZSA9PT0gdm5vZGUudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGluc3RhbmNlIHdpbGwgYmUgdW5tb3VudGVkIGFzIHBhcnQgb2Yga2VlcC1hbGl2ZSdzIHVubW91bnRcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRTaGFwZUZsYWcodm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBidXQgaW52b2tlIGl0cyBkZWFjdGl2YXRlZCBob29rIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGEgPSB2bm9kZS5jb21wb25lbnQuZGE7XG4gICAgICAgICAgICAgICAgICAgIGRhICYmIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkYSwgc3VzcGVuc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVubW91bnQoY2FjaGVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHBlbmRpbmdDYWNoZUtleSA9IG51bGw7XG4gICAgICAgICAgICBpZiAoIXNsb3RzLmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCgpO1xuICAgICAgICAgICAgY29uc3QgcmF3Vk5vZGUgPSBjaGlsZHJlblswXTtcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBLZWVwQWxpdmUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgY29tcG9uZW50IGNoaWxkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghaXNWTm9kZShyYXdWTm9kZSkgfHxcbiAgICAgICAgICAgICAgICAoIShyYXdWTm9kZS5zaGFwZUZsYWcgJiA0IC8qIFNoYXBlRmxhZ3MuU1RBVEVGVUxfQ09NUE9ORU5UICovKSAmJlxuICAgICAgICAgICAgICAgICAgICAhKHJhd1ZOb2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovKSkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdm5vZGUgPSBnZXRJbm5lckNoaWxkKHJhd1ZOb2RlKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXAgPSB2bm9kZS50eXBlO1xuICAgICAgICAgICAgLy8gZm9yIGFzeW5jIGNvbXBvbmVudHMsIG5hbWUgY2hlY2sgc2hvdWxkIGJlIGJhc2VkIGluIGl0cyBsb2FkZWRcbiAgICAgICAgICAgIC8vIGlubmVyIGNvbXBvbmVudCBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGlzQXN5bmNXcmFwcGVyKHZub2RlKVxuICAgICAgICAgICAgICAgID8gdm5vZGUudHlwZS5fX2FzeW5jUmVzb2x2ZWQgfHwge31cbiAgICAgICAgICAgICAgICA6IGNvbXApO1xuICAgICAgICAgICAgY29uc3QgeyBpbmNsdWRlLCBleGNsdWRlLCBtYXggfSA9IHByb3BzO1xuICAgICAgICAgICAgaWYgKChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgICAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB2bm9kZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbCA/IGNvbXAgOiB2bm9kZS5rZXk7XG4gICAgICAgICAgICBjb25zdCBjYWNoZWRWTm9kZSA9IGNhY2hlLmdldChrZXkpO1xuICAgICAgICAgICAgLy8gY2xvbmUgdm5vZGUgaWYgaXQncyByZXVzZWQgYmVjYXVzZSB3ZSBhcmUgZ29pbmcgdG8gbXV0YXRlIGl0XG4gICAgICAgICAgICBpZiAodm5vZGUuZWwpIHtcbiAgICAgICAgICAgICAgICB2bm9kZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChyYXdWTm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqLykge1xuICAgICAgICAgICAgICAgICAgICByYXdWTm9kZS5zc0NvbnRlbnQgPSB2bm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAjMTUxMyBpdCdzIHBvc3NpYmxlIGZvciB0aGUgcmV0dXJuZWQgdm5vZGUgdG8gYmUgY2xvbmVkIGR1ZSB0byBhdHRyXG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaCBvciBzY29wZUlkLCBzbyB0aGUgdm5vZGUgaGVyZSBtYXkgbm90IGJlIHRoZSBmaW5hbCB2bm9kZVxuICAgICAgICAgICAgLy8gdGhhdCBpcyBtb3VudGVkLiBJbnN0ZWFkIG9mIGNhY2hpbmcgaXQgZGlyZWN0bHksIHdlIHN0b3JlIHRoZSBwZW5kaW5nXG4gICAgICAgICAgICAvLyBrZXkgYW5kIGNhY2hlIGBpbnN0YW5jZS5zdWJUcmVlYCAodGhlIG5vcm1hbGl6ZWQgdm5vZGUpIGluXG4gICAgICAgICAgICAvLyBiZWZvcmVNb3VudC9iZWZvcmVVcGRhdGUgaG9va3MuXG4gICAgICAgICAgICBwZW5kaW5nQ2FjaGVLZXkgPSBrZXk7XG4gICAgICAgICAgICBpZiAoY2FjaGVkVk5vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBjb3B5IG92ZXIgbW91bnRlZCBzdGF0ZVxuICAgICAgICAgICAgICAgIHZub2RlLmVsID0gY2FjaGVkVk5vZGUuZWw7XG4gICAgICAgICAgICAgICAgdm5vZGUuY29tcG9uZW50ID0gY2FjaGVkVk5vZGUuY29tcG9uZW50O1xuICAgICAgICAgICAgICAgIGlmICh2bm9kZS50cmFuc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IHVwZGF0ZSB0cmFuc2l0aW9uIGhvb2tzIG9uIHN1YlRyZWVcbiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKHZub2RlLCB2bm9kZS50cmFuc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYXZvaWQgdm5vZGUgYmVpbmcgbW91bnRlZCBhcyBmcmVzaFxuICAgICAgICAgICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSA1MTIgLyogU2hhcGVGbGFncy5DT01QT05FTlRfS0VQVF9BTElWRSAqLztcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHRoaXMga2V5IHRoZSBmcmVzaGVzdFxuICAgICAgICAgICAgICAgIGtleXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAga2V5cy5hZGQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGtleXMuYWRkKGtleSk7XG4gICAgICAgICAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgICAgICAgICAgaWYgKG1heCAmJiBrZXlzLnNpemUgPiBwYXJzZUludChtYXgsIDEwKSkge1xuICAgICAgICAgICAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoa2V5cy52YWx1ZXMoKS5uZXh0KCkudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGF2b2lkIHZub2RlIGJlaW5nIHVubW91bnRlZFxuICAgICAgICAgICAgdm5vZGUuc2hhcGVGbGFnIHw9IDI1NiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLztcbiAgICAgICAgICAgIGN1cnJlbnQgPSB2bm9kZTtcbiAgICAgICAgICAgIHJldHVybiBpc1N1c3BlbnNlKHJhd1ZOb2RlLnR5cGUpID8gcmF3Vk5vZGUgOiB2bm9kZTtcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXG4vLyBhbHNvIHRvIGF2b2lkIGlubGluZSBpbXBvcnQoKSBpbiBnZW5lcmF0ZWQgZC50cyBmaWxlc1xuY29uc3QgS2VlcEFsaXZlID0gS2VlcEFsaXZlSW1wbDtcbmZ1bmN0aW9uIG1hdGNoZXMocGF0dGVybiwgbmFtZSkge1xuICAgIGlmIChpc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnNvbWUoKHApID0+IG1hdGNoZXMocCwgbmFtZSkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1N0cmluZyhwYXR0ZXJuKSkge1xuICAgICAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluY2x1ZGVzKG5hbWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChwYXR0ZXJuLnRlc3QpIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBvbkFjdGl2YXRlZChob29rLCB0YXJnZXQpIHtcbiAgICByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgXCJhXCIgLyogTGlmZWN5Y2xlSG9va3MuQUNUSVZBVEVEICovLCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gb25EZWFjdGl2YXRlZChob29rLCB0YXJnZXQpIHtcbiAgICByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgXCJkYVwiIC8qIExpZmVjeWNsZUhvb2tzLkRFQUNUSVZBVEVEICovLCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIHR5cGUsIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xuICAgIC8vIGNhY2hlIHRoZSBkZWFjdGl2YXRlIGJyYW5jaCBjaGVjayB3cmFwcGVyIGZvciBpbmplY3RlZCBob29rcyBzbyB0aGUgc2FtZVxuICAgIC8vIGhvb2sgY2FuIGJlIHByb3Blcmx5IGRlZHVwZWQgYnkgdGhlIHNjaGVkdWxlci4gXCJfX3dkY1wiIHN0YW5kcyBmb3IgXCJ3aXRoXG4gICAgLy8gZGVhY3RpdmF0aW9uIGNoZWNrXCIuXG4gICAgY29uc3Qgd3JhcHBlZEhvb2sgPSBob29rLl9fd2RjIHx8XG4gICAgICAgIChob29rLl9fd2RjID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gb25seSBmaXJlIHRoZSBob29rIGlmIHRoZSB0YXJnZXQgaW5zdGFuY2UgaXMgTk9UIGluIGEgZGVhY3RpdmF0ZWQgYnJhbmNoLlxuICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmlzRGVhY3RpdmF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaG9vaygpO1xuICAgICAgICB9KTtcbiAgICBpbmplY3RIb29rKHR5cGUsIHdyYXBwZWRIb29rLCB0YXJnZXQpO1xuICAgIC8vIEluIGFkZGl0aW9uIHRvIHJlZ2lzdGVyaW5nIGl0IG9uIHRoZSB0YXJnZXQgaW5zdGFuY2UsIHdlIHdhbGsgdXAgdGhlIHBhcmVudFxuICAgIC8vIGNoYWluIGFuZCByZWdpc3RlciBpdCBvbiBhbGwgYW5jZXN0b3IgaW5zdGFuY2VzIHRoYXQgYXJlIGtlZXAtYWxpdmUgcm9vdHMuXG4gICAgLy8gVGhpcyBhdm9pZHMgdGhlIG5lZWQgdG8gd2FsayB0aGUgZW50aXJlIGNvbXBvbmVudCB0cmVlIHdoZW4gaW52b2tpbmcgdGhlc2VcbiAgICAvLyBob29rcywgYW5kIG1vcmUgaW1wb3J0YW50bHksIGF2b2lkcyB0aGUgbmVlZCB0byB0cmFjayBjaGlsZCBjb21wb25lbnRzIGluXG4gICAgLy8gYXJyYXlzLlxuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0YXJnZXQucGFyZW50O1xuICAgICAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50LnBhcmVudCkge1xuICAgICAgICAgICAgaWYgKGlzS2VlcEFsaXZlKGN1cnJlbnQucGFyZW50LnZub2RlKSkge1xuICAgICAgICAgICAgICAgIGluamVjdFRvS2VlcEFsaXZlUm9vdCh3cmFwcGVkSG9vaywgdHlwZSwgdGFyZ2V0LCBjdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGluamVjdFRvS2VlcEFsaXZlUm9vdChob29rLCB0eXBlLCB0YXJnZXQsIGtlZXBBbGl2ZVJvb3QpIHtcbiAgICAvLyBpbmplY3RIb29rIHdyYXBzIHRoZSBvcmlnaW5hbCBmb3IgZXJyb3IgaGFuZGxpbmcsIHNvIG1ha2Ugc3VyZSB0byByZW1vdmVcbiAgICAvLyB0aGUgd3JhcHBlZCB2ZXJzaW9uLlxuICAgIGNvbnN0IGluamVjdGVkID0gaW5qZWN0SG9vayh0eXBlLCBob29rLCBrZWVwQWxpdmVSb290LCB0cnVlIC8qIHByZXBlbmQgKi8pO1xuICAgIG9uVW5tb3VudGVkKCgpID0+IHtcbiAgICAgICAgcmVtb3ZlKGtlZXBBbGl2ZVJvb3RbdHlwZV0sIGluamVjdGVkKTtcbiAgICB9LCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gcmVzZXRTaGFwZUZsYWcodm5vZGUpIHtcbiAgICBsZXQgc2hhcGVGbGFnID0gdm5vZGUuc2hhcGVGbGFnO1xuICAgIGlmIChzaGFwZUZsYWcgJiAyNTYgLyogU2hhcGVGbGFncy5DT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi8pIHtcbiAgICAgICAgc2hhcGVGbGFnIC09IDI1NiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLztcbiAgICB9XG4gICAgaWYgKHNoYXBlRmxhZyAmIDUxMiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVF9LRVBUX0FMSVZFICovKSB7XG4gICAgICAgIHNoYXBlRmxhZyAtPSA1MTIgLyogU2hhcGVGbGFncy5DT01QT05FTlRfS0VQVF9BTElWRSAqLztcbiAgICB9XG4gICAgdm5vZGUuc2hhcGVGbGFnID0gc2hhcGVGbGFnO1xufVxuZnVuY3Rpb24gZ2V0SW5uZXJDaGlsZCh2bm9kZSkge1xuICAgIHJldHVybiB2bm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqLyA/IHZub2RlLnNzQ29udGVudCA6IHZub2RlO1xufVxuXG5mdW5jdGlvbiBpbmplY3RIb29rKHR5cGUsIGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSwgcHJlcGVuZCA9IGZhbHNlKSB7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgICBjb25zdCBob29rcyA9IHRhcmdldFt0eXBlXSB8fCAodGFyZ2V0W3R5cGVdID0gW10pO1xuICAgICAgICAvLyBjYWNoZSB0aGUgZXJyb3IgaGFuZGxpbmcgd3JhcHBlciBmb3IgaW5qZWN0ZWQgaG9va3Mgc28gdGhlIHNhbWUgaG9va1xuICAgICAgICAvLyBjYW4gYmUgcHJvcGVybHkgZGVkdXBlZCBieSB0aGUgc2NoZWR1bGVyLiBcIl9fd2VoXCIgc3RhbmRzIGZvciBcIndpdGggZXJyb3JcbiAgICAgICAgLy8gaGFuZGxpbmdcIi5cbiAgICAgICAgY29uc3Qgd3JhcHBlZEhvb2sgPSBob29rLl9fd2VoIHx8XG4gICAgICAgICAgICAoaG9vay5fX3dlaCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5pc1VubW91bnRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGRpc2FibGUgdHJhY2tpbmcgaW5zaWRlIGFsbCBsaWZlY3ljbGUgaG9va3NcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGV5IGNhbiBwb3RlbnRpYWxseSBiZSBjYWxsZWQgaW5zaWRlIGVmZmVjdHMuXG4gICAgICAgICAgICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgICAgICAgICAgIC8vIFNldCBjdXJyZW50SW5zdGFuY2UgZHVyaW5nIGhvb2sgaW52b2NhdGlvbi5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGFzc3VtZXMgdGhlIGhvb2sgZG9lcyBub3Qgc3luY2hyb25vdXNseSB0cmlnZ2VyIG90aGVyIGhvb2tzLCB3aGljaFxuICAgICAgICAgICAgICAgIC8vIGNhbiBvbmx5IGJlIGZhbHNlIHdoZW4gdGhlIHVzZXIgZG9lcyBzb21ldGhpbmcgcmVhbGx5IGZ1bmt5LlxuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZSh0YXJnZXQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIHRhcmdldCwgdHlwZSwgYXJncyk7XG4gICAgICAgICAgICAgICAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBpZiAocHJlcGVuZCkge1xuICAgICAgICAgICAgaG9va3MudW5zaGlmdCh3cmFwcGVkSG9vayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBob29rcy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JhcHBlZEhvb2s7XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBjb25zdCBhcGlOYW1lID0gdG9IYW5kbGVyS2V5KEVycm9yVHlwZVN0cmluZ3NbdHlwZV0ucmVwbGFjZSgvIGhvb2skLywgJycpKTtcbiAgICAgICAgd2FybihgJHthcGlOYW1lfSBpcyBjYWxsZWQgd2hlbiB0aGVyZSBpcyBubyBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlIHRvIGJlIGAgK1xuICAgICAgICAgICAgYGFzc29jaWF0ZWQgd2l0aC4gYCArXG4gICAgICAgICAgICBgTGlmZWN5Y2xlIGluamVjdGlvbiBBUElzIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGV4ZWN1dGlvbiBvZiBzZXR1cCgpLmAgK1xuICAgICAgICAgICAgKGAgSWYgeW91IGFyZSB1c2luZyBhc3luYyBzZXR1cCgpLCBtYWtlIHN1cmUgdG8gcmVnaXN0ZXIgbGlmZWN5Y2xlIGAgK1xuICAgICAgICAgICAgICAgICAgICBgaG9va3MgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdCBzdGF0ZW1lbnQuYFxuICAgICAgICAgICAgICAgICkpO1xuICAgIH1cbn1cbmNvbnN0IGNyZWF0ZUhvb2sgPSAobGlmZWN5Y2xlKSA9PiAoaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSA9PiBcbi8vIHBvc3QtY3JlYXRlIGxpZmVjeWNsZSByZWdpc3RyYXRpb25zIGFyZSBub29wcyBkdXJpbmcgU1NSIChleGNlcHQgZm9yIHNlcnZlclByZWZldGNoKVxuKCFpc0luU1NSQ29tcG9uZW50U2V0dXAgfHwgbGlmZWN5Y2xlID09PSBcInNwXCIgLyogTGlmZWN5Y2xlSG9va3MuU0VSVkVSX1BSRUZFVENIICovKSAmJlxuICAgIGluamVjdEhvb2sobGlmZWN5Y2xlLCAoLi4uYXJncykgPT4gaG9vayguLi5hcmdzKSwgdGFyZ2V0KTtcbmNvbnN0IG9uQmVmb3JlTW91bnQgPSBjcmVhdGVIb29rKFwiYm1cIiAvKiBMaWZlY3ljbGVIb29rcy5CRUZPUkVfTU9VTlQgKi8pO1xuY29uc3Qgb25Nb3VudGVkID0gY3JlYXRlSG9vayhcIm1cIiAvKiBMaWZlY3ljbGVIb29rcy5NT1VOVEVEICovKTtcbmNvbnN0IG9uQmVmb3JlVXBkYXRlID0gY3JlYXRlSG9vayhcImJ1XCIgLyogTGlmZWN5Y2xlSG9va3MuQkVGT1JFX1VQREFURSAqLyk7XG5jb25zdCBvblVwZGF0ZWQgPSBjcmVhdGVIb29rKFwidVwiIC8qIExpZmVjeWNsZUhvb2tzLlVQREFURUQgKi8pO1xuY29uc3Qgb25CZWZvcmVVbm1vdW50ID0gY3JlYXRlSG9vayhcImJ1bVwiIC8qIExpZmVjeWNsZUhvb2tzLkJFRk9SRV9VTk1PVU5UICovKTtcbmNvbnN0IG9uVW5tb3VudGVkID0gY3JlYXRlSG9vayhcInVtXCIgLyogTGlmZWN5Y2xlSG9va3MuVU5NT1VOVEVEICovKTtcbmNvbnN0IG9uU2VydmVyUHJlZmV0Y2ggPSBjcmVhdGVIb29rKFwic3BcIiAvKiBMaWZlY3ljbGVIb29rcy5TRVJWRVJfUFJFRkVUQ0ggKi8pO1xuY29uc3Qgb25SZW5kZXJUcmlnZ2VyZWQgPSBjcmVhdGVIb29rKFwicnRnXCIgLyogTGlmZWN5Y2xlSG9va3MuUkVOREVSX1RSSUdHRVJFRCAqLyk7XG5jb25zdCBvblJlbmRlclRyYWNrZWQgPSBjcmVhdGVIb29rKFwicnRjXCIgLyogTGlmZWN5Y2xlSG9va3MuUkVOREVSX1RSQUNLRUQgKi8pO1xuZnVuY3Rpb24gb25FcnJvckNhcHR1cmVkKGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xuICAgIGluamVjdEhvb2soXCJlY1wiIC8qIExpZmVjeWNsZUhvb2tzLkVSUk9SX0NBUFRVUkVEICovLCBob29rLCB0YXJnZXQpO1xufVxuXG4vKipcblJ1bnRpbWUgaGVscGVyIGZvciBhcHBseWluZyBkaXJlY3RpdmVzIHRvIGEgdm5vZGUuIEV4YW1wbGUgdXNhZ2U6XG5cbmNvbnN0IGNvbXAgPSByZXNvbHZlQ29tcG9uZW50KCdjb21wJylcbmNvbnN0IGZvbyA9IHJlc29sdmVEaXJlY3RpdmUoJ2ZvbycpXG5jb25zdCBiYXIgPSByZXNvbHZlRGlyZWN0aXZlKCdiYXInKVxuXG5yZXR1cm4gd2l0aERpcmVjdGl2ZXMoaChjb21wKSwgW1xuICBbZm9vLCB0aGlzLnhdLFxuICBbYmFyLCB0aGlzLnldXG5dKVxuKi9cbmZ1bmN0aW9uIHZhbGlkYXRlRGlyZWN0aXZlTmFtZShuYW1lKSB7XG4gICAgaWYgKGlzQnVpbHRJbkRpcmVjdGl2ZShuYW1lKSkge1xuICAgICAgICB3YXJuKCdEbyBub3QgdXNlIGJ1aWx0LWluIGRpcmVjdGl2ZSBpZHMgYXMgY3VzdG9tIGRpcmVjdGl2ZSBpZDogJyArIG5hbWUpO1xuICAgIH1cbn1cbi8qKlxuICogQWRkcyBkaXJlY3RpdmVzIHRvIGEgVk5vZGUuXG4gKi9cbmZ1bmN0aW9uIHdpdGhEaXJlY3RpdmVzKHZub2RlLCBkaXJlY3RpdmVzKSB7XG4gICAgY29uc3QgaW50ZXJuYWxJbnN0YW5jZSA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2Fybihgd2l0aERpcmVjdGl2ZXMgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgcmVuZGVyIGZ1bmN0aW9ucy5gKTtcbiAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgIH1cbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEV4cG9zZVByb3h5KGludGVybmFsSW5zdGFuY2UpIHx8XG4gICAgICAgIGludGVybmFsSW5zdGFuY2UucHJveHk7XG4gICAgY29uc3QgYmluZGluZ3MgPSB2bm9kZS5kaXJzIHx8ICh2bm9kZS5kaXJzID0gW10pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlyZWN0aXZlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgW2RpciwgdmFsdWUsIGFyZywgbW9kaWZpZXJzID0gRU1QVFlfT0JKXSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGRpcikpIHtcbiAgICAgICAgICAgIGRpciA9IHtcbiAgICAgICAgICAgICAgICBtb3VudGVkOiBkaXIsXG4gICAgICAgICAgICAgICAgdXBkYXRlZDogZGlyXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXIuZGVlcCkge1xuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGJpbmRpbmdzLnB1c2goe1xuICAgICAgICAgICAgZGlyLFxuICAgICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIG9sZFZhbHVlOiB2b2lkIDAsXG4gICAgICAgICAgICBhcmcsXG4gICAgICAgICAgICBtb2RpZmllcnNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZTtcbn1cbmZ1bmN0aW9uIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIHByZXZWTm9kZSwgaW5zdGFuY2UsIG5hbWUpIHtcbiAgICBjb25zdCBiaW5kaW5ncyA9IHZub2RlLmRpcnM7XG4gICAgY29uc3Qgb2xkQmluZGluZ3MgPSBwcmV2Vk5vZGUgJiYgcHJldlZOb2RlLmRpcnM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW5kaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbaV07XG4gICAgICAgIGlmIChvbGRCaW5kaW5ncykge1xuICAgICAgICAgICAgYmluZGluZy5vbGRWYWx1ZSA9IG9sZEJpbmRpbmdzW2ldLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBob29rID0gYmluZGluZy5kaXJbbmFtZV07XG4gICAgICAgIGlmIChob29rKSB7XG4gICAgICAgICAgICAvLyBkaXNhYmxlIHRyYWNraW5nIGluc2lkZSBhbGwgbGlmZWN5Y2xlIGhvb2tzXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGV5IGNhbiBwb3RlbnRpYWxseSBiZSBjYWxsZWQgaW5zaWRlIGVmZmVjdHMuXG4gICAgICAgICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgOCAvKiBFcnJvckNvZGVzLkRJUkVDVElWRV9IT09LICovLCBbXG4gICAgICAgICAgICAgICAgdm5vZGUuZWwsXG4gICAgICAgICAgICAgICAgYmluZGluZyxcbiAgICAgICAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICAgICAgICBwcmV2Vk5vZGVcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmVzZXRUcmFja2luZygpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBDT01QT05FTlRTID0gJ2NvbXBvbmVudHMnO1xuY29uc3QgRElSRUNUSVZFUyA9ICdkaXJlY3RpdmVzJztcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUNvbXBvbmVudChuYW1lLCBtYXliZVNlbGZSZWZlcmVuY2UpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KENPTVBPTkVOVFMsIG5hbWUsIHRydWUsIG1heWJlU2VsZlJlZmVyZW5jZSkgfHwgbmFtZTtcbn1cbmNvbnN0IE5VTExfRFlOQU1JQ19DT01QT05FTlQgPSBTeW1ib2woKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgaWYgKGlzU3RyaW5nKGNvbXBvbmVudCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVBc3NldChDT01QT05FTlRTLCBjb21wb25lbnQsIGZhbHNlKSB8fCBjb21wb25lbnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBpbnZhbGlkIHR5cGVzIHdpbGwgZmFsbHRocm91Z2ggdG8gY3JlYXRlVk5vZGUgYW5kIHJhaXNlIHdhcm5pbmdcbiAgICAgICAgcmV0dXJuIChjb21wb25lbnQgfHwgTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCk7XG4gICAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlRGlyZWN0aXZlKG5hbWUpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KERJUkVDVElWRVMsIG5hbWUpO1xufVxuLy8gaW1wbGVtZW50YXRpb25cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCh0eXBlLCBuYW1lLCB3YXJuTWlzc2luZyA9IHRydWUsIG1heWJlU2VsZlJlZmVyZW5jZSA9IGZhbHNlKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgfHwgY3VycmVudEluc3RhbmNlO1xuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xuICAgICAgICAvLyBleHBsaWNpdCBzZWxmIG5hbWUgaGFzIGhpZ2hlc3QgcHJpb3JpdHlcbiAgICAgICAgaWYgKHR5cGUgPT09IENPTVBPTkVOVFMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGZOYW1lID0gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQsIGZhbHNlIC8qIGRvIG5vdCBpbmNsdWRlIGluZmVycmVkIG5hbWUgdG8gYXZvaWQgYnJlYWtpbmcgZXhpc3RpbmcgY29kZSAqLyk7XG4gICAgICAgICAgICBpZiAoc2VsZk5hbWUgJiZcbiAgICAgICAgICAgICAgICAoc2VsZk5hbWUgPT09IG5hbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZk5hbWUgPT09IGNhbWVsaXplKG5hbWUpIHx8XG4gICAgICAgICAgICAgICAgICAgIHNlbGZOYW1lID09PSBjYXBpdGFsaXplKGNhbWVsaXplKG5hbWUpKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IFxuICAgICAgICAvLyBsb2NhbCByZWdpc3RyYXRpb25cbiAgICAgICAgLy8gY2hlY2sgaW5zdGFuY2VbdHlwZV0gZmlyc3Qgd2hpY2ggaXMgcmVzb2x2ZWQgZm9yIG9wdGlvbnMgQVBJXG4gICAgICAgIHJlc29sdmUoaW5zdGFuY2VbdHlwZV0gfHwgQ29tcG9uZW50W3R5cGVdLCBuYW1lKSB8fFxuICAgICAgICAgICAgLy8gZ2xvYmFsIHJlZ2lzdHJhdGlvblxuICAgICAgICAgICAgcmVzb2x2ZShpbnN0YW5jZS5hcHBDb250ZXh0W3R5cGVdLCBuYW1lKTtcbiAgICAgICAgaWYgKCFyZXMgJiYgbWF5YmVTZWxmUmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAvLyBmYWxsYmFjayB0byBpbXBsaWNpdCBzZWxmLXJlZmVyZW5jZVxuICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4dHJhID0gdHlwZSA9PT0gQ09NUE9ORU5UU1xuICAgICAgICAgICAgICAgID8gYFxcbklmIHRoaXMgaXMgYSBuYXRpdmUgY3VzdG9tIGVsZW1lbnQsIG1ha2Ugc3VyZSB0byBleGNsdWRlIGl0IGZyb20gYCArXG4gICAgICAgICAgICAgICAgICAgIGBjb21wb25lbnQgcmVzb2x1dGlvbiB2aWEgY29tcGlsZXJPcHRpb25zLmlzQ3VzdG9tRWxlbWVudC5gXG4gICAgICAgICAgICAgICAgOiBgYDtcbiAgICAgICAgICAgIHdhcm4oYEZhaWxlZCB0byByZXNvbHZlICR7dHlwZS5zbGljZSgwLCAtMSl9OiAke25hbWV9JHtleHRyYX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgd2FybihgcmVzb2x2ZSR7Y2FwaXRhbGl6ZSh0eXBlLnNsaWNlKDAsIC0xKSl9IGAgK1xuICAgICAgICAgICAgYGNhbiBvbmx5IGJlIHVzZWQgaW4gcmVuZGVyKCkgb3Igc2V0dXAoKS5gKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXNvbHZlKHJlZ2lzdHJ5LCBuYW1lKSB7XG4gICAgcmV0dXJuIChyZWdpc3RyeSAmJlxuICAgICAgICAocmVnaXN0cnlbbmFtZV0gfHxcbiAgICAgICAgICAgIHJlZ2lzdHJ5W2NhbWVsaXplKG5hbWUpXSB8fFxuICAgICAgICAgICAgcmVnaXN0cnlbY2FwaXRhbGl6ZShjYW1lbGl6ZShuYW1lKSldKSk7XG59XG5cbi8qKlxuICogQWN0dWFsIGltcGxlbWVudGF0aW9uXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3Qoc291cmNlLCByZW5kZXJJdGVtLCBjYWNoZSwgaW5kZXgpIHtcbiAgICBsZXQgcmV0O1xuICAgIGNvbnN0IGNhY2hlZCA9IChjYWNoZSAmJiBjYWNoZVtpbmRleF0pO1xuICAgIGlmIChpc0FycmF5KHNvdXJjZSkgfHwgaXNTdHJpbmcoc291cmNlKSkge1xuICAgICAgICByZXQgPSBuZXcgQXJyYXkoc291cmNlLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gc291cmNlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShzb3VyY2VbaV0sIGksIHVuZGVmaW5lZCwgY2FjaGVkICYmIGNhY2hlZFtpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhTnVtYmVyLmlzSW50ZWdlcihzb3VyY2UpKSB7XG4gICAgICAgICAgICB3YXJuKGBUaGUgdi1mb3IgcmFuZ2UgZXhwZWN0IGFuIGludGVnZXIgdmFsdWUgYnV0IGdvdCAke3NvdXJjZX0uYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0ID0gbmV3IEFycmF5KHNvdXJjZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlOyBpKyspIHtcbiAgICAgICAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oaSArIDEsIGksIHVuZGVmaW5lZCwgY2FjaGVkICYmIGNhY2hlZFtpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgICBpZiAoc291cmNlW1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgICAgICAgIHJldCA9IEFycmF5LmZyb20oc291cmNlLCAoaXRlbSwgaSkgPT4gcmVuZGVySXRlbShpdGVtLCBpLCB1bmRlZmluZWQsIGNhY2hlZCAmJiBjYWNoZWRbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgICAgICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oc291cmNlW2tleV0sIGtleSwgaSwgY2FjaGVkICYmIGNhY2hlZFtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldCA9IFtdO1xuICAgIH1cbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGVbaW5kZXhdID0gcmV0O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIENvbXBpbGVyIHJ1bnRpbWUgaGVscGVyIGZvciBjcmVhdGluZyBkeW5hbWljIHNsb3RzIG9iamVjdFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2xvdHMoc2xvdHMsIGR5bmFtaWNTbG90cykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Nsb3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNsb3QgPSBkeW5hbWljU2xvdHNbaV07XG4gICAgICAgIC8vIGFycmF5IG9mIGR5bmFtaWMgc2xvdCBnZW5lcmF0ZWQgYnkgPHRlbXBsYXRlIHYtZm9yPVwiLi4uXCIgI1suLi5dPlxuICAgICAgICBpZiAoaXNBcnJheShzbG90KSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzbG90Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgc2xvdHNbc2xvdFtqXS5uYW1lXSA9IHNsb3Rbal0uZm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2xvdCkge1xuICAgICAgICAgICAgLy8gY29uZGl0aW9uYWwgc2luZ2xlIHNsb3QgZ2VuZXJhdGVkIGJ5IDx0ZW1wbGF0ZSB2LWlmPVwiLi4uXCIgI2Zvbz5cbiAgICAgICAgICAgIHNsb3RzW3Nsb3QubmFtZV0gPSBzbG90LmtleVxuICAgICAgICAgICAgICAgID8gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gc2xvdC5mbiguLi5hcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0YWNoIGJyYW5jaCBrZXkgc28gZWFjaCBjb25kaXRpb25hbCBicmFuY2ggaXMgY29uc2lkZXJlZCBhXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpZmZlcmVudCBmcmFnbWVudFxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmtleSA9IHNsb3Qua2V5O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHNsb3QuZm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNsb3RzO1xufVxuXG4vKipcbiAqIENvbXBpbGVyIHJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgYDxzbG90Lz5gXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90KHNsb3RzLCBuYW1lLCBwcm9wcyA9IHt9LCBcbi8vIHRoaXMgaXMgbm90IGEgdXNlci1mYWNpbmcgZnVuY3Rpb24sIHNvIHRoZSBmYWxsYmFjayBpcyBhbHdheXMgZ2VuZXJhdGVkIGJ5XG4vLyB0aGUgY29tcGlsZXIgYW5kIGd1YXJhbnRlZWQgdG8gYmUgYSBmdW5jdGlvbiByZXR1cm5pbmcgYW4gYXJyYXlcbmZhbGxiYWNrLCBub1Nsb3R0ZWQpIHtcbiAgICBpZiAoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLmlzQ0UgfHxcbiAgICAgICAgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5wYXJlbnQgJiZcbiAgICAgICAgICAgIGlzQXN5bmNXcmFwcGVyKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5wYXJlbnQpICYmXG4gICAgICAgICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UucGFyZW50LmlzQ0UpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSgnc2xvdCcsIG5hbWUgPT09ICdkZWZhdWx0JyA/IG51bGwgOiB7IG5hbWUgfSwgZmFsbGJhY2sgJiYgZmFsbGJhY2soKSk7XG4gICAgfVxuICAgIGxldCBzbG90ID0gc2xvdHNbbmFtZV07XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzbG90ICYmIHNsb3QubGVuZ3RoID4gMSkge1xuICAgICAgICB3YXJuKGBTU1Itb3B0aW1pemVkIHNsb3QgZnVuY3Rpb24gZGV0ZWN0ZWQgaW4gYSBub24tU1NSLW9wdGltaXplZCByZW5kZXIgYCArXG4gICAgICAgICAgICBgZnVuY3Rpb24uIFlvdSBuZWVkIHRvIG1hcmsgdGhpcyBjb21wb25lbnQgd2l0aCAkZHluYW1pYy1zbG90cyBpbiB0aGUgYCArXG4gICAgICAgICAgICBgcGFyZW50IHRlbXBsYXRlLmApO1xuICAgICAgICBzbG90ID0gKCkgPT4gW107XG4gICAgfVxuICAgIC8vIGEgY29tcGlsZWQgc2xvdCBkaXNhYmxlcyBibG9jayB0cmFja2luZyBieSBkZWZhdWx0IHRvIGF2b2lkIG1hbnVhbFxuICAgIC8vIGludm9jYXRpb24gaW50ZXJmZXJpbmcgd2l0aCB0ZW1wbGF0ZS1iYXNlZCBibG9jayB0cmFja2luZywgYnV0IGluXG4gICAgLy8gYHJlbmRlclNsb3RgIHdlIGNhbiBiZSBzdXJlIHRoYXQgaXQncyB0ZW1wbGF0ZS1iYXNlZCBzbyB3ZSBjYW4gZm9yY2VcbiAgICAvLyBlbmFibGUgaXQuXG4gICAgaWYgKHNsb3QgJiYgc2xvdC5fYykge1xuICAgICAgICBzbG90Ll9kID0gZmFsc2U7XG4gICAgfVxuICAgIG9wZW5CbG9jaygpO1xuICAgIGNvbnN0IHZhbGlkU2xvdENvbnRlbnQgPSBzbG90ICYmIGVuc3VyZVZhbGlkVk5vZGUoc2xvdChwcm9wcykpO1xuICAgIGNvbnN0IHJlbmRlcmVkID0gY3JlYXRlQmxvY2soRnJhZ21lbnQsIHtcbiAgICAgICAga2V5OiBwcm9wcy5rZXkgfHxcbiAgICAgICAgICAgIC8vIHNsb3QgY29udGVudCBhcnJheSBvZiBhIGR5bmFtaWMgY29uZGl0aW9uYWwgc2xvdCBtYXkgaGF2ZSBhIGJyYW5jaFxuICAgICAgICAgICAgLy8ga2V5IGF0dGFjaGVkIGluIHRoZSBgY3JlYXRlU2xvdHNgIGhlbHBlciwgcmVzcGVjdCB0aGF0XG4gICAgICAgICAgICAodmFsaWRTbG90Q29udGVudCAmJiB2YWxpZFNsb3RDb250ZW50LmtleSkgfHxcbiAgICAgICAgICAgIGBfJHtuYW1lfWBcbiAgICB9LCB2YWxpZFNsb3RDb250ZW50IHx8IChmYWxsYmFjayA/IGZhbGxiYWNrKCkgOiBbXSksIHZhbGlkU2xvdENvbnRlbnQgJiYgc2xvdHMuXyA9PT0gMSAvKiBTbG90RmxhZ3MuU1RBQkxFICovXG4gICAgICAgID8gNjQgLyogUGF0Y2hGbGFncy5TVEFCTEVfRlJBR01FTlQgKi9cbiAgICAgICAgOiAtMiAvKiBQYXRjaEZsYWdzLkJBSUwgKi8pO1xuICAgIGlmICghbm9TbG90dGVkICYmIHJlbmRlcmVkLnNjb3BlSWQpIHtcbiAgICAgICAgcmVuZGVyZWQuc2xvdFNjb3BlSWRzID0gW3JlbmRlcmVkLnNjb3BlSWQgKyAnLXMnXTtcbiAgICB9XG4gICAgaWYgKHNsb3QgJiYgc2xvdC5fYykge1xuICAgICAgICBzbG90Ll9kID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlbmRlcmVkO1xufVxuZnVuY3Rpb24gZW5zdXJlVmFsaWRWTm9kZSh2bm9kZXMpIHtcbiAgICByZXR1cm4gdm5vZGVzLnNvbWUoY2hpbGQgPT4ge1xuICAgICAgICBpZiAoIWlzVk5vZGUoY2hpbGQpKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSBDb21tZW50KVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gRnJhZ21lbnQgJiZcbiAgICAgICAgICAgICFlbnN1cmVWYWxpZFZOb2RlKGNoaWxkLmNoaWxkcmVuKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSlcbiAgICAgICAgPyB2bm9kZXNcbiAgICAgICAgOiBudWxsO1xufVxuXG4vKipcbiAqIEZvciBwcmVmaXhpbmcga2V5cyBpbiB2LW9uPVwib2JqXCIgd2l0aCBcIm9uXCJcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHRvSGFuZGxlcnMob2JqLCBwcmVzZXJ2ZUNhc2VJZk5lY2Vzc2FyeSkge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzT2JqZWN0KG9iaikpIHtcbiAgICAgICAgd2Fybihgdi1vbiB3aXRoIG5vIGFyZ3VtZW50IGV4cGVjdHMgYW4gb2JqZWN0IHZhbHVlLmApO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgcmV0W3ByZXNlcnZlQ2FzZUlmTmVjZXNzYXJ5ICYmIC9bQS1aXS8udGVzdChrZXkpXG4gICAgICAgICAgICA/IGBvbjoke2tleX1gXG4gICAgICAgICAgICA6IHRvSGFuZGxlcktleShrZXkpXSA9IG9ialtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqICMyNDM3IEluIFZ1ZSAzLCBmdW5jdGlvbmFsIGNvbXBvbmVudHMgZG8gbm90IGhhdmUgYSBwdWJsaWMgaW5zdGFuY2UgcHJveHkgYnV0XG4gKiB0aGV5IGV4aXN0IGluIHRoZSBpbnRlcm5hbCBwYXJlbnQgY2hhaW4uIEZvciBjb2RlIHRoYXQgcmVsaWVzIG9uIHRyYXZlcnNpbmdcbiAqIHB1YmxpYyAkcGFyZW50IGNoYWlucywgc2tpcCBmdW5jdGlvbmFsIG9uZXMgYW5kIGdvIHRvIHRoZSBwYXJlbnQgaW5zdGVhZC5cbiAqL1xuY29uc3QgZ2V0UHVibGljSW5zdGFuY2UgPSAoaSkgPT4ge1xuICAgIGlmICghaSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKGlzU3RhdGVmdWxDb21wb25lbnQoaSkpXG4gICAgICAgIHJldHVybiBnZXRFeHBvc2VQcm94eShpKSB8fCBpLnByb3h5O1xuICAgIHJldHVybiBnZXRQdWJsaWNJbnN0YW5jZShpLnBhcmVudCk7XG59O1xuY29uc3QgcHVibGljUHJvcGVydGllc01hcCA9IFxuLy8gTW92ZSBQVVJFIG1hcmtlciB0byBuZXcgbGluZSB0byB3b3JrYXJvdW5kIGNvbXBpbGVyIGRpc2NhcmRpbmcgaXRcbi8vIGR1ZSB0byB0eXBlIGFubm90YXRpb25cbi8qI19fUFVSRV9fKi8gZXh0ZW5kKE9iamVjdC5jcmVhdGUobnVsbCksIHtcbiAgICAkOiBpID0+IGksXG4gICAgJGVsOiBpID0+IGkudm5vZGUuZWwsXG4gICAgJGRhdGE6IGkgPT4gaS5kYXRhLFxuICAgICRwcm9wczogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkucHJvcHMpIDogaS5wcm9wcyksXG4gICAgJGF0dHJzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5hdHRycykgOiBpLmF0dHJzKSxcbiAgICAkc2xvdHM6IGkgPT4gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpLnNsb3RzKSA6IGkuc2xvdHMpLFxuICAgICRyZWZzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5yZWZzKSA6IGkucmVmcyksXG4gICAgJHBhcmVudDogaSA9PiBnZXRQdWJsaWNJbnN0YW5jZShpLnBhcmVudCksXG4gICAgJHJvb3Q6IGkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5yb290KSxcbiAgICAkZW1pdDogaSA9PiBpLmVtaXQsXG4gICAgJG9wdGlvbnM6IGkgPT4gKF9fVlVFX09QVElPTlNfQVBJX18gPyByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpKSA6IGkudHlwZSksXG4gICAgJGZvcmNlVXBkYXRlOiBpID0+IGkuZiB8fCAoaS5mID0gKCkgPT4gcXVldWVKb2IoaS51cGRhdGUpKSxcbiAgICAkbmV4dFRpY2s6IGkgPT4gaS5uIHx8IChpLm4gPSBuZXh0VGljay5iaW5kKGkucHJveHkpKSxcbiAgICAkd2F0Y2g6IGkgPT4gKF9fVlVFX09QVElPTlNfQVBJX18gPyBpbnN0YW5jZVdhdGNoLmJpbmQoaSkgOiBOT09QKVxufSk7XG5jb25zdCBpc1Jlc2VydmVkUHJlZml4ID0gKGtleSkgPT4ga2V5ID09PSAnXycgfHwga2V5ID09PSAnJCc7XG5jb25zdCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMgPSB7XG4gICAgZ2V0KHsgXzogaW5zdGFuY2UgfSwga2V5KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4LCBzZXR1cFN0YXRlLCBkYXRhLCBwcm9wcywgYWNjZXNzQ2FjaGUsIHR5cGUsIGFwcENvbnRleHQgfSA9IGluc3RhbmNlO1xuICAgICAgICAvLyBmb3IgaW50ZXJuYWwgZm9ybWF0dGVycyB0byBrbm93IHRoYXQgdGhpcyBpcyBhIFZ1ZSBpbnN0YW5jZVxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleSA9PT0gJ19faXNWdWUnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwcmlvcml0aXplIDxzY3JpcHQgc2V0dXA+IGJpbmRpbmdzIGR1cmluZyBkZXYuXG4gICAgICAgIC8vIHRoaXMgYWxsb3dzIGV2ZW4gcHJvcGVydGllcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkIHRvIGJlIHVzZWQgLSBzbyB0aGF0XG4gICAgICAgIC8vIGl0IGFsaWducyB3aXRoIHRoZSBwcm9kdWN0aW9uIGJlaGF2aW9yIHdoZXJlIHRoZSByZW5kZXIgZm4gaXMgaW5saW5lZCBhbmRcbiAgICAgICAgLy8gaW5kZWVkIGhhcyBhY2Nlc3MgdG8gYWxsIGRlY2xhcmVkIHZhcmlhYmxlcy5cbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKICYmXG4gICAgICAgICAgICBzZXR1cFN0YXRlLl9faXNTY3JpcHRTZXR1cCAmJlxuICAgICAgICAgICAgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXR1cFN0YXRlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGF0YSAvIHByb3BzIC8gY3R4XG4gICAgICAgIC8vIFRoaXMgZ2V0dGVyIGdldHMgY2FsbGVkIGZvciBldmVyeSBwcm9wZXJ0eSBhY2Nlc3Mgb24gdGhlIHJlbmRlciBjb250ZXh0XG4gICAgICAgIC8vIGR1cmluZyByZW5kZXIgYW5kIGlzIGEgbWFqb3IgaG90c3BvdC4gVGhlIG1vc3QgZXhwZW5zaXZlIHBhcnQgb2YgdGhpc1xuICAgICAgICAvLyBpcyB0aGUgbXVsdGlwbGUgaGFzT3duKCkgY2FsbHMuIEl0J3MgbXVjaCBmYXN0ZXIgdG8gZG8gYSBzaW1wbGUgcHJvcGVydHlcbiAgICAgICAgLy8gYWNjZXNzIG9uIGEgcGxhaW4gb2JqZWN0LCBzbyB3ZSB1c2UgYW4gYWNjZXNzQ2FjaGUgb2JqZWN0ICh3aXRoIG51bGxcbiAgICAgICAgLy8gcHJvdG90eXBlKSB0byBtZW1vaXplIHdoYXQgYWNjZXNzIHR5cGUgYSBrZXkgY29ycmVzcG9uZHMgdG8uXG4gICAgICAgIGxldCBub3JtYWxpemVkUHJvcHM7XG4gICAgICAgIGlmIChrZXlbMF0gIT09ICckJykge1xuICAgICAgICAgICAgY29uc3QgbiA9IGFjY2Vzc0NhY2hlW2tleV07XG4gICAgICAgICAgICBpZiAobiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChuKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMSAvKiBBY2Nlc3NUeXBlcy5TRVRVUCAqLzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXR1cFN0YXRlW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMiAvKiBBY2Nlc3NUeXBlcy5EQVRBICovOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0IC8qIEFjY2Vzc1R5cGVzLkNPTlRFWFQgKi86XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3R4W2tleV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMyAvKiBBY2Nlc3NUeXBlcy5QUk9QUyAqLzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wc1trZXldO1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0OiBqdXN0IGZhbGx0aHJvdWdoXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDEgLyogQWNjZXNzVHlwZXMuU0VUVVAgKi87XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHVwU3RhdGVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkge1xuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAyIC8qIEFjY2Vzc1R5cGVzLkRBVEEgKi87XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgLy8gb25seSBjYWNoZSBvdGhlciBwcm9wZXJ0aWVzIHdoZW4gaW5zdGFuY2UgaGFzIGRlY2xhcmVkICh0aHVzIHN0YWJsZSlcbiAgICAgICAgICAgIC8vIHByb3BzXG4gICAgICAgICAgICAobm9ybWFsaXplZFByb3BzID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdKSAmJlxuICAgICAgICAgICAgICAgIGhhc093bihub3JtYWxpemVkUHJvcHMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMyAvKiBBY2Nlc3NUeXBlcy5QUk9QUyAqLztcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gNCAvKiBBY2Nlc3NUeXBlcy5DT05URVhUICovO1xuICAgICAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFfX1ZVRV9PUFRJT05TX0FQSV9fIHx8IHNob3VsZENhY2hlQWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDAgLyogQWNjZXNzVHlwZXMuT1RIRVIgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHVibGljR2V0dGVyID0gcHVibGljUHJvcGVydGllc01hcFtrZXldO1xuICAgICAgICBsZXQgY3NzTW9kdWxlLCBnbG9iYWxQcm9wZXJ0aWVzO1xuICAgICAgICAvLyBwdWJsaWMgJHh4eCBwcm9wZXJ0aWVzXG4gICAgICAgIGlmIChwdWJsaWNHZXR0ZXIpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICckYXR0cnMnKSB7XG4gICAgICAgICAgICAgICAgdHJhY2soaW5zdGFuY2UsIFwiZ2V0XCIgLyogVHJhY2tPcFR5cGVzLkdFVCAqLywga2V5KTtcbiAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgbWFya0F0dHJzQWNjZXNzZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwdWJsaWNHZXR0ZXIoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAvLyBjc3MgbW9kdWxlIChpbmplY3RlZCBieSB2dWUtbG9hZGVyKVxuICAgICAgICAoY3NzTW9kdWxlID0gdHlwZS5fX2Nzc01vZHVsZXMpICYmXG4gICAgICAgICAgICAoY3NzTW9kdWxlID0gY3NzTW9kdWxlW2tleV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gY3NzTW9kdWxlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcbiAgICAgICAgICAgIC8vIHVzZXIgbWF5IHNldCBjdXN0b20gcHJvcGVydGllcyB0byBgdGhpc2AgdGhhdCBzdGFydCB3aXRoIGAkYFxuICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDQgLyogQWNjZXNzVHlwZXMuQ09OVEVYVCAqLztcbiAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgLy8gZ2xvYmFsIHByb3BlcnRpZXNcbiAgICAgICAgKChnbG9iYWxQcm9wZXJ0aWVzID0gYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcyksXG4gICAgICAgICAgICBoYXNPd24oZ2xvYmFsUHJvcGVydGllcywga2V5KSkpIHtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2xvYmFsUHJvcGVydGllc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlICYmXG4gICAgICAgICAgICAoIWlzU3RyaW5nKGtleSkgfHxcbiAgICAgICAgICAgICAgICAvLyAjMTA5MSBhdm9pZCBpbnRlcm5hbCBpc1JlZi9pc1ZOb2RlIGNoZWNrcyBvbiBjb21wb25lbnQgaW5zdGFuY2UgbGVhZGluZ1xuICAgICAgICAgICAgICAgIC8vIHRvIGluZmluaXRlIHdhcm5pbmcgbG9vcFxuICAgICAgICAgICAgICAgIGtleS5pbmRleE9mKCdfX3YnKSAhPT0gMCkpIHtcbiAgICAgICAgICAgIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaXNSZXNlcnZlZFByZWZpeChrZXlbMF0pICYmIGhhc093bihkYXRhLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgd2FybihgUHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShrZXkpfSBtdXN0IGJlIGFjY2Vzc2VkIHZpYSAkZGF0YSBiZWNhdXNlIGl0IHN0YXJ0cyB3aXRoIGEgcmVzZXJ2ZWQgYCArXG4gICAgICAgICAgICAgICAgICAgIGBjaGFyYWN0ZXIgKFwiJFwiIG9yIFwiX1wiKSBhbmQgaXMgbm90IHByb3hpZWQgb24gdGhlIHJlbmRlciBjb250ZXh0LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5zdGFuY2UgPT09IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gd2FzIGFjY2Vzc2VkIGR1cmluZyByZW5kZXIgYCArXG4gICAgICAgICAgICAgICAgICAgIGBidXQgaXMgbm90IGRlZmluZWQgb24gaW5zdGFuY2UuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNldCh7IF86IGluc3RhbmNlIH0sIGtleSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgeyBkYXRhLCBzZXR1cFN0YXRlLCBjdHggfSA9IGluc3RhbmNlO1xuICAgICAgICBpZiAoc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICAgICAgICBzZXR1cFN0YXRlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkge1xuICAgICAgICAgICAgZGF0YVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoYXNPd24oaW5zdGFuY2UucHJvcHMsIGtleSkpIHtcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgIHdhcm4oYEF0dGVtcHRpbmcgdG8gbXV0YXRlIHByb3AgXCIke2tleX1cIi4gUHJvcHMgYXJlIHJlYWRvbmx5LmAsIGluc3RhbmNlKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoa2V5WzBdID09PSAnJCcgJiYga2V5LnNsaWNlKDEpIGluIGluc3RhbmNlKSB7XG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICB3YXJuKGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwdWJsaWMgcHJvcGVydHkgXCIke2tleX1cIi4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBQcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggJCBhcmUgcmVzZXJ2ZWQgYW5kIHJlYWRvbmx5LmAsIGluc3RhbmNlKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYga2V5IGluIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY3R4W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGhhcyh7IF86IHsgZGF0YSwgc2V0dXBTdGF0ZSwgYWNjZXNzQ2FjaGUsIGN0eCwgYXBwQ29udGV4dCwgcHJvcHNPcHRpb25zIH0gfSwga2V5KSB7XG4gICAgICAgIGxldCBub3JtYWxpemVkUHJvcHM7XG4gICAgICAgIHJldHVybiAoISFhY2Nlc3NDYWNoZVtrZXldIHx8XG4gICAgICAgICAgICAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpKSB8fFxuICAgICAgICAgICAgKHNldHVwU3RhdGUgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oc2V0dXBTdGF0ZSwga2V5KSkgfHxcbiAgICAgICAgICAgICgobm9ybWFsaXplZFByb3BzID0gcHJvcHNPcHRpb25zWzBdKSAmJiBoYXNPd24obm9ybWFsaXplZFByb3BzLCBrZXkpKSB8fFxuICAgICAgICAgICAgaGFzT3duKGN0eCwga2V5KSB8fFxuICAgICAgICAgICAgaGFzT3duKHB1YmxpY1Byb3BlcnRpZXNNYXAsIGtleSkgfHxcbiAgICAgICAgICAgIGhhc093bihhcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLCBrZXkpKTtcbiAgICB9LFxuICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yLmdldCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBpbnZhbGlkYXRlIGtleSBjYWNoZSBvZiBhIGdldHRlciBiYXNlZCBwcm9wZXJ0eSAjNTQxN1xuICAgICAgICAgICAgdGFyZ2V0Ll8uYWNjZXNzQ2FjaGVba2V5XSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGFzT3duKGRlc2NyaXB0b3IsICd2YWx1ZScpKSB7XG4gICAgICAgICAgICB0aGlzLnNldCh0YXJnZXQsIGtleSwgZGVzY3JpcHRvci52YWx1ZSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbn07XG5pZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFmYWxzZSkge1xuICAgIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycy5vd25LZXlzID0gKHRhcmdldCkgPT4ge1xuICAgICAgICB3YXJuKGBBdm9pZCBhcHAgbG9naWMgdGhhdCByZWxpZXMgb24gZW51bWVyYXRpbmcga2V5cyBvbiBhIGNvbXBvbmVudCBpbnN0YW5jZS4gYCArXG4gICAgICAgICAgICBgVGhlIGtleXMgd2lsbCBiZSBlbXB0eSBpbiBwcm9kdWN0aW9uIG1vZGUgdG8gYXZvaWQgcGVyZm9ybWFuY2Ugb3ZlcmhlYWQuYCk7XG4gICAgICAgIHJldHVybiBSZWZsZWN0Lm93bktleXModGFyZ2V0KTtcbiAgICB9O1xufVxuY29uc3QgUnVudGltZUNvbXBpbGVkUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzID0gLyojX19QVVJFX18qLyBleHRlbmQoe30sIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycywge1xuICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgICAvLyBmYXN0IHBhdGggZm9yIHVuc2NvcGFibGVzIHdoZW4gdXNpbmcgYHdpdGhgIGJsb2NrXG4gICAgICAgIGlmIChrZXkgPT09IFN5bWJvbC51bnNjb3BhYmxlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMuZ2V0KHRhcmdldCwga2V5LCB0YXJnZXQpO1xuICAgIH0sXG4gICAgaGFzKF8sIGtleSkge1xuICAgICAgICBjb25zdCBoYXMgPSBrZXlbMF0gIT09ICdfJyAmJiAhaXNHbG9iYWxseVdoaXRlbGlzdGVkKGtleSk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWhhcyAmJiBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMuaGFzKF8sIGtleSkpIHtcbiAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gc2hvdWxkIG5vdCBzdGFydCB3aXRoIF8gd2hpY2ggaXMgYSByZXNlcnZlZCBwcmVmaXggZm9yIFZ1ZSBpbnRlcm5hbHMuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhcztcbiAgICB9XG59KTtcbi8vIGRldiBvbmx5XG4vLyBJbiBkZXYgbW9kZSwgdGhlIHByb3h5IHRhcmdldCBleHBvc2VzIHRoZSBzYW1lIHByb3BlcnRpZXMgYXMgc2VlbiBvbiBgdGhpc2Bcbi8vIGZvciBlYXNpZXIgY29uc29sZSBpbnNwZWN0aW9uLiBJbiBwcm9kIG1vZGUgaXQgd2lsbCBiZSBhbiBlbXB0eSBvYmplY3Qgc29cbi8vIHRoZXNlIHByb3BlcnRpZXMgZGVmaW5pdGlvbnMgY2FuIGJlIHNraXBwZWQuXG5mdW5jdGlvbiBjcmVhdGVEZXZSZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0ge307XG4gICAgLy8gZXhwb3NlIGludGVybmFsIGluc3RhbmNlIGZvciBwcm94eSBoYW5kbGVyc1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGBfYCwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBnZXQ6ICgpID0+IGluc3RhbmNlXG4gICAgfSk7XG4gICAgLy8gZXhwb3NlIHB1YmxpYyBwcm9wZXJ0aWVzXG4gICAgT2JqZWN0LmtleXMocHVibGljUHJvcGVydGllc01hcCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0OiAoKSA9PiBwdWJsaWNQcm9wZXJ0aWVzTWFwW2tleV0oaW5zdGFuY2UpLFxuICAgICAgICAgICAgLy8gaW50ZXJjZXB0ZWQgYnkgdGhlIHByb3h5IHNvIG5vIG5lZWQgZm9yIGltcGxlbWVudGF0aW9uLFxuICAgICAgICAgICAgLy8gYnV0IG5lZWRlZCB0byBwcmV2ZW50IHNldCBlcnJvcnNcbiAgICAgICAgICAgIHNldDogTk9PUFxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuLy8gZGV2IG9ubHlcbmZ1bmN0aW9uIGV4cG9zZVByb3BzT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XG4gICAgY29uc3QgeyBjdHgsIHByb3BzT3B0aW9uczogW3Byb3BzT3B0aW9uc10gfSA9IGluc3RhbmNlO1xuICAgIGlmIChwcm9wc09wdGlvbnMpIHtcbiAgICAgICAgT2JqZWN0LmtleXMocHJvcHNPcHRpb25zKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IGluc3RhbmNlLnByb3BzW2tleV0sXG4gICAgICAgICAgICAgICAgc2V0OiBOT09QXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8gZGV2IG9ubHlcbmZ1bmN0aW9uIGV4cG9zZVNldHVwU3RhdGVPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpIHtcbiAgICBjb25zdCB7IGN0eCwgc2V0dXBTdGF0ZSB9ID0gaW5zdGFuY2U7XG4gICAgT2JqZWN0LmtleXModG9SYXcoc2V0dXBTdGF0ZSkpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKCFzZXR1cFN0YXRlLl9faXNTY3JpcHRTZXR1cCkge1xuICAgICAgICAgICAgaWYgKGlzUmVzZXJ2ZWRQcmVmaXgoa2V5WzBdKSkge1xuICAgICAgICAgICAgICAgIHdhcm4oYHNldHVwKCkgcmV0dXJuIHByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gc2hvdWxkIG5vdCBzdGFydCB3aXRoIFwiJFwiIG9yIFwiX1wiIGAgK1xuICAgICAgICAgICAgICAgICAgICBgd2hpY2ggYXJlIHJlc2VydmVkIHByZWZpeGVzIGZvciBWdWUgaW50ZXJuYWxzLmApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gc2V0dXBTdGF0ZVtrZXldLFxuICAgICAgICAgICAgICAgIHNldDogTk9PUFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRHVwbGljYXRlQ2hlY2tlcigpIHtcbiAgICBjb25zdCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmV0dXJuICh0eXBlLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgICAgIHdhcm4oYCR7dHlwZX0gcHJvcGVydHkgXCIke2tleX1cIiBpcyBhbHJlYWR5IGRlZmluZWQgaW4gJHtjYWNoZVtrZXldfS5gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlW2tleV0gPSB0eXBlO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmxldCBzaG91bGRDYWNoZUFjY2VzcyA9IHRydWU7XG5mdW5jdGlvbiBhcHBseU9wdGlvbnMoaW5zdGFuY2UpIHtcbiAgICBjb25zdCBvcHRpb25zID0gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaW5zdGFuY2UpO1xuICAgIGNvbnN0IHB1YmxpY1RoaXMgPSBpbnN0YW5jZS5wcm94eTtcbiAgICBjb25zdCBjdHggPSBpbnN0YW5jZS5jdHg7XG4gICAgLy8gZG8gbm90IGNhY2hlIHByb3BlcnR5IGFjY2VzcyBvbiBwdWJsaWMgcHJveHkgZHVyaW5nIHN0YXRlIGluaXRpYWxpemF0aW9uXG4gICAgc2hvdWxkQ2FjaGVBY2Nlc3MgPSBmYWxzZTtcbiAgICAvLyBjYWxsIGJlZm9yZUNyZWF0ZSBmaXJzdCBiZWZvcmUgYWNjZXNzaW5nIG90aGVyIG9wdGlvbnMgc2luY2VcbiAgICAvLyB0aGUgaG9vayBtYXkgbXV0YXRlIHJlc29sdmVkIG9wdGlvbnMgKCMyNzkxKVxuICAgIGlmIChvcHRpb25zLmJlZm9yZUNyZWF0ZSkge1xuICAgICAgICBjYWxsSG9vayhvcHRpb25zLmJlZm9yZUNyZWF0ZSwgaW5zdGFuY2UsIFwiYmNcIiAvKiBMaWZlY3ljbGVIb29rcy5CRUZPUkVfQ1JFQVRFICovKTtcbiAgICB9XG4gICAgY29uc3QgeyBcbiAgICAvLyBzdGF0ZVxuICAgIGRhdGE6IGRhdGFPcHRpb25zLCBjb21wdXRlZDogY29tcHV0ZWRPcHRpb25zLCBtZXRob2RzLCB3YXRjaDogd2F0Y2hPcHRpb25zLCBwcm92aWRlOiBwcm92aWRlT3B0aW9ucywgaW5qZWN0OiBpbmplY3RPcHRpb25zLCBcbiAgICAvLyBsaWZlY3ljbGVcbiAgICBjcmVhdGVkLCBiZWZvcmVNb3VudCwgbW91bnRlZCwgYmVmb3JlVXBkYXRlLCB1cGRhdGVkLCBhY3RpdmF0ZWQsIGRlYWN0aXZhdGVkLCBiZWZvcmVEZXN0cm95LCBiZWZvcmVVbm1vdW50LCBkZXN0cm95ZWQsIHVubW91bnRlZCwgcmVuZGVyLCByZW5kZXJUcmFja2VkLCByZW5kZXJUcmlnZ2VyZWQsIGVycm9yQ2FwdHVyZWQsIHNlcnZlclByZWZldGNoLCBcbiAgICAvLyBwdWJsaWMgQVBJXG4gICAgZXhwb3NlLCBpbmhlcml0QXR0cnMsIFxuICAgIC8vIGFzc2V0c1xuICAgIGNvbXBvbmVudHMsIGRpcmVjdGl2ZXMsIGZpbHRlcnMgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gY3JlYXRlRHVwbGljYXRlQ2hlY2tlcigpIDogbnVsbDtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGNvbnN0IFtwcm9wc09wdGlvbnNdID0gaW5zdGFuY2UucHJvcHNPcHRpb25zO1xuICAgICAgICBpZiAocHJvcHNPcHRpb25zKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wc09wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJQcm9wc1wiIC8qIE9wdGlvblR5cGVzLlBST1BTICovLCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIG9wdGlvbnMgaW5pdGlhbGl6YXRpb24gb3JkZXIgKHRvIGJlIGNvbnNpc3RlbnQgd2l0aCBWdWUgMik6XG4gICAgLy8gLSBwcm9wcyAoYWxyZWFkeSBkb25lIG91dHNpZGUgb2YgdGhpcyBmdW5jdGlvbilcbiAgICAvLyAtIGluamVjdFxuICAgIC8vIC0gbWV0aG9kc1xuICAgIC8vIC0gZGF0YSAoZGVmZXJyZWQgc2luY2UgaXQgcmVsaWVzIG9uIGB0aGlzYCBhY2Nlc3MpXG4gICAgLy8gLSBjb21wdXRlZFxuICAgIC8vIC0gd2F0Y2ggKGRlZmVycmVkIHNpbmNlIGl0IHJlbGllcyBvbiBgdGhpc2AgYWNjZXNzKVxuICAgIGlmIChpbmplY3RPcHRpb25zKSB7XG4gICAgICAgIHJlc29sdmVJbmplY3Rpb25zKGluamVjdE9wdGlvbnMsIGN0eCwgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzLCBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy51bndyYXBJbmplY3RlZFJlZik7XG4gICAgfVxuICAgIGlmIChtZXRob2RzKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG1ldGhvZHMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZEhhbmRsZXIgPSBtZXRob2RzW2tleV07XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihtZXRob2RIYW5kbGVyKSkge1xuICAgICAgICAgICAgICAgIC8vIEluIGRldiBtb2RlLCB3ZSB1c2UgdGhlIGBjcmVhdGVSZW5kZXJDb250ZXh0YCBmdW5jdGlvbiB0byBkZWZpbmVcbiAgICAgICAgICAgICAgICAvLyBtZXRob2RzIHRvIHRoZSBwcm94eSB0YXJnZXQsIGFuZCB0aG9zZSBhcmUgcmVhZC1vbmx5IGJ1dFxuICAgICAgICAgICAgICAgIC8vIHJlY29uZmlndXJhYmxlLCBzbyBpdCBuZWVkcyB0byBiZSByZWRlZmluZWQgaGVyZVxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbWV0aG9kSGFuZGxlci5iaW5kKHB1YmxpY1RoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4W2tleV0gPSBtZXRob2RIYW5kbGVyLmJpbmQocHVibGljVGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiTWV0aG9kc1wiIC8qIE9wdGlvblR5cGVzLk1FVEhPRFMgKi8sIGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgd2FybihgTWV0aG9kIFwiJHtrZXl9XCIgaGFzIHR5cGUgXCIke3R5cGVvZiBtZXRob2RIYW5kbGVyfVwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChkYXRhT3B0aW9ucykge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0Z1bmN0aW9uKGRhdGFPcHRpb25zKSkge1xuICAgICAgICAgICAgd2FybihgVGhlIGRhdGEgb3B0aW9uIG11c3QgYmUgYSBmdW5jdGlvbi4gYCArXG4gICAgICAgICAgICAgICAgYFBsYWluIG9iamVjdCB1c2FnZSBpcyBubyBsb25nZXIgc3VwcG9ydGVkLmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSBkYXRhT3B0aW9ucy5jYWxsKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzUHJvbWlzZShkYXRhKSkge1xuICAgICAgICAgICAgd2FybihgZGF0YSgpIHJldHVybmVkIGEgUHJvbWlzZSAtIG5vdGUgZGF0YSgpIGNhbm5vdCBiZSBhc3luYzsgSWYgeW91IGAgK1xuICAgICAgICAgICAgICAgIGBpbnRlbmQgdG8gcGVyZm9ybSBkYXRhIGZldGNoaW5nIGJlZm9yZSBjb21wb25lbnQgcmVuZGVycywgdXNlIGAgK1xuICAgICAgICAgICAgICAgIGBhc3luYyBzZXR1cCgpICsgPFN1c3BlbnNlPi5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybihgZGF0YSgpIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0LmApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5zdGFuY2UuZGF0YSA9IHJlYWN0aXZlKGRhdGEpO1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiRGF0YVwiIC8qIE9wdGlvblR5cGVzLkRBVEEgKi8sIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV4cG9zZSBkYXRhIG9uIGN0eCBkdXJpbmcgZGV2XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNSZXNlcnZlZFByZWZpeChrZXlbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IGRhdGFba2V5XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IE5PT1BcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHN0YXRlIGluaXRpYWxpemF0aW9uIGNvbXBsZXRlIGF0IHRoaXMgcG9pbnQgLSBzdGFydCBjYWNoaW5nIGFjY2Vzc1xuICAgIHNob3VsZENhY2hlQWNjZXNzID0gdHJ1ZTtcbiAgICBpZiAoY29tcHV0ZWRPcHRpb25zKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGNvbXB1dGVkT3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3Qgb3B0ID0gY29tcHV0ZWRPcHRpb25zW2tleV07XG4gICAgICAgICAgICBjb25zdCBnZXQgPSBpc0Z1bmN0aW9uKG9wdClcbiAgICAgICAgICAgICAgICA/IG9wdC5iaW5kKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpXG4gICAgICAgICAgICAgICAgOiBpc0Z1bmN0aW9uKG9wdC5nZXQpXG4gICAgICAgICAgICAgICAgICAgID8gb3B0LmdldC5iaW5kKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpXG4gICAgICAgICAgICAgICAgICAgIDogTk9PUDtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZ2V0ID09PSBOT09QKSB7XG4gICAgICAgICAgICAgICAgd2FybihgQ29tcHV0ZWQgcHJvcGVydHkgXCIke2tleX1cIiBoYXMgbm8gZ2V0dGVyLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2V0ID0gIWlzRnVuY3Rpb24ob3B0KSAmJiBpc0Z1bmN0aW9uKG9wdC5zZXQpXG4gICAgICAgICAgICAgICAgPyBvcHQuc2V0LmJpbmQocHVibGljVGhpcylcbiAgICAgICAgICAgICAgICA6IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICAgICAgICAgICAgICA/ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYFdyaXRlIG9wZXJhdGlvbiBmYWlsZWQ6IGNvbXB1dGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgcmVhZG9ubHkuYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBOT09QO1xuICAgICAgICAgICAgY29uc3QgYyA9IGNvbXB1dGVkKHtcbiAgICAgICAgICAgICAgICBnZXQsXG4gICAgICAgICAgICAgICAgc2V0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gYy52YWx1ZSxcbiAgICAgICAgICAgICAgICBzZXQ6IHYgPT4gKGMudmFsdWUgPSB2KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiQ29tcHV0ZWRcIiAvKiBPcHRpb25UeXBlcy5DT01QVVRFRCAqLywga2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAod2F0Y2hPcHRpb25zKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHdhdGNoT3B0aW9ucykge1xuICAgICAgICAgICAgY3JlYXRlV2F0Y2hlcih3YXRjaE9wdGlvbnNba2V5XSwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwcm92aWRlT3B0aW9ucykge1xuICAgICAgICBjb25zdCBwcm92aWRlcyA9IGlzRnVuY3Rpb24ocHJvdmlkZU9wdGlvbnMpXG4gICAgICAgICAgICA/IHByb3ZpZGVPcHRpb25zLmNhbGwocHVibGljVGhpcylcbiAgICAgICAgICAgIDogcHJvdmlkZU9wdGlvbnM7XG4gICAgICAgIFJlZmxlY3Qub3duS2V5cyhwcm92aWRlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgcHJvdmlkZShrZXksIHByb3ZpZGVzW2tleV0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGNyZWF0ZWQpIHtcbiAgICAgICAgY2FsbEhvb2soY3JlYXRlZCwgaW5zdGFuY2UsIFwiY1wiIC8qIExpZmVjeWNsZUhvb2tzLkNSRUFURUQgKi8pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWdpc3RlckxpZmVjeWNsZUhvb2socmVnaXN0ZXIsIGhvb2spIHtcbiAgICAgICAgaWYgKGlzQXJyYXkoaG9vaykpIHtcbiAgICAgICAgICAgIGhvb2suZm9yRWFjaChfaG9vayA9PiByZWdpc3RlcihfaG9vay5iaW5kKHB1YmxpY1RoaXMpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaG9vaykge1xuICAgICAgICAgICAgcmVnaXN0ZXIoaG9vay5iaW5kKHB1YmxpY1RoaXMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25CZWZvcmVNb3VudCwgYmVmb3JlTW91bnQpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbk1vdW50ZWQsIG1vdW50ZWQpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkJlZm9yZVVwZGF0ZSwgYmVmb3JlVXBkYXRlKTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25VcGRhdGVkLCB1cGRhdGVkKTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25BY3RpdmF0ZWQsIGFjdGl2YXRlZCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uRGVhY3RpdmF0ZWQsIGRlYWN0aXZhdGVkKTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25FcnJvckNhcHR1cmVkLCBlcnJvckNhcHR1cmVkKTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25SZW5kZXJUcmFja2VkLCByZW5kZXJUcmFja2VkKTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25SZW5kZXJUcmlnZ2VyZWQsIHJlbmRlclRyaWdnZXJlZCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQmVmb3JlVW5tb3VudCwgYmVmb3JlVW5tb3VudCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uVW5tb3VudGVkLCB1bm1vdW50ZWQpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblNlcnZlclByZWZldGNoLCBzZXJ2ZXJQcmVmZXRjaCk7XG4gICAgaWYgKGlzQXJyYXkoZXhwb3NlKSkge1xuICAgICAgICBpZiAoZXhwb3NlLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgZXhwb3NlZCA9IGluc3RhbmNlLmV4cG9zZWQgfHwgKGluc3RhbmNlLmV4cG9zZWQgPSB7fSk7XG4gICAgICAgICAgICBleHBvc2UuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvc2VkLCBrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBwdWJsaWNUaGlzW2tleV0sXG4gICAgICAgICAgICAgICAgICAgIHNldDogdmFsID0+IChwdWJsaWNUaGlzW2tleV0gPSB2YWwpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5zdGFuY2UuZXhwb3NlZCkge1xuICAgICAgICAgICAgaW5zdGFuY2UuZXhwb3NlZCA9IHt9O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIG9wdGlvbnMgdGhhdCBhcmUgaGFuZGxlZCB3aGVuIGNyZWF0aW5nIHRoZSBpbnN0YW5jZSBidXQgYWxzbyBuZWVkIHRvIGJlXG4gICAgLy8gYXBwbGllZCBmcm9tIG1peGluc1xuICAgIGlmIChyZW5kZXIgJiYgaW5zdGFuY2UucmVuZGVyID09PSBOT09QKSB7XG4gICAgICAgIGluc3RhbmNlLnJlbmRlciA9IHJlbmRlcjtcbiAgICB9XG4gICAgaWYgKGluaGVyaXRBdHRycyAhPSBudWxsKSB7XG4gICAgICAgIGluc3RhbmNlLmluaGVyaXRBdHRycyA9IGluaGVyaXRBdHRycztcbiAgICB9XG4gICAgLy8gYXNzZXQgb3B0aW9ucy5cbiAgICBpZiAoY29tcG9uZW50cylcbiAgICAgICAgaW5zdGFuY2UuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG4gICAgaWYgKGRpcmVjdGl2ZXMpXG4gICAgICAgIGluc3RhbmNlLmRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUluamVjdGlvbnMoaW5qZWN0T3B0aW9ucywgY3R4LCBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMgPSBOT09QLCB1bndyYXBSZWYgPSBmYWxzZSkge1xuICAgIGlmIChpc0FycmF5KGluamVjdE9wdGlvbnMpKSB7XG4gICAgICAgIGluamVjdE9wdGlvbnMgPSBub3JtYWxpemVJbmplY3QoaW5qZWN0T3B0aW9ucyk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIGluamVjdE9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgb3B0ID0gaW5qZWN0T3B0aW9uc1trZXldO1xuICAgICAgICBsZXQgaW5qZWN0ZWQ7XG4gICAgICAgIGlmIChpc09iamVjdChvcHQpKSB7XG4gICAgICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIG9wdCkge1xuICAgICAgICAgICAgICAgIGluamVjdGVkID0gaW5qZWN0KG9wdC5mcm9tIHx8IGtleSwgb3B0LmRlZmF1bHQsIHRydWUgLyogdHJlYXQgZGVmYXVsdCBmdW5jdGlvbiBhcyBmYWN0b3J5ICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluamVjdGVkID0gaW5qZWN0KG9wdC5mcm9tIHx8IGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbmplY3RlZCA9IGluamVjdChvcHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlZihpbmplY3RlZCkpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gcmVtb3ZlIHRoZSBjaGVjayBpbiAzLjNcbiAgICAgICAgICAgIGlmICh1bndyYXBSZWYpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IGluamVjdGVkLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBzZXQ6IHYgPT4gKGluamVjdGVkLnZhbHVlID0gdilcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgaW5qZWN0ZWQgcHJvcGVydHkgXCIke2tleX1cIiBpcyBhIHJlZiBhbmQgd2lsbCBiZSBhdXRvLXVud3JhcHBlZCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBhbmQgbm8gbG9uZ2VyIG5lZWRzIFxcYC52YWx1ZVxcYCBpbiB0aGUgbmV4dCBtaW5vciByZWxlYXNlLiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBUbyBvcHQtaW4gdG8gdGhlIG5ldyBiZWhhdmlvciBub3csIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYHNldCBcXGBhcHAuY29uZmlnLnVud3JhcEluamVjdGVkUmVmID0gdHJ1ZVxcYCAodGhpcyBjb25maWcgaXMgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgdGVtcG9yYXJ5IGFuZCB3aWxsIG5vdCBiZSBuZWVkZWQgaW4gdGhlIGZ1dHVyZS4pYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eFtrZXldID0gaW5qZWN0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjdHhba2V5XSA9IGluamVjdGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkluamVjdFwiIC8qIE9wdGlvblR5cGVzLklOSkVDVCAqLywga2V5KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNhbGxIb29rKGhvb2ssIGluc3RhbmNlLCB0eXBlKSB7XG4gICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaXNBcnJheShob29rKVxuICAgICAgICA/IGhvb2subWFwKGggPT4gaC5iaW5kKGluc3RhbmNlLnByb3h5KSlcbiAgICAgICAgOiBob29rLmJpbmQoaW5zdGFuY2UucHJveHkpLCBpbnN0YW5jZSwgdHlwZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyKHJhdywgY3R4LCBwdWJsaWNUaGlzLCBrZXkpIHtcbiAgICBjb25zdCBnZXR0ZXIgPSBrZXkuaW5jbHVkZXMoJy4nKVxuICAgICAgICA/IGNyZWF0ZVBhdGhHZXR0ZXIocHVibGljVGhpcywga2V5KVxuICAgICAgICA6ICgpID0+IHB1YmxpY1RoaXNba2V5XTtcbiAgICBpZiAoaXNTdHJpbmcocmF3KSkge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gY3R4W3Jhd107XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgICAgICAgICB3YXRjaChnZXR0ZXIsIGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgd2FybihgSW52YWxpZCB3YXRjaCBoYW5kbGVyIHNwZWNpZmllZCBieSBrZXkgXCIke3Jhd31cImAsIGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24ocmF3KSkge1xuICAgICAgICB3YXRjaChnZXR0ZXIsIHJhdy5iaW5kKHB1YmxpY1RoaXMpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3QocmF3KSkge1xuICAgICAgICBpZiAoaXNBcnJheShyYXcpKSB7XG4gICAgICAgICAgICByYXcuZm9yRWFjaChyID0+IGNyZWF0ZVdhdGNoZXIociwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBpc0Z1bmN0aW9uKHJhdy5oYW5kbGVyKVxuICAgICAgICAgICAgICAgID8gcmF3LmhhbmRsZXIuYmluZChwdWJsaWNUaGlzKVxuICAgICAgICAgICAgICAgIDogY3R4W3Jhdy5oYW5kbGVyXTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgICAgICAgICAgICAgd2F0Y2goZ2V0dGVyLCBoYW5kbGVyLCByYXcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgd2FybihgSW52YWxpZCB3YXRjaCBoYW5kbGVyIHNwZWNpZmllZCBieSBrZXkgXCIke3Jhdy5oYW5kbGVyfVwiYCwgaGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggb3B0aW9uOiBcIiR7a2V5fVwiYCwgcmF3KTtcbiAgICB9XG59XG4vKipcbiAqIFJlc29sdmUgbWVyZ2VkIG9wdGlvbnMgYW5kIGNhY2hlIGl0IG9uIHRoZSBjb21wb25lbnQuXG4gKiBUaGlzIGlzIGRvbmUgb25seSBvbmNlIHBlci1jb21wb25lbnQgc2luY2UgdGhlIG1lcmdpbmcgZG9lcyBub3QgaW52b2x2ZVxuICogaW5zdGFuY2VzLlxuICovXG5mdW5jdGlvbiByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSkge1xuICAgIGNvbnN0IGJhc2UgPSBpbnN0YW5jZS50eXBlO1xuICAgIGNvbnN0IHsgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucyB9ID0gYmFzZTtcbiAgICBjb25zdCB7IG1peGluczogZ2xvYmFsTWl4aW5zLCBvcHRpb25zQ2FjaGU6IGNhY2hlLCBjb25maWc6IHsgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzIH0gfSA9IGluc3RhbmNlLmFwcENvbnRleHQ7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGJhc2UpO1xuICAgIGxldCByZXNvbHZlZDtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgIHJlc29sdmVkID0gY2FjaGVkO1xuICAgIH1cbiAgICBlbHNlIGlmICghZ2xvYmFsTWl4aW5zLmxlbmd0aCAmJiAhbWl4aW5zICYmICFleHRlbmRzT3B0aW9ucykge1xuICAgICAgICB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IGJhc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlc29sdmVkID0ge307XG4gICAgICAgIGlmIChnbG9iYWxNaXhpbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBnbG9iYWxNaXhpbnMuZm9yRWFjaChtID0+IG1lcmdlT3B0aW9ucyhyZXNvbHZlZCwgbSwgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzLCB0cnVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWVyZ2VPcHRpb25zKHJlc29sdmVkLCBiYXNlLCBvcHRpb25NZXJnZVN0cmF0ZWdpZXMpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3QoYmFzZSkpIHtcbiAgICAgICAgY2FjaGUuc2V0KGJhc2UsIHJlc29sdmVkKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc29sdmVkO1xufVxuZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHRvLCBmcm9tLCBzdHJhdHMsIGFzTWl4aW4gPSBmYWxzZSkge1xuICAgIGNvbnN0IHsgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucyB9ID0gZnJvbTtcbiAgICBpZiAoZXh0ZW5kc09wdGlvbnMpIHtcbiAgICAgICAgbWVyZ2VPcHRpb25zKHRvLCBleHRlbmRzT3B0aW9ucywgc3RyYXRzLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKG1peGlucykge1xuICAgICAgICBtaXhpbnMuZm9yRWFjaCgobSkgPT4gbWVyZ2VPcHRpb25zKHRvLCBtLCBzdHJhdHMsIHRydWUpKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZnJvbSkge1xuICAgICAgICBpZiAoYXNNaXhpbiAmJiBrZXkgPT09ICdleHBvc2UnKSB7XG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICB3YXJuKGBcImV4cG9zZVwiIG9wdGlvbiBpcyBpZ25vcmVkIHdoZW4gZGVjbGFyZWQgaW4gbWl4aW5zIG9yIGV4dGVuZHMuIGAgK1xuICAgICAgICAgICAgICAgICAgICBgSXQgc2hvdWxkIG9ubHkgYmUgZGVjbGFyZWQgaW4gdGhlIGJhc2UgY29tcG9uZW50IGl0c2VsZi5gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmF0ID0gaW50ZXJuYWxPcHRpb25NZXJnZVN0cmF0c1trZXldIHx8IChzdHJhdHMgJiYgc3RyYXRzW2tleV0pO1xuICAgICAgICAgICAgdG9ba2V5XSA9IHN0cmF0ID8gc3RyYXQodG9ba2V5XSwgZnJvbVtrZXldKSA6IGZyb21ba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG87XG59XG5jb25zdCBpbnRlcm5hbE9wdGlvbk1lcmdlU3RyYXRzID0ge1xuICAgIGRhdGE6IG1lcmdlRGF0YUZuLFxuICAgIHByb3BzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gICAgZW1pdHM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgICAvLyBvYmplY3RzXG4gICAgbWV0aG9kczogbWVyZ2VPYmplY3RPcHRpb25zLFxuICAgIGNvbXB1dGVkOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gICAgLy8gbGlmZWN5Y2xlXG4gICAgYmVmb3JlQ3JlYXRlOiBtZXJnZUFzQXJyYXksXG4gICAgY3JlYXRlZDogbWVyZ2VBc0FycmF5LFxuICAgIGJlZm9yZU1vdW50OiBtZXJnZUFzQXJyYXksXG4gICAgbW91bnRlZDogbWVyZ2VBc0FycmF5LFxuICAgIGJlZm9yZVVwZGF0ZTogbWVyZ2VBc0FycmF5LFxuICAgIHVwZGF0ZWQ6IG1lcmdlQXNBcnJheSxcbiAgICBiZWZvcmVEZXN0cm95OiBtZXJnZUFzQXJyYXksXG4gICAgYmVmb3JlVW5tb3VudDogbWVyZ2VBc0FycmF5LFxuICAgIGRlc3Ryb3llZDogbWVyZ2VBc0FycmF5LFxuICAgIHVubW91bnRlZDogbWVyZ2VBc0FycmF5LFxuICAgIGFjdGl2YXRlZDogbWVyZ2VBc0FycmF5LFxuICAgIGRlYWN0aXZhdGVkOiBtZXJnZUFzQXJyYXksXG4gICAgZXJyb3JDYXB0dXJlZDogbWVyZ2VBc0FycmF5LFxuICAgIHNlcnZlclByZWZldGNoOiBtZXJnZUFzQXJyYXksXG4gICAgLy8gYXNzZXRzXG4gICAgY29tcG9uZW50czogbWVyZ2VPYmplY3RPcHRpb25zLFxuICAgIGRpcmVjdGl2ZXM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgICAvLyB3YXRjaFxuICAgIHdhdGNoOiBtZXJnZVdhdGNoT3B0aW9ucyxcbiAgICAvLyBwcm92aWRlIC8gaW5qZWN0XG4gICAgcHJvdmlkZTogbWVyZ2VEYXRhRm4sXG4gICAgaW5qZWN0OiBtZXJnZUluamVjdFxufTtcbmZ1bmN0aW9uIG1lcmdlRGF0YUZuKHRvLCBmcm9tKSB7XG4gICAgaWYgKCFmcm9tKSB7XG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG4gICAgaWYgKCF0bykge1xuICAgICAgICByZXR1cm4gZnJvbTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbigpIHtcbiAgICAgICAgcmV0dXJuIChleHRlbmQpKGlzRnVuY3Rpb24odG8pID8gdG8uY2FsbCh0aGlzLCB0aGlzKSA6IHRvLCBpc0Z1bmN0aW9uKGZyb20pID8gZnJvbS5jYWxsKHRoaXMsIHRoaXMpIDogZnJvbSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG1lcmdlSW5qZWN0KHRvLCBmcm9tKSB7XG4gICAgcmV0dXJuIG1lcmdlT2JqZWN0T3B0aW9ucyhub3JtYWxpemVJbmplY3QodG8pLCBub3JtYWxpemVJbmplY3QoZnJvbSkpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0KHJhdykge1xuICAgIGlmIChpc0FycmF5KHJhdykpIHtcbiAgICAgICAgY29uc3QgcmVzID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmF3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXNbcmF3W2ldXSA9IHJhd1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICByZXR1cm4gcmF3O1xufVxuZnVuY3Rpb24gbWVyZ2VBc0FycmF5KHRvLCBmcm9tKSB7XG4gICAgcmV0dXJuIHRvID8gWy4uLm5ldyBTZXQoW10uY29uY2F0KHRvLCBmcm9tKSldIDogZnJvbTtcbn1cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0T3B0aW9ucyh0bywgZnJvbSkge1xuICAgIHJldHVybiB0byA/IGV4dGVuZChleHRlbmQoT2JqZWN0LmNyZWF0ZShudWxsKSwgdG8pLCBmcm9tKSA6IGZyb207XG59XG5mdW5jdGlvbiBtZXJnZVdhdGNoT3B0aW9ucyh0bywgZnJvbSkge1xuICAgIGlmICghdG8pXG4gICAgICAgIHJldHVybiBmcm9tO1xuICAgIGlmICghZnJvbSlcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIGNvbnN0IG1lcmdlZCA9IGV4dGVuZChPYmplY3QuY3JlYXRlKG51bGwpLCB0byk7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZnJvbSkge1xuICAgICAgICBtZXJnZWRba2V5XSA9IG1lcmdlQXNBcnJheSh0b1trZXldLCBmcm9tW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkO1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBpc1N0YXRlZnVsLCAvLyByZXN1bHQgb2YgYml0d2lzZSBmbGFnIGNvbXBhcmlzb25cbmlzU1NSID0gZmFsc2UpIHtcbiAgICBjb25zdCBwcm9wcyA9IHt9O1xuICAgIGNvbnN0IGF0dHJzID0ge307XG4gICAgZGVmKGF0dHJzLCBJbnRlcm5hbE9iamVjdEtleSwgMSk7XG4gICAgaW5zdGFuY2UucHJvcHNEZWZhdWx0cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgc2V0RnVsbFByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcHJvcHMsIGF0dHJzKTtcbiAgICAvLyBlbnN1cmUgYWxsIGRlY2xhcmVkIHByb3Aga2V5cyBhcmUgcHJlc2VudFxuICAgIGZvciAoY29uc3Qga2V5IGluIGluc3RhbmNlLnByb3BzT3B0aW9uc1swXSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gcHJvcHMpKSB7XG4gICAgICAgICAgICBwcm9wc1trZXldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHZhbGlkYXRpb25cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHZhbGlkYXRlUHJvcHMocmF3UHJvcHMgfHwge30sIHByb3BzLCBpbnN0YW5jZSk7XG4gICAgfVxuICAgIGlmIChpc1N0YXRlZnVsKSB7XG4gICAgICAgIC8vIHN0YXRlZnVsXG4gICAgICAgIGluc3RhbmNlLnByb3BzID0gaXNTU1IgPyBwcm9wcyA6IHNoYWxsb3dSZWFjdGl2ZShwcm9wcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIWluc3RhbmNlLnR5cGUucHJvcHMpIHtcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uYWwgdy8gb3B0aW9uYWwgcHJvcHMsIHByb3BzID09PSBhdHRyc1xuICAgICAgICAgICAgaW5zdGFuY2UucHJvcHMgPSBhdHRycztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uYWwgdy8gZGVjbGFyZWQgcHJvcHNcbiAgICAgICAgICAgIGluc3RhbmNlLnByb3BzID0gcHJvcHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5zdGFuY2UuYXR0cnMgPSBhdHRycztcbn1cbmZ1bmN0aW9uIGlzSW5IbXJDb250ZXh0KGluc3RhbmNlKSB7XG4gICAgd2hpbGUgKGluc3RhbmNlKSB7XG4gICAgICAgIGlmIChpbnN0YW5jZS50eXBlLl9faG1ySWQpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaW5zdGFuY2UgPSBpbnN0YW5jZS5wYXJlbnQ7XG4gICAgfVxufVxuZnVuY3Rpb24gdXBkYXRlUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCByYXdQcmV2UHJvcHMsIG9wdGltaXplZCkge1xuICAgIGNvbnN0IHsgcHJvcHMsIGF0dHJzLCB2bm9kZTogeyBwYXRjaEZsYWcgfSB9ID0gaW5zdGFuY2U7XG4gICAgY29uc3QgcmF3Q3VycmVudFByb3BzID0gdG9SYXcocHJvcHMpO1xuICAgIGNvbnN0IFtvcHRpb25zXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcbiAgICBsZXQgaGFzQXR0cnNDaGFuZ2VkID0gZmFsc2U7XG4gICAgaWYgKFxuICAgIC8vIGFsd2F5cyBmb3JjZSBmdWxsIGRpZmYgaW4gZGV2XG4gICAgLy8gLSAjMTk0MiBpZiBobXIgaXMgZW5hYmxlZCB3aXRoIHNmYyBjb21wb25lbnRcbiAgICAvLyAtIHZpdGUjODcyIG5vbi1zZmMgY29tcG9uZW50IHVzZWQgYnkgc2ZjIGNvbXBvbmVudFxuICAgICEoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzSW5IbXJDb250ZXh0KGluc3RhbmNlKSkgJiZcbiAgICAgICAgKG9wdGltaXplZCB8fCBwYXRjaEZsYWcgPiAwKSAmJlxuICAgICAgICAhKHBhdGNoRmxhZyAmIDE2IC8qIFBhdGNoRmxhZ3MuRlVMTF9QUk9QUyAqLykpIHtcbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDggLyogUGF0Y2hGbGFncy5QUk9QUyAqLykge1xuICAgICAgICAgICAgLy8gQ29tcGlsZXItZ2VuZXJhdGVkIHByb3BzICYgbm8ga2V5cyBjaGFuZ2UsIGp1c3Qgc2V0IHRoZSB1cGRhdGVkXG4gICAgICAgICAgICAvLyB0aGUgcHJvcHMuXG4gICAgICAgICAgICBjb25zdCBwcm9wc1RvVXBkYXRlID0gaW5zdGFuY2Uudm5vZGUuZHluYW1pY1Byb3BzO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGtleSA9IHByb3BzVG9VcGRhdGVbaV07XG4gICAgICAgICAgICAgICAgLy8gc2tpcCBpZiB0aGUgcHJvcCBrZXkgaXMgYSBkZWNsYXJlZCBlbWl0IGV2ZW50IGxpc3RlbmVyXG4gICAgICAgICAgICAgICAgaWYgKGlzRW1pdExpc3RlbmVyKGluc3RhbmNlLmVtaXRzT3B0aW9ucywga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUFJPUFMgZmxhZyBndWFyYW50ZWVzIHJhd1Byb3BzIHRvIGJlIG5vbi1udWxsXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByYXdQcm9wc1trZXldO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGF0dHIgLyBwcm9wcyBzZXBhcmF0aW9uIHdhcyBkb25lIG9uIGluaXQgYW5kIHdpbGwgYmUgY29uc2lzdGVudFxuICAgICAgICAgICAgICAgICAgICAvLyBpbiB0aGlzIGNvZGUgcGF0aCwgc28ganVzdCBjaGVjayBpZiBhdHRycyBoYXZlIGl0LlxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duKGF0dHJzLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IGF0dHJzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wc1tjYW1lbGl6ZWRLZXldID0gcmVzb2x2ZVByb3BWYWx1ZShvcHRpb25zLCByYXdDdXJyZW50UHJvcHMsIGNhbWVsaXplZEtleSwgdmFsdWUsIGluc3RhbmNlLCBmYWxzZSAvKiBpc0Fic2VudCAqLyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gZnVsbCBwcm9wcyB1cGRhdGUuXG4gICAgICAgIGlmIChzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpKSB7XG4gICAgICAgICAgICBoYXNBdHRyc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluIGNhc2Ugb2YgZHluYW1pYyBwcm9wcywgY2hlY2sgaWYgd2UgbmVlZCB0byBkZWxldGUga2V5cyBmcm9tXG4gICAgICAgIC8vIHRoZSBwcm9wcyBvYmplY3RcbiAgICAgICAgbGV0IGtlYmFiS2V5O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdDdXJyZW50UHJvcHMpIHtcbiAgICAgICAgICAgIGlmICghcmF3UHJvcHMgfHxcbiAgICAgICAgICAgICAgICAvLyBmb3IgY2FtZWxDYXNlXG4gICAgICAgICAgICAgICAgKCFoYXNPd24ocmF3UHJvcHMsIGtleSkgJiZcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQncyBwb3NzaWJsZSB0aGUgb3JpZ2luYWwgcHJvcHMgd2FzIHBhc3NlZCBpbiBhcyBrZWJhYi1jYXNlXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlICgjOTU1KVxuICAgICAgICAgICAgICAgICAgICAoKGtlYmFiS2V5ID0gaHlwaGVuYXRlKGtleSkpID09PSBrZXkgfHwgIWhhc093bihyYXdQcm9wcywga2ViYWJLZXkpKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmF3UHJldlByb3BzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgY2FtZWxDYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAocmF3UHJldlByb3BzW2tleV0gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBrZWJhYi1jYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3UHJldlByb3BzW2tlYmFiS2V5XSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHNba2V5XSA9IHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcmF3Q3VycmVudFByb3BzLCBrZXksIHVuZGVmaW5lZCwgaW5zdGFuY2UsIHRydWUgLyogaXNBYnNlbnQgKi8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgZnVuY3Rpb25hbCBjb21wb25lbnQgdy9vIHByb3BzIGRlY2xhcmF0aW9uLCBwcm9wcyBhbmRcbiAgICAgICAgLy8gYXR0cnMgcG9pbnQgdG8gdGhlIHNhbWUgb2JqZWN0IHNvIGl0IHNob3VsZCBhbHJlYWR5IGhhdmUgYmVlbiB1cGRhdGVkLlxuICAgICAgICBpZiAoYXR0cnMgIT09IHJhd0N1cnJlbnRQcm9wcykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJhd1Byb3BzIHx8XG4gICAgICAgICAgICAgICAgICAgICghaGFzT3duKHJhd1Byb3BzLCBrZXkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoIWZhbHNlICkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRyc1trZXldO1xuICAgICAgICAgICAgICAgICAgICBoYXNBdHRyc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyB0cmlnZ2VyIHVwZGF0ZXMgZm9yICRhdHRycyBpbiBjYXNlIGl0J3MgdXNlZCBpbiBjb21wb25lbnQgc2xvdHNcbiAgICBpZiAoaGFzQXR0cnNDaGFuZ2VkKSB7XG4gICAgICAgIHRyaWdnZXIoaW5zdGFuY2UsIFwic2V0XCIgLyogVHJpZ2dlck9wVHlwZXMuU0VUICovLCAnJGF0dHJzJyk7XG4gICAgfVxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgdmFsaWRhdGVQcm9wcyhyYXdQcm9wcyB8fCB7fSwgcHJvcHMsIGluc3RhbmNlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpIHtcbiAgICBjb25zdCBbb3B0aW9ucywgbmVlZENhc3RLZXlzXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcbiAgICBsZXQgaGFzQXR0cnNDaGFuZ2VkID0gZmFsc2U7XG4gICAgbGV0IHJhd0Nhc3RWYWx1ZXM7XG4gICAgaWYgKHJhd1Byb3BzKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiByYXdQcm9wcykge1xuICAgICAgICAgICAgLy8ga2V5LCByZWYgYXJlIHJlc2VydmVkIGFuZCBuZXZlciBwYXNzZWQgZG93blxuICAgICAgICAgICAgaWYgKGlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmF3UHJvcHNba2V5XTtcbiAgICAgICAgICAgIC8vIHByb3Agb3B0aW9uIG5hbWVzIGFyZSBjYW1lbGl6ZWQgZHVyaW5nIG5vcm1hbGl6YXRpb24sIHNvIHRvIHN1cHBvcnRcbiAgICAgICAgICAgIC8vIGtlYmFiIC0+IGNhbWVsIGNvbnZlcnNpb24gaGVyZSB3ZSBuZWVkIHRvIGNhbWVsaXplIHRoZSBrZXkuXG4gICAgICAgICAgICBsZXQgY2FtZWxLZXk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgKGNhbWVsS2V5ID0gY2FtZWxpemUoa2V5KSkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFuZWVkQ2FzdEtleXMgfHwgIW5lZWRDYXN0S2V5cy5pbmNsdWRlcyhjYW1lbEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcHNbY2FtZWxLZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAocmF3Q2FzdFZhbHVlcyB8fCAocmF3Q2FzdFZhbHVlcyA9IHt9KSlbY2FtZWxLZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWlzRW1pdExpc3RlbmVyKGluc3RhbmNlLmVtaXRzT3B0aW9ucywga2V5KSkge1xuICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiBhdHRycykgfHwgdmFsdWUgIT09IGF0dHJzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBoYXNBdHRyc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobmVlZENhc3RLZXlzKSB7XG4gICAgICAgIGNvbnN0IHJhd0N1cnJlbnRQcm9wcyA9IHRvUmF3KHByb3BzKTtcbiAgICAgICAgY29uc3QgY2FzdFZhbHVlcyA9IHJhd0Nhc3RWYWx1ZXMgfHwgRU1QVFlfT0JKO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5lZWRDYXN0S2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gbmVlZENhc3RLZXlzW2ldO1xuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcmF3Q3VycmVudFByb3BzLCBrZXksIGNhc3RWYWx1ZXNba2V5XSwgaW5zdGFuY2UsICFoYXNPd24oY2FzdFZhbHVlcywga2V5KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhc0F0dHJzQ2hhbmdlZDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcHJvcHMsIGtleSwgdmFsdWUsIGluc3RhbmNlLCBpc0Fic2VudCkge1xuICAgIGNvbnN0IG9wdCA9IG9wdGlvbnNba2V5XTtcbiAgICBpZiAob3B0ICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgaGFzRGVmYXVsdCA9IGhhc093bihvcHQsICdkZWZhdWx0Jyk7XG4gICAgICAgIC8vIGRlZmF1bHQgdmFsdWVzXG4gICAgICAgIGlmIChoYXNEZWZhdWx0ICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IG9wdC5kZWZhdWx0O1xuICAgICAgICAgICAgaWYgKG9wdC50eXBlICE9PSBGdW5jdGlvbiAmJiBpc0Z1bmN0aW9uKGRlZmF1bHRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHByb3BzRGVmYXVsdHMgfSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gcHJvcHNEZWZhdWx0cykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3BzRGVmYXVsdHNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcHJvcHNEZWZhdWx0c1trZXldID0gZGVmYXVsdFZhbHVlLmNhbGwobnVsbCwgcHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICB1bnNldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGJvb2xlYW4gY2FzdGluZ1xuICAgICAgICBpZiAob3B0WzAgLyogQm9vbGVhbkZsYWdzLnNob3VsZENhc3QgKi9dKSB7XG4gICAgICAgICAgICBpZiAoaXNBYnNlbnQgJiYgIWhhc0RlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAob3B0WzEgLyogQm9vbGVhbkZsYWdzLnNob3VsZENhc3RUcnVlICovXSAmJlxuICAgICAgICAgICAgICAgICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBub3JtYWxpemVQcm9wc09wdGlvbnMoY29tcCwgYXBwQ29udGV4dCwgYXNNaXhpbiA9IGZhbHNlKSB7XG4gICAgY29uc3QgY2FjaGUgPSBhcHBDb250ZXh0LnByb3BzQ2FjaGU7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGNvbXApO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgY29uc3QgcmF3ID0gY29tcC5wcm9wcztcbiAgICBjb25zdCBub3JtYWxpemVkID0ge307XG4gICAgY29uc3QgbmVlZENhc3RLZXlzID0gW107XG4gICAgLy8gYXBwbHkgbWl4aW4vZXh0ZW5kcyBwcm9wc1xuICAgIGxldCBoYXNFeHRlbmRzID0gZmFsc2U7XG4gICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcbiAgICAgICAgY29uc3QgZXh0ZW5kUHJvcHMgPSAocmF3KSA9PiB7XG4gICAgICAgICAgICBoYXNFeHRlbmRzID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IFtwcm9wcywga2V5c10gPSBub3JtYWxpemVQcm9wc09wdGlvbnMocmF3LCBhcHBDb250ZXh0LCB0cnVlKTtcbiAgICAgICAgICAgIGV4dGVuZChub3JtYWxpemVkLCBwcm9wcyk7XG4gICAgICAgICAgICBpZiAoa2V5cylcbiAgICAgICAgICAgICAgICBuZWVkQ2FzdEtleXMucHVzaCguLi5rZXlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFhc01peGluICYmIGFwcENvbnRleHQubWl4aW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgYXBwQ29udGV4dC5taXhpbnMuZm9yRWFjaChleHRlbmRQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXAuZXh0ZW5kcykge1xuICAgICAgICAgICAgZXh0ZW5kUHJvcHMoY29tcC5leHRlbmRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcC5taXhpbnMpIHtcbiAgICAgICAgICAgIGNvbXAubWl4aW5zLmZvckVhY2goZXh0ZW5kUHJvcHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghcmF3ICYmICFoYXNFeHRlbmRzKSB7XG4gICAgICAgIGlmIChpc09iamVjdChjb21wKSkge1xuICAgICAgICAgICAgY2FjaGUuc2V0KGNvbXAsIEVNUFRZX0FSUik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEVNUFRZX0FSUjtcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhdy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNTdHJpbmcocmF3W2ldKSkge1xuICAgICAgICAgICAgICAgIHdhcm4oYHByb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC5gLCByYXdbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGNhbWVsaXplKHJhd1tpXSk7XG4gICAgICAgICAgICBpZiAodmFsaWRhdGVQcm9wTmFtZShub3JtYWxpemVkS2V5KSkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRbbm9ybWFsaXplZEtleV0gPSBFTVBUWV9PQko7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAocmF3KSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzT2JqZWN0KHJhdykpIHtcbiAgICAgICAgICAgIHdhcm4oYGludmFsaWQgcHJvcHMgb3B0aW9uc2AsIHJhdyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmF3KSB7XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgICAgIGlmICh2YWxpZGF0ZVByb3BOYW1lKG5vcm1hbGl6ZWRLZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0ID0gcmF3W2tleV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcCA9IChub3JtYWxpemVkW25vcm1hbGl6ZWRLZXldID1cbiAgICAgICAgICAgICAgICAgICAgaXNBcnJheShvcHQpIHx8IGlzRnVuY3Rpb24ob3B0KSA/IHsgdHlwZTogb3B0IH0gOiBvcHQpO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIHByb3BbMCAvKiBCb29sZWFuRmxhZ3Muc2hvdWxkQ2FzdCAqL10gPSBib29sZWFuSW5kZXggPiAtMTtcbiAgICAgICAgICAgICAgICAgICAgcHJvcFsxIC8qIEJvb2xlYW5GbGFncy5zaG91bGRDYXN0VHJ1ZSAqL10gPVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4O1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcHJvcCBuZWVkcyBib29sZWFuIGNhc3Rpbmcgb3IgZGVmYXVsdCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoYm9vbGVhbkluZGV4ID4gLTEgfHwgaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRDYXN0S2V5cy5wdXNoKG5vcm1hbGl6ZWRLZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IFtub3JtYWxpemVkLCBuZWVkQ2FzdEtleXNdO1xuICAgIGlmIChpc09iamVjdChjb21wKSkge1xuICAgICAgICBjYWNoZS5zZXQoY29tcCwgcmVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcE5hbWUoa2V5KSB7XG4gICAgaWYgKGtleVswXSAhPT0gJyQnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgd2FybihgSW52YWxpZCBwcm9wIG5hbWU6IFwiJHtrZXl9XCIgaXMgYSByZXNlcnZlZCBwcm9wZXJ0eS5gKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8gdXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIHR5cGUgY29uc3RydWN0b3JzXG4vLyBzbyB0aGF0IGl0IHdvcmtzIGFjcm9zcyB2bXMgLyBpZnJhbWVzLlxuZnVuY3Rpb24gZ2V0VHlwZShjdG9yKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBjdG9yICYmIGN0b3IudG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoXFx3KykvKTtcbiAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6IGN0b3IgPT09IG51bGwgPyAnbnVsbCcgOiAnJztcbn1cbmZ1bmN0aW9uIGlzU2FtZVR5cGUoYSwgYikge1xuICAgIHJldHVybiBnZXRUeXBlKGEpID09PSBnZXRUeXBlKGIpO1xufVxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4KHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgICBpZiAoaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgICAgICByZXR1cm4gZXhwZWN0ZWRUeXBlcy5maW5kSW5kZXgodCA9PiBpc1NhbWVUeXBlKHQsIHR5cGUpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihleHBlY3RlZFR5cGVzKSkge1xuICAgICAgICByZXR1cm4gaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzLCB0eXBlKSA/IDAgOiAtMTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuLyoqXG4gKiBkZXYgb25seVxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BzKHJhd1Byb3BzLCBwcm9wcywgaW5zdGFuY2UpIHtcbiAgICBjb25zdCByZXNvbHZlZFZhbHVlcyA9IHRvUmF3KHByb3BzKTtcbiAgICBjb25zdCBvcHRpb25zID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdO1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IG9wdCA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgaWYgKG9wdCA9PSBudWxsKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIHZhbGlkYXRlUHJvcChrZXksIHJlc29sdmVkVmFsdWVzW2tleV0sIG9wdCwgIWhhc093bihyYXdQcm9wcywga2V5KSAmJiAhaGFzT3duKHJhd1Byb3BzLCBoeXBoZW5hdGUoa2V5KSkpO1xuICAgIH1cbn1cbi8qKlxuICogZGV2IG9ubHlcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVQcm9wKG5hbWUsIHZhbHVlLCBwcm9wLCBpc0Fic2VudCkge1xuICAgIGNvbnN0IHsgdHlwZSwgcmVxdWlyZWQsIHZhbGlkYXRvciB9ID0gcHJvcDtcbiAgICAvLyByZXF1aXJlZCFcbiAgICBpZiAocmVxdWlyZWQgJiYgaXNBYnNlbnQpIHtcbiAgICAgICAgd2FybignTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gbWlzc2luZyBidXQgb3B0aW9uYWxcbiAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHR5cGUgY2hlY2tcbiAgICBpZiAodHlwZSAhPSBudWxsICYmIHR5cGUgIT09IHRydWUpIHtcbiAgICAgICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgdHlwZXMgPSBpc0FycmF5KHR5cGUpID8gdHlwZSA6IFt0eXBlXTtcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICAgICAgICAvLyB2YWx1ZSBpcyB2YWxpZCBhcyBsb25nIGFzIG9uZSBvZiB0aGUgc3BlY2lmaWVkIHR5cGVzIG1hdGNoXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoICYmICFpc1ZhbGlkOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHsgdmFsaWQsIGV4cGVjdGVkVHlwZSB9ID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZXNbaV0pO1xuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICAgICAgICBpc1ZhbGlkID0gdmFsaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICB3YXJuKGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGN1c3RvbSB2YWxpZGF0b3JcbiAgICBpZiAodmFsaWRhdG9yICYmICF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICAgIHdhcm4oJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nKTtcbiAgICB9XG59XG5jb25zdCBpc1NpbXBsZVR5cGUgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoJ1N0cmluZyxOdW1iZXIsQm9vbGVhbixGdW5jdGlvbixTeW1ib2wsQmlnSW50Jyk7XG4vKipcbiAqIGRldiBvbmx5XG4gKi9cbmZ1bmN0aW9uIGFzc2VydFR5cGUodmFsdWUsIHR5cGUpIHtcbiAgICBsZXQgdmFsaWQ7XG4gICAgY29uc3QgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgICBpZiAoaXNTaW1wbGVUeXBlKGV4cGVjdGVkVHlwZSkpIHtcbiAgICAgICAgY29uc3QgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICAgICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgICAgICB2YWxpZCA9IGlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgICAgIHZhbGlkID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ251bGwnKSB7XG4gICAgICAgIHZhbGlkID0gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsaWQsXG4gICAgICAgIGV4cGVjdGVkVHlwZVxuICAgIH07XG59XG4vKipcbiAqIGRldiBvbmx5XG4gKi9cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICAgIGxldCBtZXNzYWdlID0gYEludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCIke25hbWV9XCIuYCArXG4gICAgICAgIGAgRXhwZWN0ZWQgJHtleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcgfCAnKX1gO1xuICAgIGNvbnN0IGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gICAgY29uc3QgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgICBjb25zdCBleHBlY3RlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKTtcbiAgICBjb25zdCByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgZXhwZWN0ZWQgdmFsdWVcbiAgICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICAgIWlzQm9vbGVhbihleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHtcbiAgICAgICAgbWVzc2FnZSArPSBgIHdpdGggdmFsdWUgJHtleHBlY3RlZFZhbHVlfWA7XG4gICAgfVxuICAgIG1lc3NhZ2UgKz0gYCwgZ290ICR7cmVjZWl2ZWRUeXBlfSBgO1xuICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICAgIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgICAgICBtZXNzYWdlICs9IGB3aXRoIHZhbHVlICR7cmVjZWl2ZWRWYWx1ZX0uYDtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG59XG4vKipcbiAqIGRldiBvbmx5XG4gKi9cbmZ1bmN0aW9uIHN0eWxlVmFsdWUodmFsdWUsIHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGBcIiR7dmFsdWV9XCJgO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgICAgICByZXR1cm4gYCR7TnVtYmVyKHZhbHVlKX1gO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGAke3ZhbHVlfWA7XG4gICAgfVxufVxuLyoqXG4gKiBkZXYgb25seVxuICovXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUodHlwZSkge1xuICAgIGNvbnN0IGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuICAgIHJldHVybiBleHBsaWNpdFR5cGVzLnNvbWUoZWxlbSA9PiB0eXBlLnRvTG93ZXJDYXNlKCkgPT09IGVsZW0pO1xufVxuLyoqXG4gKiBkZXYgb25seVxuICovXG5mdW5jdGlvbiBpc0Jvb2xlYW4oLi4uYXJncykge1xuICAgIHJldHVybiBhcmdzLnNvbWUoZWxlbSA9PiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJyk7XG59XG5cbmNvbnN0IGlzSW50ZXJuYWxLZXkgPSAoa2V5KSA9PiBrZXlbMF0gPT09ICdfJyB8fCBrZXkgPT09ICckc3RhYmxlJztcbmNvbnN0IG5vcm1hbGl6ZVNsb3RWYWx1ZSA9ICh2YWx1ZSkgPT4gaXNBcnJheSh2YWx1ZSlcbiAgICA/IHZhbHVlLm1hcChub3JtYWxpemVWTm9kZSlcbiAgICA6IFtub3JtYWxpemVWTm9kZSh2YWx1ZSldO1xuY29uc3Qgbm9ybWFsaXplU2xvdCA9IChrZXksIHJhd1Nsb3QsIGN0eCkgPT4ge1xuICAgIGlmIChyYXdTbG90Ll9uKSB7XG4gICAgICAgIC8vIGFscmVhZHkgbm9ybWFsaXplZCAtICM1MzUzXG4gICAgICAgIHJldHVybiByYXdTbG90O1xuICAgIH1cbiAgICBjb25zdCBub3JtYWxpemVkID0gd2l0aEN0eCgoLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGN1cnJlbnRJbnN0YW5jZSkge1xuICAgICAgICAgICAgd2FybihgU2xvdCBcIiR7a2V5fVwiIGludm9rZWQgb3V0c2lkZSBvZiB0aGUgcmVuZGVyIGZ1bmN0aW9uOiBgICtcbiAgICAgICAgICAgICAgICBgdGhpcyB3aWxsIG5vdCB0cmFjayBkZXBlbmRlbmNpZXMgdXNlZCBpbiB0aGUgc2xvdC4gYCArXG4gICAgICAgICAgICAgICAgYEludm9rZSB0aGUgc2xvdCBmdW5jdGlvbiBpbnNpZGUgdGhlIHJlbmRlciBmdW5jdGlvbiBpbnN0ZWFkLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub3JtYWxpemVTbG90VmFsdWUocmF3U2xvdCguLi5hcmdzKSk7XG4gICAgfSwgY3R4KTtcbiAgICBub3JtYWxpemVkLl9jID0gZmFsc2U7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59O1xuY29uc3Qgbm9ybWFsaXplT2JqZWN0U2xvdHMgPSAocmF3U2xvdHMsIHNsb3RzLCBpbnN0YW5jZSkgPT4ge1xuICAgIGNvbnN0IGN0eCA9IHJhd1Nsb3RzLl9jdHg7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmF3U2xvdHMpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJuYWxLZXkoa2V5KSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHJhd1Nsb3RzW2tleV07XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgICAgc2xvdHNba2V5XSA9IG5vcm1hbGl6ZVNsb3Qoa2V5LCB2YWx1ZSwgY3R4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgIShmYWxzZSApKSB7XG4gICAgICAgICAgICAgICAgd2FybihgTm9uLWZ1bmN0aW9uIHZhbHVlIGVuY291bnRlcmVkIGZvciBzbG90IFwiJHtrZXl9XCIuIGAgK1xuICAgICAgICAgICAgICAgICAgICBgUHJlZmVyIGZ1bmN0aW9uIHNsb3RzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgIHNsb3RzW2tleV0gPSAoKSA9PiBub3JtYWxpemVkO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IG5vcm1hbGl6ZVZOb2RlU2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuKSA9PiB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAhaXNLZWVwQWxpdmUoaW5zdGFuY2Uudm5vZGUpICYmXG4gICAgICAgICEoZmFsc2UgKSkge1xuICAgICAgICB3YXJuKGBOb24tZnVuY3Rpb24gdmFsdWUgZW5jb3VudGVyZWQgZm9yIGRlZmF1bHQgc2xvdC4gYCArXG4gICAgICAgICAgICBgUHJlZmVyIGZ1bmN0aW9uIHNsb3RzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuYCk7XG4gICAgfVxuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVTbG90VmFsdWUoY2hpbGRyZW4pO1xuICAgIGluc3RhbmNlLnNsb3RzLmRlZmF1bHQgPSAoKSA9PiBub3JtYWxpemVkO1xufTtcbmNvbnN0IGluaXRTbG90cyA9IChpbnN0YW5jZSwgY2hpbGRyZW4pID0+IHtcbiAgICBpZiAoaW5zdGFuY2Uudm5vZGUuc2hhcGVGbGFnICYgMzIgLyogU2hhcGVGbGFncy5TTE9UU19DSElMRFJFTiAqLykge1xuICAgICAgICBjb25zdCB0eXBlID0gY2hpbGRyZW4uXztcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIC8vIHVzZXJzIGNhbiBnZXQgdGhlIHNoYWxsb3cgcmVhZG9ubHkgdmVyc2lvbiBvZiB0aGUgc2xvdHMgb2JqZWN0IHRocm91Z2ggYHRoaXMuJHNsb3RzYCxcbiAgICAgICAgICAgIC8vIHdlIHNob3VsZCBhdm9pZCB0aGUgcHJveHkgb2JqZWN0IHBvbGx1dGluZyB0aGUgc2xvdHMgb2YgdGhlIGludGVybmFsIGluc3RhbmNlXG4gICAgICAgICAgICBpbnN0YW5jZS5zbG90cyA9IHRvUmF3KGNoaWxkcmVuKTtcbiAgICAgICAgICAgIC8vIG1ha2UgY29tcGlsZXIgbWFya2VyIG5vbi1lbnVtZXJhYmxlXG4gICAgICAgICAgICBkZWYoY2hpbGRyZW4sICdfJywgdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub3JtYWxpemVPYmplY3RTbG90cyhjaGlsZHJlbiwgKGluc3RhbmNlLnNsb3RzID0ge30pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW5zdGFuY2Uuc2xvdHMgPSB7fTtcbiAgICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgICAgICBub3JtYWxpemVWTm9kZVNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVmKGluc3RhbmNlLnNsb3RzLCBJbnRlcm5hbE9iamVjdEtleSwgMSk7XG59O1xuY29uc3QgdXBkYXRlU2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjb25zdCB7IHZub2RlLCBzbG90cyB9ID0gaW5zdGFuY2U7XG4gICAgbGV0IG5lZWREZWxldGlvbkNoZWNrID0gdHJ1ZTtcbiAgICBsZXQgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0ID0gRU1QVFlfT0JKO1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAzMiAvKiBTaGFwZUZsYWdzLlNMT1RTX0NISUxEUkVOICovKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBjaGlsZHJlbi5fO1xuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgLy8gY29tcGlsZWQgc2xvdHMuXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzSG1yVXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBQYXJlbnQgd2FzIEhNUiB1cGRhdGVkIHNvIHNsb3QgY29udGVudCBtYXkgaGF2ZSBjaGFuZ2VkLlxuICAgICAgICAgICAgICAgIC8vIGZvcmNlIHVwZGF0ZSBzbG90cyBhbmQgbWFyayBpbnN0YW5jZSBmb3IgaG1yIGFzIHdlbGxcbiAgICAgICAgICAgICAgICBleHRlbmQoc2xvdHMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdGltaXplZCAmJiB0eXBlID09PSAxIC8qIFNsb3RGbGFncy5TVEFCTEUgKi8pIHtcbiAgICAgICAgICAgICAgICAvLyBjb21waWxlZCBBTkQgc3RhYmxlLlxuICAgICAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gdXBkYXRlLCBhbmQgc2tpcCBzdGFsZSBzbG90cyByZW1vdmFsLlxuICAgICAgICAgICAgICAgIG5lZWREZWxldGlvbkNoZWNrID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBjb21waWxlZCBidXQgZHluYW1pYyAodi1pZi92LWZvciBvbiBzbG90cykgLSB1cGRhdGUgc2xvdHMsIGJ1dCBza2lwXG4gICAgICAgICAgICAgICAgLy8gbm9ybWFsaXphdGlvbi5cbiAgICAgICAgICAgICAgICBleHRlbmQoc2xvdHMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAvLyAjMjg5M1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gcmVuZGVyaW5nIHRoZSBvcHRpbWl6ZWQgc2xvdHMgYnkgbWFudWFsbHkgd3JpdHRlbiByZW5kZXIgZnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBkZWxldGUgdGhlIGBzbG90cy5fYCBmbGFnIGlmIG5lY2Vzc2FyeSB0byBtYWtlIHN1YnNlcXVlbnQgdXBkYXRlcyByZWxpYWJsZSxcbiAgICAgICAgICAgICAgICAvLyBpLmUuIGxldCB0aGUgYHJlbmRlclNsb3RgIGNyZWF0ZSB0aGUgYmFpbGVkIEZyYWdtZW50XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpbWl6ZWQgJiYgdHlwZSA9PT0gMSAvKiBTbG90RmxhZ3MuU1RBQkxFICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzbG90cy5fO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5lZWREZWxldGlvbkNoZWNrID0gIWNoaWxkcmVuLiRzdGFibGU7XG4gICAgICAgICAgICBub3JtYWxpemVPYmplY3RTbG90cyhjaGlsZHJlbiwgc2xvdHMpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IGNoaWxkcmVuO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaGlsZHJlbikge1xuICAgICAgICAvLyBub24gc2xvdCBvYmplY3QgY2hpbGRyZW4gKGRpcmVjdCB2YWx1ZSkgcGFzc2VkIHRvIGEgY29tcG9uZW50XG4gICAgICAgIG5vcm1hbGl6ZVZOb2RlU2xvdHMoaW5zdGFuY2UsIGNoaWxkcmVuKTtcbiAgICAgICAgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0ID0geyBkZWZhdWx0OiAxIH07XG4gICAgfVxuICAgIC8vIGRlbGV0ZSBzdGFsZSBzbG90c1xuICAgIGlmIChuZWVkRGVsZXRpb25DaGVjaykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzbG90cykge1xuICAgICAgICAgICAgaWYgKCFpc0ludGVybmFsS2V5KGtleSkgJiYgIShrZXkgaW4gZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzbG90c1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuZnVuY3Rpb24gY3JlYXRlQXBwQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhcHA6IG51bGwsXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgaXNOYXRpdmVUYWc6IE5PLFxuICAgICAgICAgICAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuICAgICAgICAgICAgZ2xvYmFsUHJvcGVydGllczoge30sXG4gICAgICAgICAgICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IHt9LFxuICAgICAgICAgICAgZXJyb3JIYW5kbGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB3YXJuSGFuZGxlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY29tcGlsZXJPcHRpb25zOiB7fVxuICAgICAgICB9LFxuICAgICAgICBtaXhpbnM6IFtdLFxuICAgICAgICBjb21wb25lbnRzOiB7fSxcbiAgICAgICAgZGlyZWN0aXZlczoge30sXG4gICAgICAgIHByb3ZpZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgICBvcHRpb25zQ2FjaGU6IG5ldyBXZWFrTWFwKCksXG4gICAgICAgIHByb3BzQ2FjaGU6IG5ldyBXZWFrTWFwKCksXG4gICAgICAgIGVtaXRzQ2FjaGU6IG5ldyBXZWFrTWFwKClcbiAgICB9O1xufVxubGV0IHVpZCA9IDA7XG5mdW5jdGlvbiBjcmVhdGVBcHBBUEkocmVuZGVyLCBoeWRyYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUFwcChyb290Q29tcG9uZW50LCByb290UHJvcHMgPSBudWxsKSB7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihyb290Q29tcG9uZW50KSkge1xuICAgICAgICAgICAgcm9vdENvbXBvbmVudCA9IE9iamVjdC5hc3NpZ24oe30sIHJvb3RDb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb290UHJvcHMgIT0gbnVsbCAmJiAhaXNPYmplY3Qocm9vdFByb3BzKSkge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYHJvb3QgcHJvcHMgcGFzc2VkIHRvIGFwcC5tb3VudCgpIG11c3QgYmUgYW4gb2JqZWN0LmApO1xuICAgICAgICAgICAgcm9vdFByb3BzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY3JlYXRlQXBwQ29udGV4dCgpO1xuICAgICAgICBjb25zdCBpbnN0YWxsZWRQbHVnaW5zID0gbmV3IFNldCgpO1xuICAgICAgICBsZXQgaXNNb3VudGVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGFwcCA9IChjb250ZXh0LmFwcCA9IHtcbiAgICAgICAgICAgIF91aWQ6IHVpZCsrLFxuICAgICAgICAgICAgX2NvbXBvbmVudDogcm9vdENvbXBvbmVudCxcbiAgICAgICAgICAgIF9wcm9wczogcm9vdFByb3BzLFxuICAgICAgICAgICAgX2NvbnRhaW5lcjogbnVsbCxcbiAgICAgICAgICAgIF9jb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgX2luc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgdmVyc2lvbixcbiAgICAgICAgICAgIGdldCBjb25maWcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuY29uZmlnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCBjb25maWcodikge1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgYXBwLmNvbmZpZyBjYW5ub3QgYmUgcmVwbGFjZWQuIE1vZGlmeSBpbmRpdmlkdWFsIG9wdGlvbnMgaW5zdGVhZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdXNlKHBsdWdpbiwgLi4ub3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmhhcyhwbHVnaW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBQbHVnaW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRhcmdldCBhcHAuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBsdWdpbiAmJiBpc0Z1bmN0aW9uKHBsdWdpbi5pbnN0YWxsKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xuICAgICAgICAgICAgICAgICAgICBwbHVnaW4uaW5zdGFsbChhcHAsIC4uLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHBsdWdpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGVkUGx1Z2lucy5hZGQocGx1Z2luKTtcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luKGFwcCwgLi4ub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBBIHBsdWdpbiBtdXN0IGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCB3aXRoIGFuIFwiaW5zdGFsbFwiIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGZ1bmN0aW9uLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1peGluKG1peGluKSB7XG4gICAgICAgICAgICAgICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0Lm1peGlucy5pbmNsdWRlcyhtaXhpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubWl4aW5zLnB1c2gobWl4aW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybignTWl4aW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRhcmdldCBhcHAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWl4aW4ubmFtZSA/IGA6ICR7bWl4aW4ubmFtZX1gIDogJycpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybignTWl4aW5zIGFyZSBvbmx5IGF2YWlsYWJsZSBpbiBidWlsZHMgc3VwcG9ydGluZyBPcHRpb25zIEFQSScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lLCBjb250ZXh0LmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNvbXBvbmVudHNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY29udGV4dC5jb21wb25lbnRzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGV4dC5jb21wb25lbnRzW25hbWVdID0gY29tcG9uZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlyZWN0aXZlKG5hbWUsIGRpcmVjdGl2ZSkge1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWRpcmVjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5kaXJlY3RpdmVzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBEaXJlY3RpdmUgXCIke25hbWV9XCIgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIGluIHRhcmdldCBhcHAuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vdW50KHJvb3RDb250YWluZXIsIGlzSHlkcmF0ZSwgaXNTVkcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTW91bnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyAjNTU3MVxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHJvb3RDb250YWluZXIuX192dWVfYXBwX18pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYFRoZXJlIGlzIGFscmVhZHkgYW4gYXBwIGluc3RhbmNlIG1vdW50ZWQgb24gdGhlIGhvc3QgY29udGFpbmVyLlxcbmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAgSWYgeW91IHdhbnQgdG8gbW91bnQgYW5vdGhlciBhcHAgb24gdGhlIHNhbWUgaG9zdCBjb250YWluZXIsYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCB5b3UgbmVlZCB0byB1bm1vdW50IHRoZSBwcmV2aW91cyBhcHAgYnkgY2FsbGluZyBcXGBhcHAudW5tb3VudCgpXFxgIGZpcnN0LmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUocm9vdENvbXBvbmVudCwgcm9vdFByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmUgYXBwIGNvbnRleHQgb24gdGhlIHJvb3QgVk5vZGUuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBiZSBzZXQgb24gdGhlIHJvb3QgaW5zdGFuY2Ugb24gaW5pdGlhbCBtb3VudC5cbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuYXBwQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhNUiByb290IHJlbG9hZFxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlbG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIoY2xvbmVWTm9kZSh2bm9kZSksIHJvb3RDb250YWluZXIsIGlzU1ZHKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSHlkcmF0ZSAmJiBoeWRyYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoeWRyYXRlKHZub2RlLCByb290Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcih2bm9kZSwgcm9vdENvbnRhaW5lciwgaXNTVkcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlzTW91bnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGFwcC5fY29udGFpbmVyID0gcm9vdENvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgICAgcm9vdENvbnRhaW5lci5fX3Z1ZV9hcHBfXyA9IGFwcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5faW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXZ0b29sc0luaXRBcHAoYXBwLCB2ZXJzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RXhwb3NlUHJveHkodm5vZGUuY29tcG9uZW50KSB8fCB2bm9kZS5jb21wb25lbnQucHJveHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBBcHAgaGFzIGFscmVhZHkgYmVlbiBtb3VudGVkLlxcbmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYElmIHlvdSB3YW50IHRvIHJlbW91bnQgdGhlIHNhbWUgYXBwLCBtb3ZlIHlvdXIgYXBwIGNyZWF0aW9uIGxvZ2ljIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGludG8gYSBmYWN0b3J5IGZ1bmN0aW9uIGFuZCBjcmVhdGUgZnJlc2ggYXBwIGluc3RhbmNlcyBmb3IgZWFjaCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBtb3VudCAtIGUuZy4gXFxgY29uc3QgY3JlYXRlTXlBcHAgPSAoKSA9PiBjcmVhdGVBcHAoQXBwKVxcYGApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bm1vdW50KCkge1xuICAgICAgICAgICAgICAgIGlmIChpc01vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyKG51bGwsIGFwcC5fY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5faW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGV2dG9vbHNVbm1vdW50QXBwKGFwcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGFwcC5fY29udGFpbmVyLl9fdnVlX2FwcF9fO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ2Fubm90IHVubW91bnQgYW4gYXBwIHRoYXQgaXMgbm90IG1vdW50ZWQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb3ZpZGUoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYga2V5IGluIGNvbnRleHQucHJvdmlkZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQXBwIGFscmVhZHkgcHJvdmlkZXMgcHJvcGVydHkgd2l0aCBrZXkgXCIke1N0cmluZyhrZXkpfVwiLiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBJdCB3aWxsIGJlIG92ZXJ3cml0dGVuIHdpdGggdGhlIG5ldyB2YWx1ZS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGV4dC5wcm92aWRlc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBmb3IgaGFuZGxpbmcgYSB0ZW1wbGF0ZSByZWZcbiAqL1xuZnVuY3Rpb24gc2V0UmVmKHJhd1JlZiwgb2xkUmF3UmVmLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUsIGlzVW5tb3VudCA9IGZhbHNlKSB7XG4gICAgaWYgKGlzQXJyYXkocmF3UmVmKSkge1xuICAgICAgICByYXdSZWYuZm9yRWFjaCgociwgaSkgPT4gc2V0UmVmKHIsIG9sZFJhd1JlZiAmJiAoaXNBcnJheShvbGRSYXdSZWYpID8gb2xkUmF3UmVmW2ldIDogb2xkUmF3UmVmKSwgcGFyZW50U3VzcGVuc2UsIHZub2RlLCBpc1VubW91bnQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNBc3luY1dyYXBwZXIodm5vZGUpICYmICFpc1VubW91bnQpIHtcbiAgICAgICAgLy8gd2hlbiBtb3VudGluZyBhc3luYyBjb21wb25lbnRzLCBub3RoaW5nIG5lZWRzIHRvIGJlIGRvbmUsXG4gICAgICAgIC8vIGJlY2F1c2UgdGhlIHRlbXBsYXRlIHJlZiBpcyBmb3J3YXJkZWQgdG8gaW5uZXIgY29tcG9uZW50XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVmVmFsdWUgPSB2bm9kZS5zaGFwZUZsYWcgJiA0IC8qIFNoYXBlRmxhZ3MuU1RBVEVGVUxfQ09NUE9ORU5UICovXG4gICAgICAgID8gZ2V0RXhwb3NlUHJveHkodm5vZGUuY29tcG9uZW50KSB8fCB2bm9kZS5jb21wb25lbnQucHJveHlcbiAgICAgICAgOiB2bm9kZS5lbDtcbiAgICBjb25zdCB2YWx1ZSA9IGlzVW5tb3VudCA/IG51bGwgOiByZWZWYWx1ZTtcbiAgICBjb25zdCB7IGk6IG93bmVyLCByOiByZWYgfSA9IHJhd1JlZjtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFvd25lcikge1xuICAgICAgICB3YXJuKGBNaXNzaW5nIHJlZiBvd25lciBjb250ZXh0LiByZWYgY2Fubm90IGJlIHVzZWQgb24gaG9pc3RlZCB2bm9kZXMuIGAgK1xuICAgICAgICAgICAgYEEgdm5vZGUgd2l0aCByZWYgbXVzdCBiZSBjcmVhdGVkIGluc2lkZSB0aGUgcmVuZGVyIGZ1bmN0aW9uLmApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG9sZFJlZiA9IG9sZFJhd1JlZiAmJiBvbGRSYXdSZWYucjtcbiAgICBjb25zdCByZWZzID0gb3duZXIucmVmcyA9PT0gRU1QVFlfT0JKID8gKG93bmVyLnJlZnMgPSB7fSkgOiBvd25lci5yZWZzO1xuICAgIGNvbnN0IHNldHVwU3RhdGUgPSBvd25lci5zZXR1cFN0YXRlO1xuICAgIC8vIGR5bmFtaWMgcmVmIGNoYW5nZWQuIHVuc2V0IG9sZCByZWZcbiAgICBpZiAob2xkUmVmICE9IG51bGwgJiYgb2xkUmVmICE9PSByZWYpIHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKG9sZFJlZikpIHtcbiAgICAgICAgICAgIHJlZnNbb2xkUmVmXSA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaGFzT3duKHNldHVwU3RhdGUsIG9sZFJlZikpIHtcbiAgICAgICAgICAgICAgICBzZXR1cFN0YXRlW29sZFJlZl0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUmVmKG9sZFJlZikpIHtcbiAgICAgICAgICAgIG9sZFJlZi52YWx1ZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRnVuY3Rpb24ocmVmKSkge1xuICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcocmVmLCBvd25lciwgMTIgLyogRXJyb3JDb2Rlcy5GVU5DVElPTl9SRUYgKi8sIFt2YWx1ZSwgcmVmc10pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgX2lzU3RyaW5nID0gaXNTdHJpbmcocmVmKTtcbiAgICAgICAgY29uc3QgX2lzUmVmID0gaXNSZWYocmVmKTtcbiAgICAgICAgaWYgKF9pc1N0cmluZyB8fCBfaXNSZWYpIHtcbiAgICAgICAgICAgIGNvbnN0IGRvU2V0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyYXdSZWYuZikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IF9pc1N0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBoYXNPd24oc2V0dXBTdGF0ZSwgcmVmKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gc2V0dXBTdGF0ZVtyZWZdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiByZWZzW3JlZl1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogcmVmLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNVbm1vdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5KGV4aXN0aW5nKSAmJiByZW1vdmUoZXhpc3RpbmcsIHJlZlZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNBcnJheShleGlzdGluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnNbcmVmXSA9IFtyZWZWYWx1ZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd24oc2V0dXBTdGF0ZSwgcmVmKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBTdGF0ZVtyZWZdID0gcmVmc1tyZWZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYudmFsdWUgPSBbcmVmVmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmF3UmVmLmspXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZzW3Jhd1JlZi5rXSA9IHJlZi52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghZXhpc3RpbmcuaW5jbHVkZXMocmVmVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcucHVzaChyZWZWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoX2lzU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZnNbcmVmXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duKHNldHVwU3RhdGUsIHJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHVwU3RhdGVbcmVmXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKF9pc1JlZikge1xuICAgICAgICAgICAgICAgICAgICByZWYudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhd1JlZi5rKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmc1tyYXdSZWYua10gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgdGVtcGxhdGUgcmVmIHR5cGU6JywgcmVmLCBgKCR7dHlwZW9mIHJlZn0pYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGRvU2V0LmlkID0gLTE7XG4gICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGRvU2V0LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb1NldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgd2FybignSW52YWxpZCB0ZW1wbGF0ZSByZWYgdHlwZTonLCByZWYsIGAoJHt0eXBlb2YgcmVmfSlgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubGV0IGhhc01pc21hdGNoID0gZmFsc2U7XG5jb25zdCBpc1NWR0NvbnRhaW5lciA9IChjb250YWluZXIpID0+IC9zdmcvLnRlc3QoY29udGFpbmVyLm5hbWVzcGFjZVVSSSkgJiYgY29udGFpbmVyLnRhZ05hbWUgIT09ICdmb3JlaWduT2JqZWN0JztcbmNvbnN0IGlzQ29tbWVudCA9IChub2RlKSA9PiBub2RlLm5vZGVUeXBlID09PSA4IC8qIERPTU5vZGVUeXBlcy5DT01NRU5UICovO1xuLy8gTm90ZTogaHlkcmF0aW9uIGlzIERPTS1zcGVjaWZpY1xuLy8gQnV0IHdlIGhhdmUgdG8gcGxhY2UgaXQgaW4gY29yZSBkdWUgdG8gdGlnaHQgY291cGxpbmcgd2l0aCBjb3JlIC0gc3BsaXR0aW5nXG4vLyBpdCBvdXQgY3JlYXRlcyBhIHRvbiBvZiB1bm5lY2Vzc2FyeSBjb21wbGV4aXR5LlxuLy8gSHlkcmF0aW9uIGFsc28gZGVwZW5kcyBvbiBzb21lIHJlbmRlcmVyIGludGVybmFsIGxvZ2ljIHdoaWNoIG5lZWRzIHRvIGJlXG4vLyBwYXNzZWQgaW4gdmlhIGFyZ3VtZW50cy5cbmZ1bmN0aW9uIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyhyZW5kZXJlckludGVybmFscykge1xuICAgIGNvbnN0IHsgbXQ6IG1vdW50Q29tcG9uZW50LCBwOiBwYXRjaCwgbzogeyBwYXRjaFByb3AsIGNyZWF0ZVRleHQsIG5leHRTaWJsaW5nLCBwYXJlbnROb2RlLCByZW1vdmUsIGluc2VydCwgY3JlYXRlQ29tbWVudCB9IH0gPSByZW5kZXJlckludGVybmFscztcbiAgICBjb25zdCBoeWRyYXRlID0gKHZub2RlLCBjb250YWluZXIpID0+IHtcbiAgICAgICAgaWYgKCFjb250YWluZXIuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICB3YXJuKGBBdHRlbXB0aW5nIHRvIGh5ZHJhdGUgZXhpc3RpbmcgbWFya3VwIGJ1dCBjb250YWluZXIgaXMgZW1wdHkuIGAgK1xuICAgICAgICAgICAgICAgICAgICBgUGVyZm9ybWluZyBmdWxsIG1vdW50IGluc3RlYWQuYCk7XG4gICAgICAgICAgICBwYXRjaChudWxsLCB2bm9kZSwgY29udGFpbmVyKTtcbiAgICAgICAgICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XG4gICAgICAgICAgICBjb250YWluZXIuX3Zub2RlID0gdm5vZGU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaGFzTWlzbWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgaHlkcmF0ZU5vZGUoY29udGFpbmVyLmZpcnN0Q2hpbGQsIHZub2RlLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcbiAgICAgICAgY29udGFpbmVyLl92bm9kZSA9IHZub2RlO1xuICAgICAgICBpZiAoaGFzTWlzbWF0Y2ggJiYgIWZhbHNlKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGVycm9yIHNob3VsZCBzaG93IHVwIGluIHByb2R1Y3Rpb25cbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEh5ZHJhdGlvbiBjb21wbGV0ZWQgYnV0IGNvbnRhaW5zIG1pc21hdGNoZXMuYCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGh5ZHJhdGVOb2RlID0gKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzRnJhZ21lbnRTdGFydCA9IGlzQ29tbWVudChub2RlKSAmJiBub2RlLmRhdGEgPT09ICdbJztcbiAgICAgICAgY29uc3Qgb25NaXNtYXRjaCA9ICgpID0+IGhhbmRsZU1pc21hdGNoKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIGlzRnJhZ21lbnRTdGFydCk7XG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcmVmLCBzaGFwZUZsYWcsIHBhdGNoRmxhZyB9ID0gdm5vZGU7XG4gICAgICAgIGxldCBkb21UeXBlID0gbm9kZS5ub2RlVHlwZTtcbiAgICAgICAgdm5vZGUuZWwgPSBub2RlO1xuICAgICAgICBpZiAocGF0Y2hGbGFnID09PSAtMiAvKiBQYXRjaEZsYWdzLkJBSUwgKi8pIHtcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmV4dE5vZGUgPSBudWxsO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgVGV4dDpcbiAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gMyAvKiBET01Ob2RlVHlwZXMuVEVYVCAqLykge1xuICAgICAgICAgICAgICAgICAgICAvLyAjNTcyOCBlbXB0eSB0ZXh0IG5vZGUgaW5zaWRlIGEgc2xvdCBjYW4gY2F1c2UgaHlkcmF0aW9uIGZhaWx1cmVcbiAgICAgICAgICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGUgc2VydmVyIHJlbmRlcmVkIEhUTUwgd29uJ3QgY29udGFpbiBhIHRleHQgbm9kZVxuICAgICAgICAgICAgICAgICAgICBpZiAodm5vZGUuY2hpbGRyZW4gPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQoKHZub2RlLmVsID0gY3JlYXRlVGV4dCgnJykpLCBwYXJlbnROb2RlKG5vZGUpLCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhICE9PSB2bm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIHRleHQgbWlzbWF0Y2g6YCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcXG4tIENsaWVudDogJHtKU09OLnN0cmluZ2lmeShub2RlLmRhdGEpfWAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXFxuLSBTZXJ2ZXI6ICR7SlNPTi5zdHJpbmdpZnkodm5vZGUuY2hpbGRyZW4pfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhID0gdm5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENvbW1lbnQ6XG4gICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDggLyogRE9NTm9kZVR5cGVzLkNPTU1FTlQgKi8gfHwgaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0YXRpYzpcbiAgICAgICAgICAgICAgICBpZiAoaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVudGlyZSB0ZW1wbGF0ZSBpcyBzdGF0aWMgYnV0IFNTUmVkIGFzIGEgZnJhZ21lbnRcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBkb21UeXBlID0gbm9kZS5ub2RlVHlwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgPT09IDEgLyogRE9NTm9kZVR5cGVzLkVMRU1FTlQgKi8gfHwgZG9tVHlwZSA9PT0gMyAvKiBET01Ob2RlVHlwZXMuVEVYVCAqLykge1xuICAgICAgICAgICAgICAgICAgICAvLyBkZXRlcm1pbmUgYW5jaG9yLCBhZG9wdCBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHN0YXRpYyB2bm9kZSBoYXMgaXRzIGNvbnRlbnQgc3RyaXBwZWQgZHVyaW5nIGJ1aWxkLFxuICAgICAgICAgICAgICAgICAgICAvLyBhZG9wdCBpdCBmcm9tIHRoZSBzZXJ2ZXItcmVuZGVyZWQgSFRNTC5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmVlZFRvQWRvcHRDb250ZW50ID0gIXZub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2bm9kZS5zdGF0aWNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVlZFRvQWRvcHRDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLmNoaWxkcmVuICs9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlLm5vZGVUeXBlID09PSAxIC8qIERPTU5vZGVUeXBlcy5FTEVNRU5UICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG5leHROb2RlLm91dGVySFRNTFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXh0Tm9kZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IHZub2RlLnN0YXRpY0NvdW50IC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLmFuY2hvciA9IG5leHROb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhuZXh0Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzRnJhZ21lbnRTdGFydCA/IG5leHRTaWJsaW5nKG5leHROb2RlKSA6IG5leHROb2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb25NaXNtYXRjaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgICAgICAgICAgICAgaWYgKCFpc0ZyYWdtZW50U3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGh5ZHJhdGVGcmFnbWVudChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSAxIC8qIERPTU5vZGVUeXBlcy5FTEVNRU5UICovIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS50eXBlLnRvTG93ZXJDYXNlKCkgIT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBoeWRyYXRlRWxlbWVudChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDYgLyogU2hhcGVGbGFncy5DT01QT05FTlQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiBzZXR0aW5nIHVwIHRoZSByZW5kZXIgZWZmZWN0LCBpZiB0aGUgaW5pdGlhbCB2bm9kZSBhbHJlYWR5XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhcyAuZWwgc2V0LCB0aGUgY29tcG9uZW50IHdpbGwgcGVyZm9ybSBoeWRyYXRpb24gaW5zdGVhZCBvZiBtb3VudFxuICAgICAgICAgICAgICAgICAgICAvLyBvbiBpdHMgc3ViLXRyZWUuXG4gICAgICAgICAgICAgICAgICAgIHZub2RlLnNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkcztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgbW91bnRDb21wb25lbnQodm5vZGUsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkdDb250YWluZXIoY29udGFpbmVyKSwgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50IG1heSBiZSBhc3luYywgc28gaW4gdGhlIGNhc2Ugb2YgZnJhZ21lbnRzIHdlIGNhbm5vdCByZWx5XG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIGNvbXBvbmVudCdzIHJlbmRlcmVkIG91dHB1dCB0byBkZXRlcm1pbmUgdGhlIGVuZCBvZiB0aGUgZnJhZ21lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zdGVhZCwgd2UgZG8gYSBsb29rYWhlYWQgdG8gZmluZCB0aGUgZW5kIGFuY2hvciBub2RlLlxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGlzRnJhZ21lbnRTdGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBsb2NhdGVDbG9zaW5nQXN5bmNBbmNob3Iobm9kZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vICM0MjkzIHRlbGVwb3J0IGFzIGNvbXBvbmVudCByb290XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0Tm9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDb21tZW50KG5leHROb2RlKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUuZGF0YSA9PT0gJ3RlbGVwb3J0IGVuZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobmV4dE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vICMzNzg3XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGNvbXBvbmVudCBpcyBhc3luYywgaXQgbWF5IGdldCBtb3ZlZCAvIHVubW91bnRlZCBiZWZvcmUgaXRzXG4gICAgICAgICAgICAgICAgICAgIC8vIGlubmVyIGNvbXBvbmVudCBpcyBsb2FkZWQsIHNvIHdlIG5lZWQgdG8gZ2l2ZSBpdCBhIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZub2RlIHRoYXQgbWF0Y2hlcyBpdHMgYWRvcHRlZCBET00uXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0FzeW5jV3JhcHBlcih2bm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdWJUcmVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRnJhZ21lbnRTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlRyZWUgPSBjcmVhdGVWTm9kZShGcmFnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVHJlZS5hbmNob3IgPSBuZXh0Tm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG5leHROb2RlLnByZXZpb3VzU2libGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGNvbnRhaW5lci5sYXN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJUcmVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5ub2RlVHlwZSA9PT0gMyA/IGNyZWF0ZVRleHRWTm9kZSgnJykgOiBjcmVhdGVWTm9kZSgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJUcmVlLmVsID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLmNvbXBvbmVudC5zdWJUcmVlID0gc3ViVHJlZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBTaGFwZUZsYWdzLlRFTEVQT1JUICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSA4IC8qIERPTU5vZGVUeXBlcy5DT01NRU5UICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gdm5vZGUudHlwZS5oeWRyYXRlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSB2bm9kZS50eXBlLmh5ZHJhdGUobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKHBhcmVudE5vZGUobm9kZSkpLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVOb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgSG9zdFZOb2RlIHR5cGU6JywgdHlwZSwgYCgke3R5cGVvZiB0eXBlfSlgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXRSZWYocmVmLCBudWxsLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXh0Tm9kZTtcbiAgICB9O1xuICAgIGNvbnN0IGh5ZHJhdGVFbGVtZW50ID0gKGVsLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgb3B0aW1pemVkID0gb3B0aW1pemVkIHx8ICEhdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xuICAgICAgICBjb25zdCB7IHR5cGUsIHByb3BzLCBwYXRjaEZsYWcsIHNoYXBlRmxhZywgZGlycyB9ID0gdm5vZGU7XG4gICAgICAgIC8vICM0MDA2IGZvciBmb3JtIGVsZW1lbnRzIHdpdGggbm9uLXN0cmluZyB2LW1vZGVsIHZhbHVlIGJpbmRpbmdzXG4gICAgICAgIC8vIGUuZy4gPG9wdGlvbiA6dmFsdWU9XCJvYmpcIj4sIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiA6dHJ1ZS12YWx1ZT1cIjFcIj5cbiAgICAgICAgY29uc3QgZm9yY2VQYXRjaFZhbHVlID0gKHR5cGUgPT09ICdpbnB1dCcgJiYgZGlycykgfHwgdHlwZSA9PT0gJ29wdGlvbic7XG4gICAgICAgIC8vIHNraXAgcHJvcHMgJiBjaGlsZHJlbiBpZiB0aGlzIGlzIGhvaXN0ZWQgc3RhdGljIG5vZGVzXG4gICAgICAgIC8vICM1NDA1IGluIGRldiwgYWx3YXlzIGh5ZHJhdGUgY2hpbGRyZW4gZm9yIEhNUlxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IGZvcmNlUGF0Y2hWYWx1ZSB8fCBwYXRjaEZsYWcgIT09IC0xIC8qIFBhdGNoRmxhZ3MuSE9JU1RFRCAqLykge1xuICAgICAgICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdjcmVhdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBwcm9wc1xuICAgICAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcmNlUGF0Y2hWYWx1ZSB8fFxuICAgICAgICAgICAgICAgICAgICAhb3B0aW1pemVkIHx8XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoRmxhZyAmICgxNiAvKiBQYXRjaEZsYWdzLkZVTExfUFJPUFMgKi8gfCAzMiAvKiBQYXRjaEZsYWdzLkhZRFJBVEVfRVZFTlRTICovKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChmb3JjZVBhdGNoVmFsdWUgJiYga2V5LmVuZHNXaXRoKCd2YWx1ZScpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpc09uKGtleSkgJiYgIWlzUmVzZXJ2ZWRQcm9wKGtleSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2hQcm9wKGVsLCBrZXksIG51bGwsIHByb3BzW2tleV0sIGZhbHNlLCB1bmRlZmluZWQsIHBhcmVudENvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMub25DbGljaykge1xuICAgICAgICAgICAgICAgICAgICAvLyBGYXN0IHBhdGggZm9yIGNsaWNrIGxpc3RlbmVycyAod2hpY2ggaXMgbW9zdCBvZnRlbikgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAgICAgLy8gaXRlcmF0aW5nIHRocm91Z2ggcHJvcHMuXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoUHJvcChlbCwgJ29uQ2xpY2snLCBudWxsLCBwcm9wcy5vbkNsaWNrLCBmYWxzZSwgdW5kZWZpbmVkLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZub2RlIC8gZGlyZWN0aXZlIGhvb2tzXG4gICAgICAgICAgICBsZXQgdm5vZGVIb29rcztcbiAgICAgICAgICAgIGlmICgodm5vZGVIb29rcyA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkpIHtcbiAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rcywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGlycykge1xuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2JlZm9yZU1vdW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHZub2RlSG9va3MgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkgfHwgZGlycykge1xuICAgICAgICAgICAgICAgIHF1ZXVlRWZmZWN0V2l0aFN1c3BlbnNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdm5vZGVIb29rcyAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rcywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnbW91bnRlZCcpO1xuICAgICAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNoaWxkcmVuXG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLyAmJlxuICAgICAgICAgICAgICAgIC8vIHNraXAgaWYgZWxlbWVudCBoYXMgaW5uZXJIVE1MIC8gdGV4dENvbnRlbnRcbiAgICAgICAgICAgICAgICAhKHByb3BzICYmIChwcm9wcy5pbm5lckhUTUwgfHwgcHJvcHMudGV4dENvbnRlbnQpKSkge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gaHlkcmF0ZUNoaWxkcmVuKGVsLmZpcnN0Q2hpbGQsIHZub2RlLCBlbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIGxldCBoYXNXYXJuZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWhhc1dhcm5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIGNoaWxkcmVuIG1pc21hdGNoIGluIDwke3Zub2RlLnR5cGV9PjogYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYHNlcnZlciByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIG1vcmUgY2hpbGQgbm9kZXMgdGhhbiBjbGllbnQgdmRvbS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIFNTUmVkIERPTSBjb250YWlucyBtb3JlIG5vZGVzIHRoYW4gaXQgc2hvdWxkLiBSZW1vdmUgdGhlbS5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VyID0gbmV4dDtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZShjdXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDggLyogU2hhcGVGbGFncy5URVhUX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsLnRleHRDb250ZW50ICE9PSB2bm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIHRleHQgY29udGVudCBtaXNtYXRjaCBpbiA8JHt2bm9kZS50eXBlfT46XFxuYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYC0gQ2xpZW50OiAke2VsLnRleHRDb250ZW50fVxcbmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAtIFNlcnZlcjogJHt2bm9kZS5jaGlsZHJlbn1gKTtcbiAgICAgICAgICAgICAgICAgICAgZWwudGV4dENvbnRlbnQgPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsLm5leHRTaWJsaW5nO1xuICAgIH07XG4gICAgY29uc3QgaHlkcmF0ZUNoaWxkcmVuID0gKG5vZGUsIHBhcmVudFZOb2RlLCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXBhcmVudFZOb2RlLmR5bmFtaWNDaGlsZHJlbjtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBwYXJlbnRWTm9kZS5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgbCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgbGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgdm5vZGUgPSBvcHRpbWl6ZWRcbiAgICAgICAgICAgICAgICA/IGNoaWxkcmVuW2ldXG4gICAgICAgICAgICAgICAgOiAoY2hpbGRyZW5baV0gPSBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpXSkpO1xuICAgICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gaHlkcmF0ZU5vZGUobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZub2RlLnR5cGUgPT09IFRleHQgJiYgIXZub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaGFzV2FybmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiBjaGlsZHJlbiBtaXNtYXRjaCBpbiA8JHtjb250YWluZXIudGFnTmFtZS50b0xvd2VyQ2FzZSgpfT46IGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYHNlcnZlciByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIGZld2VyIGNoaWxkIG5vZGVzIHRoYW4gY2xpZW50IHZkb20uYCk7XG4gICAgICAgICAgICAgICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRoZSBTU1JlZCBET00gZGlkbid0IGNvbnRhaW4gZW5vdWdoIG5vZGVzLiBNb3VudCB0aGUgbWlzc2luZyBvbmVzLlxuICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIHZub2RlLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lciksIHNsb3RTY29wZUlkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfTtcbiAgICBjb25zdCBoeWRyYXRlRnJhZ21lbnQgPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgc2xvdFNjb3BlSWRzOiBmcmFnbWVudFNsb3RTY29wZUlkcyB9ID0gdm5vZGU7XG4gICAgICAgIGlmIChmcmFnbWVudFNsb3RTY29wZUlkcykge1xuICAgICAgICAgICAgc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzXG4gICAgICAgICAgICAgICAgPyBzbG90U2NvcGVJZHMuY29uY2F0KGZyYWdtZW50U2xvdFNjb3BlSWRzKVxuICAgICAgICAgICAgICAgIDogZnJhZ21lbnRTbG90U2NvcGVJZHM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcbiAgICAgICAgY29uc3QgbmV4dCA9IGh5ZHJhdGVDaGlsZHJlbihuZXh0U2libGluZyhub2RlKSwgdm5vZGUsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICBpZiAobmV4dCAmJiBpc0NvbW1lbnQobmV4dCkgJiYgbmV4dC5kYXRhID09PSAnXScpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0U2libGluZygodm5vZGUuYW5jaG9yID0gbmV4dCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZnJhZ21lbnQgZGlkbid0IGh5ZHJhdGUgc3VjY2Vzc2Z1bGx5LCBzaW5jZSB3ZSBkaWRuJ3QgZ2V0IGEgZW5kIGFuY2hvclxuICAgICAgICAgICAgLy8gYmFjay4gVGhpcyBzaG91bGQgaGF2ZSBsZWQgdG8gbm9kZS9jaGlsZHJlbiBtaXNtYXRjaCB3YXJuaW5ncy5cbiAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBhbmNob3IgaXMgbWlzc2luZywgd2UgbmVlZCB0byBjcmVhdGUgb25lIGFuZCBpbnNlcnQgaXRcbiAgICAgICAgICAgIGluc2VydCgodm5vZGUuYW5jaG9yID0gY3JlYXRlQ29tbWVudChgXWApKSwgY29udGFpbmVyLCBuZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVNaXNtYXRjaCA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBpc0ZyYWdtZW50KSA9PiB7XG4gICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICB3YXJuKGBIeWRyYXRpb24gbm9kZSBtaXNtYXRjaDpcXG4tIENsaWVudCB2bm9kZTpgLCB2bm9kZS50eXBlLCBgXFxuLSBTZXJ2ZXIgcmVuZGVyZWQgRE9NOmAsIG5vZGUsIG5vZGUubm9kZVR5cGUgPT09IDMgLyogRE9NTm9kZVR5cGVzLlRFWFQgKi9cbiAgICAgICAgICAgICAgICA/IGAodGV4dClgXG4gICAgICAgICAgICAgICAgOiBpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSAnWydcbiAgICAgICAgICAgICAgICAgICAgPyBgKHN0YXJ0IG9mIGZyYWdtZW50KWBcbiAgICAgICAgICAgICAgICAgICAgOiBgYCk7XG4gICAgICAgIHZub2RlLmVsID0gbnVsbDtcbiAgICAgICAgaWYgKGlzRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBleGNlc3NpdmUgZnJhZ21lbnQgbm9kZXNcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IGxvY2F0ZUNsb3NpbmdBc3luY0FuY2hvcihub2RlKTtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmUobmV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dCA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBwYXJlbnROb2RlKG5vZGUpO1xuICAgICAgICByZW1vdmUobm9kZSk7XG4gICAgICAgIHBhdGNoKG51bGwsIHZub2RlLCBjb250YWluZXIsIG5leHQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lciksIHNsb3RTY29wZUlkcyk7XG4gICAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gICAgY29uc3QgbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yID0gKG5vZGUpID0+IHtcbiAgICAgICAgbGV0IG1hdGNoID0gMDtcbiAgICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICAgIGlmIChub2RlICYmIGlzQ29tbWVudChub2RlKSkge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmRhdGEgPT09ICdbJylcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2grKztcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhID09PSAnXScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gICAgcmV0dXJuIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV07XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xubGV0IHN1cHBvcnRlZDtcbmxldCBwZXJmO1xuZnVuY3Rpb24gc3RhcnRNZWFzdXJlKGluc3RhbmNlLCB0eXBlKSB7XG4gICAgaWYgKGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLnBlcmZvcm1hbmNlICYmIGlzU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgcGVyZi5tYXJrKGB2dWUtJHt0eXBlfS0ke2luc3RhbmNlLnVpZH1gKTtcbiAgICB9XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgZGV2dG9vbHNQZXJmU3RhcnQoaW5zdGFuY2UsIHR5cGUsIGlzU3VwcG9ydGVkKCkgPyBwZXJmLm5vdygpIDogRGF0ZS5ub3coKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZW5kTWVhc3VyZShpbnN0YW5jZSwgdHlwZSkge1xuICAgIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5wZXJmb3JtYW5jZSAmJiBpc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0VGFnID0gYHZ1ZS0ke3R5cGV9LSR7aW5zdGFuY2UudWlkfWA7XG4gICAgICAgIGNvbnN0IGVuZFRhZyA9IHN0YXJ0VGFnICsgYDplbmRgO1xuICAgICAgICBwZXJmLm1hcmsoZW5kVGFnKTtcbiAgICAgICAgcGVyZi5tZWFzdXJlKGA8JHtmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBpbnN0YW5jZS50eXBlKX0+ICR7dHlwZX1gLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgfVxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgIGRldnRvb2xzUGVyZkVuZChpbnN0YW5jZSwgdHlwZSwgaXNTdXBwb3J0ZWQoKSA/IHBlcmYubm93KCkgOiBEYXRlLm5vdygpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc1N1cHBvcnRlZCgpIHtcbiAgICBpZiAoc3VwcG9ydGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHN1cHBvcnRlZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICBwZXJmID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3VwcG9ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzdXBwb3J0ZWQ7XG59XG5cbi8qKlxuICogVGhpcyBpcyBvbmx5IGNhbGxlZCBpbiBlc20tYnVuZGxlciBidWlsZHMuXG4gKiBJdCBpcyBjYWxsZWQgd2hlbiBhIHJlbmRlcmVyIGlzIGNyZWF0ZWQsIGluIGBiYXNlQ3JlYXRlUmVuZGVyZXJgIHNvIHRoYXRcbiAqIGltcG9ydGluZyBydW50aW1lLWNvcmUgaXMgc2lkZS1lZmZlY3RzIGZyZWUuXG4gKlxuICogaXN0YW5idWwtaWdub3JlLW5leHRcbiAqL1xuZnVuY3Rpb24gaW5pdEZlYXR1cmVGbGFncygpIHtcbiAgICBjb25zdCBuZWVkV2FybiA9IFtdO1xuICAgIGlmICh0eXBlb2YgX19WVUVfT1BUSU9OU19BUElfXyAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBuZWVkV2Fybi5wdXNoKGBfX1ZVRV9PUFRJT05TX0FQSV9fYCk7XG4gICAgICAgIGdldEdsb2JhbFRoaXMoKS5fX1ZVRV9PUFRJT05TX0FQSV9fID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBfX1ZVRV9QUk9EX0RFVlRPT0xTX18gIT09ICdib29sZWFuJykge1xuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgbmVlZFdhcm4ucHVzaChgX19WVUVfUFJPRF9ERVZUT09MU19fYCk7XG4gICAgICAgIGdldEdsb2JhbFRoaXMoKS5fX1ZVRV9QUk9EX0RFVlRPT0xTX18gPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBuZWVkV2Fybi5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgbXVsdGkgPSBuZWVkV2Fybi5sZW5ndGggPiAxO1xuICAgICAgICBjb25zb2xlLndhcm4oYEZlYXR1cmUgZmxhZyR7bXVsdGkgPyBgc2AgOiBgYH0gJHtuZWVkV2Fybi5qb2luKCcsICcpfSAke211bHRpID8gYGFyZWAgOiBgaXNgfSBub3QgZXhwbGljaXRseSBkZWZpbmVkLiBZb3UgYXJlIHJ1bm5pbmcgdGhlIGVzbS1idW5kbGVyIGJ1aWxkIG9mIFZ1ZSwgYCArXG4gICAgICAgICAgICBgd2hpY2ggZXhwZWN0cyB0aGVzZSBjb21waWxlLXRpbWUgZmVhdHVyZSBmbGFncyB0byBiZSBnbG9iYWxseSBpbmplY3RlZCBgICtcbiAgICAgICAgICAgIGB2aWEgdGhlIGJ1bmRsZXIgY29uZmlnIGluIG9yZGVyIHRvIGdldCBiZXR0ZXIgdHJlZS1zaGFraW5nIGluIHRoZSBgICtcbiAgICAgICAgICAgIGBwcm9kdWN0aW9uIGJ1bmRsZS5cXG5cXG5gICtcbiAgICAgICAgICAgIGBGb3IgbW9yZSBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9saW5rLnZ1ZWpzLm9yZy9mZWF0dXJlLWZsYWdzLmApO1xuICAgIH1cbn1cblxuY29uc3QgcXVldWVQb3N0UmVuZGVyRWZmZWN0ID0gcXVldWVFZmZlY3RXaXRoU3VzcGVuc2VcbiAgICA7XG4vKipcbiAqIFRoZSBjcmVhdGVSZW5kZXJlciBmdW5jdGlvbiBhY2NlcHRzIHR3byBnZW5lcmljIGFyZ3VtZW50czpcbiAqIEhvc3ROb2RlIGFuZCBIb3N0RWxlbWVudCwgY29ycmVzcG9uZGluZyB0byBOb2RlIGFuZCBFbGVtZW50IHR5cGVzIGluIHRoZVxuICogaG9zdCBlbnZpcm9ubWVudC4gRm9yIGV4YW1wbGUsIGZvciBydW50aW1lLWRvbSwgSG9zdE5vZGUgd291bGQgYmUgdGhlIERPTVxuICogYE5vZGVgIGludGVyZmFjZSBhbmQgSG9zdEVsZW1lbnQgd291bGQgYmUgdGhlIERPTSBgRWxlbWVudGAgaW50ZXJmYWNlLlxuICpcbiAqIEN1c3RvbSByZW5kZXJlcnMgY2FuIHBhc3MgaW4gdGhlIHBsYXRmb3JtIHNwZWNpZmljIHR5cGVzIGxpa2UgdGhpczpcbiAqXG4gKiBgYGAganNcbiAqIGNvbnN0IHsgcmVuZGVyLCBjcmVhdGVBcHAgfSA9IGNyZWF0ZVJlbmRlcmVyPE5vZGUsIEVsZW1lbnQ+KHtcbiAqICAgcGF0Y2hQcm9wLFxuICogICAuLi5ub2RlT3BzXG4gKiB9KVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMpO1xufVxuLy8gU2VwYXJhdGUgQVBJIGZvciBjcmVhdGluZyBoeWRyYXRpb24tZW5hYmxlZCByZW5kZXJlci5cbi8vIEh5ZHJhdGlvbiBsb2dpYyBpcyBvbmx5IHVzZWQgd2hlbiBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIG1ha2luZyBpdFxuLy8gdHJlZS1zaGFrYWJsZS5cbmZ1bmN0aW9uIGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMsIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyk7XG59XG4vLyBpbXBsZW1lbnRhdGlvblxuZnVuY3Rpb24gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMsIGNyZWF0ZUh5ZHJhdGlvbkZucykge1xuICAgIC8vIGNvbXBpbGUtdGltZSBmZWF0dXJlIGZsYWdzIGNoZWNrXG4gICAge1xuICAgICAgICBpbml0RmVhdHVyZUZsYWdzKCk7XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IGdldEdsb2JhbFRoaXMoKTtcbiAgICB0YXJnZXQuX19WVUVfXyA9IHRydWU7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgc2V0RGV2dG9vbHNIb29rKHRhcmdldC5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fLCB0YXJnZXQpO1xuICAgIH1cbiAgICBjb25zdCB7IGluc2VydDogaG9zdEluc2VydCwgcmVtb3ZlOiBob3N0UmVtb3ZlLCBwYXRjaFByb3A6IGhvc3RQYXRjaFByb3AsIGNyZWF0ZUVsZW1lbnQ6IGhvc3RDcmVhdGVFbGVtZW50LCBjcmVhdGVUZXh0OiBob3N0Q3JlYXRlVGV4dCwgY3JlYXRlQ29tbWVudDogaG9zdENyZWF0ZUNvbW1lbnQsIHNldFRleHQ6IGhvc3RTZXRUZXh0LCBzZXRFbGVtZW50VGV4dDogaG9zdFNldEVsZW1lbnRUZXh0LCBwYXJlbnROb2RlOiBob3N0UGFyZW50Tm9kZSwgbmV4dFNpYmxpbmc6IGhvc3ROZXh0U2libGluZywgc2V0U2NvcGVJZDogaG9zdFNldFNjb3BlSWQgPSBOT09QLCBpbnNlcnRTdGF0aWNDb250ZW50OiBob3N0SW5zZXJ0U3RhdGljQ29udGVudCB9ID0gb3B0aW9ucztcbiAgICAvLyBOb3RlOiBmdW5jdGlvbnMgaW5zaWRlIHRoaXMgY2xvc3VyZSBzaG91bGQgdXNlIGBjb25zdCB4eHggPSAoKSA9PiB7fWBcbiAgICAvLyBzdHlsZSBpbiBvcmRlciB0byBwcmV2ZW50IGJlaW5nIGlubGluZWQgYnkgbWluaWZpZXJzLlxuICAgIGNvbnN0IHBhdGNoID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IgPSBudWxsLCBwYXJlbnRDb21wb25lbnQgPSBudWxsLCBwYXJlbnRTdXNwZW5zZSA9IG51bGwsIGlzU1ZHID0gZmFsc2UsIHNsb3RTY29wZUlkcyA9IG51bGwsIG9wdGltaXplZCA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0htclVwZGF0aW5nID8gZmFsc2UgOiAhIW4yLmR5bmFtaWNDaGlsZHJlbikgPT4ge1xuICAgICAgICBpZiAobjEgPT09IG4yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcGF0Y2hpbmcgJiBub3Qgc2FtZSB0eXBlLCB1bm1vdW50IG9sZCB0cmVlXG4gICAgICAgIGlmIChuMSAmJiAhaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcbiAgICAgICAgICAgIGFuY2hvciA9IGdldE5leHRIb3N0Tm9kZShuMSk7XG4gICAgICAgICAgICB1bm1vdW50KG4xLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgICAgIG4xID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobjIucGF0Y2hGbGFnID09PSAtMiAvKiBQYXRjaEZsYWdzLkJBSUwgKi8pIHtcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgbjIuZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHR5cGUsIHJlZiwgc2hhcGVGbGFnIH0gPSBuMjtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFRleHQ6XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1RleHQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENvbW1lbnQ6XG4gICAgICAgICAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdGF0aWM6XG4gICAgICAgICAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbW91bnRTdGF0aWNOb2RlKG4yLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hTdGF0aWNOb2RlKG4xLCBuMiwgY29udGFpbmVyLCBpc1NWRyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBGcmFnbWVudDpcbiAgICAgICAgICAgICAgICBwcm9jZXNzRnJhZ21lbnQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NFbGVtZW50KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDYgLyogU2hhcGVGbGFncy5DT01QT05FTlQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0NvbXBvbmVudChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBTaGFwZUZsYWdzLlRFTEVQT1JUICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUucHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIGludGVybmFscyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUucHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIGludGVybmFscyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKCdJbnZhbGlkIFZOb2RlIHR5cGU6JywgdHlwZSwgYCgke3R5cGVvZiB0eXBlfSlgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0IHJlZlxuICAgICAgICBpZiAocmVmICE9IG51bGwgJiYgcGFyZW50Q29tcG9uZW50KSB7XG4gICAgICAgICAgICBzZXRSZWYocmVmLCBuMSAmJiBuMS5yZWYsIHBhcmVudFN1c3BlbnNlLCBuMiB8fCBuMSwgIW4yKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcHJvY2Vzc1RleHQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcikgPT4ge1xuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgICAgICAgaG9zdEluc2VydCgobjIuZWwgPSBob3N0Q3JlYXRlVGV4dChuMi5jaGlsZHJlbikpLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9IChuMi5lbCA9IG4xLmVsKTtcbiAgICAgICAgICAgIGlmIChuMi5jaGlsZHJlbiAhPT0gbjEuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBob3N0U2V0VGV4dChlbCwgbjIuY2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBwcm9jZXNzQ29tbWVudE5vZGUgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcikgPT4ge1xuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgICAgICAgaG9zdEluc2VydCgobjIuZWwgPSBob3N0Q3JlYXRlQ29tbWVudChuMi5jaGlsZHJlbiB8fCAnJykpLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGVyZSdzIG5vIHN1cHBvcnQgZm9yIGR5bmFtaWMgY29tbWVudHNcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG1vdW50U3RhdGljTm9kZSA9IChuMiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKSA9PiB7XG4gICAgICAgIFtuMi5lbCwgbjIuYW5jaG9yXSA9IGhvc3RJbnNlcnRTdGF0aWNDb250ZW50KG4yLmNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcsIG4yLmVsLCBuMi5hbmNob3IpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGV2IC8gSE1SIG9ubHlcbiAgICAgKi9cbiAgICBjb25zdCBwYXRjaFN0YXRpY05vZGUgPSAobjEsIG4yLCBjb250YWluZXIsIGlzU1ZHKSA9PiB7XG4gICAgICAgIC8vIHN0YXRpYyBub2RlcyBhcmUgb25seSBwYXRjaGVkIGR1cmluZyBkZXYgZm9yIEhNUlxuICAgICAgICBpZiAobjIuY2hpbGRyZW4gIT09IG4xLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBob3N0TmV4dFNpYmxpbmcobjEuYW5jaG9yKTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBleGlzdGluZ1xuICAgICAgICAgICAgcmVtb3ZlU3RhdGljTm9kZShuMSk7XG4gICAgICAgICAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChuMi5jaGlsZHJlbiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgICAgICAgICBuMi5hbmNob3IgPSBuMS5hbmNob3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG1vdmVTdGF0aWNOb2RlID0gKHsgZWwsIGFuY2hvciB9LCBjb250YWluZXIsIG5leHRTaWJsaW5nKSA9PiB7XG4gICAgICAgIGxldCBuZXh0O1xuICAgICAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGFuY2hvcikge1xuICAgICAgICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhlbCk7XG4gICAgICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIG5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgIGVsID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBob3N0SW5zZXJ0KGFuY2hvciwgY29udGFpbmVyLCBuZXh0U2libGluZyk7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVTdGF0aWNOb2RlID0gKHsgZWwsIGFuY2hvciB9KSA9PiB7XG4gICAgICAgIGxldCBuZXh0O1xuICAgICAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGFuY2hvcikge1xuICAgICAgICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhlbCk7XG4gICAgICAgICAgICBob3N0UmVtb3ZlKGVsKTtcbiAgICAgICAgICAgIGVsID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBob3N0UmVtb3ZlKGFuY2hvcik7XG4gICAgfTtcbiAgICBjb25zdCBwcm9jZXNzRWxlbWVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgaXNTVkcgPSBpc1NWRyB8fCBuMi50eXBlID09PSAnc3ZnJztcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgIG1vdW50RWxlbWVudChuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXRjaEVsZW1lbnQobjEsIG4yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBtb3VudEVsZW1lbnQgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgbGV0IGVsO1xuICAgICAgICBsZXQgdm5vZGVIb29rO1xuICAgICAgICBjb25zdCB7IHR5cGUsIHByb3BzLCBzaGFwZUZsYWcsIHRyYW5zaXRpb24sIGRpcnMgfSA9IHZub2RlO1xuICAgICAgICBlbCA9IHZub2RlLmVsID0gaG9zdENyZWF0ZUVsZW1lbnQodm5vZGUudHlwZSwgaXNTVkcsIHByb3BzICYmIHByb3BzLmlzLCBwcm9wcyk7XG4gICAgICAgIC8vIG1vdW50IGNoaWxkcmVuIGZpcnN0LCBzaW5jZSBzb21lIHByb3BzIG1heSByZWx5IG9uIGNoaWxkIGNvbnRlbnRcbiAgICAgICAgLy8gYmVpbmcgYWxyZWFkeSByZW5kZXJlZCwgZS5nLiBgPHNlbGVjdCB2YWx1ZT5gXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA4IC8qIFNoYXBlRmxhZ3MuVEVYVF9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCB2bm9kZS5jaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgbW91bnRDaGlsZHJlbih2bm9kZS5jaGlsZHJlbiwgZWwsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHICYmIHR5cGUgIT09ICdmb3JlaWduT2JqZWN0Jywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXJzKSB7XG4gICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdjcmVhdGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHJvcHNcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgIT09ICd2YWx1ZScgJiYgIWlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBudWxsLCBwcm9wc1trZXldLCBpc1NWRywgdm5vZGUuY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTcGVjaWFsIGNhc2UgZm9yIHNldHRpbmcgdmFsdWUgb24gRE9NIGVsZW1lbnRzOlxuICAgICAgICAgICAgICogLSBpdCBjYW4gYmUgb3JkZXItc2Vuc2l0aXZlIChlLmcuIHNob3VsZCBiZSBzZXQgKmFmdGVyKiBtaW4vbWF4LCAjMjMyNSwgIzQwMjQpXG4gICAgICAgICAgICAgKiAtIGl0IG5lZWRzIHRvIGJlIGZvcmNlZCAoIzE0NzEpXG4gICAgICAgICAgICAgKiAjMjM1MyBwcm9wb3NlcyBhZGRpbmcgYW5vdGhlciByZW5kZXJlciBvcHRpb24gdG8gY29uZmlndXJlIHRoaXMsIGJ1dFxuICAgICAgICAgICAgICogdGhlIHByb3BlcnRpZXMgYWZmZWN0cyBhcmUgc28gZmluaXRlIGl0IGlzIHdvcnRoIHNwZWNpYWwgY2FzaW5nIGl0XG4gICAgICAgICAgICAgKiBoZXJlIHRvIHJlZHVjZSB0aGUgY29tcGxleGl0eS4gKFNwZWNpYWwgY2FzaW5nIGl0IGFsc28gc2hvdWxkIG5vdFxuICAgICAgICAgICAgICogYWZmZWN0IG5vbi1ET00gcmVuZGVyZXJzKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoJ3ZhbHVlJyBpbiBwcm9wcykge1xuICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsICd2YWx1ZScsIG51bGwsIHByb3BzLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMub25Wbm9kZUJlZm9yZU1vdW50KSkge1xuICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHNjb3BlSWRcbiAgICAgICAgc2V0U2NvcGVJZChlbCwgdm5vZGUsIHZub2RlLnNjb3BlSWQsIHNsb3RTY29wZUlkcywgcGFyZW50Q29tcG9uZW50KTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ19fdm5vZGUnLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHZub2RlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ19fdnVlUGFyZW50Q29tcG9uZW50Jywge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXJzKSB7XG4gICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdiZWZvcmVNb3VudCcpO1xuICAgICAgICB9XG4gICAgICAgIC8vICMxNTgzIEZvciBpbnNpZGUgc3VzcGVuc2UgKyBzdXNwZW5zZSBub3QgcmVzb2x2ZWQgY2FzZSwgZW50ZXIgaG9vayBzaG91bGQgY2FsbCB3aGVuIHN1c3BlbnNlIHJlc29sdmVkXG4gICAgICAgIC8vICMxNjg5IEZvciBpbnNpZGUgc3VzcGVuc2UgKyBzdXNwZW5zZSByZXNvbHZlZCBjYXNlLCBqdXN0IGNhbGwgaXRcbiAgICAgICAgY29uc3QgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgPSAoIXBhcmVudFN1c3BlbnNlIHx8IChwYXJlbnRTdXNwZW5zZSAmJiAhcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCkpICYmXG4gICAgICAgICAgICB0cmFuc2l0aW9uICYmXG4gICAgICAgICAgICAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQ7XG4gICAgICAgIGlmIChuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcykge1xuICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XG4gICAgICAgIH1cbiAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSB8fFxuICAgICAgICAgICAgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgfHxcbiAgICAgICAgICAgIGRpcnMpIHtcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICAgICAgICAgIG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzICYmIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xuICAgICAgICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnbW91bnRlZCcpO1xuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzZXRTY29wZUlkID0gKGVsLCB2bm9kZSwgc2NvcGVJZCwgc2xvdFNjb3BlSWRzLCBwYXJlbnRDb21wb25lbnQpID0+IHtcbiAgICAgICAgaWYgKHNjb3BlSWQpIHtcbiAgICAgICAgICAgIGhvc3RTZXRTY29wZUlkKGVsLCBzY29wZUlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2xvdFNjb3BlSWRzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsb3RTY29wZUlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGhvc3RTZXRTY29wZUlkKGVsLCBzbG90U2NvcGVJZHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnRDb21wb25lbnQpIHtcbiAgICAgICAgICAgIGxldCBzdWJUcmVlID0gcGFyZW50Q29tcG9uZW50LnN1YlRyZWU7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgc3ViVHJlZS5wYXRjaEZsYWcgPiAwICYmXG4gICAgICAgICAgICAgICAgc3ViVHJlZS5wYXRjaEZsYWcgJiAyMDQ4IC8qIFBhdGNoRmxhZ3MuREVWX1JPT1RfRlJBR01FTlQgKi8pIHtcbiAgICAgICAgICAgICAgICBzdWJUcmVlID1cbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyU2luZ2xlUm9vdChzdWJUcmVlLmNoaWxkcmVuKSB8fCBzdWJUcmVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZub2RlID09PSBzdWJUcmVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50Vk5vZGUgPSBwYXJlbnRDb21wb25lbnQudm5vZGU7XG4gICAgICAgICAgICAgICAgc2V0U2NvcGVJZChlbCwgcGFyZW50Vk5vZGUsIHBhcmVudFZOb2RlLnNjb3BlSWQsIHBhcmVudFZOb2RlLnNsb3RTY29wZUlkcywgcGFyZW50Q29tcG9uZW50LnBhcmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG1vdW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHN0YXJ0ID0gMCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSAoY2hpbGRyZW5baV0gPSBvcHRpbWl6ZWRcbiAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGNoaWxkcmVuW2ldKVxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoY2hpbGRyZW5baV0pKTtcbiAgICAgICAgICAgIHBhdGNoKG51bGwsIGNoaWxkLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcGF0Y2hFbGVtZW50ID0gKG4xLCBuMiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsID0gKG4yLmVsID0gbjEuZWwpO1xuICAgICAgICBsZXQgeyBwYXRjaEZsYWcsIGR5bmFtaWNDaGlsZHJlbiwgZGlycyB9ID0gbjI7XG4gICAgICAgIC8vICMxNDI2IHRha2UgdGhlIG9sZCB2bm9kZSdzIHBhdGNoIGZsYWcgaW50byBhY2NvdW50IHNpbmNlIHVzZXIgbWF5IGNsb25lIGFcbiAgICAgICAgLy8gY29tcGlsZXItZ2VuZXJhdGVkIHZub2RlLCB3aGljaCBkZS1vcHRzIHRvIEZVTExfUFJPUFNcbiAgICAgICAgcGF0Y2hGbGFnIHw9IG4xLnBhdGNoRmxhZyAmIDE2IC8qIFBhdGNoRmxhZ3MuRlVMTF9QUk9QUyAqLztcbiAgICAgICAgY29uc3Qgb2xkUHJvcHMgPSBuMS5wcm9wcyB8fCBFTVBUWV9PQko7XG4gICAgICAgIGNvbnN0IG5ld1Byb3BzID0gbjIucHJvcHMgfHwgRU1QVFlfT0JKO1xuICAgICAgICBsZXQgdm5vZGVIb29rO1xuICAgICAgICAvLyBkaXNhYmxlIHJlY3Vyc2UgaW4gYmVmb3JlVXBkYXRlIGhvb2tzXG4gICAgICAgIHBhcmVudENvbXBvbmVudCAmJiB0b2dnbGVSZWN1cnNlKHBhcmVudENvbXBvbmVudCwgZmFsc2UpO1xuICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5ld1Byb3BzLm9uVm5vZGVCZWZvcmVVcGRhdGUpKSB7XG4gICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIG4yLCBuMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sobjIsIG4xLCBwYXJlbnRDb21wb25lbnQsICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnRDb21wb25lbnQgJiYgdG9nZ2xlUmVjdXJzZShwYXJlbnRDb21wb25lbnQsIHRydWUpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzSG1yVXBkYXRpbmcpIHtcbiAgICAgICAgICAgIC8vIEhNUiB1cGRhdGVkLCBmb3JjZSBmdWxsIGRpZmZcbiAgICAgICAgICAgIHBhdGNoRmxhZyA9IDA7XG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXJlQ2hpbGRyZW5TVkcgPSBpc1NWRyAmJiBuMi50eXBlICE9PSAnZm9yZWlnbk9iamVjdCc7XG4gICAgICAgIGlmIChkeW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihuMS5keW5hbWljQ2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiwgZWwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGFyZUNoaWxkcmVuU1ZHLCBzbG90U2NvcGVJZHMpO1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LnR5cGUuX19obXJJZCkge1xuICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghb3B0aW1pemVkKSB7XG4gICAgICAgICAgICAvLyBmdWxsIGRpZmZcbiAgICAgICAgICAgIHBhdGNoQ2hpbGRyZW4objEsIG4yLCBlbCwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgYXJlQ2hpbGRyZW5TVkcsIHNsb3RTY29wZUlkcywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXRjaEZsYWcgPiAwKSB7XG4gICAgICAgICAgICAvLyB0aGUgcHJlc2VuY2Ugb2YgYSBwYXRjaEZsYWcgbWVhbnMgdGhpcyBlbGVtZW50J3MgcmVuZGVyIGNvZGUgd2FzXG4gICAgICAgICAgICAvLyBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyIGFuZCBjYW4gdGFrZSB0aGUgZmFzdCBwYXRoLlxuICAgICAgICAgICAgLy8gaW4gdGhpcyBwYXRoIG9sZCBub2RlIGFuZCBuZXcgbm9kZSBhcmUgZ3VhcmFudGVlZCB0byBoYXZlIHRoZSBzYW1lIHNoYXBlXG4gICAgICAgICAgICAvLyAoaS5lLiBhdCB0aGUgZXhhY3Qgc2FtZSBwb3NpdGlvbiBpbiB0aGUgc291cmNlIHRlbXBsYXRlKVxuICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDE2IC8qIFBhdGNoRmxhZ3MuRlVMTF9QUk9QUyAqLykge1xuICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgcHJvcHMgY29udGFpbiBkeW5hbWljIGtleXMsIGZ1bGwgZGlmZiBuZWVkZWRcbiAgICAgICAgICAgICAgICBwYXRjaFByb3BzKGVsLCBuMiwgb2xkUHJvcHMsIG5ld1Byb3BzLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBjbGFzc1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGR5bmFtaWMgY2xhc3MgYmluZGluZ3MuXG4gICAgICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDIgLyogUGF0Y2hGbGFncy5DTEFTUyAqLykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkUHJvcHMuY2xhc3MgIT09IG5ld1Byb3BzLmNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCAnY2xhc3MnLCBudWxsLCBuZXdQcm9wcy5jbGFzcywgaXNTVkcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHN0eWxlXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBmbGFnIGlzIG1hdGNoZWQgd2hlbiB0aGUgZWxlbWVudCBoYXMgZHluYW1pYyBzdHlsZSBiaW5kaW5nc1xuICAgICAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiA0IC8qIFBhdGNoRmxhZ3MuU1RZTEUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgJ3N0eWxlJywgb2xkUHJvcHMuc3R5bGUsIG5ld1Byb3BzLnN0eWxlLCBpc1NWRyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHByb3BzXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBmbGFnIGlzIG1hdGNoZWQgd2hlbiB0aGUgZWxlbWVudCBoYXMgZHluYW1pYyBwcm9wL2F0dHIgYmluZGluZ3NcbiAgICAgICAgICAgICAgICAvLyBvdGhlciB0aGFuIGNsYXNzIGFuZCBzdHlsZS4gVGhlIGtleXMgb2YgZHluYW1pYyBwcm9wL2F0dHJzIGFyZSBzYXZlZCBmb3JcbiAgICAgICAgICAgICAgICAvLyBmYXN0ZXIgaXRlcmF0aW9uLlxuICAgICAgICAgICAgICAgIC8vIE5vdGUgZHluYW1pYyBrZXlzIGxpa2UgOltmb29dPVwiYmFyXCIgd2lsbCBjYXVzZSB0aGlzIG9wdGltaXphdGlvbiB0b1xuICAgICAgICAgICAgICAgIC8vIGJhaWwgb3V0IGFuZCBnbyB0aHJvdWdoIGEgZnVsbCBkaWZmIGJlY2F1c2Ugd2UgbmVlZCB0byB1bnNldCB0aGUgb2xkIGtleVxuICAgICAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiA4IC8qIFBhdGNoRmxhZ3MuUFJPUFMgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGZsYWcgaXMgcHJlc2VudCB0aGVuIGR5bmFtaWNQcm9wcyBtdXN0IGJlIG5vbi1udWxsXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzVG9VcGRhdGUgPSBuMi5keW5hbWljUHJvcHM7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHNUb1VwZGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gcHJvcHNUb1VwZGF0ZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBvbGRQcm9wc1trZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5ld1Byb3BzW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAjMTQ3MSBmb3JjZSBwYXRjaCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgIT09IHByZXYgfHwga2V5ID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBwcmV2LCBuZXh0LCBpc1NWRywgbjEuY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXh0XG4gICAgICAgICAgICAvLyBUaGlzIGZsYWcgaXMgbWF0Y2hlZCB3aGVuIHRoZSBlbGVtZW50IGhhcyBvbmx5IGR5bmFtaWMgdGV4dCBjaGlsZHJlbi5cbiAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiAxIC8qIFBhdGNoRmxhZ3MuVEVYVCAqLykge1xuICAgICAgICAgICAgICAgIGlmIChuMS5jaGlsZHJlbiAhPT0gbjIuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCBuMi5jaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFvcHRpbWl6ZWQgJiYgZHluYW1pY0NoaWxkcmVuID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIHVub3B0aW1pemVkLCBmdWxsIGRpZmZcbiAgICAgICAgICAgIHBhdGNoUHJvcHMoZWwsIG4yLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5ld1Byb3BzLm9uVm5vZGVVcGRhdGVkKSB8fCBkaXJzKSB7XG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIG4yLCBuMSk7XG4gICAgICAgICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCAndXBkYXRlZCcpO1xuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBUaGUgZmFzdCBwYXRoIGZvciBibG9ja3MuXG4gICAgY29uc3QgcGF0Y2hCbG9ja0NoaWxkcmVuID0gKG9sZENoaWxkcmVuLCBuZXdDaGlsZHJlbiwgZmFsbGJhY2tDb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgb2xkVk5vZGUgPSBvbGRDaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZOb2RlID0gbmV3Q2hpbGRyZW5baV07XG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGNvbnRhaW5lciAocGFyZW50IGVsZW1lbnQpIGZvciB0aGUgcGF0Y2guXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBcbiAgICAgICAgICAgIC8vIG9sZFZOb2RlIG1heSBiZSBhbiBlcnJvcmVkIGFzeW5jIHNldHVwKCkgY29tcG9uZW50IGluc2lkZSBTdXNwZW5zZVxuICAgICAgICAgICAgLy8gd2hpY2ggd2lsbCBub3QgaGF2ZSBhIG1vdW50ZWQgZWxlbWVudFxuICAgICAgICAgICAgb2xkVk5vZGUuZWwgJiZcbiAgICAgICAgICAgICAgICAvLyAtIEluIHRoZSBjYXNlIG9mIGEgRnJhZ21lbnQsIHdlIG5lZWQgdG8gcHJvdmlkZSB0aGUgYWN0dWFsIHBhcmVudFxuICAgICAgICAgICAgICAgIC8vIG9mIHRoZSBGcmFnbWVudCBpdHNlbGYgc28gaXQgY2FuIG1vdmUgaXRzIGNoaWxkcmVuLlxuICAgICAgICAgICAgICAgIChvbGRWTm9kZS50eXBlID09PSBGcmFnbWVudCB8fFxuICAgICAgICAgICAgICAgICAgICAvLyAtIEluIHRoZSBjYXNlIG9mIGRpZmZlcmVudCBub2RlcywgdGhlcmUgaXMgZ29pbmcgdG8gYmUgYSByZXBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBhbHNvIHJlcXVpcmVzIHRoZSBjb3JyZWN0IHBhcmVudCBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgIWlzU2FtZVZOb2RlVHlwZShvbGRWTm9kZSwgbmV3Vk5vZGUpIHx8XG4gICAgICAgICAgICAgICAgICAgIC8vIC0gSW4gdGhlIGNhc2Ugb2YgYSBjb21wb25lbnQsIGl0IGNvdWxkIGNvbnRhaW4gYW55dGhpbmcuXG4gICAgICAgICAgICAgICAgICAgIG9sZFZOb2RlLnNoYXBlRmxhZyAmICg2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovIHwgNjQgLyogU2hhcGVGbGFncy5URUxFUE9SVCAqLykpXG4gICAgICAgICAgICAgICAgPyBob3N0UGFyZW50Tm9kZShvbGRWTm9kZS5lbClcbiAgICAgICAgICAgICAgICA6IC8vIEluIG90aGVyIGNhc2VzLCB0aGUgcGFyZW50IGNvbnRhaW5lciBpcyBub3QgYWN0dWFsbHkgdXNlZCBzbyB3ZVxuICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IHBhc3MgdGhlIGJsb2NrIGVsZW1lbnQgaGVyZSB0byBhdm9pZCBhIERPTSBwYXJlbnROb2RlIGNhbGwuXG4gICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrQ29udGFpbmVyO1xuICAgICAgICAgICAgcGF0Y2gob2xkVk5vZGUsIG5ld1ZOb2RlLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBwYXRjaFByb3BzID0gKGVsLCB2bm9kZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRykgPT4ge1xuICAgICAgICBpZiAob2xkUHJvcHMgIT09IG5ld1Byb3BzKSB7XG4gICAgICAgICAgICBpZiAob2xkUHJvcHMgIT09IEVNUFRZX09CSikge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9sZFByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNSZXNlcnZlZFByb3Aoa2V5KSAmJiAhKGtleSBpbiBuZXdQcm9wcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgb2xkUHJvcHNba2V5XSwgbnVsbCwgaXNTVkcsIHZub2RlLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmV3UHJvcHMpIHtcbiAgICAgICAgICAgICAgICAvLyBlbXB0eSBzdHJpbmcgaXMgbm90IHZhbGlkIHByb3BcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXNlcnZlZFByb3Aoa2V5KSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5ld1Byb3BzW2tleV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IG9sZFByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgLy8gZGVmZXIgcGF0Y2hpbmcgdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAobmV4dCAhPT0gcHJldiAmJiBrZXkgIT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBwcmV2LCBuZXh0LCBpc1NWRywgdm5vZGUuY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCd2YWx1ZScgaW4gbmV3UHJvcHMpIHtcbiAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCAndmFsdWUnLCBvbGRQcm9wcy52YWx1ZSwgbmV3UHJvcHMudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBwcm9jZXNzRnJhZ21lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50U3RhcnRBbmNob3IgPSAobjIuZWwgPSBuMSA/IG4xLmVsIDogaG9zdENyZWF0ZVRleHQoJycpKTtcbiAgICAgICAgY29uc3QgZnJhZ21lbnRFbmRBbmNob3IgPSAobjIuYW5jaG9yID0gbjEgPyBuMS5hbmNob3IgOiBob3N0Q3JlYXRlVGV4dCgnJykpO1xuICAgICAgICBsZXQgeyBwYXRjaEZsYWcsIGR5bmFtaWNDaGlsZHJlbiwgc2xvdFNjb3BlSWRzOiBmcmFnbWVudFNsb3RTY29wZUlkcyB9ID0gbjI7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgIC8vICM1NTIzIGRldiByb290IGZyYWdtZW50IG1heSBpbmhlcml0IGRpcmVjdGl2ZXNcbiAgICAgICAgICAgIChpc0htclVwZGF0aW5nIHx8IHBhdGNoRmxhZyAmIDIwNDggLyogUGF0Y2hGbGFncy5ERVZfUk9PVF9GUkFHTUVOVCAqLykpIHtcbiAgICAgICAgICAgIC8vIEhNUiB1cGRhdGVkIC8gRGV2IHJvb3QgZnJhZ21lbnQgKHcvIGNvbW1lbnRzKSwgZm9yY2UgZnVsbCBkaWZmXG4gICAgICAgICAgICBwYXRjaEZsYWcgPSAwO1xuICAgICAgICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgYSBzbG90IGZyYWdtZW50IHdpdGggOnNsb3R0ZWQgc2NvcGUgaWRzXG4gICAgICAgIGlmIChmcmFnbWVudFNsb3RTY29wZUlkcykge1xuICAgICAgICAgICAgc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzXG4gICAgICAgICAgICAgICAgPyBzbG90U2NvcGVJZHMuY29uY2F0KGZyYWdtZW50U2xvdFNjb3BlSWRzKVxuICAgICAgICAgICAgICAgIDogZnJhZ21lbnRTbG90U2NvcGVJZHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZnJhZ21lbnRTdGFydEFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgaG9zdEluc2VydChmcmFnbWVudEVuZEFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgLy8gYSBmcmFnbWVudCBjYW4gb25seSBoYXZlIGFycmF5IGNoaWxkcmVuXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGV5IGFyZSBlaXRoZXIgZ2VuZXJhdGVkIGJ5IHRoZSBjb21waWxlciwgb3IgaW1wbGljaXRseSBjcmVhdGVkXG4gICAgICAgICAgICAvLyBmcm9tIGFycmF5cy5cbiAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4objIuY2hpbGRyZW4sIGNvbnRhaW5lciwgZnJhZ21lbnRFbmRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCAmJlxuICAgICAgICAgICAgICAgIHBhdGNoRmxhZyAmIDY0IC8qIFBhdGNoRmxhZ3MuU1RBQkxFX0ZSQUdNRU5UICovICYmXG4gICAgICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuICYmXG4gICAgICAgICAgICAgICAgLy8gIzI3MTUgdGhlIHByZXZpb3VzIGZyYWdtZW50IGNvdWxkJ3ZlIGJlZW4gYSBCQUlMZWQgb25lIGFzIGEgcmVzdWx0XG4gICAgICAgICAgICAgICAgLy8gb2YgcmVuZGVyU2xvdCgpIHdpdGggbm8gdmFsaWQgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICBuMS5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBhIHN0YWJsZSBmcmFnbWVudCAodGVtcGxhdGUgcm9vdCBvciA8dGVtcGxhdGUgdi1mb3I+KSBkb2Vzbid0IG5lZWQgdG9cbiAgICAgICAgICAgICAgICAvLyBwYXRjaCBjaGlsZHJlbiBvcmRlciwgYnV0IGl0IG1heSBjb250YWluIGR5bmFtaWNDaGlsZHJlbi5cbiAgICAgICAgICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4objEuZHluYW1pY0NoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4sIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcyk7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LnR5cGUuX19obXJJZCkge1xuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIC8vICMyMDgwIGlmIHRoZSBzdGFibGUgZnJhZ21lbnQgaGFzIGEga2V5LCBpdCdzIGEgPHRlbXBsYXRlIHYtZm9yPiB0aGF0IG1heVxuICAgICAgICAgICAgICAgIC8vICBnZXQgbW92ZWQgYXJvdW5kLiBNYWtlIHN1cmUgYWxsIHJvb3QgbGV2ZWwgdm5vZGVzIGluaGVyaXQgZWwuXG4gICAgICAgICAgICAgICAgLy8gIzIxMzQgb3IgaWYgaXQncyBhIGNvbXBvbmVudCByb290LCBpdCBtYXkgYWxzbyBnZXQgbW92ZWQgYXJvdW5kXG4gICAgICAgICAgICAgICAgLy8gYXMgdGhlIGNvbXBvbmVudCBpcyBiZWluZyBtb3ZlZC5cbiAgICAgICAgICAgICAgICBuMi5rZXkgIT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICAocGFyZW50Q29tcG9uZW50ICYmIG4yID09PSBwYXJlbnRDb21wb25lbnQuc3ViVHJlZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHRydWUgLyogc2hhbGxvdyAqLyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8ga2V5ZWQgLyB1bmtleWVkLCBvciBtYW51YWwgZnJhZ21lbnRzLlxuICAgICAgICAgICAgICAgIC8vIGZvciBrZXllZCAmIHVua2V5ZWQsIHNpbmNlIHRoZXkgYXJlIGNvbXBpbGVyIGdlbmVyYXRlZCBmcm9tIHYtZm9yLFxuICAgICAgICAgICAgICAgIC8vIGVhY2ggY2hpbGQgaXMgZ3VhcmFudGVlZCB0byBiZSBhIGJsb2NrIHNvIHRoZSBmcmFnbWVudCB3aWxsIG5ldmVyXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBkeW5hbWljQ2hpbGRyZW4uXG4gICAgICAgICAgICAgICAgcGF0Y2hDaGlsZHJlbihuMSwgbjIsIGNvbnRhaW5lciwgZnJhZ21lbnRFbmRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHByb2Nlc3NDb21wb25lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIG4yLnNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkcztcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChuMi5zaGFwZUZsYWcgJiA1MTIgLyogU2hhcGVGbGFncy5DT01QT05FTlRfS0VQVF9BTElWRSAqLykge1xuICAgICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudC5jdHguYWN0aXZhdGUobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vdW50Q29tcG9uZW50KG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB1cGRhdGVDb21wb25lbnQobjEsIG4yLCBvcHRpbWl6ZWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBtb3VudENvbXBvbmVudCA9IChpbml0aWFsVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gKGluaXRpYWxWTm9kZS5jb21wb25lbnQgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZShpbml0aWFsVk5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpKTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpbnN0YW5jZS50eXBlLl9faG1ySWQpIHtcbiAgICAgICAgICAgIHJlZ2lzdGVySE1SKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQoaW5pdGlhbFZOb2RlKTtcbiAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW5qZWN0IHJlbmRlcmVyIGludGVybmFscyBmb3Iga2VlcEFsaXZlXG4gICAgICAgIGlmIChpc0tlZXBBbGl2ZShpbml0aWFsVk5vZGUpKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5jdHgucmVuZGVyZXIgPSBpbnRlcm5hbHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVzb2x2ZSBwcm9wcyBhbmQgc2xvdHMgZm9yIHNldHVwIGNvbnRleHRcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGluaXRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldHVwQ29tcG9uZW50KGluc3RhbmNlKTtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgaW5pdGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHNldHVwKCkgaXMgYXN5bmMuIFRoaXMgY29tcG9uZW50IHJlbGllcyBvbiBhc3luYyBsb2dpYyB0byBiZSByZXNvbHZlZFxuICAgICAgICAvLyBiZWZvcmUgcHJvY2VlZGluZ1xuICAgICAgICBpZiAoaW5zdGFuY2UuYXN5bmNEZXApIHtcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLnJlZ2lzdGVyRGVwKGluc3RhbmNlLCBzZXR1cFJlbmRlckVmZmVjdCk7XG4gICAgICAgICAgICAvLyBHaXZlIGl0IGEgcGxhY2Vob2xkZXIgaWYgdGhpcyBpcyBub3QgaHlkcmF0aW9uXG4gICAgICAgICAgICAvLyBUT0RPIGhhbmRsZSBzZWxmLWRlZmluZWQgZmFsbGJhY2tcbiAgICAgICAgICAgIGlmICghaW5pdGlhbFZOb2RlLmVsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSAoaW5zdGFuY2Uuc3ViVHJlZSA9IGNyZWF0ZVZOb2RlKENvbW1lbnQpKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzQ29tbWVudE5vZGUobnVsbCwgcGxhY2Vob2xkZXIsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXR1cFJlbmRlckVmZmVjdChpbnN0YW5jZSwgaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZUNvbXBvbmVudCA9IChuMSwgbjIsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IChuMi5jb21wb25lbnQgPSBuMS5jb21wb25lbnQpO1xuICAgICAgICBpZiAoc2hvdWxkVXBkYXRlQ29tcG9uZW50KG4xLCBuMiwgb3B0aW1pemVkKSkge1xuICAgICAgICAgICAgaWYgKGluc3RhbmNlLmFzeW5jRGVwICYmXG4gICAgICAgICAgICAgICAgIWluc3RhbmNlLmFzeW5jUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBhc3luYyAmIHN0aWxsIHBlbmRpbmcgLSBqdXN0IHVwZGF0ZSBwcm9wcyBhbmQgc2xvdHNcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgY29tcG9uZW50J3MgcmVhY3RpdmUgZWZmZWN0IGZvciByZW5kZXIgaXNuJ3Qgc2V0LXVwIHlldFxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG4yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyKGluc3RhbmNlLCBuMiwgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vcm1hbCB1cGRhdGVcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5uZXh0ID0gbjI7XG4gICAgICAgICAgICAgICAgLy8gaW4gY2FzZSB0aGUgY2hpbGQgY29tcG9uZW50IGlzIGFsc28gcXVldWVkLCByZW1vdmUgaXQgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAvLyBkb3VibGUgdXBkYXRpbmcgdGhlIHNhbWUgY2hpbGQgY29tcG9uZW50IGluIHRoZSBzYW1lIGZsdXNoLlxuICAgICAgICAgICAgICAgIGludmFsaWRhdGVKb2IoaW5zdGFuY2UudXBkYXRlKTtcbiAgICAgICAgICAgICAgICAvLyBpbnN0YW5jZS51cGRhdGUgaXMgdGhlIHJlYWN0aXZlIGVmZmVjdC5cbiAgICAgICAgICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vIHVwZGF0ZSBuZWVkZWQuIGp1c3QgY29weSBvdmVyIHByb3BlcnRpZXNcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgICAgICAgICBpbnN0YW5jZS52bm9kZSA9IG4yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzZXR1cFJlbmRlckVmZmVjdCA9IChpbnN0YW5jZSwgaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50VXBkYXRlRm4gPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlLmlzTW91bnRlZCkge1xuICAgICAgICAgICAgICAgIGxldCB2bm9kZUhvb2s7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBlbCwgcHJvcHMgfSA9IGluaXRpYWxWTm9kZTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGJtLCBtLCBwYXJlbnQgfSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQXN5bmNXcmFwcGVyVk5vZGUgPSBpc0FzeW5jV3JhcHBlcihpbml0aWFsVk5vZGUpO1xuICAgICAgICAgICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAvLyBiZWZvcmVNb3VudCBob29rXG4gICAgICAgICAgICAgICAgaWYgKGJtKSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gb25Wbm9kZUJlZm9yZU1vdW50XG4gICAgICAgICAgICAgICAgaWYgKCFpc0FzeW5jV3JhcHBlclZOb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgaW5pdGlhbFZOb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGVsICYmIGh5ZHJhdGVOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHZub2RlIGhhcyBhZG9wdGVkIGhvc3Qgbm9kZSAtIHBlcmZvcm0gaHlkcmF0aW9uIGluc3RlYWQgb2YgbW91bnQuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGh5ZHJhdGVTdWJUcmVlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2Uuc3ViVHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBoeWRyYXRlYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBoeWRyYXRlTm9kZShlbCwgaW5zdGFuY2Uuc3ViVHJlZSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgaHlkcmF0ZWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBc3luY1dyYXBwZXJWTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZOb2RlLnR5cGUuX19hc3luY0xvYWRlcigpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub3RlOiB3ZSBhcmUgbW92aW5nIHRoZSByZW5kZXIgY2FsbCBpbnRvIGFuIGFzeW5jIGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggbWVhbnMgaXQgd29uJ3QgdHJhY2sgZGVwZW5kZW5jaWVzIC0gYnV0IGl0J3Mgb2sgYmVjYXVzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSBzZXJ2ZXItcmVuZGVyZWQgYXN5bmMgd3JhcHBlciBpcyBhbHJlYWR5IGluIHJlc29sdmVkIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaXQgd2lsbCBuZXZlciBuZWVkIHRvIGNoYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICgpID0+ICFpbnN0YW5jZS5pc1VubW91bnRlZCAmJiBoeWRyYXRlU3ViVHJlZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGh5ZHJhdGVTdWJUcmVlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YlRyZWUgPSAoaW5zdGFuY2Uuc3ViVHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgc3ViVHJlZSwgY29udGFpbmVyLCBhbmNob3IsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVk5vZGUuZWwgPSBzdWJUcmVlLmVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QobSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBvblZub2RlTW91bnRlZFxuICAgICAgICAgICAgICAgIGlmICghaXNBc3luY1dyYXBwZXJWTm9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjb3BlZEluaXRpYWxWTm9kZSA9IGluaXRpYWxWTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgc2NvcGVkSW5pdGlhbFZOb2RlKSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBhY3RpdmF0ZWQgaG9vayBmb3Iga2VlcC1hbGl2ZSByb290cy5cbiAgICAgICAgICAgICAgICAvLyAjMTc0MiBhY3RpdmF0ZWQgaG9vayBtdXN0IGJlIGFjY2Vzc2VkIGFmdGVyIGZpcnN0IHJlbmRlclxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBob29rIG1heSBiZSBpbmplY3RlZCBieSBhIGNoaWxkIGtlZXAtYWxpdmVcbiAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFZOb2RlLnNoYXBlRmxhZyAmIDI1NiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLyB8fFxuICAgICAgICAgICAgICAgICAgICAocGFyZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FzeW5jV3JhcHBlcihwYXJlbnQudm5vZGUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQudm5vZGUuc2hhcGVGbGFnICYgMjU2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5hICYmIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChpbnN0YW5jZS5hLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmlzTW91bnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRBZGRlZChpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vICMyNDU4OiBkZWZlcmVuY2UgbW91bnQtb25seSBvYmplY3QgcGFyYW1ldGVycyB0byBwcmV2ZW50IG1lbWxlYWtzXG4gICAgICAgICAgICAgICAgaW5pdGlhbFZOb2RlID0gY29udGFpbmVyID0gYW5jaG9yID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZUNvbXBvbmVudFxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdHJpZ2dlcmVkIGJ5IG11dGF0aW9uIG9mIGNvbXBvbmVudCdzIG93biBzdGF0ZSAobmV4dDogbnVsbClcbiAgICAgICAgICAgICAgICAvLyBPUiBwYXJlbnQgY2FsbGluZyBwcm9jZXNzQ29tcG9uZW50IChuZXh0OiBWTm9kZSlcbiAgICAgICAgICAgICAgICBsZXQgeyBuZXh0LCBidSwgdSwgcGFyZW50LCB2bm9kZSB9ID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgbGV0IG9yaWdpbk5leHQgPSBuZXh0O1xuICAgICAgICAgICAgICAgIGxldCB2bm9kZUhvb2s7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQobmV4dCB8fCBpbnN0YW5jZS52bm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIERpc2FsbG93IGNvbXBvbmVudCBlZmZlY3QgcmVjdXJzaW9uIGR1cmluZyBwcmUtbGlmZWN5Y2xlIGhvb2tzLlxuICAgICAgICAgICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0LmVsID0gdm5vZGUuZWw7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlcihpbnN0YW5jZSwgbmV4dCwgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSB2bm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYmVmb3JlVXBkYXRlIGhvb2tcbiAgICAgICAgICAgICAgICBpZiAoYnUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoYnUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBvblZub2RlQmVmb3JlVXBkYXRlXG4gICAgICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBuZXh0LnByb3BzICYmIG5leHQucHJvcHMub25Wbm9kZUJlZm9yZVVwZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBuZXh0LCB2bm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIHRydWUpO1xuICAgICAgICAgICAgICAgIC8vIHJlbmRlclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRUcmVlID0gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZUcmVlID0gaW5zdGFuY2Uuc3ViVHJlZTtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5zdWJUcmVlID0gbmV4dFRyZWU7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXRjaChwcmV2VHJlZSwgbmV4dFRyZWUsIFxuICAgICAgICAgICAgICAgIC8vIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGlmIGl0J3MgaW4gYSB0ZWxlcG9ydFxuICAgICAgICAgICAgICAgIGhvc3RQYXJlbnROb2RlKHByZXZUcmVlLmVsKSwgXG4gICAgICAgICAgICAgICAgLy8gYW5jaG9yIG1heSBoYXZlIGNoYW5nZWQgaWYgaXQncyBpbiBhIGZyYWdtZW50XG4gICAgICAgICAgICAgICAgZ2V0TmV4dEhvc3ROb2RlKHByZXZUcmVlKSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dC5lbCA9IG5leHRUcmVlLmVsO1xuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5OZXh0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbGYtdHJpZ2dlcmVkIHVwZGF0ZS4gSW4gY2FzZSBvZiBIT0MsIHVwZGF0ZSBwYXJlbnQgY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIHZub2RlIGVsLiBIT0MgaXMgaW5kaWNhdGVkIGJ5IHBhcmVudCBpbnN0YW5jZSdzIHN1YlRyZWUgcG9pbnRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gY2hpbGQgY29tcG9uZW50J3Mgdm5vZGVcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCBuZXh0VHJlZS5lbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZWQgaG9va1xuICAgICAgICAgICAgICAgIGlmICh1KSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCh1LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVVcGRhdGVkXG4gICAgICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBuZXh0LnByb3BzICYmIG5leHQucHJvcHMub25Wbm9kZVVwZGF0ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIG5leHQsIHZub2RlKSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQoaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBjcmVhdGUgcmVhY3RpdmUgZWZmZWN0IGZvciByZW5kZXJpbmdcbiAgICAgICAgY29uc3QgZWZmZWN0ID0gKGluc3RhbmNlLmVmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChjb21wb25lbnRVcGRhdGVGbiwgKCkgPT4gcXVldWVKb2IodXBkYXRlKSwgaW5zdGFuY2Uuc2NvcGUgLy8gdHJhY2sgaXQgaW4gY29tcG9uZW50J3MgZWZmZWN0IHNjb3BlXG4gICAgICAgICkpO1xuICAgICAgICBjb25zdCB1cGRhdGUgPSAoaW5zdGFuY2UudXBkYXRlID0gKCkgPT4gZWZmZWN0LnJ1bigpKTtcbiAgICAgICAgdXBkYXRlLmlkID0gaW5zdGFuY2UudWlkO1xuICAgICAgICAvLyBhbGxvd1JlY3Vyc2VcbiAgICAgICAgLy8gIzE4MDEsICMyMDQzIGNvbXBvbmVudCByZW5kZXIgZWZmZWN0cyBzaG91bGQgYWxsb3cgcmVjdXJzaXZlIHVwZGF0ZXNcbiAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgdHJ1ZSk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIGVmZmVjdC5vblRyYWNrID0gaW5zdGFuY2UucnRjXG4gICAgICAgICAgICAgICAgPyBlID0+IGludm9rZUFycmF5Rm5zKGluc3RhbmNlLnJ0YywgZSlcbiAgICAgICAgICAgICAgICA6IHZvaWQgMDtcbiAgICAgICAgICAgIGVmZmVjdC5vblRyaWdnZXIgPSBpbnN0YW5jZS5ydGdcbiAgICAgICAgICAgICAgICA/IGUgPT4gaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UucnRnLCBlKVxuICAgICAgICAgICAgICAgIDogdm9pZCAwO1xuICAgICAgICAgICAgdXBkYXRlLm93bmVySW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlciA9IChpbnN0YW5jZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgbmV4dFZOb2RlLmNvbXBvbmVudCA9IGluc3RhbmNlO1xuICAgICAgICBjb25zdCBwcmV2UHJvcHMgPSBpbnN0YW5jZS52bm9kZS5wcm9wcztcbiAgICAgICAgaW5zdGFuY2Uudm5vZGUgPSBuZXh0Vk5vZGU7XG4gICAgICAgIGluc3RhbmNlLm5leHQgPSBudWxsO1xuICAgICAgICB1cGRhdGVQcm9wcyhpbnN0YW5jZSwgbmV4dFZOb2RlLnByb3BzLCBwcmV2UHJvcHMsIG9wdGltaXplZCk7XG4gICAgICAgIHVwZGF0ZVNsb3RzKGluc3RhbmNlLCBuZXh0Vk5vZGUuY2hpbGRyZW4sIG9wdGltaXplZCk7XG4gICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgICAgLy8gcHJvcHMgdXBkYXRlIG1heSBoYXZlIHRyaWdnZXJlZCBwcmUtZmx1c2ggd2F0Y2hlcnMuXG4gICAgICAgIC8vIGZsdXNoIHRoZW0gYmVmb3JlIHRoZSByZW5kZXIgdXBkYXRlLlxuICAgICAgICBmbHVzaFByZUZsdXNoQ2JzKCk7XG4gICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICB9O1xuICAgIGNvbnN0IHBhdGNoQ2hpbGRyZW4gPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcbiAgICAgICAgY29uc3QgYzEgPSBuMSAmJiBuMS5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgcHJldlNoYXBlRmxhZyA9IG4xID8gbjEuc2hhcGVGbGFnIDogMDtcbiAgICAgICAgY29uc3QgYzIgPSBuMi5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgeyBwYXRjaEZsYWcsIHNoYXBlRmxhZyB9ID0gbjI7XG4gICAgICAgIC8vIGZhc3QgcGF0aFxuICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCkge1xuICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDEyOCAvKiBQYXRjaEZsYWdzLktFWUVEX0ZSQUdNRU5UICovKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBjb3VsZCBiZSBlaXRoZXIgZnVsbHkta2V5ZWQgb3IgbWl4ZWQgKHNvbWUga2V5ZWQgc29tZSBub3QpXG4gICAgICAgICAgICAgICAgLy8gcHJlc2VuY2Ugb2YgcGF0Y2hGbGFnIG1lYW5zIGNoaWxkcmVuIGFyZSBndWFyYW50ZWVkIHRvIGJlIGFycmF5c1xuICAgICAgICAgICAgICAgIHBhdGNoS2V5ZWRDaGlsZHJlbihjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhdGNoRmxhZyAmIDI1NiAvKiBQYXRjaEZsYWdzLlVOS0VZRURfRlJBR01FTlQgKi8pIHtcbiAgICAgICAgICAgICAgICAvLyB1bmtleWVkXG4gICAgICAgICAgICAgICAgcGF0Y2hVbmtleWVkQ2hpbGRyZW4oYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hpbGRyZW4gaGFzIDMgcG9zc2liaWxpdGllczogdGV4dCwgYXJyYXkgb3Igbm8gY2hpbGRyZW4uXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA4IC8qIFNoYXBlRmxhZ3MuVEVYVF9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgLy8gdGV4dCBjaGlsZHJlbiBmYXN0IHBhdGhcbiAgICAgICAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihjMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYzIgIT09IGMxKSB7XG4gICAgICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGNvbnRhaW5lciwgYzIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICAgICAgLy8gcHJldiBjaGlsZHJlbiB3YXMgYXJyYXlcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgICAgICAgICAvLyB0d28gYXJyYXlzLCBjYW5ub3QgYXNzdW1lIGFueXRoaW5nLCBkbyBmdWxsIGRpZmZcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hLZXllZENoaWxkcmVuKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBubyBuZXcgY2hpbGRyZW4sIGp1c3QgdW5tb3VudCBvbGRcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBwcmV2IGNoaWxkcmVuIHdhcyB0ZXh0IE9SIG51bGxcbiAgICAgICAgICAgICAgICAvLyBuZXcgY2hpbGRyZW4gaXMgYXJyYXkgT1IgbnVsbFxuICAgICAgICAgICAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgOCAvKiBTaGFwZUZsYWdzLlRFWFRfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGNvbnRhaW5lciwgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBtb3VudCBuZXcgaWYgYXJyYXlcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgICAgICAgICBtb3VudENoaWxkcmVuKGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHBhdGNoVW5rZXllZENoaWxkcmVuID0gKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBjMSA9IGMxIHx8IEVNUFRZX0FSUjtcbiAgICAgICAgYzIgPSBjMiB8fCBFTVBUWV9BUlI7XG4gICAgICAgIGNvbnN0IG9sZExlbmd0aCA9IGMxLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbmV3TGVuZ3RoID0gYzIubGVuZ3RoO1xuICAgICAgICBjb25zdCBjb21tb25MZW5ndGggPSBNYXRoLm1pbihvbGRMZW5ndGgsIG5ld0xlbmd0aCk7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29tbW9uTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IChjMltpXSA9IG9wdGltaXplZFxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xuICAgICAgICAgICAgcGF0Y2goYzFbaV0sIG5leHRDaGlsZCwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvbGRMZW5ndGggPiBuZXdMZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGRcbiAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihjMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSwgZmFsc2UsIGNvbW1vbkxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBtb3VudCBuZXdcbiAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4oYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIGNvbW1vbkxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIGNhbiBiZSBhbGwta2V5ZWQgb3IgbWl4ZWRcbiAgICBjb25zdCBwYXRjaEtleWVkQ2hpbGRyZW4gPSAoYzEsIGMyLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgY29uc3QgbDIgPSBjMi5sZW5ndGg7XG4gICAgICAgIGxldCBlMSA9IGMxLmxlbmd0aCAtIDE7IC8vIHByZXYgZW5kaW5nIGluZGV4XG4gICAgICAgIGxldCBlMiA9IGwyIC0gMTsgLy8gbmV4dCBlbmRpbmcgaW5kZXhcbiAgICAgICAgLy8gMS4gc3luYyBmcm9tIHN0YXJ0XG4gICAgICAgIC8vIChhIGIpIGNcbiAgICAgICAgLy8gKGEgYikgZCBlXG4gICAgICAgIHdoaWxlIChpIDw9IGUxICYmIGkgPD0gZTIpIHtcbiAgICAgICAgICAgIGNvbnN0IG4xID0gYzFbaV07XG4gICAgICAgICAgICBjb25zdCBuMiA9IChjMltpXSA9IG9wdGltaXplZFxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xuICAgICAgICAgICAgaWYgKGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpKSB7XG4gICAgICAgICAgICAgICAgcGF0Y2gobjEsIG4yLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICAvLyAyLiBzeW5jIGZyb20gZW5kXG4gICAgICAgIC8vIGEgKGIgYylcbiAgICAgICAgLy8gZCBlIChiIGMpXG4gICAgICAgIHdoaWxlIChpIDw9IGUxICYmIGkgPD0gZTIpIHtcbiAgICAgICAgICAgIGNvbnN0IG4xID0gYzFbZTFdO1xuICAgICAgICAgICAgY29uc3QgbjIgPSAoYzJbZTJdID0gb3B0aW1pemVkXG4gICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltlMl0pXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltlMl0pKTtcbiAgICAgICAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xuICAgICAgICAgICAgICAgIHBhdGNoKG4xLCBuMiwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlMS0tO1xuICAgICAgICAgICAgZTItLTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLiBjb21tb24gc2VxdWVuY2UgKyBtb3VudFxuICAgICAgICAvLyAoYSBiKVxuICAgICAgICAvLyAoYSBiKSBjXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDEsIGUyID0gMlxuICAgICAgICAvLyAoYSBiKVxuICAgICAgICAvLyBjIChhIGIpXG4gICAgICAgIC8vIGkgPSAwLCBlMSA9IC0xLCBlMiA9IDBcbiAgICAgICAgaWYgKGkgPiBlMSkge1xuICAgICAgICAgICAgaWYgKGkgPD0gZTIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0UG9zID0gZTIgKyAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IG5leHRQb3MgPCBsMiA/IGMyW25leHRQb3NdLmVsIDogcGFyZW50QW5jaG9yO1xuICAgICAgICAgICAgICAgIHdoaWxlIChpIDw9IGUyKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIChjMltpXSA9IG9wdGltaXplZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltpXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pKSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gNC4gY29tbW9uIHNlcXVlbmNlICsgdW5tb3VudFxuICAgICAgICAvLyAoYSBiKSBjXG4gICAgICAgIC8vIChhIGIpXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDIsIGUyID0gMVxuICAgICAgICAvLyBhIChiIGMpXG4gICAgICAgIC8vIChiIGMpXG4gICAgICAgIC8vIGkgPSAwLCBlMSA9IDAsIGUyID0gLTFcbiAgICAgICAgZWxzZSBpZiAoaSA+IGUyKSB7XG4gICAgICAgICAgICB3aGlsZSAoaSA8PSBlMSkge1xuICAgICAgICAgICAgICAgIHVubW91bnQoYzFbaV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyA1LiB1bmtub3duIHNlcXVlbmNlXG4gICAgICAgIC8vIFtpIC4uLiBlMSArIDFdOiBhIGIgW2MgZCBlXSBmIGdcbiAgICAgICAgLy8gW2kgLi4uIGUyICsgMV06IGEgYiBbZSBkIGMgaF0gZiBnXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDQsIGUyID0gNVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHMxID0gaTsgLy8gcHJldiBzdGFydGluZyBpbmRleFxuICAgICAgICAgICAgY29uc3QgczIgPSBpOyAvLyBuZXh0IHN0YXJ0aW5nIGluZGV4XG4gICAgICAgICAgICAvLyA1LjEgYnVpbGQga2V5OmluZGV4IG1hcCBmb3IgbmV3Q2hpbGRyZW5cbiAgICAgICAgICAgIGNvbnN0IGtleVRvTmV3SW5kZXhNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBmb3IgKGkgPSBzMjsgaSA8PSBlMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkID0gKGMyW2ldID0gb3B0aW1pemVkXG4gICAgICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXG4gICAgICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pKTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dENoaWxkLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYga2V5VG9OZXdJbmRleE1hcC5oYXMobmV4dENoaWxkLmtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYER1cGxpY2F0ZSBrZXlzIGZvdW5kIGR1cmluZyB1cGRhdGU6YCwgSlNPTi5zdHJpbmdpZnkobmV4dENoaWxkLmtleSksIGBNYWtlIHN1cmUga2V5cyBhcmUgdW5pcXVlLmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGtleVRvTmV3SW5kZXhNYXAuc2V0KG5leHRDaGlsZC5rZXksIGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDUuMiBsb29wIHRocm91Z2ggb2xkIGNoaWxkcmVuIGxlZnQgdG8gYmUgcGF0Y2hlZCBhbmQgdHJ5IHRvIHBhdGNoXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBub2RlcyAmIHJlbW92ZSBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudFxuICAgICAgICAgICAgbGV0IGo7XG4gICAgICAgICAgICBsZXQgcGF0Y2hlZCA9IDA7XG4gICAgICAgICAgICBjb25zdCB0b0JlUGF0Y2hlZCA9IGUyIC0gczIgKyAxO1xuICAgICAgICAgICAgbGV0IG1vdmVkID0gZmFsc2U7XG4gICAgICAgICAgICAvLyB1c2VkIHRvIHRyYWNrIHdoZXRoZXIgYW55IG5vZGUgaGFzIG1vdmVkXG4gICAgICAgICAgICBsZXQgbWF4TmV3SW5kZXhTb0ZhciA9IDA7XG4gICAgICAgICAgICAvLyB3b3JrcyBhcyBNYXA8bmV3SW5kZXgsIG9sZEluZGV4PlxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IG9sZEluZGV4IGlzIG9mZnNldCBieSArMVxuICAgICAgICAgICAgLy8gYW5kIG9sZEluZGV4ID0gMCBpcyBhIHNwZWNpYWwgdmFsdWUgaW5kaWNhdGluZyB0aGUgbmV3IG5vZGUgaGFzXG4gICAgICAgICAgICAvLyBubyBjb3JyZXNwb25kaW5nIG9sZCBub2RlLlxuICAgICAgICAgICAgLy8gdXNlZCBmb3IgZGV0ZXJtaW5pbmcgbG9uZ2VzdCBzdGFibGUgc3Vic2VxdWVuY2VcbiAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4VG9PbGRJbmRleE1hcCA9IG5ldyBBcnJheSh0b0JlUGF0Y2hlZCk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9CZVBhdGNoZWQ7IGkrKylcbiAgICAgICAgICAgICAgICBuZXdJbmRleFRvT2xkSW5kZXhNYXBbaV0gPSAwO1xuICAgICAgICAgICAgZm9yIChpID0gczE7IGkgPD0gZTE7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZDaGlsZCA9IGMxW2ldO1xuICAgICAgICAgICAgICAgIGlmIChwYXRjaGVkID49IHRvQmVQYXRjaGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFsbCBuZXcgY2hpbGRyZW4gaGF2ZSBiZWVuIHBhdGNoZWQgc28gdGhpcyBjYW4gb25seSBiZSBhIHJlbW92YWxcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudChwcmV2Q2hpbGQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IG5ld0luZGV4O1xuICAgICAgICAgICAgICAgIGlmIChwcmV2Q2hpbGQua2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXggPSBrZXlUb05ld0luZGV4TWFwLmdldChwcmV2Q2hpbGQua2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGtleS1sZXNzIG5vZGUsIHRyeSB0byBsb2NhdGUgYSBrZXktbGVzcyBub2RlIG9mIHRoZSBzYW1lIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gczI7IGogPD0gZTI7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4VG9PbGRJbmRleE1hcFtqIC0gczJdID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTYW1lVk5vZGVUeXBlKHByZXZDaGlsZCwgYzJbal0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXggPSBqO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQocHJldkNoaWxkLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0luZGV4VG9PbGRJbmRleE1hcFtuZXdJbmRleCAtIHMyXSA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggPj0gbWF4TmV3SW5kZXhTb0Zhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4TmV3SW5kZXhTb0ZhciA9IG5ld0luZGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKHByZXZDaGlsZCwgYzJbbmV3SW5kZXhdLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoZWQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyA1LjMgbW92ZSBhbmQgbW91bnRcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlIGxvbmdlc3Qgc3RhYmxlIHN1YnNlcXVlbmNlIG9ubHkgd2hlbiBub2RlcyBoYXZlIG1vdmVkXG4gICAgICAgICAgICBjb25zdCBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZSA9IG1vdmVkXG4gICAgICAgICAgICAgICAgPyBnZXRTZXF1ZW5jZShuZXdJbmRleFRvT2xkSW5kZXhNYXApXG4gICAgICAgICAgICAgICAgOiBFTVBUWV9BUlI7XG4gICAgICAgICAgICBqID0gaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIC8vIGxvb3BpbmcgYmFja3dhcmRzIHNvIHRoYXQgd2UgY2FuIHVzZSBsYXN0IHBhdGNoZWQgbm9kZSBhcyBhbmNob3JcbiAgICAgICAgICAgIGZvciAoaSA9IHRvQmVQYXRjaGVkIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0SW5kZXggPSBzMiArIGk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkID0gYzJbbmV4dEluZGV4XTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0SW5kZXggKyAxIDwgbDIgPyBjMltuZXh0SW5kZXggKyAxXS5lbCA6IHBhcmVudEFuY2hvcjtcbiAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXhUb09sZEluZGV4TWFwW2ldID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdW50IG5ld1xuICAgICAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBuZXh0Q2hpbGQsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb3ZlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGlmOlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBubyBzdGFibGUgc3Vic2VxdWVuY2UgKGUuZy4gYSByZXZlcnNlKVxuICAgICAgICAgICAgICAgICAgICAvLyBPUiBjdXJyZW50IG5vZGUgaXMgbm90IGFtb25nIHRoZSBzdGFibGUgc2VxdWVuY2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPCAwIHx8IGkgIT09IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlW2pdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlKG5leHRDaGlsZCwgY29udGFpbmVyLCBhbmNob3IsIDIgLyogTW92ZVR5cGUuUkVPUkRFUiAqLyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG1vdmUgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSwgcGFyZW50U3VzcGVuc2UgPSBudWxsKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZWwsIHR5cGUsIHRyYW5zaXRpb24sIGNoaWxkcmVuLCBzaGFwZUZsYWcgfSA9IHZub2RlO1xuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLykge1xuICAgICAgICAgICAgbW92ZSh2bm9kZS5jb21wb25lbnQuc3ViVHJlZSwgY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgICAgIHZub2RlLnN1c3BlbnNlLm1vdmUoY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogU2hhcGVGbGFncy5URUxFUE9SVCAqLykge1xuICAgICAgICAgICAgdHlwZS5tb3ZlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgaW50ZXJuYWxzKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtb3ZlKGNoaWxkcmVuW2ldLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaG9zdEluc2VydCh2bm9kZS5hbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gU3RhdGljKSB7XG4gICAgICAgICAgICBtb3ZlU3RhdGljTm9kZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNpbmdsZSBub2Rlc1xuICAgICAgICBjb25zdCBuZWVkVHJhbnNpdGlvbiA9IG1vdmVUeXBlICE9PSAyIC8qIE1vdmVUeXBlLlJFT1JERVIgKi8gJiZcbiAgICAgICAgICAgIHNoYXBlRmxhZyAmIDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovICYmXG4gICAgICAgICAgICB0cmFuc2l0aW9uO1xuICAgICAgICBpZiAobmVlZFRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgIGlmIChtb3ZlVHlwZSA9PT0gMCAvKiBNb3ZlVHlwZS5FTlRFUiAqLykge1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgICAgICAgICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4gdHJhbnNpdGlvbi5lbnRlcihlbCksIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbGVhdmUsIGRlbGF5TGVhdmUsIGFmdGVyTGVhdmUgfSA9IHRyYW5zaXRpb247XG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlID0gKCkgPT4gaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBlcmZvcm1MZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGVhdmUoZWwsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsYXlMZWF2ZShlbCwgcmVtb3ZlLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybUxlYXZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB1bm1vdW50ID0gKHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSA9IGZhbHNlLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xuICAgICAgICBjb25zdCB7IHR5cGUsIHByb3BzLCByZWYsIGNoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4sIHNoYXBlRmxhZywgcGF0Y2hGbGFnLCBkaXJzIH0gPSB2bm9kZTtcbiAgICAgICAgLy8gdW5zZXQgcmVmXG4gICAgICAgIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0UmVmKHJlZiwgbnVsbCwgcGFyZW50U3VzcGVuc2UsIHZub2RlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMjU2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovKSB7XG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQuY3R4LmRlYWN0aXZhdGUodm5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNob3VsZEludm9rZURpcnMgPSBzaGFwZUZsYWcgJiAxIC8qIFNoYXBlRmxhZ3MuRUxFTUVOVCAqLyAmJiBkaXJzO1xuICAgICAgICBjb25zdCBzaG91bGRJbnZva2VWbm9kZUhvb2sgPSAhaXNBc3luY1dyYXBwZXIodm5vZGUpO1xuICAgICAgICBsZXQgdm5vZGVIb29rO1xuICAgICAgICBpZiAoc2hvdWxkSW52b2tlVm5vZGVIb29rICYmXG4gICAgICAgICAgICAodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZUJlZm9yZVVubW91bnQpKSB7XG4gICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLykge1xuICAgICAgICAgICAgdW5tb3VudENvbXBvbmVudCh2bm9kZS5jb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgICAgICAgICB2bm9kZS5zdXNwZW5zZS51bm1vdW50KHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNob3VsZEludm9rZURpcnMpIHtcbiAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdiZWZvcmVVbm1vdW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogU2hhcGVGbGFncy5URUxFUE9SVCAqLykge1xuICAgICAgICAgICAgICAgIHZub2RlLnR5cGUucmVtb3ZlKHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQsIGludGVybmFscywgZG9SZW1vdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZHluYW1pY0NoaWxkcmVuICYmXG4gICAgICAgICAgICAgICAgLy8gIzExNTM6IGZhc3QgcGF0aCBzaG91bGQgbm90IGJlIHRha2VuIGZvciBub24tc3RhYmxlICh2LWZvcikgZnJhZ21lbnRzXG4gICAgICAgICAgICAgICAgKHR5cGUgIT09IEZyYWdtZW50IHx8XG4gICAgICAgICAgICAgICAgICAgIChwYXRjaEZsYWcgPiAwICYmIHBhdGNoRmxhZyAmIDY0IC8qIFBhdGNoRmxhZ3MuU1RBQkxFX0ZSQUdNRU5UICovKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBmYXN0IHBhdGggZm9yIGJsb2NrIG5vZGVzOiBvbmx5IG5lZWQgdG8gdW5tb3VudCBkeW5hbWljIGNoaWxkcmVuLlxuICAgICAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihkeW5hbWljQ2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCh0eXBlID09PSBGcmFnbWVudCAmJlxuICAgICAgICAgICAgICAgIHBhdGNoRmxhZyAmXG4gICAgICAgICAgICAgICAgICAgICgxMjggLyogUGF0Y2hGbGFncy5LRVlFRF9GUkFHTUVOVCAqLyB8IDI1NiAvKiBQYXRjaEZsYWdzLlVOS0VZRURfRlJBR01FTlQgKi8pKSB8fFxuICAgICAgICAgICAgICAgICghb3B0aW1pemVkICYmIHNoYXBlRmxhZyAmIDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi8pKSB7XG4gICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkb1JlbW92ZSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZSh2bm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzaG91bGRJbnZva2VWbm9kZUhvb2sgJiZcbiAgICAgICAgICAgICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlVW5tb3VudGVkKSkgfHxcbiAgICAgICAgICAgIHNob3VsZEludm9rZURpcnMpIHtcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICAgICAgICAgIHNob3VsZEludm9rZURpcnMgJiZcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAndW5tb3VudGVkJyk7XG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZSA9IHZub2RlID0+IHtcbiAgICAgICAgY29uc3QgeyB0eXBlLCBlbCwgYW5jaG9yLCB0cmFuc2l0aW9uIH0gPSB2bm9kZTtcbiAgICAgICAgaWYgKHR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgdm5vZGUucGF0Y2hGbGFnID4gMCAmJlxuICAgICAgICAgICAgICAgIHZub2RlLnBhdGNoRmxhZyAmIDIwNDggLyogUGF0Y2hGbGFncy5ERVZfUk9PVF9GUkFHTUVOVCAqLyAmJlxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gJiZcbiAgICAgICAgICAgICAgICAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQpIHtcbiAgICAgICAgICAgICAgICB2bm9kZS5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RSZW1vdmUoY2hpbGQuZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRnJhZ21lbnQoZWwsIGFuY2hvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09IFN0YXRpYykge1xuICAgICAgICAgICAgcmVtb3ZlU3RhdGljTm9kZSh2bm9kZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGVyZm9ybVJlbW92ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGhvc3RSZW1vdmUoZWwpO1xuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgIXRyYW5zaXRpb24ucGVyc2lzdGVkICYmIHRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSkge1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi8gJiZcbiAgICAgICAgICAgIHRyYW5zaXRpb24gJiZcbiAgICAgICAgICAgICF0cmFuc2l0aW9uLnBlcnNpc3RlZCkge1xuICAgICAgICAgICAgY29uc3QgeyBsZWF2ZSwgZGVsYXlMZWF2ZSB9ID0gdHJhbnNpdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IHBlcmZvcm1MZWF2ZSA9ICgpID0+IGxlYXZlKGVsLCBwZXJmb3JtUmVtb3ZlKTtcbiAgICAgICAgICAgIGlmIChkZWxheUxlYXZlKSB7XG4gICAgICAgICAgICAgICAgZGVsYXlMZWF2ZSh2bm9kZS5lbCwgcGVyZm9ybVJlbW92ZSwgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlcmZvcm1MZWF2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVyZm9ybVJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVGcmFnbWVudCA9IChjdXIsIGVuZCkgPT4ge1xuICAgICAgICAvLyBGb3IgZnJhZ21lbnRzLCBkaXJlY3RseSByZW1vdmUgYWxsIGNvbnRhaW5lZCBET00gbm9kZXMuXG4gICAgICAgIC8vIChmcmFnbWVudCBjaGlsZCBub2RlcyBjYW5ub3QgaGF2ZSB0cmFuc2l0aW9uKVxuICAgICAgICBsZXQgbmV4dDtcbiAgICAgICAgd2hpbGUgKGN1ciAhPT0gZW5kKSB7XG4gICAgICAgICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGN1cik7XG4gICAgICAgICAgICBob3N0UmVtb3ZlKGN1cik7XG4gICAgICAgICAgICBjdXIgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIGhvc3RSZW1vdmUoZW5kKTtcbiAgICB9O1xuICAgIGNvbnN0IHVubW91bnRDb21wb25lbnQgPSAoaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSkgPT4ge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGluc3RhbmNlLnR5cGUuX19obXJJZCkge1xuICAgICAgICAgICAgdW5yZWdpc3RlckhNUihpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBidW0sIHNjb3BlLCB1cGRhdGUsIHN1YlRyZWUsIHVtIH0gPSBpbnN0YW5jZTtcbiAgICAgICAgLy8gYmVmb3JlVW5tb3VudCBob29rXG4gICAgICAgIGlmIChidW0pIHtcbiAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJ1bSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3RvcCBlZmZlY3RzIGluIGNvbXBvbmVudCBzY29wZVxuICAgICAgICBzY29wZS5zdG9wKCk7XG4gICAgICAgIC8vIHVwZGF0ZSBtYXkgYmUgbnVsbCBpZiBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYmVmb3JlIGl0cyBhc3luY1xuICAgICAgICAvLyBzZXR1cCBoYXMgcmVzb2x2ZWQuXG4gICAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgICAgIC8vIHNvIHRoYXQgc2NoZWR1bGVyIHdpbGwgbm8gbG9uZ2VyIGludm9rZSBpdFxuICAgICAgICAgICAgdXBkYXRlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdW5tb3VudChzdWJUcmVlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB1bm1vdW50ZWQgaG9va1xuICAgICAgICBpZiAodW0pIHtcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCh1bSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICB9XG4gICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBpbnN0YW5jZS5pc1VubW91bnRlZCA9IHRydWU7XG4gICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgLy8gQSBjb21wb25lbnQgd2l0aCBhc3luYyBkZXAgaW5zaWRlIGEgcGVuZGluZyBzdXNwZW5zZSBpcyB1bm1vdW50ZWQgYmVmb3JlXG4gICAgICAgIC8vIGl0cyBhc3luYyBkZXAgcmVzb2x2ZXMuIFRoaXMgc2hvdWxkIHJlbW92ZSB0aGUgZGVwIGZyb20gdGhlIHN1c3BlbnNlLCBhbmRcbiAgICAgICAgLy8gY2F1c2UgdGhlIHN1c3BlbnNlIHRvIHJlc29sdmUgaW1tZWRpYXRlbHkgaWYgdGhhdCB3YXMgdGhlIGxhc3QgZGVwLlxuICAgICAgICBpZiAocGFyZW50U3VzcGVuc2UgJiZcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggJiZcbiAgICAgICAgICAgICFwYXJlbnRTdXNwZW5zZS5pc1VubW91bnRlZCAmJlxuICAgICAgICAgICAgaW5zdGFuY2UuYXN5bmNEZXAgJiZcbiAgICAgICAgICAgICFpbnN0YW5jZS5hc3luY1Jlc29sdmVkICYmXG4gICAgICAgICAgICBpbnN0YW5jZS5zdXNwZW5zZUlkID09PSBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nSWQpIHtcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLmRlcHMtLTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRTdXNwZW5zZS5kZXBzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB1bm1vdW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlLCBzdGFydCA9IDApID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHVubW91bnQoY2hpbGRyZW5baV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlLCBvcHRpbWl6ZWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBnZXROZXh0SG9zdE5vZGUgPSB2bm9kZSA9PiB7XG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TmV4dEhvc3ROb2RlKHZub2RlLmNvbXBvbmVudC5zdWJUcmVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiB2bm9kZS5zdXNwZW5zZS5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhvc3ROZXh0U2libGluZygodm5vZGUuYW5jaG9yIHx8IHZub2RlLmVsKSk7XG4gICAgfTtcbiAgICBjb25zdCByZW5kZXIgPSAodm5vZGUsIGNvbnRhaW5lciwgaXNTVkcpID0+IHtcbiAgICAgICAgaWYgKHZub2RlID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjb250YWluZXIuX3Zub2RlKSB7XG4gICAgICAgICAgICAgICAgdW5tb3VudChjb250YWluZXIuX3Zub2RlLCBudWxsLCBudWxsLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhdGNoKGNvbnRhaW5lci5fdm5vZGUgfHwgbnVsbCwgdm5vZGUsIGNvbnRhaW5lciwgbnVsbCwgbnVsbCwgbnVsbCwgaXNTVkcpO1xuICAgICAgICB9XG4gICAgICAgIGZsdXNoUHJlRmx1c2hDYnMoKTtcbiAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcbiAgICAgICAgY29udGFpbmVyLl92bm9kZSA9IHZub2RlO1xuICAgIH07XG4gICAgY29uc3QgaW50ZXJuYWxzID0ge1xuICAgICAgICBwOiBwYXRjaCxcbiAgICAgICAgdW06IHVubW91bnQsXG4gICAgICAgIG06IG1vdmUsXG4gICAgICAgIHI6IHJlbW92ZSxcbiAgICAgICAgbXQ6IG1vdW50Q29tcG9uZW50LFxuICAgICAgICBtYzogbW91bnRDaGlsZHJlbixcbiAgICAgICAgcGM6IHBhdGNoQ2hpbGRyZW4sXG4gICAgICAgIHBiYzogcGF0Y2hCbG9ja0NoaWxkcmVuLFxuICAgICAgICBuOiBnZXROZXh0SG9zdE5vZGUsXG4gICAgICAgIG86IG9wdGlvbnNcbiAgICB9O1xuICAgIGxldCBoeWRyYXRlO1xuICAgIGxldCBoeWRyYXRlTm9kZTtcbiAgICBpZiAoY3JlYXRlSHlkcmF0aW9uRm5zKSB7XG4gICAgICAgIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV0gPSBjcmVhdGVIeWRyYXRpb25GbnMoaW50ZXJuYWxzKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVuZGVyLFxuICAgICAgICBoeWRyYXRlLFxuICAgICAgICBjcmVhdGVBcHA6IGNyZWF0ZUFwcEFQSShyZW5kZXIsIGh5ZHJhdGUpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvZ2dsZVJlY3Vyc2UoeyBlZmZlY3QsIHVwZGF0ZSB9LCBhbGxvd2VkKSB7XG4gICAgZWZmZWN0LmFsbG93UmVjdXJzZSA9IHVwZGF0ZS5hbGxvd1JlY3Vyc2UgPSBhbGxvd2VkO1xufVxuLyoqXG4gKiAjMTE1NlxuICogV2hlbiBhIGNvbXBvbmVudCBpcyBITVItZW5hYmxlZCwgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCBhbGwgc3RhdGljIG5vZGVzXG4gKiBpbnNpZGUgYSBibG9jayBhbHNvIGluaGVyaXQgdGhlIERPTSBlbGVtZW50IGZyb20gdGhlIHByZXZpb3VzIHRyZWUgc28gdGhhdFxuICogSE1SIHVwZGF0ZXMgKHdoaWNoIGFyZSBmdWxsIHVwZGF0ZXMpIGNhbiByZXRyaWV2ZSB0aGUgZWxlbWVudCBmb3IgcGF0Y2hpbmcuXG4gKlxuICogIzIwODBcbiAqIEluc2lkZSBrZXllZCBgdGVtcGxhdGVgIGZyYWdtZW50IHN0YXRpYyBjaGlsZHJlbiwgaWYgYSBmcmFnbWVudCBpcyBtb3ZlZCxcbiAqIHRoZSBjaGlsZHJlbiB3aWxsIGFsd2F5cyBiZSBtb3ZlZC4gVGhlcmVmb3JlLCBpbiBvcmRlciB0byBlbnN1cmUgY29ycmVjdCBtb3ZlXG4gKiBwb3NpdGlvbiwgZWwgc2hvdWxkIGJlIGluaGVyaXRlZCBmcm9tIHByZXZpb3VzIG5vZGVzLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMiwgc2hhbGxvdyA9IGZhbHNlKSB7XG4gICAgY29uc3QgY2gxID0gbjEuY2hpbGRyZW47XG4gICAgY29uc3QgY2gyID0gbjIuY2hpbGRyZW47XG4gICAgaWYgKGlzQXJyYXkoY2gxKSAmJiBpc0FycmF5KGNoMikpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaDEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgb25seSBjYWxsZWQgaW4gdGhlIG9wdGltaXplZCBwYXRoIHNvIGFycmF5IGNoaWxkcmVuIGFyZVxuICAgICAgICAgICAgLy8gZ3VhcmFudGVlZCB0byBiZSB2bm9kZXNcbiAgICAgICAgICAgIGNvbnN0IGMxID0gY2gxW2ldO1xuICAgICAgICAgICAgbGV0IGMyID0gY2gyW2ldO1xuICAgICAgICAgICAgaWYgKGMyLnNoYXBlRmxhZyAmIDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovICYmICFjMi5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBpZiAoYzIucGF0Y2hGbGFnIDw9IDAgfHwgYzIucGF0Y2hGbGFnID09PSAzMiAvKiBQYXRjaEZsYWdzLkhZRFJBVEVfRVZFTlRTICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGMyID0gY2gyW2ldID0gY2xvbmVJZk1vdW50ZWQoY2gyW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgYzIuZWwgPSBjMS5lbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFzaGFsbG93KVxuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKGMxLCBjMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhbHNvIGluaGVyaXQgZm9yIGNvbW1lbnQgbm9kZXMsIGJ1dCBub3QgcGxhY2Vob2xkZXJzIChlLmcuIHYtaWYgd2hpY2hcbiAgICAgICAgICAgIC8vIHdvdWxkIGhhdmUgcmVjZWl2ZWQgLmVsIGR1cmluZyBibG9jayBwYXRjaClcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgYzIudHlwZSA9PT0gQ29tbWVudCAmJiAhYzIuZWwpIHtcbiAgICAgICAgICAgICAgICBjMi5lbCA9IGMxLmVsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTG9uZ2VzdF9pbmNyZWFzaW5nX3N1YnNlcXVlbmNlXG5mdW5jdGlvbiBnZXRTZXF1ZW5jZShhcnIpIHtcbiAgICBjb25zdCBwID0gYXJyLnNsaWNlKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gWzBdO1xuICAgIGxldCBpLCBqLCB1LCB2LCBjO1xuICAgIGNvbnN0IGxlbiA9IGFyci5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFyckkgPSBhcnJbaV07XG4gICAgICAgIGlmIChhcnJJICE9PSAwKSB7XG4gICAgICAgICAgICBqID0gcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChhcnJbal0gPCBhcnJJKSB7XG4gICAgICAgICAgICAgICAgcFtpXSA9IGo7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1ID0gMDtcbiAgICAgICAgICAgIHYgPSByZXN1bHQubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHdoaWxlICh1IDwgdikge1xuICAgICAgICAgICAgICAgIGMgPSAodSArIHYpID4+IDE7XG4gICAgICAgICAgICAgICAgaWYgKGFycltyZXN1bHRbY11dIDwgYXJySSkge1xuICAgICAgICAgICAgICAgICAgICB1ID0gYyArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2ID0gYztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXJySSA8IGFycltyZXN1bHRbdV1dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHBbaV0gPSByZXN1bHRbdSAtIDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHRbdV0gPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHUgPSByZXN1bHQubGVuZ3RoO1xuICAgIHYgPSByZXN1bHRbdSAtIDFdO1xuICAgIHdoaWxlICh1LS0gPiAwKSB7XG4gICAgICAgIHJlc3VsdFt1XSA9IHY7XG4gICAgICAgIHYgPSBwW3ZdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5jb25zdCBpc1RlbGVwb3J0ID0gKHR5cGUpID0+IHR5cGUuX19pc1RlbGVwb3J0O1xuY29uc3QgaXNUZWxlcG9ydERpc2FibGVkID0gKHByb3BzKSA9PiBwcm9wcyAmJiAocHJvcHMuZGlzYWJsZWQgfHwgcHJvcHMuZGlzYWJsZWQgPT09ICcnKTtcbmNvbnN0IGlzVGFyZ2V0U1ZHID0gKHRhcmdldCkgPT4gdHlwZW9mIFNWR0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHRhcmdldCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQ7XG5jb25zdCByZXNvbHZlVGFyZ2V0ID0gKHByb3BzLCBzZWxlY3QpID0+IHtcbiAgICBjb25zdCB0YXJnZXRTZWxlY3RvciA9IHByb3BzICYmIHByb3BzLnRvO1xuICAgIGlmIChpc1N0cmluZyh0YXJnZXRTZWxlY3RvcikpIHtcbiAgICAgICAgaWYgKCFzZWxlY3QpIHtcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgIHdhcm4oYEN1cnJlbnQgcmVuZGVyZXIgZG9lcyBub3Qgc3VwcG9ydCBzdHJpbmcgdGFyZ2V0IGZvciBUZWxlcG9ydHMuIGAgK1xuICAgICAgICAgICAgICAgICAgICBgKG1pc3NpbmcgcXVlcnlTZWxlY3RvciByZW5kZXJlciBvcHRpb24pYCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHNlbGVjdCh0YXJnZXRTZWxlY3Rvcik7XG4gICAgICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBGYWlsZWQgdG8gbG9jYXRlIFRlbGVwb3J0IHRhcmdldCB3aXRoIHNlbGVjdG9yIFwiJHt0YXJnZXRTZWxlY3Rvcn1cIi4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgTm90ZSB0aGUgdGFyZ2V0IGVsZW1lbnQgbXVzdCBleGlzdCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkIC0gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgaS5lLiB0aGUgdGFyZ2V0IGNhbm5vdCBiZSByZW5kZXJlZCBieSB0aGUgY29tcG9uZW50IGl0c2VsZiwgYW5kIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGlkZWFsbHkgc2hvdWxkIGJlIG91dHNpZGUgb2YgdGhlIGVudGlyZSBWdWUgY29tcG9uZW50IHRyZWUuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICF0YXJnZXRTZWxlY3RvciAmJiAhaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xuICAgICAgICAgICAgd2FybihgSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQ6ICR7dGFyZ2V0U2VsZWN0b3J9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldFNlbGVjdG9yO1xuICAgIH1cbn07XG5jb25zdCBUZWxlcG9ydEltcGwgPSB7XG4gICAgX19pc1RlbGVwb3J0OiB0cnVlLFxuICAgIHByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBpbnRlcm5hbHMpIHtcbiAgICAgICAgY29uc3QgeyBtYzogbW91bnRDaGlsZHJlbiwgcGM6IHBhdGNoQ2hpbGRyZW4sIHBiYzogcGF0Y2hCbG9ja0NoaWxkcmVuLCBvOiB7IGluc2VydCwgcXVlcnlTZWxlY3RvciwgY3JlYXRlVGV4dCwgY3JlYXRlQ29tbWVudCB9IH0gPSBpbnRlcm5hbHM7XG4gICAgICAgIGNvbnN0IGRpc2FibGVkID0gaXNUZWxlcG9ydERpc2FibGVkKG4yLnByb3BzKTtcbiAgICAgICAgbGV0IHsgc2hhcGVGbGFnLCBjaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuIH0gPSBuMjtcbiAgICAgICAgLy8gIzMzMDJcbiAgICAgICAgLy8gSE1SIHVwZGF0ZWQsIGZvcmNlIGZ1bGwgZGlmZlxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzSG1yVXBkYXRpbmcpIHtcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gaW5zZXJ0IGFuY2hvcnMgaW4gdGhlIG1haW4gdmlld1xuICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSAobjIuZWwgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgICAgICAgICA/IGNyZWF0ZUNvbW1lbnQoJ3RlbGVwb3J0IHN0YXJ0JylcbiAgICAgICAgICAgICAgICA6IGNyZWF0ZVRleHQoJycpKTtcbiAgICAgICAgICAgIGNvbnN0IG1haW5BbmNob3IgPSAobjIuYW5jaG9yID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgICAgICAgICAgPyBjcmVhdGVDb21tZW50KCd0ZWxlcG9ydCBlbmQnKVxuICAgICAgICAgICAgICAgIDogY3JlYXRlVGV4dCgnJykpO1xuICAgICAgICAgICAgaW5zZXJ0KHBsYWNlaG9sZGVyLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgICAgICBpbnNlcnQobWFpbkFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gKG4yLnRhcmdldCA9IHJlc29sdmVUYXJnZXQobjIucHJvcHMsIHF1ZXJ5U2VsZWN0b3IpKTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldEFuY2hvciA9IChuMi50YXJnZXRBbmNob3IgPSBjcmVhdGVUZXh0KCcnKSk7XG4gICAgICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0KHRhcmdldEFuY2hvciwgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAvLyAjMjY1MiB3ZSBjb3VsZCBiZSB0ZWxlcG9ydGluZyBmcm9tIGEgbm9uLVNWRyB0cmVlIGludG8gYW4gU1ZHIHRyZWVcbiAgICAgICAgICAgICAgICBpc1NWRyA9IGlzU1ZHIHx8IGlzVGFyZ2V0U1ZHKHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQgb24gbW91bnQ6JywgdGFyZ2V0LCBgKCR7dHlwZW9mIHRhcmdldH0pYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtb3VudCA9IChjb250YWluZXIsIGFuY2hvcikgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFRlbGVwb3J0ICphbHdheXMqIGhhcyBBcnJheSBjaGlsZHJlbi4gVGhpcyBpcyBlbmZvcmNlZCBpbiBib3RoIHRoZVxuICAgICAgICAgICAgICAgIC8vIGNvbXBpbGVyIGFuZCB2bm9kZSBjaGlsZHJlbiBub3JtYWxpemF0aW9uLlxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4oY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBtb3VudChjb250YWluZXIsIG1haW5BbmNob3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgbW91bnQodGFyZ2V0LCB0YXJnZXRBbmNob3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gdXBkYXRlIGNvbnRlbnRcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgICAgICAgICBjb25zdCBtYWluQW5jaG9yID0gKG4yLmFuY2hvciA9IG4xLmFuY2hvcik7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSAobjIudGFyZ2V0ID0gbjEudGFyZ2V0KTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldEFuY2hvciA9IChuMi50YXJnZXRBbmNob3IgPSBuMS50YXJnZXRBbmNob3IpO1xuICAgICAgICAgICAgY29uc3Qgd2FzRGlzYWJsZWQgPSBpc1RlbGVwb3J0RGlzYWJsZWQobjEucHJvcHMpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudENvbnRhaW5lciA9IHdhc0Rpc2FibGVkID8gY29udGFpbmVyIDogdGFyZ2V0O1xuICAgICAgICAgICAgY29uc3QgY3VycmVudEFuY2hvciA9IHdhc0Rpc2FibGVkID8gbWFpbkFuY2hvciA6IHRhcmdldEFuY2hvcjtcbiAgICAgICAgICAgIGlzU1ZHID0gaXNTVkcgfHwgaXNUYXJnZXRTVkcodGFyZ2V0KTtcbiAgICAgICAgICAgIGlmIChkeW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBmYXN0IHBhdGggd2hlbiB0aGUgdGVsZXBvcnQgaGFwcGVucyB0byBiZSBhIGJsb2NrIHJvb3RcbiAgICAgICAgICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4objEuZHluYW1pY0NoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4sIGN1cnJlbnRDb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMpO1xuICAgICAgICAgICAgICAgIC8vIGV2ZW4gaW4gYmxvY2sgdHJlZSBtb2RlIHdlIG5lZWQgdG8gbWFrZSBzdXJlIGFsbCByb290LWxldmVsIG5vZGVzXG4gICAgICAgICAgICAgICAgLy8gaW4gdGhlIHRlbGVwb3J0IGluaGVyaXQgcHJldmlvdXMgRE9NIHJlZmVyZW5jZXMgc28gdGhhdCB0aGV5IGNhblxuICAgICAgICAgICAgICAgIC8vIGJlIG1vdmVkIGluIGZ1dHVyZSBwYXRjaGVzLlxuICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFvcHRpbWl6ZWQpIHtcbiAgICAgICAgICAgICAgICBwYXRjaENoaWxkcmVuKG4xLCBuMiwgY3VycmVudENvbnRhaW5lciwgY3VycmVudEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3YXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlbmFibGVkIC0+IGRpc2FibGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgaW50byBtYWluIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICBtb3ZlVGVsZXBvcnQobjIsIGNvbnRhaW5lciwgbWFpbkFuY2hvciwgaW50ZXJuYWxzLCAxIC8qIFRlbGVwb3J0TW92ZVR5cGVzLlRPR0dMRSAqLyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdGFyZ2V0IGNoYW5nZWRcbiAgICAgICAgICAgICAgICBpZiAoKG4yLnByb3BzICYmIG4yLnByb3BzLnRvKSAhPT0gKG4xLnByb3BzICYmIG4xLnByb3BzLnRvKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0VGFyZ2V0ID0gKG4yLnRhcmdldCA9IHJlc29sdmVUYXJnZXQobjIucHJvcHMsIHF1ZXJ5U2VsZWN0b3IpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVUZWxlcG9ydChuMiwgbmV4dFRhcmdldCwgbnVsbCwgaW50ZXJuYWxzLCAwIC8qIFRlbGVwb3J0TW92ZVR5cGVzLlRBUkdFVF9DSEFOR0UgKi8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQgb24gdXBkYXRlOicsIHRhcmdldCwgYCgke3R5cGVvZiB0YXJnZXR9KWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHdhc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRpc2FibGVkIC0+IGVuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBpbnRvIHRlbGVwb3J0IHRhcmdldFxuICAgICAgICAgICAgICAgICAgICBtb3ZlVGVsZXBvcnQobjIsIHRhcmdldCwgdGFyZ2V0QW5jaG9yLCBpbnRlcm5hbHMsIDEgLyogVGVsZXBvcnRNb3ZlVHlwZXMuVE9HR0xFICovKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZSh2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkLCB7IHVtOiB1bm1vdW50LCBvOiB7IHJlbW92ZTogaG9zdFJlbW92ZSB9IH0sIGRvUmVtb3ZlKSB7XG4gICAgICAgIGNvbnN0IHsgc2hhcGVGbGFnLCBjaGlsZHJlbiwgYW5jaG9yLCB0YXJnZXRBbmNob3IsIHRhcmdldCwgcHJvcHMgfSA9IHZub2RlO1xuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICBob3N0UmVtb3ZlKHRhcmdldEFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYW4gdW5tb3VudGVkIHRlbGVwb3J0IHNob3VsZCBhbHdheXMgcmVtb3ZlIGl0cyBjaGlsZHJlbiBpZiBub3QgZGlzYWJsZWRcbiAgICAgICAgaWYgKGRvUmVtb3ZlIHx8ICFpc1RlbGVwb3J0RGlzYWJsZWQocHJvcHMpKSB7XG4gICAgICAgICAgICBob3N0UmVtb3ZlKGFuY2hvcik7XG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudChjaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSwgISFjaGlsZC5keW5hbWljQ2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgbW92ZTogbW92ZVRlbGVwb3J0LFxuICAgIGh5ZHJhdGU6IGh5ZHJhdGVUZWxlcG9ydFxufTtcbmZ1bmN0aW9uIG1vdmVUZWxlcG9ydCh2bm9kZSwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IsIHsgbzogeyBpbnNlcnQgfSwgbTogbW92ZSB9LCBtb3ZlVHlwZSA9IDIgLyogVGVsZXBvcnRNb3ZlVHlwZXMuUkVPUkRFUiAqLykge1xuICAgIC8vIG1vdmUgdGFyZ2V0IGFuY2hvciBpZiB0aGlzIGlzIGEgdGFyZ2V0IGNoYW5nZS5cbiAgICBpZiAobW92ZVR5cGUgPT09IDAgLyogVGVsZXBvcnRNb3ZlVHlwZXMuVEFSR0VUX0NIQU5HRSAqLykge1xuICAgICAgICBpbnNlcnQodm5vZGUudGFyZ2V0QW5jaG9yLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XG4gICAgfVxuICAgIGNvbnN0IHsgZWwsIGFuY2hvciwgc2hhcGVGbGFnLCBjaGlsZHJlbiwgcHJvcHMgfSA9IHZub2RlO1xuICAgIGNvbnN0IGlzUmVvcmRlciA9IG1vdmVUeXBlID09PSAyIC8qIFRlbGVwb3J0TW92ZVR5cGVzLlJFT1JERVIgKi87XG4gICAgLy8gbW92ZSBtYWluIHZpZXcgYW5jaG9yIGlmIHRoaXMgaXMgYSByZS1vcmRlci5cbiAgICBpZiAoaXNSZW9yZGVyKSB7XG4gICAgICAgIGluc2VydChlbCwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xuICAgIH1cbiAgICAvLyBpZiB0aGlzIGlzIGEgcmUtb3JkZXIgYW5kIHRlbGVwb3J0IGlzIGVuYWJsZWQgKGNvbnRlbnQgaXMgaW4gdGFyZ2V0KVxuICAgIC8vIGRvIG5vdCBtb3ZlIGNoaWxkcmVuLiBTbyB0aGUgb3Bwb3NpdGUgaXM6IG9ubHkgbW92ZSBjaGlsZHJlbiBpZiB0aGlzXG4gICAgLy8gaXMgbm90IGEgcmVvcmRlciwgb3IgdGhlIHRlbGVwb3J0IGlzIGRpc2FibGVkXG4gICAgaWYgKCFpc1Jlb3JkZXIgfHwgaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xuICAgICAgICAvLyBUZWxlcG9ydCBoYXMgZWl0aGVyIEFycmF5IGNoaWxkcmVuIG9yIG5vIGNoaWxkcmVuLlxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG1vdmUoY2hpbGRyZW5baV0sIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCAyIC8qIE1vdmVUeXBlLlJFT1JERVIgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIG1vdmUgbWFpbiB2aWV3IGFuY2hvciBpZiB0aGlzIGlzIGEgcmUtb3JkZXIuXG4gICAgaWYgKGlzUmVvcmRlcikge1xuICAgICAgICBpbnNlcnQoYW5jaG9yLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gaHlkcmF0ZVRlbGVwb3J0KG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgeyBvOiB7IG5leHRTaWJsaW5nLCBwYXJlbnROb2RlLCBxdWVyeVNlbGVjdG9yIH0gfSwgaHlkcmF0ZUNoaWxkcmVuKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gKHZub2RlLnRhcmdldCA9IHJlc29sdmVUYXJnZXQodm5vZGUucHJvcHMsIHF1ZXJ5U2VsZWN0b3IpKTtcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIC8vIGlmIG11bHRpcGxlIHRlbGVwb3J0cyByZW5kZXJlZCB0byB0aGUgc2FtZSB0YXJnZXQgZWxlbWVudCwgd2UgbmVlZCB0b1xuICAgICAgICAvLyBwaWNrIHVwIGZyb20gd2hlcmUgdGhlIGxhc3QgdGVsZXBvcnQgZmluaXNoZWQgaW5zdGVhZCBvZiB0aGUgZmlyc3Qgbm9kZVxuICAgICAgICBjb25zdCB0YXJnZXROb2RlID0gdGFyZ2V0Ll9scGEgfHwgdGFyZ2V0LmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICBpZiAoaXNUZWxlcG9ydERpc2FibGVkKHZub2RlLnByb3BzKSkge1xuICAgICAgICAgICAgICAgIHZub2RlLmFuY2hvciA9IGh5ZHJhdGVDaGlsZHJlbihuZXh0U2libGluZyhub2RlKSwgdm5vZGUsIHBhcmVudE5vZGUobm9kZSksIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgPSB0YXJnZXROb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgICAgICAgLy8gbG9va2FoZWFkIHVudGlsIHdlIGZpbmQgdGhlIHRhcmdldCBhbmNob3JcbiAgICAgICAgICAgICAgICAvLyB3ZSBjYW5ub3QgcmVseSBvbiByZXR1cm4gdmFsdWUgb2YgaHlkcmF0ZUNoaWxkcmVuKCkgYmVjYXVzZSB0aGVyZVxuICAgICAgICAgICAgICAgIC8vIGNvdWxkIGJlIG5lc3RlZCB0ZWxlcG9ydHNcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0QW5jaG9yID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgICAgICAgICB3aGlsZSAodGFyZ2V0QW5jaG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEFuY2hvciA9IG5leHRTaWJsaW5nKHRhcmdldEFuY2hvcik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRBbmNob3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFuY2hvci5ub2RlVHlwZSA9PT0gOCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QW5jaG9yLmRhdGEgPT09ICd0ZWxlcG9ydCBhbmNob3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgPSB0YXJnZXRBbmNob3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuX2xwYSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUudGFyZ2V0QW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLnRhcmdldEFuY2hvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoeWRyYXRlQ2hpbGRyZW4odGFyZ2V0Tm9kZSwgdm5vZGUsIHRhcmdldCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bm9kZS5hbmNob3IgJiYgbmV4dFNpYmxpbmcodm5vZGUuYW5jaG9yKTtcbn1cbi8vIEZvcmNlLWNhc3RlZCBwdWJsaWMgdHlwaW5nIGZvciBoIGFuZCBUU1ggcHJvcHMgaW5mZXJlbmNlXG5jb25zdCBUZWxlcG9ydCA9IFRlbGVwb3J0SW1wbDtcblxuY29uc3QgRnJhZ21lbnQgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ0ZyYWdtZW50JyA6IHVuZGVmaW5lZCk7XG5jb25zdCBUZXh0ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdUZXh0JyA6IHVuZGVmaW5lZCk7XG5jb25zdCBDb21tZW50ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdDb21tZW50JyA6IHVuZGVmaW5lZCk7XG5jb25zdCBTdGF0aWMgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ1N0YXRpYycgOiB1bmRlZmluZWQpO1xuLy8gU2luY2Ugdi1pZiBhbmQgdi1mb3IgYXJlIHRoZSB0d28gcG9zc2libGUgd2F5cyBub2RlIHN0cnVjdHVyZSBjYW4gZHluYW1pY2FsbHlcbi8vIGNoYW5nZSwgb25jZSB3ZSBjb25zaWRlciB2LWlmIGJyYW5jaGVzIGFuZCBlYWNoIHYtZm9yIGZyYWdtZW50IGEgYmxvY2ssIHdlXG4vLyBjYW4gZGl2aWRlIGEgdGVtcGxhdGUgaW50byBuZXN0ZWQgYmxvY2tzLCBhbmQgd2l0aGluIGVhY2ggYmxvY2sgdGhlIG5vZGVcbi8vIHN0cnVjdHVyZSB3b3VsZCBiZSBzdGFibGUuIFRoaXMgYWxsb3dzIHVzIHRvIHNraXAgbW9zdCBjaGlsZHJlbiBkaWZmaW5nXG4vLyBhbmQgb25seSB3b3JyeSBhYm91dCB0aGUgZHluYW1pYyBub2RlcyAoaW5kaWNhdGVkIGJ5IHBhdGNoIGZsYWdzKS5cbmNvbnN0IGJsb2NrU3RhY2sgPSBbXTtcbmxldCBjdXJyZW50QmxvY2sgPSBudWxsO1xuLyoqXG4gKiBPcGVuIGEgYmxvY2suXG4gKiBUaGlzIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBgY3JlYXRlQmxvY2tgLiBJdCBjYW5ub3QgYmUgcGFydCBvZiBgY3JlYXRlQmxvY2tgXG4gKiBiZWNhdXNlIHRoZSBjaGlsZHJlbiBvZiB0aGUgYmxvY2sgYXJlIGV2YWx1YXRlZCBiZWZvcmUgYGNyZWF0ZUJsb2NrYCBpdHNlbGZcbiAqIGlzIGNhbGxlZC4gVGhlIGdlbmVyYXRlZCBjb2RlIHR5cGljYWxseSBsb29rcyBsaWtlIHRoaXM6XG4gKlxuICogYGBganNcbiAqIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAqICAgcmV0dXJuIChvcGVuQmxvY2soKSxjcmVhdGVCbG9jaygnZGl2JywgbnVsbCwgWy4uLl0pKVxuICogfVxuICogYGBgXG4gKiBkaXNhYmxlVHJhY2tpbmcgaXMgdHJ1ZSB3aGVuIGNyZWF0aW5nIGEgdi1mb3IgZnJhZ21lbnQgYmxvY2ssIHNpbmNlIGEgdi1mb3JcbiAqIGZyYWdtZW50IGFsd2F5cyBkaWZmcyBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gb3BlbkJsb2NrKGRpc2FibGVUcmFja2luZyA9IGZhbHNlKSB7XG4gICAgYmxvY2tTdGFjay5wdXNoKChjdXJyZW50QmxvY2sgPSBkaXNhYmxlVHJhY2tpbmcgPyBudWxsIDogW10pKTtcbn1cbmZ1bmN0aW9uIGNsb3NlQmxvY2soKSB7XG4gICAgYmxvY2tTdGFjay5wb3AoKTtcbiAgICBjdXJyZW50QmxvY2sgPSBibG9ja1N0YWNrW2Jsb2NrU3RhY2subGVuZ3RoIC0gMV0gfHwgbnVsbDtcbn1cbi8vIFdoZXRoZXIgd2Ugc2hvdWxkIGJlIHRyYWNraW5nIGR5bmFtaWMgY2hpbGQgbm9kZXMgaW5zaWRlIGEgYmxvY2suXG4vLyBPbmx5IHRyYWNrcyB3aGVuIHRoaXMgdmFsdWUgaXMgPiAwXG4vLyBXZSBhcmUgbm90IHVzaW5nIGEgc2ltcGxlIGJvb2xlYW4gYmVjYXVzZSB0aGlzIHZhbHVlIG1heSBuZWVkIHRvIGJlXG4vLyBpbmNyZW1lbnRlZC9kZWNyZW1lbnRlZCBieSBuZXN0ZWQgdXNhZ2Ugb2Ygdi1vbmNlIChzZWUgYmVsb3cpXG5sZXQgaXNCbG9ja1RyZWVFbmFibGVkID0gMTtcbi8qKlxuICogQmxvY2sgdHJhY2tpbmcgc29tZXRpbWVzIG5lZWRzIHRvIGJlIGRpc2FibGVkLCBmb3IgZXhhbXBsZSBkdXJpbmcgdGhlXG4gKiBjcmVhdGlvbiBvZiBhIHRyZWUgdGhhdCBuZWVkcyB0byBiZSBjYWNoZWQgYnkgdi1vbmNlLiBUaGUgY29tcGlsZXIgZ2VuZXJhdGVzXG4gKiBjb2RlIGxpa2UgdGhpczpcbiAqXG4gKiBgYGAganNcbiAqIF9jYWNoZVsxXSB8fCAoXG4gKiAgIHNldEJsb2NrVHJhY2tpbmcoLTEpLFxuICogICBfY2FjaGVbMV0gPSBjcmVhdGVWTm9kZSguLi4pLFxuICogICBzZXRCbG9ja1RyYWNraW5nKDEpLFxuICogICBfY2FjaGVbMV1cbiAqIClcbiAqIGBgYFxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldEJsb2NrVHJhY2tpbmcodmFsdWUpIHtcbiAgICBpc0Jsb2NrVHJlZUVuYWJsZWQgKz0gdmFsdWU7XG59XG5mdW5jdGlvbiBzZXR1cEJsb2NrKHZub2RlKSB7XG4gICAgLy8gc2F2ZSBjdXJyZW50IGJsb2NrIGNoaWxkcmVuIG9uIHRoZSBibG9jayB2bm9kZVxuICAgIHZub2RlLmR5bmFtaWNDaGlsZHJlbiA9XG4gICAgICAgIGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgPyBjdXJyZW50QmxvY2sgfHwgRU1QVFlfQVJSIDogbnVsbDtcbiAgICAvLyBjbG9zZSBibG9ja1xuICAgIGNsb3NlQmxvY2soKTtcbiAgICAvLyBhIGJsb2NrIGlzIGFsd2F5cyBnb2luZyB0byBiZSBwYXRjaGVkLCBzbyB0cmFjayBpdCBhcyBhIGNoaWxkIG9mIGl0c1xuICAgIC8vIHBhcmVudCBibG9ja1xuICAgIGlmIChpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwICYmIGN1cnJlbnRCbG9jaykge1xuICAgICAgICBjdXJyZW50QmxvY2sucHVzaCh2bm9kZSk7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudEJsb2NrKHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMsIHNoYXBlRmxhZykge1xuICAgIHJldHVybiBzZXR1cEJsb2NrKGNyZWF0ZUJhc2VWTm9kZSh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzLCBzaGFwZUZsYWcsIHRydWUgLyogaXNCbG9jayAqLykpO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBibG9jayByb290IHZub2RlLiBUYWtlcyB0aGUgc2FtZSBleGFjdCBhcmd1bWVudHMgYXMgYGNyZWF0ZVZOb2RlYC5cbiAqIEEgYmxvY2sgcm9vdCBrZWVwcyB0cmFjayBvZiBkeW5hbWljIG5vZGVzIHdpdGhpbiB0aGUgYmxvY2sgaW4gdGhlXG4gKiBgZHluYW1pY0NoaWxkcmVuYCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCbG9jayh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzKSB7XG4gICAgcmV0dXJuIHNldHVwQmxvY2soY3JlYXRlVk5vZGUodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcywgdHJ1ZSAvKiBpc0Jsb2NrOiBwcmV2ZW50IGEgYmxvY2sgZnJvbSB0cmFja2luZyBpdHNlbGYgKi8pKTtcbn1cbmZ1bmN0aW9uIGlzVk5vZGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPyB2YWx1ZS5fX3ZfaXNWTm9kZSA9PT0gdHJ1ZSA6IGZhbHNlO1xufVxuZnVuY3Rpb24gaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgbjIuc2hhcGVGbGFnICYgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLyAmJlxuICAgICAgICBobXJEaXJ0eUNvbXBvbmVudHMuaGFzKG4yLnR5cGUpKSB7XG4gICAgICAgIC8vIEhNUiBvbmx5OiBpZiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIGhvdC11cGRhdGVkLCBmb3JjZSBhIHJlbG9hZC5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbjEudHlwZSA9PT0gbjIudHlwZSAmJiBuMS5rZXkgPT09IG4yLmtleTtcbn1cbmxldCB2bm9kZUFyZ3NUcmFuc2Zvcm1lcjtcbi8qKlxuICogSW50ZXJuYWwgQVBJIGZvciByZWdpc3RlcmluZyBhbiBhcmd1bWVudHMgdHJhbnNmb3JtIGZvciBjcmVhdGVWTm9kZVxuICogdXNlZCBmb3IgY3JlYXRpbmcgc3R1YnMgaW4gdGhlIHRlc3QtdXRpbHNcbiAqIEl0IGlzICppbnRlcm5hbCogYnV0IG5lZWRzIHRvIGJlIGV4cG9zZWQgZm9yIHRlc3QtdXRpbHMgdG8gcGljayB1cCBwcm9wZXJcbiAqIHR5cGluZ3NcbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtVk5vZGVBcmdzKHRyYW5zZm9ybWVyKSB7XG4gICAgdm5vZGVBcmdzVHJhbnNmb3JtZXIgPSB0cmFuc2Zvcm1lcjtcbn1cbmNvbnN0IGNyZWF0ZVZOb2RlV2l0aEFyZ3NUcmFuc2Zvcm0gPSAoLi4uYXJncykgPT4ge1xuICAgIHJldHVybiBfY3JlYXRlVk5vZGUoLi4uKHZub2RlQXJnc1RyYW5zZm9ybWVyXG4gICAgICAgID8gdm5vZGVBcmdzVHJhbnNmb3JtZXIoYXJncywgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKVxuICAgICAgICA6IGFyZ3MpKTtcbn07XG5jb25zdCBJbnRlcm5hbE9iamVjdEtleSA9IGBfX3ZJbnRlcm5hbGA7XG5jb25zdCBub3JtYWxpemVLZXkgPSAoeyBrZXkgfSkgPT4ga2V5ICE9IG51bGwgPyBrZXkgOiBudWxsO1xuY29uc3Qgbm9ybWFsaXplUmVmID0gKHsgcmVmLCByZWZfa2V5LCByZWZfZm9yIH0pID0+IHtcbiAgICByZXR1cm4gKHJlZiAhPSBudWxsXG4gICAgICAgID8gaXNTdHJpbmcocmVmKSB8fCBpc1JlZihyZWYpIHx8IGlzRnVuY3Rpb24ocmVmKVxuICAgICAgICAgICAgPyB7IGk6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSwgcjogcmVmLCBrOiByZWZfa2V5LCBmOiAhIXJlZl9mb3IgfVxuICAgICAgICAgICAgOiByZWZcbiAgICAgICAgOiBudWxsKTtcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlVk5vZGUodHlwZSwgcHJvcHMgPSBudWxsLCBjaGlsZHJlbiA9IG51bGwsIHBhdGNoRmxhZyA9IDAsIGR5bmFtaWNQcm9wcyA9IG51bGwsIHNoYXBlRmxhZyA9IHR5cGUgPT09IEZyYWdtZW50ID8gMCA6IDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovLCBpc0Jsb2NrTm9kZSA9IGZhbHNlLCBuZWVkRnVsbENoaWxkcmVuTm9ybWFsaXphdGlvbiA9IGZhbHNlKSB7XG4gICAgY29uc3Qgdm5vZGUgPSB7XG4gICAgICAgIF9fdl9pc1ZOb2RlOiB0cnVlLFxuICAgICAgICBfX3Zfc2tpcDogdHJ1ZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIGtleTogcHJvcHMgJiYgbm9ybWFsaXplS2V5KHByb3BzKSxcbiAgICAgICAgcmVmOiBwcm9wcyAmJiBub3JtYWxpemVSZWYocHJvcHMpLFxuICAgICAgICBzY29wZUlkOiBjdXJyZW50U2NvcGVJZCxcbiAgICAgICAgc2xvdFNjb3BlSWRzOiBudWxsLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgY29tcG9uZW50OiBudWxsLFxuICAgICAgICBzdXNwZW5zZTogbnVsbCxcbiAgICAgICAgc3NDb250ZW50OiBudWxsLFxuICAgICAgICBzc0ZhbGxiYWNrOiBudWxsLFxuICAgICAgICBkaXJzOiBudWxsLFxuICAgICAgICB0cmFuc2l0aW9uOiBudWxsLFxuICAgICAgICBlbDogbnVsbCxcbiAgICAgICAgYW5jaG9yOiBudWxsLFxuICAgICAgICB0YXJnZXQ6IG51bGwsXG4gICAgICAgIHRhcmdldEFuY2hvcjogbnVsbCxcbiAgICAgICAgc3RhdGljQ291bnQ6IDAsXG4gICAgICAgIHNoYXBlRmxhZyxcbiAgICAgICAgcGF0Y2hGbGFnLFxuICAgICAgICBkeW5hbWljUHJvcHMsXG4gICAgICAgIGR5bmFtaWNDaGlsZHJlbjogbnVsbCxcbiAgICAgICAgYXBwQ29udGV4dDogbnVsbFxuICAgIH07XG4gICAgaWYgKG5lZWRGdWxsQ2hpbGRyZW5Ob3JtYWxpemF0aW9uKSB7XG4gICAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbik7XG4gICAgICAgIC8vIG5vcm1hbGl6ZSBzdXNwZW5zZSBjaGlsZHJlblxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgICAgIHR5cGUubm9ybWFsaXplKHZub2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChjaGlsZHJlbikge1xuICAgICAgICAvLyBjb21waWxlZCBlbGVtZW50IHZub2RlIC0gaWYgY2hpbGRyZW4gaXMgcGFzc2VkLCBvbmx5IHBvc3NpYmxlIHR5cGVzIGFyZVxuICAgICAgICAvLyBzdHJpbmcgb3IgQXJyYXkuXG4gICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSBpc1N0cmluZyhjaGlsZHJlbilcbiAgICAgICAgICAgID8gOCAvKiBTaGFwZUZsYWdzLlRFWFRfQ0hJTERSRU4gKi9cbiAgICAgICAgICAgIDogMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLztcbiAgICB9XG4gICAgLy8gdmFsaWRhdGUga2V5XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB2bm9kZS5rZXkgIT09IHZub2RlLmtleSkge1xuICAgICAgICB3YXJuKGBWTm9kZSBjcmVhdGVkIHdpdGggaW52YWxpZCBrZXkgKE5hTikuIFZOb2RlIHR5cGU6YCwgdm5vZGUudHlwZSk7XG4gICAgfVxuICAgIC8vIHRyYWNrIHZub2RlIGZvciBibG9jayB0cmVlXG4gICAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiZcbiAgICAgICAgLy8gYXZvaWQgYSBibG9jayBub2RlIGZyb20gdHJhY2tpbmcgaXRzZWxmXG4gICAgICAgICFpc0Jsb2NrTm9kZSAmJlxuICAgICAgICAvLyBoYXMgY3VycmVudCBwYXJlbnQgYmxvY2tcbiAgICAgICAgY3VycmVudEJsb2NrICYmXG4gICAgICAgIC8vIHByZXNlbmNlIG9mIGEgcGF0Y2ggZmxhZyBpbmRpY2F0ZXMgdGhpcyBub2RlIG5lZWRzIHBhdGNoaW5nIG9uIHVwZGF0ZXMuXG4gICAgICAgIC8vIGNvbXBvbmVudCBub2RlcyBhbHNvIHNob3VsZCBhbHdheXMgYmUgcGF0Y2hlZCwgYmVjYXVzZSBldmVuIGlmIHRoZVxuICAgICAgICAvLyBjb21wb25lbnQgZG9lc24ndCBuZWVkIHRvIHVwZGF0ZSwgaXQgbmVlZHMgdG8gcGVyc2lzdCB0aGUgaW5zdGFuY2Ugb24gdG9cbiAgICAgICAgLy8gdGhlIG5leHQgdm5vZGUgc28gdGhhdCBpdCBjYW4gYmUgcHJvcGVybHkgdW5tb3VudGVkIGxhdGVyLlxuICAgICAgICAodm5vZGUucGF0Y2hGbGFnID4gMCB8fCBzaGFwZUZsYWcgJiA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovKSAmJlxuICAgICAgICAvLyB0aGUgRVZFTlRTIGZsYWcgaXMgb25seSBmb3IgaHlkcmF0aW9uIGFuZCBpZiBpdCBpcyB0aGUgb25seSBmbGFnLCB0aGVcbiAgICAgICAgLy8gdm5vZGUgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGR5bmFtaWMgZHVlIHRvIGhhbmRsZXIgY2FjaGluZy5cbiAgICAgICAgdm5vZGUucGF0Y2hGbGFnICE9PSAzMiAvKiBQYXRjaEZsYWdzLkhZRFJBVEVfRVZFTlRTICovKSB7XG4gICAgICAgIGN1cnJlbnRCbG9jay5wdXNoKHZub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlO1xufVxuY29uc3QgY3JlYXRlVk5vZGUgPSAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gY3JlYXRlVk5vZGVXaXRoQXJnc1RyYW5zZm9ybSA6IF9jcmVhdGVWTm9kZSk7XG5mdW5jdGlvbiBfY3JlYXRlVk5vZGUodHlwZSwgcHJvcHMgPSBudWxsLCBjaGlsZHJlbiA9IG51bGwsIHBhdGNoRmxhZyA9IDAsIGR5bmFtaWNQcm9wcyA9IG51bGwsIGlzQmxvY2tOb2RlID0gZmFsc2UpIHtcbiAgICBpZiAoIXR5cGUgfHwgdHlwZSA9PT0gTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICF0eXBlKSB7XG4gICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHZub2RlIHR5cGUgd2hlbiBjcmVhdGluZyB2bm9kZTogJHt0eXBlfS5gKTtcbiAgICAgICAgfVxuICAgICAgICB0eXBlID0gQ29tbWVudDtcbiAgICB9XG4gICAgaWYgKGlzVk5vZGUodHlwZSkpIHtcbiAgICAgICAgLy8gY3JlYXRlVk5vZGUgcmVjZWl2aW5nIGFuIGV4aXN0aW5nIHZub2RlLiBUaGlzIGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgICAvLyA8Y29tcG9uZW50IDppcz1cInZub2RlXCIvPlxuICAgICAgICAvLyAjMjA3OCBtYWtlIHN1cmUgdG8gbWVyZ2UgcmVmcyBkdXJpbmcgdGhlIGNsb25lIGluc3RlYWQgb2Ygb3ZlcndyaXRpbmcgaXRcbiAgICAgICAgY29uc3QgY2xvbmVkID0gY2xvbmVWTm9kZSh0eXBlLCBwcm9wcywgdHJ1ZSAvKiBtZXJnZVJlZjogdHJ1ZSAqLyk7XG4gICAgICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICAgICAgbm9ybWFsaXplQ2hpbGRyZW4oY2xvbmVkLCBjaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgIWlzQmxvY2tOb2RlICYmIGN1cnJlbnRCbG9jaykge1xuICAgICAgICAgICAgaWYgKGNsb25lZC5zaGFwZUZsYWcgJiA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudEJsb2NrW2N1cnJlbnRCbG9jay5pbmRleE9mKHR5cGUpXSA9IGNsb25lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRCbG9jay5wdXNoKGNsb25lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2xvbmVkLnBhdGNoRmxhZyB8PSAtMiAvKiBQYXRjaEZsYWdzLkJBSUwgKi87XG4gICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgfVxuICAgIC8vIGNsYXNzIGNvbXBvbmVudCBub3JtYWxpemF0aW9uLlxuICAgIGlmIChpc0NsYXNzQ29tcG9uZW50KHR5cGUpKSB7XG4gICAgICAgIHR5cGUgPSB0eXBlLl9fdmNjT3B0cztcbiAgICB9XG4gICAgLy8gY2xhc3MgJiBzdHlsZSBub3JtYWxpemF0aW9uLlxuICAgIGlmIChwcm9wcykge1xuICAgICAgICAvLyBmb3IgcmVhY3RpdmUgb3IgcHJveHkgb2JqZWN0cywgd2UgbmVlZCB0byBjbG9uZSBpdCB0byBlbmFibGUgbXV0YXRpb24uXG4gICAgICAgIHByb3BzID0gZ3VhcmRSZWFjdGl2ZVByb3BzKHByb3BzKTtcbiAgICAgICAgbGV0IHsgY2xhc3M6IGtsYXNzLCBzdHlsZSB9ID0gcHJvcHM7XG4gICAgICAgIGlmIChrbGFzcyAmJiAhaXNTdHJpbmcoa2xhc3MpKSB7XG4gICAgICAgICAgICBwcm9wcy5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKGtsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYmplY3Qoc3R5bGUpKSB7XG4gICAgICAgICAgICAvLyByZWFjdGl2ZSBzdGF0ZSBvYmplY3RzIG5lZWQgdG8gYmUgY2xvbmVkIHNpbmNlIHRoZXkgYXJlIGxpa2VseSB0byBiZVxuICAgICAgICAgICAgLy8gbXV0YXRlZFxuICAgICAgICAgICAgaWYgKGlzUHJveHkoc3R5bGUpICYmICFpc0FycmF5KHN0eWxlKSkge1xuICAgICAgICAgICAgICAgIHN0eWxlID0gZXh0ZW5kKHt9LCBzdHlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9wcy5zdHlsZSA9IG5vcm1hbGl6ZVN0eWxlKHN0eWxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBlbmNvZGUgdGhlIHZub2RlIHR5cGUgaW5mb3JtYXRpb24gaW50byBhIGJpdG1hcFxuICAgIGNvbnN0IHNoYXBlRmxhZyA9IGlzU3RyaW5nKHR5cGUpXG4gICAgICAgID8gMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi9cbiAgICAgICAgOiBpc1N1c3BlbnNlKHR5cGUpXG4gICAgICAgICAgICA/IDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovXG4gICAgICAgICAgICA6IGlzVGVsZXBvcnQodHlwZSlcbiAgICAgICAgICAgICAgICA/IDY0IC8qIFNoYXBlRmxhZ3MuVEVMRVBPUlQgKi9cbiAgICAgICAgICAgICAgICA6IGlzT2JqZWN0KHR5cGUpXG4gICAgICAgICAgICAgICAgICAgID8gNCAvKiBTaGFwZUZsYWdzLlNUQVRFRlVMX0NPTVBPTkVOVCAqL1xuICAgICAgICAgICAgICAgICAgICA6IGlzRnVuY3Rpb24odHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gMiAvKiBTaGFwZUZsYWdzLkZVTkNUSU9OQUxfQ09NUE9ORU5UICovXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzaGFwZUZsYWcgJiA0IC8qIFNoYXBlRmxhZ3MuU1RBVEVGVUxfQ09NUE9ORU5UICovICYmIGlzUHJveHkodHlwZSkpIHtcbiAgICAgICAgdHlwZSA9IHRvUmF3KHR5cGUpO1xuICAgICAgICB3YXJuKGBWdWUgcmVjZWl2ZWQgYSBDb21wb25lbnQgd2hpY2ggd2FzIG1hZGUgYSByZWFjdGl2ZSBvYmplY3QuIFRoaXMgY2FuIGAgK1xuICAgICAgICAgICAgYGxlYWQgdG8gdW5uZWNlc3NhcnkgcGVyZm9ybWFuY2Ugb3ZlcmhlYWQsIGFuZCBzaG91bGQgYmUgYXZvaWRlZCBieSBgICtcbiAgICAgICAgICAgIGBtYXJraW5nIHRoZSBjb21wb25lbnQgd2l0aCBcXGBtYXJrUmF3XFxgIG9yIHVzaW5nIFxcYHNoYWxsb3dSZWZcXGAgYCArXG4gICAgICAgICAgICBgaW5zdGVhZCBvZiBcXGByZWZcXGAuYCwgYFxcbkNvbXBvbmVudCB0aGF0IHdhcyBtYWRlIHJlYWN0aXZlOiBgLCB0eXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUJhc2VWTm9kZSh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzLCBzaGFwZUZsYWcsIGlzQmxvY2tOb2RlLCB0cnVlKTtcbn1cbmZ1bmN0aW9uIGd1YXJkUmVhY3RpdmVQcm9wcyhwcm9wcykge1xuICAgIGlmICghcHJvcHMpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiBpc1Byb3h5KHByb3BzKSB8fCBJbnRlcm5hbE9iamVjdEtleSBpbiBwcm9wc1xuICAgICAgICA/IGV4dGVuZCh7fSwgcHJvcHMpXG4gICAgICAgIDogcHJvcHM7XG59XG5mdW5jdGlvbiBjbG9uZVZOb2RlKHZub2RlLCBleHRyYVByb3BzLCBtZXJnZVJlZiA9IGZhbHNlKSB7XG4gICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IE5PVCB1c2luZyBzcHJlYWQgb3IgZXh0ZW5kIHRvIGF2b2lkIHRoZSBydW50aW1lXG4gICAgLy8ga2V5IGVudW1lcmF0aW9uIGNvc3QuXG4gICAgY29uc3QgeyBwcm9wcywgcmVmLCBwYXRjaEZsYWcsIGNoaWxkcmVuIH0gPSB2bm9kZTtcbiAgICBjb25zdCBtZXJnZWRQcm9wcyA9IGV4dHJhUHJvcHMgPyBtZXJnZVByb3BzKHByb3BzIHx8IHt9LCBleHRyYVByb3BzKSA6IHByb3BzO1xuICAgIGNvbnN0IGNsb25lZCA9IHtcbiAgICAgICAgX192X2lzVk5vZGU6IHRydWUsXG4gICAgICAgIF9fdl9za2lwOiB0cnVlLFxuICAgICAgICB0eXBlOiB2bm9kZS50eXBlLFxuICAgICAgICBwcm9wczogbWVyZ2VkUHJvcHMsXG4gICAgICAgIGtleTogbWVyZ2VkUHJvcHMgJiYgbm9ybWFsaXplS2V5KG1lcmdlZFByb3BzKSxcbiAgICAgICAgcmVmOiBleHRyYVByb3BzICYmIGV4dHJhUHJvcHMucmVmXG4gICAgICAgICAgICA/IC8vICMyMDc4IGluIHRoZSBjYXNlIG9mIDxjb21wb25lbnQgOmlzPVwidm5vZGVcIiByZWY9XCJleHRyYVwiLz5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgdm5vZGUgaXRzZWxmIGFscmVhZHkgaGFzIGEgcmVmLCBjbG9uZVZOb2RlIHdpbGwgbmVlZCB0byBtZXJnZVxuICAgICAgICAgICAgICAgIC8vIHRoZSByZWZzIHNvIHRoZSBzaW5nbGUgdm5vZGUgY2FuIGJlIHNldCBvbiBtdWx0aXBsZSByZWZzXG4gICAgICAgICAgICAgICAgbWVyZ2VSZWYgJiYgcmVmXG4gICAgICAgICAgICAgICAgICAgID8gaXNBcnJheShyZWYpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHJlZi5jb25jYXQobm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbcmVmLCBub3JtYWxpemVSZWYoZXh0cmFQcm9wcyldXG4gICAgICAgICAgICAgICAgICAgIDogbm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpXG4gICAgICAgICAgICA6IHJlZixcbiAgICAgICAgc2NvcGVJZDogdm5vZGUuc2NvcGVJZCxcbiAgICAgICAgc2xvdFNjb3BlSWRzOiB2bm9kZS5zbG90U2NvcGVJZHMsXG4gICAgICAgIGNoaWxkcmVuOiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcGF0Y2hGbGFnID09PSAtMSAvKiBQYXRjaEZsYWdzLkhPSVNURUQgKi8gJiYgaXNBcnJheShjaGlsZHJlbilcbiAgICAgICAgICAgID8gY2hpbGRyZW4ubWFwKGRlZXBDbG9uZVZOb2RlKVxuICAgICAgICAgICAgOiBjaGlsZHJlbixcbiAgICAgICAgdGFyZ2V0OiB2bm9kZS50YXJnZXQsXG4gICAgICAgIHRhcmdldEFuY2hvcjogdm5vZGUudGFyZ2V0QW5jaG9yLFxuICAgICAgICBzdGF0aWNDb3VudDogdm5vZGUuc3RhdGljQ291bnQsXG4gICAgICAgIHNoYXBlRmxhZzogdm5vZGUuc2hhcGVGbGFnLFxuICAgICAgICAvLyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIHdpdGggZXh0cmEgcHJvcHMsIHdlIGNhbiBubyBsb25nZXIgYXNzdW1lIGl0c1xuICAgICAgICAvLyBleGlzdGluZyBwYXRjaCBmbGFnIHRvIGJlIHJlbGlhYmxlIGFuZCBuZWVkIHRvIGFkZCB0aGUgRlVMTF9QUk9QUyBmbGFnLlxuICAgICAgICAvLyBub3RlOiBwcmVzZXJ2ZSBmbGFnIGZvciBmcmFnbWVudHMgc2luY2UgdGhleSB1c2UgdGhlIGZsYWcgZm9yIGNoaWxkcmVuXG4gICAgICAgIC8vIGZhc3QgcGF0aHMgb25seS5cbiAgICAgICAgcGF0Y2hGbGFnOiBleHRyYVByb3BzICYmIHZub2RlLnR5cGUgIT09IEZyYWdtZW50XG4gICAgICAgICAgICA/IHBhdGNoRmxhZyA9PT0gLTEgLy8gaG9pc3RlZCBub2RlXG4gICAgICAgICAgICAgICAgPyAxNiAvKiBQYXRjaEZsYWdzLkZVTExfUFJPUFMgKi9cbiAgICAgICAgICAgICAgICA6IHBhdGNoRmxhZyB8IDE2IC8qIFBhdGNoRmxhZ3MuRlVMTF9QUk9QUyAqL1xuICAgICAgICAgICAgOiBwYXRjaEZsYWcsXG4gICAgICAgIGR5bmFtaWNQcm9wczogdm5vZGUuZHluYW1pY1Byb3BzLFxuICAgICAgICBkeW5hbWljQ2hpbGRyZW46IHZub2RlLmR5bmFtaWNDaGlsZHJlbixcbiAgICAgICAgYXBwQ29udGV4dDogdm5vZGUuYXBwQ29udGV4dCxcbiAgICAgICAgZGlyczogdm5vZGUuZGlycyxcbiAgICAgICAgdHJhbnNpdGlvbjogdm5vZGUudHJhbnNpdGlvbixcbiAgICAgICAgLy8gVGhlc2Ugc2hvdWxkIHRlY2huaWNhbGx5IG9ubHkgYmUgbm9uLW51bGwgb24gbW91bnRlZCBWTm9kZXMuIEhvd2V2ZXIsXG4gICAgICAgIC8vIHRoZXkgKnNob3VsZCogYmUgY29waWVkIGZvciBrZXB0LWFsaXZlIHZub2Rlcy4gU28gd2UganVzdCBhbHdheXMgY29weVxuICAgICAgICAvLyB0aGVtIHNpbmNlIHRoZW0gYmVpbmcgbm9uLW51bGwgZHVyaW5nIGEgbW91bnQgZG9lc24ndCBhZmZlY3QgdGhlIGxvZ2ljIGFzXG4gICAgICAgIC8vIHRoZXkgd2lsbCBzaW1wbHkgYmUgb3ZlcndyaXR0ZW4uXG4gICAgICAgIGNvbXBvbmVudDogdm5vZGUuY29tcG9uZW50LFxuICAgICAgICBzdXNwZW5zZTogdm5vZGUuc3VzcGVuc2UsXG4gICAgICAgIHNzQ29udGVudDogdm5vZGUuc3NDb250ZW50ICYmIGNsb25lVk5vZGUodm5vZGUuc3NDb250ZW50KSxcbiAgICAgICAgc3NGYWxsYmFjazogdm5vZGUuc3NGYWxsYmFjayAmJiBjbG9uZVZOb2RlKHZub2RlLnNzRmFsbGJhY2spLFxuICAgICAgICBlbDogdm5vZGUuZWwsXG4gICAgICAgIGFuY2hvcjogdm5vZGUuYW5jaG9yXG4gICAgfTtcbiAgICByZXR1cm4gY2xvbmVkO1xufVxuLyoqXG4gKiBEZXYgb25seSwgZm9yIEhNUiBvZiBob2lzdGVkIHZub2RlcyByZXVzZWQgaW4gdi1mb3JcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS92aXRlanMvdml0ZS9pc3N1ZXMvMjAyMlxuICovXG5mdW5jdGlvbiBkZWVwQ2xvbmVWTm9kZSh2bm9kZSkge1xuICAgIGNvbnN0IGNsb25lZCA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIGlmIChpc0FycmF5KHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgICBjbG9uZWQuY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbi5tYXAoZGVlcENsb25lVk5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gY2xvbmVkO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUodGV4dCA9ICcgJywgZmxhZyA9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlVk5vZGUoVGV4dCwgbnVsbCwgdGV4dCwgZmxhZyk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVN0YXRpY1ZOb2RlKGNvbnRlbnQsIG51bWJlck9mTm9kZXMpIHtcbiAgICAvLyBBIHN0YXRpYyB2bm9kZSBjYW4gY29udGFpbiBtdWx0aXBsZSBzdHJpbmdpZmllZCBlbGVtZW50cywgYW5kIHRoZSBudW1iZXJcbiAgICAvLyBvZiBlbGVtZW50cyBpcyBuZWNlc3NhcnkgZm9yIGh5ZHJhdGlvbi5cbiAgICBjb25zdCB2bm9kZSA9IGNyZWF0ZVZOb2RlKFN0YXRpYywgbnVsbCwgY29udGVudCk7XG4gICAgdm5vZGUuc3RhdGljQ291bnQgPSBudW1iZXJPZk5vZGVzO1xuICAgIHJldHVybiB2bm9kZTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ29tbWVudFZOb2RlKHRleHQgPSAnJywgXG4vLyB3aGVuIHVzZWQgYXMgdGhlIHYtZWxzZSBicmFuY2gsIHRoZSBjb21tZW50IG5vZGUgbXVzdCBiZSBjcmVhdGVkIGFzIGFcbi8vIGJsb2NrIHRvIGVuc3VyZSBjb3JyZWN0IHVwZGF0ZXMuXG5hc0Jsb2NrID0gZmFsc2UpIHtcbiAgICByZXR1cm4gYXNCbG9ja1xuICAgICAgICA/IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soQ29tbWVudCwgbnVsbCwgdGV4dCkpXG4gICAgICAgIDogY3JlYXRlVk5vZGUoQ29tbWVudCwgbnVsbCwgdGV4dCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVWTm9kZShjaGlsZCkge1xuICAgIGlmIChjaGlsZCA9PSBudWxsIHx8IHR5cGVvZiBjaGlsZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIC8vIGVtcHR5IHBsYWNlaG9sZGVyXG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShDb21tZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheShjaGlsZCkpIHtcbiAgICAgICAgLy8gZnJhZ21lbnRcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKEZyYWdtZW50LCBudWxsLCBcbiAgICAgICAgLy8gIzM2NjYsIGF2b2lkIHJlZmVyZW5jZSBwb2xsdXRpb24gd2hlbiByZXVzaW5nIHZub2RlXG4gICAgICAgIGNoaWxkLnNsaWNlKCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgY2hpbGQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIGFscmVhZHkgdm5vZGUsIHRoaXMgc2hvdWxkIGJlIHRoZSBtb3N0IGNvbW1vbiBzaW5jZSBjb21waWxlZCB0ZW1wbGF0ZXNcbiAgICAgICAgLy8gYWx3YXlzIHByb2R1Y2UgYWxsLXZub2RlIGNoaWxkcmVuIGFycmF5c1xuICAgICAgICByZXR1cm4gY2xvbmVJZk1vdW50ZWQoY2hpbGQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gc3RyaW5ncyBhbmQgbnVtYmVyc1xuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoVGV4dCwgbnVsbCwgU3RyaW5nKGNoaWxkKSk7XG4gICAgfVxufVxuLy8gb3B0aW1pemVkIG5vcm1hbGl6YXRpb24gZm9yIHRlbXBsYXRlLWNvbXBpbGVkIHJlbmRlciBmbnNcbmZ1bmN0aW9uIGNsb25lSWZNb3VudGVkKGNoaWxkKSB7XG4gICAgcmV0dXJuIChjaGlsZC5lbCA9PT0gbnVsbCAmJiBjaGlsZC5wYXRjaEZsYWcgIT09IC0xIC8qIFBhdGNoRmxhZ3MuSE9JU1RFRCAqLykgfHxcbiAgICAgICAgY2hpbGQubWVtb1xuICAgICAgICA/IGNoaWxkXG4gICAgICAgIDogY2xvbmVWTm9kZShjaGlsZCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4pIHtcbiAgICBsZXQgdHlwZSA9IDA7XG4gICAgY29uc3QgeyBzaGFwZUZsYWcgfSA9IHZub2RlO1xuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgdHlwZSA9IDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi87XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmICgxIC8qIFNoYXBlRmxhZ3MuRUxFTUVOVCAqLyB8IDY0IC8qIFNoYXBlRmxhZ3MuVEVMRVBPUlQgKi8pKSB7XG4gICAgICAgICAgICAvLyBOb3JtYWxpemUgc2xvdCB0byBwbGFpbiBjaGlsZHJlbiBmb3IgcGxhaW4gZWxlbWVudCBhbmQgVGVsZXBvcnRcbiAgICAgICAgICAgIGNvbnN0IHNsb3QgPSBjaGlsZHJlbi5kZWZhdWx0O1xuICAgICAgICAgICAgaWYgKHNsb3QpIHtcbiAgICAgICAgICAgICAgICAvLyBfYyBtYXJrZXIgaXMgYWRkZWQgYnkgd2l0aEN0eCgpIGluZGljYXRpbmcgdGhpcyBpcyBhIGNvbXBpbGVkIHNsb3RcbiAgICAgICAgICAgICAgICBzbG90Ll9jICYmIChzbG90Ll9kID0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBzbG90KCkpO1xuICAgICAgICAgICAgICAgIHNsb3QuX2MgJiYgKHNsb3QuX2QgPSB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHR5cGUgPSAzMiAvKiBTaGFwZUZsYWdzLlNMT1RTX0NISUxEUkVOICovO1xuICAgICAgICAgICAgY29uc3Qgc2xvdEZsYWcgPSBjaGlsZHJlbi5fO1xuICAgICAgICAgICAgaWYgKCFzbG90RmxhZyAmJiAhKEludGVybmFsT2JqZWN0S2V5IGluIGNoaWxkcmVuKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLl9jdHggPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzbG90RmxhZyA9PT0gMyAvKiBTbG90RmxhZ3MuRk9SV0FSREVEICovICYmIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIC8vIGEgY2hpbGQgY29tcG9uZW50IHJlY2VpdmVzIGZvcndhcmRlZCBzbG90cyBmcm9tIHRoZSBwYXJlbnQuXG4gICAgICAgICAgICAgICAgLy8gaXRzIHNsb3QgdHlwZSBpcyBkZXRlcm1pbmVkIGJ5IGl0cyBwYXJlbnQncyBzbG90IHR5cGUuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5zbG90cy5fID09PSAxIC8qIFNsb3RGbGFncy5TVEFCTEUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4uXyA9IDEgLyogU2xvdEZsYWdzLlNUQUJMRSAqLztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLl8gPSAyIC8qIFNsb3RGbGFncy5EWU5BTUlDICovO1xuICAgICAgICAgICAgICAgICAgICB2bm9kZS5wYXRjaEZsYWcgfD0gMTAyNCAvKiBQYXRjaEZsYWdzLkRZTkFNSUNfU0xPVFMgKi87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oY2hpbGRyZW4pKSB7XG4gICAgICAgIGNoaWxkcmVuID0geyBkZWZhdWx0OiBjaGlsZHJlbiwgX2N0eDogY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIH07XG4gICAgICAgIHR5cGUgPSAzMiAvKiBTaGFwZUZsYWdzLlNMT1RTX0NISUxEUkVOICovO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2hpbGRyZW4gPSBTdHJpbmcoY2hpbGRyZW4pO1xuICAgICAgICAvLyBmb3JjZSB0ZWxlcG9ydCBjaGlsZHJlbiB0byBhcnJheSBzbyBpdCBjYW4gYmUgbW92ZWQgYXJvdW5kXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBTaGFwZUZsYWdzLlRFTEVQT1JUICovKSB7XG4gICAgICAgICAgICB0eXBlID0gMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLztcbiAgICAgICAgICAgIGNoaWxkcmVuID0gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHlwZSA9IDggLyogU2hhcGVGbGFncy5URVhUX0NISUxEUkVOICovO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZub2RlLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgdm5vZGUuc2hhcGVGbGFnIHw9IHR5cGU7XG59XG5mdW5jdGlvbiBtZXJnZVByb3BzKC4uLmFyZ3MpIHtcbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdG9NZXJnZSA9IGFyZ3NbaV07XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRvTWVyZ2UpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdjbGFzcycpIHtcbiAgICAgICAgICAgICAgICBpZiAocmV0LmNsYXNzICE9PSB0b01lcmdlLmNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldC5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKFtyZXQuY2xhc3MsIHRvTWVyZ2UuY2xhc3NdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgICAgICByZXQuc3R5bGUgPSBub3JtYWxpemVTdHlsZShbcmV0LnN0eWxlLCB0b01lcmdlLnN0eWxlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc09uKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IHJldFtrZXldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluY29taW5nID0gdG9NZXJnZVtrZXldO1xuICAgICAgICAgICAgICAgIGlmIChpbmNvbWluZyAmJlxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZyAhPT0gaW5jb21pbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgIShpc0FycmF5KGV4aXN0aW5nKSAmJiBleGlzdGluZy5pbmNsdWRlcyhpbmNvbWluZykpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldFtrZXldID0gZXhpc3RpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBpbmNvbWluZylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaW5jb21pbmc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHJldFtrZXldID0gdG9NZXJnZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiBpbnZva2VWTm9kZUhvb2soaG9vaywgaW5zdGFuY2UsIHZub2RlLCBwcmV2Vk5vZGUgPSBudWxsKSB7XG4gICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgaW5zdGFuY2UsIDcgLyogRXJyb3JDb2Rlcy5WTk9ERV9IT09LICovLCBbXG4gICAgICAgIHZub2RlLFxuICAgICAgICBwcmV2Vk5vZGVcbiAgICBdKTtcbn1cblxuY29uc3QgZW1wdHlBcHBDb250ZXh0ID0gY3JlYXRlQXBwQ29udGV4dCgpO1xubGV0IHVpZCQxID0gMDtcbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlKHZub2RlLCBwYXJlbnQsIHN1c3BlbnNlKSB7XG4gICAgY29uc3QgdHlwZSA9IHZub2RlLnR5cGU7XG4gICAgLy8gaW5oZXJpdCBwYXJlbnQgYXBwIGNvbnRleHQgLSBvciAtIGlmIHJvb3QsIGFkb3B0IGZyb20gcm9vdCB2bm9kZVxuICAgIGNvbnN0IGFwcENvbnRleHQgPSAocGFyZW50ID8gcGFyZW50LmFwcENvbnRleHQgOiB2bm9kZS5hcHBDb250ZXh0KSB8fCBlbXB0eUFwcENvbnRleHQ7XG4gICAgY29uc3QgaW5zdGFuY2UgPSB7XG4gICAgICAgIHVpZDogdWlkJDErKyxcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgYXBwQ29udGV4dCxcbiAgICAgICAgcm9vdDogbnVsbCxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgc3ViVHJlZTogbnVsbCxcbiAgICAgICAgZWZmZWN0OiBudWxsLFxuICAgICAgICB1cGRhdGU6IG51bGwsXG4gICAgICAgIHNjb3BlOiBuZXcgRWZmZWN0U2NvcGUodHJ1ZSAvKiBkZXRhY2hlZCAqLyksXG4gICAgICAgIHJlbmRlcjogbnVsbCxcbiAgICAgICAgcHJveHk6IG51bGwsXG4gICAgICAgIGV4cG9zZWQ6IG51bGwsXG4gICAgICAgIGV4cG9zZVByb3h5OiBudWxsLFxuICAgICAgICB3aXRoUHJveHk6IG51bGwsXG4gICAgICAgIHByb3ZpZGVzOiBwYXJlbnQgPyBwYXJlbnQucHJvdmlkZXMgOiBPYmplY3QuY3JlYXRlKGFwcENvbnRleHQucHJvdmlkZXMpLFxuICAgICAgICBhY2Nlc3NDYWNoZTogbnVsbCxcbiAgICAgICAgcmVuZGVyQ2FjaGU6IFtdLFxuICAgICAgICAvLyBsb2NhbCByZXNvbHZlZCBhc3NldHNcbiAgICAgICAgY29tcG9uZW50czogbnVsbCxcbiAgICAgICAgZGlyZWN0aXZlczogbnVsbCxcbiAgICAgICAgLy8gcmVzb2x2ZWQgcHJvcHMgYW5kIGVtaXRzIG9wdGlvbnNcbiAgICAgICAgcHJvcHNPcHRpb25zOiBub3JtYWxpemVQcm9wc09wdGlvbnModHlwZSwgYXBwQ29udGV4dCksXG4gICAgICAgIGVtaXRzT3B0aW9uczogbm9ybWFsaXplRW1pdHNPcHRpb25zKHR5cGUsIGFwcENvbnRleHQpLFxuICAgICAgICAvLyBlbWl0XG4gICAgICAgIGVtaXQ6IG51bGwsXG4gICAgICAgIGVtaXR0ZWQ6IG51bGwsXG4gICAgICAgIC8vIHByb3BzIGRlZmF1bHQgdmFsdWVcbiAgICAgICAgcHJvcHNEZWZhdWx0czogRU1QVFlfT0JKLFxuICAgICAgICAvLyBpbmhlcml0QXR0cnNcbiAgICAgICAgaW5oZXJpdEF0dHJzOiB0eXBlLmluaGVyaXRBdHRycyxcbiAgICAgICAgLy8gc3RhdGVcbiAgICAgICAgY3R4OiBFTVBUWV9PQkosXG4gICAgICAgIGRhdGE6IEVNUFRZX09CSixcbiAgICAgICAgcHJvcHM6IEVNUFRZX09CSixcbiAgICAgICAgYXR0cnM6IEVNUFRZX09CSixcbiAgICAgICAgc2xvdHM6IEVNUFRZX09CSixcbiAgICAgICAgcmVmczogRU1QVFlfT0JKLFxuICAgICAgICBzZXR1cFN0YXRlOiBFTVBUWV9PQkosXG4gICAgICAgIHNldHVwQ29udGV4dDogbnVsbCxcbiAgICAgICAgLy8gc3VzcGVuc2UgcmVsYXRlZFxuICAgICAgICBzdXNwZW5zZSxcbiAgICAgICAgc3VzcGVuc2VJZDogc3VzcGVuc2UgPyBzdXNwZW5zZS5wZW5kaW5nSWQgOiAwLFxuICAgICAgICBhc3luY0RlcDogbnVsbCxcbiAgICAgICAgYXN5bmNSZXNvbHZlZDogZmFsc2UsXG4gICAgICAgIC8vIGxpZmVjeWNsZSBob29rc1xuICAgICAgICAvLyBub3QgdXNpbmcgZW51bXMgaGVyZSBiZWNhdXNlIGl0IHJlc3VsdHMgaW4gY29tcHV0ZWQgcHJvcGVydGllc1xuICAgICAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgICAgICBpc1VubW91bnRlZDogZmFsc2UsXG4gICAgICAgIGlzRGVhY3RpdmF0ZWQ6IGZhbHNlLFxuICAgICAgICBiYzogbnVsbCxcbiAgICAgICAgYzogbnVsbCxcbiAgICAgICAgYm06IG51bGwsXG4gICAgICAgIG06IG51bGwsXG4gICAgICAgIGJ1OiBudWxsLFxuICAgICAgICB1OiBudWxsLFxuICAgICAgICB1bTogbnVsbCxcbiAgICAgICAgYnVtOiBudWxsLFxuICAgICAgICBkYTogbnVsbCxcbiAgICAgICAgYTogbnVsbCxcbiAgICAgICAgcnRnOiBudWxsLFxuICAgICAgICBydGM6IG51bGwsXG4gICAgICAgIGVjOiBudWxsLFxuICAgICAgICBzcDogbnVsbFxuICAgIH07XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBpbnN0YW5jZS5jdHggPSBjcmVhdGVEZXZSZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGluc3RhbmNlLmN0eCA9IHsgXzogaW5zdGFuY2UgfTtcbiAgICB9XG4gICAgaW5zdGFuY2Uucm9vdCA9IHBhcmVudCA/IHBhcmVudC5yb290IDogaW5zdGFuY2U7XG4gICAgaW5zdGFuY2UuZW1pdCA9IGVtaXQkMS5iaW5kKG51bGwsIGluc3RhbmNlKTtcbiAgICAvLyBhcHBseSBjdXN0b20gZWxlbWVudCBzcGVjaWFsIGhhbmRsaW5nXG4gICAgaWYgKHZub2RlLmNlKSB7XG4gICAgICAgIHZub2RlLmNlKGluc3RhbmNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlO1xufVxubGV0IGN1cnJlbnRJbnN0YW5jZSA9IG51bGw7XG5jb25zdCBnZXRDdXJyZW50SW5zdGFuY2UgPSAoKSA9PiBjdXJyZW50SW5zdGFuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuY29uc3Qgc2V0Q3VycmVudEluc3RhbmNlID0gKGluc3RhbmNlKSA9PiB7XG4gICAgY3VycmVudEluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgaW5zdGFuY2Uuc2NvcGUub24oKTtcbn07XG5jb25zdCB1bnNldEN1cnJlbnRJbnN0YW5jZSA9ICgpID0+IHtcbiAgICBjdXJyZW50SW5zdGFuY2UgJiYgY3VycmVudEluc3RhbmNlLnNjb3BlLm9mZigpO1xuICAgIGN1cnJlbnRJbnN0YW5jZSA9IG51bGw7XG59O1xuY29uc3QgaXNCdWlsdEluVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcpO1xuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUsIGNvbmZpZykge1xuICAgIGNvbnN0IGFwcElzTmF0aXZlVGFnID0gY29uZmlnLmlzTmF0aXZlVGFnIHx8IE5PO1xuICAgIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgYXBwSXNOYXRpdmVUYWcobmFtZSkpIHtcbiAgICAgICAgd2FybignRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCBpZDogJyArIG5hbWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gaW5zdGFuY2Uudm5vZGUuc2hhcGVGbGFnICYgNCAvKiBTaGFwZUZsYWdzLlNUQVRFRlVMX0NPTVBPTkVOVCAqLztcbn1cbmxldCBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSBmYWxzZTtcbmZ1bmN0aW9uIHNldHVwQ29tcG9uZW50KGluc3RhbmNlLCBpc1NTUiA9IGZhbHNlKSB7XG4gICAgaXNJblNTUkNvbXBvbmVudFNldHVwID0gaXNTU1I7XG4gICAgY29uc3QgeyBwcm9wcywgY2hpbGRyZW4gfSA9IGluc3RhbmNlLnZub2RlO1xuICAgIGNvbnN0IGlzU3RhdGVmdWwgPSBpc1N0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlKTtcbiAgICBpbml0UHJvcHMoaW5zdGFuY2UsIHByb3BzLCBpc1N0YXRlZnVsLCBpc1NTUik7XG4gICAgaW5pdFNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XG4gICAgY29uc3Qgc2V0dXBSZXN1bHQgPSBpc1N0YXRlZnVsXG4gICAgICAgID8gc2V0dXBTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IGZhbHNlO1xuICAgIHJldHVybiBzZXR1cFJlc3VsdDtcbn1cbmZ1bmN0aW9uIHNldHVwU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBpZiAoQ29tcG9uZW50Lm5hbWUpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShDb21wb25lbnQubmFtZSwgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChDb21wb25lbnQuY29tcG9uZW50cykge1xuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhDb21wb25lbnQuY29tcG9uZW50cyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWVzW2ldLCBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKENvbXBvbmVudC5kaXJlY3RpdmVzKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKENvbXBvbmVudC5kaXJlY3RpdmVzKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChDb21wb25lbnQuY29tcGlsZXJPcHRpb25zICYmIGlzUnVudGltZU9ubHkoKSkge1xuICAgICAgICAgICAgd2FybihgXCJjb21waWxlck9wdGlvbnNcIiBpcyBvbmx5IHN1cHBvcnRlZCB3aGVuIHVzaW5nIGEgYnVpbGQgb2YgVnVlIHRoYXQgYCArXG4gICAgICAgICAgICAgICAgYGluY2x1ZGVzIHRoZSBydW50aW1lIGNvbXBpbGVyLiBTaW5jZSB5b3UgYXJlIHVzaW5nIGEgcnVudGltZS1vbmx5IGAgK1xuICAgICAgICAgICAgICAgIGBidWlsZCwgdGhlIG9wdGlvbnMgc2hvdWxkIGJlIHBhc3NlZCB2aWEgeW91ciBidWlsZCB0b29sIGNvbmZpZyBpbnN0ZWFkLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIDAuIGNyZWF0ZSByZW5kZXIgcHJveHkgcHJvcGVydHkgYWNjZXNzIGNhY2hlXG4gICAgaW5zdGFuY2UuYWNjZXNzQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIC8vIDEuIGNyZWF0ZSBwdWJsaWMgaW5zdGFuY2UgLyByZW5kZXIgcHJveHlcbiAgICAvLyBhbHNvIG1hcmsgaXQgcmF3IHNvIGl0J3MgbmV2ZXIgb2JzZXJ2ZWRcbiAgICBpbnN0YW5jZS5wcm94eSA9IG1hcmtSYXcobmV3IFByb3h5KGluc3RhbmNlLmN0eCwgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzKSk7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBleHBvc2VQcm9wc09uUmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XG4gICAgfVxuICAgIC8vIDIuIGNhbGwgc2V0dXAoKVxuICAgIGNvbnN0IHsgc2V0dXAgfSA9IENvbXBvbmVudDtcbiAgICBpZiAoc2V0dXApIHtcbiAgICAgICAgY29uc3Qgc2V0dXBDb250ZXh0ID0gKGluc3RhbmNlLnNldHVwQ29udGV4dCA9XG4gICAgICAgICAgICBzZXR1cC5sZW5ndGggPiAxID8gY3JlYXRlU2V0dXBDb250ZXh0KGluc3RhbmNlKSA6IG51bGwpO1xuICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICAgIGNvbnN0IHNldHVwUmVzdWx0ID0gY2FsbFdpdGhFcnJvckhhbmRsaW5nKHNldHVwLCBpbnN0YW5jZSwgMCAvKiBFcnJvckNvZGVzLlNFVFVQX0ZVTkNUSU9OICovLCBbKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGluc3RhbmNlLnByb3BzKSA6IGluc3RhbmNlLnByb3BzLCBzZXR1cENvbnRleHRdKTtcbiAgICAgICAgcmVzZXRUcmFja2luZygpO1xuICAgICAgICB1bnNldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgICAgICBpZiAoaXNQcm9taXNlKHNldHVwUmVzdWx0KSkge1xuICAgICAgICAgICAgc2V0dXBSZXN1bHQudGhlbih1bnNldEN1cnJlbnRJbnN0YW5jZSwgdW5zZXRDdXJyZW50SW5zdGFuY2UpO1xuICAgICAgICAgICAgaWYgKGlzU1NSKSB7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBwcm9taXNlIHNvIHNlcnZlci1yZW5kZXJlciBjYW4gd2FpdCBvbiBpdFxuICAgICAgICAgICAgICAgIHJldHVybiBzZXR1cFJlc3VsdFxuICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzb2x2ZWRSZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHJlc29sdmVkUmVzdWx0LCBpc1NTUik7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlLCBpbnN0YW5jZSwgMCAvKiBFcnJvckNvZGVzLlNFVFVQX0ZVTkNUSU9OICovKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGFzeW5jIHNldHVwIHJldHVybmVkIFByb21pc2UuXG4gICAgICAgICAgICAgICAgLy8gYmFpbCBoZXJlIGFuZCB3YWl0IGZvciByZS1lbnRyeS5cbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5hc3luY0RlcCA9IHNldHVwUmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWluc3RhbmNlLnN1c3BlbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSAoX2EgPSBDb21wb25lbnQubmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ0Fub255bW91cyc7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCA8JHtuYW1lfT46IHNldHVwIGZ1bmN0aW9uIHJldHVybmVkIGEgcHJvbWlzZSwgYnV0IG5vIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYDxTdXNwZW5zZT4gYm91bmRhcnkgd2FzIGZvdW5kIGluIHRoZSBwYXJlbnQgY29tcG9uZW50IHRyZWUuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYEEgY29tcG9uZW50IHdpdGggYXN5bmMgc2V0dXAoKSBtdXN0IGJlIG5lc3RlZCBpbiBhIDxTdXNwZW5zZT4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgaW4gb3JkZXIgdG8gYmUgcmVuZGVyZWQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHNldHVwUmVzdWx0LCBpc1NTUik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUik7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHNldHVwUmVzdWx0LCBpc1NTUikge1xuICAgIGlmIChpc0Z1bmN0aW9uKHNldHVwUmVzdWx0KSkge1xuICAgICAgICAvLyBzZXR1cCByZXR1cm5lZCBhbiBpbmxpbmUgcmVuZGVyIGZ1bmN0aW9uXG4gICAgICAgIGlmIChpbnN0YW5jZS50eXBlLl9fc3NySW5saW5lUmVuZGVyKSB7XG4gICAgICAgICAgICAvLyB3aGVuIHRoZSBmdW5jdGlvbidzIG5hbWUgaXMgYHNzclJlbmRlcmAgKGNvbXBpbGVkIGJ5IFNGQyBpbmxpbmUgbW9kZSksXG4gICAgICAgICAgICAvLyBzZXQgaXQgYXMgc3NyUmVuZGVyIGluc3RlYWQuXG4gICAgICAgICAgICBpbnN0YW5jZS5zc3JSZW5kZXIgPSBzZXR1cFJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGluc3RhbmNlLnJlbmRlciA9IHNldHVwUmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNldHVwUmVzdWx0KSkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzVk5vZGUoc2V0dXBSZXN1bHQpKSB7XG4gICAgICAgICAgICB3YXJuKGBzZXR1cCgpIHNob3VsZCBub3QgcmV0dXJuIFZOb2RlcyBkaXJlY3RseSAtIGAgK1xuICAgICAgICAgICAgICAgIGByZXR1cm4gYSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZC5gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZXR1cCByZXR1cm5lZCBiaW5kaW5ncy5cbiAgICAgICAgLy8gYXNzdW1pbmcgYSByZW5kZXIgZnVuY3Rpb24gY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZSBpcyBwcmVzZW50LlxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgaW5zdGFuY2UuZGV2dG9vbHNSYXdTZXR1cFN0YXRlID0gc2V0dXBSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2Uuc2V0dXBTdGF0ZSA9IHByb3h5UmVmcyhzZXR1cFJlc3VsdCk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIGV4cG9zZVNldHVwU3RhdGVPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzZXR1cFJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHdhcm4oYHNldHVwKCkgc2hvdWxkIHJldHVybiBhbiBvYmplY3QuIFJlY2VpdmVkOiAke3NldHVwUmVzdWx0ID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHNldHVwUmVzdWx0fWApO1xuICAgIH1cbiAgICBmaW5pc2hDb21wb25lbnRTZXR1cChpbnN0YW5jZSwgaXNTU1IpO1xufVxubGV0IGNvbXBpbGU7XG5sZXQgaW5zdGFsbFdpdGhQcm94eTtcbi8qKlxuICogRm9yIHJ1bnRpbWUtZG9tIHRvIHJlZ2lzdGVyIHRoZSBjb21waWxlci5cbiAqIE5vdGUgdGhlIGV4cG9ydGVkIG1ldGhvZCB1c2VzIGFueSB0byBhdm9pZCBkLnRzIHJlbHlpbmcgb24gdGhlIGNvbXBpbGVyIHR5cGVzLlxuICovXG5mdW5jdGlvbiByZWdpc3RlclJ1bnRpbWVDb21waWxlcihfY29tcGlsZSkge1xuICAgIGNvbXBpbGUgPSBfY29tcGlsZTtcbiAgICBpbnN0YWxsV2l0aFByb3h5ID0gaSA9PiB7XG4gICAgICAgIGlmIChpLnJlbmRlci5fcmMpIHtcbiAgICAgICAgICAgIGkud2l0aFByb3h5ID0gbmV3IFByb3h5KGkuY3R4LCBSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8vIGRldiBvbmx5XG5jb25zdCBpc1J1bnRpbWVPbmx5ID0gKCkgPT4gIWNvbXBpbGU7XG5mdW5jdGlvbiBmaW5pc2hDb21wb25lbnRTZXR1cChpbnN0YW5jZSwgaXNTU1IsIHNraXBPcHRpb25zKSB7XG4gICAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcbiAgICAvLyB0ZW1wbGF0ZSAvIHJlbmRlciBmdW5jdGlvbiBub3JtYWxpemF0aW9uXG4gICAgLy8gY291bGQgYmUgYWxyZWFkeSBzZXQgd2hlbiByZXR1cm5lZCBmcm9tIHNldHVwKClcbiAgICBpZiAoIWluc3RhbmNlLnJlbmRlcikge1xuICAgICAgICAvLyBvbmx5IGRvIG9uLXRoZS1mbHkgY29tcGlsZSBpZiBub3QgaW4gU1NSIC0gU1NSIG9uLXRoZS1mbHkgY29tcGlsYXRpb25cbiAgICAgICAgLy8gaXMgZG9uZSBieSBzZXJ2ZXItcmVuZGVyZXJcbiAgICAgICAgaWYgKCFpc1NTUiAmJiBjb21waWxlICYmICFDb21wb25lbnQucmVuZGVyKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IENvbXBvbmVudC50ZW1wbGF0ZSB8fFxuICAgICAgICAgICAgICAgIHJlc29sdmVNZXJnZWRPcHRpb25zKGluc3RhbmNlKS50ZW1wbGF0ZTtcbiAgICAgICAgICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgY29tcGlsZWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IGlzQ3VzdG9tRWxlbWVudCwgY29tcGlsZXJPcHRpb25zIH0gPSBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZztcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRlbGltaXRlcnMsIGNvbXBpbGVyT3B0aW9uczogY29tcG9uZW50Q29tcGlsZXJPcHRpb25zIH0gPSBDb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgZmluYWxDb21waWxlck9wdGlvbnMgPSBleHRlbmQoZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgaXNDdXN0b21FbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBkZWxpbWl0ZXJzXG4gICAgICAgICAgICAgICAgfSwgY29tcGlsZXJPcHRpb25zKSwgY29tcG9uZW50Q29tcGlsZXJPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBDb21wb25lbnQucmVuZGVyID0gY29tcGlsZSh0ZW1wbGF0ZSwgZmluYWxDb21waWxlck9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGNvbXBpbGVgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gKENvbXBvbmVudC5yZW5kZXIgfHwgTk9PUCk7XG4gICAgICAgIC8vIGZvciBydW50aW1lLWNvbXBpbGVkIHJlbmRlciBmdW5jdGlvbnMgdXNpbmcgYHdpdGhgIGJsb2NrcywgdGhlIHJlbmRlclxuICAgICAgICAvLyBwcm94eSB1c2VkIG5lZWRzIGEgZGlmZmVyZW50IGBoYXNgIGhhbmRsZXIgd2hpY2ggaXMgbW9yZSBwZXJmb3JtYW50IGFuZFxuICAgICAgICAvLyBhbHNvIG9ubHkgYWxsb3dzIGEgd2hpdGVsaXN0IG9mIGdsb2JhbHMgdG8gZmFsbHRocm91Z2guXG4gICAgICAgIGlmIChpbnN0YWxsV2l0aFByb3h5KSB7XG4gICAgICAgICAgICBpbnN0YWxsV2l0aFByb3h5KGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBzdXBwb3J0IGZvciAyLnggb3B0aW9uc1xuICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fICYmICEoZmFsc2UgKSkge1xuICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICAgIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSk7XG4gICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgICAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICB9XG4gICAgLy8gd2FybiBtaXNzaW5nIHRlbXBsYXRlL3JlbmRlclxuICAgIC8vIHRoZSBydW50aW1lIGNvbXBpbGF0aW9uIG9mIHRlbXBsYXRlIGluIFNTUiBpcyBkb25lIGJ5IHNlcnZlci1yZW5kZXJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFDb21wb25lbnQucmVuZGVyICYmIGluc3RhbmNlLnJlbmRlciA9PT0gTk9PUCAmJiAhaXNTU1IpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghY29tcGlsZSAmJiBDb21wb25lbnQudGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBwcm92aWRlZCB0ZW1wbGF0ZSBvcHRpb24gYnV0IGAgK1xuICAgICAgICAgICAgICAgIGBydW50aW1lIGNvbXBpbGF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBidWlsZCBvZiBWdWUuYCArXG4gICAgICAgICAgICAgICAgKGAgQ29uZmlndXJlIHlvdXIgYnVuZGxlciB0byBhbGlhcyBcInZ1ZVwiIHRvIFwidnVlL2Rpc3QvdnVlLmVzbS1idW5kbGVyLmpzXCIuYFxuICAgICAgICAgICAgICAgICAgICApIC8qIHNob3VsZCBub3QgaGFwcGVuICovKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBpcyBtaXNzaW5nIHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbi5gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUF0dHJzUHJveHkoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gbmV3IFByb3h5KGluc3RhbmNlLmF0dHJzLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xuICAgICAgICAgICAgICAgIHRyYWNrKGluc3RhbmNlLCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sICckYXR0cnMnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KCkge1xuICAgICAgICAgICAgICAgIHdhcm4oYHNldHVwQ29udGV4dC5hdHRycyBpcyByZWFkb25seS5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVsZXRlUHJvcGVydHkoKSB7XG4gICAgICAgICAgICAgICAgd2Fybihgc2V0dXBDb250ZXh0LmF0dHJzIGlzIHJlYWRvbmx5LmApO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgICAgICAgICAgIHRyYWNrKGluc3RhbmNlLCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sICckYXR0cnMnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlU2V0dXBDb250ZXh0KGluc3RhbmNlKSB7XG4gICAgY29uc3QgZXhwb3NlID0gZXhwb3NlZCA9PiB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaW5zdGFuY2UuZXhwb3NlZCkge1xuICAgICAgICAgICAgd2FybihgZXhwb3NlKCkgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IG9uY2UgcGVyIHNldHVwKCkuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UuZXhwb3NlZCA9IGV4cG9zZWQgfHwge307XG4gICAgfTtcbiAgICBsZXQgYXR0cnM7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAvLyBXZSB1c2UgZ2V0dGVycyBpbiBkZXYgaW4gY2FzZSBsaWJzIGxpa2UgdGVzdC11dGlscyBvdmVyd3JpdGUgaW5zdGFuY2VcbiAgICAgICAgLy8gcHJvcGVydGllcyAob3ZlcndyaXRlcyBzaG91bGQgbm90IGJlIGRvbmUgaW4gcHJvZClcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgZ2V0IGF0dHJzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdHRycyB8fCAoYXR0cnMgPSBjcmVhdGVBdHRyc1Byb3h5KGluc3RhbmNlKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IHNsb3RzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzaGFsbG93UmVhZG9ubHkoaW5zdGFuY2Uuc2xvdHMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBlbWl0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoZXZlbnQsIC4uLmFyZ3MpID0+IGluc3RhbmNlLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV4cG9zZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXQgYXR0cnMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF0dHJzIHx8IChhdHRycyA9IGNyZWF0ZUF0dHJzUHJveHkoaW5zdGFuY2UpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzbG90czogaW5zdGFuY2Uuc2xvdHMsXG4gICAgICAgICAgICBlbWl0OiBpbnN0YW5jZS5lbWl0LFxuICAgICAgICAgICAgZXhwb3NlXG4gICAgICAgIH07XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0RXhwb3NlUHJveHkoaW5zdGFuY2UpIHtcbiAgICBpZiAoaW5zdGFuY2UuZXhwb3NlZCkge1xuICAgICAgICByZXR1cm4gKGluc3RhbmNlLmV4cG9zZVByb3h5IHx8XG4gICAgICAgICAgICAoaW5zdGFuY2UuZXhwb3NlUHJveHkgPSBuZXcgUHJveHkocHJveHlSZWZzKG1hcmtSYXcoaW5zdGFuY2UuZXhwb3NlZCkpLCB7XG4gICAgICAgICAgICAgICAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5IGluIHB1YmxpY1Byb3BlcnRpZXNNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwdWJsaWNQcm9wZXJ0aWVzTWFwW2tleV0oaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpKTtcbiAgICB9XG59XG5jb25zdCBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuY29uc3QgY2xhc3NpZnkgPSAoc3RyKSA9PiBzdHIucmVwbGFjZShjbGFzc2lmeVJFLCBjID0+IGMudG9VcHBlckNhc2UoKSkucmVwbGFjZSgvWy1fXS9nLCAnJyk7XG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCwgaW5jbHVkZUluZmVycmVkID0gdHJ1ZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKENvbXBvbmVudClcbiAgICAgICAgPyBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWVcbiAgICAgICAgOiBDb21wb25lbnQubmFtZSB8fCAoaW5jbHVkZUluZmVycmVkICYmIENvbXBvbmVudC5fX25hbWUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGZvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIENvbXBvbmVudCwgaXNSb290ID0gZmFsc2UpIHtcbiAgICBsZXQgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50KTtcbiAgICBpZiAoIW5hbWUgJiYgQ29tcG9uZW50Ll9fZmlsZSkge1xuICAgICAgICBjb25zdCBtYXRjaCA9IENvbXBvbmVudC5fX2ZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwuXFx3KyQvKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBuYW1lID0gbWF0Y2hbMV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFuYW1lICYmIGluc3RhbmNlICYmIGluc3RhbmNlLnBhcmVudCkge1xuICAgICAgICAvLyB0cnkgdG8gaW5mZXIgdGhlIG5hbWUgYmFzZWQgb24gcmV2ZXJzZSByZXNvbHV0aW9uXG4gICAgICAgIGNvbnN0IGluZmVyRnJvbVJlZ2lzdHJ5ID0gKHJlZ2lzdHJ5KSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByZWdpc3RyeSkge1xuICAgICAgICAgICAgICAgIGlmIChyZWdpc3RyeVtrZXldID09PSBDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIG5hbWUgPVxuICAgICAgICAgICAgaW5mZXJGcm9tUmVnaXN0cnkoaW5zdGFuY2UuY29tcG9uZW50cyB8fFxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnBhcmVudC50eXBlLmNvbXBvbmVudHMpIHx8IGluZmVyRnJvbVJlZ2lzdHJ5KGluc3RhbmNlLmFwcENvbnRleHQuY29tcG9uZW50cyk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lID8gY2xhc3NpZnkobmFtZSkgOiBpc1Jvb3QgPyBgQXBwYCA6IGBBbm9ueW1vdXNgO1xufVxuZnVuY3Rpb24gaXNDbGFzc0NvbXBvbmVudCh2YWx1ZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlKSAmJiAnX192Y2NPcHRzJyBpbiB2YWx1ZTtcbn1cblxuY29uc3QgY29tcHV0ZWQgPSAoKGdldHRlck9yT3B0aW9ucywgZGVidWdPcHRpb25zKSA9PiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiBjb21wdXRlZCQxKGdldHRlck9yT3B0aW9ucywgZGVidWdPcHRpb25zLCBpc0luU1NSQ29tcG9uZW50U2V0dXApO1xufSk7XG5cbi8vIGRldiBvbmx5XG5jb25zdCB3YXJuUnVudGltZVVzYWdlID0gKG1ldGhvZCkgPT4gd2FybihgJHttZXRob2R9KCkgaXMgYSBjb21waWxlci1oaW50IGhlbHBlciB0aGF0IGlzIG9ubHkgdXNhYmxlIGluc2lkZSBgICtcbiAgICBgPHNjcmlwdCBzZXR1cD4gb2YgYSBzaW5nbGUgZmlsZSBjb21wb25lbnQuIEl0cyBhcmd1bWVudHMgc2hvdWxkIGJlIGAgK1xuICAgIGBjb21waWxlZCBhd2F5IGFuZCBwYXNzaW5nIGl0IGF0IHJ1bnRpbWUgaGFzIG5vIGVmZmVjdC5gKTtcbi8vIGltcGxlbWVudGF0aW9uXG5mdW5jdGlvbiBkZWZpbmVQcm9wcygpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZVByb3BzYCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLy8gaW1wbGVtZW50YXRpb25cbmZ1bmN0aW9uIGRlZmluZUVtaXRzKCkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgd2FyblJ1bnRpbWVVc2FnZShgZGVmaW5lRW1pdHNgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIFZ1ZSBgPHNjcmlwdCBzZXR1cD5gIGNvbXBpbGVyIG1hY3JvIGZvciBkZWNsYXJpbmcgYSBjb21wb25lbnQncyBleHBvc2VkXG4gKiBpbnN0YW5jZSBwcm9wZXJ0aWVzIHdoZW4gaXQgaXMgYWNjZXNzZWQgYnkgYSBwYXJlbnQgY29tcG9uZW50IHZpYSB0ZW1wbGF0ZVxuICogcmVmcy5cbiAqXG4gKiBgPHNjcmlwdCBzZXR1cD5gIGNvbXBvbmVudHMgYXJlIGNsb3NlZCBieSBkZWZhdWx0IC0gaS5lLiB2YXJpYWJsZXMgaW5zaWRlXG4gKiB0aGUgYDxzY3JpcHQgc2V0dXA+YCBzY29wZSBpcyBub3QgZXhwb3NlZCB0byBwYXJlbnQgdW5sZXNzIGV4cGxpY2l0bHkgZXhwb3NlZFxuICogdmlhIGBkZWZpbmVFeHBvc2VgLlxuICpcbiAqIFRoaXMgaXMgb25seSB1c2FibGUgaW5zaWRlIGA8c2NyaXB0IHNldHVwPmAsIGlzIGNvbXBpbGVkIGF3YXkgaW4gdGhlXG4gKiBvdXRwdXQgYW5kIHNob3VsZCAqKm5vdCoqIGJlIGFjdHVhbGx5IGNhbGxlZCBhdCBydW50aW1lLlxuICovXG5mdW5jdGlvbiBkZWZpbmVFeHBvc2UoZXhwb3NlZCkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgd2FyblJ1bnRpbWVVc2FnZShgZGVmaW5lRXhwb3NlYCk7XG4gICAgfVxufVxuLyoqXG4gKiBWdWUgYDxzY3JpcHQgc2V0dXA+YCBjb21waWxlciBtYWNybyBmb3IgcHJvdmlkaW5nIHByb3BzIGRlZmF1bHQgdmFsdWVzIHdoZW5cbiAqIHVzaW5nIHR5cGUtYmFzZWQgYGRlZmluZVByb3BzYCBkZWNsYXJhdGlvbi5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICogYGBgdHNcbiAqIHdpdGhEZWZhdWx0cyhkZWZpbmVQcm9wczx7XG4gKiAgIHNpemU/OiBudW1iZXJcbiAqICAgbGFiZWxzPzogc3RyaW5nW11cbiAqIH0+KCksIHtcbiAqICAgc2l6ZTogMyxcbiAqICAgbGFiZWxzOiAoKSA9PiBbJ2RlZmF1bHQgbGFiZWwnXVxuICogfSlcbiAqIGBgYFxuICpcbiAqIFRoaXMgaXMgb25seSB1c2FibGUgaW5zaWRlIGA8c2NyaXB0IHNldHVwPmAsIGlzIGNvbXBpbGVkIGF3YXkgaW4gdGhlIG91dHB1dFxuICogYW5kIHNob3VsZCAqKm5vdCoqIGJlIGFjdHVhbGx5IGNhbGxlZCBhdCBydW50aW1lLlxuICovXG5mdW5jdGlvbiB3aXRoRGVmYXVsdHMocHJvcHMsIGRlZmF1bHRzKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuUnVudGltZVVzYWdlKGB3aXRoRGVmYXVsdHNgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiB1c2VTbG90cygpIHtcbiAgICByZXR1cm4gZ2V0Q29udGV4dCgpLnNsb3RzO1xufVxuZnVuY3Rpb24gdXNlQXR0cnMoKSB7XG4gICAgcmV0dXJuIGdldENvbnRleHQoKS5hdHRycztcbn1cbmZ1bmN0aW9uIGdldENvbnRleHQoKSB7XG4gICAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWkpIHtcbiAgICAgICAgd2FybihgdXNlQ29udGV4dCgpIGNhbGxlZCB3aXRob3V0IGFjdGl2ZSBpbnN0YW5jZS5gKTtcbiAgICB9XG4gICAgcmV0dXJuIGkuc2V0dXBDb250ZXh0IHx8IChpLnNldHVwQ29udGV4dCA9IGNyZWF0ZVNldHVwQ29udGV4dChpKSk7XG59XG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIGRlZmF1bHQgZGVjbGFyYXRpb25zLiBJbXBvcnRlZCBieSBjb21waWxlZCBjb2RlXG4gKiBvbmx5LlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGVmYXVsdHMocmF3LCBkZWZhdWx0cykge1xuICAgIGNvbnN0IHByb3BzID0gaXNBcnJheShyYXcpXG4gICAgICAgID8gcmF3LnJlZHVjZSgobm9ybWFsaXplZCwgcCkgPT4gKChub3JtYWxpemVkW3BdID0ge30pLCBub3JtYWxpemVkKSwge30pXG4gICAgICAgIDogcmF3O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGRlZmF1bHRzKSB7XG4gICAgICAgIGNvbnN0IG9wdCA9IHByb3BzW2tleV07XG4gICAgICAgIGlmIChvcHQpIHtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KG9wdCkgfHwgaXNGdW5jdGlvbihvcHQpKSB7XG4gICAgICAgICAgICAgICAgcHJvcHNba2V5XSA9IHsgdHlwZTogb3B0LCBkZWZhdWx0OiBkZWZhdWx0c1trZXldIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHQuZGVmYXVsdCA9IGRlZmF1bHRzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0ID09PSBudWxsKSB7XG4gICAgICAgICAgICBwcm9wc1trZXldID0geyBkZWZhdWx0OiBkZWZhdWx0c1trZXldIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICB3YXJuKGBwcm9wcyBkZWZhdWx0IGtleSBcIiR7a2V5fVwiIGhhcyBubyBjb3JyZXNwb25kaW5nIGRlY2xhcmF0aW9uLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9wcztcbn1cbi8qKlxuICogVXNlZCB0byBjcmVhdGUgYSBwcm94eSBmb3IgdGhlIHJlc3QgZWxlbWVudCB3aGVuIGRlc3RydWN0dXJpbmcgcHJvcHMgd2l0aFxuICogZGVmaW5lUHJvcHMoKS5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVQcm9wc1Jlc3RQcm94eShwcm9wcywgZXhjbHVkZWRLZXlzKSB7XG4gICAgY29uc3QgcmV0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgaWYgKCFleGNsdWRlZEtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJldCwga2V5LCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHByb3BzW2tleV1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG4vKipcbiAqIGA8c2NyaXB0IHNldHVwPmAgaGVscGVyIGZvciBwZXJzaXN0aW5nIHRoZSBjdXJyZW50IGluc3RhbmNlIGNvbnRleHQgb3ZlclxuICogYXN5bmMvYXdhaXQgZmxvd3MuXG4gKlxuICogYEB2dWUvY29tcGlsZXItc2ZjYCBjb252ZXJ0cyB0aGUgZm9sbG93aW5nOlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCB4ID0gYXdhaXQgZm9vKClcbiAqIGBgYFxuICpcbiAqIGludG86XG4gKlxuICogYGBgdHNcbiAqIGxldCBfX3RlbXAsIF9fcmVzdG9yZVxuICogY29uc3QgeCA9ICgoW19fdGVtcCwgX19yZXN0b3JlXSA9IHdpdGhBc3luY0NvbnRleHQoKCkgPT4gZm9vKCkpKSxfX3RlbXA9YXdhaXQgX190ZW1wLF9fcmVzdG9yZSgpLF9fdGVtcClcbiAqIGBgYFxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHdpdGhBc3luY0NvbnRleHQoZ2V0QXdhaXRhYmxlKSB7XG4gICAgY29uc3QgY3R4ID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhY3R4KSB7XG4gICAgICAgIHdhcm4oYHdpdGhBc3luY0NvbnRleHQgY2FsbGVkIHdpdGhvdXQgYWN0aXZlIGN1cnJlbnQgaW5zdGFuY2UuIGAgK1xuICAgICAgICAgICAgYFRoaXMgaXMgbGlrZWx5IGEgYnVnLmApO1xuICAgIH1cbiAgICBsZXQgYXdhaXRhYmxlID0gZ2V0QXdhaXRhYmxlKCk7XG4gICAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBpZiAoaXNQcm9taXNlKGF3YWl0YWJsZSkpIHtcbiAgICAgICAgYXdhaXRhYmxlID0gYXdhaXRhYmxlLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKGN0eCk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIFthd2FpdGFibGUsICgpID0+IHNldEN1cnJlbnRJbnN0YW5jZShjdHgpXTtcbn1cblxuLy8gQWN0dWFsIGltcGxlbWVudGF0aW9uXG5mdW5jdGlvbiBoKHR5cGUsIHByb3BzT3JDaGlsZHJlbiwgY2hpbGRyZW4pIHtcbiAgICBjb25zdCBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAobCA9PT0gMikge1xuICAgICAgICBpZiAoaXNPYmplY3QocHJvcHNPckNoaWxkcmVuKSAmJiAhaXNBcnJheShwcm9wc09yQ2hpbGRyZW4pKSB7XG4gICAgICAgICAgICAvLyBzaW5nbGUgdm5vZGUgd2l0aG91dCBwcm9wc1xuICAgICAgICAgICAgaWYgKGlzVk5vZGUocHJvcHNPckNoaWxkcmVuKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBudWxsLCBbcHJvcHNPckNoaWxkcmVuXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBwcm9wcyB3aXRob3V0IGNoaWxkcmVuXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHNPckNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG9taXQgcHJvcHNcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBudWxsLCBwcm9wc09yQ2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAobCA+IDMpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsID09PSAzICYmIGlzVk5vZGUoY2hpbGRyZW4pKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IFtjaGlsZHJlbl07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzT3JDaGlsZHJlbiwgY2hpbGRyZW4pO1xuICAgIH1cbn1cblxuY29uc3Qgc3NyQ29udGV4dEtleSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgc3NyQ29udGV4dGAgOiBgYCk7XG5jb25zdCB1c2VTU1JDb250ZXh0ID0gKCkgPT4ge1xuICAgIHtcbiAgICAgICAgY29uc3QgY3R4ID0gaW5qZWN0KHNzckNvbnRleHRLZXkpO1xuICAgICAgICBpZiAoIWN0eCkge1xuICAgICAgICAgICAgd2FybihgU2VydmVyIHJlbmRlcmluZyBjb250ZXh0IG5vdCBwcm92aWRlZC4gTWFrZSBzdXJlIHRvIG9ubHkgY2FsbCBgICtcbiAgICAgICAgICAgICAgICBgdXNlU1NSQ29udGV4dCgpIGNvbmRpdGlvbmFsbHkgaW4gdGhlIHNlcnZlciBidWlsZC5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3R4O1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGlzU2hhbGxvdyh2YWx1ZSkge1xuICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1NoYWxsb3dcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1NIQUxMT1cgKi9dKTtcbn1cblxuZnVuY3Rpb24gaW5pdEN1c3RvbUZvcm1hdHRlcigpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbiAgICBpZiAoIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHZ1ZVN0eWxlID0geyBzdHlsZTogJ2NvbG9yOiMzYmE3NzYnIH07XG4gICAgY29uc3QgbnVtYmVyU3R5bGUgPSB7IHN0eWxlOiAnY29sb3I6IzBiMWJjOScgfTtcbiAgICBjb25zdCBzdHJpbmdTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojYjYyZTI0JyB9O1xuICAgIGNvbnN0IGtleXdvcmRTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojOWQyODhjJyB9O1xuICAgIC8vIGN1c3RvbSBmb3JtYXR0ZXIgZm9yIENocm9tZVxuICAgIC8vIGh0dHBzOi8vd3d3Lm1hdHR6ZXVuZXJ0LmNvbS8yMDE2LzAyLzE5L2N1c3RvbS1jaHJvbWUtZGV2dG9vbHMtb2JqZWN0LWZvcm1hdHRlcnMuaHRtbFxuICAgIGNvbnN0IGZvcm1hdHRlciA9IHtcbiAgICAgICAgaGVhZGVyKG9iaikge1xuICAgICAgICAgICAgLy8gVE9ETyBhbHNvIGZvcm1hdCBDb21wb25lbnRQdWJsaWNJbnN0YW5jZSAmIGN0eC5zbG90cy9hdHRycyBpbiBzZXR1cFxuICAgICAgICAgICAgaWYgKCFpc09iamVjdChvYmopKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2JqLl9faXNWdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWydkaXYnLCB2dWVTdHlsZSwgYFZ1ZUluc3RhbmNlYF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlZihvYmopKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgICAgICBbJ3NwYW4nLCB2dWVTdHlsZSwgZ2VuUmVmRmxhZyhvYmopXSxcbiAgICAgICAgICAgICAgICAgICAgJzwnLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRWYWx1ZShvYmoudmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICBgPmBcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWFjdGl2ZShvYmopKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgICAgICBbJ3NwYW4nLCB2dWVTdHlsZSwgaXNTaGFsbG93KG9iaikgPyAnU2hhbGxvd1JlYWN0aXZlJyA6ICdSZWFjdGl2ZSddLFxuICAgICAgICAgICAgICAgICAgICAnPCcsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKG9iaiksXG4gICAgICAgICAgICAgICAgICAgIGA+JHtpc1JlYWRvbmx5KG9iaikgPyBgIChyZWFkb25seSlgIDogYGB9YFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlYWRvbmx5KG9iaikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIHZ1ZVN0eWxlLCBpc1NoYWxsb3cob2JqKSA/ICdTaGFsbG93UmVhZG9ubHknIDogJ1JlYWRvbmx5J10sXG4gICAgICAgICAgICAgICAgICAgICc8JyxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUob2JqKSxcbiAgICAgICAgICAgICAgICAgICAgJz4nXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBoYXNCb2R5KG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmouX19pc1Z1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgYm9keShvYmopIHtcbiAgICAgICAgICAgIGlmIChvYmogJiYgb2JqLl9faXNWdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgIC4uLmZvcm1hdEluc3RhbmNlKG9iai4kKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIGZvcm1hdEluc3RhbmNlKGluc3RhbmNlKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrcyA9IFtdO1xuICAgICAgICBpZiAoaW5zdGFuY2UudHlwZS5wcm9wcyAmJiBpbnN0YW5jZS5wcm9wcykge1xuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygncHJvcHMnLCB0b1JhdyhpbnN0YW5jZS5wcm9wcykpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5zdGFuY2Uuc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKKSB7XG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdzZXR1cCcsIGluc3RhbmNlLnNldHVwU3RhdGUpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5zdGFuY2UuZGF0YSAhPT0gRU1QVFlfT0JKKSB7XG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdkYXRhJywgdG9SYXcoaW5zdGFuY2UuZGF0YSkpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21wdXRlZCA9IGV4dHJhY3RLZXlzKGluc3RhbmNlLCAnY29tcHV0ZWQnKTtcbiAgICAgICAgaWYgKGNvbXB1dGVkKSB7XG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdjb21wdXRlZCcsIGNvbXB1dGVkKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5qZWN0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgJ2luamVjdCcpO1xuICAgICAgICBpZiAoaW5qZWN0ZWQpIHtcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ2luamVjdGVkJywgaW5qZWN0ZWQpKTtcbiAgICAgICAgfVxuICAgICAgICBibG9ja3MucHVzaChbXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBrZXl3b3JkU3R5bGUuc3R5bGUgKyAnO29wYWNpdHk6MC42NidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICckIChpbnRlcm5hbCk6ICdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbJ29iamVjdCcsIHsgb2JqZWN0OiBpbnN0YW5jZSB9XVxuICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIGJsb2NrcztcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VCbG9jayh0eXBlLCB0YXJnZXQpIHtcbiAgICAgICAgdGFyZ2V0ID0gZXh0ZW5kKHt9LCB0YXJnZXQpO1xuICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywge31dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6ICdsaW5lLWhlaWdodDoxLjI1ZW07bWFyZ2luLWJvdHRvbTowLjZlbScgfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnY29sb3I6IzQ3NjU4MidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR5cGVcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ3BhZGRpbmctbGVmdDoxLjI1ZW0nXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAuLi5PYmplY3Qua2V5cyh0YXJnZXQpLm1hcChrZXkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIGtleXdvcmRTdHlsZSwga2V5ICsgJzogJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRWYWx1ZSh0YXJnZXRba2V5XSwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodiwgYXNSYXcgPSB0cnVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCBudW1iZXJTdHlsZSwgdl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywgc3RyaW5nU3R5bGUsIEpTT04uc3RyaW5naWZ5KHYpXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywga2V5d29yZFN0eWxlLCB2XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIFsnb2JqZWN0JywgeyBvYmplY3Q6IGFzUmF3ID8gdG9SYXcodikgOiB2IH1dO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIHN0cmluZ1N0eWxlLCBTdHJpbmcodildO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV4dHJhY3RLZXlzKGluc3RhbmNlLCB0eXBlKSB7XG4gICAgICAgIGNvbnN0IENvbXAgPSBpbnN0YW5jZS50eXBlO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihDb21wKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4dHJhY3RlZCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZS5jdHgpIHtcbiAgICAgICAgICAgIGlmIChpc0tleU9mVHlwZShDb21wLCBrZXksIHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFjdGVkW2tleV0gPSBpbnN0YW5jZS5jdHhba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXh0cmFjdGVkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0tleU9mVHlwZShDb21wLCBrZXksIHR5cGUpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IENvbXBbdHlwZV07XG4gICAgICAgIGlmICgoaXNBcnJheShvcHRzKSAmJiBvcHRzLmluY2x1ZGVzKGtleSkpIHx8XG4gICAgICAgICAgICAoaXNPYmplY3Qob3B0cykgJiYga2V5IGluIG9wdHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQ29tcC5leHRlbmRzICYmIGlzS2V5T2ZUeXBlKENvbXAuZXh0ZW5kcywga2V5LCB0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKENvbXAubWl4aW5zICYmIENvbXAubWl4aW5zLnNvbWUobSA9PiBpc0tleU9mVHlwZShtLCBrZXksIHR5cGUpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2VuUmVmRmxhZyh2KSB7XG4gICAgICAgIGlmIChpc1NoYWxsb3codikpIHtcbiAgICAgICAgICAgIHJldHVybiBgU2hhbGxvd1JlZmA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHYuZWZmZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gYENvbXB1dGVkUmVmYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYFJlZmA7XG4gICAgfVxuICAgIGlmICh3aW5kb3cuZGV2dG9vbHNGb3JtYXR0ZXJzKSB7XG4gICAgICAgIHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgd2luZG93LmRldnRvb2xzRm9ybWF0dGVycyA9IFtmb3JtYXR0ZXJdO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gd2l0aE1lbW8obWVtbywgcmVuZGVyLCBjYWNoZSwgaW5kZXgpIHtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZVtpbmRleF07XG4gICAgaWYgKGNhY2hlZCAmJiBpc01lbW9TYW1lKGNhY2hlZCwgbWVtbykpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgY29uc3QgcmV0ID0gcmVuZGVyKCk7XG4gICAgLy8gc2hhbGxvdyBjbG9uZVxuICAgIHJldC5tZW1vID0gbWVtby5zbGljZSgpO1xuICAgIHJldHVybiAoY2FjaGVbaW5kZXhdID0gcmV0KTtcbn1cbmZ1bmN0aW9uIGlzTWVtb1NhbWUoY2FjaGVkLCBtZW1vKSB7XG4gICAgY29uc3QgcHJldiA9IGNhY2hlZC5tZW1vO1xuICAgIGlmIChwcmV2Lmxlbmd0aCAhPSBtZW1vLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaGFzQ2hhbmdlZChwcmV2W2ldLCBtZW1vW2ldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIG1ha2Ugc3VyZSB0byBsZXQgcGFyZW50IGJsb2NrIHRyYWNrIGl0IHdoZW4gcmV0dXJuaW5nIGNhY2hlZFxuICAgIGlmIChpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwICYmIGN1cnJlbnRCbG9jaykge1xuICAgICAgICBjdXJyZW50QmxvY2sucHVzaChjYWNoZWQpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gQ29yZSBBUEkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5jb25zdCB2ZXJzaW9uID0gXCIzLjIuNDFcIjtcbmNvbnN0IF9zc3JVdGlscyA9IHtcbiAgICBjcmVhdGVDb21wb25lbnRJbnN0YW5jZSxcbiAgICBzZXR1cENvbXBvbmVudCxcbiAgICByZW5kZXJDb21wb25lbnRSb290LFxuICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSxcbiAgICBpc1ZOb2RlLFxuICAgIG5vcm1hbGl6ZVZOb2RlXG59O1xuLyoqXG4gKiBTU1IgdXRpbHMgZm9yIFxcQHZ1ZS9zZXJ2ZXItcmVuZGVyZXIuIE9ubHkgZXhwb3NlZCBpbiBzc3ItcG9zc2libGUgYnVpbGRzLlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IHNzclV0aWxzID0gKF9zc3JVdGlscyApO1xuLyoqXG4gKiBAaW50ZXJuYWwgb25seSBleHBvc2VkIGluIGNvbXBhdCBidWlsZHNcbiAqL1xuY29uc3QgcmVzb2x2ZUZpbHRlciA9IG51bGw7XG4vKipcbiAqIEBpbnRlcm5hbCBvbmx5IGV4cG9zZWQgaW4gY29tcGF0IGJ1aWxkcy5cbiAqL1xuY29uc3QgY29tcGF0VXRpbHMgPSAobnVsbCk7XG5cbmV4cG9ydCB7IEJhc2VUcmFuc2l0aW9uLCBDb21tZW50LCBGcmFnbWVudCwgS2VlcEFsaXZlLCBTdGF0aWMsIFN1c3BlbnNlLCBUZWxlcG9ydCwgVGV4dCwgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcsIGNhbGxXaXRoRXJyb3JIYW5kbGluZywgY2xvbmVWTm9kZSwgY29tcGF0VXRpbHMsIGNvbXB1dGVkLCBjcmVhdGVCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVFbGVtZW50QmxvY2ssIGNyZWF0ZUJhc2VWTm9kZSBhcyBjcmVhdGVFbGVtZW50Vk5vZGUsIGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyLCBjcmVhdGVQcm9wc1Jlc3RQcm94eSwgY3JlYXRlUmVuZGVyZXIsIGNyZWF0ZVNsb3RzLCBjcmVhdGVTdGF0aWNWTm9kZSwgY3JlYXRlVGV4dFZOb2RlLCBjcmVhdGVWTm9kZSwgZGVmaW5lQXN5bmNDb21wb25lbnQsIGRlZmluZUNvbXBvbmVudCwgZGVmaW5lRW1pdHMsIGRlZmluZUV4cG9zZSwgZGVmaW5lUHJvcHMsIGRldnRvb2xzLCBnZXRDdXJyZW50SW5zdGFuY2UsIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiwgZ3VhcmRSZWFjdGl2ZVByb3BzLCBoLCBoYW5kbGVFcnJvciwgaW5pdEN1c3RvbUZvcm1hdHRlciwgaW5qZWN0LCBpc01lbW9TYW1lLCBpc1J1bnRpbWVPbmx5LCBpc1ZOb2RlLCBtZXJnZURlZmF1bHRzLCBtZXJnZVByb3BzLCBuZXh0VGljaywgb25BY3RpdmF0ZWQsIG9uQmVmb3JlTW91bnQsIG9uQmVmb3JlVW5tb3VudCwgb25CZWZvcmVVcGRhdGUsIG9uRGVhY3RpdmF0ZWQsIG9uRXJyb3JDYXB0dXJlZCwgb25Nb3VudGVkLCBvblJlbmRlclRyYWNrZWQsIG9uUmVuZGVyVHJpZ2dlcmVkLCBvblNlcnZlclByZWZldGNoLCBvblVubW91bnRlZCwgb25VcGRhdGVkLCBvcGVuQmxvY2ssIHBvcFNjb3BlSWQsIHByb3ZpZGUsIHB1c2hTY29wZUlkLCBxdWV1ZVBvc3RGbHVzaENiLCByZWdpc3RlclJ1bnRpbWVDb21waWxlciwgcmVuZGVyTGlzdCwgcmVuZGVyU2xvdCwgcmVzb2x2ZUNvbXBvbmVudCwgcmVzb2x2ZURpcmVjdGl2ZSwgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQsIHJlc29sdmVGaWx0ZXIsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MsIHNldEJsb2NrVHJhY2tpbmcsIHNldERldnRvb2xzSG9vaywgc2V0VHJhbnNpdGlvbkhvb2tzLCBzc3JDb250ZXh0S2V5LCBzc3JVdGlscywgdG9IYW5kbGVycywgdHJhbnNmb3JtVk5vZGVBcmdzLCB1c2VBdHRycywgdXNlU1NSQ29udGV4dCwgdXNlU2xvdHMsIHVzZVRyYW5zaXRpb25TdGF0ZSwgdmVyc2lvbiwgd2Fybiwgd2F0Y2gsIHdhdGNoRWZmZWN0LCB3YXRjaFBvc3RFZmZlY3QsIHdhdGNoU3luY0VmZmVjdCwgd2l0aEFzeW5jQ29udGV4dCwgd2l0aEN0eCwgd2l0aERlZmF1bHRzLCB3aXRoRGlyZWN0aXZlcywgd2l0aE1lbW8sIHdpdGhTY29wZUlkIH07XG4iLCJpbXBvcnQgeyBjYW1lbGl6ZSwgd2FybiwgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcsIGRlZmluZUNvbXBvbmVudCwgbmV4dFRpY2ssIGNyZWF0ZVZOb2RlLCBnZXRDdXJyZW50SW5zdGFuY2UsIHdhdGNoUG9zdEVmZmVjdCwgb25Nb3VudGVkLCBvblVubW91bnRlZCwgRnJhZ21lbnQsIFN0YXRpYywgaCwgQmFzZVRyYW5zaXRpb24sIHVzZVRyYW5zaXRpb25TdGF0ZSwgb25VcGRhdGVkLCB0b1JhdywgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuLCBzZXRUcmFuc2l0aW9uSG9va3MsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MsIGNyZWF0ZVJlbmRlcmVyLCBpc1J1bnRpbWVPbmx5LCBjcmVhdGVIeWRyYXRpb25SZW5kZXJlciB9IGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmV4cG9ydCAqIGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmltcG9ydCB7IGlzU3RyaW5nLCBpc0FycmF5LCBoeXBoZW5hdGUsIGNhcGl0YWxpemUsIGlzU3BlY2lhbEJvb2xlYW5BdHRyLCBpbmNsdWRlQm9vbGVhbkF0dHIsIGlzT24sIGlzTW9kZWxMaXN0ZW5lciwgaXNGdW5jdGlvbiwgdG9OdW1iZXIsIGNhbWVsaXplIGFzIGNhbWVsaXplJDEsIGV4dGVuZCwgRU1QVFlfT0JKLCBpc09iamVjdCwgaW52b2tlQXJyYXlGbnMsIGxvb3NlSW5kZXhPZiwgaXNTZXQsIGxvb3NlRXF1YWwsIGlzSFRNTFRhZywgaXNTVkdUYWcgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHN2Z05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbmNvbnN0IGRvYyA9ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiBudWxsKTtcbmNvbnN0IHRlbXBsYXRlQ29udGFpbmVyID0gZG9jICYmIC8qI19fUFVSRV9fKi8gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG5jb25zdCBub2RlT3BzID0ge1xuICAgIGluc2VydDogKGNoaWxkLCBwYXJlbnQsIGFuY2hvcikgPT4ge1xuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBhbmNob3IgfHwgbnVsbCk7XG4gICAgfSxcbiAgICByZW1vdmU6IGNoaWxkID0+IHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gY2hpbGQucGFyZW50Tm9kZTtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudDogKHRhZywgaXNTVkcsIGlzLCBwcm9wcykgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IGlzU1ZHXG4gICAgICAgICAgICA/IGRvYy5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIHRhZylcbiAgICAgICAgICAgIDogZG9jLmNyZWF0ZUVsZW1lbnQodGFnLCBpcyA/IHsgaXMgfSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmICh0YWcgPT09ICdzZWxlY3QnICYmIHByb3BzICYmIHByb3BzLm11bHRpcGxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCBwcm9wcy5tdWx0aXBsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH0sXG4gICAgY3JlYXRlVGV4dDogdGV4dCA9PiBkb2MuY3JlYXRlVGV4dE5vZGUodGV4dCksXG4gICAgY3JlYXRlQ29tbWVudDogdGV4dCA9PiBkb2MuY3JlYXRlQ29tbWVudCh0ZXh0KSxcbiAgICBzZXRUZXh0OiAobm9kZSwgdGV4dCkgPT4ge1xuICAgICAgICBub2RlLm5vZGVWYWx1ZSA9IHRleHQ7XG4gICAgfSxcbiAgICBzZXRFbGVtZW50VGV4dDogKGVsLCB0ZXh0KSA9PiB7XG4gICAgICAgIGVsLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICB9LFxuICAgIHBhcmVudE5vZGU6IG5vZGUgPT4gbm9kZS5wYXJlbnROb2RlLFxuICAgIG5leHRTaWJsaW5nOiBub2RlID0+IG5vZGUubmV4dFNpYmxpbmcsXG4gICAgcXVlcnlTZWxlY3Rvcjogc2VsZWN0b3IgPT4gZG9jLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpLFxuICAgIHNldFNjb3BlSWQoZWwsIGlkKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShpZCwgJycpO1xuICAgIH0sXG4gICAgLy8gX19VTlNBRkVfX1xuICAgIC8vIFJlYXNvbjogaW5uZXJIVE1MLlxuICAgIC8vIFN0YXRpYyBjb250ZW50IGhlcmUgY2FuIG9ubHkgY29tZSBmcm9tIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAvLyBBcyBsb25nIGFzIHRoZSB1c2VyIG9ubHkgdXNlcyB0cnVzdGVkIHRlbXBsYXRlcywgdGhpcyBpcyBzYWZlLlxuICAgIGluc2VydFN0YXRpY0NvbnRlbnQoY29udGVudCwgcGFyZW50LCBhbmNob3IsIGlzU1ZHLCBzdGFydCwgZW5kKSB7XG4gICAgICAgIC8vIDxwYXJlbnQ+IGJlZm9yZSB8IGZpcnN0IC4uLiBsYXN0IHwgYW5jaG9yIDwvcGFyZW50PlxuICAgICAgICBjb25zdCBiZWZvcmUgPSBhbmNob3IgPyBhbmNob3IucHJldmlvdXNTaWJsaW5nIDogcGFyZW50Lmxhc3RDaGlsZDtcbiAgICAgICAgLy8gIzUzMDggY2FuIG9ubHkgdGFrZSBjYWNoZWQgcGF0aCBpZjpcbiAgICAgICAgLy8gLSBoYXMgYSBzaW5nbGUgcm9vdCBub2RlXG4gICAgICAgIC8vIC0gbmV4dFNpYmxpbmcgaW5mbyBpcyBzdGlsbCBhdmFpbGFibGVcbiAgICAgICAgaWYgKHN0YXJ0ICYmIChzdGFydCA9PT0gZW5kIHx8IHN0YXJ0Lm5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgLy8gY2FjaGVkXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoc3RhcnQuY2xvbmVOb2RlKHRydWUpLCBhbmNob3IpO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydCA9PT0gZW5kIHx8ICEoc3RhcnQgPSBzdGFydC5uZXh0U2libGluZykpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZnJlc2ggaW5zZXJ0XG4gICAgICAgICAgICB0ZW1wbGF0ZUNvbnRhaW5lci5pbm5lckhUTUwgPSBpc1NWRyA/IGA8c3ZnPiR7Y29udGVudH08L3N2Zz5gIDogY29udGVudDtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDb250YWluZXIuY29udGVudDtcbiAgICAgICAgICAgIGlmIChpc1NWRykge1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBvdXRlciBzdmcgd3JhcHBlclxuICAgICAgICAgICAgICAgIGNvbnN0IHdyYXBwZXIgPSB0ZW1wbGF0ZS5maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgIHdoaWxlICh3cmFwcGVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuYXBwZW5kQ2hpbGQod3JhcHBlci5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUucmVtb3ZlQ2hpbGQod3JhcHBlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRlbXBsYXRlLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAvLyBmaXJzdFxuICAgICAgICAgICAgYmVmb3JlID8gYmVmb3JlLm5leHRTaWJsaW5nIDogcGFyZW50LmZpcnN0Q2hpbGQsXG4gICAgICAgICAgICAvLyBsYXN0XG4gICAgICAgICAgICBhbmNob3IgPyBhbmNob3IucHJldmlvdXNTaWJsaW5nIDogcGFyZW50Lmxhc3RDaGlsZFxuICAgICAgICBdO1xuICAgIH1cbn07XG5cbi8vIGNvbXBpbGVyIHNob3VsZCBub3JtYWxpemUgY2xhc3MgKyA6Y2xhc3MgYmluZGluZ3Mgb24gdGhlIHNhbWUgZWxlbWVudFxuLy8gaW50byBhIHNpbmdsZSBiaW5kaW5nIFsnc3RhdGljQ2xhc3MnLCBkeW5hbWljXVxuZnVuY3Rpb24gcGF0Y2hDbGFzcyhlbCwgdmFsdWUsIGlzU1ZHKSB7XG4gICAgLy8gZGlyZWN0bHkgc2V0dGluZyBjbGFzc05hbWUgc2hvdWxkIGJlIGZhc3RlciB0aGFuIHNldEF0dHJpYnV0ZSBpbiB0aGVvcnlcbiAgICAvLyBpZiB0aGlzIGlzIGFuIGVsZW1lbnQgZHVyaW5nIGEgdHJhbnNpdGlvbiwgdGFrZSB0aGUgdGVtcG9yYXJ5IHRyYW5zaXRpb25cbiAgICAvLyBjbGFzc2VzIGludG8gYWNjb3VudC5cbiAgICBjb25zdCB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl92dGM7XG4gICAgaWYgKHRyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlID8gW3ZhbHVlLCAuLi50cmFuc2l0aW9uQ2xhc3Nlc10gOiBbLi4udHJhbnNpdGlvbkNsYXNzZXNdKS5qb2luKCcgJyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNTVkcpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IHZhbHVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcGF0Y2hTdHlsZShlbCwgcHJldiwgbmV4dCkge1xuICAgIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XG4gICAgY29uc3QgaXNDc3NTdHJpbmcgPSBpc1N0cmluZyhuZXh0KTtcbiAgICBpZiAobmV4dCAmJiAhaXNDc3NTdHJpbmcpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmV4dCkge1xuICAgICAgICAgICAgc2V0U3R5bGUoc3R5bGUsIGtleSwgbmV4dFtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldiAmJiAhaXNTdHJpbmcocHJldikpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByZXYpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV4dFtrZXldID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0U3R5bGUoc3R5bGUsIGtleSwgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgY3VycmVudERpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuICAgICAgICBpZiAoaXNDc3NTdHJpbmcpIHtcbiAgICAgICAgICAgIGlmIChwcmV2ICE9PSBuZXh0KSB7XG4gICAgICAgICAgICAgICAgc3R5bGUuY3NzVGV4dCA9IG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJldikge1xuICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluZGljYXRlcyB0aGF0IHRoZSBgZGlzcGxheWAgb2YgdGhlIGVsZW1lbnQgaXMgY29udHJvbGxlZCBieSBgdi1zaG93YCxcbiAgICAgICAgLy8gc28gd2UgYWx3YXlzIGtlZXAgdGhlIGN1cnJlbnQgYGRpc3BsYXlgIHZhbHVlIHJlZ2FyZGxlc3Mgb2YgdGhlIGBzdHlsZWBcbiAgICAgICAgLy8gdmFsdWUsIHRodXMgaGFuZGluZyBvdmVyIGNvbnRyb2wgdG8gYHYtc2hvd2AuXG4gICAgICAgIGlmICgnX3ZvZCcgaW4gZWwpIHtcbiAgICAgICAgICAgIHN0eWxlLmRpc3BsYXkgPSBjdXJyZW50RGlzcGxheTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNvbnN0IGltcG9ydGFudFJFID0gL1xccyohaW1wb3J0YW50JC87XG5mdW5jdGlvbiBzZXRTdHlsZShzdHlsZSwgbmFtZSwgdmFsKSB7XG4gICAgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgICB2YWwuZm9yRWFjaCh2ID0+IHNldFN0eWxlKHN0eWxlLCBuYW1lLCB2KSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAodmFsID09IG51bGwpXG4gICAgICAgICAgICB2YWwgPSAnJztcbiAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aCgnLS0nKSkge1xuICAgICAgICAgICAgLy8gY3VzdG9tIHByb3BlcnR5IGRlZmluaXRpb25cbiAgICAgICAgICAgIHN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwcmVmaXhlZCA9IGF1dG9QcmVmaXgoc3R5bGUsIG5hbWUpO1xuICAgICAgICAgICAgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgICAgICAgICAgICAgIC8vICFpbXBvcnRhbnRcbiAgICAgICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUocHJlZml4ZWQpLCB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgJycpLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHlsZVtwcmVmaXhlZF0gPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuY29uc3QgcHJlZml4Q2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGF1dG9QcmVmaXgoc3R5bGUsIHJhd05hbWUpIHtcbiAgICBjb25zdCBjYWNoZWQgPSBwcmVmaXhDYWNoZVtyYXdOYW1lXTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGxldCBuYW1lID0gY2FtZWxpemUocmF3TmFtZSk7XG4gICAgaWYgKG5hbWUgIT09ICdmaWx0ZXInICYmIG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIChwcmVmaXhDYWNoZVtyYXdOYW1lXSA9IG5hbWUpO1xuICAgIH1cbiAgICBuYW1lID0gY2FwaXRhbGl6ZShuYW1lKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHByZWZpeGVkID0gcHJlZml4ZXNbaV0gKyBuYW1lO1xuICAgICAgICBpZiAocHJlZml4ZWQgaW4gc3R5bGUpIHtcbiAgICAgICAgICAgIHJldHVybiAocHJlZml4Q2FjaGVbcmF3TmFtZV0gPSBwcmVmaXhlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJhd05hbWU7XG59XG5cbmNvbnN0IHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5mdW5jdGlvbiBwYXRjaEF0dHIoZWwsIGtleSwgdmFsdWUsIGlzU1ZHLCBpbnN0YW5jZSkge1xuICAgIGlmIChpc1NWRyAmJiBrZXkuc3RhcnRzV2l0aCgneGxpbms6JykpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleS5zbGljZSg2LCBrZXkubGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gbm90ZSB3ZSBhcmUgb25seSBjaGVja2luZyBib29sZWFuIGF0dHJpYnV0ZXMgdGhhdCBkb24ndCBoYXZlIGFcbiAgICAgICAgLy8gY29ycmVzcG9uZGluZyBkb20gcHJvcCBvZiB0aGUgc2FtZSBuYW1lIGhlcmUuXG4gICAgICAgIGNvbnN0IGlzQm9vbGVhbiA9IGlzU3BlY2lhbEJvb2xlYW5BdHRyKGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IChpc0Jvb2xlYW4gJiYgIWluY2x1ZGVCb29sZWFuQXR0cih2YWx1ZSkpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGlzQm9vbGVhbiA/ICcnIDogdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBfX1VOU0FGRV9fXG4vLyBmdW5jdGlvbnMuIFRoZSB1c2VyIGlzIHJlc3BvbnNpYmxlIGZvciB1c2luZyB0aGVtIHdpdGggb25seSB0cnVzdGVkIGNvbnRlbnQuXG5mdW5jdGlvbiBwYXRjaERPTVByb3AoZWwsIGtleSwgdmFsdWUsIFxuLy8gdGhlIGZvbGxvd2luZyBhcmdzIGFyZSBwYXNzZWQgb25seSBkdWUgdG8gcG90ZW50aWFsIGlubmVySFRNTC90ZXh0Q29udGVudFxuLy8gb3ZlcnJpZGluZyBleGlzdGluZyBWTm9kZXMsIGluIHdoaWNoIGNhc2UgdGhlIG9sZCB0cmVlIG11c3QgYmUgcHJvcGVybHlcbi8vIHVubW91bnRlZC5cbnByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKSB7XG4gICAgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgfHwga2V5ID09PSAndGV4dENvbnRlbnQnKSB7XG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsW2tleV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmXG4gICAgICAgIGVsLnRhZ05hbWUgIT09ICdQUk9HUkVTUycgJiZcbiAgICAgICAgLy8gY3VzdG9tIGVsZW1lbnRzIG1heSB1c2UgX3ZhbHVlIGludGVybmFsbHlcbiAgICAgICAgIWVsLnRhZ05hbWUuaW5jbHVkZXMoJy0nKSkge1xuICAgICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkLlxuICAgICAgICBlbC5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICAgICAgaWYgKGVsLnZhbHVlICE9PSBuZXdWYWx1ZSB8fFxuICAgICAgICAgICAgLy8gIzQ5NTY6IGFsd2F5cyBzZXQgZm9yIE9QVElPTiBlbGVtZW50cyBiZWNhdXNlIGl0cyB2YWx1ZSBmYWxscyBiYWNrIHRvXG4gICAgICAgICAgICAvLyB0ZXh0Q29udGVudCBpZiBubyB2YWx1ZSBhdHRyaWJ1dGUgaXMgcHJlc2VudC4gQW5kIHNldHRpbmcgLnZhbHVlIGZvclxuICAgICAgICAgICAgLy8gT1BUSU9OIGhhcyBubyBzaWRlIGVmZmVjdFxuICAgICAgICAgICAgZWwudGFnTmFtZSA9PT0gJ09QVElPTicpIHtcbiAgICAgICAgICAgIGVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG5lZWRSZW1vdmUgPSBmYWxzZTtcbiAgICBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiBlbFtrZXldO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAvLyBlLmcuIDxzZWxlY3QgbXVsdGlwbGU+IGNvbXBpbGVzIHRvIHsgbXVsdGlwbGU6ICcnIH1cbiAgICAgICAgICAgIHZhbHVlID0gaW5jbHVkZUJvb2xlYW5BdHRyKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PSBudWxsICYmIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyBlLmcuIDxkaXYgOmlkPVwibnVsbFwiPlxuICAgICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgICAgIG5lZWRSZW1vdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAvLyBlLmcuIDxpbWcgOndpZHRoPVwibnVsbFwiPlxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICAgICAgbmVlZFJlbW92ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gc29tZSBwcm9wZXJ0aWVzIHBlcmZvcm0gdmFsdWUgdmFsaWRhdGlvbiBhbmQgdGhyb3csXG4gICAgLy8gc29tZSBwcm9wZXJ0aWVzIGhhcyBnZXR0ZXIsIG5vIHNldHRlciwgd2lsbCBlcnJvciBpbiAndXNlIHN0cmljdCdcbiAgICAvLyBlZy4gPHNlbGVjdCA6dHlwZT1cIm51bGxcIj48L3NlbGVjdD4gPHNlbGVjdCA6d2lsbFZhbGlkYXRlPVwibnVsbFwiPjwvc2VsZWN0PlxuICAgIHRyeSB7XG4gICAgICAgIGVsW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZG8gbm90IHdhcm4gaWYgdmFsdWUgaXMgYXV0by1jb2VyY2VkIGZyb20gbnVsbGlzaCB2YWx1ZXNcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhbmVlZFJlbW92ZSkge1xuICAgICAgICAgICAgd2FybihgRmFpbGVkIHNldHRpbmcgcHJvcCBcIiR7a2V5fVwiIG9uIDwke2VsLnRhZ05hbWUudG9Mb3dlckNhc2UoKX0+OiBgICtcbiAgICAgICAgICAgICAgICBgdmFsdWUgJHt2YWx1ZX0gaXMgaW52YWxpZC5gLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZWVkUmVtb3ZlICYmIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xufVxuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGVsLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHBhdGNoRXZlbnQoZWwsIHJhd05hbWUsIHByZXZWYWx1ZSwgbmV4dFZhbHVlLCBpbnN0YW5jZSA9IG51bGwpIHtcbiAgICAvLyB2ZWkgPSB2dWUgZXZlbnQgaW52b2tlcnNcbiAgICBjb25zdCBpbnZva2VycyA9IGVsLl92ZWkgfHwgKGVsLl92ZWkgPSB7fSk7XG4gICAgY29uc3QgZXhpc3RpbmdJbnZva2VyID0gaW52b2tlcnNbcmF3TmFtZV07XG4gICAgaWYgKG5leHRWYWx1ZSAmJiBleGlzdGluZ0ludm9rZXIpIHtcbiAgICAgICAgLy8gcGF0Y2hcbiAgICAgICAgZXhpc3RpbmdJbnZva2VyLnZhbHVlID0gbmV4dFZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgW25hbWUsIG9wdGlvbnNdID0gcGFyc2VOYW1lKHJhd05hbWUpO1xuICAgICAgICBpZiAobmV4dFZhbHVlKSB7XG4gICAgICAgICAgICAvLyBhZGRcbiAgICAgICAgICAgIGNvbnN0IGludm9rZXIgPSAoaW52b2tlcnNbcmF3TmFtZV0gPSBjcmVhdGVJbnZva2VyKG5leHRWYWx1ZSwgaW5zdGFuY2UpKTtcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGludm9rZXIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV4aXN0aW5nSW52b2tlcikge1xuICAgICAgICAgICAgLy8gcmVtb3ZlXG4gICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKGVsLCBuYW1lLCBleGlzdGluZ0ludm9rZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaW52b2tlcnNbcmF3TmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBvcHRpb25zTW9kaWZpZXJSRSA9IC8oPzpPbmNlfFBhc3NpdmV8Q2FwdHVyZSkkLztcbmZ1bmN0aW9uIHBhcnNlTmFtZShuYW1lKSB7XG4gICAgbGV0IG9wdGlvbnM7XG4gICAgaWYgKG9wdGlvbnNNb2RpZmllclJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICBsZXQgbTtcbiAgICAgICAgd2hpbGUgKChtID0gbmFtZS5tYXRjaChvcHRpb25zTW9kaWZpZXJSRSkpKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgwLCBuYW1lLmxlbmd0aCAtIG1bMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgIG9wdGlvbnNbbVswXS50b0xvd2VyQ2FzZSgpXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXZlbnQgPSBuYW1lWzJdID09PSAnOicgPyBuYW1lLnNsaWNlKDMpIDogaHlwaGVuYXRlKG5hbWUuc2xpY2UoMikpO1xuICAgIHJldHVybiBbZXZlbnQsIG9wdGlvbnNdO1xufVxuLy8gVG8gYXZvaWQgdGhlIG92ZXJoZWFkIG9mIHJlcGVhdGVkbHkgY2FsbGluZyBEYXRlLm5vdygpLCB3ZSBjYWNoZVxuLy8gYW5kIHVzZSB0aGUgc2FtZSB0aW1lc3RhbXAgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnMgYXR0YWNoZWQgaW4gdGhlIHNhbWUgdGljay5cbmxldCBjYWNoZWROb3cgPSAwO1xuY29uc3QgcCA9IC8qI19fUFVSRV9fKi8gUHJvbWlzZS5yZXNvbHZlKCk7XG5jb25zdCBnZXROb3cgPSAoKSA9PiBjYWNoZWROb3cgfHwgKHAudGhlbigoKSA9PiAoY2FjaGVkTm93ID0gMCkpLCAoY2FjaGVkTm93ID0gRGF0ZS5ub3coKSkpO1xuZnVuY3Rpb24gY3JlYXRlSW52b2tlcihpbml0aWFsVmFsdWUsIGluc3RhbmNlKSB7XG4gICAgY29uc3QgaW52b2tlciA9IChlKSA9PiB7XG4gICAgICAgIC8vIGFzeW5jIGVkZ2UgY2FzZSB2dWVqcy92dWUjNjU2NlxuICAgICAgICAvLyBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAgICAgICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xuICAgICAgICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi5cbiAgICAgICAgLy8gdGhpcyBubyBsb25nZXIgaGFwcGVucyBmb3IgdGVtcGxhdGVzIGluIFZ1ZSAzLCBidXQgY291bGQgc3RpbGwgYmVcbiAgICAgICAgLy8gdGhlb3JldGljYWxseSBwb3NzaWJsZSBmb3IgaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gICAgICAgIC8vIHRoZSBzb2x1dGlvbjogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAgICAgICAvLyBhbmQgYWxzbyBhdHRhY2ggdGhlIHRpbWVzdGFtcCB0byBhbnkgZXZlbnQgdGhhdCB3YXMgaGFuZGxlZCBieSB2dWVcbiAgICAgICAgLy8gZm9yIHRoZSBmaXJzdCB0aW1lICh0byBhdm9pZCBpbmNvbnNpc3RlbnQgZXZlbnQgdGltZXN0YW1wIGltcGxlbWVudGF0aW9uc1xuICAgICAgICAvLyBvciBldmVudHMgZmlyZWQgZnJvbSBpZnJhbWVzLCBlLmcuICMyNTEzKVxuICAgICAgICAvLyBUaGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcbiAgICAgICAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxuICAgICAgICBpZiAoIWUuX3Z0cykge1xuICAgICAgICAgICAgZS5fdnRzID0gRGF0ZS5ub3coKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlLl92dHMgPD0gaW52b2tlci5hdHRhY2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKHBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKGUsIGludm9rZXIudmFsdWUpLCBpbnN0YW5jZSwgNSAvKiBFcnJvckNvZGVzLk5BVElWRV9FVkVOVF9IQU5ETEVSICovLCBbZV0pO1xuICAgIH07XG4gICAgaW52b2tlci52YWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICBpbnZva2VyLmF0dGFjaGVkID0gZ2V0Tm93KCk7XG4gICAgcmV0dXJuIGludm9rZXI7XG59XG5mdW5jdGlvbiBwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbihlLCB2YWx1ZSkge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBjb25zdCBvcmlnaW5hbFN0b3AgPSBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICBvcmlnaW5hbFN0b3AuY2FsbChlKTtcbiAgICAgICAgICAgIGUuX3N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdmFsdWUubWFwKGZuID0+IChlKSA9PiAhZS5fc3RvcHBlZCAmJiBmbiAmJiBmbihlKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuXG5jb25zdCBuYXRpdmVPblJFID0gL15vblthLXpdLztcbmNvbnN0IHBhdGNoUHJvcCA9IChlbCwga2V5LCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaXNTVkcgPSBmYWxzZSwgcHJldkNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pID0+IHtcbiAgICBpZiAoa2V5ID09PSAnY2xhc3MnKSB7XG4gICAgICAgIHBhdGNoQ2xhc3MoZWwsIG5leHRWYWx1ZSwgaXNTVkcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgcGF0Y2hTdHlsZShlbCwgcHJldlZhbHVlLCBuZXh0VmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09uKGtleSkpIHtcbiAgICAgICAgLy8gaWdub3JlIHYtbW9kZWwgbGlzdGVuZXJzXG4gICAgICAgIGlmICghaXNNb2RlbExpc3RlbmVyKGtleSkpIHtcbiAgICAgICAgICAgIHBhdGNoRXZlbnQoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIHBhcmVudENvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5WzBdID09PSAnLidcbiAgICAgICAgPyAoKGtleSA9IGtleS5zbGljZSgxKSksIHRydWUpXG4gICAgICAgIDoga2V5WzBdID09PSAnXidcbiAgICAgICAgICAgID8gKChrZXkgPSBrZXkuc2xpY2UoMSkpLCBmYWxzZSlcbiAgICAgICAgICAgIDogc2hvdWxkU2V0QXNQcm9wKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcpKSB7XG4gICAgICAgIHBhdGNoRE9NUHJvcChlbCwga2V5LCBuZXh0VmFsdWUsIHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgPGlucHV0IHYtbW9kZWwgdHlwZT1cImNoZWNrYm94XCI+IHdpdGhcbiAgICAgICAgLy8gOnRydWUtdmFsdWUgJiA6ZmFsc2UtdmFsdWVcbiAgICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgZG9tIHByb3BlcnRpZXMgc2luY2Ugbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZVxuICAgICAgICAvLyBzdHJpbmdpZmllZC5cbiAgICAgICAgaWYgKGtleSA9PT0gJ3RydWUtdmFsdWUnKSB7XG4gICAgICAgICAgICBlbC5fdHJ1ZVZhbHVlID0gbmV4dFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ2ZhbHNlLXZhbHVlJykge1xuICAgICAgICAgICAgZWwuX2ZhbHNlVmFsdWUgPSBuZXh0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcGF0Y2hBdHRyKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcpO1xuICAgIH1cbn07XG5mdW5jdGlvbiBzaG91bGRTZXRBc1Byb3AoZWwsIGtleSwgdmFsdWUsIGlzU1ZHKSB7XG4gICAgaWYgKGlzU1ZHKSB7XG4gICAgICAgIC8vIG1vc3Qga2V5cyBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGUgb24gc3ZnIGVsZW1lbnRzIHRvIHdvcmtcbiAgICAgICAgLy8gLi4uZXhjZXB0IGlubmVySFRNTCAmIHRleHRDb250ZW50XG4gICAgICAgIGlmIChrZXkgPT09ICdpbm5lckhUTUwnIHx8IGtleSA9PT0gJ3RleHRDb250ZW50Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3IgbmF0aXZlIG9uY2xpY2sgd2l0aCBmdW5jdGlvbiB2YWx1ZXNcbiAgICAgICAgaWYgKGtleSBpbiBlbCAmJiBuYXRpdmVPblJFLnRlc3Qoa2V5KSAmJiBpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyB0aGVzZSBhcmUgZW51bWVyYXRlZCBhdHRycywgaG93ZXZlciB0aGVpciBjb3JyZXNwb25kaW5nIERPTSBwcm9wZXJ0aWVzXG4gICAgLy8gYXJlIGFjdHVhbGx5IGJvb2xlYW5zIC0gdGhpcyBsZWFkcyB0byBzZXR0aW5nIGl0IHdpdGggYSBzdHJpbmcgXCJmYWxzZVwiXG4gICAgLy8gdmFsdWUgbGVhZGluZyBpdCB0byBiZSBjb2VyY2VkIHRvIGB0cnVlYCwgc28gd2UgbmVlZCB0byBhbHdheXMgdHJlYXRcbiAgICAvLyB0aGVtIGFzIGF0dHJpYnV0ZXMuXG4gICAgLy8gTm90ZSB0aGF0IGBjb250ZW50RWRpdGFibGVgIGRvZXNuJ3QgaGF2ZSB0aGlzIHByb2JsZW06IGl0cyBET01cbiAgICAvLyBwcm9wZXJ0eSBpcyBhbHNvIGVudW1lcmF0ZWQgc3RyaW5nIHZhbHVlcy5cbiAgICBpZiAoa2V5ID09PSAnc3BlbGxjaGVjaycgfHwga2V5ID09PSAnZHJhZ2dhYmxlJyB8fCBrZXkgPT09ICd0cmFuc2xhdGUnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gIzE3ODcsICMyODQwIGZvcm0gcHJvcGVydHkgb24gZm9ybSBlbGVtZW50cyBpcyByZWFkb25seSBhbmQgbXVzdCBiZSBzZXQgYXNcbiAgICAvLyBhdHRyaWJ1dGUuXG4gICAgaWYgKGtleSA9PT0gJ2Zvcm0nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gIzE1MjYgPGlucHV0IGxpc3Q+IG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZVxuICAgIGlmIChrZXkgPT09ICdsaXN0JyAmJiBlbC50YWdOYW1lID09PSAnSU5QVVQnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gIzI3NjYgPHRleHRhcmVhIHR5cGU+IG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZVxuICAgIGlmIChrZXkgPT09ICd0eXBlJyAmJiBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gbmF0aXZlIG9uY2xpY2sgd2l0aCBzdHJpbmcgdmFsdWUsIG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZVxuICAgIGlmIChuYXRpdmVPblJFLnRlc3Qoa2V5KSAmJiBpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4ga2V5IGluIGVsO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVDdXN0b21FbGVtZW50KG9wdGlvbnMsIGh5ZHJhdGUpIHtcbiAgICBjb25zdCBDb21wID0gZGVmaW5lQ29tcG9uZW50KG9wdGlvbnMpO1xuICAgIGNsYXNzIFZ1ZUN1c3RvbUVsZW1lbnQgZXh0ZW5kcyBWdWVFbGVtZW50IHtcbiAgICAgICAgY29uc3RydWN0b3IoaW5pdGlhbFByb3BzKSB7XG4gICAgICAgICAgICBzdXBlcihDb21wLCBpbml0aWFsUHJvcHMsIGh5ZHJhdGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFZ1ZUN1c3RvbUVsZW1lbnQuZGVmID0gQ29tcDtcbiAgICByZXR1cm4gVnVlQ3VzdG9tRWxlbWVudDtcbn1cbmNvbnN0IGRlZmluZVNTUkN1c3RvbUVsZW1lbnQgPSAoKG9wdGlvbnMpID0+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIGRlZmluZUN1c3RvbUVsZW1lbnQob3B0aW9ucywgaHlkcmF0ZSk7XG59KTtcbmNvbnN0IEJhc2VDbGFzcyA9ICh0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gSFRNTEVsZW1lbnQgOiBjbGFzcyB7XG59KTtcbmNsYXNzIFZ1ZUVsZW1lbnQgZXh0ZW5kcyBCYXNlQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKF9kZWYsIF9wcm9wcyA9IHt9LCBoeWRyYXRlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2RlZiA9IF9kZWY7XG4gICAgICAgIHRoaXMuX3Byb3BzID0gX3Byb3BzO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9yZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9udW1iZXJQcm9wcyA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLnNoYWRvd1Jvb3QgJiYgaHlkcmF0ZSkge1xuICAgICAgICAgICAgaHlkcmF0ZSh0aGlzLl9jcmVhdGVWTm9kZSgpLCB0aGlzLnNoYWRvd1Jvb3QpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBDdXN0b20gZWxlbWVudCBoYXMgcHJlLXJlbmRlcmVkIGRlY2xhcmF0aXZlIHNoYWRvdyByb290IGJ1dCBpcyBub3QgYCArXG4gICAgICAgICAgICAgICAgICAgIGBkZWZpbmVkIGFzIGh5ZHJhdGFibGUuIFVzZSBcXGBkZWZpbmVTU1JDdXN0b21FbGVtZW50XFxgLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVEZWYoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5fY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyKG51bGwsIHRoaXMuc2hhZG93Um9vdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogcmVzb2x2ZSBpbm5lciBjb21wb25lbnQgZGVmaW5pdGlvbiAoaGFuZGxlIHBvc3NpYmxlIGFzeW5jIGNvbXBvbmVudClcbiAgICAgKi9cbiAgICBfcmVzb2x2ZURlZigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Jlc29sdmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAvLyBzZXQgaW5pdGlhbCBhdHRyc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fc2V0QXR0cih0aGlzLmF0dHJpYnV0ZXNbaV0ubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2F0Y2ggZnV0dXJlIGF0dHIgY2hhbmdlc1xuICAgICAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihtdXRhdGlvbnMgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBtIG9mIG11dGF0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldEF0dHIobS5hdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkub2JzZXJ2ZSh0aGlzLCB7IGF0dHJpYnV0ZXM6IHRydWUgfSk7XG4gICAgICAgIGNvbnN0IHJlc29sdmUgPSAoZGVmKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHByb3BzLCBzdHlsZXMgfSA9IGRlZjtcbiAgICAgICAgICAgIGNvbnN0IGhhc09wdGlvbnMgPSAhaXNBcnJheShwcm9wcyk7XG4gICAgICAgICAgICBjb25zdCByYXdLZXlzID0gcHJvcHMgPyAoaGFzT3B0aW9ucyA/IE9iamVjdC5rZXlzKHByb3BzKSA6IHByb3BzKSA6IFtdO1xuICAgICAgICAgICAgLy8gY2FzdCBOdW1iZXItdHlwZSBwcm9wcyBzZXQgYmVmb3JlIHJlc29sdmVcbiAgICAgICAgICAgIGxldCBudW1iZXJQcm9wcztcbiAgICAgICAgICAgIGlmIChoYXNPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fcHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0ID0gcHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdCA9PT0gTnVtYmVyIHx8IChvcHQgJiYgb3B0LnR5cGUgPT09IE51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb3BzW2tleV0gPSB0b051bWJlcih0aGlzLl9wcm9wc1trZXldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChudW1iZXJQcm9wcyB8fCAobnVtYmVyUHJvcHMgPSBPYmplY3QuY3JlYXRlKG51bGwpKSlba2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9udW1iZXJQcm9wcyA9IG51bWJlclByb3BzO1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIHByb3BzIHNldCBwcmUtdXBncmFkZSBvciBjb25uZWN0XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzKSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXlbMF0gIT09ICdfJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRQcm9wKGtleSwgdGhpc1trZXldLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZGVmaW5pbmcgZ2V0dGVyL3NldHRlcnMgb24gcHJvdG90eXBlXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiByYXdLZXlzLm1hcChjYW1lbGl6ZSQxKSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFByb3Aoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UHJvcChrZXksIHZhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFwcGx5IENTU1xuICAgICAgICAgICAgdGhpcy5fYXBwbHlTdHlsZXMoc3R5bGVzKTtcbiAgICAgICAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgYXN5bmNEZWYgPSB0aGlzLl9kZWYuX19hc3luY0xvYWRlcjtcbiAgICAgICAgaWYgKGFzeW5jRGVmKSB7XG4gICAgICAgICAgICBhc3luY0RlZigpLnRoZW4ocmVzb2x2ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKHRoaXMuX2RlZik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3NldEF0dHIoa2V5KSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKGtleSk7XG4gICAgICAgIGlmICh0aGlzLl9udW1iZXJQcm9wcyAmJiB0aGlzLl9udW1iZXJQcm9wc1trZXldKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZXRQcm9wKGNhbWVsaXplJDEoa2V5KSwgdmFsdWUsIGZhbHNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX2dldFByb3Aoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9wc1trZXldO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBfc2V0UHJvcChrZXksIHZhbCwgc2hvdWxkUmVmbGVjdCA9IHRydWUsIHNob3VsZFVwZGF0ZSA9IHRydWUpIHtcbiAgICAgICAgaWYgKHZhbCAhPT0gdGhpcy5fcHJvcHNba2V5XSkge1xuICAgICAgICAgICAgdGhpcy5fcHJvcHNba2V5XSA9IHZhbDtcbiAgICAgICAgICAgIGlmIChzaG91bGRVcGRhdGUgJiYgdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHJlZmxlY3RcbiAgICAgICAgICAgIGlmIChzaG91bGRSZWZsZWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShoeXBoZW5hdGUoa2V5KSwgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShoeXBoZW5hdGUoa2V5KSwgdmFsICsgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKGh5cGhlbmF0ZShrZXkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3VwZGF0ZSgpIHtcbiAgICAgICAgcmVuZGVyKHRoaXMuX2NyZWF0ZVZOb2RlKCksIHRoaXMuc2hhZG93Um9vdCk7XG4gICAgfVxuICAgIF9jcmVhdGVWTm9kZSgpIHtcbiAgICAgICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZSh0aGlzLl9kZWYsIGV4dGVuZCh7fSwgdGhpcy5fcHJvcHMpKTtcbiAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xuICAgICAgICAgICAgdm5vZGUuY2UgPSBpbnN0YW5jZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc0NFID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvLyBITVJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmNlUmVsb2FkID0gbmV3U3R5bGVzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsd2F5cyByZXNldCBzdHlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdHlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHlsZXMuZm9yRWFjaChzID0+IHRoaXMuc2hhZG93Um9vdC5yZW1vdmVDaGlsZChzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3R5bGVzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlcyhuZXdTdHlsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBhc3luYyBjb21wb25lbnQsIGNlUmVsb2FkIGlzIGNhbGxlZCBmcm9tIHRoZSBpbm5lclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50IHNvIG5vIG5lZWQgdG8gcmVsb2FkIHRoZSBhc3luYyB3cmFwcGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2RlZi5fX2FzeW5jTG9hZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVsb2FkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpbnRlcmNlcHQgZW1pdFxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmVtaXQgPSAoZXZlbnQsIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChldmVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiBhcmdzXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vIGxvY2F0ZSBuZWFyZXN0IFZ1ZSBjdXN0b20gZWxlbWVudCBwYXJlbnQgZm9yIHByb3ZpZGUvaW5qZWN0XG4gICAgICAgICAgICAgICAgbGV0IHBhcmVudCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgd2hpbGUgKChwYXJlbnQgPVxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQgJiYgKHBhcmVudC5wYXJlbnROb2RlIHx8IHBhcmVudC5ob3N0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudCBpbnN0YW5jZW9mIFZ1ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnBhcmVudCA9IHBhcmVudC5faW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgIH1cbiAgICBfYXBwbHlTdHlsZXMoc3R5bGVzKSB7XG4gICAgICAgIGlmIChzdHlsZXMpIHtcbiAgICAgICAgICAgIHN0eWxlcy5mb3JFYWNoKGNzcyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgcy50ZXh0Q29udGVudCA9IGNzcztcbiAgICAgICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQocyk7XG4gICAgICAgICAgICAgICAgLy8gcmVjb3JkIGZvciBITVJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLl9zdHlsZXMgfHwgKHRoaXMuX3N0eWxlcyA9IFtdKSkucHVzaChzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gdXNlQ3NzTW9kdWxlKG5hbWUgPSAnJHN0eWxlJykge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAge1xuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgICAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybihgdXNlQ3NzTW9kdWxlIG11c3QgYmUgY2FsbGVkIGluc2lkZSBzZXR1cCgpYCk7XG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfT0JKO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vZHVsZXMgPSBpbnN0YW5jZS50eXBlLl9fY3NzTW9kdWxlcztcbiAgICAgICAgaWYgKCFtb2R1bGVzKSB7XG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybihgQ3VycmVudCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIENTUyBtb2R1bGVzIGluamVjdGVkLmApO1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX09CSjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtb2QgPSBtb2R1bGVzW25hbWVdO1xuICAgICAgICBpZiAoIW1vZCkge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgd2FybihgQ3VycmVudCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIENTUyBtb2R1bGUgbmFtZWQgXCIke25hbWV9XCIuYCk7XG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfT0JKO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtb2Q7XG4gICAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBTRkMncyBDU1MgdmFyaWFibGUgaW5qZWN0aW9uIGZlYXR1cmUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB1c2VDc3NWYXJzKGdldHRlcikge1xuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgd2FybihgdXNlQ3NzVmFycyBpcyBjYWxsZWQgd2l0aG91dCBjdXJyZW50IGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UuYCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2V0VmFycyA9ICgpID0+IHNldFZhcnNPblZOb2RlKGluc3RhbmNlLnN1YlRyZWUsIGdldHRlcihpbnN0YW5jZS5wcm94eSkpO1xuICAgIHdhdGNoUG9zdEVmZmVjdChzZXRWYXJzKTtcbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgICBjb25zdCBvYiA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHNldFZhcnMpO1xuICAgICAgICBvYi5vYnNlcnZlKGluc3RhbmNlLnN1YlRyZWUuZWwucGFyZW50Tm9kZSwgeyBjaGlsZExpc3Q6IHRydWUgfSk7XG4gICAgICAgIG9uVW5tb3VudGVkKCgpID0+IG9iLmRpc2Nvbm5lY3QoKSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzZXRWYXJzT25WTm9kZSh2bm9kZSwgdmFycykge1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqLykge1xuICAgICAgICBjb25zdCBzdXNwZW5zZSA9IHZub2RlLnN1c3BlbnNlO1xuICAgICAgICB2bm9kZSA9IHN1c3BlbnNlLmFjdGl2ZUJyYW5jaDtcbiAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggJiYgIXN1c3BlbnNlLmlzSHlkcmF0aW5nKSB7XG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFZhcnNPblZOb2RlKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCwgdmFycyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBkcmlsbCBkb3duIEhPQ3MgdW50aWwgaXQncyBhIG5vbi1jb21wb25lbnQgdm5vZGVcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50KSB7XG4gICAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50LnN1YlRyZWU7XG4gICAgfVxuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxIC8qIFNoYXBlRmxhZ3MuRUxFTUVOVCAqLyAmJiB2bm9kZS5lbCkge1xuICAgICAgICBzZXRWYXJzT25Ob2RlKHZub2RlLmVsLCB2YXJzKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodm5vZGUudHlwZSA9PT0gRnJhZ21lbnQpIHtcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4uZm9yRWFjaChjID0+IHNldFZhcnNPblZOb2RlKGMsIHZhcnMpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodm5vZGUudHlwZSA9PT0gU3RhdGljKSB7XG4gICAgICAgIGxldCB7IGVsLCBhbmNob3IgfSA9IHZub2RlO1xuICAgICAgICB3aGlsZSAoZWwpIHtcbiAgICAgICAgICAgIHNldFZhcnNPbk5vZGUoZWwsIHZhcnMpO1xuICAgICAgICAgICAgaWYgKGVsID09PSBhbmNob3IpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBlbCA9IGVsLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0VmFyc09uTm9kZShlbCwgdmFycykge1xuICAgIGlmIChlbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGVsLnN0eWxlO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YXJzKSB7XG4gICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShgLS0ke2tleX1gLCB2YXJzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xuY29uc3QgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG4vLyBET00gVHJhbnNpdGlvbiBpcyBhIGhpZ2hlci1vcmRlci1jb21wb25lbnQgYmFzZWQgb24gdGhlIHBsYXRmb3JtLWFnbm9zdGljXG4vLyBiYXNlIFRyYW5zaXRpb24gY29tcG9uZW50LCB3aXRoIERPTS1zcGVjaWZpYyBsb2dpYy5cbmNvbnN0IFRyYW5zaXRpb24gPSAocHJvcHMsIHsgc2xvdHMgfSkgPT4gaChCYXNlVHJhbnNpdGlvbiwgcmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyhwcm9wcyksIHNsb3RzKTtcblRyYW5zaXRpb24uZGlzcGxheU5hbWUgPSAnVHJhbnNpdGlvbic7XG5jb25zdCBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzID0ge1xuICAgIG5hbWU6IFN0cmluZyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgY3NzOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIGR1cmF0aW9uOiBbU3RyaW5nLCBOdW1iZXIsIE9iamVjdF0sXG4gICAgZW50ZXJGcm9tQ2xhc3M6IFN0cmluZyxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gICAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gICAgYXBwZWFyRnJvbUNsYXNzOiBTdHJpbmcsXG4gICAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gICAgbGVhdmVGcm9tQ2xhc3M6IFN0cmluZyxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gICAgbGVhdmVUb0NsYXNzOiBTdHJpbmdcbn07XG5jb25zdCBUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzID0gKFRyYW5zaXRpb24ucHJvcHMgPVxuICAgIC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCBCYXNlVHJhbnNpdGlvbi5wcm9wcywgRE9NVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycykpO1xuLyoqXG4gKiAjMzIyNyBJbmNvbWluZyBob29rcyBtYXkgYmUgbWVyZ2VkIGludG8gYXJyYXlzIHdoZW4gd3JhcHBpbmcgVHJhbnNpdGlvblxuICogd2l0aCBjdXN0b20gSE9Dcy5cbiAqL1xuY29uc3QgY2FsbEhvb2sgPSAoaG9vaywgYXJncyA9IFtdKSA9PiB7XG4gICAgaWYgKGlzQXJyYXkoaG9vaykpIHtcbiAgICAgICAgaG9vay5mb3JFYWNoKGggPT4gaCguLi5hcmdzKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGhvb2spIHtcbiAgICAgICAgaG9vayguLi5hcmdzKTtcbiAgICB9XG59O1xuLyoqXG4gKiBDaGVjayBpZiBhIGhvb2sgZXhwZWN0cyBhIGNhbGxiYWNrICgybmQgYXJnKSwgd2hpY2ggbWVhbnMgdGhlIHVzZXJcbiAqIGludGVuZHMgdG8gZXhwbGljaXRseSBjb250cm9sIHRoZSBlbmQgb2YgdGhlIHRyYW5zaXRpb24uXG4gKi9cbmNvbnN0IGhhc0V4cGxpY2l0Q2FsbGJhY2sgPSAoaG9vaykgPT4ge1xuICAgIHJldHVybiBob29rXG4gICAgICAgID8gaXNBcnJheShob29rKVxuICAgICAgICAgICAgPyBob29rLnNvbWUoaCA9PiBoLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICA6IGhvb2subGVuZ3RoID4gMVxuICAgICAgICA6IGZhbHNlO1xufTtcbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uUHJvcHMocmF3UHJvcHMpIHtcbiAgICBjb25zdCBiYXNlUHJvcHMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdQcm9wcykge1xuICAgICAgICBpZiAoIShrZXkgaW4gRE9NVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycykpIHtcbiAgICAgICAgICAgIGJhc2VQcm9wc1trZXldID0gcmF3UHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocmF3UHJvcHMuY3NzID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gYmFzZVByb3BzO1xuICAgIH1cbiAgICBjb25zdCB7IG5hbWUgPSAndicsIHR5cGUsIGR1cmF0aW9uLCBlbnRlckZyb21DbGFzcyA9IGAke25hbWV9LWVudGVyLWZyb21gLCBlbnRlckFjdGl2ZUNsYXNzID0gYCR7bmFtZX0tZW50ZXItYWN0aXZlYCwgZW50ZXJUb0NsYXNzID0gYCR7bmFtZX0tZW50ZXItdG9gLCBhcHBlYXJGcm9tQ2xhc3MgPSBlbnRlckZyb21DbGFzcywgYXBwZWFyQWN0aXZlQ2xhc3MgPSBlbnRlckFjdGl2ZUNsYXNzLCBhcHBlYXJUb0NsYXNzID0gZW50ZXJUb0NsYXNzLCBsZWF2ZUZyb21DbGFzcyA9IGAke25hbWV9LWxlYXZlLWZyb21gLCBsZWF2ZUFjdGl2ZUNsYXNzID0gYCR7bmFtZX0tbGVhdmUtYWN0aXZlYCwgbGVhdmVUb0NsYXNzID0gYCR7bmFtZX0tbGVhdmUtdG9gIH0gPSByYXdQcm9wcztcbiAgICBjb25zdCBkdXJhdGlvbnMgPSBub3JtYWxpemVEdXJhdGlvbihkdXJhdGlvbik7XG4gICAgY29uc3QgZW50ZXJEdXJhdGlvbiA9IGR1cmF0aW9ucyAmJiBkdXJhdGlvbnNbMF07XG4gICAgY29uc3QgbGVhdmVEdXJhdGlvbiA9IGR1cmF0aW9ucyAmJiBkdXJhdGlvbnNbMV07XG4gICAgY29uc3QgeyBvbkJlZm9yZUVudGVyLCBvbkVudGVyLCBvbkVudGVyQ2FuY2VsbGVkLCBvbkxlYXZlLCBvbkxlYXZlQ2FuY2VsbGVkLCBvbkJlZm9yZUFwcGVhciA9IG9uQmVmb3JlRW50ZXIsIG9uQXBwZWFyID0gb25FbnRlciwgb25BcHBlYXJDYW5jZWxsZWQgPSBvbkVudGVyQ2FuY2VsbGVkIH0gPSBiYXNlUHJvcHM7XG4gICAgY29uc3QgZmluaXNoRW50ZXIgPSAoZWwsIGlzQXBwZWFyLCBkb25lKSA9PiB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJUb0NsYXNzIDogZW50ZXJUb0NsYXNzKTtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhckFjdGl2ZUNsYXNzIDogZW50ZXJBY3RpdmVDbGFzcyk7XG4gICAgICAgIGRvbmUgJiYgZG9uZSgpO1xuICAgIH07XG4gICAgY29uc3QgZmluaXNoTGVhdmUgPSAoZWwsIGRvbmUpID0+IHtcbiAgICAgICAgZWwuX2lzTGVhdmluZyA9IGZhbHNlO1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlRnJvbUNsYXNzKTtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgICBkb25lICYmIGRvbmUoKTtcbiAgICB9O1xuICAgIGNvbnN0IG1ha2VFbnRlckhvb2sgPSAoaXNBcHBlYXIpID0+IHtcbiAgICAgICAgcmV0dXJuIChlbCwgZG9uZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaG9vayA9IGlzQXBwZWFyID8gb25BcHBlYXIgOiBvbkVudGVyO1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZSA9ICgpID0+IGZpbmlzaEVudGVyKGVsLCBpc0FwcGVhciwgZG9uZSk7XG4gICAgICAgICAgICBjYWxsSG9vayhob29rLCBbZWwsIHJlc29sdmVdKTtcbiAgICAgICAgICAgIG5leHRGcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhckZyb21DbGFzcyA6IGVudGVyRnJvbUNsYXNzKTtcbiAgICAgICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcyk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNFeHBsaWNpdENhbGxiYWNrKGhvb2spKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgZW50ZXJEdXJhdGlvbiwgcmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gZXh0ZW5kKGJhc2VQcm9wcywge1xuICAgICAgICBvbkJlZm9yZUVudGVyKGVsKSB7XG4gICAgICAgICAgICBjYWxsSG9vayhvbkJlZm9yZUVudGVyLCBbZWxdKTtcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgZW50ZXJGcm9tQ2xhc3MpO1xuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBlbnRlckFjdGl2ZUNsYXNzKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25CZWZvcmVBcHBlYXIoZWwpIHtcbiAgICAgICAgICAgIGNhbGxIb29rKG9uQmVmb3JlQXBwZWFyLCBbZWxdKTtcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYXBwZWFyRnJvbUNsYXNzKTtcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYXBwZWFyQWN0aXZlQ2xhc3MpO1xuICAgICAgICB9LFxuICAgICAgICBvbkVudGVyOiBtYWtlRW50ZXJIb29rKGZhbHNlKSxcbiAgICAgICAgb25BcHBlYXI6IG1ha2VFbnRlckhvb2sodHJ1ZSksXG4gICAgICAgIG9uTGVhdmUoZWwsIGRvbmUpIHtcbiAgICAgICAgICAgIGVsLl9pc0xlYXZpbmcgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZSA9ICgpID0+IGZpbmlzaExlYXZlKGVsLCBkb25lKTtcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVGcm9tQ2xhc3MpO1xuICAgICAgICAgICAgLy8gZm9yY2UgcmVmbG93IHNvICotbGVhdmUtZnJvbSBjbGFzc2VzIGltbWVkaWF0ZWx5IHRha2UgZWZmZWN0ICgjMjU5MylcbiAgICAgICAgICAgIGZvcmNlUmVmbG93KCk7XG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgICAgICAgbmV4dEZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWVsLl9pc0xlYXZpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FuY2VsbGVkXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUZyb21DbGFzcyk7XG4gICAgICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgICAgICAgIGlmICghaGFzRXhwbGljaXRDYWxsYmFjayhvbkxlYXZlKSkge1xuICAgICAgICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGxlYXZlRHVyYXRpb24sIHJlc29sdmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FsbEhvb2sob25MZWF2ZSwgW2VsLCByZXNvbHZlXSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRW50ZXJDYW5jZWxsZWQoZWwpIHtcbiAgICAgICAgICAgIGZpbmlzaEVudGVyKGVsLCBmYWxzZSk7XG4gICAgICAgICAgICBjYWxsSG9vayhvbkVudGVyQ2FuY2VsbGVkLCBbZWxdKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25BcHBlYXJDYW5jZWxsZWQoZWwpIHtcbiAgICAgICAgICAgIGZpbmlzaEVudGVyKGVsLCB0cnVlKTtcbiAgICAgICAgICAgIGNhbGxIb29rKG9uQXBwZWFyQ2FuY2VsbGVkLCBbZWxdKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25MZWF2ZUNhbmNlbGxlZChlbCkge1xuICAgICAgICAgICAgZmluaXNoTGVhdmUoZWwpO1xuICAgICAgICAgICAgY2FsbEhvb2sob25MZWF2ZUNhbmNlbGxlZCwgW2VsXSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUR1cmF0aW9uKGR1cmF0aW9uKSB7XG4gICAgaWYgKGR1cmF0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KGR1cmF0aW9uKSkge1xuICAgICAgICByZXR1cm4gW051bWJlck9mKGR1cmF0aW9uLmVudGVyKSwgTnVtYmVyT2YoZHVyYXRpb24ubGVhdmUpXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG4gPSBOdW1iZXJPZihkdXJhdGlvbik7XG4gICAgICAgIHJldHVybiBbbiwgbl07XG4gICAgfVxufVxuZnVuY3Rpb24gTnVtYmVyT2YodmFsKSB7XG4gICAgY29uc3QgcmVzID0gdG9OdW1iZXIodmFsKTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKVxuICAgICAgICB2YWxpZGF0ZUR1cmF0aW9uKHJlcyk7XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlRHVyYXRpb24odmFsKSB7XG4gICAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHdhcm4oYDx0cmFuc2l0aW9uPiBleHBsaWNpdCBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBgICtcbiAgICAgICAgICAgIGBnb3QgJHtKU09OLnN0cmluZ2lmeSh2YWwpfS5gKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgICAgICB3YXJuKGA8dHJhbnNpdGlvbj4gZXhwbGljaXQgZHVyYXRpb24gaXMgTmFOIC0gYCArXG4gICAgICAgICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgY2xzKSB7XG4gICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgZWwuY2xhc3NMaXN0LmFkZChjKSk7XG4gICAgKGVsLl92dGMgfHxcbiAgICAgICAgKGVsLl92dGMgPSBuZXcgU2V0KCkpKS5hZGQoY2xzKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgY2xzKSB7XG4gICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgZWwuY2xhc3NMaXN0LnJlbW92ZShjKSk7XG4gICAgY29uc3QgeyBfdnRjIH0gPSBlbDtcbiAgICBpZiAoX3Z0Yykge1xuICAgICAgICBfdnRjLmRlbGV0ZShjbHMpO1xuICAgICAgICBpZiAoIV92dGMuc2l6ZSkge1xuICAgICAgICAgICAgZWwuX3Z0YyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIG5leHRGcmFtZShjYikge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYik7XG4gICAgfSk7XG59XG5sZXQgZW5kSWQgPSAwO1xuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzKGVsLCBleHBlY3RlZFR5cGUsIGV4cGxpY2l0VGltZW91dCwgcmVzb2x2ZSkge1xuICAgIGNvbnN0IGlkID0gKGVsLl9lbmRJZCA9ICsrZW5kSWQpO1xuICAgIGNvbnN0IHJlc29sdmVJZk5vdFN0YWxlID0gKCkgPT4ge1xuICAgICAgICBpZiAoaWQgPT09IGVsLl9lbmRJZCkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBpZiAoZXhwbGljaXRUaW1lb3V0KSB7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmVJZk5vdFN0YWxlLCBleHBsaWNpdFRpbWVvdXQpO1xuICAgIH1cbiAgICBjb25zdCB7IHR5cGUsIHRpbWVvdXQsIHByb3BDb3VudCB9ID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgfVxuICAgIGNvbnN0IGVuZEV2ZW50ID0gdHlwZSArICdlbmQnO1xuICAgIGxldCBlbmRlZCA9IDA7XG4gICAgY29uc3QgZW5kID0gKCkgPT4ge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGVuZEV2ZW50LCBvbkVuZCk7XG4gICAgICAgIHJlc29sdmVJZk5vdFN0YWxlKCk7XG4gICAgfTtcbiAgICBjb25zdCBvbkVuZCA9IChlKSA9PiB7XG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gZWwgJiYgKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgICAgIGVuZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICAgICAgICBlbmQoKTtcbiAgICAgICAgfVxuICAgIH0sIHRpbWVvdXQgKyAxKTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGVuZEV2ZW50LCBvbkVuZCk7XG59XG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gICAgY29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgIC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgICBjb25zdCBnZXRTdHlsZVByb3BlcnRpZXMgPSAoa2V5KSA9PiAoc3R5bGVzW2tleV0gfHwgJycpLnNwbGl0KCcsICcpO1xuICAgIGNvbnN0IHRyYW5zaXRpb25EZWxheXMgPSBnZXRTdHlsZVByb3BlcnRpZXMoVFJBTlNJVElPTiArICdEZWxheScpO1xuICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbnMgPSBnZXRTdHlsZVByb3BlcnRpZXMoVFJBTlNJVElPTiArICdEdXJhdGlvbicpO1xuICAgIGNvbnN0IHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgICBjb25zdCBhbmltYXRpb25EZWxheXMgPSBnZXRTdHlsZVByb3BlcnRpZXMoQU5JTUFUSU9OICsgJ0RlbGF5Jyk7XG4gICAgY29uc3QgYW5pbWF0aW9uRHVyYXRpb25zID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKEFOSU1BVElPTiArICdEdXJhdGlvbicpO1xuICAgIGNvbnN0IGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcbiAgICBsZXQgdHlwZSA9IG51bGw7XG4gICAgbGV0IHRpbWVvdXQgPSAwO1xuICAgIGxldCBwcm9wQ291bnQgPSAwO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICAgICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICAgICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICAgICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgICAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgICAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICAgICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgICAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgICAgIHR5cGUgPVxuICAgICAgICAgICAgdGltZW91dCA+IDBcbiAgICAgICAgICAgICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICAgICAgICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgICAgICAgICAgICAgOiBBTklNQVRJT05cbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgICAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICAgICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgICAgIDogMDtcbiAgICB9XG4gICAgY29uc3QgaGFzVHJhbnNmb3JtID0gdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgICAgICAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvLnRlc3Qoc3R5bGVzW1RSQU5TSVRJT04gKyAnUHJvcGVydHknXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdGltZW91dCxcbiAgICAgICAgcHJvcENvdW50LFxuICAgICAgICBoYXNUcmFuc2Zvcm1cbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0VGltZW91dChkZWxheXMsIGR1cmF0aW9ucykge1xuICAgIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgICAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gICAgfVxuICAgIHJldHVybiBNYXRoLm1heCguLi5kdXJhdGlvbnMubWFwKChkLCBpKSA9PiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pKSk7XG59XG4vLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlclxuLy8gbnVtYmVycyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duXG4vLyAoaS5lLiBhY3RpbmcgYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xuZnVuY3Rpb24gdG9NcyhzKSB7XG4gICAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwO1xufVxuLy8gc3luY2hyb25vdXNseSBmb3JjZSBsYXlvdXQgdG8gcHV0IGVsZW1lbnRzIGludG8gYSBjZXJ0YWluIHN0YXRlXG5mdW5jdGlvbiBmb3JjZVJlZmxvdygpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XG59XG5cbmNvbnN0IHBvc2l0aW9uTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IG5ld1Bvc2l0aW9uTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IFRyYW5zaXRpb25Hcm91cEltcGwgPSB7XG4gICAgbmFtZTogJ1RyYW5zaXRpb25Hcm91cCcsXG4gICAgcHJvcHM6IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCBUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLCB7XG4gICAgICAgIHRhZzogU3RyaW5nLFxuICAgICAgICBtb3ZlQ2xhc3M6IFN0cmluZ1xuICAgIH0pLFxuICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB1c2VUcmFuc2l0aW9uU3RhdGUoKTtcbiAgICAgICAgbGV0IHByZXZDaGlsZHJlbjtcbiAgICAgICAgbGV0IGNoaWxkcmVuO1xuICAgICAgICBvblVwZGF0ZWQoKCkgPT4ge1xuICAgICAgICAgICAgLy8gY2hpbGRyZW4gaXMgZ3VhcmFudGVlZCB0byBleGlzdCBhZnRlciBpbml0aWFsIHJlbmRlclxuICAgICAgICAgICAgaWYgKCFwcmV2Q2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbW92ZUNsYXNzID0gcHJvcHMubW92ZUNsYXNzIHx8IGAke3Byb3BzLm5hbWUgfHwgJ3YnfS1tb3ZlYDtcbiAgICAgICAgICAgIGlmICghaGFzQ1NTVHJhbnNmb3JtKHByZXZDaGlsZHJlblswXS5lbCwgaW5zdGFuY2Uudm5vZGUuZWwsIG1vdmVDbGFzcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAgICAgICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgICAgICAgICAgcHJldkNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgICAgICAgICAgcHJldkNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgICAgICAgICAgY29uc3QgbW92ZWRDaGlsZHJlbiA9IHByZXZDaGlsZHJlbi5maWx0ZXIoYXBwbHlUcmFuc2xhdGlvbik7XG4gICAgICAgICAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAgICAgICAgIGZvcmNlUmVmbG93KCk7XG4gICAgICAgICAgICBtb3ZlZENoaWxkcmVuLmZvckVhY2goYyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSBjLmVsO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XG4gICAgICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgICAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IHN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNiID0gKGVsLl9tb3ZlQ2IgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgY2IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgY2IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmF3UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XG4gICAgICAgICAgICBjb25zdCBjc3NUcmFuc2l0aW9uUHJvcHMgPSByZXNvbHZlVHJhbnNpdGlvblByb3BzKHJhd1Byb3BzKTtcbiAgICAgICAgICAgIGxldCB0YWcgPSByYXdQcm9wcy50YWcgfHwgRnJhZ21lbnQ7XG4gICAgICAgICAgICBwcmV2Q2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCA/IGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihzbG90cy5kZWZhdWx0KCkpIDogW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQua2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKGNoaWxkLCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKGNoaWxkLCBjc3NUcmFuc2l0aW9uUHJvcHMsIHN0YXRlLCBpbnN0YW5jZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgPFRyYW5zaXRpb25Hcm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBwcmV2Q2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhjaGlsZCwgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhjaGlsZCwgY3NzVHJhbnNpdGlvblByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpKTtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25NYXAuc2V0KGNoaWxkLCBjaGlsZC5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHRhZywgbnVsbCwgY2hpbGRyZW4pO1xuICAgICAgICB9O1xuICAgIH1cbn07XG5jb25zdCBUcmFuc2l0aW9uR3JvdXAgPSBUcmFuc2l0aW9uR3JvdXBJbXBsO1xuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMoYykge1xuICAgIGNvbnN0IGVsID0gYy5lbDtcbiAgICBpZiAoZWwuX21vdmVDYikge1xuICAgICAgICBlbC5fbW92ZUNiKCk7XG4gICAgfVxuICAgIGlmIChlbC5fZW50ZXJDYikge1xuICAgICAgICBlbC5fZW50ZXJDYigpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uKGMpIHtcbiAgICBuZXdQb3NpdGlvbk1hcC5zZXQoYywgYy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XG59XG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uKGMpIHtcbiAgICBjb25zdCBvbGRQb3MgPSBwb3NpdGlvbk1hcC5nZXQoYyk7XG4gICAgY29uc3QgbmV3UG9zID0gbmV3UG9zaXRpb25NYXAuZ2V0KGMpO1xuICAgIGNvbnN0IGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgICBjb25zdCBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICAgIGlmIChkeCB8fCBkeSkge1xuICAgICAgICBjb25zdCBzID0gYy5lbC5zdHlsZTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLndlYmtpdFRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHtkeH1weCwke2R5fXB4KWA7XG4gICAgICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFzQ1NTVHJhbnNmb3JtKGVsLCByb290LCBtb3ZlQ2xhc3MpIHtcbiAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbiAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcbiAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4gICAgLy8gaXMgYXBwbGllZC5cbiAgICBjb25zdCBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xuICAgIGlmIChlbC5fdnRjKSB7XG4gICAgICAgIGVsLl92dGMuZm9yRWFjaChjbHMgPT4ge1xuICAgICAgICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgY2xvbmUuY2xhc3NMaXN0LnJlbW92ZShjKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtb3ZlQ2xhc3Muc3BsaXQoL1xccysvKS5mb3JFYWNoKGMgPT4gYyAmJiBjbG9uZS5jbGFzc0xpc3QuYWRkKGMpKTtcbiAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IChyb290Lm5vZGVUeXBlID09PSAxID8gcm9vdCA6IHJvb3QucGFyZW50Tm9kZSk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICBjb25zdCB7IGhhc1RyYW5zZm9ybSB9ID0gZ2V0VHJhbnNpdGlvbkluZm8oY2xvbmUpO1xuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgcmV0dXJuIGhhc1RyYW5zZm9ybTtcbn1cblxuY29uc3QgZ2V0TW9kZWxBc3NpZ25lciA9ICh2bm9kZSkgPT4ge1xuICAgIGNvbnN0IGZuID0gdm5vZGUucHJvcHNbJ29uVXBkYXRlOm1vZGVsVmFsdWUnXSB8fFxuICAgICAgICAoZmFsc2UgKTtcbiAgICByZXR1cm4gaXNBcnJheShmbikgPyB2YWx1ZSA9PiBpbnZva2VBcnJheUZucyhmbiwgdmFsdWUpIDogZm47XG59O1xuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0KGUpIHtcbiAgICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZChlKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgaWYgKHRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgdGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICAgICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2lucHV0JykpO1xuICAgIH1cbn1cbi8vIFdlIGFyZSBleHBvcnRpbmcgdGhlIHYtbW9kZWwgcnVudGltZSBkaXJlY3RseSBhcyB2bm9kZSBob29rcyBzbyB0aGF0IGl0IGNhblxuLy8gYmUgdHJlZS1zaGFrZW4gaW4gY2FzZSB2LW1vZGVsIGlzIG5ldmVyIHVzZWQuXG5jb25zdCB2TW9kZWxUZXh0ID0ge1xuICAgIGNyZWF0ZWQoZWwsIHsgbW9kaWZpZXJzOiB7IGxhenksIHRyaW0sIG51bWJlciB9IH0sIHZub2RlKSB7XG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICAgICAgY29uc3QgY2FzdFRvTnVtYmVyID0gbnVtYmVyIHx8ICh2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy50eXBlID09PSAnbnVtYmVyJyk7XG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIGxhenkgPyAnY2hhbmdlJyA6ICdpbnB1dCcsIGUgPT4ge1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNvbXBvc2luZylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBsZXQgZG9tVmFsdWUgPSBlbC52YWx1ZTtcbiAgICAgICAgICAgIGlmICh0cmltKSB7XG4gICAgICAgICAgICAgICAgZG9tVmFsdWUgPSBkb21WYWx1ZS50cmltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FzdFRvTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZG9tVmFsdWUgPSB0b051bWJlcihkb21WYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbC5fYXNzaWduKGRvbVZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0cmltKSB7XG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGVsLnZhbHVlID0gZWwudmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFsYXp5KSB7XG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cbiAgICAgICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcbiAgICAgICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyBzZXQgdmFsdWUgb24gbW91bnRlZCBzbyBpdCdzIGFmdGVyIG1pbi9tYXggZm9yIHR5cGU9XCJyYW5nZVwiXG4gICAgbW91bnRlZChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgICAgIGVsLnZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG4gICAgfSxcbiAgICBiZWZvcmVVcGRhdGUoZWwsIHsgdmFsdWUsIG1vZGlmaWVyczogeyBsYXp5LCB0cmltLCBudW1iZXIgfSB9LCB2bm9kZSkge1xuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgICAgIC8vIGF2b2lkIGNsZWFyaW5nIHVucmVzb2x2ZWQgdGV4dC4gIzIzMDJcbiAgICAgICAgaWYgKGVsLmNvbXBvc2luZylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGVsICYmIGVsLnR5cGUgIT09ICdyYW5nZScpIHtcbiAgICAgICAgICAgIGlmIChsYXp5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRyaW0gJiYgZWwudmFsdWUudHJpbSgpID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgobnVtYmVyIHx8IGVsLnR5cGUgPT09ICdudW1iZXInKSAmJiB0b051bWJlcihlbC52YWx1ZSkgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG4gICAgICAgIGlmIChlbC52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3Qgdk1vZGVsQ2hlY2tib3ggPSB7XG4gICAgLy8gIzQwOTYgYXJyYXkgY2hlY2tib3hlcyBuZWVkIHRvIGJlIGRlZXAgdHJhdmVyc2VkXG4gICAgZGVlcDogdHJ1ZSxcbiAgICBjcmVhdGVkKGVsLCBfLCB2bm9kZSkge1xuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtb2RlbFZhbHVlID0gZWwuX21vZGVsVmFsdWU7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50VmFsdWUgPSBnZXRWYWx1ZShlbCk7XG4gICAgICAgICAgICBjb25zdCBjaGVja2VkID0gZWwuY2hlY2tlZDtcbiAgICAgICAgICAgIGNvbnN0IGFzc2lnbiA9IGVsLl9hc3NpZ247XG4gICAgICAgICAgICBpZiAoaXNBcnJheShtb2RlbFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbG9vc2VJbmRleE9mKG1vZGVsVmFsdWUsIGVsZW1lbnRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZm91bmQgPSBpbmRleCAhPT0gLTE7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQgJiYgIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbihtb2RlbFZhbHVlLmNvbmNhdChlbGVtZW50VmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWNoZWNrZWQgJiYgZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBbLi4ubW9kZWxWYWx1ZV07XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbihmaWx0ZXJlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNTZXQobW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9uZWQgPSBuZXcgU2V0KG1vZGVsVmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lZC5hZGQoZWxlbWVudFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lZC5kZWxldGUoZWxlbWVudFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXNzaWduKGNsb25lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhc3NpZ24oZ2V0Q2hlY2tib3hWYWx1ZShlbCwgY2hlY2tlZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIC8vIHNldCBpbml0aWFsIGNoZWNrZWQgb24gbW91bnQgdG8gd2FpdCBmb3IgdHJ1ZS12YWx1ZS9mYWxzZS12YWx1ZVxuICAgIG1vdW50ZWQ6IHNldENoZWNrZWQsXG4gICAgYmVmb3JlVXBkYXRlKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgICAgIHNldENoZWNrZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gc2V0Q2hlY2tlZChlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgdm5vZGUpIHtcbiAgICBlbC5fbW9kZWxWYWx1ZSA9IHZhbHVlO1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VJbmRleE9mKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSkgPiAtMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIGVsLmNoZWNrZWQgPSB2YWx1ZS5oYXModm5vZGUucHJvcHMudmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgZWwuY2hlY2tlZCA9IGxvb3NlRXF1YWwodmFsdWUsIGdldENoZWNrYm94VmFsdWUoZWwsIHRydWUpKTtcbiAgICB9XG59XG5jb25zdCB2TW9kZWxSYWRpbyA9IHtcbiAgICBjcmVhdGVkKGVsLCB7IHZhbHVlIH0sIHZub2RlKSB7XG4gICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSk7XG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGVsLl9hc3NpZ24oZ2V0VmFsdWUoZWwpKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBiZWZvcmVVcGRhdGUoZWwsIHsgdmFsdWUsIG9sZFZhbHVlIH0sIHZub2RlKSB7XG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgZWwuY2hlY2tlZCA9IGxvb3NlRXF1YWwodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5jb25zdCB2TW9kZWxTZWxlY3QgPSB7XG4gICAgLy8gPHNlbGVjdCBtdWx0aXBsZT4gdmFsdWUgbmVlZCB0byBiZSBkZWVwIHRyYXZlcnNlZFxuICAgIGRlZXA6IHRydWUsXG4gICAgY3JlYXRlZChlbCwgeyB2YWx1ZSwgbW9kaWZpZXJzOiB7IG51bWJlciB9IH0sIHZub2RlKSB7XG4gICAgICAgIGNvbnN0IGlzU2V0TW9kZWwgPSBpc1NldCh2YWx1ZSk7XG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgICAgICAgICAgICAgICAuY2FsbChlbC5vcHRpb25zLCAobykgPT4gby5zZWxlY3RlZClcbiAgICAgICAgICAgICAgICAubWFwKChvKSA9PiBudW1iZXIgPyB0b051bWJlcihnZXRWYWx1ZShvKSkgOiBnZXRWYWx1ZShvKSk7XG4gICAgICAgICAgICBlbC5fYXNzaWduKGVsLm11bHRpcGxlXG4gICAgICAgICAgICAgICAgPyBpc1NldE1vZGVsXG4gICAgICAgICAgICAgICAgICAgID8gbmV3IFNldChzZWxlY3RlZFZhbClcbiAgICAgICAgICAgICAgICAgICAgOiBzZWxlY3RlZFZhbFxuICAgICAgICAgICAgICAgIDogc2VsZWN0ZWRWYWxbMF0pO1xuICAgICAgICB9KTtcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgIH0sXG4gICAgLy8gc2V0IHZhbHVlIGluIG1vdW50ZWQgJiB1cGRhdGVkIGJlY2F1c2UgPHNlbGVjdD4gcmVsaWVzIG9uIGl0cyBjaGlsZHJlblxuICAgIC8vIDxvcHRpb24+cy5cbiAgICBtb3VudGVkKGVsLCB7IHZhbHVlIH0pIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKTtcbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZShlbCwgX2JpbmRpbmcsIHZub2RlKSB7XG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICB9LFxuICAgIHVwZGF0ZWQoZWwsIHsgdmFsdWUgfSkge1xuICAgICAgICBzZXRTZWxlY3RlZChlbCwgdmFsdWUpO1xuICAgIH1cbn07XG5mdW5jdGlvbiBzZXRTZWxlY3RlZChlbCwgdmFsdWUpIHtcbiAgICBjb25zdCBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gICAgaWYgKGlzTXVsdGlwbGUgJiYgIWlzQXJyYXkodmFsdWUpICYmICFpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICB3YXJuKGA8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw+IGV4cGVjdHMgYW4gQXJyYXkgb3IgU2V0IHZhbHVlIGZvciBpdHMgYmluZGluZywgYCArXG4gICAgICAgICAgICAgICAgYGJ1dCBnb3QgJHtPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKX0uYCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgICAgICBjb25zdCBvcHRpb25WYWx1ZSA9IGdldFZhbHVlKG9wdGlvbik7XG4gICAgICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIG9wdGlvblZhbHVlKSA+IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdmFsdWUuaGFzKG9wdGlvblZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKVxuICAgICAgICAgICAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc011bHRpcGxlICYmIGVsLnNlbGVjdGVkSW5kZXggIT09IC0xKSB7XG4gICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICB9XG59XG4vLyByZXRyaWV2ZSByYXcgdmFsdWUgc2V0IHZpYSA6dmFsdWUgYmluZGluZ3NcbmZ1bmN0aW9uIGdldFZhbHVlKGVsKSB7XG4gICAgcmV0dXJuICdfdmFsdWUnIGluIGVsID8gZWwuX3ZhbHVlIDogZWwudmFsdWU7XG59XG4vLyByZXRyaWV2ZSByYXcgdmFsdWUgZm9yIHRydWUtdmFsdWUgYW5kIGZhbHNlLXZhbHVlIHNldCB2aWEgOnRydWUtdmFsdWUgb3IgOmZhbHNlLXZhbHVlIGJpbmRpbmdzXG5mdW5jdGlvbiBnZXRDaGVja2JveFZhbHVlKGVsLCBjaGVja2VkKSB7XG4gICAgY29uc3Qga2V5ID0gY2hlY2tlZCA/ICdfdHJ1ZVZhbHVlJyA6ICdfZmFsc2VWYWx1ZSc7XG4gICAgcmV0dXJuIGtleSBpbiBlbCA/IGVsW2tleV0gOiBjaGVja2VkO1xufVxuY29uc3Qgdk1vZGVsRHluYW1pYyA9IHtcbiAgICBjcmVhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgbnVsbCwgJ2NyZWF0ZWQnKTtcbiAgICB9LFxuICAgIG1vdW50ZWQoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBudWxsLCAnbW91bnRlZCcpO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKSB7XG4gICAgICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsICdiZWZvcmVVcGRhdGUnKTtcbiAgICB9LFxuICAgIHVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUpIHtcbiAgICAgICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gcmVzb2x2ZUR5bmFtaWNNb2RlbCh0YWdOYW1lLCB0eXBlKSB7XG4gICAgc3dpdGNoICh0YWdOYW1lKSB7XG4gICAgICAgIGNhc2UgJ1NFTEVDVCc6XG4gICAgICAgICAgICByZXR1cm4gdk1vZGVsU2VsZWN0O1xuICAgICAgICBjYXNlICdURVhUQVJFQSc6XG4gICAgICAgICAgICByZXR1cm4gdk1vZGVsVGV4dDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZNb2RlbENoZWNrYm94O1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JhZGlvJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZNb2RlbFJhZGlvO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2TW9kZWxUZXh0O1xuICAgICAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsIGhvb2spIHtcbiAgICBjb25zdCBtb2RlbFRvVXNlID0gcmVzb2x2ZUR5bmFtaWNNb2RlbChlbC50YWdOYW1lLCB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy50eXBlKTtcbiAgICBjb25zdCBmbiA9IG1vZGVsVG9Vc2VbaG9va107XG4gICAgZm4gJiYgZm4oZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUpO1xufVxuLy8gU1NSIHZub2RlIHRyYW5zZm9ybXMsIG9ubHkgdXNlZCB3aGVuIHVzZXIgaW5jbHVkZXMgY2xpZW50LW9yaWVudGVkIHJlbmRlclxuLy8gZnVuY3Rpb24gaW4gU1NSXG5mdW5jdGlvbiBpbml0Vk1vZGVsRm9yU1NSKCkge1xuICAgIHZNb2RlbFRleHQuZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9KSA9PiAoeyB2YWx1ZSB9KTtcbiAgICB2TW9kZWxSYWRpby5nZXRTU1JQcm9wcyA9ICh7IHZhbHVlIH0sIHZub2RlKSA9PiB7XG4gICAgICAgIGlmICh2bm9kZS5wcm9wcyAmJiBsb29zZUVxdWFsKHZub2RlLnByb3BzLnZhbHVlLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGNoZWNrZWQ6IHRydWUgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdk1vZGVsQ2hlY2tib3guZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9LCB2bm9kZSkgPT4ge1xuICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICh2bm9kZS5wcm9wcyAmJiBsb29zZUluZGV4T2YodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHZub2RlLnByb3BzICYmIHZhbHVlLmhhcyh2bm9kZS5wcm9wcy52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBjaGVja2VkOiB0cnVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGNoZWNrZWQ6IHRydWUgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdk1vZGVsRHluYW1pYy5nZXRTU1JQcm9wcyA9IChiaW5kaW5nLCB2bm9kZSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHZub2RlLnR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW9kZWxUb1VzZSA9IHJlc29sdmVEeW5hbWljTW9kZWwoXG4gICAgICAgIC8vIHJlc29sdmVEeW5hbWljTW9kZWwgZXhwZWN0cyBhbiB1cHBlcmNhc2UgdGFnIG5hbWUsIGJ1dCB2bm9kZS50eXBlIGlzIGxvd2VyY2FzZVxuICAgICAgICB2bm9kZS50eXBlLnRvVXBwZXJDYXNlKCksIHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLnR5cGUpO1xuICAgICAgICBpZiAobW9kZWxUb1VzZS5nZXRTU1JQcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIG1vZGVsVG9Vc2UuZ2V0U1NSUHJvcHMoYmluZGluZywgdm5vZGUpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuY29uc3Qgc3lzdGVtTW9kaWZpZXJzID0gWydjdHJsJywgJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJ107XG5jb25zdCBtb2RpZmllckd1YXJkcyA9IHtcbiAgICBzdG9wOiBlID0+IGUuc3RvcFByb3BhZ2F0aW9uKCksXG4gICAgcHJldmVudDogZSA9PiBlLnByZXZlbnREZWZhdWx0KCksXG4gICAgc2VsZjogZSA9PiBlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0LFxuICAgIGN0cmw6IGUgPT4gIWUuY3RybEtleSxcbiAgICBzaGlmdDogZSA9PiAhZS5zaGlmdEtleSxcbiAgICBhbHQ6IGUgPT4gIWUuYWx0S2V5LFxuICAgIG1ldGE6IGUgPT4gIWUubWV0YUtleSxcbiAgICBsZWZ0OiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDAsXG4gICAgbWlkZGxlOiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDEsXG4gICAgcmlnaHQ6IGUgPT4gJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiAhPT0gMixcbiAgICBleGFjdDogKGUsIG1vZGlmaWVycykgPT4gc3lzdGVtTW9kaWZpZXJzLnNvbWUobSA9PiBlW2Ake219S2V5YF0gJiYgIW1vZGlmaWVycy5pbmNsdWRlcyhtKSlcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHdpdGhNb2RpZmllcnMgPSAoZm4sIG1vZGlmaWVycykgPT4ge1xuICAgIHJldHVybiAoZXZlbnQsIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGd1YXJkID0gbW9kaWZpZXJHdWFyZHNbbW9kaWZpZXJzW2ldXTtcbiAgICAgICAgICAgIGlmIChndWFyZCAmJiBndWFyZChldmVudCwgbW9kaWZpZXJzKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuKGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9O1xufTtcbi8vIEtlcHQgZm9yIDIueCBjb21wYXQuXG4vLyBOb3RlOiBJRTExIGNvbXBhdCBmb3IgYHNwYWNlYmFyYCBhbmQgYGRlbGAgaXMgcmVtb3ZlZCBmb3Igbm93LlxuY29uc3Qga2V5TmFtZXMgPSB7XG4gICAgZXNjOiAnZXNjYXBlJyxcbiAgICBzcGFjZTogJyAnLFxuICAgIHVwOiAnYXJyb3ctdXAnLFxuICAgIGxlZnQ6ICdhcnJvdy1sZWZ0JyxcbiAgICByaWdodDogJ2Fycm93LXJpZ2h0JyxcbiAgICBkb3duOiAnYXJyb3ctZG93bicsXG4gICAgZGVsZXRlOiAnYmFja3NwYWNlJ1xufTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgd2l0aEtleXMgPSAoZm4sIG1vZGlmaWVycykgPT4ge1xuICAgIHJldHVybiAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCEoJ2tleScgaW4gZXZlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXZlbnRLZXkgPSBoeXBoZW5hdGUoZXZlbnQua2V5KTtcbiAgICAgICAgaWYgKG1vZGlmaWVycy5zb21lKGsgPT4gayA9PT0gZXZlbnRLZXkgfHwga2V5TmFtZXNba10gPT09IGV2ZW50S2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuXG5jb25zdCB2U2hvdyA9IHtcbiAgICBiZWZvcmVNb3VudChlbCwgeyB2YWx1ZSB9LCB7IHRyYW5zaXRpb24gfSkge1xuICAgICAgICBlbC5fdm9kID0gZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgICAgICBpZiAodHJhbnNpdGlvbiAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXREaXNwbGF5KGVsLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1vdW50ZWQoZWwsIHsgdmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcbiAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB1cGRhdGVkKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB7IHRyYW5zaXRpb24gfSkge1xuICAgICAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcbiAgICAgICAgICAgICAgICBzZXREaXNwbGF5KGVsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmVudGVyKGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24ubGVhdmUoZWwsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2V0RGlzcGxheShlbCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0RGlzcGxheShlbCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVVbm1vdW50KGVsLCB7IHZhbHVlIH0pIHtcbiAgICAgICAgc2V0RGlzcGxheShlbCwgdmFsdWUpO1xuICAgIH1cbn07XG5mdW5jdGlvbiBzZXREaXNwbGF5KGVsLCB2YWx1ZSkge1xuICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl92b2QgOiAnbm9uZSc7XG59XG4vLyBTU1Igdm5vZGUgdHJhbnNmb3Jtcywgb25seSB1c2VkIHdoZW4gdXNlciBpbmNsdWRlcyBjbGllbnQtb3JpZW50ZWQgcmVuZGVyXG4vLyBmdW5jdGlvbiBpbiBTU1JcbmZ1bmN0aW9uIGluaXRWU2hvd0ZvclNTUigpIHtcbiAgICB2U2hvdy5nZXRTU1JQcm9wcyA9ICh7IHZhbHVlIH0pID0+IHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3R5bGU6IHsgZGlzcGxheTogJ25vbmUnIH0gfTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmNvbnN0IHJlbmRlcmVyT3B0aW9ucyA9IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHsgcGF0Y2hQcm9wIH0sIG5vZGVPcHMpO1xuLy8gbGF6eSBjcmVhdGUgdGhlIHJlbmRlcmVyIC0gdGhpcyBtYWtlcyBjb3JlIHJlbmRlcmVyIGxvZ2ljIHRyZWUtc2hha2FibGVcbi8vIGluIGNhc2UgdGhlIHVzZXIgb25seSBpbXBvcnRzIHJlYWN0aXZpdHkgdXRpbGl0aWVzIGZyb20gVnVlLlxubGV0IHJlbmRlcmVyO1xubGV0IGVuYWJsZWRIeWRyYXRpb24gPSBmYWxzZTtcbmZ1bmN0aW9uIGVuc3VyZVJlbmRlcmVyKCkge1xuICAgIHJldHVybiAocmVuZGVyZXIgfHxcbiAgICAgICAgKHJlbmRlcmVyID0gY3JlYXRlUmVuZGVyZXIocmVuZGVyZXJPcHRpb25zKSkpO1xufVxuZnVuY3Rpb24gZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKSB7XG4gICAgcmVuZGVyZXIgPSBlbmFibGVkSHlkcmF0aW9uXG4gICAgICAgID8gcmVuZGVyZXJcbiAgICAgICAgOiBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcihyZW5kZXJlck9wdGlvbnMpO1xuICAgIGVuYWJsZWRIeWRyYXRpb24gPSB0cnVlO1xuICAgIHJldHVybiByZW5kZXJlcjtcbn1cbi8vIHVzZSBleHBsaWNpdCB0eXBlIGNhc3RzIGhlcmUgdG8gYXZvaWQgaW1wb3J0KCkgY2FsbHMgaW4gcm9sbGVkLXVwIGQudHNcbmNvbnN0IHJlbmRlciA9ICgoLi4uYXJncykgPT4ge1xuICAgIGVuc3VyZVJlbmRlcmVyKCkucmVuZGVyKC4uLmFyZ3MpO1xufSk7XG5jb25zdCBoeWRyYXRlID0gKCguLi5hcmdzKSA9PiB7XG4gICAgZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKS5oeWRyYXRlKC4uLmFyZ3MpO1xufSk7XG5jb25zdCBjcmVhdGVBcHAgPSAoKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBhcHAgPSBlbnN1cmVSZW5kZXJlcigpLmNyZWF0ZUFwcCguLi5hcmdzKTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGluamVjdE5hdGl2ZVRhZ0NoZWNrKGFwcCk7XG4gICAgICAgIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCk7XG4gICAgfVxuICAgIGNvbnN0IHsgbW91bnQgfSA9IGFwcDtcbiAgICBhcHAubW91bnQgPSAoY29udGFpbmVyT3JTZWxlY3RvcikgPT4ge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyT3JTZWxlY3Rvcik7XG4gICAgICAgIGlmICghY29udGFpbmVyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBhcHAuX2NvbXBvbmVudDtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGNvbXBvbmVudCkgJiYgIWNvbXBvbmVudC5yZW5kZXIgJiYgIWNvbXBvbmVudC50ZW1wbGF0ZSkge1xuICAgICAgICAgICAgLy8gX19VTlNBRkVfX1xuICAgICAgICAgICAgLy8gUmVhc29uOiBwb3RlbnRpYWwgZXhlY3V0aW9uIG9mIEpTIGV4cHJlc3Npb25zIGluIGluLURPTSB0ZW1wbGF0ZS5cbiAgICAgICAgICAgIC8vIFRoZSB1c2VyIG11c3QgbWFrZSBzdXJlIHRoZSBpbi1ET00gdGVtcGxhdGUgaXMgdHJ1c3RlZC4gSWYgaXQnc1xuICAgICAgICAgICAgLy8gcmVuZGVyZWQgYnkgdGhlIHNlcnZlciwgdGhlIHRlbXBsYXRlIHNob3VsZCBub3QgY29udGFpbiBhbnkgdXNlciBkYXRhLlxuICAgICAgICAgICAgY29tcG9uZW50LnRlbXBsYXRlID0gY29udGFpbmVyLmlubmVySFRNTDtcbiAgICAgICAgfVxuICAgICAgICAvLyBjbGVhciBjb250ZW50IGJlZm9yZSBtb3VudGluZ1xuICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGNvbnN0IHByb3h5ID0gbW91bnQoY29udGFpbmVyLCBmYWxzZSwgY29udGFpbmVyIGluc3RhbmNlb2YgU1ZHRWxlbWVudCk7XG4gICAgICAgIGlmIChjb250YWluZXIgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQXR0cmlidXRlKCd2LWNsb2FrJyk7XG4gICAgICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKCdkYXRhLXYtYXBwJywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm94eTtcbiAgICB9O1xuICAgIHJldHVybiBhcHA7XG59KTtcbmNvbnN0IGNyZWF0ZVNTUkFwcCA9ICgoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IGFwcCA9IGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkuY3JlYXRlQXBwKC4uLmFyZ3MpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgaW5qZWN0TmF0aXZlVGFnQ2hlY2soYXBwKTtcbiAgICAgICAgaW5qZWN0Q29tcGlsZXJPcHRpb25zQ2hlY2soYXBwKTtcbiAgICB9XG4gICAgY29uc3QgeyBtb3VudCB9ID0gYXBwO1xuICAgIGFwcC5tb3VudCA9IChjb250YWluZXJPclNlbGVjdG9yKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXJPclNlbGVjdG9yKTtcbiAgICAgICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgICAgICAgcmV0dXJuIG1vdW50KGNvbnRhaW5lciwgdHJ1ZSwgY29udGFpbmVyIGluc3RhbmNlb2YgU1ZHRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhcHA7XG59KTtcbmZ1bmN0aW9uIGluamVjdE5hdGl2ZVRhZ0NoZWNrKGFwcCkge1xuICAgIC8vIEluamVjdCBgaXNOYXRpdmVUYWdgXG4gICAgLy8gdGhpcyBpcyB1c2VkIGZvciBjb21wb25lbnQgbmFtZSB2YWxpZGF0aW9uIChkZXYgb25seSlcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXBwLmNvbmZpZywgJ2lzTmF0aXZlVGFnJywge1xuICAgICAgICB2YWx1ZTogKHRhZykgPT4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkdUYWcodGFnKSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgfSk7XG59XG4vLyBkZXYgb25seVxuZnVuY3Rpb24gaW5qZWN0Q29tcGlsZXJPcHRpb25zQ2hlY2soYXBwKSB7XG4gICAgaWYgKGlzUnVudGltZU9ubHkoKSkge1xuICAgICAgICBjb25zdCBpc0N1c3RvbUVsZW1lbnQgPSBhcHAuY29uZmlnLmlzQ3VzdG9tRWxlbWVudDtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsICdpc0N1c3RvbUVsZW1lbnQnLCB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzQ3VzdG9tRWxlbWVudDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQoKSB7XG4gICAgICAgICAgICAgICAgd2FybihgVGhlIFxcYGlzQ3VzdG9tRWxlbWVudFxcYCBjb25maWcgb3B0aW9uIGlzIGRlcHJlY2F0ZWQuIFVzZSBgICtcbiAgICAgICAgICAgICAgICAgICAgYFxcYGNvbXBpbGVyT3B0aW9ucy5pc0N1c3RvbUVsZW1lbnRcXGAgaW5zdGVhZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNvbXBpbGVyT3B0aW9ucyA9IGFwcC5jb25maWcuY29tcGlsZXJPcHRpb25zO1xuICAgICAgICBjb25zdCBtc2cgPSBgVGhlIFxcYGNvbXBpbGVyT3B0aW9uc1xcYCBjb25maWcgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgYCArXG4gICAgICAgICAgICBgYSBidWlsZCBvZiBWdWUuanMgdGhhdCBpbmNsdWRlcyB0aGUgcnVudGltZSBjb21waWxlciAoYWthIFwiZnVsbCBidWlsZFwiKS4gYCArXG4gICAgICAgICAgICBgU2luY2UgeW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkLCBcXGBjb21waWxlck9wdGlvbnNcXGAgYCArXG4gICAgICAgICAgICBgbXVzdCBiZSBwYXNzZWQgdG8gXFxgQHZ1ZS9jb21waWxlci1kb21cXGAgaW4gdGhlIGJ1aWxkIHNldHVwIGluc3RlYWQuXFxuYCArXG4gICAgICAgICAgICBgLSBGb3IgdnVlLWxvYWRlcjogcGFzcyBpdCB2aWEgdnVlLWxvYWRlcidzIFxcYGNvbXBpbGVyT3B0aW9uc1xcYCBsb2FkZXIgb3B0aW9uLlxcbmAgK1xuICAgICAgICAgICAgYC0gRm9yIHZ1ZS1jbGk6IHNlZSBodHRwczovL2NsaS52dWVqcy5vcmcvZ3VpZGUvd2VicGFjay5odG1sI21vZGlmeWluZy1vcHRpb25zLW9mLWEtbG9hZGVyXFxuYCArXG4gICAgICAgICAgICBgLSBGb3Igdml0ZTogcGFzcyBpdCB2aWEgQHZpdGVqcy9wbHVnaW4tdnVlIG9wdGlvbnMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdml0ZWpzL3ZpdGUvdHJlZS9tYWluL3BhY2thZ2VzL3BsdWdpbi12dWUjZXhhbXBsZS1mb3ItcGFzc2luZy1vcHRpb25zLXRvLXZ1ZWNvbXBpbGVyLWRvbWA7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuY29uZmlnLCAnY29tcGlsZXJPcHRpb25zJywge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcGlsZXJPcHRpb25zO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCgpIHtcbiAgICAgICAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXIpIHtcbiAgICBpZiAoaXNTdHJpbmcoY29udGFpbmVyKSkge1xuICAgICAgICBjb25zdCByZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXJlcykge1xuICAgICAgICAgICAgd2FybihgRmFpbGVkIHRvIG1vdW50IGFwcDogbW91bnQgdGFyZ2V0IHNlbGVjdG9yIFwiJHtjb250YWluZXJ9XCIgcmV0dXJuZWQgbnVsbC5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgIHdpbmRvdy5TaGFkb3dSb290ICYmXG4gICAgICAgIGNvbnRhaW5lciBpbnN0YW5jZW9mIHdpbmRvdy5TaGFkb3dSb290ICYmXG4gICAgICAgIGNvbnRhaW5lci5tb2RlID09PSAnY2xvc2VkJykge1xuICAgICAgICB3YXJuKGBtb3VudGluZyBvbiBhIFNoYWRvd1Jvb3Qgd2l0aCBcXGB7bW9kZTogXCJjbG9zZWRcIn1cXGAgbWF5IGxlYWQgdG8gdW5wcmVkaWN0YWJsZSBidWdzYCk7XG4gICAgfVxuICAgIHJldHVybiBjb250YWluZXI7XG59XG5sZXQgc3NyRGlyZWN0aXZlSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IGluaXREaXJlY3RpdmVzRm9yU1NSID0gKCkgPT4ge1xuICAgICAgICBpZiAoIXNzckRpcmVjdGl2ZUluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICBzc3JEaXJlY3RpdmVJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICBpbml0Vk1vZGVsRm9yU1NSKCk7XG4gICAgICAgICAgICBpbml0VlNob3dGb3JTU1IoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICA7XG5cbmV4cG9ydCB7IFRyYW5zaXRpb24sIFRyYW5zaXRpb25Hcm91cCwgVnVlRWxlbWVudCwgY3JlYXRlQXBwLCBjcmVhdGVTU1JBcHAsIGRlZmluZUN1c3RvbUVsZW1lbnQsIGRlZmluZVNTUkN1c3RvbUVsZW1lbnQsIGh5ZHJhdGUsIGluaXREaXJlY3RpdmVzRm9yU1NSLCByZW5kZXIsIHVzZUNzc01vZHVsZSwgdXNlQ3NzVmFycywgdk1vZGVsQ2hlY2tib3gsIHZNb2RlbER5bmFtaWMsIHZNb2RlbFJhZGlvLCB2TW9kZWxTZWxlY3QsIHZNb2RlbFRleHQsIHZTaG93LCB3aXRoS2V5cywgd2l0aE1vZGlmaWVycyB9O1xuIiwiLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICogSU1QT1JUQU5UOiBhbGwgY2FsbHMgb2YgdGhpcyBmdW5jdGlvbiBtdXN0IGJlIHByZWZpeGVkIHdpdGhcbiAqIFxcL1xcKiNcXF9cXF9QVVJFXFxfXFxfXFwqXFwvXG4gKiBTbyB0aGF0IHJvbGx1cCBjYW4gdHJlZS1zaGFrZSB0aGVtIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcChzdHIsIGV4cGVjdHNMb3dlckNhc2UpIHtcbiAgICBjb25zdCBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGNvbnN0IGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2UgPyB2YWwgPT4gISFtYXBbdmFsLnRvTG93ZXJDYXNlKCldIDogdmFsID0+ICEhbWFwW3ZhbF07XG59XG5cbi8qKlxuICogZGV2IG9ubHkgZmxhZyAtPiBuYW1lIG1hcHBpbmdcbiAqL1xuY29uc3QgUGF0Y2hGbGFnTmFtZXMgPSB7XG4gICAgWzEgLyogUGF0Y2hGbGFncy5URVhUICovXTogYFRFWFRgLFxuICAgIFsyIC8qIFBhdGNoRmxhZ3MuQ0xBU1MgKi9dOiBgQ0xBU1NgLFxuICAgIFs0IC8qIFBhdGNoRmxhZ3MuU1RZTEUgKi9dOiBgU1RZTEVgLFxuICAgIFs4IC8qIFBhdGNoRmxhZ3MuUFJPUFMgKi9dOiBgUFJPUFNgLFxuICAgIFsxNiAvKiBQYXRjaEZsYWdzLkZVTExfUFJPUFMgKi9dOiBgRlVMTF9QUk9QU2AsXG4gICAgWzMyIC8qIFBhdGNoRmxhZ3MuSFlEUkFURV9FVkVOVFMgKi9dOiBgSFlEUkFURV9FVkVOVFNgLFxuICAgIFs2NCAvKiBQYXRjaEZsYWdzLlNUQUJMRV9GUkFHTUVOVCAqL106IGBTVEFCTEVfRlJBR01FTlRgLFxuICAgIFsxMjggLyogUGF0Y2hGbGFncy5LRVlFRF9GUkFHTUVOVCAqL106IGBLRVlFRF9GUkFHTUVOVGAsXG4gICAgWzI1NiAvKiBQYXRjaEZsYWdzLlVOS0VZRURfRlJBR01FTlQgKi9dOiBgVU5LRVlFRF9GUkFHTUVOVGAsXG4gICAgWzUxMiAvKiBQYXRjaEZsYWdzLk5FRURfUEFUQ0ggKi9dOiBgTkVFRF9QQVRDSGAsXG4gICAgWzEwMjQgLyogUGF0Y2hGbGFncy5EWU5BTUlDX1NMT1RTICovXTogYERZTkFNSUNfU0xPVFNgLFxuICAgIFsyMDQ4IC8qIFBhdGNoRmxhZ3MuREVWX1JPT1RfRlJBR01FTlQgKi9dOiBgREVWX1JPT1RfRlJBR01FTlRgLFxuICAgIFstMSAvKiBQYXRjaEZsYWdzLkhPSVNURUQgKi9dOiBgSE9JU1RFRGAsXG4gICAgWy0yIC8qIFBhdGNoRmxhZ3MuQkFJTCAqL106IGBCQUlMYFxufTtcblxuLyoqXG4gKiBEZXYgb25seVxuICovXG5jb25zdCBzbG90RmxhZ3NUZXh0ID0ge1xuICAgIFsxIC8qIFNsb3RGbGFncy5TVEFCTEUgKi9dOiAnU1RBQkxFJyxcbiAgICBbMiAvKiBTbG90RmxhZ3MuRFlOQU1JQyAqL106ICdEWU5BTUlDJyxcbiAgICBbMyAvKiBTbG90RmxhZ3MuRk9SV0FSREVEICovXTogJ0ZPUldBUkRFRCdcbn07XG5cbmNvbnN0IEdMT0JBTFNfV0hJVEVfTElTVEVEID0gJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4scGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksJyArXG4gICAgJ2RlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LE1hdGgsTnVtYmVyLERhdGUsQXJyYXksJyArXG4gICAgJ09iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsQmlnSW50JztcbmNvbnN0IGlzR2xvYmFsbHlXaGl0ZWxpc3RlZCA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChHTE9CQUxTX1dISVRFX0xJU1RFRCk7XG5cbmNvbnN0IHJhbmdlID0gMjtcbmZ1bmN0aW9uIGdlbmVyYXRlQ29kZUZyYW1lKHNvdXJjZSwgc3RhcnQgPSAwLCBlbmQgPSBzb3VyY2UubGVuZ3RoKSB7XG4gICAgLy8gU3BsaXQgdGhlIGNvbnRlbnQgaW50byBpbmRpdmlkdWFsIGxpbmVzIGJ1dCBjYXB0dXJlIHRoZSBuZXdsaW5lIHNlcXVlbmNlXG4gICAgLy8gdGhhdCBzZXBhcmF0ZWQgZWFjaCBsaW5lLiBUaGlzIGlzIGltcG9ydGFudCBiZWNhdXNlIHRoZSBhY3R1YWwgc2VxdWVuY2UgaXNcbiAgICAvLyBuZWVkZWQgdG8gcHJvcGVybHkgdGFrZSBpbnRvIGFjY291bnQgdGhlIGZ1bGwgbGluZSBsZW5ndGggZm9yIG9mZnNldFxuICAgIC8vIGNvbXBhcmlzb25cbiAgICBsZXQgbGluZXMgPSBzb3VyY2Uuc3BsaXQoLyhcXHI/XFxuKS8pO1xuICAgIC8vIFNlcGFyYXRlIHRoZSBsaW5lcyBhbmQgbmV3bGluZSBzZXF1ZW5jZXMgaW50byBzZXBhcmF0ZSBhcnJheXMgZm9yIGVhc2llciByZWZlcmVuY2luZ1xuICAgIGNvbnN0IG5ld2xpbmVTZXF1ZW5jZXMgPSBsaW5lcy5maWx0ZXIoKF8sIGlkeCkgPT4gaWR4ICUgMiA9PT0gMSk7XG4gICAgbGluZXMgPSBsaW5lcy5maWx0ZXIoKF8sIGlkeCkgPT4gaWR4ICUgMiA9PT0gMCk7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBjb25zdCByZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvdW50ICs9XG4gICAgICAgICAgICBsaW5lc1tpXS5sZW5ndGggK1xuICAgICAgICAgICAgICAgICgobmV3bGluZVNlcXVlbmNlc1tpXSAmJiBuZXdsaW5lU2VxdWVuY2VzW2ldLmxlbmd0aCkgfHwgMCk7XG4gICAgICAgIGlmIChjb3VudCA+PSBzdGFydCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgLSByYW5nZTsgaiA8PSBpICsgcmFuZ2UgfHwgZW5kID4gY291bnQ7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChqIDwgMCB8fCBqID49IGxpbmVzLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IGogKyAxO1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKGAke2xpbmV9JHsnICcucmVwZWF0KE1hdGgubWF4KDMgLSBTdHJpbmcobGluZSkubGVuZ3RoLCAwKSl9fCAgJHtsaW5lc1tqXX1gKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lTGVuZ3RoID0gbGluZXNbal0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0xpbmVTZXFMZW5ndGggPSAobmV3bGluZVNlcXVlbmNlc1tqXSAmJiBuZXdsaW5lU2VxdWVuY2VzW2pdLmxlbmd0aCkgfHwgMDtcbiAgICAgICAgICAgICAgICBpZiAoaiA9PT0gaSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBwdXNoIHVuZGVybGluZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWQgPSBzdGFydCAtIChjb3VudCAtIChsaW5lTGVuZ3RoICsgbmV3TGluZVNlcUxlbmd0aCkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1heCgxLCBlbmQgPiBjb3VudCA/IGxpbmVMZW5ndGggLSBwYWQgOiBlbmQgLSBzdGFydCk7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGAgICB8ICBgICsgJyAnLnJlcGVhdChwYWQpICsgJ14nLnJlcGVhdChsZW5ndGgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaiA+IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZCA+IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1heChNYXRoLm1pbihlbmQgLSBjb3VudCwgbGluZUxlbmd0aCksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goYCAgIHwgIGAgKyAnXicucmVwZWF0KGxlbmd0aCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IGxpbmVMZW5ndGggKyBuZXdMaW5lU2VxTGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXMuam9pbignXFxuJyk7XG59XG5cbi8qKlxuICogT24gdGhlIGNsaWVudCB3ZSBvbmx5IG5lZWQgdG8gb2ZmZXIgc3BlY2lhbCBjYXNlcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzIHRoYXRcbiAqIGhhdmUgZGlmZmVyZW50IG5hbWVzIGZyb20gdGhlaXIgY29ycmVzcG9uZGluZyBkb20gcHJvcGVydGllczpcbiAqIC0gaXRlbXNjb3BlIC0+IE4vQVxuICogLSBhbGxvd2Z1bGxzY3JlZW4gLT4gYWxsb3dGdWxsc2NyZWVuXG4gKiAtIGZvcm1ub3ZhbGlkYXRlIC0+IGZvcm1Ob1ZhbGlkYXRlXG4gKiAtIGlzbWFwIC0+IGlzTWFwXG4gKiAtIG5vbW9kdWxlIC0+IG5vTW9kdWxlXG4gKiAtIG5vdmFsaWRhdGUgLT4gbm9WYWxpZGF0ZVxuICogLSByZWFkb25seSAtPiByZWFkT25seVxuICovXG5jb25zdCBzcGVjaWFsQm9vbGVhbkF0dHJzID0gYGl0ZW1zY29wZSxhbGxvd2Z1bGxzY3JlZW4sZm9ybW5vdmFsaWRhdGUsaXNtYXAsbm9tb2R1bGUsbm92YWxpZGF0ZSxyZWFkb25seWA7XG5jb25zdCBpc1NwZWNpYWxCb29sZWFuQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChzcGVjaWFsQm9vbGVhbkF0dHJzKTtcbi8qKlxuICogVGhlIGZ1bGwgbGlzdCBpcyBuZWVkZWQgZHVyaW5nIFNTUiB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGluaXRpYWwgbWFya3VwLlxuICovXG5jb25zdCBpc0Jvb2xlYW5BdHRyID0gLyojX19QVVJFX18qLyBtYWtlTWFwKHNwZWNpYWxCb29sZWFuQXR0cnMgK1xuICAgIGAsYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNvbnRyb2xzLGRlZmF1bHQsZGVmZXIsZGlzYWJsZWQsaGlkZGVuLGAgK1xuICAgIGBsb29wLG9wZW4scmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLGAgK1xuICAgIGBjaGVja2VkLG11dGVkLG11bHRpcGxlLHNlbGVjdGVkYCk7XG4vKipcbiAqIEJvb2xlYW4gYXR0cmlidXRlcyBzaG91bGQgYmUgaW5jbHVkZWQgaWYgdGhlIHZhbHVlIGlzIHRydXRoeSBvciAnJy5cbiAqIGUuZy4gYDxzZWxlY3QgbXVsdGlwbGU+YCBjb21waWxlcyB0byBgeyBtdWx0aXBsZTogJycgfWBcbiAqL1xuZnVuY3Rpb24gaW5jbHVkZUJvb2xlYW5BdHRyKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUgfHwgdmFsdWUgPT09ICcnO1xufVxuY29uc3QgdW5zYWZlQXR0ckNoYXJSRSA9IC9bPi89XCInXFx1MDAwOVxcdTAwMGFcXHUwMDBjXFx1MDAyMF0vO1xuY29uc3QgYXR0clZhbGlkYXRpb25DYWNoZSA9IHt9O1xuZnVuY3Rpb24gaXNTU1JTYWZlQXR0ck5hbWUobmFtZSkge1xuICAgIGlmIChhdHRyVmFsaWRhdGlvbkNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBhdHRyVmFsaWRhdGlvbkNhY2hlW25hbWVdO1xuICAgIH1cbiAgICBjb25zdCBpc1Vuc2FmZSA9IHVuc2FmZUF0dHJDaGFyUkUudGVzdChuYW1lKTtcbiAgICBpZiAoaXNVbnNhZmUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgdW5zYWZlIGF0dHJpYnV0ZSBuYW1lOiAke25hbWV9YCk7XG4gICAgfVxuICAgIHJldHVybiAoYXR0clZhbGlkYXRpb25DYWNoZVtuYW1lXSA9ICFpc1Vuc2FmZSk7XG59XG5jb25zdCBwcm9wc1RvQXR0ck1hcCA9IHtcbiAgICBhY2NlcHRDaGFyc2V0OiAnYWNjZXB0LWNoYXJzZXQnLFxuICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcbiAgICBodG1sRm9yOiAnZm9yJyxcbiAgICBodHRwRXF1aXY6ICdodHRwLWVxdWl2J1xufTtcbi8qKlxuICogQ1NTIHByb3BlcnRpZXMgdGhhdCBhY2NlcHQgcGxhaW4gbnVtYmVyc1xuICovXG5jb25zdCBpc05vVW5pdE51bWVyaWNTdHlsZVByb3AgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoYGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsYm9yZGVyLWltYWdlLW91dHNldCxib3JkZXItaW1hZ2Utc2xpY2UsYCArXG4gICAgYGJvcmRlci1pbWFnZS13aWR0aCxib3gtZmxleCxib3gtZmxleC1ncm91cCxib3gtb3JkaW5hbC1ncm91cCxjb2x1bW4tY291bnQsYCArXG4gICAgYGNvbHVtbnMsZmxleCxmbGV4LWdyb3csZmxleC1wb3NpdGl2ZSxmbGV4LXNocmluayxmbGV4LW5lZ2F0aXZlLGZsZXgtb3JkZXIsYCArXG4gICAgYGdyaWQtcm93LGdyaWQtcm93LWVuZCxncmlkLXJvdy1zcGFuLGdyaWQtcm93LXN0YXJ0LGdyaWQtY29sdW1uLGAgK1xuICAgIGBncmlkLWNvbHVtbi1lbmQsZ3JpZC1jb2x1bW4tc3BhbixncmlkLWNvbHVtbi1zdGFydCxmb250LXdlaWdodCxsaW5lLWNsYW1wLGAgK1xuICAgIGBsaW5lLWhlaWdodCxvcGFjaXR5LG9yZGVyLG9ycGhhbnMsdGFiLXNpemUsd2lkb3dzLHotaW5kZXgsem9vbSxgICtcbiAgICAvLyBTVkdcbiAgICBgZmlsbC1vcGFjaXR5LGZsb29kLW9wYWNpdHksc3RvcC1vcGFjaXR5LHN0cm9rZS1kYXNoYXJyYXksc3Ryb2tlLWRhc2hvZmZzZXQsYCArXG4gICAgYHN0cm9rZS1taXRlcmxpbWl0LHN0cm9rZS1vcGFjaXR5LHN0cm9rZS13aWR0aGApO1xuLyoqXG4gKiBLbm93biBhdHRyaWJ1dGVzLCB0aGlzIGlzIHVzZWQgZm9yIHN0cmluZ2lmaWNhdGlvbiBvZiBydW50aW1lIHN0YXRpYyBub2Rlc1xuICogc28gdGhhdCB3ZSBkb24ndCBzdHJpbmdpZnkgYmluZGluZ3MgdGhhdCBjYW5ub3QgYmUgc2V0IGZyb20gSFRNTC5cbiAqIERvbid0IGFsc28gZm9yZ2V0IHRvIGFsbG93IGBkYXRhLSpgIGFuZCBgYXJpYS0qYCFcbiAqIEdlbmVyYXRlZCBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvQXR0cmlidXRlc1xuICovXG5jb25zdCBpc0tub3duSHRtbEF0dHIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoYGFjY2VwdCxhY2NlcHQtY2hhcnNldCxhY2Nlc3NrZXksYWN0aW9uLGFsaWduLGFsbG93LGFsdCxhc3luYyxgICtcbiAgICBgYXV0b2NhcGl0YWxpemUsYXV0b2NvbXBsZXRlLGF1dG9mb2N1cyxhdXRvcGxheSxiYWNrZ3JvdW5kLGJnY29sb3IsYCArXG4gICAgYGJvcmRlcixidWZmZXJlZCxjYXB0dXJlLGNoYWxsZW5nZSxjaGFyc2V0LGNoZWNrZWQsY2l0ZSxjbGFzcyxjb2RlLGAgK1xuICAgIGBjb2RlYmFzZSxjb2xvcixjb2xzLGNvbHNwYW4sY29udGVudCxjb250ZW50ZWRpdGFibGUsY29udGV4dG1lbnUsY29udHJvbHMsYCArXG4gICAgYGNvb3Jkcyxjcm9zc29yaWdpbixjc3AsZGF0YSxkYXRldGltZSxkZWNvZGluZyxkZWZhdWx0LGRlZmVyLGRpcixkaXJuYW1lLGAgK1xuICAgIGBkaXNhYmxlZCxkb3dubG9hZCxkcmFnZ2FibGUsZHJvcHpvbmUsZW5jdHlwZSxlbnRlcmtleWhpbnQsZm9yLGZvcm0sYCArXG4gICAgYGZvcm1hY3Rpb24sZm9ybWVuY3R5cGUsZm9ybW1ldGhvZCxmb3Jtbm92YWxpZGF0ZSxmb3JtdGFyZ2V0LGhlYWRlcnMsYCArXG4gICAgYGhlaWdodCxoaWRkZW4saGlnaCxocmVmLGhyZWZsYW5nLGh0dHAtZXF1aXYsaWNvbixpZCxpbXBvcnRhbmNlLGludGVncml0eSxgICtcbiAgICBgaXNtYXAsaXRlbXByb3Asa2V5dHlwZSxraW5kLGxhYmVsLGxhbmcsbGFuZ3VhZ2UsbG9hZGluZyxsaXN0LGxvb3AsbG93LGAgK1xuICAgIGBtYW5pZmVzdCxtYXgsbWF4bGVuZ3RoLG1pbmxlbmd0aCxtZWRpYSxtaW4sbXVsdGlwbGUsbXV0ZWQsbmFtZSxub3ZhbGlkYXRlLGAgK1xuICAgIGBvcGVuLG9wdGltdW0scGF0dGVybixwaW5nLHBsYWNlaG9sZGVyLHBvc3RlcixwcmVsb2FkLHJhZGlvZ3JvdXAscmVhZG9ubHksYCArXG4gICAgYHJlZmVycmVycG9saWN5LHJlbCxyZXF1aXJlZCxyZXZlcnNlZCxyb3dzLHJvd3NwYW4sc2FuZGJveCxzY29wZSxzY29wZWQsYCArXG4gICAgYHNlbGVjdGVkLHNoYXBlLHNpemUsc2l6ZXMsc2xvdCxzcGFuLHNwZWxsY2hlY2ssc3JjLHNyY2RvYyxzcmNsYW5nLHNyY3NldCxgICtcbiAgICBgc3RhcnQsc3RlcCxzdHlsZSxzdW1tYXJ5LHRhYmluZGV4LHRhcmdldCx0aXRsZSx0cmFuc2xhdGUsdHlwZSx1c2VtYXAsYCArXG4gICAgYHZhbHVlLHdpZHRoLHdyYXBgKTtcbi8qKlxuICogR2VuZXJhdGVkIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0F0dHJpYnV0ZVxuICovXG5jb25zdCBpc0tub3duU3ZnQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChgeG1sbnMsYWNjZW50LWhlaWdodCxhY2N1bXVsYXRlLGFkZGl0aXZlLGFsaWdubWVudC1iYXNlbGluZSxhbHBoYWJldGljLGFtcGxpdHVkZSxgICtcbiAgICBgYXJhYmljLWZvcm0sYXNjZW50LGF0dHJpYnV0ZU5hbWUsYXR0cmlidXRlVHlwZSxhemltdXRoLGJhc2VGcmVxdWVuY3ksYCArXG4gICAgYGJhc2VsaW5lLXNoaWZ0LGJhc2VQcm9maWxlLGJib3gsYmVnaW4sYmlhcyxieSxjYWxjTW9kZSxjYXAtaGVpZ2h0LGNsYXNzLGAgK1xuICAgIGBjbGlwLGNsaXBQYXRoVW5pdHMsY2xpcC1wYXRoLGNsaXAtcnVsZSxjb2xvcixjb2xvci1pbnRlcnBvbGF0aW9uLGAgK1xuICAgIGBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMsY29sb3ItcHJvZmlsZSxjb2xvci1yZW5kZXJpbmcsYCArXG4gICAgYGNvbnRlbnRTY3JpcHRUeXBlLGNvbnRlbnRTdHlsZVR5cGUsY3Jvc3NvcmlnaW4sY3Vyc29yLGN4LGN5LGQsZGVjZWxlcmF0ZSxgICtcbiAgICBgZGVzY2VudCxkaWZmdXNlQ29uc3RhbnQsZGlyZWN0aW9uLGRpc3BsYXksZGl2aXNvcixkb21pbmFudC1iYXNlbGluZSxkdXIsZHgsYCArXG4gICAgYGR5LGVkZ2VNb2RlLGVsZXZhdGlvbixlbmFibGUtYmFja2dyb3VuZCxlbmQsZXhwb25lbnQsZmlsbCxmaWxsLW9wYWNpdHksYCArXG4gICAgYGZpbGwtcnVsZSxmaWx0ZXIsZmlsdGVyUmVzLGZpbHRlclVuaXRzLGZsb29kLWNvbG9yLGZsb29kLW9wYWNpdHksYCArXG4gICAgYGZvbnQtZmFtaWx5LGZvbnQtc2l6ZSxmb250LXNpemUtYWRqdXN0LGZvbnQtc3RyZXRjaCxmb250LXN0eWxlLGAgK1xuICAgIGBmb250LXZhcmlhbnQsZm9udC13ZWlnaHQsZm9ybWF0LGZyb20sZnIsZngsZnksZzEsZzIsZ2x5cGgtbmFtZSxgICtcbiAgICBgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCxnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCxnbHlwaFJlZixgICtcbiAgICBgZ3JhZGllbnRUcmFuc2Zvcm0sZ3JhZGllbnRVbml0cyxoYW5naW5nLGhlaWdodCxocmVmLGhyZWZsYW5nLGhvcml6LWFkdi14LGAgK1xuICAgIGBob3Jpei1vcmlnaW4teCxpZCxpZGVvZ3JhcGhpYyxpbWFnZS1yZW5kZXJpbmcsaW4saW4yLGludGVyY2VwdCxrLGsxLGsyLGszLGAgK1xuICAgIGBrNCxrZXJuZWxNYXRyaXgsa2VybmVsVW5pdExlbmd0aCxrZXJuaW5nLGtleVBvaW50cyxrZXlTcGxpbmVzLGtleVRpbWVzLGAgK1xuICAgIGBsYW5nLGxlbmd0aEFkanVzdCxsZXR0ZXItc3BhY2luZyxsaWdodGluZy1jb2xvcixsaW1pdGluZ0NvbmVBbmdsZSxsb2NhbCxgICtcbiAgICBgbWFya2VyLWVuZCxtYXJrZXItbWlkLG1hcmtlci1zdGFydCxtYXJrZXJIZWlnaHQsbWFya2VyVW5pdHMsbWFya2VyV2lkdGgsYCArXG4gICAgYG1hc2ssbWFza0NvbnRlbnRVbml0cyxtYXNrVW5pdHMsbWF0aGVtYXRpY2FsLG1heCxtZWRpYSxtZXRob2QsbWluLG1vZGUsYCArXG4gICAgYG5hbWUsbnVtT2N0YXZlcyxvZmZzZXQsb3BhY2l0eSxvcGVyYXRvcixvcmRlcixvcmllbnQsb3JpZW50YXRpb24sb3JpZ2luLGAgK1xuICAgIGBvdmVyZmxvdyxvdmVybGluZS1wb3NpdGlvbixvdmVybGluZS10aGlja25lc3MscGFub3NlLTEscGFpbnQtb3JkZXIscGF0aCxgICtcbiAgICBgcGF0aExlbmd0aCxwYXR0ZXJuQ29udGVudFVuaXRzLHBhdHRlcm5UcmFuc2Zvcm0scGF0dGVyblVuaXRzLHBpbmcsYCArXG4gICAgYHBvaW50ZXItZXZlbnRzLHBvaW50cyxwb2ludHNBdFgscG9pbnRzQXRZLHBvaW50c0F0WixwcmVzZXJ2ZUFscGhhLGAgK1xuICAgIGBwcmVzZXJ2ZUFzcGVjdFJhdGlvLHByaW1pdGl2ZVVuaXRzLHIscmFkaXVzLHJlZmVycmVyUG9saWN5LHJlZlgscmVmWSxyZWwsYCArXG4gICAgYHJlbmRlcmluZy1pbnRlbnQscmVwZWF0Q291bnQscmVwZWF0RHVyLHJlcXVpcmVkRXh0ZW5zaW9ucyxyZXF1aXJlZEZlYXR1cmVzLGAgK1xuICAgIGByZXN0YXJ0LHJlc3VsdCxyb3RhdGUscngscnksc2NhbGUsc2VlZCxzaGFwZS1yZW5kZXJpbmcsc2xvcGUsc3BhY2luZyxgICtcbiAgICBgc3BlY3VsYXJDb25zdGFudCxzcGVjdWxhckV4cG9uZW50LHNwZWVkLHNwcmVhZE1ldGhvZCxzdGFydE9mZnNldCxgICtcbiAgICBgc3RkRGV2aWF0aW9uLHN0ZW1oLHN0ZW12LHN0aXRjaFRpbGVzLHN0b3AtY29sb3Isc3RvcC1vcGFjaXR5LGAgK1xuICAgIGBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uLHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzLHN0cmluZyxzdHJva2UsYCArXG4gICAgYHN0cm9rZS1kYXNoYXJyYXksc3Ryb2tlLWRhc2hvZmZzZXQsc3Ryb2tlLWxpbmVjYXAsc3Ryb2tlLWxpbmVqb2luLGAgK1xuICAgIGBzdHJva2UtbWl0ZXJsaW1pdCxzdHJva2Utb3BhY2l0eSxzdHJva2Utd2lkdGgsc3R5bGUsc3VyZmFjZVNjYWxlLGAgK1xuICAgIGBzeXN0ZW1MYW5ndWFnZSx0YWJpbmRleCx0YWJsZVZhbHVlcyx0YXJnZXQsdGFyZ2V0WCx0YXJnZXRZLHRleHQtYW5jaG9yLGAgK1xuICAgIGB0ZXh0LWRlY29yYXRpb24sdGV4dC1yZW5kZXJpbmcsdGV4dExlbmd0aCx0byx0cmFuc2Zvcm0sdHJhbnNmb3JtLW9yaWdpbixgICtcbiAgICBgdHlwZSx1MSx1Mix1bmRlcmxpbmUtcG9zaXRpb24sdW5kZXJsaW5lLXRoaWNrbmVzcyx1bmljb2RlLHVuaWNvZGUtYmlkaSxgICtcbiAgICBgdW5pY29kZS1yYW5nZSx1bml0cy1wZXItZW0sdi1hbHBoYWJldGljLHYtaGFuZ2luZyx2LWlkZW9ncmFwaGljLGAgK1xuICAgIGB2LW1hdGhlbWF0aWNhbCx2YWx1ZXMsdmVjdG9yLWVmZmVjdCx2ZXJzaW9uLHZlcnQtYWR2LXksdmVydC1vcmlnaW4teCxgICtcbiAgICBgdmVydC1vcmlnaW4teSx2aWV3Qm94LHZpZXdUYXJnZXQsdmlzaWJpbGl0eSx3aWR0aCx3aWR0aHMsd29yZC1zcGFjaW5nLGAgK1xuICAgIGB3cml0aW5nLW1vZGUseCx4LWhlaWdodCx4MSx4Mix4Q2hhbm5lbFNlbGVjdG9yLHhsaW5rOmFjdHVhdGUseGxpbms6YXJjcm9sZSxgICtcbiAgICBgeGxpbms6aHJlZix4bGluazpyb2xlLHhsaW5rOnNob3cseGxpbms6dGl0bGUseGxpbms6dHlwZSx4bWw6YmFzZSx4bWw6bGFuZyxgICtcbiAgICBgeG1sOnNwYWNlLHkseTEseTIseUNoYW5uZWxTZWxlY3Rvcix6LHpvb21BbmRQYW5gKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGUodmFsdWUpIHtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgcmVzID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB2YWx1ZVtpXTtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBpc1N0cmluZyhpdGVtKVxuICAgICAgICAgICAgICAgID8gcGFyc2VTdHJpbmdTdHlsZShpdGVtKVxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplU3R5bGUoaXRlbSk7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5vcm1hbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSBub3JtYWxpemVkW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuY29uc3QgbGlzdERlbGltaXRlclJFID0gLzsoPyFbXihdKlxcKSkvZztcbmNvbnN0IHByb3BlcnR5RGVsaW1pdGVyUkUgPSAvOiguKykvO1xuZnVuY3Rpb24gcGFyc2VTdHJpbmdTdHlsZShjc3NUZXh0KSB7XG4gICAgY29uc3QgcmV0ID0ge307XG4gICAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyUkUpLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICBjb25zdCB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyUkUpO1xuICAgICAgICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJldFt0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVN0eWxlKHN0eWxlcykge1xuICAgIGxldCByZXQgPSAnJztcbiAgICBpZiAoIXN0eWxlcyB8fCBpc1N0cmluZyhzdHlsZXMpKSB7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIHN0eWxlcykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHN0eWxlc1trZXldO1xuICAgICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0ga2V5LnN0YXJ0c1dpdGgoYC0tYCkgPyBrZXkgOiBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOb1VuaXROdW1lcmljU3R5bGVQcm9wKG5vcm1hbGl6ZWRLZXkpKSkge1xuICAgICAgICAgICAgLy8gb25seSByZW5kZXIgdmFsaWQgdmFsdWVzXG4gICAgICAgICAgICByZXQgKz0gYCR7bm9ybWFsaXplZEtleX06JHt2YWx1ZX07YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplQ2xhc3ModmFsdWUpIHtcbiAgICBsZXQgcmVzID0gJyc7XG4gICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICByZXMgPSB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZUNsYXNzKHZhbHVlW2ldKTtcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgcmVzICs9IG5vcm1hbGl6ZWQgKyAnICc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmVzICs9IG5hbWUgKyAnICc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcy50cmltKCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyhwcm9wcykge1xuICAgIGlmICghcHJvcHMpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCB7IGNsYXNzOiBrbGFzcywgc3R5bGUgfSA9IHByb3BzO1xuICAgIGlmIChrbGFzcyAmJiAhaXNTdHJpbmcoa2xhc3MpKSB7XG4gICAgICAgIHByb3BzLmNsYXNzID0gbm9ybWFsaXplQ2xhc3Moa2xhc3MpO1xuICAgIH1cbiAgICBpZiAoc3R5bGUpIHtcbiAgICAgICAgcHJvcHMuc3R5bGUgPSBub3JtYWxpemVTdHlsZShzdHlsZSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9wcztcbn1cblxuLy8gVGhlc2UgdGFnIGNvbmZpZ3MgYXJlIHNoYXJlZCBiZXR3ZWVuIGNvbXBpbGVyLWRvbSBhbmQgcnVudGltZS1kb20sIHNvIHRoZXlcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudFxuY29uc3QgSFRNTF9UQUdTID0gJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLGFkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsJyArXG4gICAgJ2hlYWRlcixoMSxoMixoMyxoNCxoNSxoNixuYXYsc2VjdGlvbixkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbiwnICtcbiAgICAnZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsJyArXG4gICAgJ2RhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydWJ5LHMsc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLCcgK1xuICAgICd0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbyxlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLCcgK1xuICAgICdjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsJyArXG4gICAgJ3RoLHRyLGJ1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCwnICtcbiAgICAnb3B0aW9uLG91dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsZGV0YWlscyxkaWFsb2csbWVudSwnICtcbiAgICAnc3VtbWFyeSx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCc7XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvRWxlbWVudFxuY29uc3QgU1ZHX1RBR1MgPSAnc3ZnLGFuaW1hdGUsYW5pbWF0ZU1vdGlvbixhbmltYXRlVHJhbnNmb3JtLGNpcmNsZSxjbGlwUGF0aCxjb2xvci1wcm9maWxlLCcgK1xuICAgICdkZWZzLGRlc2MsZGlzY2FyZCxlbGxpcHNlLGZlQmxlbmQsZmVDb2xvck1hdHJpeCxmZUNvbXBvbmVudFRyYW5zZmVyLCcgK1xuICAgICdmZUNvbXBvc2l0ZSxmZUNvbnZvbHZlTWF0cml4LGZlRGlmZnVzZUxpZ2h0aW5nLGZlRGlzcGxhY2VtZW50TWFwLCcgK1xuICAgICdmZURpc3RhbmNlTGlnaHQsZmVEcm9wU2hhZG93LGZlRmxvb2QsZmVGdW5jQSxmZUZ1bmNCLGZlRnVuY0csZmVGdW5jUiwnICtcbiAgICAnZmVHYXVzc2lhbkJsdXIsZmVJbWFnZSxmZU1lcmdlLGZlTWVyZ2VOb2RlLGZlTW9ycGhvbG9neSxmZU9mZnNldCwnICtcbiAgICAnZmVQb2ludExpZ2h0LGZlU3BlY3VsYXJMaWdodGluZyxmZVNwb3RMaWdodCxmZVRpbGUsZmVUdXJidWxlbmNlLGZpbHRlciwnICtcbiAgICAnZm9yZWlnbk9iamVjdCxnLGhhdGNoLGhhdGNocGF0aCxpbWFnZSxsaW5lLGxpbmVhckdyYWRpZW50LG1hcmtlcixtYXNrLCcgK1xuICAgICdtZXNoLG1lc2hncmFkaWVudCxtZXNocGF0Y2gsbWVzaHJvdyxtZXRhZGF0YSxtcGF0aCxwYXRoLHBhdHRlcm4sJyArXG4gICAgJ3BvbHlnb24scG9seWxpbmUscmFkaWFsR3JhZGllbnQscmVjdCxzZXQsc29saWRjb2xvcixzdG9wLHN3aXRjaCxzeW1ib2wsJyArXG4gICAgJ3RleHQsdGV4dFBhdGgsdGl0bGUsdHNwYW4sdW5rbm93bix1c2Usdmlldyc7XG5jb25zdCBWT0lEX1RBR1MgPSAnYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxocixpbWcsaW5wdXQsbGluayxtZXRhLHBhcmFtLHNvdXJjZSx0cmFjayx3YnInO1xuLyoqXG4gKiBDb21waWxlciBvbmx5LlxuICogRG8gTk9UIHVzZSBpbiBydW50aW1lIGNvZGUgcGF0aHMgdW5sZXNzIGJlaGluZCBgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpYCBmbGFnLlxuICovXG5jb25zdCBpc0hUTUxUYWcgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoSFRNTF9UQUdTKTtcbi8qKlxuICogQ29tcGlsZXIgb25seS5cbiAqIERvIE5PVCB1c2UgaW4gcnVudGltZSBjb2RlIHBhdGhzIHVubGVzcyBiZWhpbmQgYChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKWAgZmxhZy5cbiAqL1xuY29uc3QgaXNTVkdUYWcgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoU1ZHX1RBR1MpO1xuLyoqXG4gKiBDb21waWxlciBvbmx5LlxuICogRG8gTk9UIHVzZSBpbiBydW50aW1lIGNvZGUgcGF0aHMgdW5sZXNzIGJlaGluZCBgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpYCBmbGFnLlxuICovXG5jb25zdCBpc1ZvaWRUYWcgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoVk9JRF9UQUdTKTtcblxuY29uc3QgZXNjYXBlUkUgPSAvW1wiJyY8Pl0vO1xuZnVuY3Rpb24gZXNjYXBlSHRtbChzdHJpbmcpIHtcbiAgICBjb25zdCBzdHIgPSAnJyArIHN0cmluZztcbiAgICBjb25zdCBtYXRjaCA9IGVzY2FwZVJFLmV4ZWMoc3RyKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIGxldCBodG1sID0gJyc7XG4gICAgbGV0IGVzY2FwZWQ7XG4gICAgbGV0IGluZGV4O1xuICAgIGxldCBsYXN0SW5kZXggPSAwO1xuICAgIGZvciAoaW5kZXggPSBtYXRjaC5pbmRleDsgaW5kZXggPCBzdHIubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHN3aXRjaCAoc3RyLmNoYXJDb2RlQXQoaW5kZXgpKSB7XG4gICAgICAgICAgICBjYXNlIDM0OiAvLyBcIlxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJnF1b3Q7JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzg6IC8vICZcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZhbXA7JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzk6IC8vICdcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyYjMzk7JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjA6IC8vIDxcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZsdDsnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA2MjogLy8gPlxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJmd0Oyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0SW5kZXggIT09IGluZGV4KSB7XG4gICAgICAgICAgICBodG1sICs9IHN0ci5zbGljZShsYXN0SW5kZXgsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgIGh0bWwgKz0gZXNjYXBlZDtcbiAgICB9XG4gICAgcmV0dXJuIGxhc3RJbmRleCAhPT0gaW5kZXggPyBodG1sICsgc3RyLnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpIDogaHRtbDtcbn1cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTIvc3ludGF4Lmh0bWwjY29tbWVudHNcbmNvbnN0IGNvbW1lbnRTdHJpcFJFID0gL14tPz58PCEtLXwtLT58LS0hPnw8IS0kL2c7XG5mdW5jdGlvbiBlc2NhcGVIdG1sQ29tbWVudChzcmMpIHtcbiAgICByZXR1cm4gc3JjLnJlcGxhY2UoY29tbWVudFN0cmlwUkUsICcnKTtcbn1cblxuZnVuY3Rpb24gbG9vc2VDb21wYXJlQXJyYXlzKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGVxdWFsID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBpID0gMDsgZXF1YWwgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZXF1YWwgPSBsb29zZUVxdWFsKGFbaV0sIGJbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gZXF1YWw7XG59XG5mdW5jdGlvbiBsb29zZUVxdWFsKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gYilcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgbGV0IGFWYWxpZFR5cGUgPSBpc0RhdGUoYSk7XG4gICAgbGV0IGJWYWxpZFR5cGUgPSBpc0RhdGUoYik7XG4gICAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgICAgICByZXR1cm4gYVZhbGlkVHlwZSAmJiBiVmFsaWRUeXBlID8gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpIDogZmFsc2U7XG4gICAgfVxuICAgIGFWYWxpZFR5cGUgPSBpc1N5bWJvbChhKTtcbiAgICBiVmFsaWRUeXBlID0gaXNTeW1ib2woYik7XG4gICAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgICAgICByZXR1cm4gYSA9PT0gYjtcbiAgICB9XG4gICAgYVZhbGlkVHlwZSA9IGlzQXJyYXkoYSk7XG4gICAgYlZhbGlkVHlwZSA9IGlzQXJyYXkoYik7XG4gICAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgICAgICByZXR1cm4gYVZhbGlkVHlwZSAmJiBiVmFsaWRUeXBlID8gbG9vc2VDb21wYXJlQXJyYXlzKGEsIGIpIDogZmFsc2U7XG4gICAgfVxuICAgIGFWYWxpZFR5cGUgPSBpc09iamVjdChhKTtcbiAgICBiVmFsaWRUeXBlID0gaXNPYmplY3QoYik7XG4gICAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWY6IHRoaXMgaWYgd2lsbCBwcm9iYWJseSBuZXZlciBiZSBjYWxsZWQgKi9cbiAgICAgICAgaWYgKCFhVmFsaWRUeXBlIHx8ICFiVmFsaWRUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYUtleXNDb3VudCA9IE9iamVjdC5rZXlzKGEpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgYktleXNDb3VudCA9IE9iamVjdC5rZXlzKGIpLmxlbmd0aDtcbiAgICAgICAgaWYgKGFLZXlzQ291bnQgIT09IGJLZXlzQ291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBhKSB7XG4gICAgICAgICAgICBjb25zdCBhSGFzS2V5ID0gYS5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgICAgICAgICAgY29uc3QgYkhhc0tleSA9IGIuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICAgICAgICAgIGlmICgoYUhhc0tleSAmJiAhYkhhc0tleSkgfHxcbiAgICAgICAgICAgICAgICAoIWFIYXNLZXkgJiYgYkhhc0tleSkgfHxcbiAgICAgICAgICAgICAgICAhbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpO1xufVxuZnVuY3Rpb24gbG9vc2VJbmRleE9mKGFyciwgdmFsKSB7XG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoaXRlbSA9PiBsb29zZUVxdWFsKGl0ZW0sIHZhbCkpO1xufVxuXG4vKipcbiAqIEZvciBjb252ZXJ0aW5nIHt7IGludGVycG9sYXRpb24gfX0gdmFsdWVzIHRvIGRpc3BsYXllZCBzdHJpbmdzLlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgdG9EaXNwbGF5U3RyaW5nID0gKHZhbCkgPT4ge1xuICAgIHJldHVybiBpc1N0cmluZyh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogdmFsID09IG51bGxcbiAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgIDogaXNBcnJheSh2YWwpIHx8XG4gICAgICAgICAgICAgICAgKGlzT2JqZWN0KHZhbCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKHZhbC50b1N0cmluZyA9PT0gb2JqZWN0VG9TdHJpbmcgfHwgIWlzRnVuY3Rpb24odmFsLnRvU3RyaW5nKSkpXG4gICAgICAgICAgICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIHJlcGxhY2VyLCAyKVxuICAgICAgICAgICAgICAgIDogU3RyaW5nKHZhbCk7XG59O1xuY29uc3QgcmVwbGFjZXIgPSAoX2tleSwgdmFsKSA9PiB7XG4gICAgLy8gY2FuJ3QgdXNlIGlzUmVmIGhlcmUgc2luY2UgQHZ1ZS9zaGFyZWQgaGFzIG5vIGRlcHNcbiAgICBpZiAodmFsICYmIHZhbC5fX3ZfaXNSZWYpIHtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VyKF9rZXksIHZhbC52YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTWFwKHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFtgTWFwKCR7dmFsLnNpemV9KWBdOiBbLi4udmFsLmVudHJpZXMoKV0ucmVkdWNlKChlbnRyaWVzLCBba2V5LCB2YWxdKSA9PiB7XG4gICAgICAgICAgICAgICAgZW50cmllc1tgJHtrZXl9ID0+YF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJpZXM7XG4gICAgICAgICAgICB9LCB7fSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNTZXQodmFsKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgW2BTZXQoJHt2YWwuc2l6ZX0pYF06IFsuLi52YWwudmFsdWVzKCldXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkgJiYgIWlzQXJyYXkodmFsKSAmJiAhaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbn07XG5cbmNvbnN0IEVNUFRZX09CSiA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgID8gT2JqZWN0LmZyZWV6ZSh7fSlcbiAgICA6IHt9O1xuY29uc3QgRU1QVFlfQVJSID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gT2JqZWN0LmZyZWV6ZShbXSkgOiBbXTtcbmNvbnN0IE5PT1AgPSAoKSA9PiB7IH07XG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbmNvbnN0IE5PID0gKCkgPT4gZmFsc2U7XG5jb25zdCBvblJFID0gL15vblteYS16XS87XG5jb25zdCBpc09uID0gKGtleSkgPT4gb25SRS50ZXN0KGtleSk7XG5jb25zdCBpc01vZGVsTGlzdGVuZXIgPSAoa2V5KSA9PiBrZXkuc3RhcnRzV2l0aCgnb25VcGRhdGU6Jyk7XG5jb25zdCBleHRlbmQgPSBPYmplY3QuYXNzaWduO1xuY29uc3QgcmVtb3ZlID0gKGFyciwgZWwpID0+IHtcbiAgICBjb25zdCBpID0gYXJyLmluZGV4T2YoZWwpO1xuICAgIGlmIChpID4gLTEpIHtcbiAgICAgICAgYXJyLnNwbGljZShpLCAxKTtcbiAgICB9XG59O1xuY29uc3QgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuY29uc3QgaGFzT3duID0gKHZhbCwga2V5KSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbCwga2V5KTtcbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuY29uc3QgaXNNYXAgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgTWFwXSc7XG5jb25zdCBpc1NldCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSAnW29iamVjdCBTZXRdJztcbmNvbnN0IGlzRGF0ZSA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG5jb25zdCBpc0Z1bmN0aW9uID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IGlzU3RyaW5nID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG5jb25zdCBpc1N5bWJvbCA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdzeW1ib2wnO1xuY29uc3QgaXNPYmplY3QgPSAodmFsKSA9PiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG5jb25zdCBpc1Byb21pc2UgPSAodmFsKSA9PiB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwudGhlbikgJiYgaXNGdW5jdGlvbih2YWwuY2F0Y2gpO1xufTtcbmNvbnN0IG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmNvbnN0IHRvVHlwZVN0cmluZyA9ICh2YWx1ZSkgPT4gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5jb25zdCB0b1Jhd1R5cGUgPSAodmFsdWUpID0+IHtcbiAgICAvLyBleHRyYWN0IFwiUmF3VHlwZVwiIGZyb20gc3RyaW5ncyBsaWtlIFwiW29iamVjdCBSYXdUeXBlXVwiXG4gICAgcmV0dXJuIHRvVHlwZVN0cmluZyh2YWx1ZSkuc2xpY2UoOCwgLTEpO1xufTtcbmNvbnN0IGlzUGxhaW5PYmplY3QgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG5jb25zdCBpc0ludGVnZXJLZXkgPSAoa2V5KSA9PiBpc1N0cmluZyhrZXkpICYmXG4gICAga2V5ICE9PSAnTmFOJyAmJlxuICAgIGtleVswXSAhPT0gJy0nICYmXG4gICAgJycgKyBwYXJzZUludChrZXksIDEwKSA9PT0ga2V5O1xuY29uc3QgaXNSZXNlcnZlZFByb3AgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoXG4vLyB0aGUgbGVhZGluZyBjb21tYSBpcyBpbnRlbnRpb25hbCBzbyBlbXB0eSBzdHJpbmcgXCJcIiBpcyBhbHNvIGluY2x1ZGVkXG4nLGtleSxyZWYscmVmX2ZvcixyZWZfa2V5LCcgK1xuICAgICdvblZub2RlQmVmb3JlTW91bnQsb25Wbm9kZU1vdW50ZWQsJyArXG4gICAgJ29uVm5vZGVCZWZvcmVVcGRhdGUsb25Wbm9kZVVwZGF0ZWQsJyArXG4gICAgJ29uVm5vZGVCZWZvcmVVbm1vdW50LG9uVm5vZGVVbm1vdW50ZWQnKTtcbmNvbnN0IGlzQnVpbHRJbkRpcmVjdGl2ZSA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcCgnYmluZCxjbG9hayxlbHNlLWlmLGVsc2UsZm9yLGh0bWwsaWYsbW9kZWwsb24sb25jZSxwcmUsc2hvdyxzbG90LHRleHQsbWVtbycpO1xuY29uc3QgY2FjaGVTdHJpbmdGdW5jdGlvbiA9IChmbikgPT4ge1xuICAgIGNvbnN0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICByZXR1cm4gKChzdHIpID0+IHtcbiAgICAgICAgY29uc3QgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICAgICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpO1xuICAgIH0pO1xufTtcbmNvbnN0IGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGNhbWVsaXplID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIChfLCBjKSA9PiAoYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnKSk7XG59KTtcbmNvbnN0IGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgaHlwaGVuYXRlID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKCkpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBjYXBpdGFsaXplID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSkpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCB0b0hhbmRsZXJLZXkgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IHN0ciA/IGBvbiR7Y2FwaXRhbGl6ZShzdHIpfWAgOiBgYCk7XG4vLyBjb21wYXJlIHdoZXRoZXIgYSB2YWx1ZSBoYXMgY2hhbmdlZCwgYWNjb3VudGluZyBmb3IgTmFOLlxuY29uc3QgaGFzQ2hhbmdlZCA9ICh2YWx1ZSwgb2xkVmFsdWUpID0+ICFPYmplY3QuaXModmFsdWUsIG9sZFZhbHVlKTtcbmNvbnN0IGludm9rZUFycmF5Rm5zID0gKGZucywgYXJnKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm5zW2ldKGFyZyk7XG4gICAgfVxufTtcbmNvbnN0IGRlZiA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWVcbiAgICB9KTtcbn07XG5jb25zdCB0b051bWJlciA9ICh2YWwpID0+IHtcbiAgICBjb25zdCBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICAgIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG47XG59O1xubGV0IF9nbG9iYWxUaGlzO1xuY29uc3QgZ2V0R2xvYmFsVGhpcyA9ICgpID0+IHtcbiAgICByZXR1cm4gKF9nbG9iYWxUaGlzIHx8XG4gICAgICAgIChfZ2xvYmFsVGhpcyA9XG4gICAgICAgICAgICB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICA/IGdsb2JhbFRoaXNcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICA/IHNlbGZcbiAgICAgICAgICAgICAgICAgICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyB3aW5kb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGdsb2JhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoge30pKTtcbn07XG5jb25zdCBpZGVudFJFID0gL15bXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVtfJGEtekEtWjAtOVxceEEwLVxcdUZGRkZdKiQvO1xuZnVuY3Rpb24gZ2VuUHJvcHNBY2Nlc3NFeHAobmFtZSkge1xuICAgIHJldHVybiBpZGVudFJFLnRlc3QobmFtZSlcbiAgICAgICAgPyBgX19wcm9wcy4ke25hbWV9YFxuICAgICAgICA6IGBfX3Byb3BzWyR7SlNPTi5zdHJpbmdpZnkobmFtZSl9XWA7XG59XG5cbmV4cG9ydCB7IEVNUFRZX0FSUiwgRU1QVFlfT0JKLCBOTywgTk9PUCwgUGF0Y2hGbGFnTmFtZXMsIGNhbWVsaXplLCBjYXBpdGFsaXplLCBkZWYsIGVzY2FwZUh0bWwsIGVzY2FwZUh0bWxDb21tZW50LCBleHRlbmQsIGdlblByb3BzQWNjZXNzRXhwLCBnZW5lcmF0ZUNvZGVGcmFtZSwgZ2V0R2xvYmFsVGhpcywgaGFzQ2hhbmdlZCwgaGFzT3duLCBoeXBoZW5hdGUsIGluY2x1ZGVCb29sZWFuQXR0ciwgaW52b2tlQXJyYXlGbnMsIGlzQXJyYXksIGlzQm9vbGVhbkF0dHIsIGlzQnVpbHRJbkRpcmVjdGl2ZSwgaXNEYXRlLCBpc0Z1bmN0aW9uLCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQsIGlzSFRNTFRhZywgaXNJbnRlZ2VyS2V5LCBpc0tub3duSHRtbEF0dHIsIGlzS25vd25TdmdBdHRyLCBpc01hcCwgaXNNb2RlbExpc3RlbmVyLCBpc05vVW5pdE51bWVyaWNTdHlsZVByb3AsIGlzT2JqZWN0LCBpc09uLCBpc1BsYWluT2JqZWN0LCBpc1Byb21pc2UsIGlzUmVzZXJ2ZWRQcm9wLCBpc1NTUlNhZmVBdHRyTmFtZSwgaXNTVkdUYWcsIGlzU2V0LCBpc1NwZWNpYWxCb29sZWFuQXR0ciwgaXNTdHJpbmcsIGlzU3ltYm9sLCBpc1ZvaWRUYWcsIGxvb3NlRXF1YWwsIGxvb3NlSW5kZXhPZiwgbWFrZU1hcCwgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVByb3BzLCBub3JtYWxpemVTdHlsZSwgb2JqZWN0VG9TdHJpbmcsIHBhcnNlU3RyaW5nU3R5bGUsIHByb3BzVG9BdHRyTWFwLCByZW1vdmUsIHNsb3RGbGFnc1RleHQsIHN0cmluZ2lmeVN0eWxlLCB0b0Rpc3BsYXlTdHJpbmcsIHRvSGFuZGxlcktleSwgdG9OdW1iZXIsIHRvUmF3VHlwZSwgdG9UeXBlU3RyaW5nIH07XG4iLCIvKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdmFsaWRhdGVOYW1lc3BhY2UgZnJvbSAnLi92YWxpZGF0ZU5hbWVzcGFjZS5qcyc7XG5pbXBvcnQgdmFsaWRhdGVIb29rTmFtZSBmcm9tICcuL3ZhbGlkYXRlSG9va05hbWUuanMnO1xuLyoqXG4gKiBAY2FsbGJhY2sgQWRkSG9va1xuICpcbiAqIEFkZHMgdGhlIGhvb2sgdG8gdGhlIGFwcHJvcHJpYXRlIGhvb2tzIGNvbnRhaW5lci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gICAgICAgICAgICAgICBob29rTmFtZSAgICAgIE5hbWUgb2YgaG9vayB0byBhZGRcbiAqIEBwYXJhbSB7c3RyaW5nfSAgICAgICAgICAgICAgIG5hbWVzcGFjZSAgICAgVGhlIHVuaXF1ZSBuYW1lc3BhY2UgaWRlbnRpZnlpbmcgdGhlIGNhbGxiYWNrIGluIHRoZSBmb3JtIGB2ZW5kb3IvcGx1Z2luL2Z1bmN0aW9uYC5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuQ2FsbGJhY2t9IGNhbGxiYWNrICAgICAgRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBob29rIGlzIHJ1blxuICogQHBhcmFtIHtudW1iZXJ9ICAgICAgICAgICAgICAgW3ByaW9yaXR5PTEwXSBQcmlvcml0eSBvZiB0aGlzIGhvb2tcbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCwgd2hlbiBpbnZva2VkLCB3aWxsIGFkZCBhIGhvb2suXG4gKlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5Ib29rc30gICAgaG9va3MgICAgSG9va3MgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLlN0b3JlS2V5fSBzdG9yZUtleVxuICpcbiAqIEByZXR1cm4ge0FkZEhvb2t9IEZ1bmN0aW9uIHRoYXQgYWRkcyBhIG5ldyBob29rLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUFkZEhvb2soaG9va3MsIHN0b3JlS2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBhZGRIb29rKGhvb2tOYW1lLCBuYW1lc3BhY2UsIGNhbGxiYWNrKSB7XG4gICAgbGV0IHByaW9yaXR5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAxMDtcbiAgICBjb25zdCBob29rc1N0b3JlID0gaG9va3Nbc3RvcmVLZXldO1xuXG4gICAgaWYgKCF2YWxpZGF0ZUhvb2tOYW1lKGhvb2tOYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdmFsaWRhdGVOYW1lc3BhY2UobmFtZXNwYWNlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICgnZnVuY3Rpb24nICE9PSB0eXBlb2YgY2FsbGJhY2spIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLmVycm9yKCdUaGUgaG9vayBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBWYWxpZGF0ZSBudW1lcmljIHByaW9yaXR5XG5cblxuICAgIGlmICgnbnVtYmVyJyAhPT0gdHlwZW9mIHByaW9yaXR5KSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcignSWYgc3BlY2lmaWVkLCB0aGUgaG9vayBwcmlvcml0eSBtdXN0IGJlIGEgbnVtYmVyLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZXIgPSB7XG4gICAgICBjYWxsYmFjayxcbiAgICAgIHByaW9yaXR5LFxuICAgICAgbmFtZXNwYWNlXG4gICAgfTtcblxuICAgIGlmIChob29rc1N0b3JlW2hvb2tOYW1lXSkge1xuICAgICAgLy8gRmluZCB0aGUgY29ycmVjdCBpbnNlcnQgaW5kZXggb2YgdGhlIG5ldyBob29rLlxuICAgICAgY29uc3QgaGFuZGxlcnMgPSBob29rc1N0b3JlW2hvb2tOYW1lXS5oYW5kbGVycztcbiAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuXG4gICAgICBsZXQgaTtcblxuICAgICAgZm9yIChpID0gaGFuZGxlcnMubGVuZ3RoOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIGlmIChwcmlvcml0eSA+PSBoYW5kbGVyc1tpIC0gMV0ucHJpb3JpdHkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaSA9PT0gaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgIC8vIElmIGFwcGVuZCwgb3BlcmF0ZSB2aWEgZGlyZWN0IGFzc2lnbm1lbnQuXG4gICAgICAgIGhhbmRsZXJzW2ldID0gaGFuZGxlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSwgaW5zZXJ0IGJlZm9yZSBpbmRleCB2aWEgc3BsaWNlLlxuICAgICAgICBoYW5kbGVycy5zcGxpY2UoaSwgMCwgaGFuZGxlcik7XG4gICAgICB9IC8vIFdlIG1heSBhbHNvIGJlIGN1cnJlbnRseSBleGVjdXRpbmcgdGhpcyBob29rLiAgSWYgdGhlIGNhbGxiYWNrXG4gICAgICAvLyB3ZSdyZSBhZGRpbmcgd291bGQgY29tZSBhZnRlciB0aGUgY3VycmVudCBjYWxsYmFjaywgdGhlcmUncyBub1xuICAgICAgLy8gcHJvYmxlbTsgb3RoZXJ3aXNlIHdlIG5lZWQgdG8gaW5jcmVhc2UgdGhlIGV4ZWN1dGlvbiBpbmRleCBvZlxuICAgICAgLy8gYW55IG90aGVyIHJ1bnMgYnkgMSB0byBhY2NvdW50IGZvciB0aGUgYWRkZWQgZWxlbWVudC5cblxuXG4gICAgICBob29rc1N0b3JlLl9fY3VycmVudC5mb3JFYWNoKGhvb2tJbmZvID0+IHtcbiAgICAgICAgaWYgKGhvb2tJbmZvLm5hbWUgPT09IGhvb2tOYW1lICYmIGhvb2tJbmZvLmN1cnJlbnRJbmRleCA+PSBpKSB7XG4gICAgICAgICAgaG9va0luZm8uY3VycmVudEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCBob29rIG9mIGl0cyB0eXBlLlxuICAgICAgaG9va3NTdG9yZVtob29rTmFtZV0gPSB7XG4gICAgICAgIGhhbmRsZXJzOiBbaGFuZGxlcl0sXG4gICAgICAgIHJ1bnM6IDBcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGhvb2tOYW1lICE9PSAnaG9va0FkZGVkJykge1xuICAgICAgaG9va3MuZG9BY3Rpb24oJ2hvb2tBZGRlZCcsIGhvb2tOYW1lLCBuYW1lc3BhY2UsIGNhbGxiYWNrLCBwcmlvcml0eSk7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVBZGRIb29rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlQWRkSG9vay5qcy5tYXAiLCIvKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCwgd2hlbiBpbnZva2VkLCB3aWxsIHJldHVybiB0aGUgbmFtZSBvZiB0aGVcbiAqIGN1cnJlbnRseSBydW5uaW5nIGhvb2ssIG9yIGBudWxsYCBpZiBubyBob29rIG9mIHRoZSBnaXZlbiB0eXBlIGlzIGN1cnJlbnRseVxuICogcnVubmluZy5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLkhvb2tzfSAgICBob29rcyAgICBIb29rcyBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuU3RvcmVLZXl9IHN0b3JlS2V5XG4gKlxuICogQHJldHVybiB7KCkgPT4gc3RyaW5nIHwgbnVsbH0gRnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjdXJyZW50IGhvb2sgbmFtZSBvciBudWxsLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDdXJyZW50SG9vayhob29rcywgc3RvcmVLZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGN1cnJlbnRIb29rKCkge1xuICAgIHZhciBfaG9va3NTdG9yZSRfX2N1cnJlbnQsIF9ob29rc1N0b3JlJF9fY3VycmVudDI7XG5cbiAgICBjb25zdCBob29rc1N0b3JlID0gaG9va3Nbc3RvcmVLZXldO1xuICAgIHJldHVybiAoX2hvb2tzU3RvcmUkX19jdXJyZW50ID0gKF9ob29rc1N0b3JlJF9fY3VycmVudDIgPSBob29rc1N0b3JlLl9fY3VycmVudFtob29rc1N0b3JlLl9fY3VycmVudC5sZW5ndGggLSAxXSkgPT09IG51bGwgfHwgX2hvb2tzU3RvcmUkX19jdXJyZW50MiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2hvb2tzU3RvcmUkX19jdXJyZW50Mi5uYW1lKSAhPT0gbnVsbCAmJiBfaG9va3NTdG9yZSRfX2N1cnJlbnQgIT09IHZvaWQgMCA/IF9ob29rc1N0b3JlJF9fY3VycmVudCA6IG51bGw7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUN1cnJlbnRIb29rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlQ3VycmVudEhvb2suanMubWFwIiwiLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHZhbGlkYXRlSG9va05hbWUgZnJvbSAnLi92YWxpZGF0ZUhvb2tOYW1lLmpzJztcbi8qKlxuICogQGNhbGxiYWNrIERpZEhvb2tcbiAqXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgdGltZXMgYW4gYWN0aW9uIGhhcyBiZWVuIGZpcmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBob29rTmFtZSBUaGUgaG9vayBuYW1lIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm4ge251bWJlciB8IHVuZGVmaW5lZH0gVGhlIG51bWJlciBvZiB0aW1lcyB0aGUgaG9vayBoYXMgcnVuLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoLCB3aGVuIGludm9rZWQsIHdpbGwgcmV0dXJuIHRoZSBudW1iZXIgb2YgdGltZXMgYVxuICogaG9vayBoYXMgYmVlbiBjYWxsZWQuXG4gKlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5Ib29rc30gICAgaG9va3MgICAgSG9va3MgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLlN0b3JlS2V5fSBzdG9yZUtleVxuICpcbiAqIEByZXR1cm4ge0RpZEhvb2t9IEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGhvb2sncyBjYWxsIGNvdW50LlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURpZEhvb2soaG9va3MsIHN0b3JlS2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBkaWRIb29rKGhvb2tOYW1lKSB7XG4gICAgY29uc3QgaG9va3NTdG9yZSA9IGhvb2tzW3N0b3JlS2V5XTtcblxuICAgIGlmICghdmFsaWRhdGVIb29rTmFtZShob29rTmFtZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9va3NTdG9yZVtob29rTmFtZV0gJiYgaG9va3NTdG9yZVtob29rTmFtZV0ucnVucyA/IGhvb2tzU3RvcmVbaG9va05hbWVdLnJ1bnMgOiAwO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVEaWRIb29rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRGlkSG9vay5qcy5tYXAiLCIvKipcbiAqIEBjYWxsYmFjayBEb2luZ0hvb2tcbiAqIFJldHVybnMgd2hldGhlciBhIGhvb2sgaXMgY3VycmVudGx5IGJlaW5nIGV4ZWN1dGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbaG9va05hbWVdIFRoZSBuYW1lIG9mIHRoZSBob29rIHRvIGNoZWNrIGZvci4gIElmXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbWl0dGVkLCB3aWxsIGNoZWNrIGZvciBhbnkgaG9vayBiZWluZyBleGVjdXRlZC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBob29rIGlzIGJlaW5nIGV4ZWN1dGVkLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoLCB3aGVuIGludm9rZWQsIHdpbGwgcmV0dXJuIHdoZXRoZXIgYSBob29rIGlzXG4gKiBjdXJyZW50bHkgYmVpbmcgZXhlY3V0ZWQuXG4gKlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5Ib29rc30gICAgaG9va3MgICAgSG9va3MgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLlN0b3JlS2V5fSBzdG9yZUtleVxuICpcbiAqIEByZXR1cm4ge0RvaW5nSG9va30gRnVuY3Rpb24gdGhhdCByZXR1cm5zIHdoZXRoZXIgYSBob29rIGlzIGN1cnJlbnRseVxuICogICAgICAgICAgICAgICAgICAgICBiZWluZyBleGVjdXRlZC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRG9pbmdIb29rKGhvb2tzLCBzdG9yZUtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gZG9pbmdIb29rKGhvb2tOYW1lKSB7XG4gICAgY29uc3QgaG9va3NTdG9yZSA9IGhvb2tzW3N0b3JlS2V5XTsgLy8gSWYgdGhlIGhvb2tOYW1lIHdhcyBub3QgcGFzc2VkLCBjaGVjayBmb3IgYW55IGN1cnJlbnQgaG9vay5cblxuICAgIGlmICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mIGhvb2tOYW1lKSB7XG4gICAgICByZXR1cm4gJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBob29rc1N0b3JlLl9fY3VycmVudFswXTtcbiAgICB9IC8vIFJldHVybiB0aGUgX19jdXJyZW50IGhvb2suXG5cblxuICAgIHJldHVybiBob29rc1N0b3JlLl9fY3VycmVudFswXSA/IGhvb2tOYW1lID09PSBob29rc1N0b3JlLl9fY3VycmVudFswXS5uYW1lIDogZmFsc2U7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZURvaW5nSG9vaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZURvaW5nSG9vay5qcy5tYXAiLCIvKipcbiAqIEBjYWxsYmFjayBIYXNIb29rXG4gKlxuICogUmV0dXJucyB3aGV0aGVyIGFueSBoYW5kbGVycyBhcmUgYXR0YWNoZWQgZm9yIHRoZSBnaXZlbiBob29rTmFtZSBhbmQgb3B0aW9uYWwgbmFtZXNwYWNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBob29rTmFtZSAgICBUaGUgbmFtZSBvZiB0aGUgaG9vayB0byBjaGVjayBmb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gW25hbWVzcGFjZV0gT3B0aW9uYWwuIFRoZSB1bmlxdWUgbmFtZXNwYWNlIGlkZW50aWZ5aW5nIHRoZSBjYWxsYmFja1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBmb3JtIGB2ZW5kb3IvcGx1Z2luL2Z1bmN0aW9uYC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZXJlIGFyZSBoYW5kbGVycyB0aGF0IGFyZSBhdHRhY2hlZCB0byB0aGUgZ2l2ZW4gaG9vay5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCwgd2hlbiBpbnZva2VkLCB3aWxsIHJldHVybiB3aGV0aGVyIGFueSBoYW5kbGVycyBhcmVcbiAqIGF0dGFjaGVkIHRvIGEgcGFydGljdWxhciBob29rLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuSG9va3N9ICAgIGhvb2tzICAgIEhvb2tzIGluc3RhbmNlLlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5TdG9yZUtleX0gc3RvcmVLZXlcbiAqXG4gKiBAcmV0dXJuIHtIYXNIb29rfSBGdW5jdGlvbiB0aGF0IHJldHVybnMgd2hldGhlciBhbnkgaGFuZGxlcnMgYXJlXG4gKiAgICAgICAgICAgICAgICAgICBhdHRhY2hlZCB0byBhIHBhcnRpY3VsYXIgaG9vayBhbmQgb3B0aW9uYWwgbmFtZXNwYWNlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVIYXNIb29rKGhvb2tzLCBzdG9yZUtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gaGFzSG9vayhob29rTmFtZSwgbmFtZXNwYWNlKSB7XG4gICAgY29uc3QgaG9va3NTdG9yZSA9IGhvb2tzW3N0b3JlS2V5XTsgLy8gVXNlIHRoZSBuYW1lc3BhY2UgaWYgcHJvdmlkZWQuXG5cbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBuYW1lc3BhY2UpIHtcbiAgICAgIHJldHVybiBob29rTmFtZSBpbiBob29rc1N0b3JlICYmIGhvb2tzU3RvcmVbaG9va05hbWVdLmhhbmRsZXJzLnNvbWUoaG9vayA9PiBob29rLm5hbWVzcGFjZSA9PT0gbmFtZXNwYWNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9va05hbWUgaW4gaG9va3NTdG9yZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlSGFzSG9vaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUhhc0hvb2suanMubWFwIiwiLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IGNyZWF0ZUFkZEhvb2sgZnJvbSAnLi9jcmVhdGVBZGRIb29rJztcbmltcG9ydCBjcmVhdGVSZW1vdmVIb29rIGZyb20gJy4vY3JlYXRlUmVtb3ZlSG9vayc7XG5pbXBvcnQgY3JlYXRlSGFzSG9vayBmcm9tICcuL2NyZWF0ZUhhc0hvb2snO1xuaW1wb3J0IGNyZWF0ZVJ1bkhvb2sgZnJvbSAnLi9jcmVhdGVSdW5Ib29rJztcbmltcG9ydCBjcmVhdGVDdXJyZW50SG9vayBmcm9tICcuL2NyZWF0ZUN1cnJlbnRIb29rJztcbmltcG9ydCBjcmVhdGVEb2luZ0hvb2sgZnJvbSAnLi9jcmVhdGVEb2luZ0hvb2snO1xuaW1wb3J0IGNyZWF0ZURpZEhvb2sgZnJvbSAnLi9jcmVhdGVEaWRIb29rJztcbi8qKlxuICogSW50ZXJuYWwgY2xhc3MgZm9yIGNvbnN0cnVjdGluZyBob29rcy4gVXNlIGBjcmVhdGVIb29rcygpYCBmdW5jdGlvblxuICpcbiAqIE5vdGUsIGl0IGlzIG5lY2Vzc2FyeSB0byBleHBvc2UgdGhpcyBjbGFzcyB0byBtYWtlIGl0cyB0eXBlIHB1YmxpYy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmV4cG9ydCBjbGFzcyBfSG9va3Mge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKiogQHR5cGUge2ltcG9ydCgnLicpLlN0b3JlfSBhY3Rpb25zICovXG4gICAgdGhpcy5hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmFjdGlvbnMuX19jdXJyZW50ID0gW107XG4gICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4nKS5TdG9yZX0gZmlsdGVycyAqL1xuXG4gICAgdGhpcy5maWx0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmZpbHRlcnMuX19jdXJyZW50ID0gW107XG4gICAgdGhpcy5hZGRBY3Rpb24gPSBjcmVhdGVBZGRIb29rKHRoaXMsICdhY3Rpb25zJyk7XG4gICAgdGhpcy5hZGRGaWx0ZXIgPSBjcmVhdGVBZGRIb29rKHRoaXMsICdmaWx0ZXJzJyk7XG4gICAgdGhpcy5yZW1vdmVBY3Rpb24gPSBjcmVhdGVSZW1vdmVIb29rKHRoaXMsICdhY3Rpb25zJyk7XG4gICAgdGhpcy5yZW1vdmVGaWx0ZXIgPSBjcmVhdGVSZW1vdmVIb29rKHRoaXMsICdmaWx0ZXJzJyk7XG4gICAgdGhpcy5oYXNBY3Rpb24gPSBjcmVhdGVIYXNIb29rKHRoaXMsICdhY3Rpb25zJyk7XG4gICAgdGhpcy5oYXNGaWx0ZXIgPSBjcmVhdGVIYXNIb29rKHRoaXMsICdmaWx0ZXJzJyk7XG4gICAgdGhpcy5yZW1vdmVBbGxBY3Rpb25zID0gY3JlYXRlUmVtb3ZlSG9vayh0aGlzLCAnYWN0aW9ucycsIHRydWUpO1xuICAgIHRoaXMucmVtb3ZlQWxsRmlsdGVycyA9IGNyZWF0ZVJlbW92ZUhvb2sodGhpcywgJ2ZpbHRlcnMnLCB0cnVlKTtcbiAgICB0aGlzLmRvQWN0aW9uID0gY3JlYXRlUnVuSG9vayh0aGlzLCAnYWN0aW9ucycpO1xuICAgIHRoaXMuYXBwbHlGaWx0ZXJzID0gY3JlYXRlUnVuSG9vayh0aGlzLCAnZmlsdGVycycsIHRydWUpO1xuICAgIHRoaXMuY3VycmVudEFjdGlvbiA9IGNyZWF0ZUN1cnJlbnRIb29rKHRoaXMsICdhY3Rpb25zJyk7XG4gICAgdGhpcy5jdXJyZW50RmlsdGVyID0gY3JlYXRlQ3VycmVudEhvb2sodGhpcywgJ2ZpbHRlcnMnKTtcbiAgICB0aGlzLmRvaW5nQWN0aW9uID0gY3JlYXRlRG9pbmdIb29rKHRoaXMsICdhY3Rpb25zJyk7XG4gICAgdGhpcy5kb2luZ0ZpbHRlciA9IGNyZWF0ZURvaW5nSG9vayh0aGlzLCAnZmlsdGVycycpO1xuICAgIHRoaXMuZGlkQWN0aW9uID0gY3JlYXRlRGlkSG9vayh0aGlzLCAnYWN0aW9ucycpO1xuICAgIHRoaXMuZGlkRmlsdGVyID0gY3JlYXRlRGlkSG9vayh0aGlzLCAnZmlsdGVycycpO1xuICB9XG5cbn1cbi8qKiBAdHlwZWRlZiB7X0hvb2tzfSBIb29rcyAqL1xuXG4vKipcbiAqIFJldHVybnMgYW4gaW5zdGFuY2Ugb2YgdGhlIGhvb2tzIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtIb29rc30gQSBIb29rcyBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVIb29rcygpIHtcbiAgcmV0dXJuIG5ldyBfSG9va3MoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlSG9va3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVIb29rcy5qcy5tYXAiLCIvKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdmFsaWRhdGVOYW1lc3BhY2UgZnJvbSAnLi92YWxpZGF0ZU5hbWVzcGFjZS5qcyc7XG5pbXBvcnQgdmFsaWRhdGVIb29rTmFtZSBmcm9tICcuL3ZhbGlkYXRlSG9va05hbWUuanMnO1xuLyoqXG4gKiBAY2FsbGJhY2sgUmVtb3ZlSG9va1xuICogUmVtb3ZlcyB0aGUgc3BlY2lmaWVkIGNhbGxiYWNrIChvciBhbGwgY2FsbGJhY2tzKSBmcm9tIHRoZSBob29rIHdpdGggYSBnaXZlbiBob29rTmFtZVxuICogYW5kIG5hbWVzcGFjZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaG9va05hbWUgIFRoZSBuYW1lIG9mIHRoZSBob29rIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2UgVGhlIHVuaXF1ZSBuYW1lc3BhY2UgaWRlbnRpZnlpbmcgdGhlIGNhbGxiYWNrIGluIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtIGB2ZW5kb3IvcGx1Z2luL2Z1bmN0aW9uYC5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXIgfCB1bmRlZmluZWR9IFRoZSBudW1iZXIgb2YgY2FsbGJhY2tzIHJlbW92ZWQuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gaW52b2tlZCwgd2lsbCByZW1vdmUgYSBzcGVjaWZpZWQgaG9vayBvciBhbGxcbiAqIGhvb2tzIGJ5IHRoZSBnaXZlbiBuYW1lLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuSG9va3N9ICAgIGhvb2tzICAgICAgICAgICAgIEhvb2tzIGluc3RhbmNlLlxuICogQHBhcmFtIHtpbXBvcnQoJy4nKS5TdG9yZUtleX0gc3RvcmVLZXlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gICAgICAgICAgICAgIFtyZW1vdmVBbGw9ZmFsc2VdIFdoZXRoZXIgdG8gcmVtb3ZlIGFsbCBjYWxsYmFja3MgZm9yIGEgaG9va05hbWUsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRob3V0IHJlZ2FyZCB0byBuYW1lc3BhY2UuIFVzZWQgdG8gY3JlYXRlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgcmVtb3ZlQWxsKmAgZnVuY3Rpb25zLlxuICpcbiAqIEByZXR1cm4ge1JlbW92ZUhvb2t9IEZ1bmN0aW9uIHRoYXQgcmVtb3ZlcyBob29rcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSZW1vdmVIb29rKGhvb2tzLCBzdG9yZUtleSkge1xuICBsZXQgcmVtb3ZlQWxsID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlbW92ZUhvb2soaG9va05hbWUsIG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IGhvb2tzU3RvcmUgPSBob29rc1tzdG9yZUtleV07XG5cbiAgICBpZiAoIXZhbGlkYXRlSG9va05hbWUoaG9va05hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFyZW1vdmVBbGwgJiYgIXZhbGlkYXRlTmFtZXNwYWNlKG5hbWVzcGFjZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEJhaWwgaWYgbm8gaG9va3MgZXhpc3QgYnkgdGhpcyBuYW1lLlxuXG5cbiAgICBpZiAoIWhvb2tzU3RvcmVbaG9va05hbWVdKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBsZXQgaGFuZGxlcnNSZW1vdmVkID0gMDtcblxuICAgIGlmIChyZW1vdmVBbGwpIHtcbiAgICAgIGhhbmRsZXJzUmVtb3ZlZCA9IGhvb2tzU3RvcmVbaG9va05hbWVdLmhhbmRsZXJzLmxlbmd0aDtcbiAgICAgIGhvb2tzU3RvcmVbaG9va05hbWVdID0ge1xuICAgICAgICBydW5zOiBob29rc1N0b3JlW2hvb2tOYW1lXS5ydW5zLFxuICAgICAgICBoYW5kbGVyczogW11cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRyeSB0byBmaW5kIHRoZSBzcGVjaWZpZWQgY2FsbGJhY2sgdG8gcmVtb3ZlLlxuICAgICAgY29uc3QgaGFuZGxlcnMgPSBob29rc1N0b3JlW2hvb2tOYW1lXS5oYW5kbGVycztcblxuICAgICAgZm9yIChsZXQgaSA9IGhhbmRsZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChoYW5kbGVyc1tpXS5uYW1lc3BhY2UgPT09IG5hbWVzcGFjZSkge1xuICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBoYW5kbGVyc1JlbW92ZWQrKzsgLy8gVGhpcyBjYWxsYmFjayBtYXkgYWxzbyBiZSBwYXJ0IG9mIGEgaG9vayB0aGF0IGlzXG4gICAgICAgICAgLy8gY3VycmVudGx5IGV4ZWN1dGluZy4gIElmIHRoZSBjYWxsYmFjayB3ZSdyZSByZW1vdmluZ1xuICAgICAgICAgIC8vIGNvbWVzIGFmdGVyIHRoZSBjdXJyZW50IGNhbGxiYWNrLCB0aGVyZSdzIG5vIHByb2JsZW07XG4gICAgICAgICAgLy8gb3RoZXJ3aXNlIHdlIG5lZWQgdG8gZGVjcmVhc2UgdGhlIGV4ZWN1dGlvbiBpbmRleCBvZiBhbnlcbiAgICAgICAgICAvLyBvdGhlciBydW5zIGJ5IDEgdG8gYWNjb3VudCBmb3IgdGhlIHJlbW92ZWQgZWxlbWVudC5cblxuICAgICAgICAgIGhvb2tzU3RvcmUuX19jdXJyZW50LmZvckVhY2goaG9va0luZm8gPT4ge1xuICAgICAgICAgICAgaWYgKGhvb2tJbmZvLm5hbWUgPT09IGhvb2tOYW1lICYmIGhvb2tJbmZvLmN1cnJlbnRJbmRleCA+PSBpKSB7XG4gICAgICAgICAgICAgIGhvb2tJbmZvLmN1cnJlbnRJbmRleC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhvb2tOYW1lICE9PSAnaG9va1JlbW92ZWQnKSB7XG4gICAgICBob29rcy5kb0FjdGlvbignaG9va1JlbW92ZWQnLCBob29rTmFtZSwgbmFtZXNwYWNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFuZGxlcnNSZW1vdmVkO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVSZW1vdmVIb29rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlUmVtb3ZlSG9vay5qcy5tYXAiLCIvKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCwgd2hlbiBpbnZva2VkLCB3aWxsIGV4ZWN1dGUgYWxsIGNhbGxiYWNrc1xuICogcmVnaXN0ZXJlZCB0byBhIGhvb2sgb2YgdGhlIHNwZWNpZmllZCB0eXBlLCBvcHRpb25hbGx5IHJldHVybmluZyB0aGUgZmluYWxcbiAqIHZhbHVlIG9mIHRoZSBjYWxsIGNoYWluLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCcuJykuSG9va3N9ICAgIGhvb2tzICAgICAgICAgICAgICAgICAgSG9va3MgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLicpLlN0b3JlS2V5fSBzdG9yZUtleVxuICogQHBhcmFtIHtib29sZWFufSAgICAgICAgICAgICAgW3JldHVybkZpcnN0QXJnPWZhbHNlXSBXaGV0aGVyIGVhY2ggaG9vayBjYWxsYmFjayBpcyBleHBlY3RlZCB0b1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRzIGZpcnN0IGFyZ3VtZW50LlxuICpcbiAqIEByZXR1cm4geyhob29rTmFtZTpzdHJpbmcsIC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdW5rbm93bn0gRnVuY3Rpb24gdGhhdCBydW5zIGhvb2sgY2FsbGJhY2tzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVSdW5Ib29rKGhvb2tzLCBzdG9yZUtleSkge1xuICBsZXQgcmV0dXJuRmlyc3RBcmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gcnVuSG9va3MoaG9va05hbWUpIHtcbiAgICBjb25zdCBob29rc1N0b3JlID0gaG9va3Nbc3RvcmVLZXldO1xuXG4gICAgaWYgKCFob29rc1N0b3JlW2hvb2tOYW1lXSkge1xuICAgICAgaG9va3NTdG9yZVtob29rTmFtZV0gPSB7XG4gICAgICAgIGhhbmRsZXJzOiBbXSxcbiAgICAgICAgcnVuczogMFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBob29rc1N0b3JlW2hvb2tOYW1lXS5ydW5zKys7XG4gICAgY29uc3QgaGFuZGxlcnMgPSBob29rc1N0b3JlW2hvb2tOYW1lXS5oYW5kbGVyczsgLy8gVGhlIGZvbGxvd2luZyBjb2RlIGlzIHN0cmlwcGVkIGZyb20gcHJvZHVjdGlvbiBidWlsZHMuXG5cbiAgICBpZiAoJ3Byb2R1Y3Rpb24nICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgLy8gSGFuZGxlIGFueSAnYWxsJyBob29rcyByZWdpc3RlcmVkLlxuICAgICAgaWYgKCdob29rQWRkZWQnICE9PSBob29rTmFtZSAmJiBob29rc1N0b3JlLmFsbCkge1xuICAgICAgICBoYW5kbGVycy5wdXNoKC4uLmhvb2tzU3RvcmUuYWxsLmhhbmRsZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoIWhhbmRsZXJzIHx8ICFoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiByZXR1cm5GaXJzdEFyZyA/IGFyZ3NbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgaG9va0luZm8gPSB7XG4gICAgICBuYW1lOiBob29rTmFtZSxcbiAgICAgIGN1cnJlbnRJbmRleDogMFxuICAgIH07XG5cbiAgICBob29rc1N0b3JlLl9fY3VycmVudC5wdXNoKGhvb2tJbmZvKTtcblxuICAgIHdoaWxlIChob29rSW5mby5jdXJyZW50SW5kZXggPCBoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1tob29rSW5mby5jdXJyZW50SW5kZXhdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gaGFuZGxlci5jYWxsYmFjay5hcHBseShudWxsLCBhcmdzKTtcblxuICAgICAgaWYgKHJldHVybkZpcnN0QXJnKSB7XG4gICAgICAgIGFyZ3NbMF0gPSByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGhvb2tJbmZvLmN1cnJlbnRJbmRleCsrO1xuICAgIH1cblxuICAgIGhvb2tzU3RvcmUuX19jdXJyZW50LnBvcCgpO1xuXG4gICAgaWYgKHJldHVybkZpcnN0QXJnKSB7XG4gICAgICByZXR1cm4gYXJnc1swXTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVJ1bkhvb2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVSdW5Ib29rLmpzLm1hcCIsIi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCBjcmVhdGVIb29rcyBmcm9tICcuL2NyZWF0ZUhvb2tzJztcbi8qKiBAdHlwZWRlZiB7KC4uLmFyZ3M6IGFueVtdKT0+YW55fSBDYWxsYmFjayAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIEhhbmRsZXJcbiAqIEBwcm9wZXJ0eSB7Q2FsbGJhY2t9IGNhbGxiYWNrICBUaGUgY2FsbGJhY2tcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAgIG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlXG4gKiBAcHJvcGVydHkge251bWJlcn0gICBwcmlvcml0eSAgVGhlIG5hbWVzcGFjZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgSG9va1xuICogQHByb3BlcnR5IHtIYW5kbGVyW119IGhhbmRsZXJzIEFycmF5IG9mIGhhbmRsZXJzXG4gKiBAcHJvcGVydHkge251bWJlcn0gICAgcnVucyAgICAgUnVuIGNvdW50ZXJcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIEN1cnJlbnRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lICAgICAgICAgSG9vayBuYW1lXG4gKiBAcHJvcGVydHkge251bWJlcn0gY3VycmVudEluZGV4IFRoZSBpbmRleFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge1JlY29yZDxzdHJpbmcsIEhvb2s+ICYge19fY3VycmVudDogQ3VycmVudFtdfX0gU3RvcmVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsnYWN0aW9ucycgfCAnZmlsdGVycyd9IFN0b3JlS2V5XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2NyZWF0ZUhvb2tzJykuSG9va3N9IEhvb2tzXG4gKi9cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRIb29rcyA9IGNyZWF0ZUhvb2tzKCk7XG5jb25zdCB7XG4gIGFkZEFjdGlvbixcbiAgYWRkRmlsdGVyLFxuICByZW1vdmVBY3Rpb24sXG4gIHJlbW92ZUZpbHRlcixcbiAgaGFzQWN0aW9uLFxuICBoYXNGaWx0ZXIsXG4gIHJlbW92ZUFsbEFjdGlvbnMsXG4gIHJlbW92ZUFsbEZpbHRlcnMsXG4gIGRvQWN0aW9uLFxuICBhcHBseUZpbHRlcnMsXG4gIGN1cnJlbnRBY3Rpb24sXG4gIGN1cnJlbnRGaWx0ZXIsXG4gIGRvaW5nQWN0aW9uLFxuICBkb2luZ0ZpbHRlcixcbiAgZGlkQWN0aW9uLFxuICBkaWRGaWx0ZXIsXG4gIGFjdGlvbnMsXG4gIGZpbHRlcnNcbn0gPSBkZWZhdWx0SG9va3M7XG5leHBvcnQgeyBjcmVhdGVIb29rcywgYWRkQWN0aW9uLCBhZGRGaWx0ZXIsIHJlbW92ZUFjdGlvbiwgcmVtb3ZlRmlsdGVyLCBoYXNBY3Rpb24sIGhhc0ZpbHRlciwgcmVtb3ZlQWxsQWN0aW9ucywgcmVtb3ZlQWxsRmlsdGVycywgZG9BY3Rpb24sIGFwcGx5RmlsdGVycywgY3VycmVudEFjdGlvbiwgY3VycmVudEZpbHRlciwgZG9pbmdBY3Rpb24sIGRvaW5nRmlsdGVyLCBkaWRBY3Rpb24sIGRpZEZpbHRlciwgYWN0aW9ucywgZmlsdGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiLyoqXG4gKiBWYWxpZGF0ZSBhIGhvb2tOYW1lIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaG9va05hbWUgVGhlIGhvb2sgbmFtZSB0byB2YWxpZGF0ZS4gU2hvdWxkIGJlIGEgbm9uIGVtcHR5IHN0cmluZyBjb250YWluaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgb25seSBudW1iZXJzLCBsZXR0ZXJzLCBkYXNoZXMsIHBlcmlvZHMgYW5kIHVuZGVyc2NvcmVzLiBBbHNvLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBob29rIG5hbWUgY2Fubm90IGJlZ2luIHdpdGggYF9fYC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBob29rIG5hbWUgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlSG9va05hbWUoaG9va05hbWUpIHtcbiAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgaG9va05hbWUgfHwgJycgPT09IGhvb2tOYW1lKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKCdUaGUgaG9vayBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nLicpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICgvXl9fLy50ZXN0KGhvb2tOYW1lKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5lcnJvcignVGhlIGhvb2sgbmFtZSBjYW5ub3QgYmVnaW4gd2l0aCBgX19gLicpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghL15bYS16QS1aXVthLXpBLVowLTlfLi1dKiQvLnRlc3QoaG9va05hbWUpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKCdUaGUgaG9vayBuYW1lIGNhbiBvbmx5IGNvbnRhaW4gbnVtYmVycywgbGV0dGVycywgZGFzaGVzLCBwZXJpb2RzIGFuZCB1bmRlcnNjb3Jlcy4nKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGVIb29rTmFtZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRlSG9va05hbWUuanMubWFwIiwiLyoqXG4gKiBWYWxpZGF0ZSBhIG5hbWVzcGFjZSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHRvIHZhbGlkYXRlIC0gc2hvdWxkIHRha2UgdGhlIGZvcm1cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgYHZlbmRvci9wbHVnaW4vZnVuY3Rpb25gLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG5hbWVzcGFjZSBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVOYW1lc3BhY2UobmFtZXNwYWNlKSB7XG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIG5hbWVzcGFjZSB8fCAnJyA9PT0gbmFtZXNwYWNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKCdUaGUgbmFtZXNwYWNlIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nLicpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghL15bYS16QS1aXVthLXpBLVowLTlfLlxcLVxcL10qJC8udGVzdChuYW1lc3BhY2UpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKCdUaGUgbmFtZXNwYWNlIGNhbiBvbmx5IGNvbnRhaW4gbnVtYmVycywgbGV0dGVycywgZGFzaGVzLCBwZXJpb2RzLCB1bmRlcnNjb3JlcyBhbmQgc2xhc2hlcy4nKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGVOYW1lc3BhY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0ZU5hbWVzcGFjZS5qcy5tYXAiLCIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgVGFubmluIGZyb20gJ3Rhbm5pbic7XG4vKipcbiAqIEB0eXBlZGVmIHtSZWNvcmQ8c3RyaW5nLGFueT59IExvY2FsZURhdGFcbiAqL1xuXG4vKipcbiAqIERlZmF1bHQgbG9jYWxlIGRhdGEgdG8gdXNlIGZvciBUYW5uaW4gZG9tYWluIHdoZW4gbm90IG90aGVyd2lzZSBwcm92aWRlZC5cbiAqIEFzc3VtZXMgYW4gRW5nbGlzaCBwbHVyYWwgZm9ybXMgZXhwcmVzc2lvbi5cbiAqXG4gKiBAdHlwZSB7TG9jYWxlRGF0YX1cbiAqL1xuXG5jb25zdCBERUZBVUxUX0xPQ0FMRV9EQVRBID0ge1xuICAnJzoge1xuICAgIC8qKiBAcGFyYW0ge251bWJlcn0gbiAqL1xuICAgIHBsdXJhbF9mb3JtcyhuKSB7XG4gICAgICByZXR1cm4gbiA9PT0gMSA/IDAgOiAxO1xuICAgIH1cblxuICB9XG59O1xuLypcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IG1hdGNoZXMgaTE4biBob29rcyBsaWtlIGBpMThuLmdldHRleHRgLCBgaTE4bi5uZ2V0dGV4dGAsXG4gKiBgaTE4bi5nZXR0ZXh0X2RvbWFpbmAgb3IgYGkxOG4ubmdldHRleHRfd2l0aF9jb250ZXh0YCBvciBgaTE4bi5oYXNfdHJhbnNsYXRpb25gLlxuICovXG5cbmNvbnN0IEkxOE5fSE9PS19SRUdFWFAgPSAvXmkxOG5cXC4obj9nZXR0ZXh0fGhhc190cmFuc2xhdGlvbikoX3wkKS87XG4vKipcbiAqIEB0eXBlZGVmIHsoZG9tYWluPzogc3RyaW5nKSA9PiBMb2NhbGVEYXRhfSBHZXRMb2NhbGVEYXRhXG4gKlxuICogUmV0dXJucyBsb2NhbGUgZGF0YSBieSBkb21haW4gaW4gYVxuICogSmVkLWZvcm1hdHRlZCBKU09OIG9iamVjdCBzaGFwZS5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9tZXNzYWdlZm9ybWF0LmdpdGh1Yi5pby9KZWQvXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7KGRhdGE/OiBMb2NhbGVEYXRhLCBkb21haW4/OiBzdHJpbmcpID0+IHZvaWR9IFNldExvY2FsZURhdGFcbiAqXG4gKiBNZXJnZXMgbG9jYWxlIGRhdGEgaW50byB0aGUgVGFubmluIGluc3RhbmNlIGJ5IGRvbWFpbi4gTm90ZSB0aGF0IHRoaXNcbiAqIGZ1bmN0aW9uIHdpbGwgb3ZlcndyaXRlIHRoZSBkb21haW4gY29uZmlndXJhdGlvbi4gQWNjZXB0cyBkYXRhIGluIGFcbiAqIEplZC1mb3JtYXR0ZWQgSlNPTiBvYmplY3Qgc2hhcGUuXG4gKlxuICogQHNlZSBodHRwOi8vbWVzc2FnZWZvcm1hdC5naXRodWIuaW8vSmVkL1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYgeyhkYXRhPzogTG9jYWxlRGF0YSwgZG9tYWluPzogc3RyaW5nKSA9PiB2b2lkfSBBZGRMb2NhbGVEYXRhXG4gKlxuICogTWVyZ2VzIGxvY2FsZSBkYXRhIGludG8gdGhlIFRhbm5pbiBpbnN0YW5jZSBieSBkb21haW4uIE5vdGUgdGhhdCB0aGlzXG4gKiBmdW5jdGlvbiB3aWxsIGFsc28gbWVyZ2UgdGhlIGRvbWFpbiBjb25maWd1cmF0aW9uLiBBY2NlcHRzIGRhdGEgaW4gYVxuICogSmVkLWZvcm1hdHRlZCBKU09OIG9iamVjdCBzaGFwZS5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9tZXNzYWdlZm9ybWF0LmdpdGh1Yi5pby9KZWQvXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7KGRhdGE/OiBMb2NhbGVEYXRhLCBkb21haW4/OiBzdHJpbmcpID0+IHZvaWR9IFJlc2V0TG9jYWxlRGF0YVxuICpcbiAqIFJlc2V0cyBhbGwgY3VycmVudCBUYW5uaW4gaW5zdGFuY2UgbG9jYWxlIGRhdGEgYW5kIHNldHMgdGhlIHNwZWNpZmllZFxuICogbG9jYWxlIGRhdGEgZm9yIHRoZSBkb21haW4uIEFjY2VwdHMgZGF0YSBpbiBhIEplZC1mb3JtYXR0ZWQgSlNPTiBvYmplY3Qgc2hhcGUuXG4gKlxuICogQHNlZSBodHRwOi8vbWVzc2FnZWZvcm1hdC5naXRodWIuaW8vSmVkL1xuICovXG5cbi8qKiBAdHlwZWRlZiB7KCkgPT4gdm9pZH0gU3Vic2NyaWJlQ2FsbGJhY2sgKi9cblxuLyoqIEB0eXBlZGVmIHsoKSA9PiB2b2lkfSBVbnN1YnNjcmliZUNhbGxiYWNrICovXG5cbi8qKlxuICogQHR5cGVkZWYgeyhjYWxsYmFjazogU3Vic2NyaWJlQ2FsbGJhY2spID0+IFVuc3Vic2NyaWJlQ2FsbGJhY2t9IFN1YnNjcmliZVxuICpcbiAqIFN1YnNjcmliZXMgdG8gY2hhbmdlcyBvZiBsb2NhbGUgZGF0YVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgeyhkb21haW4/OiBzdHJpbmcpID0+IHN0cmluZ30gR2V0RmlsdGVyRG9tYWluXG4gKiBSZXRyaWV2ZSB0aGUgZG9tYWluIHRvIHVzZSB3aGVuIGNhbGxpbmcgZG9tYWluLXNwZWNpZmljIGZpbHRlcnMuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7KHRleHQ6IHN0cmluZywgZG9tYWluPzogc3RyaW5nKSA9PiBzdHJpbmd9IF9fXG4gKlxuICogUmV0cmlldmUgdGhlIHRyYW5zbGF0aW9uIG9mIHRleHQuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci53b3JkcHJlc3Mub3JnL3JlZmVyZW5jZS9mdW5jdGlvbnMvX18vXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7KHRleHQ6IHN0cmluZywgY29udGV4dDogc3RyaW5nLCBkb21haW4/OiBzdHJpbmcpID0+IHN0cmluZ30gX3hcbiAqXG4gKiBSZXRyaWV2ZSB0cmFuc2xhdGVkIHN0cmluZyB3aXRoIGdldHRleHQgY29udGV4dC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLndvcmRwcmVzcy5vcmcvcmVmZXJlbmNlL2Z1bmN0aW9ucy9feC9cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoc2luZ2xlOiBzdHJpbmcsIHBsdXJhbDogc3RyaW5nLCBudW1iZXI6IG51bWJlciwgZG9tYWluPzogc3RyaW5nKSA9PiBzdHJpbmd9IF9uXG4gKlxuICogVHJhbnNsYXRlcyBhbmQgcmV0cmlldmVzIHRoZSBzaW5ndWxhciBvciBwbHVyYWwgZm9ybSBiYXNlZCBvbiB0aGUgc3VwcGxpZWRcbiAqIG51bWJlci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLndvcmRwcmVzcy5vcmcvcmVmZXJlbmNlL2Z1bmN0aW9ucy9fbi9cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoc2luZ2xlOiBzdHJpbmcsIHBsdXJhbDogc3RyaW5nLCBudW1iZXI6IG51bWJlciwgY29udGV4dDogc3RyaW5nLCBkb21haW4/OiBzdHJpbmcpID0+IHN0cmluZ30gX254XG4gKlxuICogVHJhbnNsYXRlcyBhbmQgcmV0cmlldmVzIHRoZSBzaW5ndWxhciBvciBwbHVyYWwgZm9ybSBiYXNlZCBvbiB0aGUgc3VwcGxpZWRcbiAqIG51bWJlciwgd2l0aCBnZXR0ZXh0IGNvbnRleHQuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci53b3JkcHJlc3Mub3JnL3JlZmVyZW5jZS9mdW5jdGlvbnMvX254L1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYgeygpID0+IGJvb2xlYW59IElzUnRsXG4gKlxuICogQ2hlY2sgaWYgY3VycmVudCBsb2NhbGUgaXMgUlRMLlxuICpcbiAqICoqUlRMIChSaWdodCBUbyBMZWZ0KSoqIGlzIGEgbG9jYWxlIHByb3BlcnR5IGluZGljYXRpbmcgdGhhdCB0ZXh0IGlzIHdyaXR0ZW4gZnJvbSByaWdodCB0byBsZWZ0LlxuICogRm9yIGV4YW1wbGUsIHRoZSBgaGVgIGxvY2FsZSAoZm9yIEhlYnJldykgc3BlY2lmaWVzIHJpZ2h0LXRvLWxlZnQuIEFyYWJpYyAoYXIpIGlzIGFub3RoZXIgY29tbW9uXG4gKiBsYW5ndWFnZSB3cml0dGVuIFJUTC4gVGhlIG9wcG9zaXRlIG9mIFJUTCwgTFRSIChMZWZ0IFRvIFJpZ2h0KSBpcyB1c2VkIGluIG90aGVyIGxhbmd1YWdlcyxcbiAqIGluY2x1ZGluZyBFbmdsaXNoIChgZW5gLCBgZW4tVVNgLCBgZW4tR0JgLCBldGMuKSwgU3BhbmlzaCAoYGVzYCksIGFuZCBGcmVuY2ggKGBmcmApLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgeyhzaW5nbGU6IHN0cmluZywgY29udGV4dD86IHN0cmluZywgZG9tYWluPzogc3RyaW5nKSA9PiBib29sZWFufSBIYXNUcmFuc2xhdGlvblxuICpcbiAqIENoZWNrIGlmIHRoZXJlIGlzIGEgdHJhbnNsYXRpb24gZm9yIGEgZ2l2ZW4gc3RyaW5nIGluIHNpbmd1bGFyIGZvcm0uXG4gKi9cblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJ0B3b3JkcHJlc3MvaG9va3MnKS5Ib29rc30gSG9va3MgKi9cblxuLyoqXG4gKiBBbiBpMThuIGluc3RhbmNlXG4gKlxuICogQHR5cGVkZWYgSTE4blxuICogQHByb3BlcnR5IHtHZXRMb2NhbGVEYXRhfSAgIGdldExvY2FsZURhdGEgICBSZXR1cm5zIGxvY2FsZSBkYXRhIGJ5IGRvbWFpbiBpbiBhIEplZC1mb3JtYXR0ZWQgSlNPTiBvYmplY3Qgc2hhcGUuXG4gKiBAcHJvcGVydHkge1NldExvY2FsZURhdGF9ICAgc2V0TG9jYWxlRGF0YSAgIE1lcmdlcyBsb2NhbGUgZGF0YSBpbnRvIHRoZSBUYW5uaW4gaW5zdGFuY2UgYnkgZG9tYWluLiBOb3RlIHRoYXQgdGhpc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB3aWxsIG92ZXJ3cml0ZSB0aGUgZG9tYWluIGNvbmZpZ3VyYXRpb24uIEFjY2VwdHMgZGF0YSBpbiBhXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEplZC1mb3JtYXR0ZWQgSlNPTiBvYmplY3Qgc2hhcGUuXG4gKiBAcHJvcGVydHkge0FkZExvY2FsZURhdGF9ICAgYWRkTG9jYWxlRGF0YSAgIE1lcmdlcyBsb2NhbGUgZGF0YSBpbnRvIHRoZSBUYW5uaW4gaW5zdGFuY2UgYnkgZG9tYWluLiBOb3RlIHRoYXQgdGhpc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB3aWxsIGFsc28gbWVyZ2UgdGhlIGRvbWFpbiBjb25maWd1cmF0aW9uLiBBY2NlcHRzIGRhdGEgaW4gYVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKZWQtZm9ybWF0dGVkIEpTT04gb2JqZWN0IHNoYXBlLlxuICogQHByb3BlcnR5IHtSZXNldExvY2FsZURhdGF9IHJlc2V0TG9jYWxlRGF0YSBSZXNldHMgYWxsIGN1cnJlbnQgVGFubmluIGluc3RhbmNlIGxvY2FsZSBkYXRhIGFuZCBzZXRzIHRoZSBzcGVjaWZpZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlIGRhdGEgZm9yIHRoZSBkb21haW4uIEFjY2VwdHMgZGF0YSBpbiBhIEplZC1mb3JtYXR0ZWQgSlNPTiBvYmplY3Qgc2hhcGUuXG4gKiBAcHJvcGVydHkge1N1YnNjcmliZX0gICAgICAgc3Vic2NyaWJlICAgICAgIFN1YnNjcmliZXMgdG8gY2hhbmdlcyBvZiBUYW5uaW4gbG9jYWxlIGRhdGEuXG4gKiBAcHJvcGVydHkge19ffSAgICAgICAgICAgICAgX18gICAgICAgICAgICAgIFJldHJpZXZlIHRoZSB0cmFuc2xhdGlvbiBvZiB0ZXh0LlxuICogQHByb3BlcnR5IHtfeH0gICAgICAgICAgICAgIF94ICAgICAgICAgICAgICBSZXRyaWV2ZSB0cmFuc2xhdGVkIHN0cmluZyB3aXRoIGdldHRleHQgY29udGV4dC5cbiAqIEBwcm9wZXJ0eSB7X259ICAgICAgICAgICAgICBfbiAgICAgICAgICAgICAgVHJhbnNsYXRlcyBhbmQgcmV0cmlldmVzIHRoZSBzaW5ndWxhciBvciBwbHVyYWwgZm9ybSBiYXNlZCBvbiB0aGUgc3VwcGxpZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyLlxuICogQHByb3BlcnR5IHtfbnh9ICAgICAgICAgICAgIF9ueCAgICAgICAgICAgICBUcmFuc2xhdGVzIGFuZCByZXRyaWV2ZXMgdGhlIHNpbmd1bGFyIG9yIHBsdXJhbCBmb3JtIGJhc2VkIG9uIHRoZSBzdXBwbGllZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXIsIHdpdGggZ2V0dGV4dCBjb250ZXh0LlxuICogQHByb3BlcnR5IHtJc1J0bH0gICAgICAgICAgIGlzUlRMICAgICAgICAgICBDaGVjayBpZiBjdXJyZW50IGxvY2FsZSBpcyBSVEwuXG4gKiBAcHJvcGVydHkge0hhc1RyYW5zbGF0aW9ufSAgaGFzVHJhbnNsYXRpb24gIENoZWNrIGlmIHRoZXJlIGlzIGEgdHJhbnNsYXRpb24gZm9yIGEgZ2l2ZW4gc3RyaW5nLlxuICovXG5cbi8qKlxuICogQ3JlYXRlIGFuIGkxOG4gaW5zdGFuY2VcbiAqXG4gKiBAcGFyYW0ge0xvY2FsZURhdGF9IFtpbml0aWFsRGF0YV0gICBMb2NhbGUgZGF0YSBjb25maWd1cmF0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9ICAgICBbaW5pdGlhbERvbWFpbl0gRG9tYWluIGZvciB3aGljaCBjb25maWd1cmF0aW9uIGFwcGxpZXMuXG4gKiBAcGFyYW0ge0hvb2tzfSAgICAgIFtob29rc10gICAgICAgICBIb29rcyBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtJMThufSBJMThuIGluc3RhbmNlLlxuICovXG5cbmV4cG9ydCBjb25zdCBjcmVhdGVJMThuID0gKGluaXRpYWxEYXRhLCBpbml0aWFsRG9tYWluLCBob29rcykgPT4ge1xuICAvKipcbiAgICogVGhlIHVuZGVybHlpbmcgaW5zdGFuY2Ugb2YgVGFubmluIHRvIHdoaWNoIGV4cG9ydGVkIGZ1bmN0aW9ucyBpbnRlcmZhY2UuXG4gICAqXG4gICAqIEB0eXBlIHtUYW5uaW59XG4gICAqL1xuICBjb25zdCB0YW5uaW4gPSBuZXcgVGFubmluKHt9KTtcbiAgY29uc3QgbGlzdGVuZXJzID0gbmV3IFNldCgpO1xuXG4gIGNvbnN0IG5vdGlmeUxpc3RlbmVycyA9ICgpID0+IHtcbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcigpKTtcbiAgfTtcbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byBjaGFuZ2VzIG9mIGxvY2FsZSBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge1N1YnNjcmliZUNhbGxiYWNrfSBjYWxsYmFjayBTdWJzY3JpcHRpb24gY2FsbGJhY2suXG4gICAqIEByZXR1cm4ge1Vuc3Vic2NyaWJlQ2FsbGJhY2t9IFVuc3Vic2NyaWJlIGNhbGxiYWNrLlxuICAgKi9cblxuXG4gIGNvbnN0IHN1YnNjcmliZSA9IGNhbGxiYWNrID0+IHtcbiAgICBsaXN0ZW5lcnMuYWRkKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gKCkgPT4gbGlzdGVuZXJzLmRlbGV0ZShjYWxsYmFjayk7XG4gIH07XG4gIC8qKiBAdHlwZSB7R2V0TG9jYWxlRGF0YX0gKi9cblxuXG4gIGNvbnN0IGdldExvY2FsZURhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGRvbWFpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2RlZmF1bHQnO1xuICAgIHJldHVybiB0YW5uaW4uZGF0YVtkb21haW5dO1xuICB9O1xuICAvKipcbiAgICogQHBhcmFtIHtMb2NhbGVEYXRhfSBbZGF0YV1cbiAgICogQHBhcmFtIHtzdHJpbmd9ICAgICBbZG9tYWluXVxuICAgKi9cblxuXG4gIGNvbnN0IGRvU2V0TG9jYWxlRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIF90YW5uaW4kZGF0YSRkb21haW47XG5cbiAgICBsZXQgZG9tYWluID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnZGVmYXVsdCc7XG4gICAgdGFubmluLmRhdGFbZG9tYWluXSA9IHsgLi4udGFubmluLmRhdGFbZG9tYWluXSxcbiAgICAgIC4uLmRhdGFcbiAgICB9OyAvLyBQb3B1bGF0ZSBkZWZhdWx0IGRvbWFpbiBjb25maWd1cmF0aW9uIChzdXBwb3J0ZWQgbG9jYWxlIGRhdGUgd2hpY2ggb21pdHNcbiAgICAvLyBhIHBsdXJhbCBmb3JtcyBleHByZXNzaW9uKS5cblxuICAgIHRhbm5pbi5kYXRhW2RvbWFpbl1bJyddID0geyAuLi5ERUZBVUxUX0xPQ0FMRV9EQVRBWycnXSxcbiAgICAgIC4uLigoX3Rhbm5pbiRkYXRhJGRvbWFpbiA9IHRhbm5pbi5kYXRhW2RvbWFpbl0pID09PSBudWxsIHx8IF90YW5uaW4kZGF0YSRkb21haW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90YW5uaW4kZGF0YSRkb21haW5bJyddKVxuICAgIH07IC8vIENsZWFuIHVwIGNhY2hlZCBwbHVyYWwgZm9ybXMgZnVuY3Rpb25zIGNhY2hlIGFzIGl0IG1pZ2h0IGJlIHVwZGF0ZWQuXG5cbiAgICBkZWxldGUgdGFubmluLnBsdXJhbEZvcm1zW2RvbWFpbl07XG4gIH07XG4gIC8qKiBAdHlwZSB7U2V0TG9jYWxlRGF0YX0gKi9cblxuXG4gIGNvbnN0IHNldExvY2FsZURhdGEgPSAoZGF0YSwgZG9tYWluKSA9PiB7XG4gICAgZG9TZXRMb2NhbGVEYXRhKGRhdGEsIGRvbWFpbik7XG4gICAgbm90aWZ5TGlzdGVuZXJzKCk7XG4gIH07XG4gIC8qKiBAdHlwZSB7QWRkTG9jYWxlRGF0YX0gKi9cblxuXG4gIGNvbnN0IGFkZExvY2FsZURhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBfdGFubmluJGRhdGEkZG9tYWluMjtcblxuICAgIGxldCBkb21haW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdkZWZhdWx0JztcbiAgICB0YW5uaW4uZGF0YVtkb21haW5dID0geyAuLi50YW5uaW4uZGF0YVtkb21haW5dLFxuICAgICAgLi4uZGF0YSxcbiAgICAgIC8vIFBvcHVsYXRlIGRlZmF1bHQgZG9tYWluIGNvbmZpZ3VyYXRpb24gKHN1cHBvcnRlZCBsb2NhbGUgZGF0ZSB3aGljaCBvbWl0c1xuICAgICAgLy8gYSBwbHVyYWwgZm9ybXMgZXhwcmVzc2lvbikuXG4gICAgICAnJzogeyAuLi5ERUZBVUxUX0xPQ0FMRV9EQVRBWycnXSxcbiAgICAgICAgLi4uKChfdGFubmluJGRhdGEkZG9tYWluMiA9IHRhbm5pbi5kYXRhW2RvbWFpbl0pID09PSBudWxsIHx8IF90YW5uaW4kZGF0YSRkb21haW4yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGFubmluJGRhdGEkZG9tYWluMlsnJ10pLFxuICAgICAgICAuLi4oZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhWycnXSlcbiAgICAgIH1cbiAgICB9OyAvLyBDbGVhbiB1cCBjYWNoZWQgcGx1cmFsIGZvcm1zIGZ1bmN0aW9ucyBjYWNoZSBhcyBpdCBtaWdodCBiZSB1cGRhdGVkLlxuXG4gICAgZGVsZXRlIHRhbm5pbi5wbHVyYWxGb3Jtc1tkb21haW5dO1xuICAgIG5vdGlmeUxpc3RlbmVycygpO1xuICB9O1xuICAvKiogQHR5cGUge1Jlc2V0TG9jYWxlRGF0YX0gKi9cblxuXG4gIGNvbnN0IHJlc2V0TG9jYWxlRGF0YSA9IChkYXRhLCBkb21haW4pID0+IHtcbiAgICAvLyBSZXNldCBhbGwgY3VycmVudCBUYW5uaW4gbG9jYWxlIGRhdGEuXG4gICAgdGFubmluLmRhdGEgPSB7fTsgLy8gUmVzZXQgY2FjaGVkIHBsdXJhbCBmb3JtcyBmdW5jdGlvbnMgY2FjaGUuXG5cbiAgICB0YW5uaW4ucGx1cmFsRm9ybXMgPSB7fTtcbiAgICBzZXRMb2NhbGVEYXRhKGRhdGEsIGRvbWFpbik7XG4gIH07XG4gIC8qKlxuICAgKiBXcmFwcGVyIGZvciBUYW5uaW4ncyBgZGNucGdldHRleHRgLiBQb3B1bGF0ZXMgZGVmYXVsdCBsb2NhbGUgZGF0YSBpZiBub3RcbiAgICogb3RoZXJ3aXNlIHByZXZpb3VzbHkgYXNzaWduZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gZG9tYWluICAgRG9tYWluIHRvIHJldHJpZXZlIHRoZSB0cmFuc2xhdGVkIHRleHQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gY29udGV4dCAgQ29udGV4dCBpbmZvcm1hdGlvbiBmb3IgdGhlIHRyYW5zbGF0b3JzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gICAgICAgICAgIHNpbmdsZSAgIFRleHQgdG8gdHJhbnNsYXRlIGlmIG5vbi1wbHVyYWwuIFVzZWQgYXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxsYmFjayByZXR1cm4gdmFsdWUgb24gYSBjYXVnaHQgZXJyb3IuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgICAgICAgICAgW3BsdXJhbF0gVGhlIHRleHQgdG8gYmUgdXNlZCBpZiB0aGUgbnVtYmVyIGlzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx1cmFsLlxuICAgKiBAcGFyYW0ge251bWJlcn0gICAgICAgICAgIFtudW1iZXJdIFRoZSBudW1iZXIgdG8gY29tcGFyZSBhZ2FpbnN0IHRvIHVzZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVpdGhlciB0aGUgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0uXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zbGF0ZWQgc3RyaW5nLlxuICAgKi9cblxuXG4gIGNvbnN0IGRjbnBnZXR0ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBkb21haW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdkZWZhdWx0JztcbiAgICBsZXQgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIGxldCBzaW5nbGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgcGx1cmFsID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XG4gICAgbGV0IG51bWJlciA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ID8gYXJndW1lbnRzWzRdIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKCF0YW5uaW4uZGF0YVtkb21haW5dKSB7XG4gICAgICAvLyBVc2UgYGRvU2V0TG9jYWxlRGF0YWAgdG8gc2V0IHNpbGVudGx5LCB3aXRob3V0IG5vdGlmeWluZyBsaXN0ZW5lcnMuXG4gICAgICBkb1NldExvY2FsZURhdGEodW5kZWZpbmVkLCBkb21haW4pO1xuICAgIH1cblxuICAgIHJldHVybiB0YW5uaW4uZGNucGdldHRleHQoZG9tYWluLCBjb250ZXh0LCBzaW5nbGUsIHBsdXJhbCwgbnVtYmVyKTtcbiAgfTtcbiAgLyoqIEB0eXBlIHtHZXRGaWx0ZXJEb21haW59ICovXG5cblxuICBjb25zdCBnZXRGaWx0ZXJEb21haW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGRvbWFpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2RlZmF1bHQnO1xuICAgIHJldHVybiBkb21haW47XG4gIH07XG4gIC8qKiBAdHlwZSB7X199ICovXG5cblxuICBjb25zdCBfXyA9ICh0ZXh0LCBkb21haW4pID0+IHtcbiAgICBsZXQgdHJhbnNsYXRpb24gPSBkY25wZ2V0dGV4dChkb21haW4sIHVuZGVmaW5lZCwgdGV4dCk7XG5cbiAgICBpZiAoIWhvb2tzKSB7XG4gICAgICByZXR1cm4gdHJhbnNsYXRpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdGV4dCB3aXRoIGl0cyB0cmFuc2xhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0cmFuc2xhdGlvbiBUcmFuc2xhdGVkIHRleHQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgICAgICAgIFRleHQgdG8gdHJhbnNsYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkb21haW4gICAgICBUZXh0IGRvbWFpbi4gVW5pcXVlIGlkZW50aWZpZXIgZm9yIHJldHJpZXZpbmcgdHJhbnNsYXRlZCBzdHJpbmdzLlxuICAgICAqL1xuXG5cbiAgICB0cmFuc2xhdGlvbiA9XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5cbiAgICAvKiogQHR5cGUgeyp9ICovXG4gICAgaG9va3MuYXBwbHlGaWx0ZXJzKCdpMThuLmdldHRleHQnLCB0cmFuc2xhdGlvbiwgdGV4dCwgZG9tYWluKTtcbiAgICByZXR1cm4gKFxuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5cbiAgICAgIC8qKiBAdHlwZSB7Kn0gKi9cbiAgICAgIGhvb2tzLmFwcGx5RmlsdGVycygnaTE4bi5nZXR0ZXh0XycgKyBnZXRGaWx0ZXJEb21haW4oZG9tYWluKSwgdHJhbnNsYXRpb24sIHRleHQsIGRvbWFpbilcbiAgICApO1xuICB9O1xuICAvKiogQHR5cGUge194fSAqL1xuXG5cbiAgY29uc3QgX3ggPSAodGV4dCwgY29udGV4dCwgZG9tYWluKSA9PiB7XG4gICAgbGV0IHRyYW5zbGF0aW9uID0gZGNucGdldHRleHQoZG9tYWluLCBjb250ZXh0LCB0ZXh0KTtcblxuICAgIGlmICghaG9va3MpIHtcbiAgICAgIHJldHVybiB0cmFuc2xhdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsdGVycyB0ZXh0IHdpdGggaXRzIHRyYW5zbGF0aW9uIGJhc2VkIG9uIGNvbnRleHQgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhbnNsYXRpb24gVHJhbnNsYXRlZCB0ZXh0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0ICAgICAgICBUZXh0IHRvIHRyYW5zbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGV4dCAgICAgQ29udGV4dCBpbmZvcm1hdGlvbiBmb3IgdGhlIHRyYW5zbGF0b3JzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkb21haW4gICAgICBUZXh0IGRvbWFpbi4gVW5pcXVlIGlkZW50aWZpZXIgZm9yIHJldHJpZXZpbmcgdHJhbnNsYXRlZCBzdHJpbmdzLlxuICAgICAqL1xuXG5cbiAgICB0cmFuc2xhdGlvbiA9XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5cbiAgICAvKiogQHR5cGUgeyp9ICovXG4gICAgaG9va3MuYXBwbHlGaWx0ZXJzKCdpMThuLmdldHRleHRfd2l0aF9jb250ZXh0JywgdHJhbnNsYXRpb24sIHRleHQsIGNvbnRleHQsIGRvbWFpbik7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gICAgICAvKiogQHR5cGUgeyp9ICovXG4gICAgICBob29rcy5hcHBseUZpbHRlcnMoJ2kxOG4uZ2V0dGV4dF93aXRoX2NvbnRleHRfJyArIGdldEZpbHRlckRvbWFpbihkb21haW4pLCB0cmFuc2xhdGlvbiwgdGV4dCwgY29udGV4dCwgZG9tYWluKVxuICAgICk7XG4gIH07XG4gIC8qKiBAdHlwZSB7X259ICovXG5cblxuICBjb25zdCBfbiA9IChzaW5nbGUsIHBsdXJhbCwgbnVtYmVyLCBkb21haW4pID0+IHtcbiAgICBsZXQgdHJhbnNsYXRpb24gPSBkY25wZ2V0dGV4dChkb21haW4sIHVuZGVmaW5lZCwgc2luZ2xlLCBwbHVyYWwsIG51bWJlcik7XG5cbiAgICBpZiAoIWhvb2tzKSB7XG4gICAgICByZXR1cm4gdHJhbnNsYXRpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdGhlIHNpbmd1bGFyIG9yIHBsdXJhbCBmb3JtIG9mIGEgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRyYW5zbGF0aW9uIFRyYW5zbGF0ZWQgdGV4dC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2luZ2xlICAgICAgVGhlIHRleHQgdG8gYmUgdXNlZCBpZiB0aGUgbnVtYmVyIGlzIHNpbmd1bGFyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwbHVyYWwgICAgICBUaGUgdGV4dCB0byBiZSB1c2VkIGlmIHRoZSBudW1iZXIgaXMgcGx1cmFsLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBudW1iZXIgICAgICBUaGUgbnVtYmVyIHRvIGNvbXBhcmUgYWdhaW5zdCB0byB1c2UgZWl0aGVyIHRoZSBzaW5ndWxhciBvciBwbHVyYWwgZm9ybS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZG9tYWluICAgICAgVGV4dCBkb21haW4uIFVuaXF1ZSBpZGVudGlmaWVyIGZvciByZXRyaWV2aW5nIHRyYW5zbGF0ZWQgc3RyaW5ncy5cbiAgICAgKi9cblxuXG4gICAgdHJhbnNsYXRpb24gPVxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gICAgLyoqIEB0eXBlIHsqfSAqL1xuICAgIGhvb2tzLmFwcGx5RmlsdGVycygnaTE4bi5uZ2V0dGV4dCcsIHRyYW5zbGF0aW9uLCBzaW5nbGUsIHBsdXJhbCwgbnVtYmVyLCBkb21haW4pO1xuICAgIHJldHVybiAoXG4gICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cblxuICAgICAgLyoqIEB0eXBlIHsqfSAqL1xuICAgICAgaG9va3MuYXBwbHlGaWx0ZXJzKCdpMThuLm5nZXR0ZXh0XycgKyBnZXRGaWx0ZXJEb21haW4oZG9tYWluKSwgdHJhbnNsYXRpb24sIHNpbmdsZSwgcGx1cmFsLCBudW1iZXIsIGRvbWFpbilcbiAgICApO1xuICB9O1xuICAvKiogQHR5cGUge19ueH0gKi9cblxuXG4gIGNvbnN0IF9ueCA9IChzaW5nbGUsIHBsdXJhbCwgbnVtYmVyLCBjb250ZXh0LCBkb21haW4pID0+IHtcbiAgICBsZXQgdHJhbnNsYXRpb24gPSBkY25wZ2V0dGV4dChkb21haW4sIGNvbnRleHQsIHNpbmdsZSwgcGx1cmFsLCBudW1iZXIpO1xuXG4gICAgaWYgKCFob29rcykge1xuICAgICAgcmV0dXJuIHRyYW5zbGF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWx0ZXJzIHRoZSBzaW5ndWxhciBvciBwbHVyYWwgZm9ybSBvZiBhIHN0cmluZyB3aXRoIGdldHRleHQgY29udGV4dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0cmFuc2xhdGlvbiBUcmFuc2xhdGVkIHRleHQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNpbmdsZSAgICAgIFRoZSB0ZXh0IHRvIGJlIHVzZWQgaWYgdGhlIG51bWJlciBpcyBzaW5ndWxhci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGx1cmFsICAgICAgVGhlIHRleHQgdG8gYmUgdXNlZCBpZiB0aGUgbnVtYmVyIGlzIHBsdXJhbC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbnVtYmVyICAgICAgVGhlIG51bWJlciB0byBjb21wYXJlIGFnYWluc3QgdG8gdXNlIGVpdGhlciB0aGUgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRleHQgICAgIENvbnRleHQgaW5mb3JtYXRpb24gZm9yIHRoZSB0cmFuc2xhdG9ycy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZG9tYWluICAgICAgVGV4dCBkb21haW4uIFVuaXF1ZSBpZGVudGlmaWVyIGZvciByZXRyaWV2aW5nIHRyYW5zbGF0ZWQgc3RyaW5ncy5cbiAgICAgKi9cblxuXG4gICAgdHJhbnNsYXRpb24gPVxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gICAgLyoqIEB0eXBlIHsqfSAqL1xuICAgIGhvb2tzLmFwcGx5RmlsdGVycygnaTE4bi5uZ2V0dGV4dF93aXRoX2NvbnRleHQnLCB0cmFuc2xhdGlvbiwgc2luZ2xlLCBwbHVyYWwsIG51bWJlciwgY29udGV4dCwgZG9tYWluKTtcbiAgICByZXR1cm4gKFxuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5cbiAgICAgIC8qKiBAdHlwZSB7Kn0gKi9cbiAgICAgIGhvb2tzLmFwcGx5RmlsdGVycygnaTE4bi5uZ2V0dGV4dF93aXRoX2NvbnRleHRfJyArIGdldEZpbHRlckRvbWFpbihkb21haW4pLCB0cmFuc2xhdGlvbiwgc2luZ2xlLCBwbHVyYWwsIG51bWJlciwgY29udGV4dCwgZG9tYWluKVxuICAgICk7XG4gIH07XG4gIC8qKiBAdHlwZSB7SXNSdGx9ICovXG5cblxuICBjb25zdCBpc1JUTCA9ICgpID0+IHtcbiAgICByZXR1cm4gJ3J0bCcgPT09IF94KCdsdHInLCAndGV4dCBkaXJlY3Rpb24nKTtcbiAgfTtcbiAgLyoqIEB0eXBlIHtIYXNUcmFuc2xhdGlvbn0gKi9cblxuXG4gIGNvbnN0IGhhc1RyYW5zbGF0aW9uID0gKHNpbmdsZSwgY29udGV4dCwgZG9tYWluKSA9PiB7XG4gICAgdmFyIF90YW5uaW4kZGF0YSwgX3Rhbm5pbiRkYXRhMjtcblxuICAgIGNvbnN0IGtleSA9IGNvbnRleHQgPyBjb250ZXh0ICsgJ1xcdTAwMDQnICsgc2luZ2xlIDogc2luZ2xlO1xuICAgIGxldCByZXN1bHQgPSAhISgoX3Rhbm5pbiRkYXRhID0gdGFubmluLmRhdGEpICE9PSBudWxsICYmIF90YW5uaW4kZGF0YSAhPT0gdm9pZCAwICYmIChfdGFubmluJGRhdGEyID0gX3Rhbm5pbiRkYXRhW2RvbWFpbiAhPT0gbnVsbCAmJiBkb21haW4gIT09IHZvaWQgMCA/IGRvbWFpbiA6ICdkZWZhdWx0J10pICE9PSBudWxsICYmIF90YW5uaW4kZGF0YTIgIT09IHZvaWQgMCAmJiBfdGFubmluJGRhdGEyW2tleV0pO1xuXG4gICAgaWYgKGhvb2tzKSB7XG4gICAgICAvKipcbiAgICAgICAqIEZpbHRlcnMgdGhlIHByZXNlbmNlIG9mIGEgdHJhbnNsYXRpb24gaW4gdGhlIGxvY2FsZSBkYXRhLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzVHJhbnNsYXRpb24gV2hldGhlciB0aGUgdHJhbnNsYXRpb24gaXMgcHJlc2VudCBvciBub3QuLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9ICBzaW5nbGUgICAgICAgICBUaGUgc2luZ3VsYXIgZm9ybSBvZiB0aGUgdHJhbnNsYXRlZCB0ZXh0ICh1c2VkIGFzIGtleSBpbiBsb2NhbGUgZGF0YSlcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSAgY29udGV4dCAgICAgICAgQ29udGV4dCBpbmZvcm1hdGlvbiBmb3IgdGhlIHRyYW5zbGF0b3JzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9ICBkb21haW4gICAgICAgICBUZXh0IGRvbWFpbi4gVW5pcXVlIGlkZW50aWZpZXIgZm9yIHJldHJpZXZpbmcgdHJhbnNsYXRlZCBzdHJpbmdzLlxuICAgICAgICovXG4gICAgICByZXN1bHQgPVxuICAgICAgLyoqIEB0eXBlIHsgYm9vbGVhbiB9ICovXG5cbiAgICAgIC8qKiBAdHlwZSB7Kn0gKi9cbiAgICAgIGhvb2tzLmFwcGx5RmlsdGVycygnaTE4bi5oYXNfdHJhbnNsYXRpb24nLCByZXN1bHQsIHNpbmdsZSwgY29udGV4dCwgZG9tYWluKTtcbiAgICAgIHJlc3VsdCA9XG4gICAgICAvKiogQHR5cGUgeyBib29sZWFuIH0gKi9cblxuICAgICAgLyoqIEB0eXBlIHsqfSAqL1xuICAgICAgaG9va3MuYXBwbHlGaWx0ZXJzKCdpMThuLmhhc190cmFuc2xhdGlvbl8nICsgZ2V0RmlsdGVyRG9tYWluKGRvbWFpbiksIHJlc3VsdCwgc2luZ2xlLCBjb250ZXh0LCBkb21haW4pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgaWYgKGluaXRpYWxEYXRhKSB7XG4gICAgc2V0TG9jYWxlRGF0YShpbml0aWFsRGF0YSwgaW5pdGlhbERvbWFpbik7XG4gIH1cblxuICBpZiAoaG9va3MpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaG9va05hbWVcbiAgICAgKi9cbiAgICBjb25zdCBvbkhvb2tBZGRlZE9yUmVtb3ZlZCA9IGhvb2tOYW1lID0+IHtcbiAgICAgIGlmIChJMThOX0hPT0tfUkVHRVhQLnRlc3QoaG9va05hbWUpKSB7XG4gICAgICAgIG5vdGlmeUxpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBob29rcy5hZGRBY3Rpb24oJ2hvb2tBZGRlZCcsICdjb3JlL2kxOG4nLCBvbkhvb2tBZGRlZE9yUmVtb3ZlZCk7XG4gICAgaG9va3MuYWRkQWN0aW9uKCdob29rUmVtb3ZlZCcsICdjb3JlL2kxOG4nLCBvbkhvb2tBZGRlZE9yUmVtb3ZlZCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldExvY2FsZURhdGEsXG4gICAgc2V0TG9jYWxlRGF0YSxcbiAgICBhZGRMb2NhbGVEYXRhLFxuICAgIHJlc2V0TG9jYWxlRGF0YSxcbiAgICBzdWJzY3JpYmUsXG4gICAgX18sXG4gICAgX3gsXG4gICAgX24sXG4gICAgX254LFxuICAgIGlzUlRMLFxuICAgIGhhc1RyYW5zbGF0aW9uXG4gIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlLWkxOG4uanMubWFwIiwiLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3JlYXRlSTE4biB9IGZyb20gJy4vY3JlYXRlLWkxOG4nO1xuLyoqXG4gKiBXb3JkUHJlc3MgZGVwZW5kZW5jaWVzXG4gKi9cblxuaW1wb3J0IHsgZGVmYXVsdEhvb2tzIH0gZnJvbSAnQHdvcmRwcmVzcy9ob29rcyc7XG5jb25zdCBpMThuID0gY3JlYXRlSTE4bih1bmRlZmluZWQsIHVuZGVmaW5lZCwgZGVmYXVsdEhvb2tzKTtcbi8qKlxuICogRGVmYXVsdCwgc2luZ2xldG9uIGluc3RhbmNlIG9mIGBJMThuYC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBpMThuO1xuLypcbiAqIENvbW1lbnRzIGluIHRoaXMgZmlsZSBhcmUgZHVwbGljYXRlZCBmcm9tIC4vaTE4biBkdWUgdG9cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL3B1bGwvMjAzMTgjaXNzdWVjb21tZW50LTU5MDgzNzcyMlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9jcmVhdGUtaTE4bicpLkxvY2FsZURhdGF9IExvY2FsZURhdGFcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vY3JlYXRlLWkxOG4nKS5TdWJzY3JpYmVDYWxsYmFja30gU3Vic2NyaWJlQ2FsbGJhY2tcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vY3JlYXRlLWkxOG4nKS5VbnN1YnNjcmliZUNhbGxiYWNrfSBVbnN1YnNjcmliZUNhbGxiYWNrXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGxvY2FsZSBkYXRhIGJ5IGRvbWFpbiBpbiBhIEplZC1mb3JtYXR0ZWQgSlNPTiBvYmplY3Qgc2hhcGUuXG4gKlxuICogQHNlZSBodHRwOi8vbWVzc2FnZWZvcm1hdC5naXRodWIuaW8vSmVkL1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZG9tYWluXSBEb21haW4gZm9yIHdoaWNoIHRvIGdldCB0aGUgZGF0YS5cbiAqIEByZXR1cm4ge0xvY2FsZURhdGF9IExvY2FsZSBkYXRhLlxuICovXG5cbmV4cG9ydCBjb25zdCBnZXRMb2NhbGVEYXRhID0gaTE4bi5nZXRMb2NhbGVEYXRhLmJpbmQoaTE4bik7XG4vKipcbiAqIE1lcmdlcyBsb2NhbGUgZGF0YSBpbnRvIHRoZSBUYW5uaW4gaW5zdGFuY2UgYnkgZG9tYWluLiBBY2NlcHRzIGRhdGEgaW4gYVxuICogSmVkLWZvcm1hdHRlZCBKU09OIG9iamVjdCBzaGFwZS5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9tZXNzYWdlZm9ybWF0LmdpdGh1Yi5pby9KZWQvXG4gKlxuICogQHBhcmFtIHtMb2NhbGVEYXRhfSBbZGF0YV0gICBMb2NhbGUgZGF0YSBjb25maWd1cmF0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9ICAgICBbZG9tYWluXSBEb21haW4gZm9yIHdoaWNoIGNvbmZpZ3VyYXRpb24gYXBwbGllcy5cbiAqL1xuXG5leHBvcnQgY29uc3Qgc2V0TG9jYWxlRGF0YSA9IGkxOG4uc2V0TG9jYWxlRGF0YS5iaW5kKGkxOG4pO1xuLyoqXG4gKiBSZXNldHMgYWxsIGN1cnJlbnQgVGFubmluIGluc3RhbmNlIGxvY2FsZSBkYXRhIGFuZCBzZXRzIHRoZSBzcGVjaWZpZWRcbiAqIGxvY2FsZSBkYXRhIGZvciB0aGUgZG9tYWluLiBBY2NlcHRzIGRhdGEgaW4gYSBKZWQtZm9ybWF0dGVkIEpTT04gb2JqZWN0IHNoYXBlLlxuICpcbiAqIEBzZWUgaHR0cDovL21lc3NhZ2Vmb3JtYXQuZ2l0aHViLmlvL0plZC9cbiAqXG4gKiBAcGFyYW0ge0xvY2FsZURhdGF9IFtkYXRhXSAgIExvY2FsZSBkYXRhIGNvbmZpZ3VyYXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gICAgIFtkb21haW5dIERvbWFpbiBmb3Igd2hpY2ggY29uZmlndXJhdGlvbiBhcHBsaWVzLlxuICovXG5cbmV4cG9ydCBjb25zdCByZXNldExvY2FsZURhdGEgPSBpMThuLnJlc2V0TG9jYWxlRGF0YS5iaW5kKGkxOG4pO1xuLyoqXG4gKiBTdWJzY3JpYmVzIHRvIGNoYW5nZXMgb2YgbG9jYWxlIGRhdGFcbiAqXG4gKiBAcGFyYW0ge1N1YnNjcmliZUNhbGxiYWNrfSBjYWxsYmFjayBTdWJzY3JpcHRpb24gY2FsbGJhY2tcbiAqIEByZXR1cm4ge1Vuc3Vic2NyaWJlQ2FsbGJhY2t9IFVuc3Vic2NyaWJlIGNhbGxiYWNrXG4gKi9cblxuZXhwb3J0IGNvbnN0IHN1YnNjcmliZSA9IGkxOG4uc3Vic2NyaWJlLmJpbmQoaTE4bik7XG4vKipcbiAqIFJldHJpZXZlIHRoZSB0cmFuc2xhdGlvbiBvZiB0ZXh0LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIud29yZHByZXNzLm9yZy9yZWZlcmVuY2UvZnVuY3Rpb25zL19fL1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0ICAgICBUZXh0IHRvIHRyYW5zbGF0ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbZG9tYWluXSBEb21haW4gdG8gcmV0cmlldmUgdGhlIHRyYW5zbGF0ZWQgdGV4dC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRyYW5zbGF0ZWQgdGV4dC5cbiAqL1xuXG5leHBvcnQgY29uc3QgX18gPSBpMThuLl9fLmJpbmQoaTE4bik7XG4vKipcbiAqIFJldHJpZXZlIHRyYW5zbGF0ZWQgc3RyaW5nIHdpdGggZ2V0dGV4dCBjb250ZXh0LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIud29yZHByZXNzLm9yZy9yZWZlcmVuY2UvZnVuY3Rpb25zL194L1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0ICAgICBUZXh0IHRvIHRyYW5zbGF0ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZXh0ICBDb250ZXh0IGluZm9ybWF0aW9uIGZvciB0aGUgdHJhbnNsYXRvcnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2RvbWFpbl0gRG9tYWluIHRvIHJldHJpZXZlIHRoZSB0cmFuc2xhdGVkIHRleHQuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUcmFuc2xhdGVkIGNvbnRleHQgc3RyaW5nIHdpdGhvdXQgcGlwZS5cbiAqL1xuXG5leHBvcnQgY29uc3QgX3ggPSBpMThuLl94LmJpbmQoaTE4bik7XG4vKipcbiAqIFRyYW5zbGF0ZXMgYW5kIHJldHJpZXZlcyB0aGUgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0gYmFzZWQgb24gdGhlIHN1cHBsaWVkXG4gKiBudW1iZXIuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci53b3JkcHJlc3Mub3JnL3JlZmVyZW5jZS9mdW5jdGlvbnMvX24vXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNpbmdsZSAgIFRoZSB0ZXh0IHRvIGJlIHVzZWQgaWYgdGhlIG51bWJlciBpcyBzaW5ndWxhci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwbHVyYWwgICBUaGUgdGV4dCB0byBiZSB1c2VkIGlmIHRoZSBudW1iZXIgaXMgcGx1cmFsLlxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciAgIFRoZSBudW1iZXIgdG8gY29tcGFyZSBhZ2FpbnN0IHRvIHVzZSBlaXRoZXIgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0uXG4gKiBAcGFyYW0ge3N0cmluZ30gW2RvbWFpbl0gRG9tYWluIHRvIHJldHJpZXZlIHRoZSB0cmFuc2xhdGVkIHRleHQuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgdHJhbnNsYXRlZCBzaW5ndWxhciBvciBwbHVyYWwgZm9ybS5cbiAqL1xuXG5leHBvcnQgY29uc3QgX24gPSBpMThuLl9uLmJpbmQoaTE4bik7XG4vKipcbiAqIFRyYW5zbGF0ZXMgYW5kIHJldHJpZXZlcyB0aGUgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0gYmFzZWQgb24gdGhlIHN1cHBsaWVkXG4gKiBudW1iZXIsIHdpdGggZ2V0dGV4dCBjb250ZXh0LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIud29yZHByZXNzLm9yZy9yZWZlcmVuY2UvZnVuY3Rpb25zL19ueC9cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2luZ2xlICAgVGhlIHRleHQgdG8gYmUgdXNlZCBpZiB0aGUgbnVtYmVyIGlzIHNpbmd1bGFyLlxuICogQHBhcmFtIHtzdHJpbmd9IHBsdXJhbCAgIFRoZSB0ZXh0IHRvIGJlIHVzZWQgaWYgdGhlIG51bWJlciBpcyBwbHVyYWwuXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyICAgVGhlIG51bWJlciB0byBjb21wYXJlIGFnYWluc3QgdG8gdXNlIGVpdGhlciB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5ndWxhciBvciBwbHVyYWwgZm9ybS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZXh0ICBDb250ZXh0IGluZm9ybWF0aW9uIGZvciB0aGUgdHJhbnNsYXRvcnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2RvbWFpbl0gRG9tYWluIHRvIHJldHJpZXZlIHRoZSB0cmFuc2xhdGVkIHRleHQuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgdHJhbnNsYXRlZCBzaW5ndWxhciBvciBwbHVyYWwgZm9ybS5cbiAqL1xuXG5leHBvcnQgY29uc3QgX254ID0gaTE4bi5fbnguYmluZChpMThuKTtcbi8qKlxuICogQ2hlY2sgaWYgY3VycmVudCBsb2NhbGUgaXMgUlRMLlxuICpcbiAqICoqUlRMIChSaWdodCBUbyBMZWZ0KSoqIGlzIGEgbG9jYWxlIHByb3BlcnR5IGluZGljYXRpbmcgdGhhdCB0ZXh0IGlzIHdyaXR0ZW4gZnJvbSByaWdodCB0byBsZWZ0LlxuICogRm9yIGV4YW1wbGUsIHRoZSBgaGVgIGxvY2FsZSAoZm9yIEhlYnJldykgc3BlY2lmaWVzIHJpZ2h0LXRvLWxlZnQuIEFyYWJpYyAoYXIpIGlzIGFub3RoZXIgY29tbW9uXG4gKiBsYW5ndWFnZSB3cml0dGVuIFJUTC4gVGhlIG9wcG9zaXRlIG9mIFJUTCwgTFRSIChMZWZ0IFRvIFJpZ2h0KSBpcyB1c2VkIGluIG90aGVyIGxhbmd1YWdlcyxcbiAqIGluY2x1ZGluZyBFbmdsaXNoIChgZW5gLCBgZW4tVVNgLCBgZW4tR0JgLCBldGMuKSwgU3BhbmlzaCAoYGVzYCksIGFuZCBGcmVuY2ggKGBmcmApLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgbG9jYWxlIGlzIFJUTC5cbiAqL1xuXG5leHBvcnQgY29uc3QgaXNSVEwgPSBpMThuLmlzUlRMLmJpbmQoaTE4bik7XG4vKipcbiAqIENoZWNrIGlmIHRoZXJlIGlzIGEgdHJhbnNsYXRpb24gZm9yIGEgZ2l2ZW4gc3RyaW5nIChpbiBzaW5ndWxhciBmb3JtKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2luZ2xlICAgIFNpbmd1bGFyIGZvcm0gb2YgdGhlIHN0cmluZyB0byBsb29rIHVwLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb250ZXh0XSBDb250ZXh0IGluZm9ybWF0aW9uIGZvciB0aGUgdHJhbnNsYXRvcnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2RvbWFpbl0gIERvbWFpbiB0byByZXRyaWV2ZSB0aGUgdHJhbnNsYXRlZCB0ZXh0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdHJhbnNsYXRpb24gZXhpc3RzIG9yIG5vdC5cbiAqL1xuXG5leHBvcnQgY29uc3QgaGFzVHJhbnNsYXRpb24gPSBpMThuLmhhc1RyYW5zbGF0aW9uLmJpbmQoaTE4bik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0LWkxOG4uanMubWFwIiwiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnbWVtaXplJztcbmltcG9ydCBzcHJpbnRmanMgZnJvbSAnc3ByaW50Zi1qcyc7XG4vKipcbiAqIExvZyB0byBjb25zb2xlLCBvbmNlIHBlciBtZXNzYWdlOyBvciBtb3JlIHByZWNpc2VseSwgcGVyIHJlZmVyZW50aWFsbHkgZXF1YWxcbiAqIGFyZ3VtZW50IHNldC4gQmVjYXVzZSBKZWQgdGhyb3dzIGVycm9ycywgd2UgbG9nIHRoZXNlIHRvIHRoZSBjb25zb2xlIGluc3RlYWRcbiAqIHRvIGF2b2lkIGNyYXNoaW5nIHRoZSBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgQXJndW1lbnRzIHRvIHBhc3MgdG8gYGNvbnNvbGUuZXJyb3JgXG4gKi9cblxuY29uc3QgbG9nRXJyb3JPbmNlID0gbWVtb2l6ZShjb25zb2xlLmVycm9yKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG5cbi8qKlxuICogUmV0dXJucyBhIGZvcm1hdHRlZCBzdHJpbmcuIElmIGFuIGVycm9yIG9jY3VycyBpbiBhcHBseWluZyB0aGUgZm9ybWF0LCB0aGVcbiAqIG9yaWdpbmFsIGZvcm1hdCBzdHJpbmcgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdCBUaGUgZm9ybWF0IG9mIHRoZSBzdHJpbmcgdG8gZ2VuZXJhdGUuXG4gKiBAcGFyYW0gey4uLip9ICAgYXJncyAgIEFyZ3VtZW50cyB0byBhcHBseSB0byB0aGUgZm9ybWF0LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3ByaW50Zi1qc1xuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvcm1hdHRlZCBzdHJpbmcuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNwcmludGYoZm9ybWF0KSB7XG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwcmludGZqcy5zcHJpbnRmKGZvcm1hdCwgLi4uYXJncyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGxvZ0Vycm9yT25jZSgnc3ByaW50ZiBlcnJvcjogXFxuXFxuJyArIGVycm9yLnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwcmludGYuanMubWFwIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGlkPVwid3AtZW1haWxlclwiPlxuICAgIDxkaXYgY2xhc3M9XCJtYWluLWNvbnRlbnRcIj5cbiAgICAgIDxoMlxuICAgICAgICByb2xlPVwid3AtZW1haWxlci1ub3RpY2VcIlxuICAgICAgICBkYXRhLXRleHQ9XCJEb24ndCByZW1vdmUgbWUsIEkgYW0gc3VwZXIgaW1wb3J0YW50IGZvciBhZG1pbiBub3RpY2VcIlxuICAgICAgLz5cbiAgICAgIDxoMz57eyBfXyhcIldQRW1haWxlclwiLCBcIndwLWVtYWlsZXJcIikgfX08L2gzPlxuICAgICAgPHAgY2xhc3M9XCJkZXNjXCI+XG4gICAgICAgIHt7XG4gICAgICAgICAgX18oXG4gICAgICAgICAgICBcIkEgV29yZFByZXNzIHBsdWdpbiB1c2luZyBWdWUgSlMgZnJhbWV3b3JrIHRvIHdvcmsgd2l0aCBlbWFpbCBzZXR0aW5ncy5cIixcbiAgICAgICAgICAgIFwid3AtZW1haWxlclwiXG4gICAgICAgICAgKVxuICAgICAgICB9fVxuICAgICAgPC9wPlxuXG4gICAgICA8IS0tIFBhZ2UgdGFicyAtLT5cbiAgICAgIDxQYWdlVGFicyAvPlxuXG4gICAgICA8ZGl2IGNsYXNzPVwibWFpbi1jb250ZW50LXNlY3Rpb25cIj5cbiAgICAgICAgPEJhc2VBbGVydCAvPlxuICAgICAgICA8cm91dGVyLXZpZXcgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBtYXBBY3Rpb25zIH0gZnJvbSBcInZ1ZXhcIjtcbmltcG9ydCB7IG1lbnVGaXggfSBmcm9tIFwiLi91dGlscy9tZW51LWZpeFwiO1xuaW1wb3J0IFBhZ2VUYWJzIGZyb20gXCIuL2NvbXBvbmVudHMvdGFicy9QYWdlVGFicy52dWVcIjtcbmltcG9ydCBCYXNlQWxlcnQgZnJvbSBcIi4vY29tcG9uZW50cy9hbGVydC9CYXNlQWxlcnQudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiBcIkFwcFwiLFxuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBQYWdlVGFicyxcbiAgICAgICAgQmFzZUFsZXJ0LFxuICAgIH0sXG5cbiAgICB3YXRjaDoge1xuICAgICAgICAkcm91dGUoKSB7XG4gICAgICAgICAgICAvLyBGaXggdGhlIG1lbnUgdG8gc2hvdyBhY3RpdmUgbGlua1xuICAgICAgICAgICAgbWVudUZpeCgpO1xuXG4gICAgICAgICAgICAvLyBIaWRlIGV4aXN0aW5nIGFsZXJ0cy5cbiAgICAgICAgICAgIHRoaXMuaGlkZUFsZXJ0KCk7XG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIGNyZWF0ZWQoKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gbG9hZCB0aGUgc2V0dGluZ3Mgb24gaW5pdGlhbGl6YXRpb24gb2YgdGhlIGFwcC5cbiAgICAgICAgdGhpcy5mZXRjaFNldHRpbmdzKCk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgLi4ubWFwQWN0aW9ucyhbXCJmZXRjaFNldHRpbmdzXCIsIFwiaGlkZUFsZXJ0XCJdKSxcbiAgICB9LFxufTtcbjwvc2NyaXB0PiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdlxuICAgIHYtaWY9XCJhbGVydD8uaXNWaXNpYmxlXCJcbiAgICA6Y2xhc3M9XCJ7YWxlcnQsIHN1Y2Nlc3M6ICdzdWNjZXNzJyA9PT0gYWxlcnQudHlwZSwgZXJyb3I6ICdlcnJvcicgPT09IGFsZXJ0LnR5cGV9XCJcbiAgPlxuICAgIHt7IGFsZXJ0Py5tZXNzYWdlIH19XG5cbiAgICA8ZGl2XG4gICAgICBjbGFzcz1cImNsb3NlLWFsZXJ0XCJcbiAgICAgIEBjbGljaz1cImhpZGVBbGVydFwiXG4gICAgPlxuICAgICAgJnRpbWVzO1xuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBtYXBBY3Rpb25zLCBtYXBHZXR0ZXJzIH0gZnJvbSBcInZ1ZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdCYXNlQWxlcnQnLFxuXG4gICAgY29tcHV0ZWQ6IHsgLi4ubWFwR2V0dGVycyhbXCJhbGVydFwiXSkgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgLi4ubWFwQWN0aW9ucyhbXCJzZXRBbGVydFwiLCBcImhpZGVBbGVydFwiXSksXG4gICAgfSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxuLmFsZXJ0IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjY2NjYzZlO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWNvbG9yLXdoaXRlKTtcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgdHJhbnNpdGlvbjogYWxsO1xuXG4gICAgJi5zdWNjZXNzIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWNvbG9yLXN1Y2Nlc3MpO1xuICAgIH1cblxuICAgICYuZXJyb3Ige1xuICAgICAgICBjb2xvcjogdmFyKC0tY29sb3ItZXJyb3IpO1xuICAgIH1cblxuICAgIC5jbG9zZS1hbGVydCB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiA4cHg7XG4gICAgICAgIHJpZ2h0OiAxNnB4O1xuICAgICAgICBjb2xvcjogdmFyKC0tY29sb3ItZXJyb3IpO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICB9XG59XG48L3N0eWxlPiIsIjx0ZW1wbGF0ZT5cbiAgPGJ1dHRvblxuICAgIDp0eXBlPVwidHlwZVwiXG4gICAgOnN0eWxlPVwidmFyaWFudFN0eWxlc1wiXG4gID5cbiAgICA8QmFzZVNwaW5uZXIgOnN0YXR1cz1cImxvYWRpbmdcIiAvPlxuICAgIDxzcGFuIGNsYXNzPVwiYnV0dG9uLWNvbnRlbnRcIj5cbiAgICAgIDxzbG90IC8+XG4gICAgPC9zcGFuPlxuICAgIDwhLS0gc2xvdCBidXR0b24gY29udGVudCAtLT5cbiAgPC9idXR0b24+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IEJhc2VTcGlubmVyIGZyb20gXCIuLi9zcGlubmVyL0Jhc2VTcGlubmVyLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogXCJCYXNlQnV0dG9uXCIsXG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIEJhc2VTcGlubmVyLFxuICAgIH0sXG5cbiAgICBwcm9wczoge1xuICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgICBkZWZhdWx0OiBcImJ1dHRvblwiLFxuICAgICAgICB9LFxuICAgICAgICB2YXJpYW50OiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgICBkZWZhdWx0OiBcImRlZmF1bHRcIixcbiAgICAgICAgfSxcbiAgICAgICAgbG9hZGluZzoge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICB2YXJpYW50U3R5bGVzKCkge1xuICAgICAgICAgICAgbGV0IHN0eWxlcyA9IFwiXCI7XG5cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy52YXJpYW50KSB7XG4gICAgICAgICAgICBjYXNlIFwicHJpbWFyeVwiOlxuICAgICAgICAgICAgICAgIHN0eWxlcyArPSBcImJhY2tncm91bmQtY29sb3I6dmFyKC0tY29sb3ItcHJpbWFyeSlcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgICAgICAgICAgc3R5bGVzICs9IFwiYmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jb2xvci1lcnJvcilcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRcIjpcbiAgICAgICAgICAgICAgICBzdHlsZXMgKz0gXCJiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWNvbG9yLXNlY29uZGFyeSlcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG5idXR0b24ge1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1jb2xvci1wcmltYXJ5KTtcbiAgY29sb3I6ICNmZmY7XG4gIGJvcmRlcjogMHB4IHNvbGlkO1xuICBwYWRkaW5nOiAxMHB4IDIwcHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdHJhbnNpdGlvbjogYWxsO1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICY6aG92ZXIge1xuICAgIG9wYWNpdHk6IDAuOTtcbiAgfVxuXG4gIC5idXR0b24tY29udGVudCB7XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgfVxufVxuPC9zdHlsZT4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJ3cC1lbWFpbGVyLWNhcmRcIj5cbiAgICA8ZGl2IGNsYXNzPVwid3AtZW1haWxlci1jYXJkLWhlYWRlciB3cC1lbWFpbGVyLWZvcm0tcm93XCI+XG4gICAgICA8aDIgY2xhc3M9XCJ0aXRsZVwiPlxuICAgICAgICB7eyBoZWFkZXJUaXRsZSB9fVxuICAgICAgPC9oMj5cbiAgICAgIDxwIGNsYXNzPVwiZGVzY3JpcHRpb25cIj5cbiAgICAgICAge3sgaGVhZGVyRGVzY3JpcHRpb24gfX1cbiAgICAgIDwvcD5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwid3AtZW1haWxlci1jYXJkLWNvbnRlbnRcIj5cbiAgICAgIDxzbG90IG5hbWU9XCJjb250ZW50XCIgLz5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6IFwiQmFzZUNhcmRcIixcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGhlYWRlclRpdGxlOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgfSxcblxuICAgICAgICBoZWFkZXJEZXNjcmlwdGlvbjoge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZGVmYXVsdDogXCJcIixcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG4ud3AtZW1haWxlci1jYXJkIHtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuXG4gIC53cC1lbWFpbGVyLWNhcmQtaGVhZGVyIHtcbiAgICBwYWRkaW5nOiAyMHB4IDAgIWltcG9ydGFudDtcblxuICAgIC50aXRsZSB7XG4gICAgICBjb2xvcjogdmFyKC0tY29sb3Itc2Vjb25kYXJ5LWRhcmspO1xuICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICAgIG1hcmdpbjogMCAwIDZweCAwO1xuICAgIH1cbiAgICAuZGVzY3JpcHRpb24ge1xuICAgICAgY29sb3I6IHZhcigtLWNvbG9yLXNlY29uZGFyeS1saXRlKTtcbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+IiwiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IEJhciB9IGZyb20gXCJ2dWUtY2hhcnRqc1wiO1xuXG5pbXBvcnQge1xuICAgIENoYXJ0IGFzIENoYXJ0SlMsXG4gICAgVGl0bGUsXG4gICAgVG9vbHRpcCxcbiAgICBMZWdlbmQsXG4gICAgQmFyRWxlbWVudCxcbiAgICBDYXRlZ29yeVNjYWxlLFxuICAgIExpbmVhclNjYWxlLFxufSBmcm9tIFwiY2hhcnQuanNcIjtcblxuQ2hhcnRKUy5yZWdpc3RlcihcbiAgICBUaXRsZSxcbiAgICBUb29sdGlwLFxuICAgIExlZ2VuZCxcbiAgICBCYXJFbGVtZW50LFxuICAgIENhdGVnb3J5U2NhbGUsXG4gICAgTGluZWFyU2NhbGVcbik7XG5cbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxkaXY+XG4gICAgPEJhclxuICAgICAgOmNoYXJ0LWRhdGE9XCJjaGFydERhdGFcIlxuICAgICAgOmNoYXJ0LW9wdGlvbnM9XCJjaGFydE9wdGlvbnNcIlxuICAgICAgOmNoYXJ0LWlkPVwiY2hhcnRJZFwiXG4gICAgICA6c3R5bGVzPVwic3R5bGVzXCJcbiAgICAgIDp3aWR0aD1cIndpZHRoXCJcbiAgICAgIDpoZWlnaHQ9XCJoZWlnaHRcIlxuICAgICAgOnBsdWdpbnM9XCJwbHVnaW5zXCJcbiAgICAgIDpjc3MtY2xhc3Nlcz1cImNzc0NsYXNzZXNcIlxuICAgIC8+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiBcIkJhckNoYXJ0XCIsXG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIEJhcixcbiAgICB9LFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgY2hhcnRJZDoge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogJ2Jhci1jaGFydCdcbiAgICAgICAgfSxcbiAgICAgICAgd2lkdGg6IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgIGRlZmF1bHQ6IDQwMFxuICAgICAgICB9LFxuICAgICAgICBoZWlnaHQ6IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgIGRlZmF1bHQ6IDQwMFxuICAgICAgICB9LFxuICAgICAgICBjc3NDbGFzc2VzOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiAnJyxcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZ1xuICAgICAgICB9LFxuICAgICAgICBzdHlsZXM6IHtcbiAgICAgICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IHt9XG4gICAgICAgIH0sXG4gICAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gW11cbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGFzZXRzOiB7XG4gICAgICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiB7fVxuICAgICAgICB9LFxuICAgICAgICBjaGFydE9wdGlvbnM6IHtcbiAgICAgICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB2dWUvcmVxdWlyZS12YWxpZC1kZWZhdWx0LXByb3BcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgY2hhcnREYXRhKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHRoaXMubGFiZWxzLFxuICAgICAgICAgICAgICAgIGRhdGFzZXRzOiB0aGlzLmRhdGFzZXRzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn07XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImNoYXJ0LWxvYWRpbmctYXJlYVwiPlxuICAgIDxTa2VsZXRvblRleHQgLz5cbiAgICA8U2tlbGV0b25UZXh0IC8+XG4gICAgPFNrZWxldG9uVGV4dCAvPlxuICAgIDxTa2VsZXRvblRleHQgLz5cbiAgICA8U2tlbGV0b25UZXh0IC8+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBTa2VsZXRvblRleHQgZnJvbSAnLi4vc2tlbGV0b24vU2tlbGV0b25UZXh0LnZ1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnQmFyQ2hhcnRMb2FkaW5nJyxcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgU2tlbGV0b25UZXh0XG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG4uY2hhcnQtbG9hZGluZy1hcmVhIHtcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM4MDgwODAxYTtcbiAgICBwYWRkaW5nOiA0MHB4IDIwcHg7XG5cbiAgICAuc2tlbGV0b24ge1xuICAgICAgbWFyZ2luLXRvcDogMjBweDtcbiAgICB9XG5cbiAgICAuc2tlbGV0b24tdGV4dCB7XG4gICAgICBoZWlnaHQ6IDEuOHJlbTtcbiAgICB9XG59XG48L3N0eWxlPiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImlucHV0LWFyZWFcIj5cbiAgICA8IS0tIEhhbmRsZSBpbnB1dCBjb21wb25lbnQgZm9yIGdlbmVyYWwgaW5wdXRzIGxpa2UsIHRleHQsIG51bWJlciwgZW1haWwgLS0+XG4gICAgPGlucHV0XG4gICAgICB2LWlmPVwiaXNEZWZhdWx0SW5wdXRcIlxuICAgICAgOmlkPVwibmFtZVwiXG4gICAgICBjbGFzcz1cImlucHV0LW1haW5cIlxuICAgICAgOm5hbWU9XCJuYW1lXCJcbiAgICAgIDp0eXBlPVwidHlwZVwiXG4gICAgICA6dmFsdWU9XCJ2YWx1ZVwiXG4gICAgICA6cGxhY2Vob2xkZXI9XCJwbGFjZWhvbGRlclwiXG4gICAgICA6b25jaGFuZ2U9XCJvbkNoYW5nZUlucHV0XCJcbiAgICAgIDptaW49XCJtaW5cIlxuICAgICAgOm1heD1cIm1heFwiXG4gICAgPlxuXG4gICAgPCEtLSBIYW5kbGUgaW5wdXQgY29tcG9uZW50IGZvciBzd2l0Y2ggdHlwZSBpbnB1dCAtLT5cbiAgICA8bGFiZWwgdi1pZj1cImlzQ2hlY2tib3hcIj5cbiAgICAgIDxpbnB1dFxuICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICA6Y2hlY2tlZD1cImlzQ2hlY2tlZFwiXG4gICAgICAgIDpvbmNoYW5nZT1cIm9uQ2hhbmdlSW5wdXRcIlxuICAgICAgPlxuICAgICAgPHNwYW4gY2xhc3M9XCJ0b2dnbGUtc3dpdGNoXCIgLz5cblxuICAgICAgPHNwYW4+XG4gICAgICAgIHt7IGlzQ2hlY2tlZCA/IFwiT25cIiA6IFwiT2ZmXCIgfX1cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2xhYmVsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogXCJCYXNlSW5wdXRcIixcblxuICAgIHByb3BzOiB7XG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB9LFxuXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IFwidGV4dFwiLFxuICAgICAgICB9LFxuXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXIsIEFycmF5XSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcnLFxuICAgICAgICB9LFxuXG4gICAgICAgIHBsYWNlaG9sZGVyOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgICBkZWZhdWx0OiBcIlwiLFxuICAgICAgICB9LFxuXG4gICAgICAgIHJlcXVpcmVkOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgIH0sXG5cbiAgICAgICAgb25DaGFuZ2U6IHtcbiAgICAgICAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4ge30sXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZ1ZS9yZXF1aXJlLWRlZmF1bHQtcHJvcFxuICAgICAgICBtaW46IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdnVlL3JlcXVpcmUtZGVmYXVsdC1wcm9wXG4gICAgICAgIG1heDoge1xuICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBpc0RlZmF1bHRJbnB1dCgpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRJbnB1dFR5cGVzID0gW1widGV4dFwiLCBcIm51bWJlclwiLCBcImVtYWlsXCIsIFwic2VhcmNoXCIsIFwidXJsXCJdO1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRJbnB1dFR5cGVzLmluY2x1ZGVzKHRoaXMudHlwZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNDaGVja2JveCgpIHtcbiAgICAgICAgICAgIHJldHVybiBcInN3aXRjaFwiID09PSB0aGlzLnR5cGUgfHwgXCJjaGVja2JveFwiID09PSB0aGlzLnR5cGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNDaGVja2VkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMudmFsdWUpID09PSAxO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgb25DaGFuZ2VJbnB1dChlKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgdmFyaW91cyBpbnB1dCB0eXBlIGFuZCBwcm9jZXNzLlxuICAgICAgICAgICAgaWYgKHRoaXMuaXNDaGVja2JveCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBrZXk6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGUudGFyZ2V0LmNoZWNrZWQgPyAxIDogMCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2Uoe1xuICAgICAgICAgICAgICAgIGtleTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBlLnRhcmdldC52YWx1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbi5pbnB1dC1hcmVhIHtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIGZsZXgtYmFzaXM6IDkwJTtcbn1cblxuLmlucHV0LW1haW4ge1xuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1jb2xvci1ib3JkZXIpO1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIGJveC1zaGFkb3c6IG5vbmU7XG4gIGNvbG9yOiB2YXIoLS1jb2xvci1zZWNvbmRhcnktZGFyayk7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgcGFkZGluZzogN3B4IDEycHg7XG4gIG1hcmdpbjogMCAxMHB4IDAgMDtcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi1oZWlnaHQ6IDM1cHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjM7XG59XG5cbi50b2dnbGUtc3dpdGNoIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJhY2tncm91bmQtY29sb3I6ICNjY2M7XG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG4gIC1tb3otdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG4gIC1tcy10cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLWluLW91dDtcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbWFyZ2luOiAtMXB4IDVweCAwIDA7XG4gIHdpZHRoOiAzNnB4O1xuICBoZWlnaHQ6IDIwcHg7XG5cbiAgJjo6YmVmb3JlIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBoZWlnaHQ6IDE2cHg7XG4gICAgd2lkdGg6IDE2cHg7XG4gICAgbGVmdDogMnB4O1xuICAgIHRvcDogMnB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG4gICAgLW1vei10cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLWluLW91dDtcbiAgICAtbXMtdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XG4gIH1cbn1cblxuaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IGF1dG87XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGNsaXA6IHJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KTtcbiAgd2lkdGg6IDFweDtcbiAgaGVpZ2h0OiAxcHg7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cbiAgJjpjaGVja2VkOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbDt1dGY4LCUzQ3N2ZyUyMHhtbG5zJTNEJTI3aHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnJTI3JTIwdmlld0JveCUzRCUyNzAlMjAwJTIwMjAlMjAyMCUyNyUzRSUzQ3BhdGglMjBkJTNEJTI3TTE0LjgzJTIwNC44OWwxLjM0Ljk0LTUuODElMjA4LjM4SDkuMDJMNS43OCUyMDkuNjdsMS4zNC0xLjI1JTIwMi41NyUyMDIuNHolMjclMjBmaWxsJTNEJTI3JTIzMzU4MmM0JTI3JTJGJTNFJTNDJTJGc3ZnJTNFXCIpO1xuICAgIG1hcmdpbjogLTAuMTg3NXJlbSAwIDAgLTAuMjVyZW07XG4gICAgaGVpZ2h0OiAxLjMxMjVyZW07XG4gICAgd2lkdGg6IDEuMzEyNXJlbTtcbiAgfVxuXG4gICY6Y2hlY2tlZCArIC50b2dnbGUtc3dpdGNoIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBhMzJhO1xuXG4gICAgJjo6YmVmb3JlIHtcbiAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDE2cHgpO1xuICAgICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWCgxNnB4KTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxNnB4KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gTWVkaXVtIHNjcmVlblxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MDBweCkge1xuICAuaW5wdXQtbWFpbiB7XG4gICAgbWF4LXdpZHRoOiA0MDBweDtcbiAgfVxufVxuPC9zdHlsZT4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJ3cC1lbWFpbGVyLWlucHV0IHdwLWVtYWlsZXItZm9ybS1yb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwid3AtZW1haWxlci1pbnB1dC1sYWJlbFwiPlxuICAgICAgPGxhYmVsIDpmb3I9XCJuYW1lXCI+XG4gICAgICAgIHt7IGxhYmVsIH19XG4gICAgICA8L2xhYmVsPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJ3cC1lbWFpbGVyLWlucHV0LWNvbnRlbnRcIj5cbiAgICAgIDxzbG90IG5hbWU9XCJpbnB1dC1jb250ZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4XCI+XG4gICAgICAgICAgPEJhc2VJbnB1dFxuICAgICAgICAgICAgOmlkPVwibmFtZVwiXG4gICAgICAgICAgICA6bmFtZT1cIm5hbWVcIlxuICAgICAgICAgICAgOnR5cGU9XCJ0eXBlXCJcbiAgICAgICAgICAgIDp2YWx1ZT1cInZhbHVlXCJcbiAgICAgICAgICAgIDpwbGFjZWhvbGRlcj1cInBsYWNlaG9sZGVyXCJcbiAgICAgICAgICAgIDpvbi1jaGFuZ2U9XCJvbkNoYW5nZVwiXG4gICAgICAgICAgICA6bWluPVwibWluXCJcbiAgICAgICAgICAgIDptYXg9XCJtYXhcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxzbG90IG5hbWU9XCJpbnB1dC1yaWdodFwiIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxwXG4gICAgICAgICAgdi1pZj1cImhpbnRcIlxuICAgICAgICAgIGNsYXNzPVwiaW5wdXQtaGludFwiXG4gICAgICAgID5cbiAgICAgICAgICB7eyBoaW50IH19XG4gICAgICAgIDwvcD5cbiAgICAgIDwvc2xvdD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IEJhc2VJbnB1dCBmcm9tIFwiLi9CYXNlSW5wdXQudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiBcIklucHV0U2VjdGlvblwiLFxuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBCYXNlSW5wdXQsXG4gICAgfSxcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgfSxcblxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgfSxcblxuICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgICBkZWZhdWx0OiBcInRleHRcIixcbiAgICAgICAgfSxcblxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyLCBBcnJheV0sXG4gICAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgICBkZWZhdWx0OiAnJyxcbiAgICAgICAgfSxcblxuICAgICAgICBoaW50OiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgICBkZWZhdWx0OiBcIlwiLFxuICAgICAgICB9LFxuXG4gICAgICAgIHBsYWNlaG9sZGVyOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgICBkZWZhdWx0OiBcIlwiLFxuICAgICAgICB9LFxuXG4gICAgICAgIHJlcXVpcmVkOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgIH0sXG5cbiAgICAgICAgb25DaGFuZ2U6IHtcbiAgICAgICAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4ge30sXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZ1ZS9yZXF1aXJlLWRlZmF1bHQtcHJvcFxuICAgICAgICBtaW46IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdnVlL3JlcXVpcmUtZGVmYXVsdC1wcm9wXG4gICAgICAgIG1heDoge1xuICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbi53cC1lbWFpbGVyLWlucHV0IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXG4gIGxhYmVsIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICB9XG59XG5cbi5pbnB1dC1oaW50IHtcbiAgY29sb3I6IHZhcigtLWNvbG9yLXNlY29uZGFyeSk7XG4gIG1hcmdpbjogNXB4IDBweDtcbn1cblxuLy8gTWVkaXVtIHNjcmVlblxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MDBweCkge1xuICAud3AtZW1haWxlci1pbnB1dCB7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcblxuICAgIC53cC1lbWFpbGVyLWlucHV0LWxhYmVsIHtcbiAgICAgIGZsZXgtYmFzaXM6IDIwJTtcbiAgICB9XG5cbiAgICAud3AtZW1haWxlci1pbnB1dC1jb250ZW50IHtcbiAgICAgIGZsZXgtYmFzaXM6IDgwJTtcbiAgICAgIG1heC13aWR0aDogNDUwcHg7XG4gICAgfVxuICB9XG59XG48L3N0eWxlPiIsIjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyBfXyB9IGZyb20gJ0B3b3JkcHJlc3MvaTE4bic7XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZmxleCBqdXN0aWZ5LWJldHdlZW5cIj5cbiAgICA8ZGl2PlxuICAgICAgPHA+XG4gICAgICAgIHt7IGN1cnJlbnRQYWdlIH19L3t7IHRvdGFsUGFnZXMgfX0ge3sgdG90YWxQYWdlcyA8IDIgPyBfXygncGFnZScsICd3cC1lbWFpbGVyJykgOiBfXygncGFnZXMnLCAnd3AtZW1haWxlcicpIH19XG4gICAgICA8L3A+XG4gICAgPC9kaXY+XG4gICAgPHVsIGNsYXNzPVwicGFnaW5hdGlvblwiPlxuICAgICAgPGxpIGNsYXNzPVwicGFnaW5hdGlvbi1pdGVtXCI+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBjbGFzcz1cInByZXZpb3VzLWl0ZW1cIlxuICAgICAgICAgIDpkaXNhYmxlZD1cImlzSW5GaXJzdFBhZ2VcIlxuICAgICAgICAgIEBjbGljaz1cIm9uQ2xpY2tQcmV2aW91c1BhZ2VcIlxuICAgICAgICA+XG4gICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JmxhcXVvOzwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHlcIj4mbmJzcDsmbmJzcDsge3sgX18oJ1ByZXZpb3VzJywgJ3dwLWVtYWlsZXInKSB9fTwvc3Bhbj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2xpPlxuXG4gICAgICA8bGkgY2xhc3M9XCJwYWdpbmF0aW9uLWl0ZW1cIj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIGNsYXNzPVwibmV4dC1pdGVtXCJcbiAgICAgICAgICA6ZGlzYWJsZWQ9XCJpc0luTGFzdFBhZ2VcIlxuICAgICAgICAgIEBjbGljaz1cIm9uQ2xpY2tOZXh0UGFnZVwiXG4gICAgICAgID5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHlcIj57eyBfXygnTmV4dCcsICd3cC1lbWFpbGVyJykgfX0gJm5ic3A7Jm5ic3A7PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZyYXF1bzs8L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9saT5cbiAgICA8L3VsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogXCJCYXNlUGFnaW5hdGlvblwiLFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgbWF4VmlzaWJsZUJ1dHRvbnM6IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IDNcbiAgICAgICAgfSxcbiAgICAgICAgdG90YWxQYWdlczoge1xuICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgcGVyUGFnZToge1xuICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgY3VycmVudFBhZ2U6IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHRvdGFsSXRlbXM6IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgIGRlZmF1bHQ6IDAsXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgaXNJbkZpcnN0UGFnZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRQYWdlID09PSAxO1xuICAgICAgICB9LFxuICAgICAgICBpc0luTGFzdFBhZ2UoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50UGFnZSA9PT0gdGhpcy50b3RhbFBhZ2VzO1xuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIG9uQ2xpY2tQcmV2aW91c1BhZ2UoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdwYWdlY2hhbmdlZCcsIHRoaXMuY3VycmVudFBhZ2UgLSAxKTtcbiAgICAgICAgfSxcblxuICAgICAgICBvbkNsaWNrTmV4dFBhZ2UoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdwYWdlY2hhbmdlZCcsIHRoaXMuY3VycmVudFBhZ2UgKyAxKTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbi5wYWdpbmF0aW9uIHtcbiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gIH1cblxuICAucGFnaW5hdGlvbi1pdGVtIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cbiAgICBidXR0b24ge1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgICBwYWRkaW5nOiAxMHB4IDE1cHg7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcblxuICAgICAgICAmOmlzKDpkaXNhYmxlZCkge1xuICAgICAgICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuOTtcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1jb2xvci1wcmltYXJ5KTtcbiAgICAgICAgfVxuXG4gICAgICAgICYucHJldmlvdXMtaXRlbSB7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHggMHB4IDBweCA1cHg7XG4gICAgICAgIH1cblxuICAgICAgICAmLm5leHQtaXRlbSB7XG4gICAgICAgICAgICBib3JkZXItbGVmdDogMHB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMHB4IDVweCA1cHggMHB4O1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgLmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzRBQUU5QjtcbiAgICBjb2xvcjogI2ZmZmZmZjtcbiAgfVxuPC9zdHlsZT4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJwYWdpbmF0aW9uLWxvYWRpbmcgZmxleCBqdXN0aWZ5LWJldHdlZW4gbXQtMTBcIj5cbiAgICA8ZGl2PlxuICAgICAgPFNrZWxldG9uVGV4dCB3aWR0aD1cIjE1MHB4XCIgLz5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleFwiPlxuICAgICAgPFNrZWxldG9uVGV4dCB3aWR0aD1cIjYwcHhcIiAvPlxuICAgICAgPFNrZWxldG9uVGV4dCB3aWR0aD1cIjYwcHhcIiAvPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgU2tlbGV0b25UZXh0IGZyb20gXCIuLi9za2VsZXRvbi9Ta2VsZXRvblRleHQudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiBcIlBhZ2luYXRpb25Mb2FkZXJcIixcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgU2tlbGV0b25UZXh0LFxuICAgIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbi5wYWdpbmF0aW9uLWxvYWRpbmcge1xuICAuc2tlbGV0b24tdGV4dCB7XG4gICAgaGVpZ2h0OiAxLjVyZW07XG4gIH1cblxuICAuZmxleCB7XG4gICAgLnNrZWxldG9uLXRleHQge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+IiwiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IF9fIH0gZnJvbSAnQHdvcmRwcmVzcy9pMThuJztcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJzZXR0aW5ncy1mb3JtXCI+XG4gICAgPGZvcm1cbiAgICAgIG1ldGhvZD1cInBvc3RcIlxuICAgICAgQHN1Ym1pdD1cIm9uU3VibWl0XCJcbiAgICA+XG4gICAgICA8IS0tIFNlY3Rpb24gMSAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uXCI+XG4gICAgICAgIDxCYXNlQ2FyZFxuICAgICAgICAgIDpoZWFkZXItdGl0bGU9XCJfXygnR2VuZXJhbCcsICd3cC1lbWFpbGVyJylcIlxuICAgICAgICAgIDpoZWFkZXItZGVzY3JpcHRpb249XCJfXygnQ2hhbmdlIGdlbmVyYWwgY29udGVudHMgZm9yIHRoZSBzZXR0aW5ncycsICd3cC1lbWFpbGVyJylcIlxuICAgICAgICA+XG4gICAgICAgICAgPHRlbXBsYXRlICNjb250ZW50PlxuICAgICAgICAgICAgPElucHV0U2VjdGlvblxuICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgICAgOmxhYmVsPVwiX18oJ051bWJlciBvZiByb3dzJywgJ3dwLWVtYWlsZXInKVwiXG4gICAgICAgICAgICAgIG5hbWU9XCJudW1yb3dzXCJcbiAgICAgICAgICAgICAgOmhpbnQ9XCJfXygnSG93IG1hbnkgcm93cyB3aWxsIGJlIGRpc3BsYXllZCBvbiB0aGUgdGFibGUnLCAnd3AtZW1haWxlcicpXCJcbiAgICAgICAgICAgICAgOnZhbHVlPVwic2V0dGluZ3M/Lm51bXJvd3NcIlxuICAgICAgICAgICAgICA6cmVxdWlyZWQ9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgOm9uLWNoYW5nZT1cImNoYW5nZUlucHV0XCJcbiAgICAgICAgICAgICAgOm1pbj1cIjFcIlxuICAgICAgICAgICAgICA6bWF4PVwiNVwiXG4gICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICA8SW5wdXRTZWN0aW9uXG4gICAgICAgICAgICAgIHR5cGU9XCJzd2l0Y2hcIlxuICAgICAgICAgICAgICA6bGFiZWw9XCJfXygnU2hvdyBodW1hbiByZWFkYWJsZSBkYXRlJywgJ3dwLWVtYWlsZXInKVwiXG4gICAgICAgICAgICAgIG5hbWU9XCJodW1hbmRhdGVcIlxuICAgICAgICAgICAgICA6dmFsdWU9XCJzZXR0aW5ncz8uaHVtYW5kYXRlXCJcbiAgICAgICAgICAgICAgOmhpbnQ9XCJfXygnSWYgdGhlIGRhdGUgaW4gdGhlIHRhYmxlIHdpbGwgYmUgZGlzcGxheWVkIGFzIGEgaHVtYW4gcmVhZGFibGUgZm9ybWF0IG9yIGEgdGltZXN0YW1wJywgJ3dwLWVtYWlsZXInKVwiXG4gICAgICAgICAgICAgIDpyZXF1aXJlZD1cImZhbHNlXCJcbiAgICAgICAgICAgICAgOm9uLWNoYW5nZT1cImNoYW5nZUlucHV0XCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9CYXNlQ2FyZD5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8IS0tIFNlY3Rpb24gMiAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uXCI+XG4gICAgICAgIDxCYXNlQ2FyZFxuICAgICAgICAgIDpoZWFkZXItdGl0bGU9XCJfXygnRW1haWwnLCAnd3AtZW1haWxlcicpXCJcbiAgICAgICAgICA6aGVhZGVyLWRlc2NyaXB0aW9uPVwiX18oJ0NoYW5nZSB5b3VyIGVtYWlsIHNldHRpbmdzJywgJ3dwLWVtYWlsZXInKVwiXG4gICAgICAgID5cbiAgICAgICAgICA8dGVtcGxhdGUgI2NvbnRlbnQ+XG4gICAgICAgICAgICA8SW5wdXRTZWN0aW9uXG4gICAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXG4gICAgICAgICAgICAgIDpsYWJlbD1cIl9fKCdFbWFpbHMnLCAnd3AtZW1haWxlcicpXCJcbiAgICAgICAgICAgICAgbmFtZT1cImVtYWlsc1wiXG4gICAgICAgICAgICAgIDpvbi1jaGFuZ2U9XCJjaGFuZ2VJbnB1dFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDx0ZW1wbGF0ZSAjaW5wdXQtY29udGVudD5cbiAgICAgICAgICAgICAgICA8QmFzZUJ1dHRvblxuICAgICAgICAgICAgICAgICAgdi1pZj1cIiFlbWFpbHNEYXRhLmxlbmd0aFwiXG4gICAgICAgICAgICAgICAgICA6b25jbGljaz1cImFwcGVuZEVtYWlsXCJcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImRlZmF1bHRcIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJlbWFpbC1hcHBlbmQtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICArIHt7IF9fKCdBZGQgTmV3JywgJ3dwLWVtYWlsZXInKSB9fVxuICAgICAgICAgICAgICAgIDwvQmFzZUJ1dHRvbj5cblxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgIHYtZm9yPVwiKGVtYWlsLCBpbmRleCkgaW4gZW1haWxzRGF0YVwiXG4gICAgICAgICAgICAgICAgICA6a2V5PVwiaW5kZXhcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtdC0yMCBmbGV4XCI+XG4gICAgICAgICAgICAgICAgICAgIDxCYXNlSW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZW1haWxcIlxuICAgICAgICAgICAgICAgICAgICAgIDpuYW1lPVwiYGVtYWlsc18ke2luZGV4fWBcIlxuICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZT1cImVtYWlsXCJcbiAgICAgICAgICAgICAgICAgICAgICA6b24tY2hhbmdlPVwiKGlucHV0KSA9PiBjaGFuZ2VFbWFpbElucHV0KGlucHV0LCBpbmRleClcIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8QmFzZUJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgIHYtaWY9XCJlbWFpbHNEYXRhLmxlbmd0aCA8IDUgJiYgIWluZGV4XCJcbiAgICAgICAgICAgICAgICAgICAgICA6b25jbGljaz1cImFwcGVuZEVtYWlsXCJcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwiZGVmYXVsdFwiXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJlbWFpbC1hcHBlbmQtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICtcbiAgICAgICAgICAgICAgICAgICAgPC9CYXNlQnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgICAgIDxCYXNlQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgOm9uY2xpY2s9XCIoKSA9PiBkZWxldGVFbWFpbChpbmRleClcIlxuICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJlcnJvclwiXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJlbWFpbC1hcHBlbmQtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIC1cbiAgICAgICAgICAgICAgICAgICAgPC9CYXNlQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L0lucHV0U2VjdGlvbj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L0Jhc2VDYXJkPlxuICAgICAgPC9kaXY+XG4gICAgPC9mb3JtPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgQmFzZUNhcmQgZnJvbSBcIi4uL2NhcmQvQmFzZUNhcmQudnVlXCI7XG5pbXBvcnQgQmFzZUJ1dHRvbiBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9idXR0b24vQmFzZUJ1dHRvbi52dWVcIjtcbmltcG9ydCBJbnB1dFNlY3Rpb24gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvaW5wdXQvSW5wdXRTZWN0aW9uLnZ1ZVwiO1xuaW1wb3J0IEJhc2VJbnB1dCBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9pbnB1dC9CYXNlSW5wdXQudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiBcIlNldHRpbmdGb3JtXCIsXG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIEJhc2VDYXJkLFxuICAgICAgICBCYXNlQnV0dG9uLFxuICAgICAgICBJbnB1dFNlY3Rpb24sXG4gICAgICAgIEJhc2VJbnB1dFxuICAgIH0sXG5cbiAgICBwcm9wczoge1xuICAgICAgICBjaGFuZ2U6IHtcbiAgICAgICAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1haWxzRGF0YTogWy4uLnRoaXMuc2V0dGluZ3MuZW1haWxzXVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGNoYW5nZUlucHV0KGlucHV0KSB7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZShpbnB1dCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hhbmdlRW1haWxJbnB1dChpbnB1dCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuZW1haWxzRGF0YVtpbmRleF0gPSBpbnB1dC52YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuc2F2ZUVtYWlscygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFwcGVuZEVtYWlsKCkge1xuICAgICAgICAgICAgdGhpcy5lbWFpbHNEYXRhLnB1c2goJycpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRlbGV0ZUVtYWlsKGluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLmVtYWlsc0RhdGEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHRoaXMuc2F2ZUVtYWlscygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNhdmVFbWFpbHMoKSB7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZSh7XG4gICAgICAgICAgICAgICAga2V5OiAnZW1haWxzJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogIXRoaXMuZW1haWxzRGF0YS5sZW5ndGggPyAnJyA6IHRoaXMuZW1haWxzRGF0YVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb25TdWJtaXQoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8gV2UgZG9uJ3QgbWFrZSBmdWxsLWZvcm0gc3VibWlzc2lvbidzIGhlcmUuXG4gICAgICAgICAgICAvLyBXZSd2ZSBhZGRlZCBzaW5nbGUgY29sdW1uIHdpc2Ugc2F2aW5nIG9uIGNoYW5nZS1pbnB1dC5cbiAgICAgICAgfSxcbiAgICB9LFxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG4uc2V0dGluZ3MtZm9ybSB7XG4gIC5zZWN0aW9uLXNhdmUge1xuICAgIG1hcmdpbi10b3A6IDQwcHg7XG4gIH1cbiAgLmVtYWlsLWFwcGVuZC1idXR0b24ge1xuICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICAgIHBhZGRpbmc6IDEwcHggMTBweDtcbiAgfVxufVxuPC9zdHlsZT4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJtdC01MFwiPlxuICAgIDxTa2VsZXRvblRleHQgd2lkdGg9XCIyMDBweFwiIC8+XG4gICAgPFNrZWxldG9uVGV4dCB3aWR0aD1cIjUwMHB4XCIgLz5cblxuICAgIDxkaXYgY2xhc3M9XCJmbGV4IHctZnVsbCBtdC01MFwiPlxuICAgICAgPGRpdj48U2tlbGV0b25UZXh0IHdpZHRoPVwiMjAwcHhcIiAvPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm1sLTUwXCI+XG4gICAgICAgIDxTa2VsZXRvblRleHQgd2lkdGg9XCI0MDBweFwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJmbGV4IHctZnVsbCBtdC0yMFwiPlxuICAgICAgPGRpdj48U2tlbGV0b25UZXh0IHdpZHRoPVwiMjAwcHhcIiAvPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm1sLTUwXCI+XG4gICAgICAgIDxTa2VsZXRvblRleHQgd2lkdGg9XCI0MDBweFwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJmbGV4IHctZnVsbCBtdC0yMFwiPlxuICAgICAgPGRpdj48U2tlbGV0b25UZXh0IHdpZHRoPVwiMjAwcHhcIiAvPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm1sLTUwXCI+XG4gICAgICAgIDxTa2VsZXRvblRleHQgd2lkdGg9XCI0MDBweFwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJmbGV4IHctZnVsbCBtdC01MFwiPlxuICAgICAgPGRpdj48U2tlbGV0b25UZXh0IHdpZHRoPVwiMjAwcHhcIiAvPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm1sLTUwXCI+XG4gICAgICAgIDxTa2VsZXRvblRleHQgd2lkdGg9XCI0MDBweFwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleCB3LWZ1bGwgbXQtMjBcIj5cbiAgICAgIDxkaXY+PFNrZWxldG9uVGV4dCB3aWR0aD1cIjIwMHB4XCIgLz48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtbC01MFwiPlxuICAgICAgICA8U2tlbGV0b25UZXh0IHdpZHRoPVwiNDAwcHhcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBTa2VsZXRvblRleHQgZnJvbSBcIi4uL3NrZWxldG9uL1NrZWxldG9uVGV4dC52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6IFwiU2V0dGluZ0Zvcm1Mb2FkaW5nXCIsXG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIFNrZWxldG9uVGV4dCxcbiAgICB9LFxufTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2XG4gICAgY2xhc3M9XCJza2VsZXRvbiBza2VsZXRvbi10ZXh0XCJcbiAgICA6c3R5bGU9XCJza2VsZXRvbldpZHRoU3R5bGVcIlxuICAvPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiBcIlNrZWxldG9uVGV4dFwiLFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgd2lkdGg6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcxMDAlJyxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBza2VsZXRvbldpZHRoU3R5bGUoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG4uc2tlbGV0b24ge1xuICBhbmltYXRpb246IHNrZWxldG9uLWxvYWRpbmcgMXMgbGluZWFyIGluZmluaXRlIGFsdGVybmF0ZTtcbn1cblxuQGtleWZyYW1lcyBza2VsZXRvbi1sb2FkaW5nIHtcbiAgMCUge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGhzbCgyMDAsIDIwJSwgODAlKTtcbiAgfVxuICAxMDAlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMjAwLCAyMCUsIDk1JSk7XG4gIH1cbn1cblxuLnNrZWxldG9uLXRleHQge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAwLjdyZW07XG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcbn1cbjwvc3R5bGU+IiwiPHRlbXBsYXRlPlxuICA8ZGl2XG4gICAgdi1zaG93PVwic3RhdHVzXCJcbiAgICBjbGFzcz1cInNsLXNwaW5uZXJcIlxuICAgIDpzdHlsZT1cInNwaW5uZXJTdHlsZVwiXG4gIC8+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6IFwiQmFzZVNwaW5uZXJcIixcblxuICAgIHByb3BzOiB7XG4gICAgICAgIHN0YXR1czoge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIH0sXG5cbiAgICAgICAgcm90YXRpb246IHtcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB9LFxuXG4gICAgICAgIHNpemU6IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgIGRlZmF1bHQ6IDEyLFxuICAgICAgICB9LFxuXG4gICAgICAgIGRlcHRoOiB7XG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgICBkZWZhdWx0OiAzLFxuICAgICAgICB9LFxuXG4gICAgICAgIHNwZWVkOiB7XG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgICBkZWZhdWx0OiAwLjgsXG4gICAgICAgIH0sXG5cbiAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IFwiIzRmYzA4ZFwiLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcm90YXRpb25BbmltYXRpb25zOiBbXCJmb3J3YXJkXCIsIFwiYmFja3dhcmRcIl0sXG4gICAgICAgICAgICBzaXplVW5pdHM6IFwicHhcIixcbiAgICAgICAgICAgIHRpbWVVbml0czogXCJzXCIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIHJvdGF0aW9uRGlyZWN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucm90YXRpb25cbiAgICAgICAgICAgICAgICA/IHRoaXMucm90YXRpb25BbmltYXRpb25zWzBdXG4gICAgICAgICAgICAgICAgOiB0aGlzLnJvdGF0aW9uQW5pbWF0aW9uc1sxXTtcbiAgICAgICAgfSxcblxuICAgICAgICBzcGlubmVyU2l6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNpemUgKyB0aGlzLnNpemVVbml0cztcbiAgICAgICAgfSxcblxuICAgICAgICBzcGlubmVyRGVwdGgoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZXB0aCArIHRoaXMuc2l6ZVVuaXRzO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNwaW5uZXJTcGVlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNwZWVkICsgdGhpcy50aW1lVW5pdHM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3Bpbm5lclN0eWxlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib3JkZXJUb3BDb2xvcjogdGhpcy5oZXhUb1JHQih0aGlzLmNvbG9yLCAwLjE1KSxcbiAgICAgICAgICAgICAgICBib3JkZXJSaWdodENvbG9yOiB0aGlzLmhleFRvUkdCKHRoaXMuY29sb3IsIDAuMTUpLFxuICAgICAgICAgICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGlzLmhleFRvUkdCKHRoaXMuY29sb3IsIDAuMTUpLFxuICAgICAgICAgICAgICAgIGJvcmRlckxlZnRDb2xvcjogdGhpcy5jb2xvcixcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5zcGlubmVyU2l6ZSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuc3Bpbm5lclNpemUsXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IHRoaXMuc3Bpbm5lckRlcHRoLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbk5hbWU6IHRoaXMucm90YXRpb25EaXJlY3Rpb24sXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IHRoaXMuc3Bpbm5lclNwZWVkLFxuICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiA1XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGhleFRvUkdCKGhleCwgYWxwaGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBwYXJzZUludChoZXguc2xpY2UoMSwgMyksIDE2KSxcbiAgICAgICAgICAgICAgICBnID0gcGFyc2VJbnQoaGV4LnNsaWNlKDMsIDUpLCAxNiksXG4gICAgICAgICAgICAgICAgYiA9IHBhcnNlSW50KGhleC5zbGljZSg1LCA3KSwgMTYpO1xuXG4gICAgICAgICAgICBpZiAoYWxwaGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYHJnYmEoJHtyfSwgJHtnfSwgJHtifSwgJHthbHBoYX0pYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGByZ2IoJHtyfSwgJHtnfSwgJHtifSlgO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuLnNsLXNwaW5uZXIge1xuICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbiAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xuICBtYXJnaW46IDBweCBhdXRvO1xuXG4gIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xuICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXI7XG5cbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICB3aWR0aDogMzBweDtcbiAgaGVpZ2h0OiAzMHB4O1xufVxuXG5Aa2V5ZnJhbWVzIGZvcndhcmQge1xuICAwJSB7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICB9XG59XG5cbkBrZXlmcmFtZXMgYmFja3dhcmQge1xuICAwJSB7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMzYwZGVnKTtcbiAgfVxufVxuPC9zdHlsZT4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3NOYW1lPVwidGFibGUtcmVzcG9uc2l2ZVwiPlxuICAgIDxUYWJsZUxvYWRpbmcgdi1pZj1cImxvYWRpbmdcIiAvPlxuXG4gICAgPHRhYmxlIHYtaWY9XCIhbG9hZGluZ1wiPlxuICAgICAgPHRoZWFkPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoXG4gICAgICAgICAgICB2LWZvcj1cImhlYWRlciBpbiBoZWFkZXJzXCJcbiAgICAgICAgICAgIDprZXk9XCJoZWFkZXJcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt7IGhlYWRlciB9fVxuICAgICAgICAgIDwvdGg+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L3RoZWFkPlxuICAgICAgPHRib2R5PlxuICAgICAgICA8dHJcbiAgICAgICAgICB2LWZvcj1cInJvdyBpbiByb3dzLmRhdGFcIlxuICAgICAgICAgIDprZXk9XCJyb3cuaWRcIlxuICAgICAgICA+XG4gICAgICAgICAgPHRkXG4gICAgICAgICAgICB2LWZvcj1cImtleSBpbiBoZWFkZXJzXCJcbiAgICAgICAgICAgIDprZXk9XCJrZXlcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgdi1pZj1cImlzSHRtbChrZXk/LnRvTG93ZXJDYXNlKCkpXCJcbiAgICAgICAgICAgICAgdi1odG1sPVwicm93Py5ba2V5Py50b0xvd2VyQ2FzZSgpXVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHNwYW4gdi1lbHNlPnt7IHJvdz8uW2tleT8udG9Mb3dlckNhc2UoKV0gfX08L3NwYW4+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGJvZHk+XG4gICAgPC90YWJsZT5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgbWFwR2V0dGVycyB9IGZyb20gXCJ2dWV4XCI7XG5pbXBvcnQgVGFibGVMb2FkaW5nIGZyb20gJy4vVGFibGVMb2FkaW5nLnZ1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiAnQmFzZVRhYmxlJyxcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgVGFibGVMb2FkaW5nLFxuICAgIH0sXG5cbiAgICBwcm9wczoge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICByb3dzOiB7XG4gICAgICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgbG9hZGluZzoge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBodG1sQ29sdW1uczoge1xuICAgICAgICAgICAgdHlwZTogQXJyYXksXG4gICAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbXSxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICAuLi5tYXBHZXR0ZXJzKFtcInNldHRpbmdzXCJdKSxcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICBpc0h0bWwoa2V5TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHRtbENvbHVtbnMuaW5jbHVkZXMoa2V5TmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbi50YWJsZS1yZXNwb25zaXZlIHtcbiAgICBvdmVyZmxvdy14OiBhdXRvO1xuXG4gICAgdGFibGUge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzgwODA4MDFhO1xuXG4gICAgICAgIHRoLCB0ZCB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1jb2xvci13aGl0ZSk7XG4gICAgICAgICAgICBwYWRkaW5nOiAxcmVtIC43NXJlbSAxcmVtIC43NXJlbTtcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhlYWQge1xuICAgICAgICAgICAgdHIge1xuICAgICAgICAgICAgICAgIHRoIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgICAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG48L3N0eWxlPiIsIjx0ZW1wbGF0ZT5cbiAgPHRhYmxlPlxuICAgIDx0aGVhZD5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRoPlxuICAgICAgICAgIDxTa2VsZXRvblRleHQgd2lkdGg9XCIxMDBweFwiIC8+XG4gICAgICAgIDwvdGg+XG4gICAgICAgIDx0aD5cbiAgICAgICAgICA8U2tlbGV0b25UZXh0IHdpZHRoPVwiMTAwcHhcIiAvPlxuICAgICAgICA8L3RoPlxuICAgICAgICA8dGg+XG4gICAgICAgICAgPFNrZWxldG9uVGV4dCB3aWR0aD1cIjEwMHB4XCIgLz5cbiAgICAgICAgPC90aD5cbiAgICAgICAgPHRoPlxuICAgICAgICAgIDxTa2VsZXRvblRleHQgd2lkdGg9XCIxMDBweFwiIC8+XG4gICAgICAgIDwvdGg+XG4gICAgICAgIDx0aD5cbiAgICAgICAgICA8U2tlbGV0b25UZXh0IHdpZHRoPVwiMTAwcHhcIiAvPlxuICAgICAgICA8L3RoPlxuICAgICAgPC90cj5cbiAgICA8L3RoZWFkPlxuICAgIDx0Ym9keT5cbiAgICAgIDx0clxuICAgICAgICB2LWZvcj1cIihuLCBpKSBpbiA1XCJcbiAgICAgICAgOmtleT1cImlcIlxuICAgICAgICBzdHlsZT1cIm1hcmdpbi10b3A6IDUwcHg7XCJcbiAgICAgID5cbiAgICAgICAgPHRkPjxTa2VsZXRvblRleHQgd2lkdGg9XCIxMDBweFwiIC8+PC90ZD5cbiAgICAgICAgPHRkPjxTa2VsZXRvblRleHQgd2lkdGg9XCIxMDBweFwiIC8+PC90ZD5cbiAgICAgICAgPHRkPjxTa2VsZXRvblRleHQgd2lkdGg9XCIxMDBweFwiIC8+PC90ZD5cbiAgICAgICAgPHRkPjxTa2VsZXRvblRleHQgd2lkdGg9XCIxMDBweFwiIC8+PC90ZD5cbiAgICAgICAgPHRkPjxTa2VsZXRvblRleHQgd2lkdGg9XCIxMDBweFwiIC8+PC90ZD5cbiAgICAgIDwvdHI+XG4gICAgPC90Ym9keT5cbiAgPC90YWJsZT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgU2tlbGV0b25UZXh0IGZyb20gJy4uL3NrZWxldG9uL1NrZWxldG9uVGV4dC52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogJ1RhYmxlTG9hZGluZycsXG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIFNrZWxldG9uVGV4dFxuICAgIH1cbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxudGFibGUge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzgwODA4MDFhO1xuXG4gICAgdGgsIHRkIHtcbiAgICAgICAgcGFkZGluZzogMTBweCAyMHB4O1xuICAgIH1cblxuICAgIHRoIHtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tY29sb3Itd2hpdGUpO1xuICAgIH1cbn1cbjwvc3R5bGU+IiwiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IF9fIH0gZnJvbSAnQHdvcmRwcmVzcy9pMThuJztcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJ3cC1lbWFpbGVyLXRhYnNcIj5cbiAgICA8ZGl2IGNsYXNzPVwidGFiLWl0ZW1cIj5cbiAgICAgIDxyb3V0ZXItbGluayB0bz1cIi9cIj5cbiAgICAgICAge3sgX18oXCJTZXR0aW5nc1wiLCBcIndwLWVtYWlsZXJcIikgfX1cbiAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInRhYi1pdGVtXCI+XG4gICAgICA8cm91dGVyLWxpbmsgdG89XCIvbGlzdFwiPlxuICAgICAgICB7eyBfXyhcIlRvcCBQYWdlc1wiLCBcIndwLWVtYWlsZXJcIikgfX1cbiAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInRhYi1pdGVtXCI+XG4gICAgICA8cm91dGVyLWxpbmsgdG89XCIvZ3JhcGhcIj5cbiAgICAgICAge3sgX18oXCJHcmFwaFwiLCBcIndwLWVtYWlsZXJcIikgfX1cbiAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiBcIlBhZ2VUYWJzXCIsXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbiN3cC1lbWFpbGVyLXRhYnMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci13aGl0ZSk7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgbWFyZ2luOiAwIDAgMjBweCAtMjBweDtcbiAgcGFkZGluZzogMCAyMHB4O1xuICBwb3NpdGlvbjogc3RpY2t5O1xuICB0b3A6IDBweDtcbiAgei1pbmRleDogOTk7XG5cbiAgLnRhYi1pdGVtIHtcbiAgICBhIHtcbiAgICAgIHRyYW5zaXRpb246IGFsbDtcbiAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgICBjb2xvcjogIzY2NjY2NjtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIG1hcmdpbi1yaWdodDogMzBweDtcbiAgICAgIHBhZGRpbmc6IDIwcHggMTBweCAxOHB4IDEwcHg7XG4gICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG5cbiAgICAgICY6Zm9jdXMsXG4gICAgICAmLnJvdXRlci1saW5rLWFjdGl2ZSxcbiAgICAgICY6aG92ZXIge1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgfVxuXG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWNvbG9yLXNlY29uZGFyeSk7XG4gICAgICB9XG5cbiAgICAgICYucm91dGVyLWxpbmstYWN0aXZlIHtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWNvbG9yLXByaW1hcnkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIE1lZGl1bSBzY3JlZW5cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MDBweCkge1xuICAgIHRvcDogMzJweDtcbiAgfVxufVxuPC9zdHlsZT4iLCI8c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgX18gfSBmcm9tICdAd29yZHByZXNzL2kxOG4nO1xuaW1wb3J0IHsgbWFwQWN0aW9ucywgbWFwR2V0dGVycyB9IGZyb20gXCJ2dWV4XCI7XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZ3JhcGgtcGFnZVwiPlxuICAgIDxkaXYgY2xhc3M9XCJmbGV4IGp1c3RpZnktYmV0d2VlblwiPlxuICAgICAgPGgzPnt7IF9fKCdHcmFwaCcsICd3cC1lbWFpbGVyJykgfX08L2gzPlxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIHYtaWY9XCIhZ3JhcGhSZWZyZXNoaW5nXCJcbiAgICAgICAgICBjbGFzcz1cInJlZnJlc2gtaWNvblwiXG4gICAgICAgICAgdGl0bGU9XCJDbGljayB0byByZWZyZXNoXCJcbiAgICAgICAgICBAY2xpY2s9XCJyZWZyZXNoQ2hhcnRcIlxuICAgICAgICA+XG4gICAgICAgICAgPCEtLSBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdnVlL21heC1hdHRyaWJ1dGVzLXBlci1saW5lIC0tPlxuICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGRhdGEtbmFtZT1cIklzb2xhdGlvbiBNb2RlXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHdpZHRoPVwiMTRcIiBoZWlnaHQ9XCIxNFwiPjxwYXRoIGQ9XCJNMTIgMi45OWE5LjAzIDkuMDMgMCAwIDEgNi4zNiAyLjY1bC0yLjM3IDIuMzdoNS44M2ExLjE1IDEuMTUgMCAwIDAgMS4xNC0xLjE0VjEuMDRsLTIuNDkgMi40OUExMS45OCAxMS45OCAwIDAgMCAwIDEyaDIuOTlBOS4wMiA5LjAyIDAgMCAxIDEyIDIuOTlaTTIxLjAxIDEyYTkgOSAwIDAgMS0xNS4zNyA2LjM2bDIuMzctMi4zN0gyYS45Ni45NiAwIDAgMC0uOTUuOTV2Ni4wMmwyLjQ5LTIuNDlBMTEuOTggMTEuOTggMCAwIDAgMjQgMTJaXCIgLz48L3N2Zz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICB2LWlmPVwiZ3JhcGhSZWZyZXNoaW5nXCJcbiAgICAgICAgICBjbGFzcz1cInRleHQtY2VudGVyXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxCYXNlU3Bpbm5lciAvPlxuICAgICAgICAgIHt7IF9fKFwiUmVmcmVzaGluZy4uLlwiLCBcIndwLWVtYWlsZXJcIikgfX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxCYXJDaGFydExvYWRpbmcgdi1pZj1cImdyYXBoTG9hZGluZ1wiIC8+XG5cbiAgICA8QmFyQ2hhcnRcbiAgICAgIHYtaWY9XCIhZ3JhcGhMb2FkaW5nXCJcbiAgICAgIDpsYWJlbHM9XCJncmFwaExhYmVsc1wiXG4gICAgICA6ZGF0YXNldHM9XCJncmFwaERhdGFzZXRzXCJcbiAgICAvPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgQmFyQ2hhcnQgZnJvbSAnLi4vY29tcG9uZW50cy9jaGFydC9CYXJDaGFydC52dWUnO1xuaW1wb3J0IEJhckNoYXJ0TG9hZGluZyBmcm9tICcuLi9jb21wb25lbnRzL2NoYXJ0L0JhckNoYXJ0TG9hZGluZy52dWUnO1xuaW1wb3J0IEJhc2VTcGlubmVyIGZyb20gJy4uL2NvbXBvbmVudHMvc3Bpbm5lci9CYXNlU3Bpbm5lci52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogXCJHcmFwaFBhZ2VcIixcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgQmFyQ2hhcnQsXG4gICAgICAgIEJhc2VTcGlubmVyLFxuICAgICAgICBCYXJDaGFydExvYWRpbmcsXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7IC4uLm1hcEdldHRlcnMoW1wiZ3JhcGhMb2FkaW5nXCIsIFwiZ3JhcGhSZWZyZXNoaW5nXCIsIFwiZ3JhcGhMYWJlbHNcIiwgXCJncmFwaERhdGFzZXRzXCJdKSB9LFxuXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgICAgdGhpcy5nZXRHcmFwaERhdGEoKTtcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICAuLi5tYXBBY3Rpb25zKFtcImdldEdyYXBoRGF0YVwiXSksXG5cbiAgICAgICAgcmVmcmVzaENoYXJ0KCkge1xuICAgICAgICAgICAgLy8gSGFyZCByZWZyZXNoIGJ5IHBhc3NpbmcgdHJ1ZS5cbiAgICAgICAgICAgIHRoaXMuZ2V0R3JhcGhEYXRhKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG4ucmVmcmVzaC1pY29uIHtcbiAgcGFkZGluZzogMTBweDtcbiAgYmFja2dyb3VuZDogI2ZmZjtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBib3JkZXI6IDFweCBzb2xpZCAjRTlFREYwO1xuICBib3gtc2hhZG93OiAwIDNweCAxNXB4IDAgcmdiYSgwLDAsMCwuMDIpO1xuICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgJjpob3ZlciB7XG4gICAgICBzdmcge1xuICAgICAgICAgIGZpbGw6IHZhcigtLWNvbG9yLXByaW1hcnkpO1xuICAgICAgfVxuICB9XG5cbiAgJi5hY3RpdmUge1xuICAgICAgc3ZnIHtcbiAgICAgICAgICBmaWxsOiB2YXIoLS1jb2xvci1wcmltYXJ5KTtcbiAgICAgICAgICBhbmltYXRpb246IHJvdGF0aW9uIDFzIGluZmluaXRlIGxpbmVhcjtcbiAgICAgIH1cbiAgfVxuXG4gIHN2ZyB7XG4gICAgICBmaWxsOiAjYmRjMGM5O1xuICB9XG59XG48L3N0eWxlPiIsIjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyBfXyB9IGZyb20gJ0B3b3JkcHJlc3MvaTE4bic7XG5pbXBvcnQgeyBtYXBBY3Rpb25zLCBtYXBHZXR0ZXJzIH0gZnJvbSBcInZ1ZXhcIjtcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJsaXN0LXBhZ2VcIj5cbiAgICA8aDM+e3sgcGFnZVRpdGxlIH19PC9oMz5cbiAgICA8QmFzZVRhYmxlXG4gICAgICA6bG9hZGluZz1cInRhYmxlTG9hZGluZ1wiXG4gICAgICA6aGVhZGVycz1cImhlYWRlcnNcIlxuICAgICAgOnJvd3M9XCJyb3dzXCJcbiAgICAgIDpodG1sLWNvbHVtbnM9XCJodG1sQ29sdW1uc1wiXG4gICAgLz5cbiAgICA8ZGl2PlxuICAgICAgPEJhc2VQYWdpbmF0aW9uXG4gICAgICAgIHYtaWY9XCIhdGFibGVMb2FkaW5nXCJcbiAgICAgICAgOnRvdGFsLXBhZ2VzPVwicm93cy50b3RhbFBhZ2VcIlxuICAgICAgICA6dG90YWwtaXRlbXM9XCJyb3dzLnRvdGFsSXRlbXNcIlxuICAgICAgICA6cGVyLXBhZ2U9XCJyb3dzLnBlclBhZ2VcIlxuICAgICAgICA6Y3VycmVudC1wYWdlPVwiY3VycmVudFBhZ2VcIlxuICAgICAgICBAcGFnZWNoYW5nZWQ9XCJvblBhZ2VDaGFuZ2VcIlxuICAgICAgLz5cbiAgICAgIDxQYWdpbmF0aW9uTG9hZGVyIHYtaWY9XCJ0YWJsZUxvYWRpbmdcIiAvPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdj5cbiAgICAgIDxoMz57eyBfXyhcIkVtYWlsc1wiLCBcIndwLWVtYWlsZXJcIikgfX08L2gzPlxuICAgICAgPHVsPlxuICAgICAgICA8bGlcbiAgICAgICAgICB2LWZvcj1cIihlbWFpbCwgaW5kZXgpIGluIHNldHRpbmdzPy5lbWFpbHNcIlxuICAgICAgICAgIDprZXk9XCJpbmRleFwiXG4gICAgICAgID5cbiAgICAgICAgICB7eyBlbWFpbCB9fVxuICAgICAgICA8L2xpPlxuXG4gICAgICAgIDxsaSB2LWlmPVwiIXNldHRpbmdzPy5lbWFpbHM/Lmxlbmd0aFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwibm8tZW1haWxzXCI+XG4gICAgICAgICAgICB7eyBfXyhcIlNvcnJ5LCBObyBlbWFpbHMgYWRkZWQgeWV0LiBQbGVhc2UgYWRkIGVtYWlsIGZyb20gU2V0dGluZ3MgcGFnZS5cIiwgXCJ3cC1lbWFpbGVyXCIpIH19XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2xpPlxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IEJhc2VUYWJsZSBmcm9tIFwiLi4vY29tcG9uZW50cy90YWJsZXMvQmFzZVRhYmxlLnZ1ZVwiO1xuaW1wb3J0IEJhc2VQYWdpbmF0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL3BhZ2luYXRpb24vQmFzZVBhZ2luYXRpb24udnVlXCI7XG5pbXBvcnQgUGFnaW5hdGlvbkxvYWRlciBmcm9tICcuLi9jb21wb25lbnRzL3BhZ2luYXRpb24vUGFnaW5hdGlvbkxvYWRlci52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTogXCJMaXN0UGFnZVwiLFxuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBCYXNlVGFibGUsXG4gICAgICAgIEJhc2VQYWdpbmF0aW9uLFxuICAgICAgICBQYWdpbmF0aW9uTG9hZGVyXG4gICAgfSxcblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJyZW50UGFnZTogMSxcbiAgICAgICAgICAgIGh0bWxDb2x1bW5zOiBbJ3VybCddXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7IC4uLm1hcEdldHRlcnMoW1widGFibGVMb2FkaW5nXCIsIFwicGFnZVRpdGxlXCIsIFwiaGVhZGVyc1wiLCBcInJvd3NcIiwgXCJzZXR0aW5nc1wiXSkgfSxcblxuICAgIHdhdGNoOiB7XG4gICAgICAgIHNldHRpbmdzKCkge1xuICAgICAgICAgICAgdGhpcy5nZXRUYWJsZURhdGEodGhpcy5jdXJyZW50UGFnZSk7XG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIGNyZWF0ZWQoKSB7XG4gICAgICAgIHRoaXMuZ2V0VGFibGVEYXRhKCk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgLi4ubWFwQWN0aW9ucyhbXCJnZXRUYWJsZURhdGFcIl0pLFxuXG4gICAgICAgIG9uUGFnZUNoYW5nZShwYWdlKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gcGFnZTtcbiAgICAgICAgICAgIHRoaXMuZ2V0VGFibGVEYXRhKHBhZ2UpO1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbi5uby1lbWFpbHMge1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1jb2xvci13aGl0ZSk7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XG4gIHBhZGRpbmc6IDEwcHggMjBweDtcbiAgY29sb3I6IHZhcigtLWNvbG9yLWRhbmdlcik7XG59XG48L3N0eWxlPiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInNldHRpbmdzLXBhZ2VcIj5cbiAgICA8U2V0dGluZ0Zvcm1Mb2FkaW5nIHYtaWY9XCJpc1NldHRpbmdzTG9hZGluZ1wiIC8+XG5cbiAgICA8U2V0dGluZ0Zvcm1cbiAgICAgIHYtaWY9XCIhaXNTZXR0aW5nc0xvYWRpbmdcIlxuICAgICAgOmRlZmF1bHQ9XCJzZXR0aW5nc1wiXG4gICAgICA6Y2hhbmdlPVwib25DaGFuZ2VJbnB1dFwiXG4gICAgICA6c2V0dGluZ3M9XCJzZXR0aW5nc1wiXG4gICAgLz5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgbWFwQWN0aW9ucywgbWFwR2V0dGVycyB9IGZyb20gXCJ2dWV4XCI7XG5pbXBvcnQgeyBkZWJvdW5jZSB9IGZyb20gXCJkZWJvdW5jZVwiO1xuaW1wb3J0IHsgdmFsaWRhdGVTZXR0aW5ncyB9IGZyb20gXCIuLi91dGlscy92YWxpZGF0aW9uXCI7XG5pbXBvcnQgU2V0dGluZ0Zvcm0gZnJvbSAnLi4vY29tcG9uZW50cy9zZXR0aW5ncy9TZXR0aW5nRm9ybS52dWUnO1xuaW1wb3J0IFNldHRpbmdGb3JtTG9hZGluZyBmcm9tIFwiLi4vY29tcG9uZW50cy9zZXR0aW5ncy9TZXR0aW5nRm9ybUxvYWRpbmcudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiBcIlNldHRpbmdQYWdlXCIsXG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIFNldHRpbmdGb3JtLFxuICAgICAgICBTZXR0aW5nRm9ybUxvYWRpbmcsXG4gICAgfSxcblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJyZW50SW5wdXQ6IHt9LFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjb21wdXRlZDogeyAuLi5tYXBHZXR0ZXJzKFtcImFsZXJ0XCIsIFwiaXNTZXR0aW5nc1NhdmluZ1wiLCBcImlzU2V0dGluZ3NMb2FkaW5nXCIsIFwic2V0dGluZ3NcIl0pIH0sXG5cbiAgICB3YXRjaDoge1xuICAgICAgICBjdXJyZW50SW5wdXQ6IGRlYm91bmNlKGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgdGhpcy5zdG9yZVNldHRpbmdzKHZhbCk7XG4gICAgICAgIH0sIDUwMClcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICAuLi5tYXBBY3Rpb25zKFtcInN0b3JlU2V0dGluZ3NcIiwgXCJzZXRBbGVydFwiLCBcImhpZGVBbGVydFwiXSksXG5cbiAgICAgICAgb25DaGFuZ2VJbnB1dChpbnB1dCkge1xuICAgICAgICAgICAgLy8gVmFsaWRhdGUgY2xpZW50IHNpZGUuXG4gICAgICAgICAgICBjb25zdCB2YWxpZGF0ZSA9IHZhbGlkYXRlU2V0dGluZ3MoaW5wdXQpO1xuXG4gICAgICAgICAgICBpZiAoIXZhbGlkYXRlLnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBbGVydCh7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgIDogdmFsaWRhdGUubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZSAgICAgOiAnZXJyb3InXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoYWxlcnQuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZUFsZXJ0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbnB1dCA9IGlucHV0O1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuPC9zY3JpcHQ+IiwiLyoqXHJcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llcy5cclxuICovXHJcbmltcG9ydCB7IF9fLCBzcHJpbnRmIH0gZnJvbSAnQHdvcmRwcmVzcy9pMThuJztcclxuXHJcbndpbmRvdy5fXyA9IF9fO1xyXG53aW5kb3cuc3ByaW50ZiA9IHNwcmludGY7XHJcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICAvKiBnbG9iYWwgX18sIHNwcmludGYgKi9cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIF9fKHRleHQsIGRvbWFpbikge1xuICAgICAgICAgICAgcmV0dXJuIF9fKHRleHQsIGRvbWFpbik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3ByaW50ZihmbXQsIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiBzcHJpbnRmKGZtdCwgLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuIiwiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXMuXG4gKi9cbmltcG9ydCB7IGNyZWF0ZVJvdXRlciwgY3JlYXRlV2ViSGlzdG9yeSB9IGZyb20gXCJ2dWUtcm91dGVyXCI7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzLlxuICovXG5pbXBvcnQgTGlzdFBhZ2UgZnJvbSBcIi4uL3BhZ2VzL0xpc3RQYWdlLnZ1ZVwiO1xuaW1wb3J0IFNldHRpbmdQYWdlIGZyb20gXCIuLi9wYWdlcy9TZXR0aW5nUGFnZS52dWVcIjtcbmltcG9ydCBHcmFwaFBhZ2UgZnJvbSBcIi4uL3BhZ2VzL0dyYXBoUGFnZS52dWVcIjtcblxuY29uc3Qgcm91dGVzID0gW1xuICAgIHtcbiAgICAgICAgcGF0aDogXCIvXCIsXG4gICAgICAgIG5hbWU6IFwiU2V0dGluZ1BhZ2VcIixcbiAgICAgICAgY29tcG9uZW50OiBTZXR0aW5nUGFnZSxcbiAgICAgICAgYWxpYXM6ICcvc2V0dGluZ3MnXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHBhdGg6IFwiL2xpc3RcIixcbiAgICAgICAgbmFtZTogXCJMaXN0UGFnZVwiLFxuICAgICAgICBjb21wb25lbnQ6IExpc3RQYWdlLFxuICAgIH0sXG4gICAge1xuICAgICAgICBwYXRoOiBcIi9ncmFwaFwiLFxuICAgICAgICBuYW1lOiBcIkdyYXBoUGFnZVwiLFxuICAgICAgICBjb21wb25lbnQ6IEdyYXBoUGFnZVxuICAgIH1cbl07XG5cbmNvbnN0IHJvdXRlciA9IGNyZWF0ZVJvdXRlcih7XG4gICAgaGlzdG9yeTogY3JlYXRlV2ViSGlzdG9yeSh3cEVtYWlsZXIuc2l0ZS5iYXNlX3VybCksXG4gICAgcm91dGVzXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIiwiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXMuXG4gKi9cbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBjcmVhdGVMb2dnZXIgfSBmcm9tIFwidnVleFwiO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llcy5cbiAqL1xuaW1wb3J0IGdsb2JhbCBmcm9tIFwiLi9tb2R1bGVzL2dsb2JhbFwiO1xuaW1wb3J0IHNldHRpbmdzIGZyb20gXCIuL21vZHVsZXMvc2V0dGluZ3NcIjtcbmltcG9ydCB0YWJsZXMgZnJvbSBcIi4vbW9kdWxlcy90YWJsZXNcIjtcbmltcG9ydCBncmFwaCBmcm9tIFwiLi9tb2R1bGVzL2dyYXBoXCI7XG5cbmNvbnN0IGRlYnVnID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiO1xuXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHtcbiAgICBtb2R1bGVzOiB7XG4gICAgICAgIGdsb2JhbCxcbiAgICAgICAgc2V0dGluZ3MsXG4gICAgICAgIHRhYmxlcyxcbiAgICAgICAgZ3JhcGgsXG4gICAgfSxcbiAgICBzdHJpY3Q6IGRlYnVnLFxuICAgIHBsdWdpbnM6IGRlYnVnID8gW2NyZWF0ZUxvZ2dlcigpXSA6IFtdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3RvcmU7XG4iLCIvLyBpbml0aWFsIHN0YXRlXG5jb25zdCBzdGF0ZSA9ICgpID0+ICh7XG4gICAgYWxlcnQ6IHtcbiAgICAgICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgbWVzc2FnZSAgOiAnJyxcbiAgICAgICAgdHlwZSAgICAgOiAnZGVmYXVsdCdcbiAgICB9XG59KTtcblxuLy8gZ2V0dGVyc1xuY29uc3QgZ2V0dGVycyA9IHtcbiAgICBhbGVydCA6IHN0YXRlID0+IHN0YXRlLmFsZXJ0LFxufTtcblxuLy8gYWN0aW9uc1xuY29uc3QgYWN0aW9ucyA9IHtcbiAgICBzZXRBbGVydCh7IGNvbW1pdCB9LCBhbGVydCkge1xuICAgICAgICBjb21taXQoJ3NldEFsZXJ0JywgYWxlcnQpO1xuXG4gICAgICAgIC8vIEhpZGUgdGhlIHN1Y2Nlc3MgYWxlcnQgYWZ0ZXIgNSBzZWNvbmRzLlxuICAgICAgICBpZiAoJ3N1Y2Nlc3MnID09PSBhbGVydC50eXBlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb21taXQoJ2hpZGVBbGVydCcpO1xuICAgICAgICAgICAgfSwgNTAwMCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2hvd0FsZXJ0KHsgY29tbWl0IH0pIHtcbiAgICAgICAgY29tbWl0KCdzZXRJc0FsZXJ0VmlzaWJsZScsIHRydWUpO1xuICAgIH0sXG5cbiAgICBoaWRlQWxlcnQoeyBjb21taXQgfSkge1xuICAgICAgICBjb21taXQoJ2hpZGVBbGVydCcsIGZhbHNlKTtcbiAgICB9LFxufTtcblxuLy8gbXV0YXRpb25zXG5jb25zdCBtdXRhdGlvbnMgPSB7XG4gICAgc2V0QWxlcnQ6IChzdGF0ZSwgYWxlcnQpID0+IHtcbiAgICAgICAgc3RhdGUuYWxlcnQgPSB7XG4gICAgICAgICAgICAuLi5zdGF0ZS5hbGVydCxcbiAgICAgICAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIC4uLmFsZXJ0XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGhpZGVBbGVydDogKHN0YXRlKSA9PiB7XG4gICAgICAgIHN0YXRlLmFsZXJ0ID0ge1xuICAgICAgICAgICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2UgIDogJycsXG4gICAgICAgICAgICB0eXBlICAgICA6ICdkZWZhdWx0J1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBzZXRJc0FsZXJ0VmlzaWJsZTogKHN0YXRlLCBpc1Zpc2libGUpID0+IHtcbiAgICAgICAgc3RhdGUuYWxlcnQgPSB7XG4gICAgICAgICAgICAuLi5zdGF0ZS5hbGVydCxcbiAgICAgICAgICAgIGlzVmlzaWJsZVxuICAgICAgICB9O1xuICAgIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgc3RhdGUsXG4gICAgZ2V0dGVycyxcbiAgICBhY3Rpb25zLFxuICAgIG11dGF0aW9uc1xufTtcbiIsIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzLlxuICovXG5pbXBvcnQgeyBnZXRSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvYWpheCc7XG5pbXBvcnQgeyBmb3JtYXREYXRlIH0gZnJvbSAnLi4vLi4vdXRpbHMvZGF0ZS1mb3JtYXR0ZXInO1xuXG4vLyBpbml0aWFsIHN0YXRlXG5jb25zdCBzdGF0ZSA9ICgpID0+ICh7XG4gICAgZ3JhcGhMYWJlbHMgICAgOiBbXSxcbiAgICBncmFwaERhdGFzZXRzICA6IFtdLFxuICAgIGdyYXBoTG9hZGluZyAgIDogZmFsc2UsXG4gICAgZ3JhcGhSZWZyZXNoaW5nOiBmYWxzZSxcbn0pO1xuXG4vLyBnZXR0ZXJzXG5jb25zdCBnZXR0ZXJzID0ge1xuICAgIGdyYXBoTGFiZWxzICAgIDogc3RhdGUgPT4gc3RhdGUuZ3JhcGhMYWJlbHMsXG4gICAgZ3JhcGhEYXRhc2V0cyAgOiBzdGF0ZSA9PiBzdGF0ZS5ncmFwaERhdGFzZXRzLFxuICAgIGdyYXBoTG9hZGluZyAgIDogc3RhdGUgPT4gc3RhdGUuZ3JhcGhMb2FkaW5nLFxuICAgIGdyYXBoUmVmcmVzaGluZzogc3RhdGUgPT4gc3RhdGUuZ3JhcGhSZWZyZXNoaW5nLFxufTtcblxuLy8gYWN0aW9uc1xuY29uc3QgYWN0aW9ucyA9IHtcbiAgICBhc3luYyBnZXRHcmFwaERhdGEoeyBkaXNwYXRjaCwgY29tbWl0IH0sIGlzUmVmcmVzaCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbW1pdCgnc2V0R3JhcGhMb2FkaW5nJywgdHJ1ZSk7XG5cbiAgICAgICAgbGV0IHBhcmFtcyA9IGBhY3Rpb249JHsnd3BfZW1haWxlcl9nZXRfZGF0YSd9YDtcbiAgICAgICAgaWYgKGlzUmVmcmVzaCkge1xuICAgICAgICAgICAgcGFyYW1zICs9ICcmcmVmcmVzaD0xJztcbiAgICAgICAgICAgIGNvbW1pdCgnc2V0R3JhcGhSZWZyZXNoaW5nJywgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBnZXRSZXF1ZXN0KHBhcmFtcylcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBncmFwaFJlc3BvbnNlID0gcmVzcG9uc2U/LmRhdGE/LmRhdGE/LmdyYXBoO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChncmFwaFJlc3BvbnNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyYXBoTGFiZWxzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBncmFwaERhdGEgICA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhncmFwaFJlc3BvbnNlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGdyYXBoUmVzcG9uc2Vba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmFwaExhYmVscy5wdXNoKGZvcm1hdERhdGUoaXRlbS5kYXRlLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhcGhEYXRhLnB1c2goaXRlbS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ3JhcGhEYXRhc2V0cyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnRGF0YScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZjk4MmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBncmFwaERhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21taXQoJ3NldEdyYXBoTGFiZWxzJywgZ3JhcGhMYWJlbHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWl0KCdzZXRHcmFwaERhdGFzZXRzJywgZ3JhcGhEYXRhc2V0cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JlZnJlc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCgnc2V0QWxlcnQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgIDogJ0dyYXBoIHJlZnJlc2hlZCBzdWNjZXNzZnVsbHkuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSAgICAgOiAnc3VjY2VzcydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7cm9vdDp0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjb21taXQoJ3NldEdyYXBoTG9hZGluZycsIGZhbHNlKTtcbiAgICAgICAgY29tbWl0KCdzZXRHcmFwaFJlZnJlc2hpbmcnLCBmYWxzZSk7XG4gICAgfSxcbn07XG5cbi8vIG11dGF0aW9uc1xuY29uc3QgbXV0YXRpb25zID0ge1xuICAgIHNldEdyYXBoTGFiZWxzOiAoc3RhdGUsIGdyYXBoTGFiZWxzKSA9PiB7XG4gICAgICAgIHN0YXRlLmdyYXBoTGFiZWxzID0gZ3JhcGhMYWJlbHM7XG4gICAgfSxcblxuICAgIHNldEdyYXBoRGF0YXNldHM6KHN0YXRlLCBncmFwaERhdGFzZXRzKSA9PiB7XG4gICAgICAgIHN0YXRlLmdyYXBoRGF0YXNldHMgPSBncmFwaERhdGFzZXRzO1xuICAgIH0sXG5cbiAgICBzZXRHcmFwaExvYWRpbmc6IChzdGF0ZSwgZ3JhcGhMb2FkaW5nKSA9PiB7XG4gICAgICAgIHN0YXRlLmdyYXBoTG9hZGluZyA9IGdyYXBoTG9hZGluZztcbiAgICB9LFxuXG4gICAgc2V0R3JhcGhSZWZyZXNoaW5nOiAoc3RhdGUsIGdyYXBoUmVmcmVzaGluZykgPT4ge1xuICAgICAgICBzdGF0ZS5ncmFwaFJlZnJlc2hpbmcgPSBncmFwaFJlZnJlc2hpbmc7XG4gICAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBzdGF0ZSxcbiAgICBnZXR0ZXJzLFxuICAgIGFjdGlvbnMsXG4gICAgbXV0YXRpb25zXG59OyIsIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzLlxuICovXG5pbXBvcnQgeyBnZXRSZXF1ZXN0LCBwb3N0UmVxdWVzdCB9IGZyb20gJy4uLy4uL3V0aWxzL2FqYXgnO1xuXG4vLyBpbml0aWFsIHN0YXRlXG5jb25zdCBzdGF0ZSA9ICgpID0+ICh7XG4gICAgc2V0dGluZ3MgICAgICAgICA6IHt9LFxuICAgIGlzU2V0dGluZ3NMb2FkaW5nOiBmYWxzZSxcbiAgICBpc1NldHRpbmdzU2F2aW5nIDogZmFsc2UsXG59KTtcblxuLy8gZ2V0dGVyc1xuY29uc3QgZ2V0dGVycyA9IHtcbiAgICBzZXR0aW5ncyAgICAgICAgIDogc3RhdGUgPT4gc3RhdGUuc2V0dGluZ3MsXG4gICAgaXNTZXR0aW5nc0xvYWRpbmc6IHN0YXRlID0+IHN0YXRlLmlzU2V0dGluZ3NMb2FkaW5nLFxuICAgIGlzU2V0dGluZ3NTYXZpbmcgOiBzdGF0ZSA9PiBzdGF0ZS5pc1NldHRpbmdzU2F2aW5nLFxufTtcblxuLy8gYWN0aW9uc1xuY29uc3QgYWN0aW9ucyA9IHtcbiAgICBhc3luYyBmZXRjaFNldHRpbmdzKHsgY29tbWl0IH0pIHtcbiAgICAgICAgY29tbWl0KCdzZXRTZXR0aW5nc0xvYWRpbmcnLCB0cnVlKTtcblxuICAgICAgICBhd2FpdCBnZXRSZXF1ZXN0KGBhY3Rpb249JHsnd3BfZW1haWxlcl9nZXRfc2V0dGluZ3MnfWApXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCByZXNwb25zZS5zdWNjZXNzICkge1xuICAgICAgICAgICAgICAgICAgICBjb21taXQoJ3N0b3JlQWxsU2V0dGluZ3MnLCByZXNwb25zZS5kYXRhLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBjb21taXQoJ3NldFNldHRpbmdzTG9hZGluZycsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjb21taXQoJ3NldFNldHRpbmdzTG9hZGluZycsIGZhbHNlKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgc3RvcmVTZXR0aW5ncyh7IGRpc3BhdGNoLCBjb21taXQgfSwgaW5wdXQpIHtcbiAgICAgICAgY29tbWl0KCdzZXRTZXR0aW5nc1NhdmluZycsIHRydWUpO1xuXG4gICAgICAgIGNvbnN0IHBvc3REYXRhID0ge1xuICAgICAgICAgICAga2V5ICAgOiBpbnB1dC5rZXksXG4gICAgICAgICAgICB2YWx1ZSA6IGlucHV0LnZhbHVlLFxuICAgICAgICAgICAgYWN0aW9uOiAnd3BfZW1haWxlcl91cGRhdGVfc2V0dGluZydcbiAgICAgICAgfTtcblxuICAgICAgICBhd2FpdCBwb3N0UmVxdWVzdChwb3N0RGF0YSlcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIHJlc3BvbnNlPy5zdWNjZXNzICkge1xuICAgICAgICAgICAgICAgICAgICBjb21taXQoJ3N0b3JlU2V0dGluZ0l0ZW0nLCBpbnB1dCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goJ3NldEFsZXJ0Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSAgOiByZXNwb25zZT8uZGF0YT8ubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgIDogJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgICAgICAgIH0sIHtyb290OnRydWV9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3JSZXNwb25zZSA9IEpTT04ucGFyc2UoZXJyb3IucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JSZXNwb25zZT8uZGF0YT8ubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCgnc2V0QWxlcnQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlICA6IGVycm9yUmVzcG9uc2U/LmRhdGE/Lm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlICAgICA6ICdlcnJvcidcbiAgICAgICAgICAgICAgICAgICAgfSwge3Jvb3Q6dHJ1ZX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNvbW1pdCgnc2V0U2V0dGluZ3NTYXZpbmcnLCBmYWxzZSk7XG4gICAgfSxcbn07XG5cbi8vIG11dGF0aW9uc1xuY29uc3QgbXV0YXRpb25zID0ge1xuICAgIHN0b3JlQWxsU2V0dGluZ3M6IChzdGF0ZSwgc2V0dGluZ3MpID0+IHtcbiAgICAgICAgc3RhdGUuc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICB9LFxuXG4gICAgc3RvcmVTZXR0aW5nSXRlbTogKHN0YXRlLCBpbnB1dCkgPT4ge1xuICAgICAgICBzdGF0ZS5zZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIC4uLnN0YXRlLnNldHRpbmdzLFxuICAgICAgICAgICAgW2lucHV0LmtleV0gOiBpbnB1dD8udmFsdWVcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgc2V0U2V0dGluZ3NMb2FkaW5nOiAoc3RhdGUsIGlzU2V0dGluZ3NMb2FkaW5nKSA9PiB7XG4gICAgICAgIHN0YXRlLmlzU2V0dGluZ3NMb2FkaW5nID0gaXNTZXR0aW5nc0xvYWRpbmc7XG4gICAgfSxcblxuICAgIHNldFNldHRpbmdzU2F2aW5nOiAoc3RhdGUsIGlzU2V0dGluZ3NTYXZpbmcpID0+IHtcbiAgICAgICAgc3RhdGUuaXNTZXR0aW5nc1NhdmluZyA9IGlzU2V0dGluZ3NTYXZpbmc7XG4gICAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBzdGF0ZSxcbiAgICBnZXR0ZXJzLFxuICAgIGFjdGlvbnMsXG4gICAgbXV0YXRpb25zXG59O1xuIiwiLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXMuXG4gKi9cbmltcG9ydCB7IGdldFJlcXVlc3QgfSBmcm9tICcuLi8uLi91dGlscy9hamF4JztcbmltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICcuLi8uLi91dGlscy9kYXRlLWZvcm1hdHRlcic7XG5pbXBvcnQgeyBnZXRQYWdpbmF0ZWREYXRhIH0gZnJvbSAnLi4vLi4vdXRpbHMvcGFnaW5hdGlvbi1yZXNwb25zZSc7XG5cbi8vIGluaXRpYWwgc3RhdGVcbmNvbnN0IHN0YXRlID0gKCkgPT4gKHtcbiAgICBwYWdlVGl0bGUgICA6ICcnLFxuICAgIGhlYWRlcnMgICAgIDogW10sXG4gICAgcm93cyAgICAgICAgOiB7XG4gICAgICAgIGRhdGEgICAgICAgOiBbXSxcbiAgICAgICAgdG90YWxQYWdlICA6IDAsXG4gICAgICAgIHRvdGFsSXRlbXMgOiAwLFxuICAgICAgICBjdXJyZW50UGFnZTogMSxcbiAgICAgICAgcGVyUGFnZSAgICA6IDUsXG4gICAgfSxcbiAgICB0YWJsZUxvYWRpbmc6IGZhbHNlLFxufSk7XG5cbi8vIGdldHRlcnNcbmNvbnN0IGdldHRlcnMgPSB7XG4gICAgcGFnZVRpdGxlICAgOiBzdGF0ZSA9PiBzdGF0ZS5wYWdlVGl0bGUsXG4gICAgaGVhZGVycyAgICAgOiBzdGF0ZSA9PiBzdGF0ZS5oZWFkZXJzLFxuICAgIHJvd3MgICAgICAgIDogc3RhdGUgPT4gc3RhdGUucm93cyxcbiAgICB0YWJsZUxvYWRpbmc6IHN0YXRlID0+IHN0YXRlLnRhYmxlTG9hZGluZyxcbn07XG5cbi8vIGFjdGlvbnNcbmNvbnN0IGFjdGlvbnMgPSB7XG4gICAgYXN5bmMgZ2V0VGFibGVEYXRhKHsgY29tbWl0LCByb290U3RhdGUgfSwgY3VycmVudFBhZ2UgPSAxKSB7XG4gICAgICAgIGNvbW1pdCgnc2V0TG9hZGluZycsIHRydWUpO1xuXG4gICAgICAgIGNvbnN0IHBlclBhZ2UgICA9IHJvb3RTdGF0ZS5zZXR0aW5ncz8uc2V0dGluZ3M/Lm51bXJvd3MgPz8gNTtcbiAgICAgICAgY29uc3QgaHVtYW5kYXRlID0gcGFyc2VJbnQoIHJvb3RTdGF0ZS5zZXR0aW5ncz8uc2V0dGluZ3M/Lmh1bWFuZGF0ZSA/PyAxICk7XG5cbiAgICAgICAgYXdhaXQgZ2V0UmVxdWVzdChgYWN0aW9uPSR7J3dwX2VtYWlsZXJfZ2V0X2RhdGEnfWApXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWl0KCdzZXRQYWdlVGl0bGUnLCByZXNwb25zZT8uZGF0YT8uZGF0YT8udGFibGU/LnRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY29tbWl0KCdzZXRIZWFkZXJzJywgcmVzcG9uc2U/LmRhdGE/LmRhdGE/LnRhYmxlPy5kYXRhPy5oZWFkZXJzKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByb3dzID0gcmVzcG9uc2U/LmRhdGE/LmRhdGE/LnRhYmxlPy5kYXRhPy5yb3dzO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNob3cgaHVtYW4gcmVhZGFibGUgZGF0ZSBpZiBodW1hbmRhdGUgaXMgdHJ1ZS5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkUm93cyA9IHJvd3MubWFwKChyb3cpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ucm93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IGh1bWFuZGF0ZSA/IGZvcm1hdERhdGUocm93LmRhdGUsIHRydWUpIDogcm93LmRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBgPGEgY2xhc3M9XCJwYWdlLWxpbmtcIiBocmVmPVwiJHtyb3cudXJsfVwiIHRhcmdldD1cImJsYW5rXCI+JHtyb3cudXJsfTwvYT5gLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29tbWl0KCdzZXRSb3dzJywgZ2V0UGFnaW5hdGVkRGF0YShmb3JtYXR0ZWRSb3dzLCBjdXJyZW50UGFnZSwgcGVyUGFnZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNvbW1pdCgnc2V0TG9hZGluZycsIGZhbHNlKTtcbiAgICB9LFxufTtcblxuLy8gbXV0YXRpb25zXG5jb25zdCBtdXRhdGlvbnMgPSB7XG4gICAgc2V0UGFnZVRpdGxlOiAoc3RhdGUsIHBhZ2VUaXRsZSkgPT4ge1xuICAgICAgICBzdGF0ZS5wYWdlVGl0bGUgPSBwYWdlVGl0bGU7XG4gICAgfSxcblxuICAgIHNldEhlYWRlcnM6IChzdGF0ZSwgaGVhZGVycykgPT4ge1xuICAgICAgICBzdGF0ZS5oZWFkZXJzID0gaGVhZGVycztcbiAgICB9LFxuXG4gICAgc2V0Um93czogKHN0YXRlLCByb3dzKSA9PiB7XG4gICAgICAgIHN0YXRlLnJvd3MgPSByb3dzO1xuICAgIH0sXG5cbiAgICBzZXRMb2FkaW5nOiAoc3RhdGUsIGxvYWRpbmcpID0+IHtcbiAgICAgICAgc3RhdGUudGFibGVMb2FkaW5nID0gbG9hZGluZztcbiAgICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHN0YXRlLFxuICAgIGdldHRlcnMsXG4gICAgYWN0aW9ucyxcbiAgICBtdXRhdGlvbnNcbn07IiwiLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXMuXG4gKi9cbmNvbnN0ICQgPSBqUXVlcnk7XG5cbi8qKlxuICogR2V0IEFKQVggcmVxdWVzdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFyYW1zIFJlcXVlc3QgcGFyYW1zLlxuICogQHJldHVybnMgUHJvbWlzZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UmVxdWVzdChwYXJhbXMpIHtcbiAgICBjb25zdCB1cmwgPSBgJHt3cEVtYWlsZXIuYWpheF91cmx9P193cG5vbmNlPSR7d3BFbWFpbGVyLm5vbmNlfSYke3BhcmFtc31gO1xuXG4gICAgcmV0dXJuICQuYWpheCh7XG4gICAgICAgIHVybCxcbiAgICAgICAgdHlwZSAgICAgICA6IFwiR0VUXCIsXG4gICAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZSxcbiAgICAgICAgY29udGVudFR5cGU6IGZhbHNlLFxuICAgIH0pO1xufVxuXG4vKipcbiAqIFBvc3QgQUpBWCByZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBib2R5IFBvc3Qgb2JqZWN0XG4gKiBAcmV0dXJucyBQcm9taXNlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwb3N0UmVxdWVzdChib2R5KSB7XG4gICAgY29uc3QgcG9zdERhdGEgPSB7XG4gICAgICAgIF93cG5vbmNlOiB3cEVtYWlsZXIubm9uY2UsXG4gICAgICAgIC4uLmJvZHlcbiAgICB9O1xuXG4gICAgcmV0dXJuICQuYWpheCh7XG4gICAgICAgIHR5cGUgICAgICAgOiBcIlBPU1RcIixcbiAgICAgICAgdXJsICAgICAgICA6IHdwRW1haWxlci5hamF4X3VybCxcbiAgICAgICAgZGF0YSAgICAgICA6IGdlbmVyYXRlRm9ybURhdGFGcm9tT2JqZWN0KHBvc3REYXRhKSxcbiAgICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlLFxuICAgICAgICBjb250ZW50VHlwZTogZmFsc2UsXG4gICAgfSk7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgRm9ybSBEYXRhIGZyb20gT2JqZWN0XG4gKlxuICogQHBhcmFtIG9iamVjdCBvYmplY3QgZGF0YVxuICpcbiAqIEByZXR1cm4gT2JqZWN0IEZvcm1EYXRhIE9iamVjdFxuICovXG5jb25zdCBnZW5lcmF0ZUZvcm1EYXRhRnJvbU9iamVjdCA9IChvYmplY3QpID0+IHtcbiAgICBsZXQgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBidWlsZEZvcm1EYXRhKGZvcm1EYXRhLCBvYmplY3QpO1xuICAgIHJldHVybiBmb3JtRGF0YTtcbn07XG5cbmNvbnN0IGJ1aWxkRm9ybURhdGEgPSAoZm9ybURhdGEsIGRhdGEsIHBhcmVudEtleSkgPT4ge1xuICAgIGlmIChkYXRhICYmIHR5cGVvZiBkYXRhID09PSAnb2JqZWN0J1xuICAgICAgICAmJiAhKGRhdGEgaW5zdGFuY2VvZiBEYXRlKVxuICAgICAgICAmJiAhKGRhdGEgaW5zdGFuY2VvZiBGaWxlKVxuICAgICkge1xuICAgICAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBidWlsZEZvcm1EYXRhKGZvcm1EYXRhLCBkYXRhW2tleV0sIHBhcmVudEtleSA/IGAke3BhcmVudEtleX1bJHtrZXl9XWAgOiBrZXkpO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgdmFsdWUgPSBkYXRhID09IG51bGwgPyAnJyA6IGRhdGE7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChwYXJlbnRLZXksIHZhbHVlKTtcbiAgICB9XG59O1xuIiwiLyoqXG4gKiBGb3JtYXQgYSBkYXRlIHRpbWVzdGFtcCB0byBodW1hbiByZWFkYWJsZSB0aW1lIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gdGltZXN0YW1wIFRpbWVzdGFtcCBudW1iZXIuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHNob3dIb3VyTWludXRlIElzIHNob3cgaG91ci1taW51dGUgb3Igbm90LlxuICpcbiAqIEByZXR1cm5zIEZvcm1hdHRlZCBkYXRlIHN0cmluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IGZvcm1hdERhdGUgPSAodGltZXN0YW1wLCBzaG93SG91ck1pbnV0ZSA9IGZhbHNlKSA9PiB7XG4gICAgY29uc3QgZGF0ZVN0cmluZyA9IG5ldyBEYXRlKHRpbWVzdGFtcCkudG9TdHJpbmcoKTsgLy8gZWc6IFR1ZSBKYW4gMjAgMTk3MCAxMjo1NzoxNCBHTVQrMDYwMFxuXG4gICAgLy8gV2UnbGwgYnJlYWsgdGhpcyAtLT4gVHVlIEphbiAyMCAxOTcwIDEyOjU3OjE0XG4gICAgbGV0IGRhdGUgPSBgJHtkYXRlU3RyaW5nLnN1YnN0cmluZyg4LCAxMCl9ICR7ZGF0ZVN0cmluZy5zdWJzdHJpbmcoNCwgNyl9ICR7ZGF0ZVN0cmluZy5zdWJzdHJpbmcoMTEsIDE1KX1gOyAvLyAyMCBKYW4gMTk3MFxuXG4gICAgaWYgKHNob3dIb3VyTWludXRlKSB7XG4gICAgICAgIGRhdGUgKz0gYCBhdCAke2RhdGVTdHJpbmcuc3Vic3RyaW5nKDE2LCAyMSl9YDsgLy8gYXQgMTI6NTdcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0ZTtcbn07XG4iLCJleHBvcnQgY29uc3QgcGx1Z2luU2x1ZyA9ICd3cC1lbWFpbGVyJztcblxuLyoqXG4gKiBBcyB3ZSBhcmUgdXNpbmcgaGFzaCBiYXNlZCBuYXZpZ2F0aW9uLCBoYWNrIGZpeFxuICogdG8gaGlnaGxpZ2h0IHRoZSBjdXJyZW50IHNlbGVjdGVkIG1lbnVcbiAqXG4gKiBSZXF1aXJlcyBqUXVlcnlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lbnVGaXgoKSB7XG4gICAgY29uc3QgJCA9IGpRdWVyeTtcblxuICAgIGNvbnN0IG1lbnVSb290ICAgID0gJCgnI3RvcGxldmVsX3BhZ2VfJyArIHBsdWdpblNsdWcpO1xuICAgIGNvbnN0IGN1cnJlbnRVcmwgID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgY29uc3QgY3VycmVudFBhdGggPSBjdXJyZW50VXJsLnN1YnN0cmluZyhjdXJyZW50VXJsLmluZGV4T2YoJ2FkbWluLnBocCcpKTtcblxuICAgICQoJ3VsLndwLXN1Ym1lbnUgbGknLCBtZW51Um9vdCkucmVtb3ZlQ2xhc3MoJ2N1cnJlbnQnKTtcblxuICAgIG1lbnVSb290Lm9uKCdjbGljaycsICdhJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSAkKHRoaXMpO1xuXG4gICAgICAgICQoJ3VsLndwLXN1Ym1lbnUgbGknLCBtZW51Um9vdCkucmVtb3ZlQ2xhc3MoJ2N1cnJlbnQnKTtcblxuICAgICAgICBpZiAoc2VsZi5oYXNDbGFzcygnd3AtaGFzLXN1Ym1lbnUnKSkge1xuICAgICAgICAgICAgJCgnbGkud3AtZmlyc3QtaXRlbScsIG1lbnVSb290KS5hZGRDbGFzcygnY3VycmVudCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5wYXJlbnRzKCdsaScpLmFkZENsYXNzKCdjdXJyZW50Jyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQoJ3VsLndwLXN1Ym1lbnUgYScsIG1lbnVSb290KS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbCkge1xuICAgICAgICBjb25zdCBocmVmUm91dGUgPSAkKGVsKS5hdHRyKCdocmVmJykuc3Vic3RyaW5nKCQoZWwpLmF0dHIoJ2hyZWYnKS5pbmRleE9mKCcvYWRtaW4ucGhwJykgKyAxKTtcblxuICAgICAgICBpZiAoaHJlZlJvdXRlID09PSBjdXJyZW50UGF0aCkge1xuICAgICAgICAgICAgJChlbCkucGFyZW50KCkuYWRkQ2xhc3MoJ2N1cnJlbnQnKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5tZW51Rml4KCk7XG4iLCIvKipcbiAqIEdldCBwYWdpbmF0ZWQgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSAgaXRlbXMgICAgICAgQXJyYXkgb2YgaXRlbXMuXG4gKiBAcGFyYW0ge051bWJlcn0gY3VycmVudFBhZ2UgQ3VycmVudCBwYWdlIG5vLlxuICogQHBhcmFtIHtOdW1iZXJ9IHBlclBhZ2UgICAgIFBlciBwYWdlIG5vLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9ICAgICAgICAgICBQYWdpbmF0ZWQgcmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYWdpbmF0ZWREYXRhKGl0ZW1zLCBjdXJyZW50UGFnZSwgcGVyUGFnZSkge1xuICAgIGNvbnN0IHRvdGFsSXRlbXMgPSBpdGVtcy5sZW5ndGg7XG4gICAgY29uc3QgdG90YWxQYWdlICA9IE1hdGguY2VpbCh0b3RhbEl0ZW1zIC8gcGVyUGFnZSk7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IHBlclBhZ2UgKiAoY3VycmVudFBhZ2UgLSAxKTtcbiAgICBjb25zdCBlbmRJbmRleCAgID0gc3RhcnRJbmRleCArIHBlclBhZ2U7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0b3RhbFBhZ2UsXG4gICAgICAgIHRvdGFsSXRlbXMsXG4gICAgICAgIGN1cnJlbnRQYWdlLFxuICAgICAgICBwZXJQYWdlLFxuICAgICAgICBkYXRhOiBpdGVtcy5maWx0ZXIoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXggPj0gc3RhcnRJbmRleCAmJiBpbmRleCA8IGVuZEluZGV4O1xuICAgICAgICB9KSxcbiAgICB9O1xufVxuIiwiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXMuXG4gKi9cbmltcG9ydCB7IF9fIH0gZnJvbSAnQHdvcmRwcmVzcy9pMThuJztcblxuLyoqXG4gKiBWYWxpZGF0ZSB0aGUgc2V0dGluZ3MgZm9ybSBkYXRhLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSAgIGlucHV0ICAgS2V5LXZhbHVlIHBhaXIgaW5wdXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBjaGVja2VyIENoZWNrIHZhbGlkYXRpb24gcmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVNldHRpbmdzKHsga2V5LCB2YWx1ZSB9KSB7XG4gICAgbGV0IGNoZWNrZXIgPSB7XG4gICAgICAgIHZhbGlkOiB0cnVlLFxuICAgICAgICBtZXNzYWdlOiBcIlwiXG4gICAgfTtcblxuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSBcIm51bXJvd3NcIjpcbiAgICAgICAgaWYgKHZhbHVlIDwgMSB8fCB2YWx1ZSA+IDUpIHtcbiAgICAgICAgICAgIGNoZWNrZXIubWVzc2FnZSA9IF9fKCdQbGVhc2UgZ2l2ZSB2YWxpZCBpbnB1dCBmb3IgbnVtYmVyIG9mIHJvd3MuJywgJ3dwLWVtYWlsZXInKTtcbiAgICAgICAgICAgIGNoZWNrZXIudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgIGNhc2UgXCJodW1hbmRhdGVcIjpcbiAgICAgICAgaWYgKHBhcnNlSW50KHZhbHVlKSAhPT0gMCAmJiBwYXJzZUludCh2YWx1ZSkgIT09IDEpIHtcbiAgICAgICAgICAgIGNoZWNrZXIubWVzc2FnZSA9IF9fKCdQbGVhc2UgY2hlY2sgaWYgaHVtYW4gcmVhZGFibGUgZGF0ZSB3aWxsIGJlIGRpc3BsYXllZCBvciBub3QuJywgJ3dwLWVtYWlsZXInKTtcbiAgICAgICAgICAgIGNoZWNrZXIudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgIGNhc2UgXCJlbWFpbHNcIjpcbiAgICAgICAgaWYgKCcnICE9PSB2YWx1ZSAmJiBudWxsICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgaW52YWxpZE1hdGNoZXMgPSB2YWx1ZS5maWx0ZXIoKGVtYWlsKSA9PiAhdmFsaWRhdGVFbWFpbChlbWFpbCkgKTtcblxuICAgICAgICAgICAgaWYgKGludmFsaWRNYXRjaGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNoZWNrZXIubWVzc2FnZSA9IF9fKCdQbGVhc2UgcHJvdmlkZSB2YWxpZCBlbWFpbHMuJywgJ3dwLWVtYWlsZXInKTtcbiAgICAgICAgICAgICAgICBjaGVja2VyLnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gY2hlY2tlcjtcbn1cblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlRW1haWwgPSAoZW1haWwpID0+IHtcbiAgICByZXR1cm4gU3RyaW5nKGVtYWlsKVxuICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAubWF0Y2goXG4gICAgICAgICAgICAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcXSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC9cbiAgICAgICAgKTtcbn07IiwiLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gKiBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBzdG9wcyBiZWluZyBjYWxsZWQgZm9yXG4gKiBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbiAqIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuIFRoZSBmdW5jdGlvbiBhbHNvIGhhcyBhIHByb3BlcnR5ICdjbGVhcicgXG4gKiB0aGF0IGlzIGEgZnVuY3Rpb24gd2hpY2ggd2lsbCBjbGVhciB0aGUgdGltZXIgdG8gcHJldmVudCBwcmV2aW91c2x5IHNjaGVkdWxlZCBleGVjdXRpb25zLiBcbiAqXG4gKiBAc291cmNlIHVuZGVyc2NvcmUuanNcbiAqIEBzZWUgaHR0cDovL3Vuc2NyaXB0YWJsZS5jb20vMjAwOS8wMy8yMC9kZWJvdW5jaW5nLWphdmFzY3JpcHQtbWV0aG9kcy9cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmN0aW9uIHRvIHdyYXBcbiAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lb3V0IGluIG1zIChgMTAwYClcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gd2hldGhlciB0byBleGVjdXRlIGF0IHRoZSBiZWdpbm5pbmcgKGBmYWxzZWApXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBpbW1lZGlhdGUpe1xuICB2YXIgdGltZW91dCwgYXJncywgY29udGV4dCwgdGltZXN0YW1wLCByZXN1bHQ7XG4gIGlmIChudWxsID09IHdhaXQpIHdhaXQgPSAxMDA7XG5cbiAgZnVuY3Rpb24gbGF0ZXIoKSB7XG4gICAgdmFyIGxhc3QgPSBEYXRlLm5vdygpIC0gdGltZXN0YW1wO1xuXG4gICAgaWYgKGxhc3QgPCB3YWl0ICYmIGxhc3QgPj0gMCkge1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICBpZiAoIWltbWVkaWF0ZSkge1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBkZWJvdW5jZWQgPSBmdW5jdGlvbigpe1xuICAgIGNvbnRleHQgPSB0aGlzO1xuICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICBpZiAoIXRpbWVvdXQpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICBpZiAoY2FsbE5vdykge1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGRlYm91bmNlZC5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIFxuICBkZWJvdW5jZWQuZmx1c2ggPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGltZW91dCkge1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIFxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBkZWJvdW5jZWQ7XG59O1xuXG4vLyBBZGRzIGNvbXBhdGliaWxpdHkgZm9yIEVTIG1vZHVsZXNcbmRlYm91bmNlLmRlYm91bmNlID0gZGVib3VuY2U7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCIvKipcbiAqIE1lbWl6ZSBvcHRpb25zIG9iamVjdC5cbiAqXG4gKiBAdHlwZWRlZiBNZW1pemVPcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFttYXhTaXplXSBNYXhpbXVtIHNpemUgb2YgdGhlIGNhY2hlLlxuICovXG5cbi8qKlxuICogSW50ZXJuYWwgY2FjaGUgZW50cnkuXG4gKlxuICogQHR5cGVkZWYgTWVtaXplQ2FjaGVOb2RlXG4gKlxuICogQHByb3BlcnR5IHs/TWVtaXplQ2FjaGVOb2RlfHVuZGVmaW5lZH0gW3ByZXZdIFByZXZpb3VzIG5vZGUuXG4gKiBAcHJvcGVydHkgez9NZW1pemVDYWNoZU5vZGV8dW5kZWZpbmVkfSBbbmV4dF0gTmV4dCBub2RlLlxuICogQHByb3BlcnR5IHtBcnJheTwqPn0gICAgICAgICAgICAgICAgICAgYXJncyAgIEZ1bmN0aW9uIGFyZ3VtZW50cyBmb3IgY2FjaGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5cbiAqIEBwcm9wZXJ0eSB7Kn0gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCAgICBGdW5jdGlvbiByZXN1bHQuXG4gKi9cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIG9mIHRoZSBlbmhhbmNlZCBmdW5jdGlvbiBmb3IgY29udHJvbGxpbmcgY2FjaGUuXG4gKlxuICogQHR5cGVkZWYgTWVtaXplTWVtb2l6ZWRGdW5jdGlvblxuICpcbiAqIEBwcm9wZXJ0eSB7KCk9PnZvaWR9IGNsZWFyIENsZWFyIHRoZSBjYWNoZS5cbiAqL1xuXG4vKipcbiAqIEFjY2VwdHMgYSBmdW5jdGlvbiB0byBiZSBtZW1vaXplZCwgYW5kIHJldHVybnMgYSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24sIHdpdGhcbiAqIG9wdGlvbmFsIG9wdGlvbnMuXG4gKlxuICogQHRlbXBsYXRlIHtGdW5jdGlvbn0gRlxuICpcbiAqIEBwYXJhbSB7Rn0gICAgICAgICAgICAgZm4gICAgICAgIEZ1bmN0aW9uIHRvIG1lbW9pemUuXG4gKiBAcGFyYW0ge01lbWl6ZU9wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtGICYgTWVtaXplTWVtb2l6ZWRGdW5jdGlvbn0gTWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbWl6ZSggZm4sIG9wdGlvbnMgKSB7XG5cdHZhciBzaXplID0gMDtcblxuXHQvKiogQHR5cGUgez9NZW1pemVDYWNoZU5vZGV8dW5kZWZpbmVkfSAqL1xuXHR2YXIgaGVhZDtcblxuXHQvKiogQHR5cGUgez9NZW1pemVDYWNoZU5vZGV8dW5kZWZpbmVkfSAqL1xuXHR2YXIgdGFpbDtcblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRmdW5jdGlvbiBtZW1vaXplZCggLyogLi4uYXJncyAqLyApIHtcblx0XHR2YXIgbm9kZSA9IGhlYWQsXG5cdFx0XHRsZW4gPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdFx0YXJncywgaTtcblxuXHRcdHNlYXJjaENhY2hlOiB3aGlsZSAoIG5vZGUgKSB7XG5cdFx0XHQvLyBQZXJmb3JtIGEgc2hhbGxvdyBlcXVhbGl0eSB0ZXN0IHRvIGNvbmZpcm0gdGhhdCB3aGV0aGVyIHRoZSBub2RlXG5cdFx0XHQvLyB1bmRlciB0ZXN0IGlzIGEgY2FuZGlkYXRlIGZvciB0aGUgYXJndW1lbnRzIHBhc3NlZC4gVHdvIGFycmF5c1xuXHRcdFx0Ly8gYXJlIHNoYWxsb3dseSBlcXVhbCBpZiB0aGVpciBsZW5ndGggbWF0Y2hlcyBhbmQgZWFjaCBlbnRyeSBpc1xuXHRcdFx0Ly8gc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgdHdvIHNldHMuIEF2b2lkIGFic3RyYWN0aW5nIHRvIGFcblx0XHRcdC8vIGZ1bmN0aW9uIHdoaWNoIGNvdWxkIGluY3VyIGFuIGFyZ3VtZW50cyBsZWFraW5nIGRlb3B0aW1pemF0aW9uLlxuXG5cdFx0XHQvLyBDaGVjayB3aGV0aGVyIG5vZGUgYXJndW1lbnRzIG1hdGNoIGFyZ3VtZW50cyBsZW5ndGhcblx0XHRcdGlmICggbm9kZS5hcmdzLmxlbmd0aCAhPT0gYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0bm9kZSA9IG5vZGUubmV4dDtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENoZWNrIHdoZXRoZXIgbm9kZSBhcmd1bWVudHMgbWF0Y2ggYXJndW1lbnRzIHZhbHVlc1xuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0aWYgKCBub2RlLmFyZ3NbIGkgXSAhPT0gYXJndW1lbnRzWyBpIF0gKSB7XG5cdFx0XHRcdFx0bm9kZSA9IG5vZGUubmV4dDtcblx0XHRcdFx0XHRjb250aW51ZSBzZWFyY2hDYWNoZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50IHdlIGNhbiBhc3N1bWUgd2UndmUgZm91bmQgYSBtYXRjaFxuXG5cdFx0XHQvLyBTdXJmYWNlIG1hdGNoZWQgbm9kZSB0byBoZWFkIGlmIG5vdCBhbHJlYWR5XG5cdFx0XHRpZiAoIG5vZGUgIT09IGhlYWQgKSB7XG5cdFx0XHRcdC8vIEFzIHRhaWwsIHNoaWZ0IHRvIHByZXZpb3VzLiBNdXN0IG9ubHkgc2hpZnQgaWYgbm90IGFsc29cblx0XHRcdFx0Ly8gaGVhZCwgc2luY2UgaWYgYm90aCBoZWFkIGFuZCB0YWlsLCB0aGVyZSBpcyBubyBwcmV2aW91cy5cblx0XHRcdFx0aWYgKCBub2RlID09PSB0YWlsICkge1xuXHRcdFx0XHRcdHRhaWwgPSBub2RlLnByZXY7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGp1c3Qgc2libGluZ3MgdG8gcG9pbnQgdG8gZWFjaCBvdGhlci4gSWYgbm9kZSB3YXMgdGFpbCxcblx0XHRcdFx0Ly8gdGhpcyBhbHNvIGhhbmRsZXMgbmV3IHRhaWwncyBlbXB0eSBgbmV4dGAgYXNzaWdubWVudC5cblx0XHRcdFx0LyoqIEB0eXBlIHtNZW1pemVDYWNoZU5vZGV9ICovICggbm9kZS5wcmV2ICkubmV4dCA9IG5vZGUubmV4dDtcblx0XHRcdFx0aWYgKCBub2RlLm5leHQgKSB7XG5cdFx0XHRcdFx0bm9kZS5uZXh0LnByZXYgPSBub2RlLnByZXY7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRub2RlLm5leHQgPSBoZWFkO1xuXHRcdFx0XHRub2RlLnByZXYgPSBudWxsO1xuXHRcdFx0XHQvKiogQHR5cGUge01lbWl6ZUNhY2hlTm9kZX0gKi8gKCBoZWFkICkucHJldiA9IG5vZGU7XG5cdFx0XHRcdGhlYWQgPSBub2RlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gaW1tZWRpYXRlbHlcblx0XHRcdHJldHVybiBub2RlLnZhbDtcblx0XHR9XG5cblx0XHQvLyBObyBjYWNoZWQgdmFsdWUgZm91bmQuIENvbnRpbnVlIHRvIGluc2VydGlvbiBwaGFzZTpcblxuXHRcdC8vIENyZWF0ZSBhIGNvcHkgb2YgYXJndW1lbnRzIChhdm9pZCBsZWFraW5nIGRlb3B0aW1pemF0aW9uKVxuXHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGxlbiApO1xuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRub2RlID0ge1xuXHRcdFx0YXJnczogYXJncyxcblxuXHRcdFx0Ly8gR2VuZXJhdGUgdGhlIHJlc3VsdCBmcm9tIG9yaWdpbmFsIGZ1bmN0aW9uXG5cdFx0XHR2YWw6IGZuLmFwcGx5KCBudWxsLCBhcmdzICksXG5cdFx0fTtcblxuXHRcdC8vIERvbid0IG5lZWQgdG8gY2hlY2sgd2hldGhlciBub2RlIGlzIGFscmVhZHkgaGVhZCwgc2luY2UgaXQgd291bGRcblx0XHQvLyBoYXZlIGJlZW4gcmV0dXJuZWQgYWJvdmUgYWxyZWFkeSBpZiBpdCB3YXNcblxuXHRcdC8vIFNoaWZ0IGV4aXN0aW5nIGhlYWQgZG93biBsaXN0XG5cdFx0aWYgKCBoZWFkICkge1xuXHRcdFx0aGVhZC5wcmV2ID0gbm9kZTtcblx0XHRcdG5vZGUubmV4dCA9IGhlYWQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIElmIG5vIGhlYWQsIGZvbGxvd3MgdGhhdCB0aGVyZSdzIG5vIHRhaWwgKGF0IGluaXRpYWwgb3IgcmVzZXQpXG5cdFx0XHR0YWlsID0gbm9kZTtcblx0XHR9XG5cblx0XHQvLyBUcmltIHRhaWwgaWYgd2UncmUgcmVhY2hlZCBtYXggc2l6ZSBhbmQgYXJlIHBlbmRpbmcgY2FjaGUgaW5zZXJ0aW9uXG5cdFx0aWYgKCBzaXplID09PSAvKiogQHR5cGUge01lbWl6ZU9wdGlvbnN9ICovICggb3B0aW9ucyApLm1heFNpemUgKSB7XG5cdFx0XHR0YWlsID0gLyoqIEB0eXBlIHtNZW1pemVDYWNoZU5vZGV9ICovICggdGFpbCApLnByZXY7XG5cdFx0XHQvKiogQHR5cGUge01lbWl6ZUNhY2hlTm9kZX0gKi8gKCB0YWlsICkubmV4dCA9IG51bGw7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNpemUrKztcblx0XHR9XG5cblx0XHRoZWFkID0gbm9kZTtcblxuXHRcdHJldHVybiBub2RlLnZhbDtcblx0fVxuXG5cdG1lbW9pemVkLmNsZWFyID0gZnVuY3Rpb24oKSB7XG5cdFx0aGVhZCA9IG51bGw7XG5cdFx0dGFpbCA9IG51bGw7XG5cdFx0c2l6ZSA9IDA7XG5cdH07XG5cblx0aWYgKCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnICkge1xuXHRcdC8vIENhY2hlIGlzIG5vdCBleHBvc2VkIGluIHRoZSBwdWJsaWMgQVBJLCBidXQgdXNlZCBpbiB0ZXN0cyB0byBlbnN1cmVcblx0XHQvLyBleHBlY3RlZCBsaXN0IHByb2dyZXNzaW9uXG5cdFx0bWVtb2l6ZWQuZ2V0Q2FjaGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIGhlYWQsIHRhaWwsIHNpemUgXTtcblx0XHR9O1xuXHR9XG5cblx0Ly8gSWdub3JlIHJlYXNvbjogVGhlcmUncyBub3QgYSBjbGVhciBzb2x1dGlvbiB0byBjcmVhdGUgYW4gaW50ZXJzZWN0aW9uIG9mXG5cdC8vIHRoZSBmdW5jdGlvbiB3aXRoIGFkZGl0aW9uYWwgcHJvcGVydGllcywgd2hlcmUgdGhlIGdvYWwgaXMgdG8gcmV0YWluIHRoZVxuXHQvLyBmdW5jdGlvbiBzaWduYXR1cmUgb2YgdGhlIGluY29taW5nIGFyZ3VtZW50IGFuZCBhZGQgY29udHJvbCBwcm9wZXJ0aWVzXG5cdC8vIG9uIHRoZSByZXR1cm4gdmFsdWUuXG5cblx0Ly8gQHRzLWlnbm9yZVxuXHRyZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtaXplO1xuIiwiLyogZ2xvYmFsIHdpbmRvdywgZXhwb3J0cywgZGVmaW5lICovXG5cbiFmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCdcblxuICAgIHZhciByZSA9IHtcbiAgICAgICAgbm90X3N0cmluZzogL1tec10vLFxuICAgICAgICBub3RfYm9vbDogL1tedF0vLFxuICAgICAgICBub3RfdHlwZTogL1teVF0vLFxuICAgICAgICBub3RfcHJpbWl0aXZlOiAvW152XS8sXG4gICAgICAgIG51bWJlcjogL1tkaWVmZ10vLFxuICAgICAgICBudW1lcmljX2FyZzogL1tiY2RpZWZndXhYXS8sXG4gICAgICAgIGpzb246IC9bal0vLFxuICAgICAgICBub3RfanNvbjogL1teal0vLFxuICAgICAgICB0ZXh0OiAvXlteXFx4MjVdKy8sXG4gICAgICAgIG1vZHVsbzogL15cXHgyNXsyfS8sXG4gICAgICAgIHBsYWNlaG9sZGVyOiAvXlxceDI1KD86KFsxLTldXFxkKilcXCR8XFwoKFteKV0rKVxcKSk/KFxcKyk/KDB8J1teJF0pPygtKT8oXFxkKyk/KD86XFwuKFxcZCspKT8oW2ItZ2lqb3N0VHV2eFhdKS8sXG4gICAgICAgIGtleTogL14oW2Etel9dW2Etel9cXGRdKikvaSxcbiAgICAgICAga2V5X2FjY2VzczogL15cXC4oW2Etel9dW2Etel9cXGRdKikvaSxcbiAgICAgICAgaW5kZXhfYWNjZXNzOiAvXlxcWyhcXGQrKVxcXS8sXG4gICAgICAgIHNpZ246IC9eWystXS9cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzcHJpbnRmKGtleSkge1xuICAgICAgICAvLyBgYXJndW1lbnRzYCBpcyBub3QgYW4gYXJyYXksIGJ1dCBzaG91bGQgYmUgZmluZSBmb3IgdGhpcyBjYWxsXG4gICAgICAgIHJldHVybiBzcHJpbnRmX2Zvcm1hdChzcHJpbnRmX3BhcnNlKGtleSksIGFyZ3VtZW50cylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2c3ByaW50ZihmbXQsIGFyZ3YpIHtcbiAgICAgICAgcmV0dXJuIHNwcmludGYuYXBwbHkobnVsbCwgW2ZtdF0uY29uY2F0KGFyZ3YgfHwgW10pKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNwcmludGZfZm9ybWF0KHBhcnNlX3RyZWUsIGFyZ3YpIHtcbiAgICAgICAgdmFyIGN1cnNvciA9IDEsIHRyZWVfbGVuZ3RoID0gcGFyc2VfdHJlZS5sZW5ndGgsIGFyZywgb3V0cHV0ID0gJycsIGksIGssIHBoLCBwYWQsIHBhZF9jaGFyYWN0ZXIsIHBhZF9sZW5ndGgsIGlzX3Bvc2l0aXZlLCBzaWduXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0cmVlX2xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcnNlX3RyZWVbaV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IHBhcnNlX3RyZWVbaV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwYXJzZV90cmVlW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHBoID0gcGFyc2VfdHJlZVtpXSAvLyBjb252ZW5pZW5jZSBwdXJwb3NlcyBvbmx5XG4gICAgICAgICAgICAgICAgaWYgKHBoLmtleXMpIHsgLy8ga2V5d29yZCBhcmd1bWVudFxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd2W2N1cnNvcl1cbiAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IHBoLmtleXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmcgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHNwcmludGYoJ1tzcHJpbnRmXSBDYW5ub3QgYWNjZXNzIHByb3BlcnR5IFwiJXNcIiBvZiB1bmRlZmluZWQgdmFsdWUgXCIlc1wiJywgcGgua2V5c1trXSwgcGgua2V5c1trLTFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ1twaC5rZXlzW2tdXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBoLnBhcmFtX25vKSB7IC8vIHBvc2l0aW9uYWwgYXJndW1lbnQgKGV4cGxpY2l0KVxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd2W3BoLnBhcmFtX25vXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHsgLy8gcG9zaXRpb25hbCBhcmd1bWVudCAoaW1wbGljaXQpXG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3ZbY3Vyc29yKytdXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJlLm5vdF90eXBlLnRlc3QocGgudHlwZSkgJiYgcmUubm90X3ByaW1pdGl2ZS50ZXN0KHBoLnR5cGUpICYmIGFyZyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZygpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJlLm51bWVyaWNfYXJnLnRlc3QocGgudHlwZSkgJiYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInICYmIGlzTmFOKGFyZykpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc3ByaW50ZignW3NwcmludGZdIGV4cGVjdGluZyBudW1iZXIgYnV0IGZvdW5kICVUJywgYXJnKSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmUubnVtYmVyLnRlc3QocGgudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNfcG9zaXRpdmUgPSBhcmcgPj0gMFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN3aXRjaCAocGgudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBhcnNlSW50KGFyZywgMTApLnRvU3RyaW5nKDIpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoYXJnLCAxMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwYXJzZUludChhcmcsIDEwKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaic6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBKU09OLnN0cmluZ2lmeShhcmcsIG51bGwsIHBoLndpZHRoID8gcGFyc2VJbnQocGgud2lkdGgpIDogMClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGgucHJlY2lzaW9uID8gcGFyc2VGbG9hdChhcmcpLnRvRXhwb25lbnRpYWwocGgucHJlY2lzaW9uKSA6IHBhcnNlRmxvYXQoYXJnKS50b0V4cG9uZW50aWFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGgucHJlY2lzaW9uID8gcGFyc2VGbG9hdChhcmcpLnRvRml4ZWQocGgucHJlY2lzaW9uKSA6IHBhcnNlRmxvYXQoYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwaC5wcmVjaXNpb24gPyBTdHJpbmcoTnVtYmVyKGFyZy50b1ByZWNpc2lvbihwaC5wcmVjaXNpb24pKSkgOiBwYXJzZUZsb2F0KGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ28nOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBhcnNlSW50KGFyZywgMTApID4+PiAwKS50b1N0cmluZyg4KVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBTdHJpbmcoYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBoLnByZWNpc2lvbiA/IGFyZy5zdWJzdHJpbmcoMCwgcGgucHJlY2lzaW9uKSA6IGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gU3RyaW5nKCEhYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBoLnByZWNpc2lvbiA/IGFyZy5zdWJzdHJpbmcoMCwgcGgucHJlY2lzaW9uKSA6IGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwaC5wcmVjaXNpb24gPyBhcmcuc3Vic3RyaW5nKDAsIHBoLnByZWNpc2lvbikgOiBhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd1JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBhcnNlSW50KGFyZywgMTApID4+PiAwXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd2JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy52YWx1ZU9mKClcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwaC5wcmVjaXNpb24gPyBhcmcuc3Vic3RyaW5nKDAsIHBoLnByZWNpc2lvbikgOiBhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwYXJzZUludChhcmcsIDEwKSA+Pj4gMCkudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdYJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwYXJzZUludChhcmcsIDEwKSA+Pj4gMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZS5qc29uLnRlc3QocGgudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IGFyZ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlLm51bWJlci50ZXN0KHBoLnR5cGUpICYmICghaXNfcG9zaXRpdmUgfHwgcGguc2lnbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ24gPSBpc19wb3NpdGl2ZSA/ICcrJyA6ICctJ1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnRvU3RyaW5nKCkucmVwbGFjZShyZS5zaWduLCAnJylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ24gPSAnJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhZF9jaGFyYWN0ZXIgPSBwaC5wYWRfY2hhciA/IHBoLnBhZF9jaGFyID09PSAnMCcgPyAnMCcgOiBwaC5wYWRfY2hhci5jaGFyQXQoMSkgOiAnICdcbiAgICAgICAgICAgICAgICAgICAgcGFkX2xlbmd0aCA9IHBoLndpZHRoIC0gKHNpZ24gKyBhcmcpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICBwYWQgPSBwaC53aWR0aCA/IChwYWRfbGVuZ3RoID4gMCA/IHBhZF9jaGFyYWN0ZXIucmVwZWF0KHBhZF9sZW5ndGgpIDogJycpIDogJydcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IHBoLmFsaWduID8gc2lnbiArIGFyZyArIHBhZCA6IChwYWRfY2hhcmFjdGVyID09PSAnMCcgPyBzaWduICsgcGFkICsgYXJnIDogcGFkICsgc2lnbiArIGFyZylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dFxuICAgIH1cblxuICAgIHZhciBzcHJpbnRmX2NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4gICAgZnVuY3Rpb24gc3ByaW50Zl9wYXJzZShmbXQpIHtcbiAgICAgICAgaWYgKHNwcmludGZfY2FjaGVbZm10XSkge1xuICAgICAgICAgICAgcmV0dXJuIHNwcmludGZfY2FjaGVbZm10XVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9mbXQgPSBmbXQsIG1hdGNoLCBwYXJzZV90cmVlID0gW10sIGFyZ19uYW1lcyA9IDBcbiAgICAgICAgd2hpbGUgKF9mbXQpIHtcbiAgICAgICAgICAgIGlmICgobWF0Y2ggPSByZS50ZXh0LmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKG1hdGNoWzBdKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKG1hdGNoID0gcmUubW9kdWxvLmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKCclJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IHJlLnBsYWNlaG9sZGVyLmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoWzJdKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ19uYW1lcyB8PSAxXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZF9saXN0ID0gW10sIHJlcGxhY2VtZW50X2ZpZWxkID0gbWF0Y2hbMl0sIGZpZWxkX21hdGNoID0gW11cbiAgICAgICAgICAgICAgICAgICAgaWYgKChmaWVsZF9tYXRjaCA9IHJlLmtleS5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkX2xpc3QucHVzaChmaWVsZF9tYXRjaFsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgocmVwbGFjZW1lbnRfZmllbGQgPSByZXBsYWNlbWVudF9maWVsZC5zdWJzdHJpbmcoZmllbGRfbWF0Y2hbMF0ubGVuZ3RoKSkgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChmaWVsZF9tYXRjaCA9IHJlLmtleV9hY2Nlc3MuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkX2xpc3QucHVzaChmaWVsZF9tYXRjaFsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKGZpZWxkX21hdGNoID0gcmUuaW5kZXhfYWNjZXNzLmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1tzcHJpbnRmXSBmYWlsZWQgdG8gcGFyc2UgbmFtZWQgYXJndW1lbnQga2V5JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1tzcHJpbnRmXSBmYWlsZWQgdG8gcGFyc2UgbmFtZWQgYXJndW1lbnQga2V5JylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSA9IGZpZWxkX2xpc3RcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ19uYW1lcyB8PSAyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhcmdfbmFtZXMgPT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbc3ByaW50Zl0gbWl4aW5nIHBvc2l0aW9uYWwgYW5kIG5hbWVkIHBsYWNlaG9sZGVycyBpcyBub3QgKHlldCkgc3VwcG9ydGVkJylcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwYXJzZV90cmVlLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBtYXRjaFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtX25vOiAgICBtYXRjaFsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXM6ICAgICAgICBtYXRjaFsyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ246ICAgICAgICBtYXRjaFszXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZF9jaGFyOiAgICBtYXRjaFs0XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduOiAgICAgICBtYXRjaFs1XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAgICAgICBtYXRjaFs2XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWNpc2lvbjogICBtYXRjaFs3XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICAgICAgICBtYXRjaFs4XVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdbc3ByaW50Zl0gdW5leHBlY3RlZCBwbGFjZWhvbGRlcicpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfZm10ID0gX2ZtdC5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcHJpbnRmX2NhY2hlW2ZtdF0gPSBwYXJzZV90cmVlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZXhwb3J0IHRvIGVpdGhlciBicm93c2VyIG9yIG5vZGUuanNcbiAgICAgKi9cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBxdW90ZS1wcm9wcyAqL1xuICAgIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZXhwb3J0c1snc3ByaW50ZiddID0gc3ByaW50ZlxuICAgICAgICBleHBvcnRzWyd2c3ByaW50ZiddID0gdnNwcmludGZcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdpbmRvd1snc3ByaW50ZiddID0gc3ByaW50ZlxuICAgICAgICB3aW5kb3dbJ3ZzcHJpbnRmJ10gPSB2c3ByaW50ZlxuXG4gICAgICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVsnYW1kJ10pIHtcbiAgICAgICAgICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAnc3ByaW50Zic6IHNwcmludGYsXG4gICAgICAgICAgICAgICAgICAgICd2c3ByaW50Zic6IHZzcHJpbnRmXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIHF1b3RlLXByb3BzICovXG59KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiIsImltcG9ydCBwbHVyYWxGb3JtcyBmcm9tICdAdGFubmluL3BsdXJhbC1mb3Jtcyc7XG5cbi8qKlxuICogVGFubmluIGNvbnN0cnVjdG9yIG9wdGlvbnMuXG4gKlxuICogQHR5cGVkZWYge09iamVjdH0gVGFubmluT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAgIFtjb250ZXh0RGVsaW1pdGVyXSBKb2luZXIgaW4gc3RyaW5nIGxvb2t1cCB3aXRoIGNvbnRleHQuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbb25NaXNzaW5nS2V5XSAgICAgQ2FsbGJhY2sgdG8gaW52b2tlIHdoZW4ga2V5IG1pc3NpbmcuXG4gKi9cblxuLyoqXG4gKiBEb21haW4gbWV0YWRhdGEuXG4gKlxuICogQHR5cGVkZWYge09iamVjdH0gVGFubmluRG9tYWluTWV0YWRhdGFcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gICAgICAgICAgICBbZG9tYWluXSAgICAgICBEb21haW4gbmFtZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAgICAgICAgICAgIFtsYW5nXSAgICAgICAgIExhbmd1YWdlIGNvZGUuXG4gKiBAcHJvcGVydHkgeyhzdHJpbmd8RnVuY3Rpb24pfSBbcGx1cmFsX2Zvcm1zXSBQbHVyYWwgZm9ybXMgZXhwcmVzc2lvbiBvclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZXZhbHVhdG9yLlxuICovXG5cbi8qKlxuICogRG9tYWluIHRyYW5zbGF0aW9uIHBhaXIgcmVzcGVjdGl2ZWx5IHJlcHJlc2VudGluZyB0aGUgc2luZ3VsYXIgYW5kIHBsdXJhbFxuICogdHJhbnNsYXRpb24uXG4gKlxuICogQHR5cGVkZWYge1tzdHJpbmcsc3RyaW5nXX0gVGFubmluVHJhbnNsYXRpb25cbiAqL1xuXG4vKipcbiAqIExvY2FsZSBkYXRhIGRvbWFpbi4gVGhlIGtleSBpcyB1c2VkIGFzIHJlZmVyZW5jZSBmb3IgbG9va3VwLCB0aGUgdmFsdWUgYW5cbiAqIGFycmF5IG9mIHR3byBzdHJpbmcgZW50cmllcyByZXNwZWN0aXZlbHkgcmVwcmVzZW50aW5nIHRoZSBzaW5ndWxhciBhbmQgcGx1cmFsXG4gKiB0cmFuc2xhdGlvbi5cbiAqXG4gKiBAdHlwZWRlZiB7e1trZXk6c3RyaW5nXTpUYW5uaW5Eb21haW5NZXRhZGF0YXxUYW5uaW5UcmFuc2xhdGlvbiwnJzpUYW5uaW5Eb21haW5NZXRhZGF0YXxUYW5uaW5UcmFuc2xhdGlvbn19IFRhbm5pbkxvY2FsZURvbWFpblxuICovXG5cbi8qKlxuICogSmVkLWZvcm1hdHRlZCBsb2NhbGUgZGF0YS5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9tZXNzYWdlZm9ybWF0LmdpdGh1Yi5pby9KZWQvXG4gKlxuICogQHR5cGVkZWYge3tbZG9tYWluOnN0cmluZ106VGFubmluTG9jYWxlRG9tYWlufX0gVGFubmluTG9jYWxlRGF0YVxuICovXG5cbi8qKlxuICogRGVmYXVsdCBUYW5uaW4gY29uc3RydWN0b3Igb3B0aW9ucy5cbiAqXG4gKiBAdHlwZSB7VGFubmluT3B0aW9uc31cbiAqL1xudmFyIERFRkFVTFRfT1BUSU9OUyA9IHtcblx0Y29udGV4dERlbGltaXRlcjogJ1xcdTAwMDQnLFxuXHRvbk1pc3NpbmdLZXk6IG51bGwsXG59O1xuXG4vKipcbiAqIEdpdmVuIGEgc3BlY2lmaWMgbG9jYWxlIGRhdGEncyBjb25maWcgYHBsdXJhbF9mb3Jtc2AgdmFsdWUsIHJldHVybnMgdGhlXG4gKiBleHByZXNzaW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgXG4gKiBnZXRQbHVyYWxFeHByZXNzaW9uKCAnbnBsdXJhbHM9MjsgcGx1cmFsPShuICE9IDEpOycgKSA9PT0gJyhuICE9IDEpJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBmIExvY2FsZSBkYXRhIHBsdXJhbCBmb3Jtcy5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFBsdXJhbCBmb3JtcyBleHByZXNzaW9uLlxuICovXG5mdW5jdGlvbiBnZXRQbHVyYWxFeHByZXNzaW9uKCBwZiApIHtcblx0dmFyIHBhcnRzLCBpLCBwYXJ0O1xuXG5cdHBhcnRzID0gcGYuc3BsaXQoICc7JyApO1xuXG5cdGZvciAoIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0cGFydCA9IHBhcnRzWyBpIF0udHJpbSgpO1xuXHRcdGlmICggcGFydC5pbmRleE9mKCAncGx1cmFsPScgKSA9PT0gMCApIHtcblx0XHRcdHJldHVybiBwYXJ0LnN1YnN0ciggNyApO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIFRhbm5pbiBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAY2xhc3NcbiAqXG4gKiBAcGFyYW0ge1Rhbm5pbkxvY2FsZURhdGF9IGRhdGEgICAgICBKZWQtZm9ybWF0dGVkIGxvY2FsZSBkYXRhLlxuICogQHBhcmFtIHtUYW5uaW5PcHRpb25zfSAgICBbb3B0aW9uc10gVGFubmluIG9wdGlvbnMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRhbm5pbiggZGF0YSwgb3B0aW9ucyApIHtcblx0dmFyIGtleTtcblxuXHQvKipcblx0ICogSmVkLWZvcm1hdHRlZCBsb2NhbGUgZGF0YS5cblx0ICpcblx0ICogQG5hbWUgVGFubmluI2RhdGFcblx0ICogQHR5cGUge1Rhbm5pbkxvY2FsZURhdGF9XG5cdCAqL1xuXHR0aGlzLmRhdGEgPSBkYXRhO1xuXG5cdC8qKlxuXHQgKiBQbHVyYWwgZm9ybXMgZnVuY3Rpb24gY2FjaGUsIGtleWVkIGJ5IHBsdXJhbCBmb3JtcyBzdHJpbmcuXG5cdCAqXG5cdCAqIEBuYW1lIFRhbm5pbiNwbHVyYWxGb3Jtc1xuXHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxGdW5jdGlvbj59XG5cdCAqL1xuXHR0aGlzLnBsdXJhbEZvcm1zID0ge307XG5cblx0LyoqXG5cdCAqIEVmZmVjdGl2ZSBvcHRpb25zIGZvciBpbnN0YW5jZSwgaW5jbHVkaW5nIGRlZmF1bHRzLlxuXHQgKlxuXHQgKiBAbmFtZSBUYW5uaW4jb3B0aW9uc1xuXHQgKiBAdHlwZSB7VGFubmluT3B0aW9uc31cblx0ICovXG5cdHRoaXMub3B0aW9ucyA9IHt9O1xuXG5cdGZvciAoIGtleSBpbiBERUZBVUxUX09QVElPTlMgKSB7XG5cdFx0dGhpcy5vcHRpb25zWyBrZXkgXSA9IG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBrZXkgaW4gb3B0aW9uc1xuXHRcdFx0PyBvcHRpb25zWyBrZXkgXVxuXHRcdFx0OiBERUZBVUxUX09QVElPTlNbIGtleSBdO1xuXHR9XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGx1cmFsIGZvcm0gaW5kZXggZm9yIHRoZSBnaXZlbiBkb21haW4gYW5kIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBkb21haW4gRG9tYWluIG9uIHdoaWNoIHRvIGNhbGN1bGF0ZSBwbHVyYWwgZm9ybS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBuICAgICAgVmFsdWUgZm9yIHdoaWNoIHBsdXJhbCBmb3JtIGlzIHRvIGJlIGNhbGN1bGF0ZWQuXG4gKlxuICogQHJldHVybiB7bnVtYmVyfSBQbHVyYWwgZm9ybSBpbmRleC5cbiAqL1xuVGFubmluLnByb3RvdHlwZS5nZXRQbHVyYWxGb3JtID0gZnVuY3Rpb24oIGRvbWFpbiwgbiApIHtcblx0dmFyIGdldFBsdXJhbEZvcm0gPSB0aGlzLnBsdXJhbEZvcm1zWyBkb21haW4gXSxcblx0XHRjb25maWcsIHBsdXJhbCwgcGY7XG5cblx0aWYgKCAhIGdldFBsdXJhbEZvcm0gKSB7XG5cdFx0Y29uZmlnID0gdGhpcy5kYXRhWyBkb21haW4gXVsgJycgXTtcblxuXHRcdHBmID0gKFxuXHRcdFx0Y29uZmlnWyAnUGx1cmFsLUZvcm1zJyBdIHx8XG5cdFx0XHRjb25maWdbICdwbHVyYWwtZm9ybXMnIF0gfHxcblx0XHRcdC8vIElnbm9yZSByZWFzb246IEFzIGtub3duLCB0aGVyZSdzIG5vIHdheSB0byBkb2N1bWVudCB0aGUgZW1wdHlcblx0XHRcdC8vIHN0cmluZyBwcm9wZXJ0eSBvbiBhIGtleSB0byBndWFyYW50ZWUgdGhpcyBhcyBtZXRhZGF0YS5cblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGNvbmZpZy5wbHVyYWxfZm9ybXNcblx0XHQpO1xuXG5cdFx0aWYgKCB0eXBlb2YgcGYgIT09ICdmdW5jdGlvbicgKSB7XG5cdFx0XHRwbHVyYWwgPSBnZXRQbHVyYWxFeHByZXNzaW9uKFxuXHRcdFx0XHRjb25maWdbICdQbHVyYWwtRm9ybXMnIF0gfHxcblx0XHRcdFx0Y29uZmlnWyAncGx1cmFsLWZvcm1zJyBdIHx8XG5cdFx0XHRcdC8vIElnbm9yZSByZWFzb246IEFzIGtub3duLCB0aGVyZSdzIG5vIHdheSB0byBkb2N1bWVudCB0aGUgZW1wdHlcblx0XHRcdFx0Ly8gc3RyaW5nIHByb3BlcnR5IG9uIGEga2V5IHRvIGd1YXJhbnRlZSB0aGlzIGFzIG1ldGFkYXRhLlxuXHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdGNvbmZpZy5wbHVyYWxfZm9ybXNcblx0XHRcdCk7XG5cblx0XHRcdHBmID0gcGx1cmFsRm9ybXMoIHBsdXJhbCApO1xuXHRcdH1cblxuXHRcdGdldFBsdXJhbEZvcm0gPSB0aGlzLnBsdXJhbEZvcm1zWyBkb21haW4gXSA9IHBmO1xuXHR9XG5cblx0cmV0dXJuIGdldFBsdXJhbEZvcm0oIG4gKTtcbn07XG5cbi8qKlxuICogVHJhbnNsYXRlIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSAgICAgIGRvbWFpbiAgIFRyYW5zbGF0aW9uIGRvbWFpbi5cbiAqIEBwYXJhbSB7c3RyaW5nfHZvaWR9IGNvbnRleHQgIENvbnRleHQgZGlzdGluZ3Vpc2hpbmcgdGVybXMgb2YgdGhlIHNhbWUgbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSAgICAgIHNpbmd1bGFyIFByaW1hcnkga2V5IGZvciB0cmFuc2xhdGlvbiBsb29rdXAuXG4gKiBAcGFyYW0ge3N0cmluZz19ICAgICBwbHVyYWwgICBGYWxsYmFjayB2YWx1ZSB1c2VkIGZvciBub24temVybyBwbHVyYWxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0gaW5kZXguXG4gKiBAcGFyYW0ge251bWJlcj19ICAgICBuICAgICAgICBWYWx1ZSB0byB1c2UgaW4gY2FsY3VsYXRpbmcgcGx1cmFsIGZvcm0uXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUcmFuc2xhdGVkIHN0cmluZy5cbiAqL1xuVGFubmluLnByb3RvdHlwZS5kY25wZ2V0dGV4dCA9IGZ1bmN0aW9uKCBkb21haW4sIGNvbnRleHQsIHNpbmd1bGFyLCBwbHVyYWwsIG4gKSB7XG5cdHZhciBpbmRleCwga2V5LCBlbnRyeTtcblxuXHRpZiAoIG4gPT09IHVuZGVmaW5lZCApIHtcblx0XHQvLyBEZWZhdWx0IHRvIHNpbmd1bGFyLlxuXHRcdGluZGV4ID0gMDtcblx0fSBlbHNlIHtcblx0XHQvLyBGaW5kIGluZGV4IGJ5IGV2YWx1YXRpbmcgcGx1cmFsIGZvcm0gZm9yIHZhbHVlLlxuXHRcdGluZGV4ID0gdGhpcy5nZXRQbHVyYWxGb3JtKCBkb21haW4sIG4gKTtcblx0fVxuXG5cdGtleSA9IHNpbmd1bGFyO1xuXG5cdC8vIElmIHByb3ZpZGVkLCBjb250ZXh0IGlzIHByZXBlbmRlZCB0byBrZXkgd2l0aCBkZWxpbWl0ZXIuXG5cdGlmICggY29udGV4dCApIHtcblx0XHRrZXkgPSBjb250ZXh0ICsgdGhpcy5vcHRpb25zLmNvbnRleHREZWxpbWl0ZXIgKyBzaW5ndWxhcjtcblx0fVxuXG5cdGVudHJ5ID0gdGhpcy5kYXRhWyBkb21haW4gXVsga2V5IF07XG5cblx0Ly8gVmVyaWZ5IG5vdCBvbmx5IHRoYXQgZW50cnkgZXhpc3RzLCBidXQgdGhhdCB0aGUgaW50ZW5kZWQgaW5kZXggaXMgd2l0aGluXG5cdC8vIHJhbmdlIGFuZCBub24tZW1wdHkuXG5cdGlmICggZW50cnkgJiYgZW50cnlbIGluZGV4IF0gKSB7XG5cdFx0cmV0dXJuIGVudHJ5WyBpbmRleCBdO1xuXHR9XG5cblx0aWYgKCB0aGlzLm9wdGlvbnMub25NaXNzaW5nS2V5ICkge1xuXHRcdHRoaXMub3B0aW9ucy5vbk1pc3NpbmdLZXkoIHNpbmd1bGFyLCBkb21haW4gKTtcblx0fVxuXG5cdC8vIElmIGVudHJ5IG5vdCBmb3VuZCwgZmFsbCBiYWNrIHRvIHNpbmd1bGFyIHZzLiBwbHVyYWwgd2l0aCB6ZXJvIGluZGV4XG5cdC8vIHJlcHJlc2VudGluZyB0aGUgc2luZ3VsYXIgdmFsdWUuXG5cdHJldHVybiBpbmRleCA9PT0gMCA/IHNpbmd1bGFyIDogcGx1cmFsO1xufTtcbiIsImltcG9ydCB7IENoYXJ0LCBCYXJDb250cm9sbGVyLCBEb3VnaG51dENvbnRyb2xsZXIsIExpbmVDb250cm9sbGVyLCBQaWVDb250cm9sbGVyLCBQb2xhckFyZWFDb250cm9sbGVyLCBSYWRhckNvbnRyb2xsZXIsIEJ1YmJsZUNvbnRyb2xsZXIsIFNjYXR0ZXJDb250cm9sbGVyIH0gZnJvbSAnY2hhcnQuanMnO1xuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBzaGFsbG93UmVmLCByZWYsIHdhdGNoLCBvbk1vdW50ZWQsIG9uQmVmb3JlVW5tb3VudCwgdG9SYXcsIGgsIGlzUHJveHkgfSBmcm9tICd2dWUnO1xuXG52YXIgQ2hhcnRFbWl0cztcbihmdW5jdGlvbihDaGFydEVtaXRzKSB7XG4gICAgQ2hhcnRFbWl0c1tcIkNoYXJ0UmVuZGVyZWRcIl0gPSBcImNoYXJ0OnJlbmRlcmVkXCI7XG4gICAgQ2hhcnRFbWl0c1tcIkNoYXJ0VXBkYXRlZFwiXSA9IFwiY2hhcnQ6dXBkYXRlZFwiO1xuICAgIENoYXJ0RW1pdHNbXCJDaGFydERlc3Ryb3llZFwiXSA9IFwiY2hhcnQ6ZGVzdHJveWVkXCI7XG4gICAgQ2hhcnRFbWl0c1tcIkxhYmVsc1VwZGF0ZWRcIl0gPSBcImxhYmVsczp1cGRhdGVkXCI7XG59KShDaGFydEVtaXRzIHx8IChDaGFydEVtaXRzID0ge30pKTtcbmZ1bmN0aW9uIGNoYXJ0Q3JlYXRlKGNyZWF0ZUNoYXJ0RnVuY3Rpb24sIGNoYXJ0RGF0YSwgY2hhcnRPcHRpb25zLCBjb250ZXh0KSB7XG4gICAgY3JlYXRlQ2hhcnRGdW5jdGlvbihjaGFydERhdGEsIGNoYXJ0T3B0aW9ucyk7XG4gICAgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250ZXh0LmVtaXQoQ2hhcnRFbWl0cy5DaGFydFJlbmRlcmVkKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGFydFVwZGF0ZShjaGFydCwgY29udGV4dCkge1xuICAgIGNoYXJ0LnVwZGF0ZSgpO1xuICAgIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGV4dC5lbWl0KENoYXJ0RW1pdHMuQ2hhcnRVcGRhdGVkKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGFydERlc3Ryb3koY2hhcnQsIGNvbnRleHQpIHtcbiAgICBjaGFydC5kZXN0cm95KCk7XG4gICAgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250ZXh0LmVtaXQoQ2hhcnRFbWl0cy5DaGFydERlc3Ryb3llZCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0Q2hhcnREYXRhKGRhdGEsIGRhdGFzZXRJZEtleSkge1xuICAgIGNvbnN0IG5leHREYXRhID0ge1xuICAgICAgICBsYWJlbHM6IHR5cGVvZiBkYXRhLmxhYmVscyA9PT0gXCJ1bmRlZmluZWRcIiA/IFtdIDogW1xuICAgICAgICAgICAgLi4uZGF0YS5sYWJlbHNcbiAgICAgICAgXSxcbiAgICAgICAgZGF0YXNldHM6IFtdXG4gICAgfTtcbiAgICBzZXRDaGFydERhdGFzZXRzKG5leHREYXRhLCB7XG4gICAgICAgIC4uLmRhdGFcbiAgICB9LCBkYXRhc2V0SWRLZXkpO1xuICAgIHJldHVybiBuZXh0RGF0YTtcbn1cbmZ1bmN0aW9uIHNldENoYXJ0RGF0YXNldHMob2xkRGF0YSwgbmV3RGF0YSwgZGF0YXNldElkS2V5KSB7XG4gICAgY29uc3QgYWRkZWREYXRhc2V0cyA9IFtdO1xuICAgIG9sZERhdGEuZGF0YXNldHMgPSBuZXdEYXRhLmRhdGFzZXRzLm1hcCgobmV4dERhdGFzZXQpPT57XG4gICAgICAgIC8vIGdpdmVuIHRoZSBuZXcgc2V0LCBmaW5kIGl0J3MgY3VycmVudCBtYXRjaFxuICAgICAgICBjb25zdCBjdXJyZW50RGF0YXNldCA9IG9sZERhdGEuZGF0YXNldHMuZmluZCgoZGF0YXNldCk9PmRhdGFzZXRbZGF0YXNldElkS2V5XSA9PT0gbmV4dERhdGFzZXRbZGF0YXNldElkS2V5XSk7XG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIG9yaWdpbmFsIHRvIHVwZGF0ZSwgc28gc2ltcGx5IGFkZCBuZXcgb25lXG4gICAgICAgIGlmICghY3VycmVudERhdGFzZXQgfHwgIW5leHREYXRhc2V0LmRhdGEgfHwgYWRkZWREYXRhc2V0cy5pbmNsdWRlcyhjdXJyZW50RGF0YXNldCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ubmV4dERhdGFzZXRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgYWRkZWREYXRhc2V0cy5wdXNoKGN1cnJlbnREYXRhc2V0KTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihjdXJyZW50RGF0YXNldCwgbmV4dERhdGFzZXQpO1xuICAgICAgICByZXR1cm4gY3VycmVudERhdGFzZXQ7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzZXRDaGFydExhYmVscyhjaGFydCwgbGFiZWxzLCBjb250ZXh0KSB7XG4gICAgY2hhcnQuZGF0YS5sYWJlbHMgPSBsYWJlbHM7XG4gICAgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250ZXh0LmVtaXQoQ2hhcnRFbWl0cy5MYWJlbHNVcGRhdGVkKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRDaGFydE9wdGlvbnMoY2hhcnQsIG9wdGlvbnMpIHtcbiAgICBjaGFydC5vcHRpb25zID0ge1xuICAgICAgICAuLi5vcHRpb25zXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmVEYXRhKG5ld0RhdGEsIG9sZERhdGEpIHtcbiAgICAvLyBHZXQgbmV3IGFuZCBvbGQgRGF0YVNldCBMYWJlbHNcbiAgICBjb25zdCBuZXdEYXRhc2V0TGFiZWxzID0gbmV3RGF0YS5kYXRhc2V0cy5tYXAoKGRhdGFzZXQpPT57XG4gICAgICAgIHJldHVybiBkYXRhc2V0LmxhYmVsO1xuICAgIH0pO1xuICAgIGNvbnN0IG9sZERhdGFzZXRMYWJlbHMgPSBvbGREYXRhLmRhdGFzZXRzLm1hcCgoZGF0YXNldCk9PntcbiAgICAgICAgcmV0dXJuIGRhdGFzZXQubGFiZWw7XG4gICAgfSk7XG4gICAgLy8gQ2hlY2sgaWYgTGFiZWxzIGFyZSBlcXVhbCBhbmQgaWYgZGF0YXNldCBsZW5ndGggaXMgZXF1YWxcbiAgICByZXR1cm4gb2xkRGF0YS5kYXRhc2V0cy5sZW5ndGggPT09IG5ld0RhdGEuZGF0YXNldHMubGVuZ3RoICYmIG5ld0RhdGFzZXRMYWJlbHMuZXZlcnkoKHZhbHVlLCBpbmRleCk9PnZhbHVlID09PSBvbGREYXRhc2V0TGFiZWxzW2luZGV4XSk7XG59XG5jb25zdCB0ZW1wbGF0ZUVycm9yID0gXCJQbGVhc2UgcmVtb3ZlIHRoZSA8dGVtcGxhdGU+PC90ZW1wbGF0ZT4gdGFncyBmcm9tIHlvdXIgY2hhcnQgY29tcG9uZW50LiBTZWUgaHR0cHM6Ly92dWUtY2hhcnRqcy5vcmcvZ3VpZGUvI3Z1ZS1zaW5nbGUtZmlsZS1jb21wb25lbnRzXCI7XG5jb25zdCBjaGFydFVwZGF0ZUVycm9yID0gXCJVcGRhdGUgRVJST1I6IGNoYXJ0IGluc3RhbmNlIG5vdCBmb3VuZFwiO1xuXG5jb25zdCBnZW5lcmF0ZUNoYXJ0ID0gKGNoYXJ0SWQsIGNoYXJ0VHlwZSwgY2hhcnRDb250cm9sbGVyKT0+e1xuICAgIHJldHVybiBkZWZpbmVDb21wb25lbnQoe1xuICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgY2hhcnREYXRhOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hhcnRPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICgpPT57fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFzZXRJZEtleToge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBcImxhYmVsXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFydElkOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGNoYXJ0SWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3aWR0aDoge1xuICAgICAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiA0MDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoZWlnaHQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogNDAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY3NzQ2xhc3Nlczoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBcIlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3R5bGVzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICgpPT57fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAoKT0+W11cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2V0dXAgKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgICAgICBDaGFydC5yZWdpc3RlcihjaGFydENvbnRyb2xsZXIpO1xuICAgICAgICAgICAgY29uc3QgX2NoYXJ0ID0gc2hhbGxvd1JlZihudWxsKTtcbiAgICAgICAgICAgIGNvbnN0IGNhbnZhc0VsID0gcmVmKG51bGwpO1xuICAgICAgICAgICAgZnVuY3Rpb24gcmVuZGVyQ2hhcnQoZGF0YSwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmIChfY2hhcnQudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnREZXN0cm95KHRvUmF3KF9jaGFydC52YWx1ZSksIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2FudmFzRWwudmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRlbXBsYXRlRXJyb3IpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJ0RGF0YSA9IGdldENoYXJ0RGF0YShkYXRhLCBwcm9wcy5kYXRhc2V0SWRLZXkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW52YXNFbDJEQ29udGV4dCA9IGNhbnZhc0VsLnZhbHVlLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbnZhc0VsMkRDb250ZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY2hhcnQudmFsdWUgPSBuZXcgQ2hhcnQoY2FudmFzRWwyRENvbnRleHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBjaGFydFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogaXNQcm94eShkYXRhKSA/IG5ldyBQcm94eShjaGFydERhdGEsIHt9KSA6IGNoYXJ0RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbnM6IHByb3BzLnBsdWdpbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY2hhcnREYXRhSGFuZGxlcihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdEYXRhID0gaXNQcm94eShuZXdWYWx1ZSkgPyB0b1JhdyhuZXdWYWx1ZSkgOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLm5ld1ZhbHVlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBvbGREYXRhID0gaXNQcm94eShvbGRWYWx1ZSkgPyB0b1JhdyhvbGRWYWx1ZSkgOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLm9sZFZhbHVlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMob2xkRGF0YSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFydCA9IHRvUmF3KF9jaGFydC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzRXF1YWxMYWJlbHNBbmREYXRhc2V0c0xlbmd0aCA9IGNvbXBhcmVEYXRhKG5ld0RhdGEsIG9sZERhdGEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNFcXVhbExhYmVsc0FuZERhdGFzZXRzTGVuZ3RoICYmIGNoYXJ0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDaGFydERhdGFzZXRzKGNoYXJ0ID09PSBudWxsIHx8IGNoYXJ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjaGFydC5kYXRhLCBuZXdEYXRhLCBwcm9wcy5kYXRhc2V0SWRLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0RhdGEubGFiZWxzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDaGFydExhYmVscyhjaGFydCwgbmV3RGF0YS5sYWJlbHMsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ2hhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFydCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0RGVzdHJveShjaGFydCwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydENyZWF0ZShyZW5kZXJDaGFydCwgcHJvcHMuY2hhcnREYXRhLCBwcm9wcy5jaGFydE9wdGlvbnMsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9jaGFydC52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnREZXN0cm95KHRvUmF3KF9jaGFydC52YWx1ZSksIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0Q3JlYXRlKHJlbmRlckNoYXJ0LCBwcm9wcy5jaGFydERhdGEsIHByb3BzLmNoYXJ0T3B0aW9ucywgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY2hhcnRPcHRpb25zSGFuZGxlcihvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhcnQgPSB0b1JhdyhfY2hhcnQudmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChjaGFydCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRDaGFydE9wdGlvbnMoY2hhcnQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVDaGFydCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0Q3JlYXRlKHJlbmRlckNoYXJ0LCBwcm9wcy5jaGFydERhdGEsIHByb3BzLmNoYXJ0T3B0aW9ucywgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlQ2hhcnQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhcnQgPSB0b1JhdyhfY2hhcnQudmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChjaGFydCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFydFVwZGF0ZShjaGFydCwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihjaGFydFVwZGF0ZUVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXRjaCgoKT0+cHJvcHMuY2hhcnREYXRhLCAobmV3VmFsdWUsIG9sZFZhbHVlKT0+Y2hhcnREYXRhSGFuZGxlcihuZXdWYWx1ZSwgb2xkVmFsdWUpLCB7XG4gICAgICAgICAgICAgICAgZGVlcDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3YXRjaCgoKT0+cHJvcHMuY2hhcnRPcHRpb25zLCAobmV3VmFsdWUpPT5jaGFydE9wdGlvbnNIYW5kbGVyKG5ld1ZhbHVlKSwge1xuICAgICAgICAgICAgICAgIGRlZXA6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb25Nb3VudGVkKCgpPT57XG4gICAgICAgICAgICAgICAgaWYgKFwiZGF0YXNldHNcIiBpbiBwcm9wcy5jaGFydERhdGEgJiYgcHJvcHMuY2hhcnREYXRhLmRhdGFzZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnRDcmVhdGUocmVuZGVyQ2hhcnQsIHByb3BzLmNoYXJ0RGF0YSwgcHJvcHMuY2hhcnRPcHRpb25zLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9uQmVmb3JlVW5tb3VudCgoKT0+e1xuICAgICAgICAgICAgICAgIGlmIChfY2hhcnQudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnREZXN0cm95KHRvUmF3KF9jaGFydC52YWx1ZSksIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGV4dC5leHBvc2Uoe1xuICAgICAgICAgICAgICAgIGNoYXJ0OiBfY2hhcnQsXG4gICAgICAgICAgICAgICAgdXBkYXRlQ2hhcnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuICgpPT5oKFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHByb3BzLnN0eWxlcyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHByb3BzLmNzc0NsYXNzZXNcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIGgoXCJjYW52YXNcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHByb3BzLmNoYXJ0SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogcHJvcHMud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHByb3BzLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogY2FudmFzRWxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbmNvbnN0IEJhciA9IC8qICNfX1BVUkVfXyAqLyBnZW5lcmF0ZUNoYXJ0KFwiYmFyLWNoYXJ0XCIsIFwiYmFyXCIsIEJhckNvbnRyb2xsZXIpO1xuY29uc3QgRG91Z2hudXQgPSAvKiAjX19QVVJFX18gKi8gZ2VuZXJhdGVDaGFydChcImRvdWdobnV0LWNoYXJ0XCIsIFwiZG91Z2hudXRcIiwgRG91Z2hudXRDb250cm9sbGVyKTtcbmNvbnN0IExpbmUgPSAvKiAjX19QVVJFX18gKi8gZ2VuZXJhdGVDaGFydChcImxpbmUtY2hhcnRcIiwgXCJsaW5lXCIsIExpbmVDb250cm9sbGVyKTtcbmNvbnN0IFBpZSA9IC8qICNfX1BVUkVfXyAqLyBnZW5lcmF0ZUNoYXJ0KFwicGllLWNoYXJ0XCIsIFwicGllXCIsIFBpZUNvbnRyb2xsZXIpO1xuY29uc3QgUG9sYXJBcmVhID0gLyogI19fUFVSRV9fICovIGdlbmVyYXRlQ2hhcnQoXCJwb2xhci1jaGFydFwiLCBcInBvbGFyQXJlYVwiLCBQb2xhckFyZWFDb250cm9sbGVyKTtcbmNvbnN0IFJhZGFyID0gLyogI19fUFVSRV9fICovIGdlbmVyYXRlQ2hhcnQoXCJyYWRhci1jaGFydFwiLCBcInJhZGFyXCIsIFJhZGFyQ29udHJvbGxlcik7XG5jb25zdCBCdWJibGUgPSAvKiAjX19QVVJFX18gKi8gZ2VuZXJhdGVDaGFydChcImJ1YmJsZS1jaGFydFwiLCBcImJ1YmJsZVwiLCBCdWJibGVDb250cm9sbGVyKTtcbmNvbnN0IFNjYXR0ZXIgPSAvKiAjX19QVVJFX18gKi8gZ2VuZXJhdGVDaGFydChcInNjYXR0ZXItY2hhcnRcIiwgXCJzY2F0dGVyXCIsIFNjYXR0ZXJDb250cm9sbGVyKTtcblxuZXhwb3J0IHsgQmFyLCBCdWJibGUsIERvdWdobnV0LCBMaW5lLCBQaWUsIFBvbGFyQXJlYSwgUmFkYXIsIFNjYXR0ZXIsIGdlbmVyYXRlQ2hhcnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBydW50aW1lIGhlbHBlciBmb3Igc2V0dGluZyBwcm9wZXJ0aWVzIG9uIGNvbXBvbmVudHNcbi8vIGluIGEgdHJlZS1zaGFrYWJsZSB3YXlcbmV4cG9ydHMuZGVmYXVsdCA9IChzZmMsIHByb3BzKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0ID0gc2ZjLl9fdmNjT3B0cyB8fCBzZmM7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIHByb3BzKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2JhNWJkOTBcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwdnVlL3dwLWNvbnRlbnQvcGx1Z2lucy93cGVtYWlsZXIvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcInNyYy9BcHAudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjdiYTViZDkwXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnN2JhNWJkOTAnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCc3YmE1YmQ5MCcsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03YmE1YmQ5MFwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCc3YmE1YmQ5MCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vQmFzZUFsZXJ0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02ZjU3NDNkMCZzY29wZWQ9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0Jhc2VBbGVydC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQmFzZUFsZXJ0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vQmFzZUFsZXJ0LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTZmNTc0M2QwJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwZW1haWxlci9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTZmNTc0M2QwXCJdLFsnX19maWxlJyxcInNyYy9jb21wb25lbnRzL2FsZXJ0L0Jhc2VBbGVydC52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiNmY1NzQzZDBcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCc2ZjU3NDNkMCcsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzZmNTc0M2QwJywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9CYXNlQWxlcnQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTZmNTc0M2QwJnNjb3BlZD10cnVlXCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJzZmNTc0M2QwJywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9CYXNlQnV0dG9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD04OGUyMjZjMCZzY29wZWQ9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0Jhc2VCdXR0b24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0Jhc2VCdXR0b24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IFwiLi9CYXNlQnV0dG9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTg4ZTIyNmMwJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwZW1haWxlci9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTg4ZTIyNmMwXCJdLFsnX19maWxlJyxcInNyYy9jb21wb25lbnRzL2J1dHRvbi9CYXNlQnV0dG9uLnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCI4OGUyMjZjMFwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzg4ZTIyNmMwJywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnODhlMjI2YzAnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0Jhc2VCdXR0b24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTg4ZTIyNmMwJnNjb3BlZD10cnVlXCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJzg4ZTIyNmMwJywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9CYXNlQ2FyZC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MGRiMGM1ZTAmc2NvcGVkPXRydWVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9CYXNlQ2FyZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQmFzZUNhcmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IFwiLi9CYXNlQ2FyZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0wZGIwYzVlMCZsYW5nPXNjc3Mmc2NvcGVkPXRydWVcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwdnVlL3dwLWNvbnRlbnQvcGx1Z2lucy93cGVtYWlsZXIvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19zY29wZUlkJyxcImRhdGEtdi0wZGIwYzVlMFwiXSxbJ19fZmlsZScsXCJzcmMvY29tcG9uZW50cy9jYXJkL0Jhc2VDYXJkLnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCIwZGIwYzVlMFwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzBkYjBjNWUwJywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnMGRiMGM1ZTAnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0Jhc2VDYXJkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wZGIwYzVlMCZzY29wZWQ9dHJ1ZVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCcwZGIwYzVlMCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vQmFyQ2hhcnQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTZhMDlmYWNjXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQmFyQ2hhcnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQmFyQ2hhcnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9anNcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwdnVlL3dwLWNvbnRlbnQvcGx1Z2lucy93cGVtYWlsZXIvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcInNyYy9jb21wb25lbnRzL2NoYXJ0L0JhckNoYXJ0LnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCI2YTA5ZmFjY1wiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzZhMDlmYWNjJywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnNmEwOWZhY2MnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0JhckNoYXJ0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02YTA5ZmFjY1wiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCc2YTA5ZmFjYycsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vQmFyQ2hhcnRMb2FkaW5nLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01YWUxZGEwMCZzY29wZWQ9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0JhckNoYXJ0TG9hZGluZy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQmFyQ2hhcnRMb2FkaW5nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vQmFyQ2hhcnRMb2FkaW5nLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTVhZTFkYTAwJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwZW1haWxlci9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTVhZTFkYTAwXCJdLFsnX19maWxlJyxcInNyYy9jb21wb25lbnRzL2NoYXJ0L0JhckNoYXJ0TG9hZGluZy52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiNWFlMWRhMDBcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCc1YWUxZGEwMCcsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzVhZTFkYTAwJywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9CYXJDaGFydExvYWRpbmcudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTVhZTFkYTAwJnNjb3BlZD10cnVlXCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJzVhZTFkYTAwJywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9CYXNlSW5wdXQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWQwOTM4OTE4JnNjb3BlZD10cnVlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQmFzZUlucHV0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9CYXNlSW5wdXQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IFwiLi9CYXNlSW5wdXQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ZDA5Mzg5MTgmbGFuZz1zY3NzJnNjb3BlZD10cnVlXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiL0FwcGxpY2F0aW9ucy9NQU1QL2h0ZG9jcy93cHZ1ZS93cC1jb250ZW50L3BsdWdpbnMvd3BlbWFpbGVyL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ3JlbmRlcicscmVuZGVyXSxbJ19fc2NvcGVJZCcsXCJkYXRhLXYtZDA5Mzg5MThcIl0sWydfX2ZpbGUnLFwic3JjL2NvbXBvbmVudHMvaW5wdXQvQmFzZUlucHV0LnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCJkMDkzODkxOFwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJ2QwOTM4OTE4JywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnZDA5Mzg5MTgnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0Jhc2VJbnB1dC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZDA5Mzg5MTgmc2NvcGVkPXRydWVcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignZDA5Mzg5MTgnLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL0lucHV0U2VjdGlvbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YTZhNTc3ZTAmc2NvcGVkPXRydWVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9JbnB1dFNlY3Rpb24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0lucHV0U2VjdGlvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL0lucHV0U2VjdGlvbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1hNmE1NzdlMCZsYW5nPXNjc3Mmc2NvcGVkPXRydWVcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwdnVlL3dwLWNvbnRlbnQvcGx1Z2lucy93cGVtYWlsZXIvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19zY29wZUlkJyxcImRhdGEtdi1hNmE1NzdlMFwiXSxbJ19fZmlsZScsXCJzcmMvY29tcG9uZW50cy9pbnB1dC9JbnB1dFNlY3Rpb24udnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcImE2YTU3N2UwXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnYTZhNTc3ZTAnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCdhNmE1NzdlMCcsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vSW5wdXRTZWN0aW9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1hNmE1NzdlMCZzY29wZWQ9dHJ1ZVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCdhNmE1NzdlMCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vQmFzZVBhZ2luYXRpb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNmYTdiMGEwJnNjb3BlZD10cnVlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQmFzZVBhZ2luYXRpb24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQmFzZVBhZ2luYXRpb24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL0Jhc2VQYWdpbmF0aW9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTNmYTdiMGEwJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwZW1haWxlci9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTNmYTdiMGEwXCJdLFsnX19maWxlJyxcInNyYy9jb21wb25lbnRzL3BhZ2luYXRpb24vQmFzZVBhZ2luYXRpb24udnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjNmYTdiMGEwXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnM2ZhN2IwYTAnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCczZmE3YjBhMCcsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vQmFzZVBhZ2luYXRpb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNmYTdiMGEwJnNjb3BlZD10cnVlXCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJzNmYTdiMGEwJywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9QYWdpbmF0aW9uTG9hZGVyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xNjI2ZjM2MiZzY29wZWQ9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1BhZ2luYXRpb25Mb2FkZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL1BhZ2luYXRpb25Mb2FkZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IFwiLi9QYWdpbmF0aW9uTG9hZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTE2MjZmMzYyJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwZW1haWxlci9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTE2MjZmMzYyXCJdLFsnX19maWxlJyxcInNyYy9jb21wb25lbnRzL3BhZ2luYXRpb24vUGFnaW5hdGlvbkxvYWRlci52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiMTYyNmYzNjJcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCcxNjI2ZjM2MicsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzE2MjZmMzYyJywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9QYWdpbmF0aW9uTG9hZGVyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xNjI2ZjM2MiZzY29wZWQ9dHJ1ZVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCcxNjI2ZjM2MicsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vU2V0dGluZ0Zvcm0udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTI3MWIwZjM4JnNjb3BlZD10cnVlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vU2V0dGluZ0Zvcm0udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vU2V0dGluZ0Zvcm0udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL1NldHRpbmdGb3JtLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTI3MWIwZjM4Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwZW1haWxlci9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTI3MWIwZjM4XCJdLFsnX19maWxlJyxcInNyYy9jb21wb25lbnRzL3NldHRpbmdzL1NldHRpbmdGb3JtLnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCIyNzFiMGYzOFwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzI3MWIwZjM4JywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnMjcxYjBmMzgnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1NldHRpbmdGb3JtLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yNzFiMGYzOCZzY29wZWQ9dHJ1ZVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCcyNzFiMGYzOCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vU2V0dGluZ0Zvcm1Mb2FkaW5nLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00YTQzMjVkOFwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1NldHRpbmdGb3JtTG9hZGluZy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vU2V0dGluZ0Zvcm1Mb2FkaW5nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwZW1haWxlci9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX2ZpbGUnLFwic3JjL2NvbXBvbmVudHMvc2V0dGluZ3MvU2V0dGluZ0Zvcm1Mb2FkaW5nLnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCI0YTQzMjVkOFwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzRhNDMyNWQ4JywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnNGE0MzI1ZDgnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1NldHRpbmdGb3JtTG9hZGluZy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NGE0MzI1ZDhcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignNGE0MzI1ZDgnLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL1NrZWxldG9uVGV4dC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MWM2ZDE4NDgmc2NvcGVkPXRydWVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9Ta2VsZXRvblRleHQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL1NrZWxldG9uVGV4dC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL1NrZWxldG9uVGV4dC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0xYzZkMTg0OCZsYW5nPXNjc3Mmc2NvcGVkPXRydWVcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwdnVlL3dwLWNvbnRlbnQvcGx1Z2lucy93cGVtYWlsZXIvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19zY29wZUlkJyxcImRhdGEtdi0xYzZkMTg0OFwiXSxbJ19fZmlsZScsXCJzcmMvY29tcG9uZW50cy9za2VsZXRvbi9Ta2VsZXRvblRleHQudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjFjNmQxODQ4XCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnMWM2ZDE4NDgnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCcxYzZkMTg0OCcsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vU2tlbGV0b25UZXh0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xYzZkMTg0OCZzY29wZWQ9dHJ1ZVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCcxYzZkMTg0OCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vQmFzZVNwaW5uZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY0MjIzNDEyXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQmFzZVNwaW5uZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0Jhc2VTcGlubmVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vQmFzZVNwaW5uZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NjQyMjM0MTImbGFuZz1zY3NzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiL0FwcGxpY2F0aW9ucy9NQU1QL2h0ZG9jcy93cHZ1ZS93cC1jb250ZW50L3BsdWdpbnMvd3BlbWFpbGVyL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ3JlbmRlcicscmVuZGVyXSxbJ19fZmlsZScsXCJzcmMvY29tcG9uZW50cy9zcGlubmVyL0Jhc2VTcGlubmVyLnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCI2NDIyMzQxMlwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzY0MjIzNDEyJywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnNjQyMjM0MTInLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0Jhc2VTcGlubmVyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02NDIyMzQxMlwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCc2NDIyMzQxMicsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vQmFzZVRhYmxlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mYzM2ZWE3YSZzY29wZWQ9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0Jhc2VUYWJsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQmFzZVRhYmxlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vQmFzZVRhYmxlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWZjMzZlYTdhJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwZW1haWxlci9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LWZjMzZlYTdhXCJdLFsnX19maWxlJyxcInNyYy9jb21wb25lbnRzL3RhYmxlcy9CYXNlVGFibGUudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcImZjMzZlYTdhXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnZmMzNmVhN2EnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCdmYzM2ZWE3YScsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vQmFzZVRhYmxlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mYzM2ZWE3YSZzY29wZWQ9dHJ1ZVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCdmYzM2ZWE3YScsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vVGFibGVMb2FkaW5nLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zNDRhYmYzOCZzY29wZWQ9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1RhYmxlTG9hZGluZy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vVGFibGVMb2FkaW5nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vVGFibGVMb2FkaW5nLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTM0NGFiZjM4Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwZW1haWxlci9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTM0NGFiZjM4XCJdLFsnX19maWxlJyxcInNyYy9jb21wb25lbnRzL3RhYmxlcy9UYWJsZUxvYWRpbmcudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjM0NGFiZjM4XCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnMzQ0YWJmMzgnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCczNDRhYmYzOCcsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vVGFibGVMb2FkaW5nLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zNDRhYmYzOCZzY29wZWQ9dHJ1ZVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCczNDRhYmYzOCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vUGFnZVRhYnMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY5ZmY4MTQ0JnNjb3BlZD10cnVlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vUGFnZVRhYnMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vUGFnZVRhYnMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL1BhZ2VUYWJzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTY5ZmY4MTQ0Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwZW1haWxlci9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTY5ZmY4MTQ0XCJdLFsnX19maWxlJyxcInNyYy9jb21wb25lbnRzL3RhYnMvUGFnZVRhYnMudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjY5ZmY4MTQ0XCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnNjlmZjgxNDQnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCc2OWZmODE0NCcsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vUGFnZVRhYnMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY5ZmY4MTQ0JnNjb3BlZD10cnVlXCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJzY5ZmY4MTQ0JywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9HcmFwaFBhZ2UudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNjNmEwODg5JnNjb3BlZD10cnVlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vR3JhcGhQYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0dyYXBoUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vR3JhcGhQYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTNjNmEwODg5Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwZW1haWxlci9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTNjNmEwODg5XCJdLFsnX19maWxlJyxcInNyYy9wYWdlcy9HcmFwaFBhZ2UudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjNjNmEwODg5XCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnM2M2YTA4ODknLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCczYzZhMDg4OScsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vR3JhcGhQYWdlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zYzZhMDg4OSZzY29wZWQ9dHJ1ZVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCczYzZhMDg4OScsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vTGlzdFBhZ2UudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTBlN2E5YjFlJnNjb3BlZD10cnVlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vTGlzdFBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vTGlzdFBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL0xpc3RQYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTBlN2E5YjFlJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9BcHBsaWNhdGlvbnMvTUFNUC9odGRvY3Mvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3dwZW1haWxlci9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTBlN2E5YjFlXCJdLFsnX19maWxlJyxcInNyYy9wYWdlcy9MaXN0UGFnZS52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiMGU3YTliMWVcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCcwZTdhOWIxZScsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzBlN2E5YjFlJywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9MaXN0UGFnZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MGU3YTliMWUmc2NvcGVkPXRydWVcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignMGU3YTliMWUnLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL1NldHRpbmdQYWdlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00MTBiMjY4YlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1NldHRpbmdQYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9TZXR0aW5nUGFnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvQXBwbGljYXRpb25zL01BTVAvaHRkb2NzL3dwdnVlL3dwLWNvbnRlbnQvcGx1Z2lucy93cGVtYWlsZXIvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcInNyYy9wYWdlcy9TZXR0aW5nUGFnZS52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiNDEwYjI2OGJcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCc0MTBiMjY4YicsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzQxMGIyNjhiJywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9TZXR0aW5nUGFnZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NDEwYjI2OGJcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignNDEwYjI2OGInLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IGluaXRDdXN0b21Gb3JtYXR0ZXIsIHdhcm4gfSBmcm9tICdAdnVlL3J1bnRpbWUtZG9tJztcbmV4cG9ydCAqIGZyb20gJ0B2dWUvcnVudGltZS1kb20nO1xuXG5mdW5jdGlvbiBpbml0RGV2KCkge1xuICAgIHtcbiAgICAgICAgaW5pdEN1c3RvbUZvcm1hdHRlcigpO1xuICAgIH1cbn1cblxuLy8gVGhpcyBlbnRyeSBleHBvcnRzIHRoZSBydW50aW1lIG9ubHksIGFuZCBpcyBidWlsdCBhc1xuaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGluaXREZXYoKTtcbn1cbmNvbnN0IGNvbXBpbGUgPSAoKSA9PiB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuKGBSdW50aW1lIGNvbXBpbGF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBidWlsZCBvZiBWdWUuYCArXG4gICAgICAgICAgICAoYCBDb25maWd1cmUgeW91ciBidW5kbGVyIHRvIGFsaWFzIFwidnVlXCIgdG8gXCJ2dWUvZGlzdC92dWUuZXNtLWJ1bmRsZXIuanNcIi5gXG4gICAgICAgICAgICAgICAgKSAvKiBzaG91bGQgbm90IGhhcHBlbiAqLyk7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgY29tcGlsZSB9O1xuIiwiLyohXG4gKiB2dWV4IHY0LjAuMlxuICogKGMpIDIwMjEgRXZhbiBZb3VcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgeyBpbmplY3QsIHJlYWN0aXZlLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBzZXR1cERldnRvb2xzUGx1Z2luIH0gZnJvbSAnQHZ1ZS9kZXZ0b29scy1hcGknO1xuXG52YXIgc3RvcmVLZXkgPSAnc3RvcmUnO1xuXG5mdW5jdGlvbiB1c2VTdG9yZSAoa2V5KSB7XG4gIGlmICgga2V5ID09PSB2b2lkIDAgKSBrZXkgPSBudWxsO1xuXG4gIHJldHVybiBpbmplY3Qoa2V5ICE9PSBudWxsID8ga2V5IDogc3RvcmVLZXkpXG59XG5cbi8qKlxuICogR2V0IHRoZSBmaXJzdCBpdGVtIHRoYXQgcGFzcyB0aGUgdGVzdFxuICogYnkgc2Vjb25kIGFyZ3VtZW50IGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gbGlzdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZlxuICogQHJldHVybiB7Kn1cbiAqL1xuZnVuY3Rpb24gZmluZCAobGlzdCwgZikge1xuICByZXR1cm4gbGlzdC5maWx0ZXIoZilbMF1cbn1cblxuLyoqXG4gKiBEZWVwIGNvcHkgdGhlIGdpdmVuIG9iamVjdCBjb25zaWRlcmluZyBjaXJjdWxhciBzdHJ1Y3R1cmUuXG4gKiBUaGlzIGZ1bmN0aW9uIGNhY2hlcyBhbGwgbmVzdGVkIG9iamVjdHMgYW5kIGl0cyBjb3BpZXMuXG4gKiBJZiBpdCBkZXRlY3RzIGNpcmN1bGFyIHN0cnVjdHVyZSwgdXNlIGNhY2hlZCBjb3B5IHRvIGF2b2lkIGluZmluaXRlIGxvb3AuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gY2FjaGVcbiAqIEByZXR1cm4geyp9XG4gKi9cbmZ1bmN0aW9uIGRlZXBDb3B5IChvYmosIGNhY2hlKSB7XG4gIGlmICggY2FjaGUgPT09IHZvaWQgMCApIGNhY2hlID0gW107XG5cbiAgLy8ganVzdCByZXR1cm4gaWYgb2JqIGlzIGltbXV0YWJsZSB2YWx1ZVxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9ialxuICB9XG5cbiAgLy8gaWYgb2JqIGlzIGhpdCwgaXQgaXMgaW4gY2lyY3VsYXIgc3RydWN0dXJlXG4gIHZhciBoaXQgPSBmaW5kKGNhY2hlLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5vcmlnaW5hbCA9PT0gb2JqOyB9KTtcbiAgaWYgKGhpdCkge1xuICAgIHJldHVybiBoaXQuY29weVxuICB9XG5cbiAgdmFyIGNvcHkgPSBBcnJheS5pc0FycmF5KG9iaikgPyBbXSA6IHt9O1xuICAvLyBwdXQgdGhlIGNvcHkgaW50byBjYWNoZSBhdCBmaXJzdFxuICAvLyBiZWNhdXNlIHdlIHdhbnQgdG8gcmVmZXIgaXQgaW4gcmVjdXJzaXZlIGRlZXBDb3B5XG4gIGNhY2hlLnB1c2goe1xuICAgIG9yaWdpbmFsOiBvYmosXG4gICAgY29weTogY29weVxuICB9KTtcblxuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGNvcHlba2V5XSA9IGRlZXBDb3B5KG9ialtrZXldLCBjYWNoZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb3B5XG59XG5cbi8qKlxuICogZm9yRWFjaCBmb3Igb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hWYWx1ZSAob2JqLCBmbikge1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZm4ob2JqW2tleV0sIGtleSk7IH0pO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAmJiB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbidcbn1cblxuZnVuY3Rpb24gYXNzZXJ0IChjb25kaXRpb24sIG1zZykge1xuICBpZiAoIWNvbmRpdGlvbikgeyB0aHJvdyBuZXcgRXJyb3IoKFwiW3Z1ZXhdIFwiICsgbXNnKSkgfVxufVxuXG5mdW5jdGlvbiBwYXJ0aWFsIChmbiwgYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuKGFyZylcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmljU3Vic2NyaWJlIChmbiwgc3Vicywgb3B0aW9ucykge1xuICBpZiAoc3Vicy5pbmRleE9mKGZuKSA8IDApIHtcbiAgICBvcHRpb25zICYmIG9wdGlvbnMucHJlcGVuZFxuICAgICAgPyBzdWJzLnVuc2hpZnQoZm4pXG4gICAgICA6IHN1YnMucHVzaChmbik7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IHN1YnMuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkge1xuICAgICAgc3Vicy5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RvcmUgKHN0b3JlLCBob3QpIHtcbiAgc3RvcmUuX2FjdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX3dyYXBwZWRHZXR0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc3RhdGUgPSBzdG9yZS5zdGF0ZTtcbiAgLy8gaW5pdCBhbGwgbW9kdWxlc1xuICBpbnN0YWxsTW9kdWxlKHN0b3JlLCBzdGF0ZSwgW10sIHN0b3JlLl9tb2R1bGVzLnJvb3QsIHRydWUpO1xuICAvLyByZXNldCBzdGF0ZVxuICByZXNldFN0b3JlU3RhdGUoc3RvcmUsIHN0YXRlLCBob3QpO1xufVxuXG5mdW5jdGlvbiByZXNldFN0b3JlU3RhdGUgKHN0b3JlLCBzdGF0ZSwgaG90KSB7XG4gIHZhciBvbGRTdGF0ZSA9IHN0b3JlLl9zdGF0ZTtcblxuICAvLyBiaW5kIHN0b3JlIHB1YmxpYyBnZXR0ZXJzXG4gIHN0b3JlLmdldHRlcnMgPSB7fTtcbiAgLy8gcmVzZXQgbG9jYWwgZ2V0dGVycyBjYWNoZVxuICBzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHdyYXBwZWRHZXR0ZXJzID0gc3RvcmUuX3dyYXBwZWRHZXR0ZXJzO1xuICB2YXIgY29tcHV0ZWRPYmogPSB7fTtcbiAgZm9yRWFjaFZhbHVlKHdyYXBwZWRHZXR0ZXJzLCBmdW5jdGlvbiAoZm4sIGtleSkge1xuICAgIC8vIHVzZSBjb21wdXRlZCB0byBsZXZlcmFnZSBpdHMgbGF6eS1jYWNoaW5nIG1lY2hhbmlzbVxuICAgIC8vIGRpcmVjdCBpbmxpbmUgZnVuY3Rpb24gdXNlIHdpbGwgbGVhZCB0byBjbG9zdXJlIHByZXNlcnZpbmcgb2xkU3RhdGUuXG4gICAgLy8gdXNpbmcgcGFydGlhbCB0byByZXR1cm4gZnVuY3Rpb24gd2l0aCBvbmx5IGFyZ3VtZW50cyBwcmVzZXJ2ZWQgaW4gY2xvc3VyZSBlbnZpcm9ubWVudC5cbiAgICBjb21wdXRlZE9ialtrZXldID0gcGFydGlhbChmbiwgc3RvcmUpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdG9yZS5nZXR0ZXJzLCBrZXksIHtcbiAgICAgIC8vIFRPRE86IHVzZSBgY29tcHV0ZWRgIHdoZW4gaXQncyBwb3NzaWJsZS4gYXQgdGhlIG1vbWVudCB3ZSBjYW4ndCBkdWUgdG9cbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L3B1bGwvMTg4M1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb21wdXRlZE9ialtrZXldKCk7IH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlIC8vIGZvciBsb2NhbCBnZXR0ZXJzXG4gICAgfSk7XG4gIH0pO1xuXG4gIHN0b3JlLl9zdGF0ZSA9IHJlYWN0aXZlKHtcbiAgICBkYXRhOiBzdGF0ZVxuICB9KTtcblxuICAvLyBlbmFibGUgc3RyaWN0IG1vZGUgZm9yIG5ldyBzdGF0ZVxuICBpZiAoc3RvcmUuc3RyaWN0KSB7XG4gICAgZW5hYmxlU3RyaWN0TW9kZShzdG9yZSk7XG4gIH1cblxuICBpZiAob2xkU3RhdGUpIHtcbiAgICBpZiAoaG90KSB7XG4gICAgICAvLyBkaXNwYXRjaCBjaGFuZ2VzIGluIGFsbCBzdWJzY3JpYmVkIHdhdGNoZXJzXG4gICAgICAvLyB0byBmb3JjZSBnZXR0ZXIgcmUtZXZhbHVhdGlvbiBmb3IgaG90IHJlbG9hZGluZy5cbiAgICAgIHN0b3JlLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2xkU3RhdGUuZGF0YSA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zdGFsbE1vZHVsZSAoc3RvcmUsIHJvb3RTdGF0ZSwgcGF0aCwgbW9kdWxlLCBob3QpIHtcbiAgdmFyIGlzUm9vdCA9ICFwYXRoLmxlbmd0aDtcbiAgdmFyIG5hbWVzcGFjZSA9IHN0b3JlLl9tb2R1bGVzLmdldE5hbWVzcGFjZShwYXRoKTtcblxuICAvLyByZWdpc3RlciBpbiBuYW1lc3BhY2UgbWFwXG4gIGlmIChtb2R1bGUubmFtZXNwYWNlZCkge1xuICAgIGlmIChzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdICYmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gZHVwbGljYXRlIG5hbWVzcGFjZSBcIiArIG5hbWVzcGFjZSArIFwiIGZvciB0aGUgbmFtZXNwYWNlZCBtb2R1bGUgXCIgKyAocGF0aC5qb2luKCcvJykpKSk7XG4gICAgfVxuICAgIHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW25hbWVzcGFjZV0gPSBtb2R1bGU7XG4gIH1cblxuICAvLyBzZXQgc3RhdGVcbiAgaWYgKCFpc1Jvb3QgJiYgIWhvdCkge1xuICAgIHZhciBwYXJlbnRTdGF0ZSA9IGdldE5lc3RlZFN0YXRlKHJvb3RTdGF0ZSwgcGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIHZhciBtb2R1bGVOYW1lID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgIHN0b3JlLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgaWYgKG1vZHVsZU5hbWUgaW4gcGFyZW50U3RhdGUpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAoXCJbdnVleF0gc3RhdGUgZmllbGQgXFxcIlwiICsgbW9kdWxlTmFtZSArIFwiXFxcIiB3YXMgb3ZlcnJpZGRlbiBieSBhIG1vZHVsZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXQgXFxcIlwiICsgKHBhdGguam9pbignLicpKSArIFwiXFxcIlwiKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhcmVudFN0YXRlW21vZHVsZU5hbWVdID0gbW9kdWxlLnN0YXRlO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGxvY2FsID0gbW9kdWxlLmNvbnRleHQgPSBtYWtlTG9jYWxDb250ZXh0KHN0b3JlLCBuYW1lc3BhY2UsIHBhdGgpO1xuXG4gIG1vZHVsZS5mb3JFYWNoTXV0YXRpb24oZnVuY3Rpb24gKG11dGF0aW9uLCBrZXkpIHtcbiAgICB2YXIgbmFtZXNwYWNlZFR5cGUgPSBuYW1lc3BhY2UgKyBrZXk7XG4gICAgcmVnaXN0ZXJNdXRhdGlvbihzdG9yZSwgbmFtZXNwYWNlZFR5cGUsIG11dGF0aW9uLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoQWN0aW9uKGZ1bmN0aW9uIChhY3Rpb24sIGtleSkge1xuICAgIHZhciB0eXBlID0gYWN0aW9uLnJvb3QgPyBrZXkgOiBuYW1lc3BhY2UgKyBrZXk7XG4gICAgdmFyIGhhbmRsZXIgPSBhY3Rpb24uaGFuZGxlciB8fCBhY3Rpb247XG4gICAgcmVnaXN0ZXJBY3Rpb24oc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hHZXR0ZXIoZnVuY3Rpb24gKGdldHRlciwga2V5KSB7XG4gICAgdmFyIG5hbWVzcGFjZWRUeXBlID0gbmFtZXNwYWNlICsga2V5O1xuICAgIHJlZ2lzdGVyR2V0dGVyKHN0b3JlLCBuYW1lc3BhY2VkVHlwZSwgZ2V0dGVyLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNoaWxkLCBrZXkpIHtcbiAgICBpbnN0YWxsTW9kdWxlKHN0b3JlLCByb290U3RhdGUsIHBhdGguY29uY2F0KGtleSksIGNoaWxkLCBob3QpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBtYWtlIGxvY2FsaXplZCBkaXNwYXRjaCwgY29tbWl0LCBnZXR0ZXJzIGFuZCBzdGF0ZVxuICogaWYgdGhlcmUgaXMgbm8gbmFtZXNwYWNlLCBqdXN0IHVzZSByb290IG9uZXNcbiAqL1xuZnVuY3Rpb24gbWFrZUxvY2FsQ29udGV4dCAoc3RvcmUsIG5hbWVzcGFjZSwgcGF0aCkge1xuICB2YXIgbm9OYW1lc3BhY2UgPSBuYW1lc3BhY2UgPT09ICcnO1xuXG4gIHZhciBsb2NhbCA9IHtcbiAgICBkaXNwYXRjaDogbm9OYW1lc3BhY2UgPyBzdG9yZS5kaXNwYXRjaCA6IGZ1bmN0aW9uIChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgYXJncyA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgICB2YXIgcGF5bG9hZCA9IGFyZ3MucGF5bG9hZDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJncy5vcHRpb25zO1xuICAgICAgdmFyIHR5cGUgPSBhcmdzLnR5cGU7XG5cbiAgICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yb290KSB7XG4gICAgICAgIHR5cGUgPSBuYW1lc3BhY2UgKyB0eXBlO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFzdG9yZS5fYWN0aW9uc1t0eXBlXSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbG9jYWwgYWN0aW9uIHR5cGU6IFwiICsgKGFyZ3MudHlwZSkgKyBcIiwgZ2xvYmFsIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaCh0eXBlLCBwYXlsb2FkKVxuICAgIH0sXG5cbiAgICBjb21taXQ6IG5vTmFtZXNwYWNlID8gc3RvcmUuY29tbWl0IDogZnVuY3Rpb24gKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBhcmdzID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKTtcbiAgICAgIHZhciBwYXlsb2FkID0gYXJncy5wYXlsb2FkO1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmdzLm9wdGlvbnM7XG4gICAgICB2YXIgdHlwZSA9IGFyZ3MudHlwZTtcblxuICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnJvb3QpIHtcbiAgICAgICAgdHlwZSA9IG5hbWVzcGFjZSArIHR5cGU7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXN0b3JlLl9tdXRhdGlvbnNbdHlwZV0pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGxvY2FsIG11dGF0aW9uIHR5cGU6IFwiICsgKGFyZ3MudHlwZSkgKyBcIiwgZ2xvYmFsIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0b3JlLmNvbW1pdCh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gZ2V0dGVycyBhbmQgc3RhdGUgb2JqZWN0IG11c3QgYmUgZ290dGVuIGxhemlseVxuICAvLyBiZWNhdXNlIHRoZXkgd2lsbCBiZSBjaGFuZ2VkIGJ5IHN0YXRlIHVwZGF0ZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhsb2NhbCwge1xuICAgIGdldHRlcnM6IHtcbiAgICAgIGdldDogbm9OYW1lc3BhY2VcbiAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFrZUxvY2FsR2V0dGVycyhzdG9yZSwgbmFtZXNwYWNlKTsgfVxuICAgIH0sXG4gICAgc3RhdGU6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0TmVzdGVkU3RhdGUoc3RvcmUuc3RhdGUsIHBhdGgpOyB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbG9jYWxcbn1cblxuZnVuY3Rpb24gbWFrZUxvY2FsR2V0dGVycyAoc3RvcmUsIG5hbWVzcGFjZSkge1xuICBpZiAoIXN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGVbbmFtZXNwYWNlXSkge1xuICAgIHZhciBnZXR0ZXJzUHJveHkgPSB7fTtcbiAgICB2YXIgc3BsaXRQb3MgPSBuYW1lc3BhY2UubGVuZ3RoO1xuICAgIE9iamVjdC5rZXlzKHN0b3JlLmdldHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIC8vIHNraXAgaWYgdGhlIHRhcmdldCBnZXR0ZXIgaXMgbm90IG1hdGNoIHRoaXMgbmFtZXNwYWNlXG4gICAgICBpZiAodHlwZS5zbGljZSgwLCBzcGxpdFBvcykgIT09IG5hbWVzcGFjZSkgeyByZXR1cm4gfVxuXG4gICAgICAvLyBleHRyYWN0IGxvY2FsIGdldHRlciB0eXBlXG4gICAgICB2YXIgbG9jYWxUeXBlID0gdHlwZS5zbGljZShzcGxpdFBvcyk7XG5cbiAgICAgIC8vIEFkZCBhIHBvcnQgdG8gdGhlIGdldHRlcnMgcHJveHkuXG4gICAgICAvLyBEZWZpbmUgYXMgZ2V0dGVyIHByb3BlcnR5IGJlY2F1c2VcbiAgICAgIC8vIHdlIGRvIG5vdCB3YW50IHRvIGV2YWx1YXRlIHRoZSBnZXR0ZXJzIGluIHRoaXMgdGltZS5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnZXR0ZXJzUHJveHksIGxvY2FsVHlwZSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLmdldHRlcnNbdHlwZV07IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGVbbmFtZXNwYWNlXSA9IGdldHRlcnNQcm94eTtcbiAgfVxuXG4gIHJldHVybiBzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlW25hbWVzcGFjZV1cbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJNdXRhdGlvbiAoc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKSB7XG4gIHZhciBlbnRyeSA9IHN0b3JlLl9tdXRhdGlvbnNbdHlwZV0gfHwgKHN0b3JlLl9tdXRhdGlvbnNbdHlwZV0gPSBbXSk7XG4gIGVudHJ5LnB1c2goZnVuY3Rpb24gd3JhcHBlZE11dGF0aW9uSGFuZGxlciAocGF5bG9hZCkge1xuICAgIGhhbmRsZXIuY2FsbChzdG9yZSwgbG9jYWwuc3RhdGUsIHBheWxvYWQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJBY3Rpb24gKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCkge1xuICB2YXIgZW50cnkgPSBzdG9yZS5fYWN0aW9uc1t0eXBlXSB8fCAoc3RvcmUuX2FjdGlvbnNbdHlwZV0gPSBbXSk7XG4gIGVudHJ5LnB1c2goZnVuY3Rpb24gd3JhcHBlZEFjdGlvbkhhbmRsZXIgKHBheWxvYWQpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5jYWxsKHN0b3JlLCB7XG4gICAgICBkaXNwYXRjaDogbG9jYWwuZGlzcGF0Y2gsXG4gICAgICBjb21taXQ6IGxvY2FsLmNvbW1pdCxcbiAgICAgIGdldHRlcnM6IGxvY2FsLmdldHRlcnMsXG4gICAgICBzdGF0ZTogbG9jYWwuc3RhdGUsXG4gICAgICByb290R2V0dGVyczogc3RvcmUuZ2V0dGVycyxcbiAgICAgIHJvb3RTdGF0ZTogc3RvcmUuc3RhdGVcbiAgICB9LCBwYXlsb2FkKTtcbiAgICBpZiAoIWlzUHJvbWlzZShyZXMpKSB7XG4gICAgICByZXMgPSBQcm9taXNlLnJlc29sdmUocmVzKTtcbiAgICB9XG4gICAgaWYgKHN0b3JlLl9kZXZ0b29sSG9vaykge1xuICAgICAgcmV0dXJuIHJlcy5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHN0b3JlLl9kZXZ0b29sSG9vay5lbWl0KCd2dWV4OmVycm9yJywgZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJHZXR0ZXIgKHN0b3JlLCB0eXBlLCByYXdHZXR0ZXIsIGxvY2FsKSB7XG4gIGlmIChzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0pIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSBkdXBsaWNhdGUgZ2V0dGVyIGtleTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIHN0b3JlLl93cmFwcGVkR2V0dGVyc1t0eXBlXSA9IGZ1bmN0aW9uIHdyYXBwZWRHZXR0ZXIgKHN0b3JlKSB7XG4gICAgcmV0dXJuIHJhd0dldHRlcihcbiAgICAgIGxvY2FsLnN0YXRlLCAvLyBsb2NhbCBzdGF0ZVxuICAgICAgbG9jYWwuZ2V0dGVycywgLy8gbG9jYWwgZ2V0dGVyc1xuICAgICAgc3RvcmUuc3RhdGUsIC8vIHJvb3Qgc3RhdGVcbiAgICAgIHN0b3JlLmdldHRlcnMgLy8gcm9vdCBnZXR0ZXJzXG4gICAgKVxuICB9O1xufVxuXG5mdW5jdGlvbiBlbmFibGVTdHJpY3RNb2RlIChzdG9yZSkge1xuICB3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5fc3RhdGUuZGF0YTsgfSwgZnVuY3Rpb24gKCkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGFzc2VydChzdG9yZS5fY29tbWl0dGluZywgXCJkbyBub3QgbXV0YXRlIHZ1ZXggc3RvcmUgc3RhdGUgb3V0c2lkZSBtdXRhdGlvbiBoYW5kbGVycy5cIik7XG4gICAgfVxuICB9LCB7IGRlZXA6IHRydWUsIGZsdXNoOiAnc3luYycgfSk7XG59XG5cbmZ1bmN0aW9uIGdldE5lc3RlZFN0YXRlIChzdGF0ZSwgcGF0aCkge1xuICByZXR1cm4gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKHN0YXRlLCBrZXkpIHsgcmV0dXJuIHN0YXRlW2tleV07IH0sIHN0YXRlKVxufVxuXG5mdW5jdGlvbiB1bmlmeU9iamVjdFN0eWxlICh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKSB7XG4gIGlmIChpc09iamVjdCh0eXBlKSAmJiB0eXBlLnR5cGUpIHtcbiAgICBvcHRpb25zID0gcGF5bG9hZDtcbiAgICBwYXlsb2FkID0gdHlwZTtcbiAgICB0eXBlID0gdHlwZS50eXBlO1xuICB9XG5cbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGFzc2VydCh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycsIChcImV4cGVjdHMgc3RyaW5nIGFzIHRoZSB0eXBlLCBidXQgZm91bmQgXCIgKyAodHlwZW9mIHR5cGUpICsgXCIuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQsIG9wdGlvbnM6IG9wdGlvbnMgfVxufVxuXG52YXIgTEFCRUxfVlVFWF9CSU5ESU5HUyA9ICd2dWV4IGJpbmRpbmdzJztcbnZhciBNVVRBVElPTlNfTEFZRVJfSUQgPSAndnVleDptdXRhdGlvbnMnO1xudmFyIEFDVElPTlNfTEFZRVJfSUQgPSAndnVleDphY3Rpb25zJztcbnZhciBJTlNQRUNUT1JfSUQgPSAndnVleCc7XG5cbnZhciBhY3Rpb25JZCA9IDA7XG5cbmZ1bmN0aW9uIGFkZERldnRvb2xzIChhcHAsIHN0b3JlKSB7XG4gIHNldHVwRGV2dG9vbHNQbHVnaW4oXG4gICAge1xuICAgICAgaWQ6ICdvcmcudnVlanMudnVleCcsXG4gICAgICBhcHA6IGFwcCxcbiAgICAgIGxhYmVsOiAnVnVleCcsXG4gICAgICBob21lcGFnZTogJ2h0dHBzOi8vbmV4dC52dWV4LnZ1ZWpzLm9yZy8nLFxuICAgICAgbG9nbzogJ2h0dHBzOi8vdnVlanMub3JnL2ltYWdlcy9pY29ucy9mYXZpY29uLTk2eDk2LnBuZycsXG4gICAgICBwYWNrYWdlTmFtZTogJ3Z1ZXgnLFxuICAgICAgY29tcG9uZW50U3RhdGVUeXBlczogW0xBQkVMX1ZVRVhfQklORElOR1NdXG4gICAgfSxcbiAgICBmdW5jdGlvbiAoYXBpKSB7XG4gICAgICBhcGkuYWRkVGltZWxpbmVMYXllcih7XG4gICAgICAgIGlkOiBNVVRBVElPTlNfTEFZRVJfSUQsXG4gICAgICAgIGxhYmVsOiAnVnVleCBNdXRhdGlvbnMnLFxuICAgICAgICBjb2xvcjogQ09MT1JfTElNRV81MDBcbiAgICAgIH0pO1xuXG4gICAgICBhcGkuYWRkVGltZWxpbmVMYXllcih7XG4gICAgICAgIGlkOiBBQ1RJT05TX0xBWUVSX0lELFxuICAgICAgICBsYWJlbDogJ1Z1ZXggQWN0aW9ucycsXG4gICAgICAgIGNvbG9yOiBDT0xPUl9MSU1FXzUwMFxuICAgICAgfSk7XG5cbiAgICAgIGFwaS5hZGRJbnNwZWN0b3Ioe1xuICAgICAgICBpZDogSU5TUEVDVE9SX0lELFxuICAgICAgICBsYWJlbDogJ1Z1ZXgnLFxuICAgICAgICBpY29uOiAnc3RvcmFnZScsXG4gICAgICAgIHRyZWVGaWx0ZXJQbGFjZWhvbGRlcjogJ0ZpbHRlciBzdG9yZXMuLi4nXG4gICAgICB9KTtcblxuICAgICAgYXBpLm9uLmdldEluc3BlY3RvclRyZWUoZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgaWYgKHBheWxvYWQuYXBwID09PSBhcHAgJiYgcGF5bG9hZC5pbnNwZWN0b3JJZCA9PT0gSU5TUEVDVE9SX0lEKSB7XG4gICAgICAgICAgaWYgKHBheWxvYWQuZmlsdGVyKSB7XG4gICAgICAgICAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICAgICAgICAgIGZsYXR0ZW5TdG9yZUZvckluc3BlY3RvclRyZWUobm9kZXMsIHN0b3JlLl9tb2R1bGVzLnJvb3QsIHBheWxvYWQuZmlsdGVyLCAnJyk7XG4gICAgICAgICAgICBwYXlsb2FkLnJvb3ROb2RlcyA9IG5vZGVzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXlsb2FkLnJvb3ROb2RlcyA9IFtcbiAgICAgICAgICAgICAgZm9ybWF0U3RvcmVGb3JJbnNwZWN0b3JUcmVlKHN0b3JlLl9tb2R1bGVzLnJvb3QsICcnKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBhcGkub24uZ2V0SW5zcGVjdG9yU3RhdGUoZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgaWYgKHBheWxvYWQuYXBwID09PSBhcHAgJiYgcGF5bG9hZC5pbnNwZWN0b3JJZCA9PT0gSU5TUEVDVE9SX0lEKSB7XG4gICAgICAgICAgdmFyIG1vZHVsZVBhdGggPSBwYXlsb2FkLm5vZGVJZDtcbiAgICAgICAgICBtYWtlTG9jYWxHZXR0ZXJzKHN0b3JlLCBtb2R1bGVQYXRoKTtcbiAgICAgICAgICBwYXlsb2FkLnN0YXRlID0gZm9ybWF0U3RvcmVGb3JJbnNwZWN0b3JTdGF0ZShcbiAgICAgICAgICAgIGdldFN0b3JlTW9kdWxlKHN0b3JlLl9tb2R1bGVzLCBtb2R1bGVQYXRoKSxcbiAgICAgICAgICAgIG1vZHVsZVBhdGggPT09ICdyb290JyA/IHN0b3JlLmdldHRlcnMgOiBzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlLFxuICAgICAgICAgICAgbW9kdWxlUGF0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBhcGkub24uZWRpdEluc3BlY3RvclN0YXRlKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgIGlmIChwYXlsb2FkLmFwcCA9PT0gYXBwICYmIHBheWxvYWQuaW5zcGVjdG9ySWQgPT09IElOU1BFQ1RPUl9JRCkge1xuICAgICAgICAgIHZhciBtb2R1bGVQYXRoID0gcGF5bG9hZC5ub2RlSWQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBwYXlsb2FkLnBhdGg7XG4gICAgICAgICAgaWYgKG1vZHVsZVBhdGggIT09ICdyb290Jykge1xuICAgICAgICAgICAgcGF0aCA9IG1vZHVsZVBhdGguc3BsaXQoJy8nKS5maWx0ZXIoQm9vbGVhbikuY29uY2F0KCBwYXRoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcGF5bG9hZC5zZXQoc3RvcmUuX3N0YXRlLmRhdGEsIHBhdGgsIHBheWxvYWQuc3RhdGUudmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uIChtdXRhdGlvbiwgc3RhdGUpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB7fTtcblxuICAgICAgICBpZiAobXV0YXRpb24ucGF5bG9hZCkge1xuICAgICAgICAgIGRhdGEucGF5bG9hZCA9IG11dGF0aW9uLnBheWxvYWQ7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhLnN0YXRlID0gc3RhdGU7XG5cbiAgICAgICAgYXBpLm5vdGlmeUNvbXBvbmVudFVwZGF0ZSgpO1xuICAgICAgICBhcGkuc2VuZEluc3BlY3RvclRyZWUoSU5TUEVDVE9SX0lEKTtcbiAgICAgICAgYXBpLnNlbmRJbnNwZWN0b3JTdGF0ZShJTlNQRUNUT1JfSUQpO1xuXG4gICAgICAgIGFwaS5hZGRUaW1lbGluZUV2ZW50KHtcbiAgICAgICAgICBsYXllcklkOiBNVVRBVElPTlNfTEFZRVJfSUQsXG4gICAgICAgICAgZXZlbnQ6IHtcbiAgICAgICAgICAgIHRpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgICB0aXRsZTogbXV0YXRpb24udHlwZSxcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHN0b3JlLnN1YnNjcmliZUFjdGlvbih7XG4gICAgICAgIGJlZm9yZTogZnVuY3Rpb24gKGFjdGlvbiwgc3RhdGUpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgICAgIGlmIChhY3Rpb24ucGF5bG9hZCkge1xuICAgICAgICAgICAgZGF0YS5wYXlsb2FkID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFjdGlvbi5faWQgPSBhY3Rpb25JZCsrO1xuICAgICAgICAgIGFjdGlvbi5fdGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgZGF0YS5zdGF0ZSA9IHN0YXRlO1xuXG4gICAgICAgICAgYXBpLmFkZFRpbWVsaW5lRXZlbnQoe1xuICAgICAgICAgICAgbGF5ZXJJZDogQUNUSU9OU19MQVlFUl9JRCxcbiAgICAgICAgICAgIGV2ZW50OiB7XG4gICAgICAgICAgICAgIHRpbWU6IGFjdGlvbi5fdGltZSxcbiAgICAgICAgICAgICAgdGl0bGU6IGFjdGlvbi50eXBlLFxuICAgICAgICAgICAgICBncm91cElkOiBhY3Rpb24uX2lkLFxuICAgICAgICAgICAgICBzdWJ0aXRsZTogJ3N0YXJ0JyxcbiAgICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhZnRlcjogZnVuY3Rpb24gKGFjdGlvbiwgc3RhdGUpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgICAgIHZhciBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBhY3Rpb24uX3RpbWU7XG4gICAgICAgICAgZGF0YS5kdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIF9jdXN0b206IHtcbiAgICAgICAgICAgICAgdHlwZTogJ2R1cmF0aW9uJyxcbiAgICAgICAgICAgICAgZGlzcGxheTogKGR1cmF0aW9uICsgXCJtc1wiKSxcbiAgICAgICAgICAgICAgdG9vbHRpcDogJ0FjdGlvbiBkdXJhdGlvbicsXG4gICAgICAgICAgICAgIHZhbHVlOiBkdXJhdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKGFjdGlvbi5wYXlsb2FkKSB7XG4gICAgICAgICAgICBkYXRhLnBheWxvYWQgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YS5zdGF0ZSA9IHN0YXRlO1xuXG4gICAgICAgICAgYXBpLmFkZFRpbWVsaW5lRXZlbnQoe1xuICAgICAgICAgICAgbGF5ZXJJZDogQUNUSU9OU19MQVlFUl9JRCxcbiAgICAgICAgICAgIGV2ZW50OiB7XG4gICAgICAgICAgICAgIHRpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgICAgIHRpdGxlOiBhY3Rpb24udHlwZSxcbiAgICAgICAgICAgICAgZ3JvdXBJZDogYWN0aW9uLl9pZCxcbiAgICAgICAgICAgICAgc3VidGl0bGU6ICdlbmQnLFxuICAgICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgKTtcbn1cblxuLy8gZXh0cmFjdGVkIGZyb20gdGFpbHdpbmQgcGFsZXR0ZVxudmFyIENPTE9SX0xJTUVfNTAwID0gMHg4NGNjMTY7XG52YXIgQ09MT1JfREFSSyA9IDB4NjY2NjY2O1xudmFyIENPTE9SX1dISVRFID0gMHhmZmZmZmY7XG5cbnZhciBUQUdfTkFNRVNQQUNFRCA9IHtcbiAgbGFiZWw6ICduYW1lc3BhY2VkJyxcbiAgdGV4dENvbG9yOiBDT0xPUl9XSElURSxcbiAgYmFja2dyb3VuZENvbG9yOiBDT0xPUl9EQVJLXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3ROYW1lRnJvbVBhdGggKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGggJiYgcGF0aCAhPT0gJ3Jvb3QnID8gcGF0aC5zcGxpdCgnLycpLnNsaWNlKC0yLCAtMSlbMF0gOiAnUm9vdCdcbn1cblxuLyoqXG4gKiBAcGFyYW0geyp9IG1vZHVsZVxuICogQHJldHVybiB7aW1wb3J0KCdAdnVlL2RldnRvb2xzLWFwaScpLkN1c3RvbUluc3BlY3Rvck5vZGV9XG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFN0b3JlRm9ySW5zcGVjdG9yVHJlZSAobW9kdWxlLCBwYXRoKSB7XG4gIHJldHVybiB7XG4gICAgaWQ6IHBhdGggfHwgJ3Jvb3QnLFxuICAgIC8vIGFsbCBtb2R1bGVzIGVuZCB3aXRoIGEgYC9gLCB3ZSB3YW50IHRoZSBsYXN0IHNlZ21lbnQgb25seVxuICAgIC8vIGNhcnQvIC0+IGNhcnRcbiAgICAvLyBuZXN0ZWQvY2FydC8gLT4gY2FydFxuICAgIGxhYmVsOiBleHRyYWN0TmFtZUZyb21QYXRoKHBhdGgpLFxuICAgIHRhZ3M6IG1vZHVsZS5uYW1lc3BhY2VkID8gW1RBR19OQU1FU1BBQ0VEXSA6IFtdLFxuICAgIGNoaWxkcmVuOiBPYmplY3Qua2V5cyhtb2R1bGUuX2NoaWxkcmVuKS5tYXAoZnVuY3Rpb24gKG1vZHVsZU5hbWUpIHsgcmV0dXJuIGZvcm1hdFN0b3JlRm9ySW5zcGVjdG9yVHJlZShcbiAgICAgICAgbW9kdWxlLl9jaGlsZHJlblttb2R1bGVOYW1lXSxcbiAgICAgICAgcGF0aCArIG1vZHVsZU5hbWUgKyAnLydcbiAgICAgICk7IH1cbiAgICApXG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnQHZ1ZS9kZXZ0b29scy1hcGknKS5DdXN0b21JbnNwZWN0b3JOb2RlW119IHJlc3VsdFxuICogQHBhcmFtIHsqfSBtb2R1bGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWx0ZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5TdG9yZUZvckluc3BlY3RvclRyZWUgKHJlc3VsdCwgbW9kdWxlLCBmaWx0ZXIsIHBhdGgpIHtcbiAgaWYgKHBhdGguaW5jbHVkZXMoZmlsdGVyKSkge1xuICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgIGlkOiBwYXRoIHx8ICdyb290JyxcbiAgICAgIGxhYmVsOiBwYXRoLmVuZHNXaXRoKCcvJykgPyBwYXRoLnNsaWNlKDAsIHBhdGgubGVuZ3RoIC0gMSkgOiBwYXRoIHx8ICdSb290JyxcbiAgICAgIHRhZ3M6IG1vZHVsZS5uYW1lc3BhY2VkID8gW1RBR19OQU1FU1BBQ0VEXSA6IFtdXG4gICAgfSk7XG4gIH1cbiAgT2JqZWN0LmtleXMobW9kdWxlLl9jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlTmFtZSkge1xuICAgIGZsYXR0ZW5TdG9yZUZvckluc3BlY3RvclRyZWUocmVzdWx0LCBtb2R1bGUuX2NoaWxkcmVuW21vZHVsZU5hbWVdLCBmaWx0ZXIsIHBhdGggKyBtb2R1bGVOYW1lICsgJy8nKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHsqfSBtb2R1bGVcbiAqIEByZXR1cm4ge2ltcG9ydCgnQHZ1ZS9kZXZ0b29scy1hcGknKS5DdXN0b21JbnNwZWN0b3JTdGF0ZX1cbiAqL1xuZnVuY3Rpb24gZm9ybWF0U3RvcmVGb3JJbnNwZWN0b3JTdGF0ZSAobW9kdWxlLCBnZXR0ZXJzLCBwYXRoKSB7XG4gIGdldHRlcnMgPSBwYXRoID09PSAncm9vdCcgPyBnZXR0ZXJzIDogZ2V0dGVyc1twYXRoXTtcbiAgdmFyIGdldHRlcnNLZXlzID0gT2JqZWN0LmtleXMoZ2V0dGVycyk7XG4gIHZhciBzdG9yZVN0YXRlID0ge1xuICAgIHN0YXRlOiBPYmplY3Qua2V5cyhtb2R1bGUuc3RhdGUpLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBtb2R1bGUuc3RhdGVba2V5XVxuICAgIH0pOyB9KVxuICB9O1xuXG4gIGlmIChnZXR0ZXJzS2V5cy5sZW5ndGgpIHtcbiAgICB2YXIgdHJlZSA9IHRyYW5zZm9ybVBhdGhzVG9PYmplY3RUcmVlKGdldHRlcnMpO1xuICAgIHN0b3JlU3RhdGUuZ2V0dGVycyA9IE9iamVjdC5rZXlzKHRyZWUpLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoe1xuICAgICAga2V5OiBrZXkuZW5kc1dpdGgoJy8nKSA/IGV4dHJhY3ROYW1lRnJvbVBhdGgoa2V5KSA6IGtleSxcbiAgICAgIGVkaXRhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBjYW5UaHJvdyhmdW5jdGlvbiAoKSB7IHJldHVybiB0cmVlW2tleV07IH0pXG4gICAgfSk7IH0pO1xuICB9XG5cbiAgcmV0dXJuIHN0b3JlU3RhdGVcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtUGF0aHNUb09iamVjdFRyZWUgKGdldHRlcnMpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBPYmplY3Qua2V5cyhnZXR0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcGF0aCA9IGtleS5zcGxpdCgnLycpO1xuICAgIGlmIChwYXRoLmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciB0YXJnZXQgPSByZXN1bHQ7XG4gICAgICB2YXIgbGVhZktleSA9IHBhdGgucG9wKCk7XG4gICAgICBwYXRoLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgICAgaWYgKCF0YXJnZXRbcF0pIHtcbiAgICAgICAgICB0YXJnZXRbcF0gPSB7XG4gICAgICAgICAgICBfY3VzdG9tOiB7XG4gICAgICAgICAgICAgIHZhbHVlOiB7fSxcbiAgICAgICAgICAgICAgZGlzcGxheTogcCxcbiAgICAgICAgICAgICAgdG9vbHRpcDogJ01vZHVsZScsXG4gICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQgPSB0YXJnZXRbcF0uX2N1c3RvbS52YWx1ZTtcbiAgICAgIH0pO1xuICAgICAgdGFyZ2V0W2xlYWZLZXldID0gY2FuVGhyb3coZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0dGVyc1trZXldOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSBjYW5UaHJvdyhmdW5jdGlvbiAoKSB7IHJldHVybiBnZXR0ZXJzW2tleV07IH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gZ2V0U3RvcmVNb2R1bGUgKG1vZHVsZU1hcCwgcGF0aCkge1xuICB2YXIgbmFtZXMgPSBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKGZ1bmN0aW9uIChuKSB7IHJldHVybiBuOyB9KTtcbiAgcmV0dXJuIG5hbWVzLnJlZHVjZShcbiAgICBmdW5jdGlvbiAobW9kdWxlLCBtb2R1bGVOYW1lLCBpKSB7XG4gICAgICB2YXIgY2hpbGQgPSBtb2R1bGVbbW9kdWxlTmFtZV07XG4gICAgICBpZiAoIWNoaWxkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigoXCJNaXNzaW5nIG1vZHVsZSBcXFwiXCIgKyBtb2R1bGVOYW1lICsgXCJcXFwiIGZvciBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIuXCIpKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGkgPT09IG5hbWVzLmxlbmd0aCAtIDEgPyBjaGlsZCA6IGNoaWxkLl9jaGlsZHJlblxuICAgIH0sXG4gICAgcGF0aCA9PT0gJ3Jvb3QnID8gbW9kdWxlTWFwIDogbW9kdWxlTWFwLnJvb3QuX2NoaWxkcmVuXG4gIClcbn1cblxuZnVuY3Rpb24gY2FuVGhyb3cgKGNiKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGNiKClcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlXG4gIH1cbn1cblxuLy8gQmFzZSBkYXRhIHN0cnVjdCBmb3Igc3RvcmUncyBtb2R1bGUsIHBhY2thZ2Ugd2l0aCBzb21lIGF0dHJpYnV0ZSBhbmQgbWV0aG9kXG52YXIgTW9kdWxlID0gZnVuY3Rpb24gTW9kdWxlIChyYXdNb2R1bGUsIHJ1bnRpbWUpIHtcbiAgdGhpcy5ydW50aW1lID0gcnVudGltZTtcbiAgLy8gU3RvcmUgc29tZSBjaGlsZHJlbiBpdGVtXG4gIHRoaXMuX2NoaWxkcmVuID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gU3RvcmUgdGhlIG9yaWdpbiBtb2R1bGUgb2JqZWN0IHdoaWNoIHBhc3NlZCBieSBwcm9ncmFtbWVyXG4gIHRoaXMuX3Jhd01vZHVsZSA9IHJhd01vZHVsZTtcbiAgdmFyIHJhd1N0YXRlID0gcmF3TW9kdWxlLnN0YXRlO1xuXG4gIC8vIFN0b3JlIHRoZSBvcmlnaW4gbW9kdWxlJ3Mgc3RhdGVcbiAgdGhpcy5zdGF0ZSA9ICh0eXBlb2YgcmF3U3RhdGUgPT09ICdmdW5jdGlvbicgPyByYXdTdGF0ZSgpIDogcmF3U3RhdGUpIHx8IHt9O1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxID0geyBuYW1lc3BhY2VkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQxLm5hbWVzcGFjZWQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISF0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZFxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uIGFkZENoaWxkIChrZXksIG1vZHVsZSkge1xuICB0aGlzLl9jaGlsZHJlbltrZXldID0gbW9kdWxlO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIHJlbW92ZUNoaWxkIChrZXkpIHtcbiAgZGVsZXRlIHRoaXMuX2NoaWxkcmVuW2tleV07XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmdldENoaWxkID0gZnVuY3Rpb24gZ2V0Q2hpbGQgKGtleSkge1xuICByZXR1cm4gdGhpcy5fY2hpbGRyZW5ba2V5XVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5oYXNDaGlsZCA9IGZ1bmN0aW9uIGhhc0NoaWxkIChrZXkpIHtcbiAgcmV0dXJuIGtleSBpbiB0aGlzLl9jaGlsZHJlblxufTtcblxuTW9kdWxlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKHJhd01vZHVsZSkge1xuICB0aGlzLl9yYXdNb2R1bGUubmFtZXNwYWNlZCA9IHJhd01vZHVsZS5uYW1lc3BhY2VkO1xuICBpZiAocmF3TW9kdWxlLmFjdGlvbnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucyA9IHJhd01vZHVsZS5hY3Rpb25zO1xuICB9XG4gIGlmIChyYXdNb2R1bGUubXV0YXRpb25zKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucyA9IHJhd01vZHVsZS5tdXRhdGlvbnM7XG4gIH1cbiAgaWYgKHJhd01vZHVsZS5nZXR0ZXJzKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLmdldHRlcnMgPSByYXdNb2R1bGUuZ2V0dGVycztcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoQ2hpbGQgPSBmdW5jdGlvbiBmb3JFYWNoQ2hpbGQgKGZuKSB7XG4gIGZvckVhY2hWYWx1ZSh0aGlzLl9jaGlsZHJlbiwgZm4pO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoR2V0dGVyID0gZnVuY3Rpb24gZm9yRWFjaEdldHRlciAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzLCBmbik7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEFjdGlvbiA9IGZ1bmN0aW9uIGZvckVhY2hBY3Rpb24gKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuYWN0aW9ucywgZm4pO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hNdXRhdGlvbiA9IGZ1bmN0aW9uIGZvckVhY2hNdXRhdGlvbiAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucywgZm4pO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTW9kdWxlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDEgKTtcblxudmFyIE1vZHVsZUNvbGxlY3Rpb24gPSBmdW5jdGlvbiBNb2R1bGVDb2xsZWN0aW9uIChyYXdSb290TW9kdWxlKSB7XG4gIC8vIHJlZ2lzdGVyIHJvb3QgbW9kdWxlIChWdWV4LlN0b3JlIG9wdGlvbnMpXG4gIHRoaXMucmVnaXN0ZXIoW10sIHJhd1Jvb3RNb2R1bGUsIGZhbHNlKTtcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAocGF0aCkge1xuICByZXR1cm4gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKG1vZHVsZSwga2V5KSB7XG4gICAgcmV0dXJuIG1vZHVsZS5nZXRDaGlsZChrZXkpXG4gIH0sIHRoaXMucm9vdClcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmdldE5hbWVzcGFjZSA9IGZ1bmN0aW9uIGdldE5hbWVzcGFjZSAocGF0aCkge1xuICB2YXIgbW9kdWxlID0gdGhpcy5yb290O1xuICByZXR1cm4gcGF0aC5yZWR1Y2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwga2V5KSB7XG4gICAgbW9kdWxlID0gbW9kdWxlLmdldENoaWxkKGtleSk7XG4gICAgcmV0dXJuIG5hbWVzcGFjZSArIChtb2R1bGUubmFtZXNwYWNlZCA/IGtleSArICcvJyA6ICcnKVxuICB9LCAnJylcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSQxIChyYXdSb290TW9kdWxlKSB7XG4gIHVwZGF0ZShbXSwgdGhpcy5yb290LCByYXdSb290TW9kdWxlKTtcbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIgKHBhdGgsIHJhd01vZHVsZSwgcnVudGltZSkge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG4gICAgaWYgKCBydW50aW1lID09PSB2b2lkIDAgKSBydW50aW1lID0gdHJ1ZTtcblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0UmF3TW9kdWxlKHBhdGgsIHJhd01vZHVsZSk7XG4gIH1cblxuICB2YXIgbmV3TW9kdWxlID0gbmV3IE1vZHVsZShyYXdNb2R1bGUsIHJ1bnRpbWUpO1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICB0aGlzLnJvb3QgPSBuZXdNb2R1bGU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0KHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBwYXJlbnQuYWRkQ2hpbGQocGF0aFtwYXRoLmxlbmd0aCAtIDFdLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gcmVnaXN0ZXIgbmVzdGVkIG1vZHVsZXNcbiAgaWYgKHJhd01vZHVsZS5tb2R1bGVzKSB7XG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZS5tb2R1bGVzLCBmdW5jdGlvbiAocmF3Q2hpbGRNb2R1bGUsIGtleSkge1xuICAgICAgdGhpcyQxJDEucmVnaXN0ZXIocGF0aC5jb25jYXQoa2V5KSwgcmF3Q2hpbGRNb2R1bGUsIHJ1bnRpbWUpO1xuICAgIH0pO1xuICB9XG59O1xuXG5Nb2R1bGVDb2xsZWN0aW9uLnByb3RvdHlwZS51bnJlZ2lzdGVyID0gZnVuY3Rpb24gdW5yZWdpc3RlciAocGF0aCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5nZXQocGF0aC5zbGljZSgwLCAtMSkpO1xuICB2YXIga2V5ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICB2YXIgY2hpbGQgPSBwYXJlbnQuZ2V0Q2hpbGQoa2V5KTtcblxuICBpZiAoIWNoaWxkKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBcIlt2dWV4XSB0cnlpbmcgdG8gdW5yZWdpc3RlciBtb2R1bGUgJ1wiICsga2V5ICsgXCInLCB3aGljaCBpcyBcIiArXG4gICAgICAgIFwibm90IHJlZ2lzdGVyZWRcIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAoIWNoaWxkLnJ1bnRpbWUpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHBhcmVudC5yZW1vdmVDaGlsZChrZXkpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuaXNSZWdpc3RlcmVkID0gZnVuY3Rpb24gaXNSZWdpc3RlcmVkIChwYXRoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gIHZhciBrZXkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIHJldHVybiBwYXJlbnQuaGFzQ2hpbGQoa2V5KVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG5mdW5jdGlvbiB1cGRhdGUgKHBhdGgsIHRhcmdldE1vZHVsZSwgbmV3TW9kdWxlKSB7XG4gIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICBhc3NlcnRSYXdNb2R1bGUocGF0aCwgbmV3TW9kdWxlKTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSB0YXJnZXQgbW9kdWxlXG4gIHRhcmdldE1vZHVsZS51cGRhdGUobmV3TW9kdWxlKTtcblxuICAvLyB1cGRhdGUgbmVzdGVkIG1vZHVsZXNcbiAgaWYgKG5ld01vZHVsZS5tb2R1bGVzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIG5ld01vZHVsZS5tb2R1bGVzKSB7XG4gICAgICBpZiAoIXRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIlt2dWV4XSB0cnlpbmcgdG8gYWRkIGEgbmV3IG1vZHVsZSAnXCIgKyBrZXkgKyBcIicgb24gaG90IHJlbG9hZGluZywgXCIgK1xuICAgICAgICAgICAgJ21hbnVhbCByZWxvYWQgaXMgbmVlZGVkJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUoXG4gICAgICAgIHBhdGguY29uY2F0KGtleSksXG4gICAgICAgIHRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpLFxuICAgICAgICBuZXdNb2R1bGUubW9kdWxlc1trZXldXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgZnVuY3Rpb25Bc3NlcnQgPSB7XG4gIGFzc2VydDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7IH0sXG4gIGV4cGVjdGVkOiAnZnVuY3Rpb24nXG59O1xuXG52YXIgb2JqZWN0QXNzZXJ0ID0ge1xuICBhc3NlcnQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLmhhbmRsZXIgPT09ICdmdW5jdGlvbicpOyB9LFxuICBleHBlY3RlZDogJ2Z1bmN0aW9uIG9yIG9iamVjdCB3aXRoIFwiaGFuZGxlclwiIGZ1bmN0aW9uJ1xufTtcblxudmFyIGFzc2VydFR5cGVzID0ge1xuICBnZXR0ZXJzOiBmdW5jdGlvbkFzc2VydCxcbiAgbXV0YXRpb25zOiBmdW5jdGlvbkFzc2VydCxcbiAgYWN0aW9uczogb2JqZWN0QXNzZXJ0XG59O1xuXG5mdW5jdGlvbiBhc3NlcnRSYXdNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSkge1xuICBPYmplY3Qua2V5cyhhc3NlcnRUeXBlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFyYXdNb2R1bGVba2V5XSkgeyByZXR1cm4gfVxuXG4gICAgdmFyIGFzc2VydE9wdGlvbnMgPSBhc3NlcnRUeXBlc1trZXldO1xuXG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZVtrZXldLCBmdW5jdGlvbiAodmFsdWUsIHR5cGUpIHtcbiAgICAgIGFzc2VydChcbiAgICAgICAgYXNzZXJ0T3B0aW9ucy5hc3NlcnQodmFsdWUpLFxuICAgICAgICBtYWtlQXNzZXJ0aW9uTWVzc2FnZShwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBhc3NlcnRPcHRpb25zLmV4cGVjdGVkKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VBc3NlcnRpb25NZXNzYWdlIChwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBleHBlY3RlZCkge1xuICB2YXIgYnVmID0ga2V5ICsgXCIgc2hvdWxkIGJlIFwiICsgZXhwZWN0ZWQgKyBcIiBidXQgXFxcIlwiICsga2V5ICsgXCIuXCIgKyB0eXBlICsgXCJcXFwiXCI7XG4gIGlmIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICBidWYgKz0gXCIgaW4gbW9kdWxlIFxcXCJcIiArIChwYXRoLmpvaW4oJy4nKSkgKyBcIlxcXCJcIjtcbiAgfVxuICBidWYgKz0gXCIgaXMgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsdWUpKSArIFwiLlwiO1xuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlIChvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgU3RvcmUob3B0aW9ucylcbn1cblxudmFyIFN0b3JlID0gZnVuY3Rpb24gU3RvcmUgKG9wdGlvbnMpIHtcbiAgdmFyIHRoaXMkMSQxID0gdGhpcztcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGFzc2VydCh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcsIFwidnVleCByZXF1aXJlcyBhIFByb21pc2UgcG9seWZpbGwgaW4gdGhpcyBicm93c2VyLlwiKTtcbiAgICBhc3NlcnQodGhpcyBpbnN0YW5jZW9mIFN0b3JlLCBcInN0b3JlIG11c3QgYmUgY2FsbGVkIHdpdGggdGhlIG5ldyBvcGVyYXRvci5cIik7XG4gIH1cblxuICB2YXIgcGx1Z2lucyA9IG9wdGlvbnMucGx1Z2luczsgaWYgKCBwbHVnaW5zID09PSB2b2lkIDAgKSBwbHVnaW5zID0gW107XG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdDsgaWYgKCBzdHJpY3QgPT09IHZvaWQgMCApIHN0cmljdCA9IGZhbHNlO1xuICB2YXIgZGV2dG9vbHMgPSBvcHRpb25zLmRldnRvb2xzO1xuXG4gIC8vIHN0b3JlIGludGVybmFsIHN0YXRlXG4gIHRoaXMuX2NvbW1pdHRpbmcgPSBmYWxzZTtcbiAgdGhpcy5fYWN0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX2FjdGlvblN1YnNjcmliZXJzID0gW107XG4gIHRoaXMuX211dGF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX3dyYXBwZWRHZXR0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fbW9kdWxlcyA9IG5ldyBNb2R1bGVDb2xsZWN0aW9uKG9wdGlvbnMpO1xuICB0aGlzLl9tb2R1bGVzTmFtZXNwYWNlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcbiAgdGhpcy5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fZGV2dG9vbHMgPSBkZXZ0b29scztcblxuICAvLyBiaW5kIGNvbW1pdCBhbmQgZGlzcGF0Y2ggdG8gc2VsZlxuICB2YXIgc3RvcmUgPSB0aGlzO1xuICB2YXIgcmVmID0gdGhpcztcbiAgdmFyIGRpc3BhdGNoID0gcmVmLmRpc3BhdGNoO1xuICB2YXIgY29tbWl0ID0gcmVmLmNvbW1pdDtcbiAgdGhpcy5kaXNwYXRjaCA9IGZ1bmN0aW9uIGJvdW5kRGlzcGF0Y2ggKHR5cGUsIHBheWxvYWQpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2guY2FsbChzdG9yZSwgdHlwZSwgcGF5bG9hZClcbiAgfTtcbiAgdGhpcy5jb21taXQgPSBmdW5jdGlvbiBib3VuZENvbW1pdCAodHlwZSwgcGF5bG9hZCwgb3B0aW9ucykge1xuICAgIHJldHVybiBjb21taXQuY2FsbChzdG9yZSwgdHlwZSwgcGF5bG9hZCwgb3B0aW9ucylcbiAgfTtcblxuICAvLyBzdHJpY3QgbW9kZVxuICB0aGlzLnN0cmljdCA9IHN0cmljdDtcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9tb2R1bGVzLnJvb3Quc3RhdGU7XG5cbiAgLy8gaW5pdCByb290IG1vZHVsZS5cbiAgLy8gdGhpcyBhbHNvIHJlY3Vyc2l2ZWx5IHJlZ2lzdGVycyBhbGwgc3ViLW1vZHVsZXNcbiAgLy8gYW5kIGNvbGxlY3RzIGFsbCBtb2R1bGUgZ2V0dGVycyBpbnNpZGUgdGhpcy5fd3JhcHBlZEdldHRlcnNcbiAgaW5zdGFsbE1vZHVsZSh0aGlzLCBzdGF0ZSwgW10sIHRoaXMuX21vZHVsZXMucm9vdCk7XG5cbiAgLy8gaW5pdGlhbGl6ZSB0aGUgc3RvcmUgc3RhdGUsIHdoaWNoIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgcmVhY3Rpdml0eVxuICAvLyAoYWxzbyByZWdpc3RlcnMgX3dyYXBwZWRHZXR0ZXJzIGFzIGNvbXB1dGVkIHByb3BlcnRpZXMpXG4gIHJlc2V0U3RvcmVTdGF0ZSh0aGlzLCBzdGF0ZSk7XG5cbiAgLy8gYXBwbHkgcGx1Z2luc1xuICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikgeyByZXR1cm4gcGx1Z2luKHRoaXMkMSQxKTsgfSk7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBzdGF0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5TdG9yZS5wcm90b3R5cGUuaW5zdGFsbCA9IGZ1bmN0aW9uIGluc3RhbGwgKGFwcCwgaW5qZWN0S2V5KSB7XG4gIGFwcC5wcm92aWRlKGluamVjdEtleSB8fCBzdG9yZUtleSwgdGhpcyk7XG4gIGFwcC5jb25maWcuZ2xvYmFsUHJvcGVydGllcy4kc3RvcmUgPSB0aGlzO1xuXG4gIHZhciB1c2VEZXZ0b29scyA9IHRoaXMuX2RldnRvb2xzICE9PSB1bmRlZmluZWRcbiAgICA/IHRoaXMuX2RldnRvb2xzXG4gICAgOiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fO1xuXG4gIGlmICh1c2VEZXZ0b29scykge1xuICAgIGFkZERldnRvb2xzKGFwcCwgdGhpcyk7XG4gIH1cbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5zdGF0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9zdGF0ZS5kYXRhXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuc3RhdGUuc2V0ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGFzc2VydChmYWxzZSwgXCJ1c2Ugc3RvcmUucmVwbGFjZVN0YXRlKCkgdG8gZXhwbGljaXQgcmVwbGFjZSBzdG9yZSBzdGF0ZS5cIik7XG4gIH1cbn07XG5cblN0b3JlLnByb3RvdHlwZS5jb21taXQgPSBmdW5jdGlvbiBjb21taXQgKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICB2YXIgdGhpcyQxJDEgPSB0aGlzO1xuXG4gIC8vIGNoZWNrIG9iamVjdC1zdHlsZSBjb21taXRcbiAgdmFyIHJlZiA9IHVuaWZ5T2JqZWN0U3R5bGUoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucyk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuICAgIHZhciBvcHRpb25zID0gcmVmLm9wdGlvbnM7XG5cbiAgdmFyIG11dGF0aW9uID0geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkIH07XG4gIHZhciBlbnRyeSA9IHRoaXMuX211dGF0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIGVudHJ5LmZvckVhY2goZnVuY3Rpb24gY29tbWl0SXRlcmF0b3IgKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIocGF5bG9hZCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRoaXMuX3N1YnNjcmliZXJzXG4gICAgLnNsaWNlKCkgLy8gc2hhbGxvdyBjb3B5IHRvIHByZXZlbnQgaXRlcmF0b3IgaW52YWxpZGF0aW9uIGlmIHN1YnNjcmliZXIgc3luY2hyb25vdXNseSBjYWxscyB1bnN1YnNjcmliZVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1YihtdXRhdGlvbiwgdGhpcyQxJDEuc3RhdGUpOyB9KTtcblxuICBpZiAoXG4gICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgb3B0aW9ucyAmJiBvcHRpb25zLnNpbGVudFxuICApIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBcIlt2dWV4XSBtdXRhdGlvbiB0eXBlOiBcIiArIHR5cGUgKyBcIi4gU2lsZW50IG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkLiBcIiArXG4gICAgICAnVXNlIHRoZSBmaWx0ZXIgZnVuY3Rpb25hbGl0eSBpbiB0aGUgdnVlLWRldnRvb2xzJ1xuICAgICk7XG4gIH1cbn07XG5cblN0b3JlLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoIChfdHlwZSwgX3BheWxvYWQpIHtcbiAgICB2YXIgdGhpcyQxJDEgPSB0aGlzO1xuXG4gIC8vIGNoZWNrIG9iamVjdC1zdHlsZSBkaXNwYXRjaFxuICB2YXIgcmVmID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQpO1xuICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gICAgdmFyIHBheWxvYWQgPSByZWYucGF5bG9hZDtcblxuICB2YXIgYWN0aW9uID0geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkIH07XG4gIHZhciBlbnRyeSA9IHRoaXMuX2FjdGlvbnNbdHlwZV07XG4gIGlmICghZW50cnkpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGFjdGlvbiB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICB0cnkge1xuICAgIHRoaXMuX2FjdGlvblN1YnNjcmliZXJzXG4gICAgICAuc2xpY2UoKSAvLyBzaGFsbG93IGNvcHkgdG8gcHJldmVudCBpdGVyYXRvciBpbnZhbGlkYXRpb24gaWYgc3Vic2NyaWJlciBzeW5jaHJvbm91c2x5IGNhbGxzIHVuc3Vic2NyaWJlXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5iZWZvcmU7IH0pXG4gICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYmVmb3JlKGFjdGlvbiwgdGhpcyQxJDEuc3RhdGUpOyB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlt2dWV4XSBlcnJvciBpbiBiZWZvcmUgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciByZXN1bHQgPSBlbnRyeS5sZW5ndGggPiAxXG4gICAgPyBQcm9taXNlLmFsbChlbnRyeS5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGhhbmRsZXIocGF5bG9hZCk7IH0pKVxuICAgIDogZW50cnlbMF0ocGF5bG9hZCk7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZXN1bHQudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzJDEkMS5fYWN0aW9uU3Vic2NyaWJlcnNcbiAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5hZnRlcjsgfSlcbiAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYWZ0ZXIoYWN0aW9uLCB0aGlzJDEkMS5zdGF0ZSk7IH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiW3Z1ZXhdIGVycm9yIGluIGFmdGVyIGFjdGlvbiBzdWJzY3JpYmVyczogXCIpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc29sdmUocmVzKTtcbiAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMkMSQxLl9hY3Rpb25TdWJzY3JpYmVyc1xuICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmVycm9yOyB9KVxuICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5lcnJvcihhY3Rpb24sIHRoaXMkMSQxLnN0YXRlLCBlcnJvcik7IH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiW3Z1ZXhdIGVycm9yIGluIGVycm9yIGFjdGlvbiBzdWJzY3JpYmVyczogXCIpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfSk7XG4gIH0pXG59O1xuXG5TdG9yZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlIChmbiwgb3B0aW9ucykge1xuICByZXR1cm4gZ2VuZXJpY1N1YnNjcmliZShmbiwgdGhpcy5fc3Vic2NyaWJlcnMsIG9wdGlvbnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUuc3Vic2NyaWJlQWN0aW9uID0gZnVuY3Rpb24gc3Vic2NyaWJlQWN0aW9uIChmbiwgb3B0aW9ucykge1xuICB2YXIgc3VicyA9IHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyA/IHsgYmVmb3JlOiBmbiB9IDogZm47XG4gIHJldHVybiBnZW5lcmljU3Vic2NyaWJlKHN1YnMsIHRoaXMuX2FjdGlvblN1YnNjcmliZXJzLCBvcHRpb25zKVxufTtcblxuU3RvcmUucHJvdG90eXBlLndhdGNoID0gZnVuY3Rpb24gd2F0Y2gkMSAoZ2V0dGVyLCBjYiwgb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgIGFzc2VydCh0eXBlb2YgZ2V0dGVyID09PSAnZnVuY3Rpb24nLCBcInN0b3JlLndhdGNoIG9ubHkgYWNjZXB0cyBhIGZ1bmN0aW9uLlwiKTtcbiAgfVxuICByZXR1cm4gd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0dGVyKHRoaXMkMSQxLnN0YXRlLCB0aGlzJDEkMS5nZXR0ZXJzKTsgfSwgY2IsIE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpKVxufTtcblxuU3RvcmUucHJvdG90eXBlLnJlcGxhY2VTdGF0ZSA9IGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZSAoc3RhdGUpIHtcbiAgICB2YXIgdGhpcyQxJDEgPSB0aGlzO1xuXG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHRoaXMkMSQxLl9zdGF0ZS5kYXRhID0gc3RhdGU7XG4gIH0pO1xufTtcblxuU3RvcmUucHJvdG90eXBlLnJlZ2lzdGVyTW9kdWxlID0gZnVuY3Rpb24gcmVnaXN0ZXJNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSwgb3B0aW9ucykge1xuICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHsgcGF0aCA9IFtwYXRoXTsgfVxuXG4gIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShwYXRoKSwgXCJtb2R1bGUgcGF0aCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIEFycmF5LlwiKTtcbiAgICBhc3NlcnQocGF0aC5sZW5ndGggPiAwLCAnY2Fubm90IHJlZ2lzdGVyIHRoZSByb290IG1vZHVsZSBieSB1c2luZyByZWdpc3Rlck1vZHVsZS4nKTtcbiAgfVxuXG4gIHRoaXMuX21vZHVsZXMucmVnaXN0ZXIocGF0aCwgcmF3TW9kdWxlKTtcbiAgaW5zdGFsbE1vZHVsZSh0aGlzLCB0aGlzLnN0YXRlLCBwYXRoLCB0aGlzLl9tb2R1bGVzLmdldChwYXRoKSwgb3B0aW9ucy5wcmVzZXJ2ZVN0YXRlKTtcbiAgLy8gcmVzZXQgc3RvcmUgdG8gdXBkYXRlIGdldHRlcnMuLi5cbiAgcmVzZXRTdG9yZVN0YXRlKHRoaXMsIHRoaXMuc3RhdGUpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLnVucmVnaXN0ZXJNb2R1bGUgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyTW9kdWxlIChwYXRoKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gIH1cblxuICB0aGlzLl9tb2R1bGVzLnVucmVnaXN0ZXIocGF0aCk7XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnRTdGF0ZSA9IGdldE5lc3RlZFN0YXRlKHRoaXMkMSQxLnN0YXRlLCBwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgZGVsZXRlIHBhcmVudFN0YXRlW3BhdGhbcGF0aC5sZW5ndGggLSAxXV07XG4gIH0pO1xuICByZXNldFN0b3JlKHRoaXMpO1xufTtcblxuU3RvcmUucHJvdG90eXBlLmhhc01vZHVsZSA9IGZ1bmN0aW9uIGhhc01vZHVsZSAocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkocGF0aCksIFwibW9kdWxlIHBhdGggbXVzdCBiZSBhIHN0cmluZyBvciBhbiBBcnJheS5cIik7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fbW9kdWxlcy5pc1JlZ2lzdGVyZWQocGF0aClcbn07XG5cblN0b3JlLnByb3RvdHlwZS5ob3RVcGRhdGUgPSBmdW5jdGlvbiBob3RVcGRhdGUgKG5ld09wdGlvbnMpIHtcbiAgdGhpcy5fbW9kdWxlcy51cGRhdGUobmV3T3B0aW9ucyk7XG4gIHJlc2V0U3RvcmUodGhpcywgdHJ1ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuX3dpdGhDb21taXQgPSBmdW5jdGlvbiBfd2l0aENvbW1pdCAoZm4pIHtcbiAgdmFyIGNvbW1pdHRpbmcgPSB0aGlzLl9jb21taXR0aW5nO1xuICB0aGlzLl9jb21taXR0aW5nID0gdHJ1ZTtcbiAgZm4oKTtcbiAgdGhpcy5fY29tbWl0dGluZyA9IGNvbW1pdHRpbmc7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU3RvcmUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGdldHRpbmcgdGhlIHN0YXRlLlxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gc3RhdGVzICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgc3RhdGUgYW5kIGdldHRlcnMgZm9yIHBhcmFtLCB5b3UgY2FuIGRvIHNvbWV0aGluZyBmb3Igc3RhdGUgYW5kIGdldHRlcnMgaW4gaXQuXG4gKiBAcGFyYW0ge09iamVjdH1cbiAqL1xudmFyIG1hcFN0YXRlID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIHN0YXRlcykge1xuICB2YXIgcmVzID0ge307XG4gIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzVmFsaWRNYXAoc3RhdGVzKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1t2dWV4XSBtYXBTdGF0ZTogbWFwcGVyIHBhcmFtZXRlciBtdXN0IGJlIGVpdGhlciBhbiBBcnJheSBvciBhbiBPYmplY3QnKTtcbiAgfVxuICBub3JtYWxpemVNYXAoc3RhdGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkU3RhdGUgKCkge1xuICAgICAgdmFyIHN0YXRlID0gdGhpcy4kc3RvcmUuc3RhdGU7XG4gICAgICB2YXIgZ2V0dGVycyA9IHRoaXMuJHN0b3JlLmdldHRlcnM7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcFN0YXRlJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBzdGF0ZSA9IG1vZHVsZS5jb250ZXh0LnN0YXRlO1xuICAgICAgICBnZXR0ZXJzID0gbW9kdWxlLmNvbnRleHQuZ2V0dGVycztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmNhbGwodGhpcywgc3RhdGUsIGdldHRlcnMpXG4gICAgICAgIDogc3RhdGVbdmFsXVxuICAgIH07XG4gICAgLy8gbWFyayB2dWV4IGdldHRlciBmb3IgZGV2dG9vbHNcbiAgICByZXNba2V5XS52dWV4ID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgY29tbWl0dGluZyB0aGUgbXV0YXRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG11dGF0aW9ucyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IGBjb21taXRgIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBwYXJhbSwgaXQgY2FuIGFjY2VwdCBhbm90aGVyIHBhcmFtcy4gWW91IGNhbiBjb21taXQgbXV0YXRpb24gYW5kIGRvIGFueSBvdGhlciB0aGluZ3MgaW4gdGhpcyBmdW5jdGlvbi4gc3BlY2lhbGx5LCBZb3UgbmVlZCB0byBwYXNzIGFudGhvciBwYXJhbXMgZnJvbSB0aGUgbWFwcGVkIGZ1bmN0aW9uLlxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgbWFwTXV0YXRpb25zID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIG11dGF0aW9ucykge1xuICB2YXIgcmVzID0ge307XG4gIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzVmFsaWRNYXAobXV0YXRpb25zKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1t2dWV4XSBtYXBNdXRhdGlvbnM6IG1hcHBlciBwYXJhbWV0ZXIgbXVzdCBiZSBlaXRoZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0Jyk7XG4gIH1cbiAgbm9ybWFsaXplTWFwKG11dGF0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZE11dGF0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAvLyBHZXQgdGhlIGNvbW1pdCBtZXRob2QgZnJvbSBzdG9yZVxuICAgICAgdmFyIGNvbW1pdCA9IHRoaXMuJHN0b3JlLmNvbW1pdDtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwTXV0YXRpb25zJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb21taXQgPSBtb2R1bGUuY29udGV4dC5jb21taXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5hcHBseSh0aGlzLCBbY29tbWl0XS5jb25jYXQoYXJncykpXG4gICAgICAgIDogY29tbWl0LmFwcGx5KHRoaXMuJHN0b3JlLCBbdmFsXS5jb25jYXQoYXJncykpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgZ2V0dGluZyB0aGUgZ2V0dGVyc1xuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gZ2V0dGVyc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgbWFwR2V0dGVycyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBnZXR0ZXJzKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNWYWxpZE1hcChnZXR0ZXJzKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1t2dWV4XSBtYXBHZXR0ZXJzOiBtYXBwZXIgcGFyYW1ldGVyIG11c3QgYmUgZWl0aGVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCcpO1xuICB9XG4gIG5vcm1hbGl6ZU1hcChnZXR0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIC8vIFRoZSBuYW1lc3BhY2UgaGFzIGJlZW4gbXV0YXRlZCBieSBub3JtYWxpemVOYW1lc3BhY2VcbiAgICB2YWwgPSBuYW1lc3BhY2UgKyB2YWw7XG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRHZXR0ZXIgKCkge1xuICAgICAgaWYgKG5hbWVzcGFjZSAmJiAhZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBHZXR0ZXJzJywgbmFtZXNwYWNlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgISh2YWwgaW4gdGhpcy4kc3RvcmUuZ2V0dGVycykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBnZXR0ZXI6IFwiICsgdmFsKSk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbdmFsXVxuICAgIH07XG4gICAgLy8gbWFyayB2dWV4IGdldHRlciBmb3IgZGV2dG9vbHNcbiAgICByZXNba2V5XS52dWV4ID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgZGlzcGF0Y2ggdGhlIGFjdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gYWN0aW9ucyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IGBkaXNwYXRjaGAgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IHBhcmFtLCBpdCBjYW4gYWNjZXB0IGFudGhvciBwYXJhbXMuIFlvdSBjYW4gZGlzcGF0Y2ggYWN0aW9uIGFuZCBkbyBhbnkgb3RoZXIgdGhpbmdzIGluIHRoaXMgZnVuY3Rpb24uIHNwZWNpYWxseSwgWW91IG5lZWQgdG8gcGFzcyBhbnRob3IgcGFyYW1zIGZyb20gdGhlIG1hcHBlZCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcEFjdGlvbnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgYWN0aW9ucykge1xuICB2YXIgcmVzID0ge307XG4gIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzVmFsaWRNYXAoYWN0aW9ucykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbdnVleF0gbWFwQWN0aW9uczogbWFwcGVyIHBhcmFtZXRlciBtdXN0IGJlIGVpdGhlciBhbiBBcnJheSBvciBhbiBPYmplY3QnKTtcbiAgfVxuICBub3JtYWxpemVNYXAoYWN0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZEFjdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgLy8gZ2V0IGRpc3BhdGNoIGZ1bmN0aW9uIGZyb20gc3RvcmVcbiAgICAgIHZhciBkaXNwYXRjaCA9IHRoaXMuJHN0b3JlLmRpc3BhdGNoO1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBBY3Rpb25zJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBkaXNwYXRjaCA9IG1vZHVsZS5jb250ZXh0LmRpc3BhdGNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuYXBwbHkodGhpcywgW2Rpc3BhdGNoXS5jb25jYXQoYXJncykpXG4gICAgICAgIDogZGlzcGF0Y2guYXBwbHkodGhpcy4kc3RvcmUsIFt2YWxdLmNvbmNhdChhcmdzKSlcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8qKlxuICogUmViaW5kaW5nIG5hbWVzcGFjZSBwYXJhbSBmb3IgbWFwWFhYIGZ1bmN0aW9uIGluIHNwZWNpYWwgc2NvcGVkLCBhbmQgcmV0dXJuIHRoZW0gYnkgc2ltcGxlIG9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMgPSBmdW5jdGlvbiAobmFtZXNwYWNlKSB7IHJldHVybiAoe1xuICBtYXBTdGF0ZTogbWFwU3RhdGUuYmluZChudWxsLCBuYW1lc3BhY2UpLFxuICBtYXBHZXR0ZXJzOiBtYXBHZXR0ZXJzLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwTXV0YXRpb25zOiBtYXBNdXRhdGlvbnMuYmluZChudWxsLCBuYW1lc3BhY2UpLFxuICBtYXBBY3Rpb25zOiBtYXBBY3Rpb25zLmJpbmQobnVsbCwgbmFtZXNwYWNlKVxufSk7IH07XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBtYXBcbiAqIG5vcm1hbGl6ZU1hcChbMSwgMiwgM10pID0+IFsgeyBrZXk6IDEsIHZhbDogMSB9LCB7IGtleTogMiwgdmFsOiAyIH0sIHsga2V5OiAzLCB2YWw6IDMgfSBdXG4gKiBub3JtYWxpemVNYXAoe2E6IDEsIGI6IDIsIGM6IDN9KSA9PiBbIHsga2V5OiAnYScsIHZhbDogMSB9LCB7IGtleTogJ2InLCB2YWw6IDIgfSwgeyBrZXk6ICdjJywgdmFsOiAzIH0gXVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IG1hcFxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVNYXAgKG1hcCkge1xuICBpZiAoIWlzVmFsaWRNYXAobWFwKSkge1xuICAgIHJldHVybiBbXVxuICB9XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG1hcClcbiAgICA/IG1hcC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gKHsga2V5OiBrZXksIHZhbDoga2V5IH0pOyB9KVxuICAgIDogT2JqZWN0LmtleXMobWFwKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gKHsga2V5OiBrZXksIHZhbDogbWFwW2tleV0gfSk7IH0pXG59XG5cbi8qKlxuICogVmFsaWRhdGUgd2hldGhlciBnaXZlbiBtYXAgaXMgdmFsaWQgb3Igbm90XG4gKiBAcGFyYW0geyp9IG1hcFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZE1hcCAobWFwKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG1hcCkgfHwgaXNPYmplY3QobWFwKVxufVxuXG4vKipcbiAqIFJldHVybiBhIGZ1bmN0aW9uIGV4cGVjdCB0d28gcGFyYW0gY29udGFpbnMgbmFtZXNwYWNlIGFuZCBtYXAuIGl0IHdpbGwgbm9ybWFsaXplIHRoZSBuYW1lc3BhY2UgYW5kIHRoZW4gdGhlIHBhcmFtJ3MgZnVuY3Rpb24gd2lsbCBoYW5kbGUgdGhlIG5ldyBuYW1lc3BhY2UgYW5kIHRoZSBtYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWVzcGFjZSAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1hcCkge1xuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlICE9PSAnc3RyaW5nJykge1xuICAgICAgbWFwID0gbmFtZXNwYWNlO1xuICAgICAgbmFtZXNwYWNlID0gJyc7XG4gICAgfSBlbHNlIGlmIChuYW1lc3BhY2UuY2hhckF0KG5hbWVzcGFjZS5sZW5ndGggLSAxKSAhPT0gJy8nKSB7XG4gICAgICBuYW1lc3BhY2UgKz0gJy8nO1xuICAgIH1cbiAgICByZXR1cm4gZm4obmFtZXNwYWNlLCBtYXApXG4gIH1cbn1cblxuLyoqXG4gKiBTZWFyY2ggYSBzcGVjaWFsIG1vZHVsZSBmcm9tIHN0b3JlIGJ5IG5hbWVzcGFjZS4gaWYgbW9kdWxlIG5vdCBleGlzdCwgcHJpbnQgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdG9yZVxuICogQHBhcmFtIHtTdHJpbmd9IGhlbHBlclxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRNb2R1bGVCeU5hbWVzcGFjZSAoc3RvcmUsIGhlbHBlciwgbmFtZXNwYWNlKSB7XG4gIHZhciBtb2R1bGUgPSBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdO1xuICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFtb2R1bGUpIHtcbiAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSBtb2R1bGUgbmFtZXNwYWNlIG5vdCBmb3VuZCBpbiBcIiArIGhlbHBlciArIFwiKCk6IFwiICsgbmFtZXNwYWNlKSk7XG4gIH1cbiAgcmV0dXJuIG1vZHVsZVxufVxuXG4vLyBDcmVkaXRzOiBib3Jyb3dlZCBjb2RlIGZyb20gZmNvbWIvcmVkdXgtbG9nZ2VyXG5cbmZ1bmN0aW9uIGNyZWF0ZUxvZ2dlciAocmVmKSB7XG4gIGlmICggcmVmID09PSB2b2lkIDAgKSByZWYgPSB7fTtcbiAgdmFyIGNvbGxhcHNlZCA9IHJlZi5jb2xsYXBzZWQ7IGlmICggY29sbGFwc2VkID09PSB2b2lkIDAgKSBjb2xsYXBzZWQgPSB0cnVlO1xuICB2YXIgZmlsdGVyID0gcmVmLmZpbHRlcjsgaWYgKCBmaWx0ZXIgPT09IHZvaWQgMCApIGZpbHRlciA9IGZ1bmN0aW9uIChtdXRhdGlvbiwgc3RhdGVCZWZvcmUsIHN0YXRlQWZ0ZXIpIHsgcmV0dXJuIHRydWU7IH07XG4gIHZhciB0cmFuc2Zvcm1lciA9IHJlZi50cmFuc2Zvcm1lcjsgaWYgKCB0cmFuc2Zvcm1lciA9PT0gdm9pZCAwICkgdHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlOyB9O1xuICB2YXIgbXV0YXRpb25UcmFuc2Zvcm1lciA9IHJlZi5tdXRhdGlvblRyYW5zZm9ybWVyOyBpZiAoIG11dGF0aW9uVHJhbnNmb3JtZXIgPT09IHZvaWQgMCApIG11dGF0aW9uVHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAobXV0KSB7IHJldHVybiBtdXQ7IH07XG4gIHZhciBhY3Rpb25GaWx0ZXIgPSByZWYuYWN0aW9uRmlsdGVyOyBpZiAoIGFjdGlvbkZpbHRlciA9PT0gdm9pZCAwICkgYWN0aW9uRmlsdGVyID0gZnVuY3Rpb24gKGFjdGlvbiwgc3RhdGUpIHsgcmV0dXJuIHRydWU7IH07XG4gIHZhciBhY3Rpb25UcmFuc2Zvcm1lciA9IHJlZi5hY3Rpb25UcmFuc2Zvcm1lcjsgaWYgKCBhY3Rpb25UcmFuc2Zvcm1lciA9PT0gdm9pZCAwICkgYWN0aW9uVHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoYWN0KSB7IHJldHVybiBhY3Q7IH07XG4gIHZhciBsb2dNdXRhdGlvbnMgPSByZWYubG9nTXV0YXRpb25zOyBpZiAoIGxvZ011dGF0aW9ucyA9PT0gdm9pZCAwICkgbG9nTXV0YXRpb25zID0gdHJ1ZTtcbiAgdmFyIGxvZ0FjdGlvbnMgPSByZWYubG9nQWN0aW9uczsgaWYgKCBsb2dBY3Rpb25zID09PSB2b2lkIDAgKSBsb2dBY3Rpb25zID0gdHJ1ZTtcbiAgdmFyIGxvZ2dlciA9IHJlZi5sb2dnZXI7IGlmICggbG9nZ2VyID09PSB2b2lkIDAgKSBsb2dnZXIgPSBjb25zb2xlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICB2YXIgcHJldlN0YXRlID0gZGVlcENvcHkoc3RvcmUuc3RhdGUpO1xuXG4gICAgaWYgKHR5cGVvZiBsb2dnZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAobG9nTXV0YXRpb25zKSB7XG4gICAgICBzdG9yZS5zdWJzY3JpYmUoZnVuY3Rpb24gKG11dGF0aW9uLCBzdGF0ZSkge1xuICAgICAgICB2YXIgbmV4dFN0YXRlID0gZGVlcENvcHkoc3RhdGUpO1xuXG4gICAgICAgIGlmIChmaWx0ZXIobXV0YXRpb24sIHByZXZTdGF0ZSwgbmV4dFN0YXRlKSkge1xuICAgICAgICAgIHZhciBmb3JtYXR0ZWRUaW1lID0gZ2V0Rm9ybWF0dGVkVGltZSgpO1xuICAgICAgICAgIHZhciBmb3JtYXR0ZWRNdXRhdGlvbiA9IG11dGF0aW9uVHJhbnNmb3JtZXIobXV0YXRpb24pO1xuICAgICAgICAgIHZhciBtZXNzYWdlID0gXCJtdXRhdGlvbiBcIiArIChtdXRhdGlvbi50eXBlKSArIGZvcm1hdHRlZFRpbWU7XG5cbiAgICAgICAgICBzdGFydE1lc3NhZ2UobG9nZ2VyLCBtZXNzYWdlLCBjb2xsYXBzZWQpO1xuICAgICAgICAgIGxvZ2dlci5sb2coJyVjIHByZXYgc3RhdGUnLCAnY29sb3I6ICM5RTlFOUU7IGZvbnQtd2VpZ2h0OiBib2xkJywgdHJhbnNmb3JtZXIocHJldlN0YXRlKSk7XG4gICAgICAgICAgbG9nZ2VyLmxvZygnJWMgbXV0YXRpb24nLCAnY29sb3I6ICMwM0E5RjQ7IGZvbnQtd2VpZ2h0OiBib2xkJywgZm9ybWF0dGVkTXV0YXRpb24pO1xuICAgICAgICAgIGxvZ2dlci5sb2coJyVjIG5leHQgc3RhdGUnLCAnY29sb3I6ICM0Q0FGNTA7IGZvbnQtd2VpZ2h0OiBib2xkJywgdHJhbnNmb3JtZXIobmV4dFN0YXRlKSk7XG4gICAgICAgICAgZW5kTWVzc2FnZShsb2dnZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldlN0YXRlID0gbmV4dFN0YXRlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGxvZ0FjdGlvbnMpIHtcbiAgICAgIHN0b3JlLnN1YnNjcmliZUFjdGlvbihmdW5jdGlvbiAoYWN0aW9uLCBzdGF0ZSkge1xuICAgICAgICBpZiAoYWN0aW9uRmlsdGVyKGFjdGlvbiwgc3RhdGUpKSB7XG4gICAgICAgICAgdmFyIGZvcm1hdHRlZFRpbWUgPSBnZXRGb3JtYXR0ZWRUaW1lKCk7XG4gICAgICAgICAgdmFyIGZvcm1hdHRlZEFjdGlvbiA9IGFjdGlvblRyYW5zZm9ybWVyKGFjdGlvbik7XG4gICAgICAgICAgdmFyIG1lc3NhZ2UgPSBcImFjdGlvbiBcIiArIChhY3Rpb24udHlwZSkgKyBmb3JtYXR0ZWRUaW1lO1xuXG4gICAgICAgICAgc3RhcnRNZXNzYWdlKGxvZ2dlciwgbWVzc2FnZSwgY29sbGFwc2VkKTtcbiAgICAgICAgICBsb2dnZXIubG9nKCclYyBhY3Rpb24nLCAnY29sb3I6ICMwM0E5RjQ7IGZvbnQtd2VpZ2h0OiBib2xkJywgZm9ybWF0dGVkQWN0aW9uKTtcbiAgICAgICAgICBlbmRNZXNzYWdlKGxvZ2dlcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydE1lc3NhZ2UgKGxvZ2dlciwgbWVzc2FnZSwgY29sbGFwc2VkKSB7XG4gIHZhciBzdGFydE1lc3NhZ2UgPSBjb2xsYXBzZWRcbiAgICA/IGxvZ2dlci5ncm91cENvbGxhcHNlZFxuICAgIDogbG9nZ2VyLmdyb3VwO1xuXG4gIC8vIHJlbmRlclxuICB0cnkge1xuICAgIHN0YXJ0TWVzc2FnZS5jYWxsKGxvZ2dlciwgbWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2dnZXIubG9nKG1lc3NhZ2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZE1lc3NhZ2UgKGxvZ2dlcikge1xuICB0cnkge1xuICAgIGxvZ2dlci5ncm91cEVuZCgpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLmxvZygn4oCU4oCUIGxvZyBlbmQg4oCU4oCUJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkVGltZSAoKSB7XG4gIHZhciB0aW1lID0gbmV3IERhdGUoKTtcbiAgcmV0dXJuIChcIiBAIFwiICsgKHBhZCh0aW1lLmdldEhvdXJzKCksIDIpKSArIFwiOlwiICsgKHBhZCh0aW1lLmdldE1pbnV0ZXMoKSwgMikpICsgXCI6XCIgKyAocGFkKHRpbWUuZ2V0U2Vjb25kcygpLCAyKSkgKyBcIi5cIiArIChwYWQodGltZS5nZXRNaWxsaXNlY29uZHMoKSwgMykpKVxufVxuXG5mdW5jdGlvbiByZXBlYXQgKHN0ciwgdGltZXMpIHtcbiAgcmV0dXJuIChuZXcgQXJyYXkodGltZXMgKyAxKSkuam9pbihzdHIpXG59XG5cbmZ1bmN0aW9uIHBhZCAobnVtLCBtYXhMZW5ndGgpIHtcbiAgcmV0dXJuIHJlcGVhdCgnMCcsIG1heExlbmd0aCAtIG51bS50b1N0cmluZygpLmxlbmd0aCkgKyBudW1cbn1cblxudmFyIGluZGV4ID0ge1xuICB2ZXJzaW9uOiAnNC4wLjInLFxuICBTdG9yZTogU3RvcmUsXG4gIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgY3JlYXRlU3RvcmU6IGNyZWF0ZVN0b3JlLFxuICB1c2VTdG9yZTogdXNlU3RvcmUsXG4gIG1hcFN0YXRlOiBtYXBTdGF0ZSxcbiAgbWFwTXV0YXRpb25zOiBtYXBNdXRhdGlvbnMsXG4gIG1hcEdldHRlcnM6IG1hcEdldHRlcnMsXG4gIG1hcEFjdGlvbnM6IG1hcEFjdGlvbnMsXG4gIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzOiBjcmVhdGVOYW1lc3BhY2VkSGVscGVycyxcbiAgY3JlYXRlTG9nZ2VyOiBjcmVhdGVMb2dnZXJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuZXhwb3J0IHsgU3RvcmUsIGNyZWF0ZUxvZ2dlciwgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMsIGNyZWF0ZVN0b3JlLCBtYXBBY3Rpb25zLCBtYXBHZXR0ZXJzLCBtYXBNdXRhdGlvbnMsIG1hcFN0YXRlLCBzdG9yZUtleSwgdXNlU3RvcmUgfTtcbiIsIi8qIVxuICogQ2hhcnQuanMgdjMuOS4xXG4gKiBodHRwczovL3d3dy5jaGFydGpzLm9yZ1xuICogKGMpIDIwMjIgQ2hhcnQuanMgQ29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZXF1ZXN0QW5pbUZyYW1lLCBhIGFzIHJlc29sdmUsIGUgYXMgZWZmZWN0cywgYyBhcyBjb2xvciwgZCBhcyBkZWZhdWx0cywgaSBhcyBpc09iamVjdCwgYiBhcyBpc0FycmF5LCB2IGFzIHZhbHVlT3JEZWZhdWx0LCB1IGFzIHVubGlzdGVuQXJyYXlFdmVudHMsIGwgYXMgbGlzdGVuQXJyYXlFdmVudHMsIGYgYXMgcmVzb2x2ZU9iamVjdEtleSwgZyBhcyBpc051bWJlckZpbml0ZSwgaCBhcyBjcmVhdGVDb250ZXh0LCBqIGFzIGRlZmluZWQsIHMgYXMgc2lnbiwgayBhcyBpc051bGxPclVuZGVmLCBfIGFzIF9hcnJheVVuaXF1ZSwgdCBhcyB0b1JhZGlhbnMsIG0gYXMgdG9QZXJjZW50YWdlLCBuIGFzIHRvRGltZW5zaW9uLCBUIGFzIFRBVSwgbyBhcyBmb3JtYXROdW1iZXIsIHAgYXMgX2FuZ2xlQmV0d2VlbiwgSCBhcyBIQUxGX1BJLCBQIGFzIFBJLCBxIGFzIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzLCB3IGFzIF9zY2FsZVJhbmdlc0NoYW5nZWQsIHggYXMgaXNOdW1iZXIsIHkgYXMgX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlLCB6IGFzIGxvZzEwLCBBIGFzIF9mYWN0b3JpemUsIEIgYXMgZmluaXRlT3JEZWZhdWx0LCBDIGFzIGNhbGxiYWNrLCBEIGFzIF9hZGRHcmFjZSwgRSBhcyBfbGltaXRWYWx1ZSwgRiBhcyB0b0RlZ3JlZXMsIEcgYXMgX21lYXN1cmVUZXh0LCBJIGFzIF9pbnQxNlJhbmdlLCBKIGFzIF9hbGlnblBpeGVsLCBLIGFzIHRvUGFkZGluZywgTCBhcyBjbGlwQXJlYSwgTSBhcyByZW5kZXJUZXh0LCBOIGFzIHVuY2xpcEFyZWEsIE8gYXMgdG9Gb250LCBRIGFzIGVhY2gsIFIgYXMgX3RvTGVmdFJpZ2h0Q2VudGVyLCBTIGFzIF9hbGlnblN0YXJ0RW5kLCBVIGFzIG92ZXJyaWRlcywgViBhcyBtZXJnZSwgVyBhcyBfY2FwaXRhbGl6ZSwgWCBhcyBnZXRSZWxhdGl2ZVBvc2l0aW9uLCBZIGFzIF9ybG9va3VwQnlLZXksIFogYXMgX2xvb2t1cEJ5S2V5LCAkIGFzIF9pc1BvaW50SW5BcmVhLCBhMCBhcyBnZXRBbmdsZUZyb21Qb2ludCwgYTEgYXMgZ2V0TWF4aW11bVNpemUsIGEyIGFzIF9nZXRQYXJlbnROb2RlLCBhMyBhcyByZWFkVXNlZFNpemUsIGE0IGFzIHRocm90dGxlZCwgYTUgYXMgc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucywgYTYgYXMgX2lzRG9tU3VwcG9ydGVkLCBhNyBhcyBkZXNjcmlwdG9ycywgYTggYXMgaXNGdW5jdGlvbiwgYTkgYXMgX2F0dGFjaENvbnRleHQsIGFhIGFzIF9jcmVhdGVSZXNvbHZlciwgYWIgYXMgX2Rlc2NyaXB0b3JzLCBhYyBhcyBtZXJnZUlmLCBhZCBhcyB1aWQsIGFlIGFzIGRlYm91bmNlLCBhZiBhcyByZXRpbmFTY2FsZSwgYWcgYXMgY2xlYXJDYW52YXMsIGFoIGFzIHNldHNFcXVhbCwgYWkgYXMgX2VsZW1lbnRzRXF1YWwsIGFqIGFzIF9pc0NsaWNrRXZlbnQsIGFrIGFzIF9pc0JldHdlZW4sIGFsIGFzIF9yZWFkVmFsdWVUb1Byb3BzLCBhbSBhcyBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cywgYW4gYXMgX2NvbXB1dGVTZWdtZW50cywgYW8gYXMgX2JvdW5kU2VnbWVudHMsIGFwIGFzIF9zdGVwcGVkSW50ZXJwb2xhdGlvbiwgYXEgYXMgX2JlemllckludGVycG9sYXRpb24sIGFyIGFzIF9wb2ludEluTGluZSwgYXMgYXMgX3N0ZXBwZWRMaW5lVG8sIGF0IGFzIF9iZXppZXJDdXJ2ZVRvLCBhdSBhcyBkcmF3UG9pbnQsIGF2IGFzIGFkZFJvdW5kZWRSZWN0UGF0aCwgYXcgYXMgdG9UUkJMLCBheCBhcyB0b1RSQkxDb3JuZXJzLCBheSBhcyBfYm91bmRTZWdtZW50LCBheiBhcyBfbm9ybWFsaXplQW5nbGUsIGFBIGFzIGdldFJ0bEFkYXB0ZXIsIGFCIGFzIG92ZXJyaWRlVGV4dERpcmVjdGlvbiwgYUMgYXMgX3RleHRYLCBhRCBhcyByZXN0b3JlVGV4dERpcmVjdGlvbiwgYUUgYXMgZHJhd1BvaW50TGVnZW5kLCBhRiBhcyBub29wLCBhRyBhcyBkaXN0YW5jZUJldHdlZW5Qb2ludHMsIGFIIGFzIF9zZXRNaW5BbmRNYXhCeUtleSwgYUkgYXMgbmljZU51bSwgYUogYXMgYWxtb3N0V2hvbGUsIGFLIGFzIGFsbW9zdEVxdWFscywgYUwgYXMgX2RlY2ltYWxQbGFjZXMsIGFNIGFzIF9sb25nZXN0VGV4dCwgYU4gYXMgX2ZpbHRlckJldHdlZW4sIGFPIGFzIF9sb29rdXAgfSBmcm9tICcuL2NodW5rcy9oZWxwZXJzLnNlZ21lbnQubWpzJztcbmV4cG9ydCB7IGQgYXMgZGVmYXVsdHMgfSBmcm9tICcuL2NodW5rcy9oZWxwZXJzLnNlZ21lbnQubWpzJztcblxuY2xhc3MgQW5pbWF0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICB0aGlzLl9jaGFydHMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xuICAgIHRoaXMuX2xhc3REYXRlID0gdW5kZWZpbmVkO1xuICB9XG4gIF9ub3RpZnkoY2hhcnQsIGFuaW1zLCBkYXRlLCB0eXBlKSB7XG4gICAgY29uc3QgY2FsbGJhY2tzID0gYW5pbXMubGlzdGVuZXJzW3R5cGVdO1xuICAgIGNvbnN0IG51bVN0ZXBzID0gYW5pbXMuZHVyYXRpb247XG4gICAgY2FsbGJhY2tzLmZvckVhY2goZm4gPT4gZm4oe1xuICAgICAgY2hhcnQsXG4gICAgICBpbml0aWFsOiBhbmltcy5pbml0aWFsLFxuICAgICAgbnVtU3RlcHMsXG4gICAgICBjdXJyZW50U3RlcDogTWF0aC5taW4oZGF0ZSAtIGFuaW1zLnN0YXJ0LCBudW1TdGVwcylcbiAgICB9KSk7XG4gIH1cbiAgX3JlZnJlc2goKSB7XG4gICAgaWYgKHRoaXMuX3JlcXVlc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fcnVubmluZyA9IHRydWU7XG4gICAgdGhpcy5fcmVxdWVzdCA9IHJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csICgpID0+IHtcbiAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgdGhpcy5fcmVxdWVzdCA9IG51bGw7XG4gICAgICBpZiAodGhpcy5fcnVubmluZykge1xuICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgX3VwZGF0ZShkYXRlID0gRGF0ZS5ub3coKSkge1xuICAgIGxldCByZW1haW5pbmcgPSAwO1xuICAgIHRoaXMuX2NoYXJ0cy5mb3JFYWNoKChhbmltcywgY2hhcnQpID0+IHtcbiAgICAgIGlmICghYW5pbXMucnVubmluZyB8fCAhYW5pbXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGl0ZW1zID0gYW5pbXMuaXRlbXM7XG4gICAgICBsZXQgaSA9IGl0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICBsZXQgZHJhdyA9IGZhbHNlO1xuICAgICAgbGV0IGl0ZW07XG4gICAgICBmb3IgKDsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICBpZiAoaXRlbS5fYWN0aXZlKSB7XG4gICAgICAgICAgaWYgKGl0ZW0uX3RvdGFsID4gYW5pbXMuZHVyYXRpb24pIHtcbiAgICAgICAgICAgIGFuaW1zLmR1cmF0aW9uID0gaXRlbS5fdG90YWw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGl0ZW0udGljayhkYXRlKTtcbiAgICAgICAgICBkcmF3ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtc1tpXSA9IGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGl0ZW1zLnBvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZHJhdykge1xuICAgICAgICBjaGFydC5kcmF3KCk7XG4gICAgICAgIHRoaXMuX25vdGlmeShjaGFydCwgYW5pbXMsIGRhdGUsICdwcm9ncmVzcycpO1xuICAgICAgfVxuICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgYW5pbXMucnVubmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9ub3RpZnkoY2hhcnQsIGFuaW1zLCBkYXRlLCAnY29tcGxldGUnKTtcbiAgICAgICAgYW5pbXMuaW5pdGlhbCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmVtYWluaW5nICs9IGl0ZW1zLmxlbmd0aDtcbiAgICB9KTtcbiAgICB0aGlzLl9sYXN0RGF0ZSA9IGRhdGU7XG4gICAgaWYgKHJlbWFpbmluZyA9PT0gMCkge1xuICAgICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBfZ2V0QW5pbXMoY2hhcnQpIHtcbiAgICBjb25zdCBjaGFydHMgPSB0aGlzLl9jaGFydHM7XG4gICAgbGV0IGFuaW1zID0gY2hhcnRzLmdldChjaGFydCk7XG4gICAgaWYgKCFhbmltcykge1xuICAgICAgYW5pbXMgPSB7XG4gICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICBpbml0aWFsOiB0cnVlLFxuICAgICAgICBpdGVtczogW10sXG4gICAgICAgIGxpc3RlbmVyczoge1xuICAgICAgICAgIGNvbXBsZXRlOiBbXSxcbiAgICAgICAgICBwcm9ncmVzczogW11cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNoYXJ0cy5zZXQoY2hhcnQsIGFuaW1zKTtcbiAgICB9XG4gICAgcmV0dXJuIGFuaW1zO1xuICB9XG4gIGxpc3RlbihjaGFydCwgZXZlbnQsIGNiKSB7XG4gICAgdGhpcy5fZ2V0QW5pbXMoY2hhcnQpLmxpc3RlbmVyc1tldmVudF0ucHVzaChjYik7XG4gIH1cbiAgYWRkKGNoYXJ0LCBpdGVtcykge1xuICAgIGlmICghaXRlbXMgfHwgIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkuaXRlbXMucHVzaCguLi5pdGVtcyk7XG4gIH1cbiAgaGFzKGNoYXJ0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldEFuaW1zKGNoYXJ0KS5pdGVtcy5sZW5ndGggPiAwO1xuICB9XG4gIHN0YXJ0KGNoYXJ0KSB7XG4gICAgY29uc3QgYW5pbXMgPSB0aGlzLl9jaGFydHMuZ2V0KGNoYXJ0KTtcbiAgICBpZiAoIWFuaW1zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFuaW1zLnJ1bm5pbmcgPSB0cnVlO1xuICAgIGFuaW1zLnN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICBhbmltcy5kdXJhdGlvbiA9IGFuaW1zLml0ZW1zLnJlZHVjZSgoYWNjLCBjdXIpID0+IE1hdGgubWF4KGFjYywgY3VyLl9kdXJhdGlvbiksIDApO1xuICAgIHRoaXMuX3JlZnJlc2goKTtcbiAgfVxuICBydW5uaW5nKGNoYXJ0KSB7XG4gICAgaWYgKCF0aGlzLl9ydW5uaW5nKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgaWYgKCFhbmltcyB8fCAhYW5pbXMucnVubmluZyB8fCAhYW5pbXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHN0b3AoY2hhcnQpIHtcbiAgICBjb25zdCBhbmltcyA9IHRoaXMuX2NoYXJ0cy5nZXQoY2hhcnQpO1xuICAgIGlmICghYW5pbXMgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpdGVtcyA9IGFuaW1zLml0ZW1zO1xuICAgIGxldCBpID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICBmb3IgKDsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIGl0ZW1zW2ldLmNhbmNlbCgpO1xuICAgIH1cbiAgICBhbmltcy5pdGVtcyA9IFtdO1xuICAgIHRoaXMuX25vdGlmeShjaGFydCwgYW5pbXMsIERhdGUubm93KCksICdjb21wbGV0ZScpO1xuICB9XG4gIHJlbW92ZShjaGFydCkge1xuICAgIHJldHVybiB0aGlzLl9jaGFydHMuZGVsZXRlKGNoYXJ0KTtcbiAgfVxufVxudmFyIGFuaW1hdG9yID0gbmV3IEFuaW1hdG9yKCk7XG5cbmNvbnN0IHRyYW5zcGFyZW50ID0gJ3RyYW5zcGFyZW50JztcbmNvbnN0IGludGVycG9sYXRvcnMgPSB7XG4gIGJvb2xlYW4oZnJvbSwgdG8sIGZhY3Rvcikge1xuICAgIHJldHVybiBmYWN0b3IgPiAwLjUgPyB0byA6IGZyb207XG4gIH0sXG4gIGNvbG9yKGZyb20sIHRvLCBmYWN0b3IpIHtcbiAgICBjb25zdCBjMCA9IGNvbG9yKGZyb20gfHwgdHJhbnNwYXJlbnQpO1xuICAgIGNvbnN0IGMxID0gYzAudmFsaWQgJiYgY29sb3IodG8gfHwgdHJhbnNwYXJlbnQpO1xuICAgIHJldHVybiBjMSAmJiBjMS52YWxpZFxuICAgICAgPyBjMS5taXgoYzAsIGZhY3RvcikuaGV4U3RyaW5nKClcbiAgICAgIDogdG87XG4gIH0sXG4gIG51bWJlcihmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgcmV0dXJuIGZyb20gKyAodG8gLSBmcm9tKSAqIGZhY3RvcjtcbiAgfVxufTtcbmNsYXNzIEFuaW1hdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGNmZywgdGFyZ2V0LCBwcm9wLCB0bykge1xuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRhcmdldFtwcm9wXTtcbiAgICB0byA9IHJlc29sdmUoW2NmZy50bywgdG8sIGN1cnJlbnRWYWx1ZSwgY2ZnLmZyb21dKTtcbiAgICBjb25zdCBmcm9tID0gcmVzb2x2ZShbY2ZnLmZyb20sIGN1cnJlbnRWYWx1ZSwgdG9dKTtcbiAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgIHRoaXMuX2ZuID0gY2ZnLmZuIHx8IGludGVycG9sYXRvcnNbY2ZnLnR5cGUgfHwgdHlwZW9mIGZyb21dO1xuICAgIHRoaXMuX2Vhc2luZyA9IGVmZmVjdHNbY2ZnLmVhc2luZ10gfHwgZWZmZWN0cy5saW5lYXI7XG4gICAgdGhpcy5fc3RhcnQgPSBNYXRoLmZsb29yKERhdGUubm93KCkgKyAoY2ZnLmRlbGF5IHx8IDApKTtcbiAgICB0aGlzLl9kdXJhdGlvbiA9IHRoaXMuX3RvdGFsID0gTWF0aC5mbG9vcihjZmcuZHVyYXRpb24pO1xuICAgIHRoaXMuX2xvb3AgPSAhIWNmZy5sb29wO1xuICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLl9wcm9wID0gcHJvcDtcbiAgICB0aGlzLl9mcm9tID0gZnJvbTtcbiAgICB0aGlzLl90byA9IHRvO1xuICAgIHRoaXMuX3Byb21pc2VzID0gdW5kZWZpbmVkO1xuICB9XG4gIGFjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICB9XG4gIHVwZGF0ZShjZmcsIHRvLCBkYXRlKSB7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgdGhpcy5fbm90aWZ5KGZhbHNlKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMuX3RhcmdldFt0aGlzLl9wcm9wXTtcbiAgICAgIGNvbnN0IGVsYXBzZWQgPSBkYXRlIC0gdGhpcy5fc3RhcnQ7XG4gICAgICBjb25zdCByZW1haW4gPSB0aGlzLl9kdXJhdGlvbiAtIGVsYXBzZWQ7XG4gICAgICB0aGlzLl9zdGFydCA9IGRhdGU7XG4gICAgICB0aGlzLl9kdXJhdGlvbiA9IE1hdGguZmxvb3IoTWF0aC5tYXgocmVtYWluLCBjZmcuZHVyYXRpb24pKTtcbiAgICAgIHRoaXMuX3RvdGFsICs9IGVsYXBzZWQ7XG4gICAgICB0aGlzLl9sb29wID0gISFjZmcubG9vcDtcbiAgICAgIHRoaXMuX3RvID0gcmVzb2x2ZShbY2ZnLnRvLCB0bywgY3VycmVudFZhbHVlLCBjZmcuZnJvbV0pO1xuICAgICAgdGhpcy5fZnJvbSA9IHJlc29sdmUoW2NmZy5mcm9tLCBjdXJyZW50VmFsdWUsIHRvXSk7XG4gICAgfVxuICB9XG4gIGNhbmNlbCgpIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICB0aGlzLnRpY2soRGF0ZS5ub3coKSk7XG4gICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuX25vdGlmeShmYWxzZSk7XG4gICAgfVxuICB9XG4gIHRpY2soZGF0ZSkge1xuICAgIGNvbnN0IGVsYXBzZWQgPSBkYXRlIC0gdGhpcy5fc3RhcnQ7XG4gICAgY29uc3QgZHVyYXRpb24gPSB0aGlzLl9kdXJhdGlvbjtcbiAgICBjb25zdCBwcm9wID0gdGhpcy5fcHJvcDtcbiAgICBjb25zdCBmcm9tID0gdGhpcy5fZnJvbTtcbiAgICBjb25zdCBsb29wID0gdGhpcy5fbG9vcDtcbiAgICBjb25zdCB0byA9IHRoaXMuX3RvO1xuICAgIGxldCBmYWN0b3I7XG4gICAgdGhpcy5fYWN0aXZlID0gZnJvbSAhPT0gdG8gJiYgKGxvb3AgfHwgKGVsYXBzZWQgPCBkdXJhdGlvbikpO1xuICAgIGlmICghdGhpcy5fYWN0aXZlKSB7XG4gICAgICB0aGlzLl90YXJnZXRbcHJvcF0gPSB0bztcbiAgICAgIHRoaXMuX25vdGlmeSh0cnVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGVsYXBzZWQgPCAwKSB7XG4gICAgICB0aGlzLl90YXJnZXRbcHJvcF0gPSBmcm9tO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmYWN0b3IgPSAoZWxhcHNlZCAvIGR1cmF0aW9uKSAlIDI7XG4gICAgZmFjdG9yID0gbG9vcCAmJiBmYWN0b3IgPiAxID8gMiAtIGZhY3RvciA6IGZhY3RvcjtcbiAgICBmYWN0b3IgPSB0aGlzLl9lYXNpbmcoTWF0aC5taW4oMSwgTWF0aC5tYXgoMCwgZmFjdG9yKSkpO1xuICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IHRoaXMuX2ZuKGZyb20sIHRvLCBmYWN0b3IpO1xuICB9XG4gIHdhaXQoKSB7XG4gICAgY29uc3QgcHJvbWlzZXMgPSB0aGlzLl9wcm9taXNlcyB8fCAodGhpcy5fcHJvbWlzZXMgPSBbXSk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgICAgcHJvbWlzZXMucHVzaCh7cmVzLCByZWp9KTtcbiAgICB9KTtcbiAgfVxuICBfbm90aWZ5KHJlc29sdmVkKSB7XG4gICAgY29uc3QgbWV0aG9kID0gcmVzb2x2ZWQgPyAncmVzJyA6ICdyZWonO1xuICAgIGNvbnN0IHByb21pc2VzID0gdGhpcy5fcHJvbWlzZXMgfHwgW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9taXNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvbWlzZXNbaV1bbWV0aG9kXSgpO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBudW1iZXJzID0gWyd4JywgJ3knLCAnYm9yZGVyV2lkdGgnLCAncmFkaXVzJywgJ3RlbnNpb24nXTtcbmNvbnN0IGNvbG9ycyA9IFsnY29sb3InLCAnYm9yZGVyQ29sb3InLCAnYmFja2dyb3VuZENvbG9yJ107XG5kZWZhdWx0cy5zZXQoJ2FuaW1hdGlvbicsIHtcbiAgZGVsYXk6IHVuZGVmaW5lZCxcbiAgZHVyYXRpb246IDEwMDAsXG4gIGVhc2luZzogJ2Vhc2VPdXRRdWFydCcsXG4gIGZuOiB1bmRlZmluZWQsXG4gIGZyb206IHVuZGVmaW5lZCxcbiAgbG9vcDogdW5kZWZpbmVkLFxuICB0bzogdW5kZWZpbmVkLFxuICB0eXBlOiB1bmRlZmluZWQsXG59KTtcbmNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSBPYmplY3Qua2V5cyhkZWZhdWx0cy5hbmltYXRpb24pO1xuZGVmYXVsdHMuZGVzY3JpYmUoJ2FuaW1hdGlvbicsIHtcbiAgX2ZhbGxiYWNrOiBmYWxzZSxcbiAgX2luZGV4YWJsZTogZmFsc2UsXG4gIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ29uUHJvZ3Jlc3MnICYmIG5hbWUgIT09ICdvbkNvbXBsZXRlJyAmJiBuYW1lICE9PSAnZm4nLFxufSk7XG5kZWZhdWx0cy5zZXQoJ2FuaW1hdGlvbnMnLCB7XG4gIGNvbG9yczoge1xuICAgIHR5cGU6ICdjb2xvcicsXG4gICAgcHJvcGVydGllczogY29sb3JzXG4gIH0sXG4gIG51bWJlcnM6IHtcbiAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICBwcm9wZXJ0aWVzOiBudW1iZXJzXG4gIH0sXG59KTtcbmRlZmF1bHRzLmRlc2NyaWJlKCdhbmltYXRpb25zJywge1xuICBfZmFsbGJhY2s6ICdhbmltYXRpb24nLFxufSk7XG5kZWZhdWx0cy5zZXQoJ3RyYW5zaXRpb25zJywge1xuICBhY3RpdmU6IHtcbiAgICBhbmltYXRpb246IHtcbiAgICAgIGR1cmF0aW9uOiA0MDBcbiAgICB9XG4gIH0sXG4gIHJlc2l6ZToge1xuICAgIGFuaW1hdGlvbjoge1xuICAgICAgZHVyYXRpb246IDBcbiAgICB9XG4gIH0sXG4gIHNob3c6IHtcbiAgICBhbmltYXRpb25zOiB7XG4gICAgICBjb2xvcnM6IHtcbiAgICAgICAgZnJvbTogJ3RyYW5zcGFyZW50J1xuICAgICAgfSxcbiAgICAgIHZpc2libGU6IHtcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICBkdXJhdGlvbjogMFxuICAgICAgfSxcbiAgICB9XG4gIH0sXG4gIGhpZGU6IHtcbiAgICBhbmltYXRpb25zOiB7XG4gICAgICBjb2xvcnM6IHtcbiAgICAgICAgdG86ICd0cmFuc3BhcmVudCdcbiAgICAgIH0sXG4gICAgICB2aXNpYmxlOiB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgZm46IHYgPT4gdiB8IDBcbiAgICAgIH0sXG4gICAgfVxuICB9XG59KTtcbmNsYXNzIEFuaW1hdGlvbnMge1xuICBjb25zdHJ1Y3RvcihjaGFydCwgY29uZmlnKSB7XG4gICAgdGhpcy5fY2hhcnQgPSBjaGFydDtcbiAgICB0aGlzLl9wcm9wZXJ0aWVzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuY29uZmlndXJlKGNvbmZpZyk7XG4gIH1cbiAgY29uZmlndXJlKGNvbmZpZykge1xuICAgIGlmICghaXNPYmplY3QoY29uZmlnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRlZFByb3BzID0gdGhpcy5fcHJvcGVydGllcztcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjb25maWcpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IGNmZyA9IGNvbmZpZ1trZXldO1xuICAgICAgaWYgKCFpc09iamVjdChjZmcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc29sdmVkID0ge307XG4gICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBhbmltYXRpb25PcHRpb25zKSB7XG4gICAgICAgIHJlc29sdmVkW29wdGlvbl0gPSBjZmdbb3B0aW9uXTtcbiAgICAgIH1cbiAgICAgIChpc0FycmF5KGNmZy5wcm9wZXJ0aWVzKSAmJiBjZmcucHJvcGVydGllcyB8fCBba2V5XSkuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgICBpZiAocHJvcCA9PT0ga2V5IHx8ICFhbmltYXRlZFByb3BzLmhhcyhwcm9wKSkge1xuICAgICAgICAgIGFuaW1hdGVkUHJvcHMuc2V0KHByb3AsIHJlc29sdmVkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgX2FuaW1hdGVPcHRpb25zKHRhcmdldCwgdmFsdWVzKSB7XG4gICAgY29uc3QgbmV3T3B0aW9ucyA9IHZhbHVlcy5vcHRpb25zO1xuICAgIGNvbnN0IG9wdGlvbnMgPSByZXNvbHZlVGFyZ2V0T3B0aW9ucyh0YXJnZXQsIG5ld09wdGlvbnMpO1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRpb25zID0gdGhpcy5fY3JlYXRlQW5pbWF0aW9ucyhvcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICBpZiAobmV3T3B0aW9ucy4kc2hhcmVkKSB7XG4gICAgICBhd2FpdEFsbCh0YXJnZXQub3B0aW9ucy4kYW5pbWF0aW9ucywgbmV3T3B0aW9ucykudGhlbigoKSA9PiB7XG4gICAgICAgIHRhcmdldC5vcHRpb25zID0gbmV3T3B0aW9ucztcbiAgICAgIH0sICgpID0+IHtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgfVxuICBfY3JlYXRlQW5pbWF0aW9ucyh0YXJnZXQsIHZhbHVlcykge1xuICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBbXTtcbiAgICBjb25zdCBydW5uaW5nID0gdGFyZ2V0LiRhbmltYXRpb25zIHx8ICh0YXJnZXQuJGFuaW1hdGlvbnMgPSB7fSk7XG4gICAgY29uc3QgcHJvcHMgPSBPYmplY3Qua2V5cyh2YWx1ZXMpO1xuICAgIGNvbnN0IGRhdGUgPSBEYXRlLm5vdygpO1xuICAgIGxldCBpO1xuICAgIGZvciAoaSA9IHByb3BzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBjb25zdCBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAocHJvcC5jaGFyQXQoMCkgPT09ICckJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wID09PSAnb3B0aW9ucycpIHtcbiAgICAgICAgYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuX2FuaW1hdGVPcHRpb25zKHRhcmdldCwgdmFsdWVzKSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbcHJvcF07XG4gICAgICBsZXQgYW5pbWF0aW9uID0gcnVubmluZ1twcm9wXTtcbiAgICAgIGNvbnN0IGNmZyA9IGFuaW1hdGVkUHJvcHMuZ2V0KHByb3ApO1xuICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICBpZiAoY2ZnICYmIGFuaW1hdGlvbi5hY3RpdmUoKSkge1xuICAgICAgICAgIGFuaW1hdGlvbi51cGRhdGUoY2ZnLCB2YWx1ZSwgZGF0ZSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYW5pbWF0aW9uLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWNmZyB8fCAhY2ZnLmR1cmF0aW9uKSB7XG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJ1bm5pbmdbcHJvcF0gPSBhbmltYXRpb24gPSBuZXcgQW5pbWF0aW9uKGNmZywgdGFyZ2V0LCBwcm9wLCB2YWx1ZSk7XG4gICAgICBhbmltYXRpb25zLnB1c2goYW5pbWF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gIH1cbiAgdXBkYXRlKHRhcmdldCwgdmFsdWVzKSB7XG4gICAgaWYgKHRoaXMuX3Byb3BlcnRpZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHZhbHVlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbnMgPSB0aGlzLl9jcmVhdGVBbmltYXRpb25zKHRhcmdldCwgdmFsdWVzKTtcbiAgICBpZiAoYW5pbWF0aW9ucy5sZW5ndGgpIHtcbiAgICAgIGFuaW1hdG9yLmFkZCh0aGlzLl9jaGFydCwgYW5pbWF0aW9ucyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGF3YWl0QWxsKGFuaW1hdGlvbnMsIHByb3BlcnRpZXMpIHtcbiAgY29uc3QgcnVubmluZyA9IFtdO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFuaW0gPSBhbmltYXRpb25zW2tleXNbaV1dO1xuICAgIGlmIChhbmltICYmIGFuaW0uYWN0aXZlKCkpIHtcbiAgICAgIHJ1bm5pbmcucHVzaChhbmltLndhaXQoKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBQcm9taXNlLmFsbChydW5uaW5nKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVUYXJnZXRPcHRpb25zKHRhcmdldCwgbmV3T3B0aW9ucykge1xuICBpZiAoIW5ld09wdGlvbnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IG9wdGlvbnMgPSB0YXJnZXQub3B0aW9ucztcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgdGFyZ2V0Lm9wdGlvbnMgPSBuZXdPcHRpb25zO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAob3B0aW9ucy4kc2hhcmVkKSB7XG4gICAgdGFyZ2V0Lm9wdGlvbnMgPSBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgeyRzaGFyZWQ6IGZhbHNlLCAkYW5pbWF0aW9uczoge319KTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gc2NhbGVDbGlwKHNjYWxlLCBhbGxvd2VkT3ZlcmZsb3cpIHtcbiAgY29uc3Qgb3B0cyA9IHNjYWxlICYmIHNjYWxlLm9wdGlvbnMgfHwge307XG4gIGNvbnN0IHJldmVyc2UgPSBvcHRzLnJldmVyc2U7XG4gIGNvbnN0IG1pbiA9IG9wdHMubWluID09PSB1bmRlZmluZWQgPyBhbGxvd2VkT3ZlcmZsb3cgOiAwO1xuICBjb25zdCBtYXggPSBvcHRzLm1heCA9PT0gdW5kZWZpbmVkID8gYWxsb3dlZE92ZXJmbG93IDogMDtcbiAgcmV0dXJuIHtcbiAgICBzdGFydDogcmV2ZXJzZSA/IG1heCA6IG1pbixcbiAgICBlbmQ6IHJldmVyc2UgPyBtaW4gOiBtYXhcbiAgfTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGlwKHhTY2FsZSwgeVNjYWxlLCBhbGxvd2VkT3ZlcmZsb3cpIHtcbiAgaWYgKGFsbG93ZWRPdmVyZmxvdyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgeCA9IHNjYWxlQ2xpcCh4U2NhbGUsIGFsbG93ZWRPdmVyZmxvdyk7XG4gIGNvbnN0IHkgPSBzY2FsZUNsaXAoeVNjYWxlLCBhbGxvd2VkT3ZlcmZsb3cpO1xuICByZXR1cm4ge1xuICAgIHRvcDogeS5lbmQsXG4gICAgcmlnaHQ6IHguZW5kLFxuICAgIGJvdHRvbTogeS5zdGFydCxcbiAgICBsZWZ0OiB4LnN0YXJ0XG4gIH07XG59XG5mdW5jdGlvbiB0b0NsaXAodmFsdWUpIHtcbiAgbGV0IHQsIHIsIGIsIGw7XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB0ID0gdmFsdWUudG9wO1xuICAgIHIgPSB2YWx1ZS5yaWdodDtcbiAgICBiID0gdmFsdWUuYm90dG9tO1xuICAgIGwgPSB2YWx1ZS5sZWZ0O1xuICB9IGVsc2Uge1xuICAgIHQgPSByID0gYiA9IGwgPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHRvcDogdCxcbiAgICByaWdodDogcixcbiAgICBib3R0b206IGIsXG4gICAgbGVmdDogbCxcbiAgICBkaXNhYmxlZDogdmFsdWUgPT09IGZhbHNlXG4gIH07XG59XG5mdW5jdGlvbiBnZXRTb3J0ZWREYXRhc2V0SW5kaWNlcyhjaGFydCwgZmlsdGVyVmlzaWJsZSkge1xuICBjb25zdCBrZXlzID0gW107XG4gIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuX2dldFNvcnRlZERhdGFzZXRNZXRhcyhmaWx0ZXJWaXNpYmxlKTtcbiAgbGV0IGksIGlsZW47XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBrZXlzLnB1c2gobWV0YXNldHNbaV0uaW5kZXgpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gYXBwbHlTdGFjayhzdGFjaywgdmFsdWUsIGRzSW5kZXgsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBrZXlzID0gc3RhY2sua2V5cztcbiAgY29uc3Qgc2luZ2xlTW9kZSA9IG9wdGlvbnMubW9kZSA9PT0gJ3NpbmdsZSc7XG4gIGxldCBpLCBpbGVuLCBkYXRhc2V0SW5kZXgsIG90aGVyVmFsdWU7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBkYXRhc2V0SW5kZXggPSAra2V5c1tpXTtcbiAgICBpZiAoZGF0YXNldEluZGV4ID09PSBkc0luZGV4KSB7XG4gICAgICBpZiAob3B0aW9ucy5hbGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb3RoZXJWYWx1ZSA9IHN0YWNrLnZhbHVlc1tkYXRhc2V0SW5kZXhdO1xuICAgIGlmIChpc051bWJlckZpbml0ZShvdGhlclZhbHVlKSAmJiAoc2luZ2xlTW9kZSB8fCAodmFsdWUgPT09IDAgfHwgc2lnbih2YWx1ZSkgPT09IHNpZ24ob3RoZXJWYWx1ZSkpKSkge1xuICAgICAgdmFsdWUgKz0gb3RoZXJWYWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY29udmVydE9iamVjdERhdGFUb0FycmF5KGRhdGEpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICBjb25zdCBhZGF0YSA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gIGxldCBpLCBpbGVuLCBrZXk7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgYWRhdGFbaV0gPSB7XG4gICAgICB4OiBrZXksXG4gICAgICB5OiBkYXRhW2tleV1cbiAgICB9O1xuICB9XG4gIHJldHVybiBhZGF0YTtcbn1cbmZ1bmN0aW9uIGlzU3RhY2tlZChzY2FsZSwgbWV0YSkge1xuICBjb25zdCBzdGFja2VkID0gc2NhbGUgJiYgc2NhbGUub3B0aW9ucy5zdGFja2VkO1xuICByZXR1cm4gc3RhY2tlZCB8fCAoc3RhY2tlZCA9PT0gdW5kZWZpbmVkICYmIG1ldGEuc3RhY2sgIT09IHVuZGVmaW5lZCk7XG59XG5mdW5jdGlvbiBnZXRTdGFja0tleShpbmRleFNjYWxlLCB2YWx1ZVNjYWxlLCBtZXRhKSB7XG4gIHJldHVybiBgJHtpbmRleFNjYWxlLmlkfS4ke3ZhbHVlU2NhbGUuaWR9LiR7bWV0YS5zdGFjayB8fCBtZXRhLnR5cGV9YDtcbn1cbmZ1bmN0aW9uIGdldFVzZXJCb3VuZHMoc2NhbGUpIHtcbiAgY29uc3Qge21pbiwgbWF4LCBtaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHNjYWxlLmdldFVzZXJCb3VuZHMoKTtcbiAgcmV0dXJuIHtcbiAgICBtaW46IG1pbkRlZmluZWQgPyBtaW4gOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksXG4gICAgbWF4OiBtYXhEZWZpbmVkID8gbWF4IDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG4gIH07XG59XG5mdW5jdGlvbiBnZXRPckNyZWF0ZVN0YWNrKHN0YWNrcywgc3RhY2tLZXksIGluZGV4VmFsdWUpIHtcbiAgY29uc3Qgc3ViU3RhY2sgPSBzdGFja3Nbc3RhY2tLZXldIHx8IChzdGFja3Nbc3RhY2tLZXldID0ge30pO1xuICByZXR1cm4gc3ViU3RhY2tbaW5kZXhWYWx1ZV0gfHwgKHN1YlN0YWNrW2luZGV4VmFsdWVdID0ge30pO1xufVxuZnVuY3Rpb24gZ2V0TGFzdEluZGV4SW5TdGFjayhzdGFjaywgdlNjYWxlLCBwb3NpdGl2ZSwgdHlwZSkge1xuICBmb3IgKGNvbnN0IG1ldGEgb2YgdlNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpLnJldmVyc2UoKSkge1xuICAgIGNvbnN0IHZhbHVlID0gc3RhY2tbbWV0YS5pbmRleF07XG4gICAgaWYgKChwb3NpdGl2ZSAmJiB2YWx1ZSA+IDApIHx8ICghcG9zaXRpdmUgJiYgdmFsdWUgPCAwKSkge1xuICAgICAgcmV0dXJuIG1ldGEuaW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gdXBkYXRlU3RhY2tzKGNvbnRyb2xsZXIsIHBhcnNlZCkge1xuICBjb25zdCB7Y2hhcnQsIF9jYWNoZWRNZXRhOiBtZXRhfSA9IGNvbnRyb2xsZXI7XG4gIGNvbnN0IHN0YWNrcyA9IGNoYXJ0Ll9zdGFja3MgfHwgKGNoYXJ0Ll9zdGFja3MgPSB7fSk7XG4gIGNvbnN0IHtpU2NhbGUsIHZTY2FsZSwgaW5kZXg6IGRhdGFzZXRJbmRleH0gPSBtZXRhO1xuICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICBjb25zdCBrZXkgPSBnZXRTdGFja0tleShpU2NhbGUsIHZTY2FsZSwgbWV0YSk7XG4gIGNvbnN0IGlsZW4gPSBwYXJzZWQubGVuZ3RoO1xuICBsZXQgc3RhY2s7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgY29uc3QgaXRlbSA9IHBhcnNlZFtpXTtcbiAgICBjb25zdCB7W2lBeGlzXTogaW5kZXgsIFt2QXhpc106IHZhbHVlfSA9IGl0ZW07XG4gICAgY29uc3QgaXRlbVN0YWNrcyA9IGl0ZW0uX3N0YWNrcyB8fCAoaXRlbS5fc3RhY2tzID0ge30pO1xuICAgIHN0YWNrID0gaXRlbVN0YWNrc1t2QXhpc10gPSBnZXRPckNyZWF0ZVN0YWNrKHN0YWNrcywga2V5LCBpbmRleCk7XG4gICAgc3RhY2tbZGF0YXNldEluZGV4XSA9IHZhbHVlO1xuICAgIHN0YWNrLl90b3AgPSBnZXRMYXN0SW5kZXhJblN0YWNrKHN0YWNrLCB2U2NhbGUsIHRydWUsIG1ldGEudHlwZSk7XG4gICAgc3RhY2suX2JvdHRvbSA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgZmFsc2UsIG1ldGEudHlwZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEZpcnN0U2NhbGVJZChjaGFydCwgYXhpcykge1xuICBjb25zdCBzY2FsZXMgPSBjaGFydC5zY2FsZXM7XG4gIHJldHVybiBPYmplY3Qua2V5cyhzY2FsZXMpLmZpbHRlcihrZXkgPT4gc2NhbGVzW2tleV0uYXhpcyA9PT0gYXhpcykuc2hpZnQoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFzZXRDb250ZXh0KHBhcmVudCwgaW5kZXgpIHtcbiAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LFxuICAgIHtcbiAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICBkYXRhc2V0OiB1bmRlZmluZWQsXG4gICAgICBkYXRhc2V0SW5kZXg6IGluZGV4LFxuICAgICAgaW5kZXgsXG4gICAgICBtb2RlOiAnZGVmYXVsdCcsXG4gICAgICB0eXBlOiAnZGF0YXNldCdcbiAgICB9XG4gICk7XG59XG5mdW5jdGlvbiBjcmVhdGVEYXRhQ29udGV4dChwYXJlbnQsIGluZGV4LCBlbGVtZW50KSB7XG4gIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgZGF0YUluZGV4OiBpbmRleCxcbiAgICBwYXJzZWQ6IHVuZGVmaW5lZCxcbiAgICByYXc6IHVuZGVmaW5lZCxcbiAgICBlbGVtZW50LFxuICAgIGluZGV4LFxuICAgIG1vZGU6ICdkZWZhdWx0JyxcbiAgICB0eXBlOiAnZGF0YSdcbiAgfSk7XG59XG5mdW5jdGlvbiBjbGVhclN0YWNrcyhtZXRhLCBpdGVtcykge1xuICBjb25zdCBkYXRhc2V0SW5kZXggPSBtZXRhLmNvbnRyb2xsZXIuaW5kZXg7XG4gIGNvbnN0IGF4aXMgPSBtZXRhLnZTY2FsZSAmJiBtZXRhLnZTY2FsZS5heGlzO1xuICBpZiAoIWF4aXMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaXRlbXMgPSBpdGVtcyB8fCBtZXRhLl9wYXJzZWQ7XG4gIGZvciAoY29uc3QgcGFyc2VkIG9mIGl0ZW1zKSB7XG4gICAgY29uc3Qgc3RhY2tzID0gcGFyc2VkLl9zdGFja3M7XG4gICAgaWYgKCFzdGFja3MgfHwgc3RhY2tzW2F4aXNdID09PSB1bmRlZmluZWQgfHwgc3RhY2tzW2F4aXNdW2RhdGFzZXRJbmRleF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkZWxldGUgc3RhY2tzW2F4aXNdW2RhdGFzZXRJbmRleF07XG4gIH1cbn1cbmNvbnN0IGlzRGlyZWN0VXBkYXRlTW9kZSA9IChtb2RlKSA9PiBtb2RlID09PSAncmVzZXQnIHx8IG1vZGUgPT09ICdub25lJztcbmNvbnN0IGNsb25lSWZOb3RTaGFyZWQgPSAoY2FjaGVkLCBzaGFyZWQpID0+IHNoYXJlZCA/IGNhY2hlZCA6IE9iamVjdC5hc3NpZ24oe30sIGNhY2hlZCk7XG5jb25zdCBjcmVhdGVTdGFjayA9IChjYW5TdGFjaywgbWV0YSwgY2hhcnQpID0+IGNhblN0YWNrICYmICFtZXRhLmhpZGRlbiAmJiBtZXRhLl9zdGFja2VkXG4gICYmIHtrZXlzOiBnZXRTb3J0ZWREYXRhc2V0SW5kaWNlcyhjaGFydCwgdHJ1ZSksIHZhbHVlczogbnVsbH07XG5jbGFzcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKGNoYXJ0LCBkYXRhc2V0SW5kZXgpIHtcbiAgICB0aGlzLmNoYXJ0ID0gY2hhcnQ7XG4gICAgdGhpcy5fY3R4ID0gY2hhcnQuY3R4O1xuICAgIHRoaXMuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG4gICAgdGhpcy5fY2FjaGVkRGF0YU9wdHMgPSB7fTtcbiAgICB0aGlzLl9jYWNoZWRNZXRhID0gdGhpcy5nZXRNZXRhKCk7XG4gICAgdGhpcy5fdHlwZSA9IHRoaXMuX2NhY2hlZE1ldGEudHlwZTtcbiAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fcGFyc2luZyA9IGZhbHNlO1xuICAgIHRoaXMuX2RhdGEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fb2JqZWN0RGF0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zaGFyZWRPcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2RyYXdTdGFydCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9kcmF3Q291bnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gZmFsc2U7XG4gICAgdGhpcy5zdXBwb3J0c0RlY2ltYXRpb24gPSBmYWxzZTtcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICB0aGlzLmNvbmZpZ3VyZSgpO1xuICAgIHRoaXMubGlua1NjYWxlcygpO1xuICAgIG1ldGEuX3N0YWNrZWQgPSBpc1N0YWNrZWQobWV0YS52U2NhbGUsIG1ldGEpO1xuICAgIHRoaXMuYWRkRWxlbWVudHMoKTtcbiAgfVxuICB1cGRhdGVJbmRleChkYXRhc2V0SW5kZXgpIHtcbiAgICBpZiAodGhpcy5pbmRleCAhPT0gZGF0YXNldEluZGV4KSB7XG4gICAgICBjbGVhclN0YWNrcyh0aGlzLl9jYWNoZWRNZXRhKTtcbiAgICB9XG4gICAgdGhpcy5pbmRleCA9IGRhdGFzZXRJbmRleDtcbiAgfVxuICBsaW5rU2NhbGVzKCkge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgY29uc3QgY2hvb3NlSWQgPSAoYXhpcywgeCwgeSwgcikgPT4gYXhpcyA9PT0gJ3gnID8geCA6IGF4aXMgPT09ICdyJyA/IHIgOiB5O1xuICAgIGNvbnN0IHhpZCA9IG1ldGEueEF4aXNJRCA9IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQueEF4aXNJRCwgZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCAneCcpKTtcbiAgICBjb25zdCB5aWQgPSBtZXRhLnlBeGlzSUQgPSB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnlBeGlzSUQsIGdldEZpcnN0U2NhbGVJZChjaGFydCwgJ3knKSk7XG4gICAgY29uc3QgcmlkID0gbWV0YS5yQXhpc0lEID0gdmFsdWVPckRlZmF1bHQoZGF0YXNldC5yQXhpc0lELCBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsICdyJykpO1xuICAgIGNvbnN0IGluZGV4QXhpcyA9IG1ldGEuaW5kZXhBeGlzO1xuICAgIGNvbnN0IGlpZCA9IG1ldGEuaUF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeGlkLCB5aWQsIHJpZCk7XG4gICAgY29uc3QgdmlkID0gbWV0YS52QXhpc0lEID0gY2hvb3NlSWQoaW5kZXhBeGlzLCB5aWQsIHhpZCwgcmlkKTtcbiAgICBtZXRhLnhTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZCh4aWQpO1xuICAgIG1ldGEueVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHlpZCk7XG4gICAgbWV0YS5yU2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQocmlkKTtcbiAgICBtZXRhLmlTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZChpaWQpO1xuICAgIG1ldGEudlNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHZpZCk7XG4gIH1cbiAgZ2V0RGF0YXNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3RoaXMuaW5kZXhdO1xuICB9XG4gIGdldE1ldGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEodGhpcy5pbmRleCk7XG4gIH1cbiAgZ2V0U2NhbGVGb3JJZChzY2FsZUlEKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhcnQuc2NhbGVzW3NjYWxlSURdO1xuICB9XG4gIF9nZXRPdGhlclNjYWxlKHNjYWxlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgcmV0dXJuIHNjYWxlID09PSBtZXRhLmlTY2FsZVxuICAgICAgPyBtZXRhLnZTY2FsZVxuICAgICAgOiBtZXRhLmlTY2FsZTtcbiAgfVxuICByZXNldCgpIHtcbiAgICB0aGlzLl91cGRhdGUoJ3Jlc2V0Jyk7XG4gIH1cbiAgX2Rlc3Ryb3koKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgaWYgKHRoaXMuX2RhdGEpIHtcbiAgICAgIHVubGlzdGVuQXJyYXlFdmVudHModGhpcy5fZGF0YSwgdGhpcyk7XG4gICAgfVxuICAgIGlmIChtZXRhLl9zdGFja2VkKSB7XG4gICAgICBjbGVhclN0YWNrcyhtZXRhKTtcbiAgICB9XG4gIH1cbiAgX2RhdGFDaGVjaygpIHtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgY29uc3QgZGF0YSA9IGRhdGFzZXQuZGF0YSB8fCAoZGF0YXNldC5kYXRhID0gW10pO1xuICAgIGNvbnN0IF9kYXRhID0gdGhpcy5fZGF0YTtcbiAgICBpZiAoaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSBjb252ZXJ0T2JqZWN0RGF0YVRvQXJyYXkoZGF0YSk7XG4gICAgfSBlbHNlIGlmIChfZGF0YSAhPT0gZGF0YSkge1xuICAgICAgaWYgKF9kYXRhKSB7XG4gICAgICAgIHVubGlzdGVuQXJyYXlFdmVudHMoX2RhdGEsIHRoaXMpO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgIG1ldGEuX3BhcnNlZCA9IFtdO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShkYXRhKSkge1xuICAgICAgICBsaXN0ZW5BcnJheUV2ZW50cyhkYXRhLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICB9XG4gIH1cbiAgYWRkRWxlbWVudHMoKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgdGhpcy5fZGF0YUNoZWNrKCk7XG4gICAgaWYgKHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlKSB7XG4gICAgICBtZXRhLmRhdGFzZXQgPSBuZXcgdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUoKTtcbiAgICB9XG4gIH1cbiAgYnVpbGRPclVwZGF0ZUVsZW1lbnRzKHJlc2V0TmV3RWxlbWVudHMpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgbGV0IHN0YWNrQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2RhdGFDaGVjaygpO1xuICAgIGNvbnN0IG9sZFN0YWNrZWQgPSBtZXRhLl9zdGFja2VkO1xuICAgIG1ldGEuX3N0YWNrZWQgPSBpc1N0YWNrZWQobWV0YS52U2NhbGUsIG1ldGEpO1xuICAgIGlmIChtZXRhLnN0YWNrICE9PSBkYXRhc2V0LnN0YWNrKSB7XG4gICAgICBzdGFja0NoYW5nZWQgPSB0cnVlO1xuICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICBtZXRhLnN0YWNrID0gZGF0YXNldC5zdGFjaztcbiAgICB9XG4gICAgdGhpcy5fcmVzeW5jRWxlbWVudHMocmVzZXROZXdFbGVtZW50cyk7XG4gICAgaWYgKHN0YWNrQ2hhbmdlZCB8fCBvbGRTdGFja2VkICE9PSBtZXRhLl9zdGFja2VkKSB7XG4gICAgICB1cGRhdGVTdGFja3ModGhpcywgbWV0YS5fcGFyc2VkKTtcbiAgICB9XG4gIH1cbiAgY29uZmlndXJlKCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0U2NvcGVLZXlzKHRoaXMuX3R5cGUpO1xuICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXModGhpcy5nZXREYXRhc2V0KCksIHNjb3BlS2V5cywgdHJ1ZSk7XG4gICAgdGhpcy5vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIHRoaXMuX3BhcnNpbmcgPSB0aGlzLm9wdGlvbnMucGFyc2luZztcbiAgICB0aGlzLl9jYWNoZWREYXRhT3B0cyA9IHt9O1xuICB9XG4gIHBhcnNlKHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHtfY2FjaGVkTWV0YTogbWV0YSwgX2RhdGE6IGRhdGF9ID0gdGhpcztcbiAgICBjb25zdCB7aVNjYWxlLCBfc3RhY2tlZH0gPSBtZXRhO1xuICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgbGV0IHNvcnRlZCA9IHN0YXJ0ID09PSAwICYmIGNvdW50ID09PSBkYXRhLmxlbmd0aCA/IHRydWUgOiBtZXRhLl9zb3J0ZWQ7XG4gICAgbGV0IHByZXYgPSBzdGFydCA+IDAgJiYgbWV0YS5fcGFyc2VkW3N0YXJ0IC0gMV07XG4gICAgbGV0IGksIGN1ciwgcGFyc2VkO1xuICAgIGlmICh0aGlzLl9wYXJzaW5nID09PSBmYWxzZSkge1xuICAgICAgbWV0YS5fcGFyc2VkID0gZGF0YTtcbiAgICAgIG1ldGEuX3NvcnRlZCA9IHRydWU7XG4gICAgICBwYXJzZWQgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNBcnJheShkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZCA9IHRoaXMucGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICB9XG4gICAgICBjb25zdCBpc05vdEluT3JkZXJDb21wYXJlZFRvUHJldiA9ICgpID0+IGN1cltpQXhpc10gPT09IG51bGwgfHwgKHByZXYgJiYgY3VyW2lBeGlzXSA8IHByZXZbaUF4aXNdKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICAgIG1ldGEuX3BhcnNlZFtpICsgc3RhcnRdID0gY3VyID0gcGFyc2VkW2ldO1xuICAgICAgICBpZiAoc29ydGVkKSB7XG4gICAgICAgICAgaWYgKGlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2KCkpIHtcbiAgICAgICAgICAgIHNvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcmV2ID0gY3VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBtZXRhLl9zb3J0ZWQgPSBzb3J0ZWQ7XG4gICAgfVxuICAgIGlmIChfc3RhY2tlZCkge1xuICAgICAgdXBkYXRlU3RhY2tzKHRoaXMsIHBhcnNlZCk7XG4gICAgfVxuICB9XG4gIHBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCB7aVNjYWxlLCB2U2NhbGV9ID0gbWV0YTtcbiAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgY29uc3QgbGFiZWxzID0gaVNjYWxlLmdldExhYmVscygpO1xuICAgIGNvbnN0IHNpbmdsZVNjYWxlID0gaVNjYWxlID09PSB2U2NhbGU7XG4gICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBsZXQgaSwgaWxlbiwgaW5kZXg7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgW2lBeGlzXTogc2luZ2xlU2NhbGUgfHwgaVNjYWxlLnBhcnNlKGxhYmVsc1tpbmRleF0sIGluZGV4KSxcbiAgICAgICAgW3ZBeGlzXTogdlNjYWxlLnBhcnNlKGRhdGFbaW5kZXhdLCBpbmRleClcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cbiAgcGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qge3hTY2FsZSwgeVNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBsZXQgaSwgaWxlbiwgaW5kZXgsIGl0ZW07XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgeDogeFNjYWxlLnBhcnNlKGl0ZW1bMF0sIGluZGV4KSxcbiAgICAgICAgeTogeVNjYWxlLnBhcnNlKGl0ZW1bMV0sIGluZGV4KVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qge3hTY2FsZSwgeVNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3Qge3hBeGlzS2V5ID0gJ3gnLCB5QXhpc0tleSA9ICd5J30gPSB0aGlzLl9wYXJzaW5nO1xuICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgICBwYXJzZWRbaV0gPSB7XG4gICAgICAgIHg6IHhTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KGl0ZW0sIHhBeGlzS2V5KSwgaW5kZXgpLFxuICAgICAgICB5OiB5U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB5QXhpc0tleSksIGluZGV4KVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBnZXRQYXJzZWQoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGVkTWV0YS5fcGFyc2VkW2luZGV4XTtcbiAgfVxuICBnZXREYXRhRWxlbWVudChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICB9XG4gIGFwcGx5U3RhY2soc2NhbGUsIHBhcnNlZCwgbW9kZSkge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcnNlZFtzY2FsZS5heGlzXTtcbiAgICBjb25zdCBzdGFjayA9IHtcbiAgICAgIGtleXM6IGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCB0cnVlKSxcbiAgICAgIHZhbHVlczogcGFyc2VkLl9zdGFja3Nbc2NhbGUuYXhpc11cbiAgICB9O1xuICAgIHJldHVybiBhcHBseVN0YWNrKHN0YWNrLCB2YWx1ZSwgbWV0YS5pbmRleCwge21vZGV9KTtcbiAgfVxuICB1cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKSB7XG4gICAgY29uc3QgcGFyc2VkVmFsdWUgPSBwYXJzZWRbc2NhbGUuYXhpc107XG4gICAgbGV0IHZhbHVlID0gcGFyc2VkVmFsdWUgPT09IG51bGwgPyBOYU4gOiBwYXJzZWRWYWx1ZTtcbiAgICBjb25zdCB2YWx1ZXMgPSBzdGFjayAmJiBwYXJzZWQuX3N0YWNrc1tzY2FsZS5heGlzXTtcbiAgICBpZiAoc3RhY2sgJiYgdmFsdWVzKSB7XG4gICAgICBzdGFjay52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICB2YWx1ZSA9IGFwcGx5U3RhY2soc3RhY2ssIHBhcnNlZFZhbHVlLCB0aGlzLl9jYWNoZWRNZXRhLmluZGV4KTtcbiAgICB9XG4gICAgcmFuZ2UubWluID0gTWF0aC5taW4ocmFuZ2UubWluLCB2YWx1ZSk7XG4gICAgcmFuZ2UubWF4ID0gTWF0aC5tYXgocmFuZ2UubWF4LCB2YWx1ZSk7XG4gIH1cbiAgZ2V0TWluTWF4KHNjYWxlLCBjYW5TdGFjaykge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IF9wYXJzZWQgPSBtZXRhLl9wYXJzZWQ7XG4gICAgY29uc3Qgc29ydGVkID0gbWV0YS5fc29ydGVkICYmIHNjYWxlID09PSBtZXRhLmlTY2FsZTtcbiAgICBjb25zdCBpbGVuID0gX3BhcnNlZC5sZW5ndGg7XG4gICAgY29uc3Qgb3RoZXJTY2FsZSA9IHRoaXMuX2dldE90aGVyU2NhbGUoc2NhbGUpO1xuICAgIGNvbnN0IHN0YWNrID0gY3JlYXRlU3RhY2soY2FuU3RhY2ssIG1ldGEsIHRoaXMuY2hhcnQpO1xuICAgIGNvbnN0IHJhbmdlID0ge21pbjogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBtYXg6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWX07XG4gICAgY29uc3Qge21pbjogb3RoZXJNaW4sIG1heDogb3RoZXJNYXh9ID0gZ2V0VXNlckJvdW5kcyhvdGhlclNjYWxlKTtcbiAgICBsZXQgaSwgcGFyc2VkO1xuICAgIGZ1bmN0aW9uIF9za2lwKCkge1xuICAgICAgcGFyc2VkID0gX3BhcnNlZFtpXTtcbiAgICAgIGNvbnN0IG90aGVyVmFsdWUgPSBwYXJzZWRbb3RoZXJTY2FsZS5heGlzXTtcbiAgICAgIHJldHVybiAhaXNOdW1iZXJGaW5pdGUocGFyc2VkW3NjYWxlLmF4aXNdKSB8fCBvdGhlck1pbiA+IG90aGVyVmFsdWUgfHwgb3RoZXJNYXggPCBvdGhlclZhbHVlO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpZiAoX3NraXAoKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgICBpZiAoc29ydGVkKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc29ydGVkKSB7XG4gICAgICBmb3IgKGkgPSBpbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgaWYgKF9za2lwKCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG4gIGdldEFsbFBhcnNlZFZhbHVlcyhzY2FsZSkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuX2NhY2hlZE1ldGEuX3BhcnNlZDtcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHBhcnNlZC5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHZhbHVlID0gcGFyc2VkW2ldW3NjYWxlLmF4aXNdO1xuICAgICAgaWYgKGlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbiAgZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiBpU2NhbGUgPyAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pIDogJycsXG4gICAgICB2YWx1ZTogdlNjYWxlID8gJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKSA6ICcnXG4gICAgfTtcbiAgfVxuICBfdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICB0aGlzLnVwZGF0ZShtb2RlIHx8ICdkZWZhdWx0Jyk7XG4gICAgbWV0YS5fY2xpcCA9IHRvQ2xpcCh2YWx1ZU9yRGVmYXVsdCh0aGlzLm9wdGlvbnMuY2xpcCwgZGVmYXVsdENsaXAobWV0YS54U2NhbGUsIG1ldGEueVNjYWxlLCB0aGlzLmdldE1heE92ZXJmbG93KCkpKSk7XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHt9XG4gIGRyYXcoKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5fY3R4O1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBlbGVtZW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICBjb25zdCBhcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgIGNvbnN0IGFjdGl2ZSA9IFtdO1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fZHJhd1N0YXJ0IHx8IDA7XG4gICAgY29uc3QgY291bnQgPSB0aGlzLl9kcmF3Q291bnQgfHwgKGVsZW1lbnRzLmxlbmd0aCAtIHN0YXJ0KTtcbiAgICBjb25zdCBkcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRoaXMub3B0aW9ucy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcDtcbiAgICBsZXQgaTtcbiAgICBpZiAobWV0YS5kYXRhc2V0KSB7XG4gICAgICBtZXRhLmRhdGFzZXQuZHJhdyhjdHgsIGFyZWEsIHN0YXJ0LCBjb3VudCk7XG4gICAgfVxuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICBpZiAoZWxlbWVudC5oaWRkZW4pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoZWxlbWVudC5hY3RpdmUgJiYgZHJhd0FjdGl2ZUVsZW1lbnRzT25Ub3ApIHtcbiAgICAgICAgYWN0aXZlLnB1c2goZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LmRyYXcoY3R4LCBhcmVhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZS5sZW5ndGg7ICsraSkge1xuICAgICAgYWN0aXZlW2ldLmRyYXcoY3R4LCBhcmVhKTtcbiAgICB9XG4gIH1cbiAgZ2V0U3R5bGUoaW5kZXgsIGFjdGl2ZSkge1xuICAgIGNvbnN0IG1vZGUgPSBhY3RpdmUgPyAnYWN0aXZlJyA6ICdkZWZhdWx0JztcbiAgICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZCAmJiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXRcbiAgICAgID8gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpXG4gICAgICA6IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCB8fCAwLCBtb2RlKTtcbiAgfVxuICBnZXRDb250ZXh0KGluZGV4LCBhY3RpdmUsIG1vZGUpIHtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgbGV0IGNvbnRleHQ7XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9jYWNoZWRNZXRhLmRhdGEubGVuZ3RoKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhW2luZGV4XTtcbiAgICAgIGNvbnRleHQgPSBlbGVtZW50LiRjb250ZXh0IHx8XG4gICAgICAgIChlbGVtZW50LiRjb250ZXh0ID0gY3JlYXRlRGF0YUNvbnRleHQodGhpcy5nZXRDb250ZXh0KCksIGluZGV4LCBlbGVtZW50KSk7XG4gICAgICBjb250ZXh0LnBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgIGNvbnRleHQucmF3ID0gZGF0YXNldC5kYXRhW2luZGV4XTtcbiAgICAgIGNvbnRleHQuaW5kZXggPSBjb250ZXh0LmRhdGFJbmRleCA9IGluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0ID0gdGhpcy4kY29udGV4dCB8fFxuICAgICAgICAodGhpcy4kY29udGV4dCA9IGNyZWF0ZURhdGFzZXRDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLmluZGV4KSk7XG4gICAgICBjb250ZXh0LmRhdGFzZXQgPSBkYXRhc2V0O1xuICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICB9XG4gICAgY29udGV4dC5hY3RpdmUgPSAhIWFjdGl2ZTtcbiAgICBjb250ZXh0Lm1vZGUgPSBtb2RlO1xuICAgIHJldHVybiBjb250ZXh0O1xuICB9XG4gIHJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSkge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhc2V0RWxlbWVudFR5cGUuaWQsIG1vZGUpO1xuICB9XG4gIHJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZUVsZW1lbnRPcHRpb25zKHRoaXMuZGF0YUVsZW1lbnRUeXBlLmlkLCBtb2RlLCBpbmRleCk7XG4gIH1cbiAgX3Jlc29sdmVFbGVtZW50T3B0aW9ucyhlbGVtZW50VHlwZSwgbW9kZSA9ICdkZWZhdWx0JywgaW5kZXgpIHtcbiAgICBjb25zdCBhY3RpdmUgPSBtb2RlID09PSAnYWN0aXZlJztcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlZERhdGFPcHRzO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gZWxlbWVudFR5cGUgKyAnLScgKyBtb2RlO1xuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlW2NhY2hlS2V5XTtcbiAgICBjb25zdCBzaGFyaW5nID0gdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nICYmIGRlZmluZWQoaW5kZXgpO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIHJldHVybiBjbG9uZUlmTm90U2hhcmVkKGNhY2hlZCwgc2hhcmluZyk7XG4gICAgfVxuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0RWxlbWVudFNjb3BlS2V5cyh0aGlzLl90eXBlLCBlbGVtZW50VHlwZSk7XG4gICAgY29uc3QgcHJlZml4ZXMgPSBhY3RpdmUgPyBbYCR7ZWxlbWVudFR5cGV9SG92ZXJgLCAnaG92ZXInLCBlbGVtZW50VHlwZSwgJyddIDogW2VsZW1lbnRUeXBlLCAnJ107XG4gICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKGRlZmF1bHRzLmVsZW1lbnRzW2VsZW1lbnRUeXBlXSk7XG4gICAgY29uc3QgY29udGV4dCA9ICgpID0+IHRoaXMuZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlKTtcbiAgICBjb25zdCB2YWx1ZXMgPSBjb25maWcucmVzb2x2ZU5hbWVkT3B0aW9ucyhzY29wZXMsIG5hbWVzLCBjb250ZXh0LCBwcmVmaXhlcyk7XG4gICAgaWYgKHZhbHVlcy4kc2hhcmVkKSB7XG4gICAgICB2YWx1ZXMuJHNoYXJlZCA9IHNoYXJpbmc7XG4gICAgICBjYWNoZVtjYWNoZUtleV0gPSBPYmplY3QuZnJlZXplKGNsb25lSWZOb3RTaGFyZWQodmFsdWVzLCBzaGFyaW5nKSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbiAgX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCB0cmFuc2l0aW9uLCBhY3RpdmUpIHtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZWREYXRhT3B0cztcbiAgICBjb25zdCBjYWNoZUtleSA9IGBhbmltYXRpb24tJHt0cmFuc2l0aW9ufWA7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGVbY2FjaGVLZXldO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGxldCBvcHRpb25zO1xuICAgIGlmIChjaGFydC5vcHRpb25zLmFuaW1hdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgICAgY29uc3Qgc2NvcGVLZXlzID0gY29uZmlnLmRhdGFzZXRBbmltYXRpb25TY29wZUtleXModGhpcy5fdHlwZSwgdHJhbnNpdGlvbik7XG4gICAgICBjb25zdCBzY29wZXMgPSBjb25maWcuZ2V0T3B0aW9uU2NvcGVzKHRoaXMuZ2V0RGF0YXNldCgpLCBzY29wZUtleXMpO1xuICAgICAgb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihzY29wZXMsIHRoaXMuZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlLCB0cmFuc2l0aW9uKSk7XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9ucyhjaGFydCwgb3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGlvbnMpO1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2NhY2hlYWJsZSkge1xuICAgICAgY2FjaGVbY2FjaGVLZXldID0gT2JqZWN0LmZyZWV6ZShhbmltYXRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gIH1cbiAgZ2V0U2hhcmVkT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zLiRzaGFyZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NoYXJlZE9wdGlvbnMgfHwgKHRoaXMuX3NoYXJlZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSk7XG4gIH1cbiAgaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucykge1xuICAgIHJldHVybiAhc2hhcmVkT3B0aW9ucyB8fCBpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkgfHwgdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICB9XG4gIF9nZXRTaGFyZWRPcHRpb25zKHN0YXJ0LCBtb2RlKSB7XG4gICAgY29uc3QgZmlyc3RPcHRzID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICBjb25zdCBwcmV2aW91c2x5U2hhcmVkT3B0aW9ucyA9IHRoaXMuX3NoYXJlZE9wdGlvbnM7XG4gICAgY29uc3Qgc2hhcmVkT3B0aW9ucyA9IHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhmaXJzdE9wdHMpO1xuICAgIGNvbnN0IGluY2x1ZGVPcHRpb25zID0gdGhpcy5pbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKSB8fCAoc2hhcmVkT3B0aW9ucyAhPT0gcHJldmlvdXNseVNoYXJlZE9wdGlvbnMpO1xuICAgIHRoaXMudXBkYXRlU2hhcmVkT3B0aW9ucyhzaGFyZWRPcHRpb25zLCBtb2RlLCBmaXJzdE9wdHMpO1xuICAgIHJldHVybiB7c2hhcmVkT3B0aW9ucywgaW5jbHVkZU9wdGlvbnN9O1xuICB9XG4gIHVwZGF0ZUVsZW1lbnQoZWxlbWVudCwgaW5kZXgsIHByb3BlcnRpZXMsIG1vZGUpIHtcbiAgICBpZiAoaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpKSB7XG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgbW9kZSkudXBkYXRlKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgIH1cbiAgfVxuICB1cGRhdGVTaGFyZWRPcHRpb25zKHNoYXJlZE9wdGlvbnMsIG1vZGUsIG5ld09wdGlvbnMpIHtcbiAgICBpZiAoc2hhcmVkT3B0aW9ucyAmJiAhaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpKSB7XG4gICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpLnVwZGF0ZShzaGFyZWRPcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgX3NldFN0eWxlKGVsZW1lbnQsIGluZGV4LCBtb2RlLCBhY3RpdmUpIHtcbiAgICBlbGVtZW50LmFjdGl2ZSA9IGFjdGl2ZTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5nZXRTdHlsZShpbmRleCwgYWN0aXZlKTtcbiAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgbW9kZSwgYWN0aXZlKS51cGRhdGUoZWxlbWVudCwge1xuICAgICAgb3B0aW9uczogKCFhY3RpdmUgJiYgdGhpcy5nZXRTaGFyZWRPcHRpb25zKG9wdGlvbnMpKSB8fCBvcHRpb25zXG4gICAgfSk7XG4gIH1cbiAgcmVtb3ZlSG92ZXJTdHlsZShlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsICdhY3RpdmUnLCBmYWxzZSk7XG4gIH1cbiAgc2V0SG92ZXJTdHlsZShlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsICdhY3RpdmUnLCB0cnVlKTtcbiAgfVxuICBfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGUoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YXNldDtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgdW5kZWZpbmVkLCAnYWN0aXZlJywgZmFsc2UpO1xuICAgIH1cbiAgfVxuICBfc2V0RGF0YXNldEhvdmVyU3R5bGUoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YXNldDtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgdW5kZWZpbmVkLCAnYWN0aXZlJywgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIF9yZXN5bmNFbGVtZW50cyhyZXNldE5ld0VsZW1lbnRzKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgY29uc3QgZWxlbWVudHMgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGE7XG4gICAgZm9yIChjb25zdCBbbWV0aG9kLCBhcmcxLCBhcmcyXSBvZiB0aGlzLl9zeW5jTGlzdCkge1xuICAgICAgdGhpc1ttZXRob2RdKGFyZzEsIGFyZzIpO1xuICAgIH1cbiAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgIGNvbnN0IG51bU1ldGEgPSBlbGVtZW50cy5sZW5ndGg7XG4gICAgY29uc3QgbnVtRGF0YSA9IGRhdGEubGVuZ3RoO1xuICAgIGNvbnN0IGNvdW50ID0gTWF0aC5taW4obnVtRGF0YSwgbnVtTWV0YSk7XG4gICAgaWYgKGNvdW50KSB7XG4gICAgICB0aGlzLnBhcnNlKDAsIGNvdW50KTtcbiAgICB9XG4gICAgaWYgKG51bURhdGEgPiBudW1NZXRhKSB7XG4gICAgICB0aGlzLl9pbnNlcnRFbGVtZW50cyhudW1NZXRhLCBudW1EYXRhIC0gbnVtTWV0YSwgcmVzZXROZXdFbGVtZW50cyk7XG4gICAgfSBlbHNlIGlmIChudW1EYXRhIDwgbnVtTWV0YSkge1xuICAgICAgdGhpcy5fcmVtb3ZlRWxlbWVudHMobnVtRGF0YSwgbnVtTWV0YSAtIG51bURhdGEpO1xuICAgIH1cbiAgfVxuICBfaW5zZXJ0RWxlbWVudHMoc3RhcnQsIGNvdW50LCByZXNldE5ld0VsZW1lbnRzID0gdHJ1ZSkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGRhdGEgPSBtZXRhLmRhdGE7XG4gICAgY29uc3QgZW5kID0gc3RhcnQgKyBjb3VudDtcbiAgICBsZXQgaTtcbiAgICBjb25zdCBtb3ZlID0gKGFycikgPT4ge1xuICAgICAgYXJyLmxlbmd0aCArPSBjb3VudDtcbiAgICAgIGZvciAoaSA9IGFyci5sZW5ndGggLSAxOyBpID49IGVuZDsgaS0tKSB7XG4gICAgICAgIGFycltpXSA9IGFycltpIC0gY291bnRdO1xuICAgICAgfVxuICAgIH07XG4gICAgbW92ZShkYXRhKTtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICBkYXRhW2ldID0gbmV3IHRoaXMuZGF0YUVsZW1lbnRUeXBlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICBtb3ZlKG1ldGEuX3BhcnNlZCk7XG4gICAgfVxuICAgIHRoaXMucGFyc2Uoc3RhcnQsIGNvdW50KTtcbiAgICBpZiAocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhkYXRhLCBzdGFydCwgY291bnQsICdyZXNldCcpO1xuICAgIH1cbiAgfVxuICB1cGRhdGVFbGVtZW50cyhlbGVtZW50LCBzdGFydCwgY291bnQsIG1vZGUpIHt9XG4gIF9yZW1vdmVFbGVtZW50cyhzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBpZiAodGhpcy5fcGFyc2luZykge1xuICAgICAgY29uc3QgcmVtb3ZlZCA9IG1ldGEuX3BhcnNlZC5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcbiAgICAgIGlmIChtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgIGNsZWFyU3RhY2tzKG1ldGEsIHJlbW92ZWQpO1xuICAgICAgfVxuICAgIH1cbiAgICBtZXRhLmRhdGEuc3BsaWNlKHN0YXJ0LCBjb3VudCk7XG4gIH1cbiAgX3N5bmMoYXJncykge1xuICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICB0aGlzLl9zeW5jTGlzdC5wdXNoKGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBbbWV0aG9kLCBhcmcxLCBhcmcyXSA9IGFyZ3M7XG4gICAgICB0aGlzW21ldGhvZF0oYXJnMSwgYXJnMik7XG4gICAgfVxuICAgIHRoaXMuY2hhcnQuX2RhdGFDaGFuZ2VzLnB1c2goW3RoaXMuaW5kZXgsIC4uLmFyZ3NdKTtcbiAgfVxuICBfb25EYXRhUHVzaCgpIHtcbiAgICBjb25zdCBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdGhpcy5fc3luYyhbJ19pbnNlcnRFbGVtZW50cycsIHRoaXMuZ2V0RGF0YXNldCgpLmRhdGEubGVuZ3RoIC0gY291bnQsIGNvdW50XSk7XG4gIH1cbiAgX29uRGF0YVBvcCgpIHtcbiAgICB0aGlzLl9zeW5jKFsnX3JlbW92ZUVsZW1lbnRzJywgdGhpcy5fY2FjaGVkTWV0YS5kYXRhLmxlbmd0aCAtIDEsIDFdKTtcbiAgfVxuICBfb25EYXRhU2hpZnQoKSB7XG4gICAgdGhpcy5fc3luYyhbJ19yZW1vdmVFbGVtZW50cycsIDAsIDFdKTtcbiAgfVxuICBfb25EYXRhU3BsaWNlKHN0YXJ0LCBjb3VudCkge1xuICAgIGlmIChjb3VudCkge1xuICAgICAgdGhpcy5fc3luYyhbJ19yZW1vdmVFbGVtZW50cycsIHN0YXJ0LCBjb3VudF0pO1xuICAgIH1cbiAgICBjb25zdCBuZXdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgIGlmIChuZXdDb3VudCkge1xuICAgICAgdGhpcy5fc3luYyhbJ19pbnNlcnRFbGVtZW50cycsIHN0YXJ0LCBuZXdDb3VudF0pO1xuICAgIH1cbiAgfVxuICBfb25EYXRhVW5zaGlmdCgpIHtcbiAgICB0aGlzLl9zeW5jKFsnX2luc2VydEVsZW1lbnRzJywgMCwgYXJndW1lbnRzLmxlbmd0aF0pO1xuICB9XG59XG5EYXRhc2V0Q29udHJvbGxlci5kZWZhdWx0cyA9IHt9O1xuRGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLmRhdGFzZXRFbGVtZW50VHlwZSA9IG51bGw7XG5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUuZGF0YUVsZW1lbnRUeXBlID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIHR5cGUpIHtcbiAgaWYgKCFzY2FsZS5fY2FjaGUuJGJhcikge1xuICAgIGNvbnN0IHZpc2libGVNZXRhcyA9IHNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpO1xuICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IHZpc2libGVNZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodmlzaWJsZU1ldGFzW2ldLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHNjYWxlKSk7XG4gICAgfVxuICAgIHNjYWxlLl9jYWNoZS4kYmFyID0gX2FycmF5VW5pcXVlKHZhbHVlcy5zb3J0KChhLCBiKSA9PiBhIC0gYikpO1xuICB9XG4gIHJldHVybiBzY2FsZS5fY2FjaGUuJGJhcjtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVNaW5TYW1wbGVTaXplKG1ldGEpIHtcbiAgY29uc3Qgc2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgY29uc3QgdmFsdWVzID0gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIG1ldGEudHlwZSk7XG4gIGxldCBtaW4gPSBzY2FsZS5fbGVuZ3RoO1xuICBsZXQgaSwgaWxlbiwgY3VyciwgcHJldjtcbiAgY29uc3QgdXBkYXRlTWluQW5kUHJldiA9ICgpID0+IHtcbiAgICBpZiAoY3VyciA9PT0gMzI3NjcgfHwgY3VyciA9PT0gLTMyNzY4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkZWZpbmVkKHByZXYpKSB7XG4gICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIE1hdGguYWJzKGN1cnIgLSBwcmV2KSB8fCBtaW4pO1xuICAgIH1cbiAgICBwcmV2ID0gY3VycjtcbiAgfTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBjdXJyID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZXNbaV0pO1xuICAgIHVwZGF0ZU1pbkFuZFByZXYoKTtcbiAgfVxuICBwcmV2ID0gdW5kZWZpbmVkO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gc2NhbGUudGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgY3VyciA9IHNjYWxlLmdldFBpeGVsRm9yVGljayhpKTtcbiAgICB1cGRhdGVNaW5BbmRQcmV2KCk7XG4gIH1cbiAgcmV0dXJuIG1pbjtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpIHtcbiAgY29uc3QgdGhpY2tuZXNzID0gb3B0aW9ucy5iYXJUaGlja25lc3M7XG4gIGxldCBzaXplLCByYXRpbztcbiAgaWYgKGlzTnVsbE9yVW5kZWYodGhpY2tuZXNzKSkge1xuICAgIHNpemUgPSBydWxlci5taW4gKiBvcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZTtcbiAgICByYXRpbyA9IG9wdGlvbnMuYmFyUGVyY2VudGFnZTtcbiAgfSBlbHNlIHtcbiAgICBzaXplID0gdGhpY2tuZXNzICogc3RhY2tDb3VudDtcbiAgICByYXRpbyA9IDE7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjaHVuazogc2l6ZSAvIHN0YWNrQ291bnQsXG4gICAgcmF0aW8sXG4gICAgc3RhcnQ6IHJ1bGVyLnBpeGVsc1tpbmRleF0gLSAoc2l6ZSAvIDIpXG4gIH07XG59XG5mdW5jdGlvbiBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCkge1xuICBjb25zdCBwaXhlbHMgPSBydWxlci5waXhlbHM7XG4gIGNvbnN0IGN1cnIgPSBwaXhlbHNbaW5kZXhdO1xuICBsZXQgcHJldiA9IGluZGV4ID4gMCA/IHBpeGVsc1tpbmRleCAtIDFdIDogbnVsbDtcbiAgbGV0IG5leHQgPSBpbmRleCA8IHBpeGVscy5sZW5ndGggLSAxID8gcGl4ZWxzW2luZGV4ICsgMV0gOiBudWxsO1xuICBjb25zdCBwZXJjZW50ID0gb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gIGlmIChwcmV2ID09PSBudWxsKSB7XG4gICAgcHJldiA9IGN1cnIgLSAobmV4dCA9PT0gbnVsbCA/IHJ1bGVyLmVuZCAtIHJ1bGVyLnN0YXJ0IDogbmV4dCAtIGN1cnIpO1xuICB9XG4gIGlmIChuZXh0ID09PSBudWxsKSB7XG4gICAgbmV4dCA9IGN1cnIgKyBjdXJyIC0gcHJldjtcbiAgfVxuICBjb25zdCBzdGFydCA9IGN1cnIgLSAoY3VyciAtIE1hdGgubWluKHByZXYsIG5leHQpKSAvIDIgKiBwZXJjZW50O1xuICBjb25zdCBzaXplID0gTWF0aC5hYnMobmV4dCAtIHByZXYpIC8gMiAqIHBlcmNlbnQ7XG4gIHJldHVybiB7XG4gICAgY2h1bms6IHNpemUgLyBzdGFja0NvdW50LFxuICAgIHJhdGlvOiBvcHRpb25zLmJhclBlcmNlbnRhZ2UsXG4gICAgc3RhcnRcbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlRmxvYXRCYXIoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSkge1xuICBjb25zdCBzdGFydFZhbHVlID0gdlNjYWxlLnBhcnNlKGVudHJ5WzBdLCBpKTtcbiAgY29uc3QgZW5kVmFsdWUgPSB2U2NhbGUucGFyc2UoZW50cnlbMV0sIGkpO1xuICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG4gIGNvbnN0IG1heCA9IE1hdGgubWF4KHN0YXJ0VmFsdWUsIGVuZFZhbHVlKTtcbiAgbGV0IGJhclN0YXJ0ID0gbWluO1xuICBsZXQgYmFyRW5kID0gbWF4O1xuICBpZiAoTWF0aC5hYnMobWluKSA+IE1hdGguYWJzKG1heCkpIHtcbiAgICBiYXJTdGFydCA9IG1heDtcbiAgICBiYXJFbmQgPSBtaW47XG4gIH1cbiAgaXRlbVt2U2NhbGUuYXhpc10gPSBiYXJFbmQ7XG4gIGl0ZW0uX2N1c3RvbSA9IHtcbiAgICBiYXJTdGFydCxcbiAgICBiYXJFbmQsXG4gICAgc3RhcnQ6IHN0YXJ0VmFsdWUsXG4gICAgZW5kOiBlbmRWYWx1ZSxcbiAgICBtaW4sXG4gICAgbWF4XG4gIH07XG59XG5mdW5jdGlvbiBwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpIHtcbiAgaWYgKGlzQXJyYXkoZW50cnkpKSB7XG4gICAgcGFyc2VGbG9hdEJhcihlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKTtcbiAgfSBlbHNlIHtcbiAgICBpdGVtW3ZTY2FsZS5heGlzXSA9IHZTY2FsZS5wYXJzZShlbnRyeSwgaSk7XG4gIH1cbiAgcmV0dXJuIGl0ZW07XG59XG5mdW5jdGlvbiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgY29uc3QgbGFiZWxzID0gaVNjYWxlLmdldExhYmVscygpO1xuICBjb25zdCBzaW5nbGVTY2FsZSA9IGlTY2FsZSA9PT0gdlNjYWxlO1xuICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgbGV0IGksIGlsZW4sIGl0ZW0sIGVudHJ5O1xuICBmb3IgKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBlbnRyeSA9IGRhdGFbaV07XG4gICAgaXRlbSA9IHt9O1xuICAgIGl0ZW1baVNjYWxlLmF4aXNdID0gc2luZ2xlU2NhbGUgfHwgaVNjYWxlLnBhcnNlKGxhYmVsc1tpXSwgaSk7XG4gICAgcGFyc2VkLnB1c2gocGFyc2VWYWx1ZShlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHBhcnNlZDtcbn1cbmZ1bmN0aW9uIGlzRmxvYXRCYXIoY3VzdG9tKSB7XG4gIHJldHVybiBjdXN0b20gJiYgY3VzdG9tLmJhclN0YXJ0ICE9PSB1bmRlZmluZWQgJiYgY3VzdG9tLmJhckVuZCAhPT0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gYmFyU2lnbihzaXplLCB2U2NhbGUsIGFjdHVhbEJhc2UpIHtcbiAgaWYgKHNpemUgIT09IDApIHtcbiAgICByZXR1cm4gc2lnbihzaXplKTtcbiAgfVxuICByZXR1cm4gKHZTY2FsZS5pc0hvcml6b250YWwoKSA/IDEgOiAtMSkgKiAodlNjYWxlLm1pbiA+PSBhY3R1YWxCYXNlID8gMSA6IC0xKTtcbn1cbmZ1bmN0aW9uIGJvcmRlclByb3BzKHByb3BlcnRpZXMpIHtcbiAgbGV0IHJldmVyc2UsIHN0YXJ0LCBlbmQsIHRvcCwgYm90dG9tO1xuICBpZiAocHJvcGVydGllcy5ob3Jpem9udGFsKSB7XG4gICAgcmV2ZXJzZSA9IHByb3BlcnRpZXMuYmFzZSA+IHByb3BlcnRpZXMueDtcbiAgICBzdGFydCA9ICdsZWZ0JztcbiAgICBlbmQgPSAncmlnaHQnO1xuICB9IGVsc2Uge1xuICAgIHJldmVyc2UgPSBwcm9wZXJ0aWVzLmJhc2UgPCBwcm9wZXJ0aWVzLnk7XG4gICAgc3RhcnQgPSAnYm90dG9tJztcbiAgICBlbmQgPSAndG9wJztcbiAgfVxuICBpZiAocmV2ZXJzZSkge1xuICAgIHRvcCA9ICdlbmQnO1xuICAgIGJvdHRvbSA9ICdzdGFydCc7XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gJ3N0YXJ0JztcbiAgICBib3R0b20gPSAnZW5kJztcbiAgfVxuICByZXR1cm4ge3N0YXJ0LCBlbmQsIHJldmVyc2UsIHRvcCwgYm90dG9tfTtcbn1cbmZ1bmN0aW9uIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KSB7XG4gIGxldCBlZGdlID0gb3B0aW9ucy5ib3JkZXJTa2lwcGVkO1xuICBjb25zdCByZXMgPSB7fTtcbiAgaWYgKCFlZGdlKSB7XG4gICAgcHJvcGVydGllcy5ib3JkZXJTa2lwcGVkID0gcmVzO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZWRnZSA9PT0gdHJ1ZSkge1xuICAgIHByb3BlcnRpZXMuYm9yZGVyU2tpcHBlZCA9IHt0b3A6IHRydWUsIHJpZ2h0OiB0cnVlLCBib3R0b206IHRydWUsIGxlZnQ6IHRydWV9O1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB7c3RhcnQsIGVuZCwgcmV2ZXJzZSwgdG9wLCBib3R0b219ID0gYm9yZGVyUHJvcHMocHJvcGVydGllcyk7XG4gIGlmIChlZGdlID09PSAnbWlkZGxlJyAmJiBzdGFjaykge1xuICAgIHByb3BlcnRpZXMuZW5hYmxlQm9yZGVyUmFkaXVzID0gdHJ1ZTtcbiAgICBpZiAoKHN0YWNrLl90b3AgfHwgMCkgPT09IGluZGV4KSB7XG4gICAgICBlZGdlID0gdG9wO1xuICAgIH0gZWxzZSBpZiAoKHN0YWNrLl9ib3R0b20gfHwgMCkgPT09IGluZGV4KSB7XG4gICAgICBlZGdlID0gYm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbcGFyc2VFZGdlKGJvdHRvbSwgc3RhcnQsIGVuZCwgcmV2ZXJzZSldID0gdHJ1ZTtcbiAgICAgIGVkZ2UgPSB0b3A7XG4gICAgfVxuICB9XG4gIHJlc1twYXJzZUVkZ2UoZWRnZSwgc3RhcnQsIGVuZCwgcmV2ZXJzZSldID0gdHJ1ZTtcbiAgcHJvcGVydGllcy5ib3JkZXJTa2lwcGVkID0gcmVzO1xufVxuZnVuY3Rpb24gcGFyc2VFZGdlKGVkZ2UsIGEsIGIsIHJldmVyc2UpIHtcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBlZGdlID0gc3dhcChlZGdlLCBhLCBiKTtcbiAgICBlZGdlID0gc3RhcnRFbmQoZWRnZSwgYiwgYSk7XG4gIH0gZWxzZSB7XG4gICAgZWRnZSA9IHN0YXJ0RW5kKGVkZ2UsIGEsIGIpO1xuICB9XG4gIHJldHVybiBlZGdlO1xufVxuZnVuY3Rpb24gc3dhcChvcmlnLCB2MSwgdjIpIHtcbiAgcmV0dXJuIG9yaWcgPT09IHYxID8gdjIgOiBvcmlnID09PSB2MiA/IHYxIDogb3JpZztcbn1cbmZ1bmN0aW9uIHN0YXJ0RW5kKHYsIHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIHYgPT09ICdzdGFydCcgPyBzdGFydCA6IHYgPT09ICdlbmQnID8gZW5kIDogdjtcbn1cbmZ1bmN0aW9uIHNldEluZmxhdGVBbW91bnQocHJvcGVydGllcywge2luZmxhdGVBbW91bnR9LCByYXRpbykge1xuICBwcm9wZXJ0aWVzLmluZmxhdGVBbW91bnQgPSBpbmZsYXRlQW1vdW50ID09PSAnYXV0bydcbiAgICA/IHJhdGlvID09PSAxID8gMC4zMyA6IDBcbiAgICA6IGluZmxhdGVBbW91bnQ7XG59XG5jbGFzcyBCYXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICBwYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgcmV0dXJuIHBhcnNlQXJyYXlPclByaW1pdGl2ZShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICB9XG4gIHBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgfVxuICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qge2lTY2FsZSwgdlNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3Qge3hBeGlzS2V5ID0gJ3gnLCB5QXhpc0tleSA9ICd5J30gPSB0aGlzLl9wYXJzaW5nO1xuICAgIGNvbnN0IGlBeGlzS2V5ID0gaVNjYWxlLmF4aXMgPT09ICd4JyA/IHhBeGlzS2V5IDogeUF4aXNLZXk7XG4gICAgY29uc3QgdkF4aXNLZXkgPSB2U2NhbGUuYXhpcyA9PT0gJ3gnID8geEF4aXNLZXkgOiB5QXhpc0tleTtcbiAgICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgaXRlbSwgb2JqO1xuICAgIGZvciAoaSA9IHN0YXJ0LCBpbGVuID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgb2JqID0gZGF0YVtpXTtcbiAgICAgIGl0ZW0gPSB7fTtcbiAgICAgIGl0ZW1baVNjYWxlLmF4aXNdID0gaVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkob2JqLCBpQXhpc0tleSksIGkpO1xuICAgICAgcGFyc2VkLnB1c2gocGFyc2VWYWx1ZShyZXNvbHZlT2JqZWN0S2V5KG9iaiwgdkF4aXNLZXkpLCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICB1cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKSB7XG4gICAgc3VwZXIudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgY29uc3QgY3VzdG9tID0gcGFyc2VkLl9jdXN0b207XG4gICAgaWYgKGN1c3RvbSAmJiBzY2FsZSA9PT0gdGhpcy5fY2FjaGVkTWV0YS52U2NhbGUpIHtcbiAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgY3VzdG9tLm1pbik7XG4gICAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIGN1c3RvbS5tYXgpO1xuICAgIH1cbiAgfVxuICBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3Qge2lTY2FsZSwgdlNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgIGNvbnN0IHZhbHVlID0gaXNGbG9hdEJhcihjdXN0b20pXG4gICAgICA/ICdbJyArIGN1c3RvbS5zdGFydCArICcsICcgKyBjdXN0b20uZW5kICsgJ10nXG4gICAgICA6ICcnICsgdlNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW3ZTY2FsZS5heGlzXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pLFxuICAgICAgdmFsdWVcbiAgICB9O1xuICB9XG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgbWV0YS5zdGFjayA9IHRoaXMuZ2V0RGF0YXNldCgpLnN0YWNrO1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgdGhpcy51cGRhdGVFbGVtZW50cyhtZXRhLmRhdGEsIDAsIG1ldGEuZGF0YS5sZW5ndGgsIG1vZGUpO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKGJhcnMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCB7aW5kZXgsIF9jYWNoZWRNZXRhOiB7dlNjYWxlfX0gPSB0aGlzO1xuICAgIGNvbnN0IGJhc2UgPSB2U2NhbGUuZ2V0QmFzZVBpeGVsKCk7XG4gICAgY29uc3QgaG9yaXpvbnRhbCA9IHZTY2FsZS5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCBydWxlciA9IHRoaXMuX2dldFJ1bGVyKCk7XG4gICAgY29uc3Qge3NoYXJlZE9wdGlvbnMsIGluY2x1ZGVPcHRpb25zfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKykge1xuICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaSk7XG4gICAgICBjb25zdCB2cGl4ZWxzID0gcmVzZXQgfHwgaXNOdWxsT3JVbmRlZihwYXJzZWRbdlNjYWxlLmF4aXNdKSA/IHtiYXNlLCBoZWFkOiBiYXNlfSA6IHRoaXMuX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKGkpO1xuICAgICAgY29uc3QgaXBpeGVscyA9IHRoaXMuX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGksIHJ1bGVyKTtcbiAgICAgIGNvbnN0IHN0YWNrID0gKHBhcnNlZC5fc3RhY2tzIHx8IHt9KVt2U2NhbGUuYXhpc107XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBob3Jpem9udGFsLFxuICAgICAgICBiYXNlOiB2cGl4ZWxzLmJhc2UsXG4gICAgICAgIGVuYWJsZUJvcmRlclJhZGl1czogIXN0YWNrIHx8IGlzRmxvYXRCYXIocGFyc2VkLl9jdXN0b20pIHx8IChpbmRleCA9PT0gc3RhY2suX3RvcCB8fCBpbmRleCA9PT0gc3RhY2suX2JvdHRvbSksXG4gICAgICAgIHg6IGhvcml6b250YWwgPyB2cGl4ZWxzLmhlYWQgOiBpcGl4ZWxzLmNlbnRlcixcbiAgICAgICAgeTogaG9yaXpvbnRhbCA/IGlwaXhlbHMuY2VudGVyIDogdnBpeGVscy5oZWFkLFxuICAgICAgICBoZWlnaHQ6IGhvcml6b250YWwgPyBpcGl4ZWxzLnNpemUgOiBNYXRoLmFicyh2cGl4ZWxzLnNpemUpLFxuICAgICAgICB3aWR0aDogaG9yaXpvbnRhbCA/IE1hdGguYWJzKHZwaXhlbHMuc2l6ZSkgOiBpcGl4ZWxzLnNpemVcbiAgICAgIH07XG4gICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgYmFyc1tpXS5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgfVxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHByb3BlcnRpZXMub3B0aW9ucyB8fCBiYXJzW2ldLm9wdGlvbnM7XG4gICAgICBzZXRCb3JkZXJTa2lwcGVkKHByb3BlcnRpZXMsIG9wdGlvbnMsIHN0YWNrLCBpbmRleCk7XG4gICAgICBzZXRJbmZsYXRlQW1vdW50KHByb3BlcnRpZXMsIG9wdGlvbnMsIHJ1bGVyLnJhdGlvKTtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChiYXJzW2ldLCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICB9XG4gIH1cbiAgX2dldFN0YWNrcyhsYXN0LCBkYXRhSW5kZXgpIHtcbiAgICBjb25zdCB7aVNjYWxlfSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgbWV0YXNldHMgPSBpU2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModGhpcy5fdHlwZSlcbiAgICAgIC5maWx0ZXIobWV0YSA9PiBtZXRhLmNvbnRyb2xsZXIub3B0aW9ucy5ncm91cGVkKTtcbiAgICBjb25zdCBzdGFja2VkID0gaVNjYWxlLm9wdGlvbnMuc3RhY2tlZDtcbiAgICBjb25zdCBzdGFja3MgPSBbXTtcbiAgICBjb25zdCBza2lwTnVsbCA9IChtZXRhKSA9PiB7XG4gICAgICBjb25zdCBwYXJzZWQgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0UGFyc2VkKGRhdGFJbmRleCk7XG4gICAgICBjb25zdCB2YWwgPSBwYXJzZWQgJiYgcGFyc2VkW21ldGEudlNjYWxlLmF4aXNdO1xuICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsKSB8fCBpc05hTih2YWwpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH07XG4gICAgZm9yIChjb25zdCBtZXRhIG9mIG1ldGFzZXRzKSB7XG4gICAgICBpZiAoZGF0YUluZGV4ICE9PSB1bmRlZmluZWQgJiYgc2tpcE51bGwobWV0YSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoc3RhY2tlZCA9PT0gZmFsc2UgfHwgc3RhY2tzLmluZGV4T2YobWV0YS5zdGFjaykgPT09IC0xIHx8XG5cdFx0XHRcdChzdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzdGFja3MucHVzaChtZXRhLnN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmIChtZXRhLmluZGV4ID09PSBsYXN0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXN0YWNrcy5sZW5ndGgpIHtcbiAgICAgIHN0YWNrcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHJldHVybiBzdGFja3M7XG4gIH1cbiAgX2dldFN0YWNrQ291bnQoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0U3RhY2tzKHVuZGVmaW5lZCwgaW5kZXgpLmxlbmd0aDtcbiAgfVxuICBfZ2V0U3RhY2tJbmRleChkYXRhc2V0SW5kZXgsIG5hbWUsIGRhdGFJbmRleCkge1xuICAgIGNvbnN0IHN0YWNrcyA9IHRoaXMuX2dldFN0YWNrcyhkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCk7XG4gICAgY29uc3QgaW5kZXggPSAobmFtZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgPyBzdGFja3MuaW5kZXhPZihuYW1lKVxuICAgICAgOiAtMTtcbiAgICByZXR1cm4gKGluZGV4ID09PSAtMSlcbiAgICAgID8gc3RhY2tzLmxlbmd0aCAtIDFcbiAgICAgIDogaW5kZXg7XG4gIH1cbiAgX2dldFJ1bGVyKCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgaVNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgY29uc3QgcGl4ZWxzID0gW107XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IG1ldGEuZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHBpeGVscy5wdXNoKGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0UGFyc2VkKGkpW2lTY2FsZS5heGlzXSwgaSkpO1xuICAgIH1cbiAgICBjb25zdCBiYXJUaGlja25lc3MgPSBvcHRzLmJhclRoaWNrbmVzcztcbiAgICBjb25zdCBtaW4gPSBiYXJUaGlja25lc3MgfHwgY29tcHV0ZU1pblNhbXBsZVNpemUobWV0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1pbixcbiAgICAgIHBpeGVscyxcbiAgICAgIHN0YXJ0OiBpU2NhbGUuX3N0YXJ0UGl4ZWwsXG4gICAgICBlbmQ6IGlTY2FsZS5fZW5kUGl4ZWwsXG4gICAgICBzdGFja0NvdW50OiB0aGlzLl9nZXRTdGFja0NvdW50KCksXG4gICAgICBzY2FsZTogaVNjYWxlLFxuICAgICAgZ3JvdXBlZDogb3B0cy5ncm91cGVkLFxuICAgICAgcmF0aW86IGJhclRoaWNrbmVzcyA/IDEgOiBvcHRzLmNhdGVnb3J5UGVyY2VudGFnZSAqIG9wdHMuYmFyUGVyY2VudGFnZVxuICAgIH07XG4gIH1cbiAgX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKGluZGV4KSB7XG4gICAgY29uc3Qge19jYWNoZWRNZXRhOiB7dlNjYWxlLCBfc3RhY2tlZH0sIG9wdGlvbnM6IHtiYXNlOiBiYXNlVmFsdWUsIG1pbkJhckxlbmd0aH19ID0gdGhpcztcbiAgICBjb25zdCBhY3R1YWxCYXNlID0gYmFzZVZhbHVlIHx8IDA7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgIGNvbnN0IGZsb2F0aW5nID0gaXNGbG9hdEJhcihjdXN0b20pO1xuICAgIGxldCB2YWx1ZSA9IHBhcnNlZFt2U2NhbGUuYXhpc107XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgbGVuZ3RoID0gX3N0YWNrZWQgPyB0aGlzLmFwcGx5U3RhY2sodlNjYWxlLCBwYXJzZWQsIF9zdGFja2VkKSA6IHZhbHVlO1xuICAgIGxldCBoZWFkLCBzaXplO1xuICAgIGlmIChsZW5ndGggIT09IHZhbHVlKSB7XG4gICAgICBzdGFydCA9IGxlbmd0aCAtIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gdmFsdWU7XG4gICAgfVxuICAgIGlmIChmbG9hdGluZykge1xuICAgICAgdmFsdWUgPSBjdXN0b20uYmFyU3RhcnQ7XG4gICAgICBsZW5ndGggPSBjdXN0b20uYmFyRW5kIC0gY3VzdG9tLmJhclN0YXJ0O1xuICAgICAgaWYgKHZhbHVlICE9PSAwICYmIHNpZ24odmFsdWUpICE9PSBzaWduKGN1c3RvbS5iYXJFbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ICs9IHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBzdGFydFZhbHVlID0gIWlzTnVsbE9yVW5kZWYoYmFzZVZhbHVlKSAmJiAhZmxvYXRpbmcgPyBiYXNlVmFsdWUgOiBzdGFydDtcbiAgICBsZXQgYmFzZSA9IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN0YXJ0VmFsdWUpO1xuICAgIGlmICh0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgaGVhZCA9IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN0YXJ0ICsgbGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZCA9IGJhc2U7XG4gICAgfVxuICAgIHNpemUgPSBoZWFkIC0gYmFzZTtcbiAgICBpZiAoTWF0aC5hYnMoc2l6ZSkgPCBtaW5CYXJMZW5ndGgpIHtcbiAgICAgIHNpemUgPSBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkgKiBtaW5CYXJMZW5ndGg7XG4gICAgICBpZiAodmFsdWUgPT09IGFjdHVhbEJhc2UpIHtcbiAgICAgICAgYmFzZSAtPSBzaXplIC8gMjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0YXJ0UGl4ZWwgPSB2U2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDApO1xuICAgICAgY29uc3QgZW5kUGl4ZWwgPSB2U2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDEpO1xuICAgICAgY29uc3QgbWluID0gTWF0aC5taW4oc3RhcnRQaXhlbCwgZW5kUGl4ZWwpO1xuICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoc3RhcnRQaXhlbCwgZW5kUGl4ZWwpO1xuICAgICAgYmFzZSA9IE1hdGgubWF4KE1hdGgubWluKGJhc2UsIG1heCksIG1pbik7XG4gICAgICBoZWFkID0gYmFzZSArIHNpemU7XG4gICAgfVxuICAgIGlmIChiYXNlID09PSB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShhY3R1YWxCYXNlKSkge1xuICAgICAgY29uc3QgaGFsZkdyaWQgPSBzaWduKHNpemUpICogdlNjYWxlLmdldExpbmVXaWR0aEZvclZhbHVlKGFjdHVhbEJhc2UpIC8gMjtcbiAgICAgIGJhc2UgKz0gaGFsZkdyaWQ7XG4gICAgICBzaXplIC09IGhhbGZHcmlkO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc2l6ZSxcbiAgICAgIGJhc2UsXG4gICAgICBoZWFkLFxuICAgICAgY2VudGVyOiBoZWFkICsgc2l6ZSAvIDJcbiAgICB9O1xuICB9XG4gIF9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyhpbmRleCwgcnVsZXIpIHtcbiAgICBjb25zdCBzY2FsZSA9IHJ1bGVyLnNjYWxlO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qgc2tpcE51bGwgPSBvcHRpb25zLnNraXBOdWxsO1xuICAgIGNvbnN0IG1heEJhclRoaWNrbmVzcyA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMubWF4QmFyVGhpY2tuZXNzLCBJbmZpbml0eSk7XG4gICAgbGV0IGNlbnRlciwgc2l6ZTtcbiAgICBpZiAocnVsZXIuZ3JvdXBlZCkge1xuICAgICAgY29uc3Qgc3RhY2tDb3VudCA9IHNraXBOdWxsID8gdGhpcy5fZ2V0U3RhY2tDb3VudChpbmRleCkgOiBydWxlci5zdGFja0NvdW50O1xuICAgICAgY29uc3QgcmFuZ2UgPSBvcHRpb25zLmJhclRoaWNrbmVzcyA9PT0gJ2ZsZXgnXG4gICAgICAgID8gY29tcHV0ZUZsZXhDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpXG4gICAgICAgIDogY29tcHV0ZUZpdENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCk7XG4gICAgICBjb25zdCBzdGFja0luZGV4ID0gdGhpcy5fZ2V0U3RhY2tJbmRleCh0aGlzLmluZGV4LCB0aGlzLl9jYWNoZWRNZXRhLnN0YWNrLCBza2lwTnVsbCA/IGluZGV4IDogdW5kZWZpbmVkKTtcbiAgICAgIGNlbnRlciA9IHJhbmdlLnN0YXJ0ICsgKHJhbmdlLmNodW5rICogc3RhY2tJbmRleCkgKyAocmFuZ2UuY2h1bmsgLyAyKTtcbiAgICAgIHNpemUgPSBNYXRoLm1pbihtYXhCYXJUaGlja25lc3MsIHJhbmdlLmNodW5rICogcmFuZ2UucmF0aW8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjZW50ZXIgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0UGFyc2VkKGluZGV4KVtzY2FsZS5heGlzXSwgaW5kZXgpO1xuICAgICAgc2l6ZSA9IE1hdGgubWluKG1heEJhclRoaWNrbmVzcywgcnVsZXIubWluICogcnVsZXIucmF0aW8pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgYmFzZTogY2VudGVyIC0gc2l6ZSAvIDIsXG4gICAgICBoZWFkOiBjZW50ZXIgKyBzaXplIC8gMixcbiAgICAgIGNlbnRlcixcbiAgICAgIHNpemVcbiAgICB9O1xuICB9XG4gIGRyYXcoKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgdlNjYWxlID0gbWV0YS52U2NhbGU7XG4gICAgY29uc3QgcmVjdHMgPSBtZXRhLmRhdGE7XG4gICAgY29uc3QgaWxlbiA9IHJlY3RzLmxlbmd0aDtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGlmICh0aGlzLmdldFBhcnNlZChpKVt2U2NhbGUuYXhpc10gIT09IG51bGwpIHtcbiAgICAgICAgcmVjdHNbaV0uZHJhdyh0aGlzLl9jdHgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuQmFyQ29udHJvbGxlci5pZCA9ICdiYXInO1xuQmFyQ29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgZGF0YUVsZW1lbnRUeXBlOiAnYmFyJyxcbiAgY2F0ZWdvcnlQZXJjZW50YWdlOiAwLjgsXG4gIGJhclBlcmNlbnRhZ2U6IDAuOSxcbiAgZ3JvdXBlZDogdHJ1ZSxcbiAgYW5pbWF0aW9uczoge1xuICAgIG51bWJlcnM6IHtcbiAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgcHJvcGVydGllczogWyd4JywgJ3knLCAnYmFzZScsICd3aWR0aCcsICdoZWlnaHQnXVxuICAgIH1cbiAgfVxufTtcbkJhckNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBzY2FsZXM6IHtcbiAgICBfaW5kZXhfOiB7XG4gICAgICB0eXBlOiAnY2F0ZWdvcnknLFxuICAgICAgb2Zmc2V0OiB0cnVlLFxuICAgICAgZ3JpZDoge1xuICAgICAgICBvZmZzZXQ6IHRydWVcbiAgICAgIH1cbiAgICB9LFxuICAgIF92YWx1ZV86IHtcbiAgICAgIHR5cGU6ICdsaW5lYXInLFxuICAgICAgYmVnaW5BdFplcm86IHRydWUsXG4gICAgfVxuICB9XG59O1xuXG5jbGFzcyBCdWJibGVDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICB9XG4gIHBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKykge1xuICAgICAgcGFyc2VkW2ldLl9jdXN0b20gPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSArIHN0YXJ0KS5yYWRpdXM7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cbiAgcGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IGRhdGFbc3RhcnQgKyBpXTtcbiAgICAgIHBhcnNlZFtpXS5fY3VzdG9tID0gdmFsdWVPckRlZmF1bHQoaXRlbVsyXSwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkgKyBzdGFydCkucmFkaXVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJzZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBkYXRhW3N0YXJ0ICsgaV07XG4gICAgICBwYXJzZWRbaV0uX2N1c3RvbSA9IHZhbHVlT3JEZWZhdWx0KGl0ZW0gJiYgaXRlbS5yICYmICtpdGVtLnIsIHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpICsgc3RhcnQpLnJhZGl1cyk7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cbiAgZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICBsZXQgbWF4ID0gMDtcbiAgICBmb3IgKGxldCBpID0gZGF0YS5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBkYXRhW2ldLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpKSAvIDIpO1xuICAgIH1cbiAgICByZXR1cm4gbWF4ID4gMCAmJiBtYXg7XG4gIH1cbiAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IHt4U2NhbGUsIHlTY2FsZX0gPSBtZXRhO1xuICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICBjb25zdCB4ID0geFNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkLngpO1xuICAgIGNvbnN0IHkgPSB5U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueSk7XG4gICAgY29uc3QgciA9IHBhcnNlZC5fY3VzdG9tO1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogbWV0YS5sYWJlbCxcbiAgICAgIHZhbHVlOiAnKCcgKyB4ICsgJywgJyArIHkgKyAociA/ICcsICcgKyByIDogJycpICsgJyknXG4gICAgfTtcbiAgfVxuICB1cGRhdGUobW9kZSkge1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgMCwgcG9pbnRzLmxlbmd0aCwgbW9kZSk7XG4gIH1cbiAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgY29uc3Qge2lTY2FsZSwgdlNjYWxlfSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3Qge3NoYXJlZE9wdGlvbnMsIGluY2x1ZGVPcHRpb25zfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgY29uc3QgcGFyc2VkID0gIXJlc2V0ICYmIHRoaXMuZ2V0UGFyc2VkKGkpO1xuICAgICAgY29uc3QgcHJvcGVydGllcyA9IHt9O1xuICAgICAgY29uc3QgaVBpeGVsID0gcHJvcGVydGllc1tpQXhpc10gPSByZXNldCA/IGlTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMC41KSA6IGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHBhcnNlZFtpQXhpc10pO1xuICAgICAgY29uc3QgdlBpeGVsID0gcHJvcGVydGllc1t2QXhpc10gPSByZXNldCA/IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKSA6IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHBhcnNlZFt2QXhpc10pO1xuICAgICAgcHJvcGVydGllcy5za2lwID0gaXNOYU4oaVBpeGVsKSB8fCBpc05hTih2UGl4ZWwpO1xuICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucy5yYWRpdXMgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgfVxuICByZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKSB7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIGxldCB2YWx1ZXMgPSBzdXBlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKTtcbiAgICBpZiAodmFsdWVzLiRzaGFyZWQpIHtcbiAgICAgIHZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe30sIHZhbHVlcywgeyRzaGFyZWQ6IGZhbHNlfSk7XG4gICAgfVxuICAgIGNvbnN0IHJhZGl1cyA9IHZhbHVlcy5yYWRpdXM7XG4gICAgaWYgKG1vZGUgIT09ICdhY3RpdmUnKSB7XG4gICAgICB2YWx1ZXMucmFkaXVzID0gMDtcbiAgICB9XG4gICAgdmFsdWVzLnJhZGl1cyArPSB2YWx1ZU9yRGVmYXVsdChwYXJzZWQgJiYgcGFyc2VkLl9jdXN0b20sIHJhZGl1cyk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxufVxuQnViYmxlQ29udHJvbGxlci5pZCA9ICdidWJibGUnO1xuQnViYmxlQ29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICBhbmltYXRpb25zOiB7XG4gICAgbnVtYmVyczoge1xuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICBwcm9wZXJ0aWVzOiBbJ3gnLCAneScsICdib3JkZXJXaWR0aCcsICdyYWRpdXMnXVxuICAgIH1cbiAgfVxufTtcbkJ1YmJsZUNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBzY2FsZXM6IHtcbiAgICB4OiB7XG4gICAgICB0eXBlOiAnbGluZWFyJ1xuICAgIH0sXG4gICAgeToge1xuICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICB9XG4gIH0sXG4gIHBsdWdpbnM6IHtcbiAgICB0b29sdGlwOiB7XG4gICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgdGl0bGUoKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRSYXRpb0FuZE9mZnNldChyb3RhdGlvbiwgY2lyY3VtZmVyZW5jZSwgY3V0b3V0KSB7XG4gIGxldCByYXRpb1ggPSAxO1xuICBsZXQgcmF0aW9ZID0gMTtcbiAgbGV0IG9mZnNldFggPSAwO1xuICBsZXQgb2Zmc2V0WSA9IDA7XG4gIGlmIChjaXJjdW1mZXJlbmNlIDwgVEFVKSB7XG4gICAgY29uc3Qgc3RhcnRBbmdsZSA9IHJvdGF0aW9uO1xuICAgIGNvbnN0IGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2U7XG4gICAgY29uc3Qgc3RhcnRYID0gTWF0aC5jb3Moc3RhcnRBbmdsZSk7XG4gICAgY29uc3Qgc3RhcnRZID0gTWF0aC5zaW4oc3RhcnRBbmdsZSk7XG4gICAgY29uc3QgZW5kWCA9IE1hdGguY29zKGVuZEFuZ2xlKTtcbiAgICBjb25zdCBlbmRZID0gTWF0aC5zaW4oZW5kQW5nbGUpO1xuICAgIGNvbnN0IGNhbGNNYXggPSAoYW5nbGUsIGEsIGIpID0+IF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCB0cnVlKSA/IDEgOiBNYXRoLm1heChhLCBhICogY3V0b3V0LCBiLCBiICogY3V0b3V0KTtcbiAgICBjb25zdCBjYWxjTWluID0gKGFuZ2xlLCBhLCBiKSA9PiBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgdHJ1ZSkgPyAtMSA6IE1hdGgubWluKGEsIGEgKiBjdXRvdXQsIGIsIGIgKiBjdXRvdXQpO1xuICAgIGNvbnN0IG1heFggPSBjYWxjTWF4KDAsIHN0YXJ0WCwgZW5kWCk7XG4gICAgY29uc3QgbWF4WSA9IGNhbGNNYXgoSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICBjb25zdCBtaW5YID0gY2FsY01pbihQSSwgc3RhcnRYLCBlbmRYKTtcbiAgICBjb25zdCBtaW5ZID0gY2FsY01pbihQSSArIEhBTEZfUEksIHN0YXJ0WSwgZW5kWSk7XG4gICAgcmF0aW9YID0gKG1heFggLSBtaW5YKSAvIDI7XG4gICAgcmF0aW9ZID0gKG1heFkgLSBtaW5ZKSAvIDI7XG4gICAgb2Zmc2V0WCA9IC0obWF4WCArIG1pblgpIC8gMjtcbiAgICBvZmZzZXRZID0gLShtYXhZICsgbWluWSkgLyAyO1xuICB9XG4gIHJldHVybiB7cmF0aW9YLCByYXRpb1ksIG9mZnNldFgsIG9mZnNldFl9O1xufVxuY2xhc3MgRG91Z2hudXRDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KSB7XG4gICAgc3VwZXIoY2hhcnQsIGRhdGFzZXRJbmRleCk7XG4gICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vZmZzZXRYID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub2Zmc2V0WSA9IHVuZGVmaW5lZDtcbiAgfVxuICBsaW5rU2NhbGVzKCkge31cbiAgcGFyc2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0RGF0YXNldCgpLmRhdGE7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgaWYgKHRoaXMuX3BhcnNpbmcgPT09IGZhbHNlKSB7XG4gICAgICBtZXRhLl9wYXJzZWQgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZ2V0dGVyID0gKGkpID0+ICtkYXRhW2ldO1xuICAgICAgaWYgKGlzT2JqZWN0KGRhdGFbc3RhcnRdKSkge1xuICAgICAgICBjb25zdCB7a2V5ID0gJ3ZhbHVlJ30gPSB0aGlzLl9wYXJzaW5nO1xuICAgICAgICBnZXR0ZXIgPSAoaSkgPT4gK3Jlc29sdmVPYmplY3RLZXkoZGF0YVtpXSwga2V5KTtcbiAgICAgIH1cbiAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgZm9yIChpID0gc3RhcnQsIGlsZW4gPSBzdGFydCArIGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICAgIG1ldGEuX3BhcnNlZFtpXSA9IGdldHRlcihpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX2dldFJvdGF0aW9uKCkge1xuICAgIHJldHVybiB0b1JhZGlhbnModGhpcy5vcHRpb25zLnJvdGF0aW9uIC0gOTApO1xuICB9XG4gIF9nZXRDaXJjdW1mZXJlbmNlKCkge1xuICAgIHJldHVybiB0b1JhZGlhbnModGhpcy5vcHRpb25zLmNpcmN1bWZlcmVuY2UpO1xuICB9XG4gIF9nZXRSb3RhdGlvbkV4dGVudHMoKSB7XG4gICAgbGV0IG1pbiA9IFRBVTtcbiAgICBsZXQgbWF4ID0gLVRBVTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YShpKS5jb250cm9sbGVyO1xuICAgICAgICBjb25zdCByb3RhdGlvbiA9IGNvbnRyb2xsZXIuX2dldFJvdGF0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSBjb250cm9sbGVyLl9nZXRDaXJjdW1mZXJlbmNlKCk7XG4gICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgcm90YXRpb24pO1xuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHJvdGF0aW9uICsgY2lyY3VtZmVyZW5jZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICByb3RhdGlvbjogbWluLFxuICAgICAgY2lyY3VtZmVyZW5jZTogbWF4IC0gbWluLFxuICAgIH07XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3Qge2NoYXJ0QXJlYX0gPSBjaGFydDtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBhcmNzID0gbWV0YS5kYXRhO1xuICAgIGNvbnN0IHNwYWNpbmcgPSB0aGlzLmdldE1heEJvcmRlcldpZHRoKCkgKyB0aGlzLmdldE1heE9mZnNldChhcmNzKSArIHRoaXMub3B0aW9ucy5zcGFjaW5nO1xuICAgIGNvbnN0IG1heFNpemUgPSBNYXRoLm1heCgoTWF0aC5taW4oY2hhcnRBcmVhLndpZHRoLCBjaGFydEFyZWEuaGVpZ2h0KSAtIHNwYWNpbmcpIC8gMiwgMCk7XG4gICAgY29uc3QgY3V0b3V0ID0gTWF0aC5taW4odG9QZXJjZW50YWdlKHRoaXMub3B0aW9ucy5jdXRvdXQsIG1heFNpemUpLCAxKTtcbiAgICBjb25zdCBjaGFydFdlaWdodCA9IHRoaXMuX2dldFJpbmdXZWlnaHQodGhpcy5pbmRleCk7XG4gICAgY29uc3Qge2NpcmN1bWZlcmVuY2UsIHJvdGF0aW9ufSA9IHRoaXMuX2dldFJvdGF0aW9uRXh0ZW50cygpO1xuICAgIGNvbnN0IHtyYXRpb1gsIHJhdGlvWSwgb2Zmc2V0WCwgb2Zmc2V0WX0gPSBnZXRSYXRpb0FuZE9mZnNldChyb3RhdGlvbiwgY2lyY3VtZmVyZW5jZSwgY3V0b3V0KTtcbiAgICBjb25zdCBtYXhXaWR0aCA9IChjaGFydEFyZWEud2lkdGggLSBzcGFjaW5nKSAvIHJhdGlvWDtcbiAgICBjb25zdCBtYXhIZWlnaHQgPSAoY2hhcnRBcmVhLmhlaWdodCAtIHNwYWNpbmcpIC8gcmF0aW9ZO1xuICAgIGNvbnN0IG1heFJhZGl1cyA9IE1hdGgubWF4KE1hdGgubWluKG1heFdpZHRoLCBtYXhIZWlnaHQpIC8gMiwgMCk7XG4gICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSB0b0RpbWVuc2lvbih0aGlzLm9wdGlvbnMucmFkaXVzLCBtYXhSYWRpdXMpO1xuICAgIGNvbnN0IGlubmVyUmFkaXVzID0gTWF0aC5tYXgob3V0ZXJSYWRpdXMgKiBjdXRvdXQsIDApO1xuICAgIGNvbnN0IHJhZGl1c0xlbmd0aCA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIHRoaXMuX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKTtcbiAgICB0aGlzLm9mZnNldFggPSBvZmZzZXRYICogb3V0ZXJSYWRpdXM7XG4gICAgdGhpcy5vZmZzZXRZID0gb2Zmc2V0WSAqIG91dGVyUmFkaXVzO1xuICAgIG1ldGEudG90YWwgPSB0aGlzLmNhbGN1bGF0ZVRvdGFsKCk7XG4gICAgdGhpcy5vdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogdGhpcy5fZ2V0UmluZ1dlaWdodE9mZnNldCh0aGlzLmluZGV4KTtcbiAgICB0aGlzLmlubmVyUmFkaXVzID0gTWF0aC5tYXgodGhpcy5vdXRlclJhZGl1cyAtIHJhZGl1c0xlbmd0aCAqIGNoYXJ0V2VpZ2h0LCAwKTtcbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGFyY3MsIDAsIGFyY3MubGVuZ3RoLCBtb2RlKTtcbiAgfVxuICBfY2lyY3VtZmVyZW5jZShpLCByZXNldCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IHRoaXMuX2dldENpcmN1bWZlcmVuY2UoKTtcbiAgICBpZiAoKHJlc2V0ICYmIG9wdHMuYW5pbWF0aW9uLmFuaW1hdGVSb3RhdGUpIHx8ICF0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpIHx8IG1ldGEuX3BhcnNlZFtpXSA9PT0gbnVsbCB8fCBtZXRhLmRhdGFbaV0uaGlkZGVuKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZShtZXRhLl9wYXJzZWRbaV0gKiBjaXJjdW1mZXJlbmNlIC8gVEFVKTtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhhcmNzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICBjb25zdCBhbmltYXRpb25PcHRzID0gb3B0cy5hbmltYXRpb247XG4gICAgY29uc3QgY2VudGVyWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyO1xuICAgIGNvbnN0IGNlbnRlclkgPSAoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMjtcbiAgICBjb25zdCBhbmltYXRlU2NhbGUgPSByZXNldCAmJiBhbmltYXRpb25PcHRzLmFuaW1hdGVTY2FsZTtcbiAgICBjb25zdCBpbm5lclJhZGl1cyA9IGFuaW1hdGVTY2FsZSA/IDAgOiB0aGlzLmlubmVyUmFkaXVzO1xuICAgIGNvbnN0IG91dGVyUmFkaXVzID0gYW5pbWF0ZVNjYWxlID8gMCA6IHRoaXMub3V0ZXJSYWRpdXM7XG4gICAgY29uc3Qge3NoYXJlZE9wdGlvbnMsIGluY2x1ZGVPcHRpb25zfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgIGxldCBzdGFydEFuZ2xlID0gdGhpcy5fZ2V0Um90YXRpb24oKTtcbiAgICBsZXQgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RhcnQ7ICsraSkge1xuICAgICAgc3RhcnRBbmdsZSArPSB0aGlzLl9jaXJjdW1mZXJlbmNlKGksIHJlc2V0KTtcbiAgICB9XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSB0aGlzLl9jaXJjdW1mZXJlbmNlKGksIHJlc2V0KTtcbiAgICAgIGNvbnN0IGFyYyA9IGFyY3NbaV07XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICB4OiBjZW50ZXJYICsgdGhpcy5vZmZzZXRYLFxuICAgICAgICB5OiBjZW50ZXJZICsgdGhpcy5vZmZzZXRZLFxuICAgICAgICBzdGFydEFuZ2xlLFxuICAgICAgICBlbmRBbmdsZTogc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2UsXG4gICAgICAgIGNpcmN1bWZlcmVuY2UsXG4gICAgICAgIG91dGVyUmFkaXVzLFxuICAgICAgICBpbm5lclJhZGl1c1xuICAgICAgfTtcbiAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBhcmMuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0QW5nbGUgKz0gY2lyY3VtZmVyZW5jZTtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChhcmMsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgfVxuICBjYWxjdWxhdGVUb3RhbCgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBtZXRhRGF0YSA9IG1ldGEuZGF0YTtcbiAgICBsZXQgdG90YWwgPSAwO1xuICAgIGxldCBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBtZXRhRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdmFsdWUgPSBtZXRhLl9wYXJzZWRbaV07XG4gICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgIWlzTmFOKHZhbHVlKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpICYmICFtZXRhRGF0YVtpXS5oaWRkZW4pIHtcbiAgICAgICAgdG90YWwgKz0gTWF0aC5hYnModmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG90YWw7XG4gIH1cbiAgY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSh2YWx1ZSkge1xuICAgIGNvbnN0IHRvdGFsID0gdGhpcy5fY2FjaGVkTWV0YS50b3RhbDtcbiAgICBpZiAodG90YWwgPiAwICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBUQVUgKiAoTWF0aC5hYnModmFsdWUpIC8gdG90YWwpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IGxhYmVscyA9IGNoYXJ0LmRhdGEubGFiZWxzIHx8IFtdO1xuICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0TnVtYmVyKG1ldGEuX3BhcnNlZFtpbmRleF0sIGNoYXJ0Lm9wdGlvbnMubG9jYWxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICB2YWx1ZSxcbiAgICB9O1xuICB9XG4gIGdldE1heEJvcmRlcldpZHRoKGFyY3MpIHtcbiAgICBsZXQgbWF4ID0gMDtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgbGV0IGksIGlsZW4sIG1ldGEsIGNvbnRyb2xsZXIsIG9wdGlvbnM7XG4gICAgaWYgKCFhcmNzKSB7XG4gICAgICBmb3IgKGkgPSAwLCBpbGVuID0gY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgICAgaWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcbiAgICAgICAgICBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgYXJjcyA9IG1ldGEuZGF0YTtcbiAgICAgICAgICBjb250cm9sbGVyID0gbWV0YS5jb250cm9sbGVyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghYXJjcykge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgb3B0aW9ucyA9IGNvbnRyb2xsZXIucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKTtcbiAgICAgIGlmIChvcHRpb25zLmJvcmRlckFsaWduICE9PSAnaW5uZXInKSB7XG4gICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgb3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwLCBvcHRpb25zLmhvdmVyQm9yZGVyV2lkdGggfHwgMCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXg7XG4gIH1cbiAgZ2V0TWF4T2Zmc2V0KGFyY3MpIHtcbiAgICBsZXQgbWF4ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IGFyY3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBvcHRpb25zLm9mZnNldCB8fCAwLCBvcHRpb25zLmhvdmVyT2Zmc2V0IHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gbWF4O1xuICB9XG4gIF9nZXRSaW5nV2VpZ2h0T2Zmc2V0KGRhdGFzZXRJbmRleCkge1xuICAgIGxldCByaW5nV2VpZ2h0T2Zmc2V0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFzZXRJbmRleDsgKytpKSB7XG4gICAgICBpZiAodGhpcy5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG4gICAgICAgIHJpbmdXZWlnaHRPZmZzZXQgKz0gdGhpcy5fZ2V0UmluZ1dlaWdodChpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJpbmdXZWlnaHRPZmZzZXQ7XG4gIH1cbiAgX2dldFJpbmdXZWlnaHQoZGF0YXNldEluZGV4KSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KHZhbHVlT3JEZWZhdWx0KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLndlaWdodCwgMSksIDApO1xuICB9XG4gIF9nZXRWaXNpYmxlRGF0YXNldFdlaWdodFRvdGFsKCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRSaW5nV2VpZ2h0T2Zmc2V0KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHx8IDE7XG4gIH1cbn1cbkRvdWdobnV0Q29udHJvbGxlci5pZCA9ICdkb3VnaG51dCc7XG5Eb3VnaG51dENvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gIGRhdGFFbGVtZW50VHlwZTogJ2FyYycsXG4gIGFuaW1hdGlvbjoge1xuICAgIGFuaW1hdGVSb3RhdGU6IHRydWUsXG4gICAgYW5pbWF0ZVNjYWxlOiBmYWxzZVxuICB9LFxuICBhbmltYXRpb25zOiB7XG4gICAgbnVtYmVyczoge1xuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICBwcm9wZXJ0aWVzOiBbJ2NpcmN1bWZlcmVuY2UnLCAnZW5kQW5nbGUnLCAnaW5uZXJSYWRpdXMnLCAnb3V0ZXJSYWRpdXMnLCAnc3RhcnRBbmdsZScsICd4JywgJ3knLCAnb2Zmc2V0JywgJ2JvcmRlcldpZHRoJywgJ3NwYWNpbmcnXVxuICAgIH0sXG4gIH0sXG4gIGN1dG91dDogJzUwJScsXG4gIHJvdGF0aW9uOiAwLFxuICBjaXJjdW1mZXJlbmNlOiAzNjAsXG4gIHJhZGl1czogJzEwMCUnLFxuICBzcGFjaW5nOiAwLFxuICBpbmRleEF4aXM6ICdyJyxcbn07XG5Eb3VnaG51dENvbnRyb2xsZXIuZGVzY3JpcHRvcnMgPSB7XG4gIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ3NwYWNpbmcnLFxuICBfaW5kZXhhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ3NwYWNpbmcnLFxufTtcbkRvdWdobnV0Q29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIGFzcGVjdFJhdGlvOiAxLFxuICBwbHVnaW5zOiB7XG4gICAgbGVnZW5kOiB7XG4gICAgICBsYWJlbHM6IHtcbiAgICAgICAgZ2VuZXJhdGVMYWJlbHMoY2hhcnQpIHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZGF0YTtcbiAgICAgICAgICBpZiAoZGF0YS5sYWJlbHMubGVuZ3RoICYmIGRhdGEuZGF0YXNldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB7bGFiZWxzOiB7cG9pbnRTdHlsZX19ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5sYWJlbHMubWFwKChsYWJlbCwgaSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoMCk7XG4gICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKGkpO1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IHN0eWxlLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgaGlkZGVuOiAhY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSksXG4gICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkNsaWNrKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICBsZWdlbmQuY2hhcnQudG9nZ2xlRGF0YVZpc2liaWxpdHkobGVnZW5kSXRlbS5pbmRleCk7XG4gICAgICAgIGxlZ2VuZC5jaGFydC51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICB0aXRsZSgpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgICAgbGV0IGRhdGFMYWJlbCA9IHRvb2x0aXBJdGVtLmxhYmVsO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gJzogJyArIHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICAgIGlmIChpc0FycmF5KGRhdGFMYWJlbCkpIHtcbiAgICAgICAgICAgIGRhdGFMYWJlbCA9IGRhdGFMYWJlbC5zbGljZSgpO1xuICAgICAgICAgICAgZGF0YUxhYmVsWzBdICs9IHZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhTGFiZWwgKz0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkYXRhTGFiZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmNsYXNzIExpbmVDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgdGhpcy5zdXBwb3J0c0RlY2ltYXRpb24gPSB0cnVlO1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgfVxuICB1cGRhdGUobW9kZSkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IHtkYXRhc2V0OiBsaW5lLCBkYXRhOiBwb2ludHMgPSBbXSwgX2RhdGFzZXR9ID0gbWV0YTtcbiAgICBjb25zdCBhbmltYXRpb25zRGlzYWJsZWQgPSB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQ7XG4gICAgbGV0IHtzdGFydCwgY291bnR9ID0gX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMobWV0YSwgcG9pbnRzLCBhbmltYXRpb25zRGlzYWJsZWQpO1xuICAgIHRoaXMuX2RyYXdTdGFydCA9IHN0YXJ0O1xuICAgIHRoaXMuX2RyYXdDb3VudCA9IGNvdW50O1xuICAgIGlmIChfc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpKSB7XG4gICAgICBzdGFydCA9IDA7XG4gICAgICBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgfVxuICAgIGxpbmUuX2NoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBsaW5lLl9kYXRhc2V0SW5kZXggPSB0aGlzLmluZGV4O1xuICAgIGxpbmUuX2RlY2ltYXRlZCA9ICEhX2RhdGFzZXQuX2RlY2ltYXRlZDtcbiAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpO1xuICAgIGlmICghdGhpcy5vcHRpb25zLnNob3dMaW5lKSB7XG4gICAgICBvcHRpb25zLmJvcmRlcldpZHRoID0gMDtcbiAgICB9XG4gICAgb3B0aW9ucy5zZWdtZW50ID0gdGhpcy5vcHRpb25zLnNlZ21lbnQ7XG4gICAgdGhpcy51cGRhdGVFbGVtZW50KGxpbmUsIHVuZGVmaW5lZCwge1xuICAgICAgYW5pbWF0ZWQ6ICFhbmltYXRpb25zRGlzYWJsZWQsXG4gICAgICBvcHRpb25zXG4gICAgfSwgbW9kZSk7XG4gICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSk7XG4gIH1cbiAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgY29uc3Qge2lTY2FsZSwgdlNjYWxlLCBfc3RhY2tlZCwgX2RhdGFzZXR9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB7c2hhcmVkT3B0aW9ucywgaW5jbHVkZU9wdGlvbnN9ID0gdGhpcy5fZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgIGNvbnN0IHtzcGFuR2Fwcywgc2VnbWVudH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbWF4R2FwTGVuZ3RoID0gaXNOdW1iZXIoc3BhbkdhcHMpID8gc3BhbkdhcHMgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgY29uc3QgZGlyZWN0VXBkYXRlID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkIHx8IHJlc2V0IHx8IG1vZGUgPT09ICdub25lJztcbiAgICBsZXQgcHJldlBhcnNlZCA9IHN0YXJ0ID4gMCAmJiB0aGlzLmdldFBhcnNlZChzdGFydCAtIDEpO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSkge1xuICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBkaXJlY3RVcGRhdGUgPyBwb2ludCA6IHt9O1xuICAgICAgY29uc3QgbnVsbERhdGEgPSBpc051bGxPclVuZGVmKHBhcnNlZFt2QXhpc10pO1xuICAgICAgY29uc3QgaVBpeGVsID0gcHJvcGVydGllc1tpQXhpc10gPSBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdLCBpKTtcbiAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgfHwgbnVsbERhdGEgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShfc3RhY2tlZCA/IHRoaXMuYXBwbHlTdGFjayh2U2NhbGUsIHBhcnNlZCwgX3N0YWNrZWQpIDogcGFyc2VkW3ZBeGlzXSwgaSk7XG4gICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCkgfHwgbnVsbERhdGE7XG4gICAgICBwcm9wZXJ0aWVzLnN0b3AgPSBpID4gMCAmJiAoTWF0aC5hYnMocGFyc2VkW2lBeGlzXSAtIHByZXZQYXJzZWRbaUF4aXNdKSkgPiBtYXhHYXBMZW5ndGg7XG4gICAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICBwcm9wZXJ0aWVzLnBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgcHJvcGVydGllcy5yYXcgPSBfZGF0YXNldC5kYXRhW2ldO1xuICAgICAgfVxuICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICB9XG4gICAgICBpZiAoIWRpcmVjdFVwZGF0ZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgfVxuICAgICAgcHJldlBhcnNlZCA9IHBhcnNlZDtcbiAgICB9XG4gIH1cbiAgZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgZGF0YXNldCA9IG1ldGEuZGF0YXNldDtcbiAgICBjb25zdCBib3JkZXIgPSBkYXRhc2V0Lm9wdGlvbnMgJiYgZGF0YXNldC5vcHRpb25zLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgY29uc3QgZGF0YSA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICBpZiAoIWRhdGEubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYm9yZGVyO1xuICAgIH1cbiAgICBjb25zdCBmaXJzdFBvaW50ID0gZGF0YVswXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucygwKSk7XG4gICAgY29uc3QgbGFzdFBvaW50ID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGRhdGEubGVuZ3RoIC0gMSkpO1xuICAgIHJldHVybiBNYXRoLm1heChib3JkZXIsIGZpcnN0UG9pbnQsIGxhc3RQb2ludCkgLyAyO1xuICB9XG4gIGRyYXcoKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgbWV0YS5kYXRhc2V0LnVwZGF0ZUNvbnRyb2xQb2ludHModGhpcy5jaGFydC5jaGFydEFyZWEsIG1ldGEuaVNjYWxlLmF4aXMpO1xuICAgIHN1cGVyLmRyYXcoKTtcbiAgfVxufVxuTGluZUNvbnRyb2xsZXIuaWQgPSAnbGluZSc7XG5MaW5lQ29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgZGF0YXNldEVsZW1lbnRUeXBlOiAnbGluZScsXG4gIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgc2hvd0xpbmU6IHRydWUsXG4gIHNwYW5HYXBzOiBmYWxzZSxcbn07XG5MaW5lQ29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIHNjYWxlczoge1xuICAgIF9pbmRleF86IHtcbiAgICAgIHR5cGU6ICdjYXRlZ29yeScsXG4gICAgfSxcbiAgICBfdmFsdWVfOiB7XG4gICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICB9LFxuICB9XG59O1xuXG5jbGFzcyBQb2xhckFyZWFDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KSB7XG4gICAgc3VwZXIoY2hhcnQsIGRhdGFzZXRJbmRleCk7XG4gICAgdGhpcy5pbm5lclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm91dGVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICB9XG4gIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgbGFiZWxzID0gY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgY29uc3QgdmFsdWUgPSBmb3JtYXROdW1iZXIobWV0YS5fcGFyc2VkW2luZGV4XS5yLCBjaGFydC5vcHRpb25zLmxvY2FsZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiBsYWJlbHNbaW5kZXhdIHx8ICcnLFxuICAgICAgdmFsdWUsXG4gICAgfTtcbiAgfVxuICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgcmV0dXJuIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZS5iaW5kKHRoaXMpKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBhcmNzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgIHRoaXMuX3VwZGF0ZVJhZGl1cygpO1xuICAgIHRoaXMudXBkYXRlRWxlbWVudHMoYXJjcywgMCwgYXJjcy5sZW5ndGgsIG1vZGUpO1xuICB9XG4gIGdldE1pbk1heCgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCByYW5nZSA9IHttaW46IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgbWF4OiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFl9O1xuICAgIG1ldGEuZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpLnI7XG4gICAgICBpZiAoIWlzTmFOKHBhcnNlZCkgJiYgdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpbmRleCkpIHtcbiAgICAgICAgaWYgKHBhcnNlZCA8IHJhbmdlLm1pbikge1xuICAgICAgICAgIHJhbmdlLm1pbiA9IHBhcnNlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkID4gcmFuZ2UubWF4KSB7XG4gICAgICAgICAgcmFuZ2UubWF4ID0gcGFyc2VkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG4gIF91cGRhdGVSYWRpdXMoKSB7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICBjb25zdCBtaW5TaXplID0gTWF0aC5taW4oY2hhcnRBcmVhLnJpZ2h0IC0gY2hhcnRBcmVhLmxlZnQsIGNoYXJ0QXJlYS5ib3R0b20gLSBjaGFydEFyZWEudG9wKTtcbiAgICBjb25zdCBvdXRlclJhZGl1cyA9IE1hdGgubWF4KG1pblNpemUgLyAyLCAwKTtcbiAgICBjb25zdCBpbm5lclJhZGl1cyA9IE1hdGgubWF4KG9wdHMuY3V0b3V0UGVyY2VudGFnZSA/IChvdXRlclJhZGl1cyAvIDEwMCkgKiAob3B0cy5jdXRvdXRQZXJjZW50YWdlKSA6IDEsIDApO1xuICAgIGNvbnN0IHJhZGl1c0xlbmd0aCA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIGNoYXJ0LmdldFZpc2libGVEYXRhc2V0Q291bnQoKTtcbiAgICB0aGlzLm91dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSAocmFkaXVzTGVuZ3RoICogdGhpcy5pbmRleCk7XG4gICAgdGhpcy5pbm5lclJhZGl1cyA9IHRoaXMub3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGg7XG4gIH1cbiAgdXBkYXRlRWxlbWVudHMoYXJjcywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICBjb25zdCBhbmltYXRpb25PcHRzID0gb3B0cy5hbmltYXRpb247XG4gICAgY29uc3Qgc2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnJTY2FsZTtcbiAgICBjb25zdCBjZW50ZXJYID0gc2NhbGUueENlbnRlcjtcbiAgICBjb25zdCBjZW50ZXJZID0gc2NhbGUueUNlbnRlcjtcbiAgICBjb25zdCBkYXRhc2V0U3RhcnRBbmdsZSA9IHNjYWxlLmdldEluZGV4QW5nbGUoMCkgLSAwLjUgKiBQSTtcbiAgICBsZXQgYW5nbGUgPSBkYXRhc2V0U3RhcnRBbmdsZTtcbiAgICBsZXQgaTtcbiAgICBjb25zdCBkZWZhdWx0QW5nbGUgPSAzNjAgLyB0aGlzLmNvdW50VmlzaWJsZUVsZW1lbnRzKCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHN0YXJ0OyArK2kpIHtcbiAgICAgIGFuZ2xlICs9IHRoaXMuX2NvbXB1dGVBbmdsZShpLCBtb2RlLCBkZWZhdWx0QW5nbGUpO1xuICAgIH1cbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKykge1xuICAgICAgY29uc3QgYXJjID0gYXJjc1tpXTtcbiAgICAgIGxldCBzdGFydEFuZ2xlID0gYW5nbGU7XG4gICAgICBsZXQgZW5kQW5nbGUgPSBhbmdsZSArIHRoaXMuX2NvbXB1dGVBbmdsZShpLCBtb2RlLCBkZWZhdWx0QW5nbGUpO1xuICAgICAgbGV0IG91dGVyUmFkaXVzID0gY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSkgPyBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0aGlzLmdldFBhcnNlZChpKS5yKSA6IDA7XG4gICAgICBhbmdsZSA9IGVuZEFuZ2xlO1xuICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgIGlmIChhbmltYXRpb25PcHRzLmFuaW1hdGVTY2FsZSkge1xuICAgICAgICAgIG91dGVyUmFkaXVzID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5pbWF0aW9uT3B0cy5hbmltYXRlUm90YXRlKSB7XG4gICAgICAgICAgc3RhcnRBbmdsZSA9IGVuZEFuZ2xlID0gZGF0YXNldFN0YXJ0QW5nbGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgIHg6IGNlbnRlclgsXG4gICAgICAgIHk6IGNlbnRlclksXG4gICAgICAgIGlubmVyUmFkaXVzOiAwLFxuICAgICAgICBvdXRlclJhZGl1cyxcbiAgICAgICAgc3RhcnRBbmdsZSxcbiAgICAgICAgZW5kQW5nbGUsXG4gICAgICAgIG9wdGlvbnM6IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBhcmMuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKVxuICAgICAgfTtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChhcmMsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgfVxuICBjb3VudFZpc2libGVFbGVtZW50cygpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIG1ldGEuZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKCFpc05hTih0aGlzLmdldFBhcnNlZChpbmRleCkucikgJiYgdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpbmRleCkpIHtcbiAgICAgICAgY291bnQrKztcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY291bnQ7XG4gIH1cbiAgX2NvbXB1dGVBbmdsZShpbmRleCwgbW9kZSwgZGVmYXVsdEFuZ2xlKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpXG4gICAgICA/IHRvUmFkaWFucyh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpLmFuZ2xlIHx8IGRlZmF1bHRBbmdsZSlcbiAgICAgIDogMDtcbiAgfVxufVxuUG9sYXJBcmVhQ29udHJvbGxlci5pZCA9ICdwb2xhckFyZWEnO1xuUG9sYXJBcmVhQ29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgZGF0YUVsZW1lbnRUeXBlOiAnYXJjJyxcbiAgYW5pbWF0aW9uOiB7XG4gICAgYW5pbWF0ZVJvdGF0ZTogdHJ1ZSxcbiAgICBhbmltYXRlU2NhbGU6IHRydWVcbiAgfSxcbiAgYW5pbWF0aW9uczoge1xuICAgIG51bWJlcnM6IHtcbiAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgcHJvcGVydGllczogWyd4JywgJ3knLCAnc3RhcnRBbmdsZScsICdlbmRBbmdsZScsICdpbm5lclJhZGl1cycsICdvdXRlclJhZGl1cyddXG4gICAgfSxcbiAgfSxcbiAgaW5kZXhBeGlzOiAncicsXG4gIHN0YXJ0QW5nbGU6IDAsXG59O1xuUG9sYXJBcmVhQ29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIGFzcGVjdFJhdGlvOiAxLFxuICBwbHVnaW5zOiB7XG4gICAgbGVnZW5kOiB7XG4gICAgICBsYWJlbHM6IHtcbiAgICAgICAgZ2VuZXJhdGVMYWJlbHMoY2hhcnQpIHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZGF0YTtcbiAgICAgICAgICBpZiAoZGF0YS5sYWJlbHMubGVuZ3RoICYmIGRhdGEuZGF0YXNldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB7bGFiZWxzOiB7cG9pbnRTdHlsZX19ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5sYWJlbHMubWFwKChsYWJlbCwgaSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoMCk7XG4gICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKGkpO1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IHN0eWxlLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgaGlkZGVuOiAhY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSksXG4gICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkNsaWNrKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICBsZWdlbmQuY2hhcnQudG9nZ2xlRGF0YVZpc2liaWxpdHkobGVnZW5kSXRlbS5pbmRleCk7XG4gICAgICAgIGxlZ2VuZC5jaGFydC51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICB0aXRsZSgpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsKGNvbnRleHQpIHtcbiAgICAgICAgICByZXR1cm4gY29udGV4dC5jaGFydC5kYXRhLmxhYmVsc1tjb250ZXh0LmRhdGFJbmRleF0gKyAnOiAnICsgY29udGV4dC5mb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgc2NhbGVzOiB7XG4gICAgcjoge1xuICAgICAgdHlwZTogJ3JhZGlhbExpbmVhcicsXG4gICAgICBhbmdsZUxpbmVzOiB7XG4gICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgYmVnaW5BdFplcm86IHRydWUsXG4gICAgICBncmlkOiB7XG4gICAgICAgIGNpcmN1bGFyOiB0cnVlXG4gICAgICB9LFxuICAgICAgcG9pbnRMYWJlbHM6IHtcbiAgICAgICAgZGlzcGxheTogZmFsc2VcbiAgICAgIH0sXG4gICAgICBzdGFydEFuZ2xlOiAwXG4gICAgfVxuICB9XG59O1xuXG5jbGFzcyBQaWVDb250cm9sbGVyIGV4dGVuZHMgRG91Z2hudXRDb250cm9sbGVyIHtcbn1cblBpZUNvbnRyb2xsZXIuaWQgPSAncGllJztcblBpZUNvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGN1dG91dDogMCxcbiAgcm90YXRpb246IDAsXG4gIGNpcmN1bWZlcmVuY2U6IDM2MCxcbiAgcmFkaXVzOiAnMTAwJSdcbn07XG5cbmNsYXNzIFJhZGFyQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgIGNvbnN0IHZTY2FsZSA9IHRoaXMuX2NhY2hlZE1ldGEudlNjYWxlO1xuICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IHZTY2FsZS5nZXRMYWJlbHMoKVtpbmRleF0sXG4gICAgICB2YWx1ZTogJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKVxuICAgIH07XG4gIH1cbiAgcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIHJldHVybiBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUuYmluZCh0aGlzKShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgbGluZSA9IG1ldGEuZGF0YXNldDtcbiAgICBjb25zdCBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgY29uc3QgbGFiZWxzID0gbWV0YS5pU2NhbGUuZ2V0TGFiZWxzKCk7XG4gICAgbGluZS5wb2ludHMgPSBwb2ludHM7XG4gICAgaWYgKG1vZGUgIT09ICdyZXNpemUnKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpO1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgICAgb3B0aW9ucy5ib3JkZXJXaWR0aCA9IDA7XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBfbG9vcDogdHJ1ZSxcbiAgICAgICAgX2Z1bGxMb29wOiBsYWJlbHMubGVuZ3RoID09PSBwb2ludHMubGVuZ3RoLFxuICAgICAgICBvcHRpb25zXG4gICAgICB9O1xuICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGxpbmUsIHVuZGVmaW5lZCwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCAwLCBwb2ludHMubGVuZ3RoLCBtb2RlKTtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5fY2FjaGVkTWV0YS5yU2NhbGU7XG4gICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKykge1xuICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICBjb25zdCBwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGksIHRoaXMuZ2V0UGFyc2VkKGkpLnIpO1xuICAgICAgY29uc3QgeCA9IHJlc2V0ID8gc2NhbGUueENlbnRlciA6IHBvaW50UG9zaXRpb24ueDtcbiAgICAgIGNvbnN0IHkgPSByZXNldCA/IHNjYWxlLnlDZW50ZXIgOiBwb2ludFBvc2l0aW9uLnk7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBhbmdsZTogcG9pbnRQb3NpdGlvbi5hbmdsZSxcbiAgICAgICAgc2tpcDogaXNOYU4oeCkgfHwgaXNOYU4oeSksXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIH07XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgfVxufVxuUmFkYXJDb250cm9sbGVyLmlkID0gJ3JhZGFyJztcblJhZGFyQ29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgZGF0YXNldEVsZW1lbnRUeXBlOiAnbGluZScsXG4gIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgaW5kZXhBeGlzOiAncicsXG4gIHNob3dMaW5lOiB0cnVlLFxuICBlbGVtZW50czoge1xuICAgIGxpbmU6IHtcbiAgICAgIGZpbGw6ICdzdGFydCdcbiAgICB9XG4gIH0sXG59O1xuUmFkYXJDb250cm9sbGVyLm92ZXJyaWRlcyA9IHtcbiAgYXNwZWN0UmF0aW86IDEsXG4gIHNjYWxlczoge1xuICAgIHI6IHtcbiAgICAgIHR5cGU6ICdyYWRpYWxMaW5lYXInLFxuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMueCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy4kYW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgfVxuICB0b29sdGlwUG9zaXRpb24odXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHt4LCB5fSA9IHRoaXMuZ2V0UHJvcHMoWyd4JywgJ3knXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgcmV0dXJuIHt4LCB5fTtcbiAgfVxuICBoYXNWYWx1ZSgpIHtcbiAgICByZXR1cm4gaXNOdW1iZXIodGhpcy54KSAmJiBpc051bWJlcih0aGlzLnkpO1xuICB9XG4gIGdldFByb3BzKHByb3BzLCBmaW5hbCkge1xuICAgIGNvbnN0IGFuaW1zID0gdGhpcy4kYW5pbWF0aW9ucztcbiAgICBpZiAoIWZpbmFsIHx8ICFhbmltcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIHByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICByZXRbcHJvcF0gPSBhbmltc1twcm9wXSAmJiBhbmltc1twcm9wXS5hY3RpdmUoKSA/IGFuaW1zW3Byb3BdLl90byA6IHRoaXNbcHJvcF07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxufVxuRWxlbWVudC5kZWZhdWx0cyA9IHt9O1xuRWxlbWVudC5kZWZhdWx0Um91dGVzID0gdW5kZWZpbmVkO1xuXG5jb25zdCBmb3JtYXR0ZXJzID0ge1xuICB2YWx1ZXModmFsdWUpIHtcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6ICcnICsgdmFsdWU7XG4gIH0sXG4gIG51bWVyaWModGlja1ZhbHVlLCBpbmRleCwgdGlja3MpIHtcbiAgICBpZiAodGlja1ZhbHVlID09PSAwKSB7XG4gICAgICByZXR1cm4gJzAnO1xuICAgIH1cbiAgICBjb25zdCBsb2NhbGUgPSB0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlO1xuICAgIGxldCBub3RhdGlvbjtcbiAgICBsZXQgZGVsdGEgPSB0aWNrVmFsdWU7XG4gICAgaWYgKHRpY2tzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IG1heFRpY2sgPSBNYXRoLm1heChNYXRoLmFicyh0aWNrc1swXS52YWx1ZSksIE1hdGguYWJzKHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlKSk7XG4gICAgICBpZiAobWF4VGljayA8IDFlLTQgfHwgbWF4VGljayA+IDFlKzE1KSB7XG4gICAgICAgIG5vdGF0aW9uID0gJ3NjaWVudGlmaWMnO1xuICAgICAgfVxuICAgICAgZGVsdGEgPSBjYWxjdWxhdGVEZWx0YSh0aWNrVmFsdWUsIHRpY2tzKTtcbiAgICB9XG4gICAgY29uc3QgbG9nRGVsdGEgPSBsb2cxMChNYXRoLmFicyhkZWx0YSkpO1xuICAgIGNvbnN0IG51bURlY2ltYWwgPSBNYXRoLm1heChNYXRoLm1pbigtMSAqIE1hdGguZmxvb3IobG9nRGVsdGEpLCAyMCksIDApO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7bm90YXRpb24sIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogbnVtRGVjaW1hbCwgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiBudW1EZWNpbWFsfTtcbiAgICBPYmplY3QuYXNzaWduKG9wdGlvbnMsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICAgIHJldHVybiBmb3JtYXROdW1iZXIodGlja1ZhbHVlLCBsb2NhbGUsIG9wdGlvbnMpO1xuICB9LFxuICBsb2dhcml0aG1pYyh0aWNrVmFsdWUsIGluZGV4LCB0aWNrcykge1xuICAgIGlmICh0aWNrVmFsdWUgPT09IDApIHtcbiAgICAgIHJldHVybiAnMCc7XG4gICAgfVxuICAgIGNvbnN0IHJlbWFpbiA9IHRpY2tWYWx1ZSAvIChNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMCh0aWNrVmFsdWUpKSkpO1xuICAgIGlmIChyZW1haW4gPT09IDEgfHwgcmVtYWluID09PSAyIHx8IHJlbWFpbiA9PT0gNSkge1xuICAgICAgcmV0dXJuIGZvcm1hdHRlcnMubnVtZXJpYy5jYWxsKHRoaXMsIHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG59O1xuZnVuY3Rpb24gY2FsY3VsYXRlRGVsdGEodGlja1ZhbHVlLCB0aWNrcykge1xuICBsZXQgZGVsdGEgPSB0aWNrcy5sZW5ndGggPiAzID8gdGlja3NbMl0udmFsdWUgLSB0aWNrc1sxXS52YWx1ZSA6IHRpY2tzWzFdLnZhbHVlIC0gdGlja3NbMF0udmFsdWU7XG4gIGlmIChNYXRoLmFicyhkZWx0YSkgPj0gMSAmJiB0aWNrVmFsdWUgIT09IE1hdGguZmxvb3IodGlja1ZhbHVlKSkge1xuICAgIGRlbHRhID0gdGlja1ZhbHVlIC0gTWF0aC5mbG9vcih0aWNrVmFsdWUpO1xuICB9XG4gIHJldHVybiBkZWx0YTtcbn1cbnZhciBUaWNrcyA9IHtmb3JtYXR0ZXJzfTtcblxuZGVmYXVsdHMuc2V0KCdzY2FsZScsIHtcbiAgZGlzcGxheTogdHJ1ZSxcbiAgb2Zmc2V0OiBmYWxzZSxcbiAgcmV2ZXJzZTogZmFsc2UsXG4gIGJlZ2luQXRaZXJvOiBmYWxzZSxcbiAgYm91bmRzOiAndGlja3MnLFxuICBncmFjZTogMCxcbiAgZ3JpZDoge1xuICAgIGRpc3BsYXk6IHRydWUsXG4gICAgbGluZVdpZHRoOiAxLFxuICAgIGRyYXdCb3JkZXI6IHRydWUsXG4gICAgZHJhd09uQ2hhcnRBcmVhOiB0cnVlLFxuICAgIGRyYXdUaWNrczogdHJ1ZSxcbiAgICB0aWNrTGVuZ3RoOiA4LFxuICAgIHRpY2tXaWR0aDogKF9jdHgsIG9wdGlvbnMpID0+IG9wdGlvbnMubGluZVdpZHRoLFxuICAgIHRpY2tDb2xvcjogKF9jdHgsIG9wdGlvbnMpID0+IG9wdGlvbnMuY29sb3IsXG4gICAgb2Zmc2V0OiBmYWxzZSxcbiAgICBib3JkZXJEYXNoOiBbXSxcbiAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLjAsXG4gICAgYm9yZGVyV2lkdGg6IDFcbiAgfSxcbiAgdGl0bGU6IHtcbiAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICB0ZXh0OiAnJyxcbiAgICBwYWRkaW5nOiB7XG4gICAgICB0b3A6IDQsXG4gICAgICBib3R0b206IDRcbiAgICB9XG4gIH0sXG4gIHRpY2tzOiB7XG4gICAgbWluUm90YXRpb246IDAsXG4gICAgbWF4Um90YXRpb246IDUwLFxuICAgIG1pcnJvcjogZmFsc2UsXG4gICAgdGV4dFN0cm9rZVdpZHRoOiAwLFxuICAgIHRleHRTdHJva2VDb2xvcjogJycsXG4gICAgcGFkZGluZzogMyxcbiAgICBkaXNwbGF5OiB0cnVlLFxuICAgIGF1dG9Ta2lwOiB0cnVlLFxuICAgIGF1dG9Ta2lwUGFkZGluZzogMyxcbiAgICBsYWJlbE9mZnNldDogMCxcbiAgICBjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy52YWx1ZXMsXG4gICAgbWlub3I6IHt9LFxuICAgIG1ham9yOiB7fSxcbiAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgY3Jvc3NBbGlnbjogJ25lYXInLFxuICAgIHNob3dMYWJlbEJhY2tkcm9wOiBmYWxzZSxcbiAgICBiYWNrZHJvcENvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjc1KScsXG4gICAgYmFja2Ryb3BQYWRkaW5nOiAyLFxuICB9XG59KTtcbmRlZmF1bHRzLnJvdXRlKCdzY2FsZS50aWNrcycsICdjb2xvcicsICcnLCAnY29sb3InKTtcbmRlZmF1bHRzLnJvdXRlKCdzY2FsZS5ncmlkJywgJ2NvbG9yJywgJycsICdib3JkZXJDb2xvcicpO1xuZGVmYXVsdHMucm91dGUoJ3NjYWxlLmdyaWQnLCAnYm9yZGVyQ29sb3InLCAnJywgJ2JvcmRlckNvbG9yJyk7XG5kZWZhdWx0cy5yb3V0ZSgnc2NhbGUudGl0bGUnLCAnY29sb3InLCAnJywgJ2NvbG9yJyk7XG5kZWZhdWx0cy5kZXNjcmliZSgnc2NhbGUnLCB7XG4gIF9mYWxsYmFjazogZmFsc2UsXG4gIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gIW5hbWUuc3RhcnRzV2l0aCgnYmVmb3JlJykgJiYgIW5hbWUuc3RhcnRzV2l0aCgnYWZ0ZXInKSAmJiBuYW1lICE9PSAnY2FsbGJhY2snICYmIG5hbWUgIT09ICdwYXJzZXInLFxuICBfaW5kZXhhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ2JvcmRlckRhc2gnICYmIG5hbWUgIT09ICd0aWNrQm9yZGVyRGFzaCcsXG59KTtcbmRlZmF1bHRzLmRlc2NyaWJlKCdzY2FsZXMnLCB7XG4gIF9mYWxsYmFjazogJ3NjYWxlJyxcbn0pO1xuZGVmYXVsdHMuZGVzY3JpYmUoJ3NjYWxlLnRpY2tzJywge1xuICBfc2NyaXB0YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdiYWNrZHJvcFBhZGRpbmcnICYmIG5hbWUgIT09ICdjYWxsYmFjaycsXG4gIF9pbmRleGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnYmFja2Ryb3BQYWRkaW5nJyxcbn0pO1xuXG5mdW5jdGlvbiBhdXRvU2tpcChzY2FsZSwgdGlja3MpIHtcbiAgY29uc3QgdGlja09wdHMgPSBzY2FsZS5vcHRpb25zLnRpY2tzO1xuICBjb25zdCB0aWNrc0xpbWl0ID0gdGlja09wdHMubWF4VGlja3NMaW1pdCB8fCBkZXRlcm1pbmVNYXhUaWNrcyhzY2FsZSk7XG4gIGNvbnN0IG1ham9ySW5kaWNlcyA9IHRpY2tPcHRzLm1ham9yLmVuYWJsZWQgPyBnZXRNYWpvckluZGljZXModGlja3MpIDogW107XG4gIGNvbnN0IG51bU1ham9ySW5kaWNlcyA9IG1ham9ySW5kaWNlcy5sZW5ndGg7XG4gIGNvbnN0IGZpcnN0ID0gbWFqb3JJbmRpY2VzWzBdO1xuICBjb25zdCBsYXN0ID0gbWFqb3JJbmRpY2VzW251bU1ham9ySW5kaWNlcyAtIDFdO1xuICBjb25zdCBuZXdUaWNrcyA9IFtdO1xuICBpZiAobnVtTWFqb3JJbmRpY2VzID4gdGlja3NMaW1pdCkge1xuICAgIHNraXBNYWpvcnModGlja3MsIG5ld1RpY2tzLCBtYWpvckluZGljZXMsIG51bU1ham9ySW5kaWNlcyAvIHRpY2tzTGltaXQpO1xuICAgIHJldHVybiBuZXdUaWNrcztcbiAgfVxuICBjb25zdCBzcGFjaW5nID0gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCB0aWNrc0xpbWl0KTtcbiAgaWYgKG51bU1ham9ySW5kaWNlcyA+IDApIHtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBjb25zdCBhdmdNYWpvclNwYWNpbmcgPSBudW1NYWpvckluZGljZXMgPiAxID8gTWF0aC5yb3VuZCgobGFzdCAtIGZpcnN0KSAvIChudW1NYWpvckluZGljZXMgLSAxKSkgOiBudWxsO1xuICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBpc051bGxPclVuZGVmKGF2Z01ham9yU3BhY2luZykgPyAwIDogZmlyc3QgLSBhdmdNYWpvclNwYWNpbmcsIGZpcnN0KTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbnVtTWFqb3JJbmRpY2VzIC0gMTsgaSA8IGlsZW47IGkrKykge1xuICAgICAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIG1ham9ySW5kaWNlc1tpXSwgbWFqb3JJbmRpY2VzW2kgKyAxXSk7XG4gICAgfVxuICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBsYXN0LCBpc051bGxPclVuZGVmKGF2Z01ham9yU3BhY2luZykgPyB0aWNrcy5sZW5ndGggOiBsYXN0ICsgYXZnTWFqb3JTcGFjaW5nKTtcbiAgICByZXR1cm4gbmV3VGlja3M7XG4gIH1cbiAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcpO1xuICByZXR1cm4gbmV3VGlja3M7XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVNYXhUaWNrcyhzY2FsZSkge1xuICBjb25zdCBvZmZzZXQgPSBzY2FsZS5vcHRpb25zLm9mZnNldDtcbiAgY29uc3QgdGlja0xlbmd0aCA9IHNjYWxlLl90aWNrU2l6ZSgpO1xuICBjb25zdCBtYXhTY2FsZSA9IHNjYWxlLl9sZW5ndGggLyB0aWNrTGVuZ3RoICsgKG9mZnNldCA/IDAgOiAxKTtcbiAgY29uc3QgbWF4Q2hhcnQgPSBzY2FsZS5fbWF4TGVuZ3RoIC8gdGlja0xlbmd0aDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5taW4obWF4U2NhbGUsIG1heENoYXJ0KSk7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVTcGFjaW5nKG1ham9ySW5kaWNlcywgdGlja3MsIHRpY2tzTGltaXQpIHtcbiAgY29uc3QgZXZlbk1ham9yU3BhY2luZyA9IGdldEV2ZW5TcGFjaW5nKG1ham9ySW5kaWNlcyk7XG4gIGNvbnN0IHNwYWNpbmcgPSB0aWNrcy5sZW5ndGggLyB0aWNrc0xpbWl0O1xuICBpZiAoIWV2ZW5NYWpvclNwYWNpbmcpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoc3BhY2luZywgMSk7XG4gIH1cbiAgY29uc3QgZmFjdG9ycyA9IF9mYWN0b3JpemUoZXZlbk1ham9yU3BhY2luZyk7XG4gIGZvciAobGV0IGkgPSAwLCBpbGVuID0gZmFjdG9ycy5sZW5ndGggLSAxOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgY29uc3QgZmFjdG9yID0gZmFjdG9yc1tpXTtcbiAgICBpZiAoZmFjdG9yID4gc3BhY2luZykge1xuICAgICAgcmV0dXJuIGZhY3RvcjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIE1hdGgubWF4KHNwYWNpbmcsIDEpO1xufVxuZnVuY3Rpb24gZ2V0TWFqb3JJbmRpY2VzKHRpY2tzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBsZXQgaSwgaWxlbjtcbiAgZm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgIGlmICh0aWNrc1tpXS5tYWpvcikge1xuICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBza2lwTWFqb3JzKHRpY2tzLCBuZXdUaWNrcywgbWFqb3JJbmRpY2VzLCBzcGFjaW5nKSB7XG4gIGxldCBjb3VudCA9IDA7XG4gIGxldCBuZXh0ID0gbWFqb3JJbmRpY2VzWzBdO1xuICBsZXQgaTtcbiAgc3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nKTtcbiAgZm9yIChpID0gMDsgaSA8IHRpY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGkgPT09IG5leHQpIHtcbiAgICAgIG5ld1RpY2tzLnB1c2godGlja3NbaV0pO1xuICAgICAgY291bnQrKztcbiAgICAgIG5leHQgPSBtYWpvckluZGljZXNbY291bnQgKiBzcGFjaW5nXTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBtYWpvclN0YXJ0LCBtYWpvckVuZCkge1xuICBjb25zdCBzdGFydCA9IHZhbHVlT3JEZWZhdWx0KG1ham9yU3RhcnQsIDApO1xuICBjb25zdCBlbmQgPSBNYXRoLm1pbih2YWx1ZU9yRGVmYXVsdChtYWpvckVuZCwgdGlja3MubGVuZ3RoKSwgdGlja3MubGVuZ3RoKTtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IGxlbmd0aCwgaSwgbmV4dDtcbiAgc3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nKTtcbiAgaWYgKG1ham9yRW5kKSB7XG4gICAgbGVuZ3RoID0gbWFqb3JFbmQgLSBtYWpvclN0YXJ0O1xuICAgIHNwYWNpbmcgPSBsZW5ndGggLyBNYXRoLmZsb29yKGxlbmd0aCAvIHNwYWNpbmcpO1xuICB9XG4gIG5leHQgPSBzdGFydDtcbiAgd2hpbGUgKG5leHQgPCAwKSB7XG4gICAgY291bnQrKztcbiAgICBuZXh0ID0gTWF0aC5yb3VuZChzdGFydCArIGNvdW50ICogc3BhY2luZyk7XG4gIH1cbiAgZm9yIChpID0gTWF0aC5tYXgoc3RhcnQsIDApOyBpIDwgZW5kOyBpKyspIHtcbiAgICBpZiAoaSA9PT0gbmV4dCkge1xuICAgICAgbmV3VGlja3MucHVzaCh0aWNrc1tpXSk7XG4gICAgICBjb3VudCsrO1xuICAgICAgbmV4dCA9IE1hdGgucm91bmQoc3RhcnQgKyBjb3VudCAqIHNwYWNpbmcpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0RXZlblNwYWNpbmcoYXJyKSB7XG4gIGNvbnN0IGxlbiA9IGFyci5sZW5ndGg7XG4gIGxldCBpLCBkaWZmO1xuICBpZiAobGVuIDwgMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGRpZmYgPSBhcnJbMF0sIGkgPSAxOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldIC0gYXJyW2kgLSAxXSAhPT0gZGlmZikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGlmZjtcbn1cblxuY29uc3QgcmV2ZXJzZUFsaWduID0gKGFsaWduKSA9PiBhbGlnbiA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6IGFsaWduID09PSAncmlnaHQnID8gJ2xlZnQnIDogYWxpZ247XG5jb25zdCBvZmZzZXRGcm9tRWRnZSA9IChzY2FsZSwgZWRnZSwgb2Zmc2V0KSA9PiBlZGdlID09PSAndG9wJyB8fCBlZGdlID09PSAnbGVmdCcgPyBzY2FsZVtlZGdlXSArIG9mZnNldCA6IHNjYWxlW2VkZ2VdIC0gb2Zmc2V0O1xuZnVuY3Rpb24gc2FtcGxlKGFyciwgbnVtSXRlbXMpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IGluY3JlbWVudCA9IGFyci5sZW5ndGggLyBudW1JdGVtcztcbiAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcbiAgbGV0IGkgPSAwO1xuICBmb3IgKDsgaSA8IGxlbjsgaSArPSBpbmNyZW1lbnQpIHtcbiAgICByZXN1bHQucHVzaChhcnJbTWF0aC5mbG9vcihpKV0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRQaXhlbEZvckdyaWRMaW5lKHNjYWxlLCBpbmRleCwgb2Zmc2V0R3JpZExpbmVzKSB7XG4gIGNvbnN0IGxlbmd0aCA9IHNjYWxlLnRpY2tzLmxlbmd0aDtcbiAgY29uc3QgdmFsaWRJbmRleCA9IE1hdGgubWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgY29uc3Qgc3RhcnQgPSBzY2FsZS5fc3RhcnRQaXhlbDtcbiAgY29uc3QgZW5kID0gc2NhbGUuX2VuZFBpeGVsO1xuICBjb25zdCBlcHNpbG9uID0gMWUtNjtcbiAgbGV0IGxpbmVWYWx1ZSA9IHNjYWxlLmdldFBpeGVsRm9yVGljayh2YWxpZEluZGV4KTtcbiAgbGV0IG9mZnNldDtcbiAgaWYgKG9mZnNldEdyaWRMaW5lcykge1xuICAgIGlmIChsZW5ndGggPT09IDEpIHtcbiAgICAgIG9mZnNldCA9IE1hdGgubWF4KGxpbmVWYWx1ZSAtIHN0YXJ0LCBlbmQgLSBsaW5lVmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgIG9mZnNldCA9IChzY2FsZS5nZXRQaXhlbEZvclRpY2soMSkgLSBsaW5lVmFsdWUpIC8gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgb2Zmc2V0ID0gKGxpbmVWYWx1ZSAtIHNjYWxlLmdldFBpeGVsRm9yVGljayh2YWxpZEluZGV4IC0gMSkpIC8gMjtcbiAgICB9XG4gICAgbGluZVZhbHVlICs9IHZhbGlkSW5kZXggPCBpbmRleCA/IG9mZnNldCA6IC1vZmZzZXQ7XG4gICAgaWYgKGxpbmVWYWx1ZSA8IHN0YXJ0IC0gZXBzaWxvbiB8fCBsaW5lVmFsdWUgPiBlbmQgKyBlcHNpbG9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIHJldHVybiBsaW5lVmFsdWU7XG59XG5mdW5jdGlvbiBnYXJiYWdlQ29sbGVjdChjYWNoZXMsIGxlbmd0aCkge1xuICBlYWNoKGNhY2hlcywgKGNhY2hlKSA9PiB7XG4gICAgY29uc3QgZ2MgPSBjYWNoZS5nYztcbiAgICBjb25zdCBnY0xlbiA9IGdjLmxlbmd0aCAvIDI7XG4gICAgbGV0IGk7XG4gICAgaWYgKGdjTGVuID4gbGVuZ3RoKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZ2NMZW47ICsraSkge1xuICAgICAgICBkZWxldGUgY2FjaGUuZGF0YVtnY1tpXV07XG4gICAgICB9XG4gICAgICBnYy5zcGxpY2UoMCwgZ2NMZW4pO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmRyYXdUaWNrcyA/IG9wdGlvbnMudGlja0xlbmd0aCA6IDA7XG59XG5mdW5jdGlvbiBnZXRUaXRsZUhlaWdodChvcHRpb25zLCBmYWxsYmFjaykge1xuICBpZiAoIW9wdGlvbnMuZGlzcGxheSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGNvbnN0IGZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb250LCBmYWxsYmFjayk7XG4gIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgY29uc3QgbGluZXMgPSBpc0FycmF5KG9wdGlvbnMudGV4dCkgPyBvcHRpb25zLnRleHQubGVuZ3RoIDogMTtcbiAgcmV0dXJuIChsaW5lcyAqIGZvbnQubGluZUhlaWdodCkgKyBwYWRkaW5nLmhlaWdodDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNjYWxlQ29udGV4dChwYXJlbnQsIHNjYWxlKSB7XG4gIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgIHNjYWxlLFxuICAgIHR5cGU6ICdzY2FsZSdcbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVUaWNrQ29udGV4dChwYXJlbnQsIGluZGV4LCB0aWNrKSB7XG4gIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgIHRpY2ssXG4gICAgaW5kZXgsXG4gICAgdHlwZTogJ3RpY2snXG4gIH0pO1xufVxuZnVuY3Rpb24gdGl0bGVBbGlnbihhbGlnbiwgcG9zaXRpb24sIHJldmVyc2UpIHtcbiAgbGV0IHJldCA9IF90b0xlZnRSaWdodENlbnRlcihhbGlnbik7XG4gIGlmICgocmV2ZXJzZSAmJiBwb3NpdGlvbiAhPT0gJ3JpZ2h0JykgfHwgKCFyZXZlcnNlICYmIHBvc2l0aW9uID09PSAncmlnaHQnKSkge1xuICAgIHJldCA9IHJldmVyc2VBbGlnbihyZXQpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiB0aXRsZUFyZ3Moc2NhbGUsIG9mZnNldCwgcG9zaXRpb24sIGFsaWduKSB7XG4gIGNvbnN0IHt0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQsIGNoYXJ0fSA9IHNjYWxlO1xuICBjb25zdCB7Y2hhcnRBcmVhLCBzY2FsZXN9ID0gY2hhcnQ7XG4gIGxldCByb3RhdGlvbiA9IDA7XG4gIGxldCBtYXhXaWR0aCwgdGl0bGVYLCB0aXRsZVk7XG4gIGNvbnN0IGhlaWdodCA9IGJvdHRvbSAtIHRvcDtcbiAgY29uc3Qgd2lkdGggPSByaWdodCAtIGxlZnQ7XG4gIGlmIChzY2FsZS5pc0hvcml6b250YWwoKSkge1xuICAgIHRpdGxlWCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBsZWZ0LCByaWdodCk7XG4gICAgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgIHRpdGxlWSA9IHNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkgKyBoZWlnaHQgLSBvZmZzZXQ7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgIHRpdGxlWSA9IChjaGFydEFyZWEuYm90dG9tICsgY2hhcnRBcmVhLnRvcCkgLyAyICsgaGVpZ2h0IC0gb2Zmc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZVkgPSBvZmZzZXRGcm9tRWRnZShzY2FsZSwgcG9zaXRpb24sIG9mZnNldCk7XG4gICAgfVxuICAgIG1heFdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICB9IGVsc2Uge1xuICAgIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICB0aXRsZVggPSBzY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpIC0gd2lkdGggKyBvZmZzZXQ7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgIHRpdGxlWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyIC0gd2lkdGggKyBvZmZzZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpdGxlWCA9IG9mZnNldEZyb21FZGdlKHNjYWxlLCBwb3NpdGlvbiwgb2Zmc2V0KTtcbiAgICB9XG4gICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGJvdHRvbSwgdG9wKTtcbiAgICByb3RhdGlvbiA9IHBvc2l0aW9uID09PSAnbGVmdCcgPyAtSEFMRl9QSSA6IEhBTEZfUEk7XG4gIH1cbiAgcmV0dXJuIHt0aXRsZVgsIHRpdGxlWSwgbWF4V2lkdGgsIHJvdGF0aW9ufTtcbn1cbmNsYXNzIFNjYWxlIGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pZCA9IGNmZy5pZDtcbiAgICB0aGlzLnR5cGUgPSBjZmcudHlwZTtcbiAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jdHggPSBjZmcuY3R4O1xuICAgIHRoaXMuY2hhcnQgPSBjZmcuY2hhcnQ7XG4gICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sZWZ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9tYXJnaW5zID0ge1xuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgYm90dG9tOiAwXG4gICAgfTtcbiAgICB0aGlzLm1heFdpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWF4SGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGFkZGluZ1RvcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYWRkaW5nTGVmdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhZGRpbmdSaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmF4aXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYWJlbFJvdGF0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWluID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWF4ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3JhbmdlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudGlja3MgPSBbXTtcbiAgICB0aGlzLl9ncmlkTGluZUl0ZW1zID0gbnVsbDtcbiAgICB0aGlzLl9sYWJlbEl0ZW1zID0gbnVsbDtcbiAgICB0aGlzLl9sYWJlbFNpemVzID0gbnVsbDtcbiAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgIHRoaXMuX21heExlbmd0aCA9IDA7XG4gICAgdGhpcy5fbG9uZ2VzdFRleHRDYWNoZSA9IHt9O1xuICAgIHRoaXMuX3N0YXJ0UGl4ZWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZW5kUGl4ZWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fcmV2ZXJzZVBpeGVscyA9IGZhbHNlO1xuICAgIHRoaXMuX3VzZXJNYXggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdXNlck1pbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zdWdnZXN0ZWRNYXggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3VnZ2VzdGVkTWluID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3RpY2tzTGVuZ3RoID0gMDtcbiAgICB0aGlzLl9ib3JkZXJWYWx1ZSA9IDA7XG4gICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICB0aGlzLl9kYXRhTGltaXRzQ2FjaGVkID0gZmFsc2U7XG4gICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgfVxuICBpbml0KG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIHRoaXMuYXhpcyA9IG9wdGlvbnMuYXhpcztcbiAgICB0aGlzLl91c2VyTWluID0gdGhpcy5wYXJzZShvcHRpb25zLm1pbik7XG4gICAgdGhpcy5fdXNlck1heCA9IHRoaXMucGFyc2Uob3B0aW9ucy5tYXgpO1xuICAgIHRoaXMuX3N1Z2dlc3RlZE1pbiA9IHRoaXMucGFyc2Uob3B0aW9ucy5zdWdnZXN0ZWRNaW4pO1xuICAgIHRoaXMuX3N1Z2dlc3RlZE1heCA9IHRoaXMucGFyc2Uob3B0aW9ucy5zdWdnZXN0ZWRNYXgpO1xuICB9XG4gIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICByZXR1cm4gcmF3O1xuICB9XG4gIGdldFVzZXJCb3VuZHMoKSB7XG4gICAgbGV0IHtfdXNlck1pbiwgX3VzZXJNYXgsIF9zdWdnZXN0ZWRNaW4sIF9zdWdnZXN0ZWRNYXh9ID0gdGhpcztcbiAgICBfdXNlck1pbiA9IGZpbml0ZU9yRGVmYXVsdChfdXNlck1pbiwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICBfdXNlck1heCA9IGZpbml0ZU9yRGVmYXVsdChfdXNlck1heCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcbiAgICBfc3VnZ2VzdGVkTWluID0gZmluaXRlT3JEZWZhdWx0KF9zdWdnZXN0ZWRNaW4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgX3N1Z2dlc3RlZE1heCA9IGZpbml0ZU9yRGVmYXVsdChfc3VnZ2VzdGVkTWF4LCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpO1xuICAgIHJldHVybiB7XG4gICAgICBtaW46IGZpbml0ZU9yRGVmYXVsdChfdXNlck1pbiwgX3N1Z2dlc3RlZE1pbiksXG4gICAgICBtYXg6IGZpbml0ZU9yRGVmYXVsdChfdXNlck1heCwgX3N1Z2dlc3RlZE1heCksXG4gICAgICBtaW5EZWZpbmVkOiBpc051bWJlckZpbml0ZShfdXNlck1pbiksXG4gICAgICBtYXhEZWZpbmVkOiBpc051bWJlckZpbml0ZShfdXNlck1heClcbiAgICB9O1xuICB9XG4gIGdldE1pbk1heChjYW5TdGFjaykge1xuICAgIGxldCB7bWluLCBtYXgsIG1pbkRlZmluZWQsIG1heERlZmluZWR9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgbGV0IHJhbmdlO1xuICAgIGlmIChtaW5EZWZpbmVkICYmIG1heERlZmluZWQpIHtcbiAgICAgIHJldHVybiB7bWluLCBtYXh9O1xuICAgIH1cbiAgICBjb25zdCBtZXRhcyA9IHRoaXMuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IG1ldGFzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgcmFuZ2UgPSBtZXRhc1tpXS5jb250cm9sbGVyLmdldE1pbk1heCh0aGlzLCBjYW5TdGFjayk7XG4gICAgICBpZiAoIW1pbkRlZmluZWQpIHtcbiAgICAgICAgbWluID0gTWF0aC5taW4obWluLCByYW5nZS5taW4pO1xuICAgICAgfVxuICAgICAgaWYgKCFtYXhEZWZpbmVkKSB7XG4gICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgcmFuZ2UubWF4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWluID0gbWF4RGVmaW5lZCAmJiBtaW4gPiBtYXggPyBtYXggOiBtaW47XG4gICAgbWF4ID0gbWluRGVmaW5lZCAmJiBtaW4gPiBtYXggPyBtaW4gOiBtYXg7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1pbjogZmluaXRlT3JEZWZhdWx0KG1pbiwgZmluaXRlT3JEZWZhdWx0KG1heCwgbWluKSksXG4gICAgICBtYXg6IGZpbml0ZU9yRGVmYXVsdChtYXgsIGZpbml0ZU9yRGVmYXVsdChtaW4sIG1heCkpXG4gICAgfTtcbiAgfVxuICBnZXRQYWRkaW5nKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiB0aGlzLnBhZGRpbmdMZWZ0IHx8IDAsXG4gICAgICB0b3A6IHRoaXMucGFkZGluZ1RvcCB8fCAwLFxuICAgICAgcmlnaHQ6IHRoaXMucGFkZGluZ1JpZ2h0IHx8IDAsXG4gICAgICBib3R0b206IHRoaXMucGFkZGluZ0JvdHRvbSB8fCAwXG4gICAgfTtcbiAgfVxuICBnZXRUaWNrcygpIHtcbiAgICByZXR1cm4gdGhpcy50aWNrcztcbiAgfVxuICBnZXRMYWJlbHMoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuY2hhcnQuZGF0YTtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxhYmVscyB8fCAodGhpcy5pc0hvcml6b250YWwoKSA/IGRhdGEueExhYmVscyA6IGRhdGEueUxhYmVscykgfHwgZGF0YS5sYWJlbHMgfHwgW107XG4gIH1cbiAgYmVmb3JlTGF5b3V0KCkge1xuICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCA9IGZhbHNlO1xuICB9XG4gIGJlZm9yZVVwZGF0ZSgpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlVXBkYXRlLCBbdGhpc10pO1xuICB9XG4gIHVwZGF0ZShtYXhXaWR0aCwgbWF4SGVpZ2h0LCBtYXJnaW5zKSB7XG4gICAgY29uc3Qge2JlZ2luQXRaZXJvLCBncmFjZSwgdGlja3M6IHRpY2tPcHRzfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBzYW1wbGVTaXplID0gdGlja09wdHMuc2FtcGxlU2l6ZTtcbiAgICB0aGlzLmJlZm9yZVVwZGF0ZSgpO1xuICAgIHRoaXMubWF4V2lkdGggPSBtYXhXaWR0aDtcbiAgICB0aGlzLm1heEhlaWdodCA9IG1heEhlaWdodDtcbiAgICB0aGlzLl9tYXJnaW5zID0gbWFyZ2lucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgYm90dG9tOiAwXG4gICAgfSwgbWFyZ2lucyk7XG4gICAgdGhpcy50aWNrcyA9IG51bGw7XG4gICAgdGhpcy5fbGFiZWxTaXplcyA9IG51bGw7XG4gICAgdGhpcy5fZ3JpZExpbmVJdGVtcyA9IG51bGw7XG4gICAgdGhpcy5fbGFiZWxJdGVtcyA9IG51bGw7XG4gICAgdGhpcy5iZWZvcmVTZXREaW1lbnNpb25zKCk7XG4gICAgdGhpcy5zZXREaW1lbnNpb25zKCk7XG4gICAgdGhpcy5hZnRlclNldERpbWVuc2lvbnMoKTtcbiAgICB0aGlzLl9tYXhMZW5ndGggPSB0aGlzLmlzSG9yaXpvbnRhbCgpXG4gICAgICA/IHRoaXMud2lkdGggKyBtYXJnaW5zLmxlZnQgKyBtYXJnaW5zLnJpZ2h0XG4gICAgICA6IHRoaXMuaGVpZ2h0ICsgbWFyZ2lucy50b3AgKyBtYXJnaW5zLmJvdHRvbTtcbiAgICBpZiAoIXRoaXMuX2RhdGFMaW1pdHNDYWNoZWQpIHtcbiAgICAgIHRoaXMuYmVmb3JlRGF0YUxpbWl0cygpO1xuICAgICAgdGhpcy5kZXRlcm1pbmVEYXRhTGltaXRzKCk7XG4gICAgICB0aGlzLmFmdGVyRGF0YUxpbWl0cygpO1xuICAgICAgdGhpcy5fcmFuZ2UgPSBfYWRkR3JhY2UodGhpcywgZ3JhY2UsIGJlZ2luQXRaZXJvKTtcbiAgICAgIHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmJlZm9yZUJ1aWxkVGlja3MoKTtcbiAgICB0aGlzLnRpY2tzID0gdGhpcy5idWlsZFRpY2tzKCkgfHwgW107XG4gICAgdGhpcy5hZnRlckJ1aWxkVGlja3MoKTtcbiAgICBjb25zdCBzYW1wbGluZ0VuYWJsZWQgPSBzYW1wbGVTaXplIDwgdGhpcy50aWNrcy5sZW5ndGg7XG4gICAgdGhpcy5fY29udmVydFRpY2tzVG9MYWJlbHMoc2FtcGxpbmdFbmFibGVkID8gc2FtcGxlKHRoaXMudGlja3MsIHNhbXBsZVNpemUpIDogdGhpcy50aWNrcyk7XG4gICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICB0aGlzLmJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICB0aGlzLmNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICB0aGlzLmFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpO1xuICAgIGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmICh0aWNrT3B0cy5hdXRvU2tpcCB8fCB0aWNrT3B0cy5zb3VyY2UgPT09ICdhdXRvJykpIHtcbiAgICAgIHRoaXMudGlja3MgPSBhdXRvU2tpcCh0aGlzLCB0aGlzLnRpY2tzKTtcbiAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBudWxsO1xuICAgICAgdGhpcy5hZnRlckF1dG9Ta2lwKCk7XG4gICAgfVxuICAgIGlmIChzYW1wbGluZ0VuYWJsZWQpIHtcbiAgICAgIHRoaXMuX2NvbnZlcnRUaWNrc1RvTGFiZWxzKHRoaXMudGlja3MpO1xuICAgIH1cbiAgICB0aGlzLmJlZm9yZUZpdCgpO1xuICAgIHRoaXMuZml0KCk7XG4gICAgdGhpcy5hZnRlckZpdCgpO1xuICAgIHRoaXMuYWZ0ZXJVcGRhdGUoKTtcbiAgfVxuICBjb25maWd1cmUoKSB7XG4gICAgbGV0IHJldmVyc2VQaXhlbHMgPSB0aGlzLm9wdGlvbnMucmV2ZXJzZTtcbiAgICBsZXQgc3RhcnRQaXhlbCwgZW5kUGl4ZWw7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHN0YXJ0UGl4ZWwgPSB0aGlzLmxlZnQ7XG4gICAgICBlbmRQaXhlbCA9IHRoaXMucmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0UGl4ZWwgPSB0aGlzLnRvcDtcbiAgICAgIGVuZFBpeGVsID0gdGhpcy5ib3R0b207XG4gICAgICByZXZlcnNlUGl4ZWxzID0gIXJldmVyc2VQaXhlbHM7XG4gICAgfVxuICAgIHRoaXMuX3N0YXJ0UGl4ZWwgPSBzdGFydFBpeGVsO1xuICAgIHRoaXMuX2VuZFBpeGVsID0gZW5kUGl4ZWw7XG4gICAgdGhpcy5fcmV2ZXJzZVBpeGVscyA9IHJldmVyc2VQaXhlbHM7XG4gICAgdGhpcy5fbGVuZ3RoID0gZW5kUGl4ZWwgLSBzdGFydFBpeGVsO1xuICAgIHRoaXMuX2FsaWduVG9QaXhlbHMgPSB0aGlzLm9wdGlvbnMuYWxpZ25Ub1BpeGVscztcbiAgfVxuICBhZnRlclVwZGF0ZSgpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJVcGRhdGUsIFt0aGlzXSk7XG4gIH1cbiAgYmVmb3JlU2V0RGltZW5zaW9ucygpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlU2V0RGltZW5zaW9ucywgW3RoaXNdKTtcbiAgfVxuICBzZXREaW1lbnNpb25zKCkge1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgIHRoaXMubGVmdCA9IDA7XG4gICAgICB0aGlzLnJpZ2h0ID0gdGhpcy53aWR0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgIHRoaXMudG9wID0gMDtcbiAgICAgIHRoaXMuYm90dG9tID0gdGhpcy5oZWlnaHQ7XG4gICAgfVxuICAgIHRoaXMucGFkZGluZ0xlZnQgPSAwO1xuICAgIHRoaXMucGFkZGluZ1RvcCA9IDA7XG4gICAgdGhpcy5wYWRkaW5nUmlnaHQgPSAwO1xuICAgIHRoaXMucGFkZGluZ0JvdHRvbSA9IDA7XG4gIH1cbiAgYWZ0ZXJTZXREaW1lbnNpb25zKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclNldERpbWVuc2lvbnMsIFt0aGlzXSk7XG4gIH1cbiAgX2NhbGxIb29rcyhuYW1lKSB7XG4gICAgdGhpcy5jaGFydC5ub3RpZnlQbHVnaW5zKG5hbWUsIHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnNbbmFtZV0sIFt0aGlzXSk7XG4gIH1cbiAgYmVmb3JlRGF0YUxpbWl0cygpIHtcbiAgICB0aGlzLl9jYWxsSG9va3MoJ2JlZm9yZURhdGFMaW1pdHMnKTtcbiAgfVxuICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge31cbiAgYWZ0ZXJEYXRhTGltaXRzKCkge1xuICAgIHRoaXMuX2NhbGxIb29rcygnYWZ0ZXJEYXRhTGltaXRzJyk7XG4gIH1cbiAgYmVmb3JlQnVpbGRUaWNrcygpIHtcbiAgICB0aGlzLl9jYWxsSG9va3MoJ2JlZm9yZUJ1aWxkVGlja3MnKTtcbiAgfVxuICBidWlsZFRpY2tzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBhZnRlckJ1aWxkVGlja3MoKSB7XG4gICAgdGhpcy5fY2FsbEhvb2tzKCdhZnRlckJ1aWxkVGlja3MnKTtcbiAgfVxuICBiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24oKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW3RoaXNdKTtcbiAgfVxuICBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICBjb25zdCB0aWNrT3B0cyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICBsZXQgaSwgaWxlbiwgdGljaztcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICB0aWNrID0gdGlja3NbaV07XG4gICAgICB0aWNrLmxhYmVsID0gY2FsbGJhY2sodGlja09wdHMuY2FsbGJhY2ssIFt0aWNrLnZhbHVlLCBpLCB0aWNrc10sIHRoaXMpO1xuICAgIH1cbiAgfVxuICBhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24sIFt0aGlzXSk7XG4gIH1cbiAgYmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiwgW3RoaXNdKTtcbiAgfVxuICBjYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdGlja09wdHMgPSBvcHRpb25zLnRpY2tzO1xuICAgIGNvbnN0IG51bVRpY2tzID0gdGhpcy50aWNrcy5sZW5ndGg7XG4gICAgY29uc3QgbWluUm90YXRpb24gPSB0aWNrT3B0cy5taW5Sb3RhdGlvbiB8fCAwO1xuICAgIGNvbnN0IG1heFJvdGF0aW9uID0gdGlja09wdHMubWF4Um90YXRpb247XG4gICAgbGV0IGxhYmVsUm90YXRpb24gPSBtaW5Sb3RhdGlvbjtcbiAgICBsZXQgdGlja1dpZHRoLCBtYXhIZWlnaHQsIG1heExhYmVsRGlhZ29uYWw7XG4gICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCAhdGlja09wdHMuZGlzcGxheSB8fCBtaW5Sb3RhdGlvbiA+PSBtYXhSb3RhdGlvbiB8fCBudW1UaWNrcyA8PSAxIHx8ICF0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB0aGlzLmxhYmVsUm90YXRpb24gPSBtaW5Sb3RhdGlvbjtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICBjb25zdCBtYXhMYWJlbFdpZHRoID0gbGFiZWxTaXplcy53aWRlc3Qud2lkdGg7XG4gICAgY29uc3QgbWF4TGFiZWxIZWlnaHQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0O1xuICAgIGNvbnN0IG1heFdpZHRoID0gX2xpbWl0VmFsdWUodGhpcy5jaGFydC53aWR0aCAtIG1heExhYmVsV2lkdGgsIDAsIHRoaXMubWF4V2lkdGgpO1xuICAgIHRpY2tXaWR0aCA9IG9wdGlvbnMub2Zmc2V0ID8gdGhpcy5tYXhXaWR0aCAvIG51bVRpY2tzIDogbWF4V2lkdGggLyAobnVtVGlja3MgLSAxKTtcbiAgICBpZiAobWF4TGFiZWxXaWR0aCArIDYgPiB0aWNrV2lkdGgpIHtcbiAgICAgIHRpY2tXaWR0aCA9IG1heFdpZHRoIC8gKG51bVRpY2tzIC0gKG9wdGlvbnMub2Zmc2V0ID8gMC41IDogMSkpO1xuICAgICAgbWF4SGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQgLSBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zLmdyaWQpXG5cdFx0XHRcdC0gdGlja09wdHMucGFkZGluZyAtIGdldFRpdGxlSGVpZ2h0KG9wdGlvbnMudGl0bGUsIHRoaXMuY2hhcnQub3B0aW9ucy5mb250KTtcbiAgICAgIG1heExhYmVsRGlhZ29uYWwgPSBNYXRoLnNxcnQobWF4TGFiZWxXaWR0aCAqIG1heExhYmVsV2lkdGggKyBtYXhMYWJlbEhlaWdodCAqIG1heExhYmVsSGVpZ2h0KTtcbiAgICAgIGxhYmVsUm90YXRpb24gPSB0b0RlZ3JlZXMoTWF0aC5taW4oXG4gICAgICAgIE1hdGguYXNpbihfbGltaXRWYWx1ZSgobGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIDYpIC8gdGlja1dpZHRoLCAtMSwgMSkpLFxuICAgICAgICBNYXRoLmFzaW4oX2xpbWl0VmFsdWUobWF4SGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbCwgLTEsIDEpKSAtIE1hdGguYXNpbihfbGltaXRWYWx1ZShtYXhMYWJlbEhlaWdodCAvIG1heExhYmVsRGlhZ29uYWwsIC0xLCAxKSlcbiAgICAgICkpO1xuICAgICAgbGFiZWxSb3RhdGlvbiA9IE1hdGgubWF4KG1pblJvdGF0aW9uLCBNYXRoLm1pbihtYXhSb3RhdGlvbiwgbGFiZWxSb3RhdGlvbikpO1xuICAgIH1cbiAgICB0aGlzLmxhYmVsUm90YXRpb24gPSBsYWJlbFJvdGF0aW9uO1xuICB9XG4gIGFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJDYWxjdWxhdGVMYWJlbFJvdGF0aW9uLCBbdGhpc10pO1xuICB9XG4gIGFmdGVyQXV0b1NraXAoKSB7fVxuICBiZWZvcmVGaXQoKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUZpdCwgW3RoaXNdKTtcbiAgfVxuICBmaXQoKSB7XG4gICAgY29uc3QgbWluU2l6ZSA9IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfTtcbiAgICBjb25zdCB7Y2hhcnQsIG9wdGlvbnM6IHt0aWNrczogdGlja09wdHMsIHRpdGxlOiB0aXRsZU9wdHMsIGdyaWQ6IGdyaWRPcHRzfX0gPSB0aGlzO1xuICAgIGNvbnN0IGRpc3BsYXkgPSB0aGlzLl9pc1Zpc2libGUoKTtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgIGlmIChkaXNwbGF5KSB7XG4gICAgICBjb25zdCB0aXRsZUhlaWdodCA9IGdldFRpdGxlSGVpZ2h0KHRpdGxlT3B0cywgY2hhcnQub3B0aW9ucy5mb250KTtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgbWluU2l6ZS53aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICAgIG1pblNpemUuaGVpZ2h0ID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZE9wdHMpICsgdGl0bGVIZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtaW5TaXplLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICBtaW5TaXplLndpZHRoID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZE9wdHMpICsgdGl0bGVIZWlnaHQ7XG4gICAgICB9XG4gICAgICBpZiAodGlja09wdHMuZGlzcGxheSAmJiB0aGlzLnRpY2tzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB7Zmlyc3QsIGxhc3QsIHdpZGVzdCwgaGlnaGVzdH0gPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgICAgIGNvbnN0IHRpY2tQYWRkaW5nID0gdGlja09wdHMucGFkZGluZyAqIDI7XG4gICAgICAgIGNvbnN0IGFuZ2xlUmFkaWFucyA9IHRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICBjb25zdCBjb3MgPSBNYXRoLmNvcyhhbmdsZVJhZGlhbnMpO1xuICAgICAgICBjb25zdCBzaW4gPSBNYXRoLnNpbihhbmdsZVJhZGlhbnMpO1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgY29uc3QgbGFiZWxIZWlnaHQgPSB0aWNrT3B0cy5taXJyb3IgPyAwIDogc2luICogd2lkZXN0LndpZHRoICsgY29zICogaGlnaGVzdC5oZWlnaHQ7XG4gICAgICAgICAgbWluU2l6ZS5oZWlnaHQgPSBNYXRoLm1pbih0aGlzLm1heEhlaWdodCwgbWluU2l6ZS5oZWlnaHQgKyBsYWJlbEhlaWdodCArIHRpY2tQYWRkaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBsYWJlbFdpZHRoID0gdGlja09wdHMubWlycm9yID8gMCA6IGNvcyAqIHdpZGVzdC53aWR0aCArIHNpbiAqIGhpZ2hlc3QuaGVpZ2h0O1xuICAgICAgICAgIG1pblNpemUud2lkdGggPSBNYXRoLm1pbih0aGlzLm1heFdpZHRoLCBtaW5TaXplLndpZHRoICsgbGFiZWxXaWR0aCArIHRpY2tQYWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jYWxjdWxhdGVQYWRkaW5nKGZpcnN0LCBsYXN0LCBzaW4sIGNvcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2hhbmRsZU1hcmdpbnMoKTtcbiAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5fbGVuZ3RoID0gY2hhcnQud2lkdGggLSB0aGlzLl9tYXJnaW5zLmxlZnQgLSB0aGlzLl9tYXJnaW5zLnJpZ2h0O1xuICAgICAgdGhpcy5oZWlnaHQgPSBtaW5TaXplLmhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53aWR0aCA9IG1pblNpemUud2lkdGg7XG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMuX2xlbmd0aCA9IGNoYXJ0LmhlaWdodCAtIHRoaXMuX21hcmdpbnMudG9wIC0gdGhpcy5fbWFyZ2lucy5ib3R0b207XG4gICAgfVxuICB9XG4gIF9jYWxjdWxhdGVQYWRkaW5nKGZpcnN0LCBsYXN0LCBzaW4sIGNvcykge1xuICAgIGNvbnN0IHt0aWNrczoge2FsaWduLCBwYWRkaW5nfSwgcG9zaXRpb259ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGlzUm90YXRlZCA9IHRoaXMubGFiZWxSb3RhdGlvbiAhPT0gMDtcbiAgICBjb25zdCBsYWJlbHNCZWxvd1RpY2tzID0gcG9zaXRpb24gIT09ICd0b3AnICYmIHRoaXMuYXhpcyA9PT0gJ3gnO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBjb25zdCBvZmZzZXRMZWZ0ID0gdGhpcy5nZXRQaXhlbEZvclRpY2soMCkgLSB0aGlzLmxlZnQ7XG4gICAgICBjb25zdCBvZmZzZXRSaWdodCA9IHRoaXMucmlnaHQgLSB0aGlzLmdldFBpeGVsRm9yVGljayh0aGlzLnRpY2tzLmxlbmd0aCAtIDEpO1xuICAgICAgbGV0IHBhZGRpbmdMZWZ0ID0gMDtcbiAgICAgIGxldCBwYWRkaW5nUmlnaHQgPSAwO1xuICAgICAgaWYgKGlzUm90YXRlZCkge1xuICAgICAgICBpZiAobGFiZWxzQmVsb3dUaWNrcykge1xuICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gY29zICogZmlyc3Qud2lkdGg7XG4gICAgICAgICAgcGFkZGluZ1JpZ2h0ID0gc2luICogbGFzdC5oZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFkZGluZ0xlZnQgPSBzaW4gKiBmaXJzdC5oZWlnaHQ7XG4gICAgICAgICAgcGFkZGluZ1JpZ2h0ID0gY29zICogbGFzdC53aWR0aDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICBwYWRkaW5nUmlnaHQgPSBsYXN0LndpZHRoO1xuICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgcGFkZGluZ0xlZnQgPSBmaXJzdC53aWR0aDtcbiAgICAgIH0gZWxzZSBpZiAoYWxpZ24gIT09ICdpbm5lcicpIHtcbiAgICAgICAgcGFkZGluZ0xlZnQgPSBmaXJzdC53aWR0aCAvIDI7XG4gICAgICAgIHBhZGRpbmdSaWdodCA9IGxhc3Qud2lkdGggLyAyO1xuICAgICAgfVxuICAgICAgdGhpcy5wYWRkaW5nTGVmdCA9IE1hdGgubWF4KChwYWRkaW5nTGVmdCAtIG9mZnNldExlZnQgKyBwYWRkaW5nKSAqIHRoaXMud2lkdGggLyAodGhpcy53aWR0aCAtIG9mZnNldExlZnQpLCAwKTtcbiAgICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gTWF0aC5tYXgoKHBhZGRpbmdSaWdodCAtIG9mZnNldFJpZ2h0ICsgcGFkZGluZykgKiB0aGlzLndpZHRoIC8gKHRoaXMud2lkdGggLSBvZmZzZXRSaWdodCksIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcGFkZGluZ1RvcCA9IGxhc3QuaGVpZ2h0IC8gMjtcbiAgICAgIGxldCBwYWRkaW5nQm90dG9tID0gZmlyc3QuaGVpZ2h0IC8gMjtcbiAgICAgIGlmIChhbGlnbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICBwYWRkaW5nVG9wID0gMDtcbiAgICAgICAgcGFkZGluZ0JvdHRvbSA9IGZpcnN0LmhlaWdodDtcbiAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgIHBhZGRpbmdUb3AgPSBsYXN0LmhlaWdodDtcbiAgICAgICAgcGFkZGluZ0JvdHRvbSA9IDA7XG4gICAgICB9XG4gICAgICB0aGlzLnBhZGRpbmdUb3AgPSBwYWRkaW5nVG9wICsgcGFkZGluZztcbiAgICAgIHRoaXMucGFkZGluZ0JvdHRvbSA9IHBhZGRpbmdCb3R0b20gKyBwYWRkaW5nO1xuICAgIH1cbiAgfVxuICBfaGFuZGxlTWFyZ2lucygpIHtcbiAgICBpZiAodGhpcy5fbWFyZ2lucykge1xuICAgICAgdGhpcy5fbWFyZ2lucy5sZWZ0ID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nTGVmdCwgdGhpcy5fbWFyZ2lucy5sZWZ0KTtcbiAgICAgIHRoaXMuX21hcmdpbnMudG9wID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nVG9wLCB0aGlzLl9tYXJnaW5zLnRvcCk7XG4gICAgICB0aGlzLl9tYXJnaW5zLnJpZ2h0ID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nUmlnaHQsIHRoaXMuX21hcmdpbnMucmlnaHQpO1xuICAgICAgdGhpcy5fbWFyZ2lucy5ib3R0b20gPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdCb3R0b20sIHRoaXMuX21hcmdpbnMuYm90dG9tKTtcbiAgICB9XG4gIH1cbiAgYWZ0ZXJGaXQoKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyRml0LCBbdGhpc10pO1xuICB9XG4gIGlzSG9yaXpvbnRhbCgpIHtcbiAgICBjb25zdCB7YXhpcywgcG9zaXRpb259ID0gdGhpcy5vcHRpb25zO1xuICAgIHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nIHx8IGF4aXMgPT09ICd4JztcbiAgfVxuICBpc0Z1bGxTaXplKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZnVsbFNpemU7XG4gIH1cbiAgX2NvbnZlcnRUaWNrc1RvTGFiZWxzKHRpY2tzKSB7XG4gICAgdGhpcy5iZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24oKTtcbiAgICB0aGlzLmdlbmVyYXRlVGlja0xhYmVscyh0aWNrcyk7XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodGlja3NbaV0ubGFiZWwpKSB7XG4gICAgICAgIHRpY2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgaWxlbi0tO1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24oKTtcbiAgfVxuICBfZ2V0TGFiZWxTaXplcygpIHtcbiAgICBsZXQgbGFiZWxTaXplcyA9IHRoaXMuX2xhYmVsU2l6ZXM7XG4gICAgaWYgKCFsYWJlbFNpemVzKSB7XG4gICAgICBjb25zdCBzYW1wbGVTaXplID0gdGhpcy5vcHRpb25zLnRpY2tzLnNhbXBsZVNpemU7XG4gICAgICBsZXQgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgaWYgKHNhbXBsZVNpemUgPCB0aWNrcy5sZW5ndGgpIHtcbiAgICAgICAgdGlja3MgPSBzYW1wbGUodGlja3MsIHNhbXBsZVNpemUpO1xuICAgICAgfVxuICAgICAgdGhpcy5fbGFiZWxTaXplcyA9IGxhYmVsU2l6ZXMgPSB0aGlzLl9jb21wdXRlTGFiZWxTaXplcyh0aWNrcywgdGlja3MubGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIGxhYmVsU2l6ZXM7XG4gIH1cbiAgX2NvbXB1dGVMYWJlbFNpemVzKHRpY2tzLCBsZW5ndGgpIHtcbiAgICBjb25zdCB7Y3R4LCBfbG9uZ2VzdFRleHRDYWNoZTogY2FjaGVzfSA9IHRoaXM7XG4gICAgY29uc3Qgd2lkdGhzID0gW107XG4gICAgY29uc3QgaGVpZ2h0cyA9IFtdO1xuICAgIGxldCB3aWRlc3RMYWJlbFNpemUgPSAwO1xuICAgIGxldCBoaWdoZXN0TGFiZWxTaXplID0gMDtcbiAgICBsZXQgaSwgaiwgamxlbiwgbGFiZWwsIHRpY2tGb250LCBmb250U3RyaW5nLCBjYWNoZSwgbGluZUhlaWdodCwgd2lkdGgsIGhlaWdodCwgbmVzdGVkTGFiZWw7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICBsYWJlbCA9IHRpY2tzW2ldLmxhYmVsO1xuICAgICAgdGlja0ZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKGkpO1xuICAgICAgY3R4LmZvbnQgPSBmb250U3RyaW5nID0gdGlja0ZvbnQuc3RyaW5nO1xuICAgICAgY2FjaGUgPSBjYWNoZXNbZm9udFN0cmluZ10gPSBjYWNoZXNbZm9udFN0cmluZ10gfHwge2RhdGE6IHt9LCBnYzogW119O1xuICAgICAgbGluZUhlaWdodCA9IHRpY2tGb250LmxpbmVIZWlnaHQ7XG4gICAgICB3aWR0aCA9IGhlaWdodCA9IDA7XG4gICAgICBpZiAoIWlzTnVsbE9yVW5kZWYobGFiZWwpICYmICFpc0FycmF5KGxhYmVsKSkge1xuICAgICAgICB3aWR0aCA9IF9tZWFzdXJlVGV4dChjdHgsIGNhY2hlLmRhdGEsIGNhY2hlLmdjLCB3aWR0aCwgbGFiZWwpO1xuICAgICAgICBoZWlnaHQgPSBsaW5lSGVpZ2h0O1xuICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGxhYmVsKSkge1xuICAgICAgICBmb3IgKGogPSAwLCBqbGVuID0gbGFiZWwubGVuZ3RoOyBqIDwgamxlbjsgKytqKSB7XG4gICAgICAgICAgbmVzdGVkTGFiZWwgPSBsYWJlbFtqXTtcbiAgICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYobmVzdGVkTGFiZWwpICYmICFpc0FycmF5KG5lc3RlZExhYmVsKSkge1xuICAgICAgICAgICAgd2lkdGggPSBfbWVhc3VyZVRleHQoY3R4LCBjYWNoZS5kYXRhLCBjYWNoZS5nYywgd2lkdGgsIG5lc3RlZExhYmVsKTtcbiAgICAgICAgICAgIGhlaWdodCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2lkdGhzLnB1c2god2lkdGgpO1xuICAgICAgaGVpZ2h0cy5wdXNoKGhlaWdodCk7XG4gICAgICB3aWRlc3RMYWJlbFNpemUgPSBNYXRoLm1heCh3aWR0aCwgd2lkZXN0TGFiZWxTaXplKTtcbiAgICAgIGhpZ2hlc3RMYWJlbFNpemUgPSBNYXRoLm1heChoZWlnaHQsIGhpZ2hlc3RMYWJlbFNpemUpO1xuICAgIH1cbiAgICBnYXJiYWdlQ29sbGVjdChjYWNoZXMsIGxlbmd0aCk7XG4gICAgY29uc3Qgd2lkZXN0ID0gd2lkdGhzLmluZGV4T2Yod2lkZXN0TGFiZWxTaXplKTtcbiAgICBjb25zdCBoaWdoZXN0ID0gaGVpZ2h0cy5pbmRleE9mKGhpZ2hlc3RMYWJlbFNpemUpO1xuICAgIGNvbnN0IHZhbHVlQXQgPSAoaWR4KSA9PiAoe3dpZHRoOiB3aWR0aHNbaWR4XSB8fCAwLCBoZWlnaHQ6IGhlaWdodHNbaWR4XSB8fCAwfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZpcnN0OiB2YWx1ZUF0KDApLFxuICAgICAgbGFzdDogdmFsdWVBdChsZW5ndGggLSAxKSxcbiAgICAgIHdpZGVzdDogdmFsdWVBdCh3aWRlc3QpLFxuICAgICAgaGlnaGVzdDogdmFsdWVBdChoaWdoZXN0KSxcbiAgICAgIHdpZHRocyxcbiAgICAgIGhlaWdodHMsXG4gICAgfTtcbiAgfVxuICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGdldFBpeGVsRm9yVmFsdWUodmFsdWUsIGluZGV4KSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7fVxuICBnZXRQaXhlbEZvclRpY2soaW5kZXgpIHtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRpY2tzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRpY2tzW2luZGV4XS52YWx1ZSk7XG4gIH1cbiAgZ2V0UGl4ZWxGb3JEZWNpbWFsKGRlY2ltYWwpIHtcbiAgICBpZiAodGhpcy5fcmV2ZXJzZVBpeGVscykge1xuICAgICAgZGVjaW1hbCA9IDEgLSBkZWNpbWFsO1xuICAgIH1cbiAgICBjb25zdCBwaXhlbCA9IHRoaXMuX3N0YXJ0UGl4ZWwgKyBkZWNpbWFsICogdGhpcy5fbGVuZ3RoO1xuICAgIHJldHVybiBfaW50MTZSYW5nZSh0aGlzLl9hbGlnblRvUGl4ZWxzID8gX2FsaWduUGl4ZWwodGhpcy5jaGFydCwgcGl4ZWwsIDApIDogcGl4ZWwpO1xuICB9XG4gIGdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkge1xuICAgIGNvbnN0IGRlY2ltYWwgPSAocGl4ZWwgLSB0aGlzLl9zdGFydFBpeGVsKSAvIHRoaXMuX2xlbmd0aDtcbiAgICByZXR1cm4gdGhpcy5fcmV2ZXJzZVBpeGVscyA/IDEgLSBkZWNpbWFsIDogZGVjaW1hbDtcbiAgfVxuICBnZXRCYXNlUGl4ZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldEJhc2VWYWx1ZSgpKTtcbiAgfVxuICBnZXRCYXNlVmFsdWUoKSB7XG4gICAgY29uc3Qge21pbiwgbWF4fSA9IHRoaXM7XG4gICAgcmV0dXJuIG1pbiA8IDAgJiYgbWF4IDwgMCA/IG1heCA6XG4gICAgICBtaW4gPiAwICYmIG1heCA+IDAgPyBtaW4gOlxuICAgICAgMDtcbiAgfVxuICBnZXRDb250ZXh0KGluZGV4KSB7XG4gICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzIHx8IFtdO1xuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGlja3MubGVuZ3RoKSB7XG4gICAgICBjb25zdCB0aWNrID0gdGlja3NbaW5kZXhdO1xuICAgICAgcmV0dXJuIHRpY2suJGNvbnRleHQgfHxcblx0XHRcdFx0KHRpY2suJGNvbnRleHQgPSBjcmVhdGVUaWNrQ29udGV4dCh0aGlzLmdldENvbnRleHQoKSwgaW5kZXgsIHRpY2spKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQgfHxcblx0XHRcdCh0aGlzLiRjb250ZXh0ID0gY3JlYXRlU2NhbGVDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzKSk7XG4gIH1cbiAgX3RpY2tTaXplKCkge1xuICAgIGNvbnN0IG9wdGlvblRpY2tzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgIGNvbnN0IHJvdCA9IHRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgIGNvbnN0IGNvcyA9IE1hdGguYWJzKE1hdGguY29zKHJvdCkpO1xuICAgIGNvbnN0IHNpbiA9IE1hdGguYWJzKE1hdGguc2luKHJvdCkpO1xuICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgY29uc3QgcGFkZGluZyA9IG9wdGlvblRpY2tzLmF1dG9Ta2lwUGFkZGluZyB8fCAwO1xuICAgIGNvbnN0IHcgPSBsYWJlbFNpemVzID8gbGFiZWxTaXplcy53aWRlc3Qud2lkdGggKyBwYWRkaW5nIDogMDtcbiAgICBjb25zdCBoID0gbGFiZWxTaXplcyA/IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyBwYWRkaW5nIDogMDtcbiAgICByZXR1cm4gdGhpcy5pc0hvcml6b250YWwoKVxuICAgICAgPyBoICogY29zID4gdyAqIHNpbiA/IHcgLyBjb3MgOiBoIC8gc2luXG4gICAgICA6IGggKiBzaW4gPCB3ICogY29zID8gaCAvIGNvcyA6IHcgLyBzaW47XG4gIH1cbiAgX2lzVmlzaWJsZSgpIHtcbiAgICBjb25zdCBkaXNwbGF5ID0gdGhpcy5vcHRpb25zLmRpc3BsYXk7XG4gICAgaWYgKGRpc3BsYXkgIT09ICdhdXRvJykge1xuICAgICAgcmV0dXJuICEhZGlzcGxheTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoKS5sZW5ndGggPiAwO1xuICB9XG4gIF9jb21wdXRlR3JpZExpbmVJdGVtcyhjaGFydEFyZWEpIHtcbiAgICBjb25zdCBheGlzID0gdGhpcy5heGlzO1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHtncmlkLCBwb3NpdGlvbn0gPSBvcHRpb25zO1xuICAgIGNvbnN0IG9mZnNldCA9IGdyaWQub2Zmc2V0O1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgIGNvbnN0IHRpY2tzTGVuZ3RoID0gdGlja3MubGVuZ3RoICsgKG9mZnNldCA/IDEgOiAwKTtcbiAgICBjb25zdCB0bCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWQpO1xuICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgY29uc3QgYm9yZGVyT3B0cyA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY29uc3QgYXhpc1dpZHRoID0gYm9yZGVyT3B0cy5kcmF3Qm9yZGVyID8gYm9yZGVyT3B0cy5ib3JkZXJXaWR0aCA6IDA7XG4gICAgY29uc3QgYXhpc0hhbGZXaWR0aCA9IGF4aXNXaWR0aCAvIDI7XG4gICAgY29uc3QgYWxpZ25Cb3JkZXJWYWx1ZSA9IGZ1bmN0aW9uKHBpeGVsKSB7XG4gICAgICByZXR1cm4gX2FsaWduUGl4ZWwoY2hhcnQsIHBpeGVsLCBheGlzV2lkdGgpO1xuICAgIH07XG4gICAgbGV0IGJvcmRlclZhbHVlLCBpLCBsaW5lVmFsdWUsIGFsaWduZWRMaW5lVmFsdWU7XG4gICAgbGV0IHR4MSwgdHkxLCB0eDIsIHR5MiwgeDEsIHkxLCB4MiwgeTI7XG4gICAgaWYgKHBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMuYm90dG9tKTtcbiAgICAgIHR5MSA9IHRoaXMuYm90dG9tIC0gdGw7XG4gICAgICB0eTIgPSBib3JkZXJWYWx1ZSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICB5MSA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLnRvcCkgKyBheGlzSGFsZldpZHRoO1xuICAgICAgeTIgPSBjaGFydEFyZWEuYm90dG9tO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy50b3ApO1xuICAgICAgeTEgPSBjaGFydEFyZWEudG9wO1xuICAgICAgeTIgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5ib3R0b20pIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgIHR5MSA9IGJvcmRlclZhbHVlICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgIHR5MiA9IHRoaXMudG9wICsgdGw7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5yaWdodCk7XG4gICAgICB0eDEgPSB0aGlzLnJpZ2h0IC0gdGw7XG4gICAgICB0eDIgPSBib3JkZXJWYWx1ZSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICB4MSA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLmxlZnQpICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgIHgyID0gY2hhcnRBcmVhLnJpZ2h0O1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmxlZnQpO1xuICAgICAgeDEgPSBjaGFydEFyZWEubGVmdDtcbiAgICAgIHgyID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEucmlnaHQpIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgIHR4MSA9IGJvcmRlclZhbHVlICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgIHR4MiA9IHRoaXMubGVmdCArIHRsO1xuICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSgoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMiArIDAuNSk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkpO1xuICAgICAgfVxuICAgICAgeTEgPSBjaGFydEFyZWEudG9wO1xuICAgICAgeTIgPSBjaGFydEFyZWEuYm90dG9tO1xuICAgICAgdHkxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgdHkyID0gdHkxICsgdGw7XG4gICAgfSBlbHNlIGlmIChheGlzID09PSAneScpIHtcbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSk7XG4gICAgICB9XG4gICAgICB0eDEgPSBib3JkZXJWYWx1ZSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICB0eDIgPSB0eDEgLSB0bDtcbiAgICAgIHgxID0gY2hhcnRBcmVhLmxlZnQ7XG4gICAgICB4MiA9IGNoYXJ0QXJlYS5yaWdodDtcbiAgICB9XG4gICAgY29uc3QgbGltaXQgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnRpY2tzLm1heFRpY2tzTGltaXQsIHRpY2tzTGVuZ3RoKTtcbiAgICBjb25zdCBzdGVwID0gTWF0aC5tYXgoMSwgTWF0aC5jZWlsKHRpY2tzTGVuZ3RoIC8gbGltaXQpKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGlja3NMZW5ndGg7IGkgKz0gc3RlcCkge1xuICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGkpKTtcbiAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IG9wdHNBdEluZGV4LmxpbmVXaWR0aDtcbiAgICAgIGNvbnN0IGxpbmVDb2xvciA9IG9wdHNBdEluZGV4LmNvbG9yO1xuICAgICAgY29uc3QgYm9yZGVyRGFzaCA9IG9wdHNBdEluZGV4LmJvcmRlckRhc2ggfHwgW107XG4gICAgICBjb25zdCBib3JkZXJEYXNoT2Zmc2V0ID0gb3B0c0F0SW5kZXguYm9yZGVyRGFzaE9mZnNldDtcbiAgICAgIGNvbnN0IHRpY2tXaWR0aCA9IG9wdHNBdEluZGV4LnRpY2tXaWR0aDtcbiAgICAgIGNvbnN0IHRpY2tDb2xvciA9IG9wdHNBdEluZGV4LnRpY2tDb2xvcjtcbiAgICAgIGNvbnN0IHRpY2tCb3JkZXJEYXNoID0gb3B0c0F0SW5kZXgudGlja0JvcmRlckRhc2ggfHwgW107XG4gICAgICBjb25zdCB0aWNrQm9yZGVyRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LnRpY2tCb3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgbGluZVZhbHVlID0gZ2V0UGl4ZWxGb3JHcmlkTGluZSh0aGlzLCBpLCBvZmZzZXQpO1xuICAgICAgaWYgKGxpbmVWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYWxpZ25lZExpbmVWYWx1ZSA9IF9hbGlnblBpeGVsKGNoYXJ0LCBsaW5lVmFsdWUsIGxpbmVXaWR0aCk7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIHR4MSA9IHR4MiA9IHgxID0geDIgPSBhbGlnbmVkTGluZVZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHkxID0gdHkyID0geTEgPSB5MiA9IGFsaWduZWRMaW5lVmFsdWU7XG4gICAgICB9XG4gICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgdHgxLFxuICAgICAgICB0eTEsXG4gICAgICAgIHR4MixcbiAgICAgICAgdHkyLFxuICAgICAgICB4MSxcbiAgICAgICAgeTEsXG4gICAgICAgIHgyLFxuICAgICAgICB5MixcbiAgICAgICAgd2lkdGg6IGxpbmVXaWR0aCxcbiAgICAgICAgY29sb3I6IGxpbmVDb2xvcixcbiAgICAgICAgYm9yZGVyRGFzaCxcbiAgICAgICAgYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgdGlja1dpZHRoLFxuICAgICAgICB0aWNrQ29sb3IsXG4gICAgICAgIHRpY2tCb3JkZXJEYXNoLFxuICAgICAgICB0aWNrQm9yZGVyRGFzaE9mZnNldCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl90aWNrc0xlbmd0aCA9IHRpY2tzTGVuZ3RoO1xuICAgIHRoaXMuX2JvcmRlclZhbHVlID0gYm9yZGVyVmFsdWU7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG4gIF9jb21wdXRlTGFiZWxJdGVtcyhjaGFydEFyZWEpIHtcbiAgICBjb25zdCBheGlzID0gdGhpcy5heGlzO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qge3Bvc2l0aW9uLCB0aWNrczogb3B0aW9uVGlja3N9ID0gb3B0aW9ucztcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICBjb25zdCB7YWxpZ24sIGNyb3NzQWxpZ24sIHBhZGRpbmcsIG1pcnJvcn0gPSBvcHRpb25UaWNrcztcbiAgICBjb25zdCB0bCA9IGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMuZ3JpZCk7XG4gICAgY29uc3QgdGlja0FuZFBhZGRpbmcgPSB0bCArIHBhZGRpbmc7XG4gICAgY29uc3QgaFRpY2tBbmRQYWRkaW5nID0gbWlycm9yID8gLXBhZGRpbmcgOiB0aWNrQW5kUGFkZGluZztcbiAgICBjb25zdCByb3RhdGlvbiA9IC10b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCB0aWNrLCBsYWJlbCwgeCwgeSwgdGV4dEFsaWduLCBwaXhlbCwgZm9udCwgbGluZUhlaWdodCwgbGluZUNvdW50LCB0ZXh0T2Zmc2V0O1xuICAgIGxldCB0ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICB5ID0gdGhpcy5ib3R0b20gLSBoVGlja0FuZFBhZGRpbmc7XG4gICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIHkgPSB0aGlzLnRvcCArIGhUaWNrQW5kUGFkZGluZztcbiAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgIGNvbnN0IHJldCA9IHRoaXMuX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpO1xuICAgICAgdGV4dEFsaWduID0gcmV0LnRleHRBbGlnbjtcbiAgICAgIHggPSByZXQueDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICBjb25zdCByZXQgPSB0aGlzLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKTtcbiAgICAgIHRleHRBbGlnbiA9IHJldC50ZXh0QWxpZ247XG4gICAgICB4ID0gcmV0Lng7XG4gICAgfSBlbHNlIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgeSA9ICgoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMikgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgeSA9IHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSArIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgfVxuICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpO1xuICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHggPSAoKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDIpIC0gdGlja0FuZFBhZGRpbmc7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgIHggPSB0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKS50ZXh0QWxpZ247XG4gICAgfVxuICAgIGlmIChheGlzID09PSAneScpIHtcbiAgICAgIGlmIChhbGlnbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICB0ZXh0QmFzZWxpbmUgPSAndG9wJztcbiAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgIHRleHRCYXNlbGluZSA9ICdib3R0b20nO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgIGxhYmVsID0gdGljay5sYWJlbDtcbiAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gb3B0aW9uVGlja3Muc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaSkpO1xuICAgICAgcGl4ZWwgPSB0aGlzLmdldFBpeGVsRm9yVGljayhpKSArIG9wdGlvblRpY2tzLmxhYmVsT2Zmc2V0O1xuICAgICAgZm9udCA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaSk7XG4gICAgICBsaW5lSGVpZ2h0ID0gZm9udC5saW5lSGVpZ2h0O1xuICAgICAgbGluZUNvdW50ID0gaXNBcnJheShsYWJlbCkgPyBsYWJlbC5sZW5ndGggOiAxO1xuICAgICAgY29uc3QgaGFsZkNvdW50ID0gbGluZUNvdW50IC8gMjtcbiAgICAgIGNvbnN0IGNvbG9yID0gb3B0c0F0SW5kZXguY29sb3I7XG4gICAgICBjb25zdCBzdHJva2VDb2xvciA9IG9wdHNBdEluZGV4LnRleHRTdHJva2VDb2xvcjtcbiAgICAgIGNvbnN0IHN0cm9rZVdpZHRoID0gb3B0c0F0SW5kZXgudGV4dFN0cm9rZVdpZHRoO1xuICAgICAgbGV0IHRpY2tUZXh0QWxpZ24gPSB0ZXh0QWxpZ247XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIHggPSBwaXhlbDtcbiAgICAgICAgaWYgKHRleHRBbGlnbiA9PT0gJ2lubmVyJykge1xuICAgICAgICAgIGlmIChpID09PSBpbGVuIC0gMSkge1xuICAgICAgICAgICAgdGlja1RleHRBbGlnbiA9ICF0aGlzLm9wdGlvbnMucmV2ZXJzZSA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgICAgfSBlbHNlIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICB0aWNrVGV4dEFsaWduID0gIXRoaXMub3B0aW9ucy5yZXZlcnNlID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGlja1RleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJyB8fCByb3RhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IC1saW5lQ291bnQgKiBsaW5lSGVpZ2h0ICsgbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IC1sYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC8gMiAtIGhhbGZDb3VudCAqIGxpbmVIZWlnaHQgKyBsaW5lSGVpZ2h0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJyB8fCByb3RhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC8gMiAtIGhhbGZDb3VudCAqIGxpbmVIZWlnaHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC0gbGluZUNvdW50ICogbGluZUhlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICAgIHRleHRPZmZzZXQgKj0gLTE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkgPSBwaXhlbDtcbiAgICAgICAgdGV4dE9mZnNldCA9ICgxIC0gbGluZUNvdW50KSAqIGxpbmVIZWlnaHQgLyAyO1xuICAgICAgfVxuICAgICAgbGV0IGJhY2tkcm9wO1xuICAgICAgaWYgKG9wdHNBdEluZGV4LnNob3dMYWJlbEJhY2tkcm9wKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsUGFkZGluZyA9IHRvUGFkZGluZyhvcHRzQXRJbmRleC5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBsYWJlbFNpemVzLmhlaWdodHNbaV07XG4gICAgICAgIGNvbnN0IHdpZHRoID0gbGFiZWxTaXplcy53aWR0aHNbaV07XG4gICAgICAgIGxldCB0b3AgPSB5ICsgdGV4dE9mZnNldCAtIGxhYmVsUGFkZGluZy50b3A7XG4gICAgICAgIGxldCBsZWZ0ID0geCAtIGxhYmVsUGFkZGluZy5sZWZ0O1xuICAgICAgICBzd2l0Y2ggKHRleHRCYXNlbGluZSkge1xuICAgICAgICBjYXNlICdtaWRkbGUnOlxuICAgICAgICAgIHRvcCAtPSBoZWlnaHQgLyAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgIHRvcCAtPSBoZWlnaHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh0ZXh0QWxpZ24pIHtcbiAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICBsZWZ0IC09IHdpZHRoIC8gMjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYmFja2Ryb3AgPSB7XG4gICAgICAgICAgbGVmdCxcbiAgICAgICAgICB0b3AsXG4gICAgICAgICAgd2lkdGg6IHdpZHRoICsgbGFiZWxQYWRkaW5nLndpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgbGFiZWxQYWRkaW5nLmhlaWdodCxcbiAgICAgICAgICBjb2xvcjogb3B0c0F0SW5kZXguYmFja2Ryb3BDb2xvcixcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICByb3RhdGlvbixcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIGZvbnQsXG4gICAgICAgIGNvbG9yLFxuICAgICAgICBzdHJva2VDb2xvcixcbiAgICAgICAgc3Ryb2tlV2lkdGgsXG4gICAgICAgIHRleHRPZmZzZXQsXG4gICAgICAgIHRleHRBbGlnbjogdGlja1RleHRBbGlnbixcbiAgICAgICAgdGV4dEJhc2VsaW5lLFxuICAgICAgICB0cmFuc2xhdGlvbjogW3gsIHldLFxuICAgICAgICBiYWNrZHJvcCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG4gIH1cbiAgX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKSB7XG4gICAgY29uc3Qge3Bvc2l0aW9uLCB0aWNrc30gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qgcm90YXRpb24gPSAtdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgaWYgKHJvdGF0aW9uKSB7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9XG4gICAgbGV0IGFsaWduID0gJ2NlbnRlcic7XG4gICAgaWYgKHRpY2tzLmFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICBhbGlnbiA9ICdsZWZ0JztcbiAgICB9IGVsc2UgaWYgKHRpY2tzLmFsaWduID09PSAnZW5kJykge1xuICAgICAgYWxpZ24gPSAncmlnaHQnO1xuICAgIH0gZWxzZSBpZiAodGlja3MuYWxpZ24gPT09ICdpbm5lcicpIHtcbiAgICAgIGFsaWduID0gJ2lubmVyJztcbiAgICB9XG4gICAgcmV0dXJuIGFsaWduO1xuICB9XG4gIF9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKSB7XG4gICAgY29uc3Qge3Bvc2l0aW9uLCB0aWNrczoge2Nyb3NzQWxpZ24sIG1pcnJvciwgcGFkZGluZ319ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgY29uc3QgdGlja0FuZFBhZGRpbmcgPSB0bCArIHBhZGRpbmc7XG4gICAgY29uc3Qgd2lkZXN0ID0gbGFiZWxTaXplcy53aWRlc3Qud2lkdGg7XG4gICAgbGV0IHRleHRBbGlnbjtcbiAgICBsZXQgeDtcbiAgICBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICB4ID0gdGhpcy5yaWdodCArIHBhZGRpbmc7XG4gICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICB4ICs9ICh3aWRlc3QgLyAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgIHggKz0gd2lkZXN0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4ID0gdGhpcy5yaWdodCAtIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgIHggLT0gKHdpZGVzdCAvIDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICB4ID0gdGhpcy5sZWZ0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICB4ID0gdGhpcy5sZWZ0ICsgcGFkZGluZztcbiAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICB4IC09ICh3aWRlc3QgLyAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgeCAtPSB3aWRlc3Q7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHggPSB0aGlzLmxlZnQgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgIHggKz0gd2lkZXN0IC8gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgIHggPSB0aGlzLnJpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgfVxuICAgIHJldHVybiB7dGV4dEFsaWduLCB4fTtcbiAgfVxuICBfY29tcHV0ZUxhYmVsQXJlYSgpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRpY2tzLm1pcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG4gICAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgfHwgcG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgIHJldHVybiB7dG9wOiAwLCBsZWZ0OiB0aGlzLmxlZnQsIGJvdHRvbTogY2hhcnQuaGVpZ2h0LCByaWdodDogdGhpcy5yaWdodH07XG4gICAgfSBpZiAocG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgcmV0dXJuIHt0b3A6IHRoaXMudG9wLCBsZWZ0OiAwLCBib3R0b206IHRoaXMuYm90dG9tLCByaWdodDogY2hhcnQud2lkdGh9O1xuICAgIH1cbiAgfVxuICBkcmF3QmFja2dyb3VuZCgpIHtcbiAgICBjb25zdCB7Y3R4LCBvcHRpb25zOiB7YmFja2dyb3VuZENvbG9yfSwgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0fSA9IHRoaXM7XG4gICAgaWYgKGJhY2tncm91bmRDb2xvcikge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgICBjdHguZmlsbFJlY3QobGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICB9XG4gIGdldExpbmVXaWR0aEZvclZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgZ3JpZCA9IHRoaXMub3B0aW9ucy5ncmlkO1xuICAgIGlmICghdGhpcy5faXNWaXNpYmxlKCkgfHwgIWdyaWQuZGlzcGxheSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICBjb25zdCBpbmRleCA9IHRpY2tzLmZpbmRJbmRleCh0ID0+IHQudmFsdWUgPT09IHZhbHVlKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgY29uc3Qgb3B0cyA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaW5kZXgpKTtcbiAgICAgIHJldHVybiBvcHRzLmxpbmVXaWR0aDtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgZHJhd0dyaWQoY2hhcnRBcmVhKSB7XG4gICAgY29uc3QgZ3JpZCA9IHRoaXMub3B0aW9ucy5ncmlkO1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5fZ3JpZExpbmVJdGVtcyB8fCAodGhpcy5fZ3JpZExpbmVJdGVtcyA9IHRoaXMuX2NvbXB1dGVHcmlkTGluZUl0ZW1zKGNoYXJ0QXJlYSkpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGNvbnN0IGRyYXdMaW5lID0gKHAxLCBwMiwgc3R5bGUpID0+IHtcbiAgICAgIGlmICghc3R5bGUud2lkdGggfHwgIXN0eWxlLmNvbG9yKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHgubGluZVdpZHRoID0gc3R5bGUud2lkdGg7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBzdHlsZS5jb2xvcjtcbiAgICAgIGN0eC5zZXRMaW5lRGFzaChzdHlsZS5ib3JkZXJEYXNoIHx8IFtdKTtcbiAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IHN0eWxlLmJvcmRlckRhc2hPZmZzZXQ7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHgubW92ZVRvKHAxLngsIHAxLnkpO1xuICAgICAgY3R4LmxpbmVUbyhwMi54LCBwMi55KTtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfTtcbiAgICBpZiAoZ3JpZC5kaXNwbGF5KSB7XG4gICAgICBmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgaWYgKGdyaWQuZHJhd09uQ2hhcnRBcmVhKSB7XG4gICAgICAgICAgZHJhd0xpbmUoXG4gICAgICAgICAgICB7eDogaXRlbS54MSwgeTogaXRlbS55MX0sXG4gICAgICAgICAgICB7eDogaXRlbS54MiwgeTogaXRlbS55Mn0sXG4gICAgICAgICAgICBpdGVtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ3JpZC5kcmF3VGlja3MpIHtcbiAgICAgICAgICBkcmF3TGluZShcbiAgICAgICAgICAgIHt4OiBpdGVtLnR4MSwgeTogaXRlbS50eTF9LFxuICAgICAgICAgICAge3g6IGl0ZW0udHgyLCB5OiBpdGVtLnR5Mn0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNvbG9yOiBpdGVtLnRpY2tDb2xvcixcbiAgICAgICAgICAgICAgd2lkdGg6IGl0ZW0udGlja1dpZHRoLFxuICAgICAgICAgICAgICBib3JkZXJEYXNoOiBpdGVtLnRpY2tCb3JkZXJEYXNoLFxuICAgICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiBpdGVtLnRpY2tCb3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBkcmF3Qm9yZGVyKCkge1xuICAgIGNvbnN0IHtjaGFydCwgY3R4LCBvcHRpb25zOiB7Z3JpZH19ID0gdGhpcztcbiAgICBjb25zdCBib3JkZXJPcHRzID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICBjb25zdCBheGlzV2lkdGggPSBncmlkLmRyYXdCb3JkZXIgPyBib3JkZXJPcHRzLmJvcmRlcldpZHRoIDogMDtcbiAgICBpZiAoIWF4aXNXaWR0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsYXN0TGluZVdpZHRoID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgwKSkubGluZVdpZHRoO1xuICAgIGNvbnN0IGJvcmRlclZhbHVlID0gdGhpcy5fYm9yZGVyVmFsdWU7XG4gICAgbGV0IHgxLCB4MiwgeTEsIHkyO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB4MSA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLmxlZnQsIGF4aXNXaWR0aCkgLSBheGlzV2lkdGggLyAyO1xuICAgICAgeDIgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy5yaWdodCwgbGFzdExpbmVXaWR0aCkgKyBsYXN0TGluZVdpZHRoIC8gMjtcbiAgICAgIHkxID0geTIgPSBib3JkZXJWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgeTEgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy50b3AsIGF4aXNXaWR0aCkgLSBheGlzV2lkdGggLyAyO1xuICAgICAgeTIgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy5ib3R0b20sIGxhc3RMaW5lV2lkdGgpICsgbGFzdExpbmVXaWR0aCAvIDI7XG4gICAgICB4MSA9IHgyID0gYm9yZGVyVmFsdWU7XG4gICAgfVxuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlck9wdHMuYm9yZGVyV2lkdGg7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gYm9yZGVyT3B0cy5ib3JkZXJDb2xvcjtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4Lm1vdmVUbyh4MSwgeTEpO1xuICAgIGN0eC5saW5lVG8oeDIsIHkyKTtcbiAgICBjdHguc3Ryb2tlKCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxuICBkcmF3TGFiZWxzKGNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IG9wdGlvblRpY2tzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgIGlmICghb3B0aW9uVGlja3MuZGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBhcmVhID0gdGhpcy5fY29tcHV0ZUxhYmVsQXJlYSgpO1xuICAgIGlmIChhcmVhKSB7XG4gICAgICBjbGlwQXJlYShjdHgsIGFyZWEpO1xuICAgIH1cbiAgICBjb25zdCBpdGVtcyA9IHRoaXMuX2xhYmVsSXRlbXMgfHwgKHRoaXMuX2xhYmVsSXRlbXMgPSB0aGlzLl9jb21wdXRlTGFiZWxJdGVtcyhjaGFydEFyZWEpKTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XG4gICAgICBjb25zdCB0aWNrRm9udCA9IGl0ZW0uZm9udDtcbiAgICAgIGNvbnN0IGxhYmVsID0gaXRlbS5sYWJlbDtcbiAgICAgIGlmIChpdGVtLmJhY2tkcm9wKSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBpdGVtLmJhY2tkcm9wLmNvbG9yO1xuICAgICAgICBjdHguZmlsbFJlY3QoaXRlbS5iYWNrZHJvcC5sZWZ0LCBpdGVtLmJhY2tkcm9wLnRvcCwgaXRlbS5iYWNrZHJvcC53aWR0aCwgaXRlbS5iYWNrZHJvcC5oZWlnaHQpO1xuICAgICAgfVxuICAgICAgbGV0IHkgPSBpdGVtLnRleHRPZmZzZXQ7XG4gICAgICByZW5kZXJUZXh0KGN0eCwgbGFiZWwsIDAsIHksIHRpY2tGb250LCBpdGVtKTtcbiAgICB9XG4gICAgaWYgKGFyZWEpIHtcbiAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICB9XG4gIH1cbiAgZHJhd1RpdGxlKCkge1xuICAgIGNvbnN0IHtjdHgsIG9wdGlvbnM6IHtwb3NpdGlvbiwgdGl0bGUsIHJldmVyc2V9fSA9IHRoaXM7XG4gICAgaWYgKCF0aXRsZS5kaXNwbGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGZvbnQgPSB0b0ZvbnQodGl0bGUuZm9udCk7XG4gICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZS5wYWRkaW5nKTtcbiAgICBjb25zdCBhbGlnbiA9IHRpdGxlLmFsaWduO1xuICAgIGxldCBvZmZzZXQgPSBmb250LmxpbmVIZWlnaHQgLyAyO1xuICAgIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgcG9zaXRpb24gPT09ICdjZW50ZXInIHx8IGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgb2Zmc2V0ICs9IHBhZGRpbmcuYm90dG9tO1xuICAgICAgaWYgKGlzQXJyYXkodGl0bGUudGV4dCkpIHtcbiAgICAgICAgb2Zmc2V0ICs9IGZvbnQubGluZUhlaWdodCAqICh0aXRsZS50ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvZmZzZXQgKz0gcGFkZGluZy50b3A7XG4gICAgfVxuICAgIGNvbnN0IHt0aXRsZVgsIHRpdGxlWSwgbWF4V2lkdGgsIHJvdGF0aW9ufSA9IHRpdGxlQXJncyh0aGlzLCBvZmZzZXQsIHBvc2l0aW9uLCBhbGlnbik7XG4gICAgcmVuZGVyVGV4dChjdHgsIHRpdGxlLnRleHQsIDAsIDAsIGZvbnQsIHtcbiAgICAgIGNvbG9yOiB0aXRsZS5jb2xvcixcbiAgICAgIG1heFdpZHRoLFxuICAgICAgcm90YXRpb24sXG4gICAgICB0ZXh0QWxpZ246IHRpdGxlQWxpZ24oYWxpZ24sIHBvc2l0aW9uLCByZXZlcnNlKSxcbiAgICAgIHRleHRCYXNlbGluZTogJ21pZGRsZScsXG4gICAgICB0cmFuc2xhdGlvbjogW3RpdGxlWCwgdGl0bGVZXSxcbiAgICB9KTtcbiAgfVxuICBkcmF3KGNoYXJ0QXJlYSkge1xuICAgIGlmICghdGhpcy5faXNWaXNpYmxlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kcmF3QmFja2dyb3VuZCgpO1xuICAgIHRoaXMuZHJhd0dyaWQoY2hhcnRBcmVhKTtcbiAgICB0aGlzLmRyYXdCb3JkZXIoKTtcbiAgICB0aGlzLmRyYXdUaXRsZSgpO1xuICAgIHRoaXMuZHJhd0xhYmVscyhjaGFydEFyZWEpO1xuICB9XG4gIF9sYXllcnMoKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0eiA9IG9wdHMudGlja3MgJiYgb3B0cy50aWNrcy56IHx8IDA7XG4gICAgY29uc3QgZ3ogPSB2YWx1ZU9yRGVmYXVsdChvcHRzLmdyaWQgJiYgb3B0cy5ncmlkLnosIC0xKTtcbiAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8IHRoaXMuZHJhdyAhPT0gU2NhbGUucHJvdG90eXBlLmRyYXcpIHtcbiAgICAgIHJldHVybiBbe1xuICAgICAgICB6OiB0eixcbiAgICAgICAgZHJhdzogKGNoYXJ0QXJlYSkgPT4ge1xuICAgICAgICAgIHRoaXMuZHJhdyhjaGFydEFyZWEpO1xuICAgICAgICB9XG4gICAgICB9XTtcbiAgICB9XG4gICAgcmV0dXJuIFt7XG4gICAgICB6OiBneixcbiAgICAgIGRyYXc6IChjaGFydEFyZWEpID0+IHtcbiAgICAgICAgdGhpcy5kcmF3QmFja2dyb3VuZCgpO1xuICAgICAgICB0aGlzLmRyYXdHcmlkKGNoYXJ0QXJlYSk7XG4gICAgICAgIHRoaXMuZHJhd1RpdGxlKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgejogZ3ogKyAxLFxuICAgICAgZHJhdzogKCkgPT4ge1xuICAgICAgICB0aGlzLmRyYXdCb3JkZXIoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICB6OiB0eixcbiAgICAgIGRyYXc6IChjaGFydEFyZWEpID0+IHtcbiAgICAgICAgdGhpcy5kcmF3TGFiZWxzKGNoYXJ0QXJlYSk7XG4gICAgICB9XG4gICAgfV07XG4gIH1cbiAgZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModHlwZSkge1xuICAgIGNvbnN0IG1ldGFzID0gdGhpcy5jaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgY29uc3QgYXhpc0lEID0gdGhpcy5heGlzICsgJ0F4aXNJRCc7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IG1ldGFzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgY29uc3QgbWV0YSA9IG1ldGFzW2ldO1xuICAgICAgaWYgKG1ldGFbYXhpc0lEXSA9PT0gdGhpcy5pZCAmJiAoIXR5cGUgfHwgbWV0YS50eXBlID09PSB0eXBlKSkge1xuICAgICAgICByZXN1bHQucHVzaChtZXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBfcmVzb2x2ZVRpY2tGb250T3B0aW9ucyhpbmRleCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnMudGlja3Muc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaW5kZXgpKTtcbiAgICByZXR1cm4gdG9Gb250KG9wdHMuZm9udCk7XG4gIH1cbiAgX21heERpZ2l0cygpIHtcbiAgICBjb25zdCBmb250U2l6ZSA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoMCkubGluZUhlaWdodDtcbiAgICByZXR1cm4gKHRoaXMuaXNIb3Jpem9udGFsKCkgPyB0aGlzLndpZHRoIDogdGhpcy5oZWlnaHQpIC8gZm9udFNpemU7XG4gIH1cbn1cblxuY2xhc3MgVHlwZWRSZWdpc3RyeSB7XG4gIGNvbnN0cnVjdG9yKHR5cGUsIHNjb3BlLCBvdmVycmlkZSkge1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgIHRoaXMub3ZlcnJpZGUgPSBvdmVycmlkZTtcbiAgICB0aGlzLml0ZW1zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuICBpc0ZvclR5cGUodHlwZSkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YuY2FsbCh0aGlzLnR5cGUucHJvdG90eXBlLCB0eXBlLnByb3RvdHlwZSk7XG4gIH1cbiAgcmVnaXN0ZXIoaXRlbSkge1xuICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGl0ZW0pO1xuICAgIGxldCBwYXJlbnRTY29wZTtcbiAgICBpZiAoaXNJQ2hhcnRDb21wb25lbnQocHJvdG8pKSB7XG4gICAgICBwYXJlbnRTY29wZSA9IHRoaXMucmVnaXN0ZXIocHJvdG8pO1xuICAgIH1cbiAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgY29uc3QgaWQgPSBpdGVtLmlkO1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcy5zY29wZSArICcuJyArIGlkO1xuICAgIGlmICghaWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2xhc3MgZG9lcyBub3QgaGF2ZSBpZDogJyArIGl0ZW0pO1xuICAgIH1cbiAgICBpZiAoaWQgaW4gaXRlbXMpIHtcbiAgICAgIHJldHVybiBzY29wZTtcbiAgICB9XG4gICAgaXRlbXNbaWRdID0gaXRlbTtcbiAgICByZWdpc3RlckRlZmF1bHRzKGl0ZW0sIHNjb3BlLCBwYXJlbnRTY29wZSk7XG4gICAgaWYgKHRoaXMub3ZlcnJpZGUpIHtcbiAgICAgIGRlZmF1bHRzLm92ZXJyaWRlKGl0ZW0uaWQsIGl0ZW0ub3ZlcnJpZGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjb3BlO1xuICB9XG4gIGdldChpZCkge1xuICAgIHJldHVybiB0aGlzLml0ZW1zW2lkXTtcbiAgfVxuICB1bnJlZ2lzdGVyKGl0ZW0pIHtcbiAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgY29uc3QgaWQgPSBpdGVtLmlkO1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcy5zY29wZTtcbiAgICBpZiAoaWQgaW4gaXRlbXMpIHtcbiAgICAgIGRlbGV0ZSBpdGVtc1tpZF07XG4gICAgfVxuICAgIGlmIChzY29wZSAmJiBpZCBpbiBkZWZhdWx0c1tzY29wZV0pIHtcbiAgICAgIGRlbGV0ZSBkZWZhdWx0c1tzY29wZV1baWRdO1xuICAgICAgaWYgKHRoaXMub3ZlcnJpZGUpIHtcbiAgICAgICAgZGVsZXRlIG92ZXJyaWRlc1tpZF07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiByZWdpc3RlckRlZmF1bHRzKGl0ZW0sIHNjb3BlLCBwYXJlbnRTY29wZSkge1xuICBjb25zdCBpdGVtRGVmYXVsdHMgPSBtZXJnZShPYmplY3QuY3JlYXRlKG51bGwpLCBbXG4gICAgcGFyZW50U2NvcGUgPyBkZWZhdWx0cy5nZXQocGFyZW50U2NvcGUpIDoge30sXG4gICAgZGVmYXVsdHMuZ2V0KHNjb3BlKSxcbiAgICBpdGVtLmRlZmF1bHRzXG4gIF0pO1xuICBkZWZhdWx0cy5zZXQoc2NvcGUsIGl0ZW1EZWZhdWx0cyk7XG4gIGlmIChpdGVtLmRlZmF1bHRSb3V0ZXMpIHtcbiAgICByb3V0ZURlZmF1bHRzKHNjb3BlLCBpdGVtLmRlZmF1bHRSb3V0ZXMpO1xuICB9XG4gIGlmIChpdGVtLmRlc2NyaXB0b3JzKSB7XG4gICAgZGVmYXVsdHMuZGVzY3JpYmUoc2NvcGUsIGl0ZW0uZGVzY3JpcHRvcnMpO1xuICB9XG59XG5mdW5jdGlvbiByb3V0ZURlZmF1bHRzKHNjb3BlLCByb3V0ZXMpIHtcbiAgT2JqZWN0LmtleXMocm91dGVzKS5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICBjb25zdCBwcm9wZXJ0eVBhcnRzID0gcHJvcGVydHkuc3BsaXQoJy4nKTtcbiAgICBjb25zdCBzb3VyY2VOYW1lID0gcHJvcGVydHlQYXJ0cy5wb3AoKTtcbiAgICBjb25zdCBzb3VyY2VTY29wZSA9IFtzY29wZV0uY29uY2F0KHByb3BlcnR5UGFydHMpLmpvaW4oJy4nKTtcbiAgICBjb25zdCBwYXJ0cyA9IHJvdXRlc1twcm9wZXJ0eV0uc3BsaXQoJy4nKTtcbiAgICBjb25zdCB0YXJnZXROYW1lID0gcGFydHMucG9wKCk7XG4gICAgY29uc3QgdGFyZ2V0U2NvcGUgPSBwYXJ0cy5qb2luKCcuJyk7XG4gICAgZGVmYXVsdHMucm91dGUoc291cmNlU2NvcGUsIHNvdXJjZU5hbWUsIHRhcmdldFNjb3BlLCB0YXJnZXROYW1lKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBpc0lDaGFydENvbXBvbmVudChwcm90bykge1xuICByZXR1cm4gJ2lkJyBpbiBwcm90byAmJiAnZGVmYXVsdHMnIGluIHByb3RvO1xufVxuXG5jbGFzcyBSZWdpc3RyeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29udHJvbGxlcnMgPSBuZXcgVHlwZWRSZWdpc3RyeShEYXRhc2V0Q29udHJvbGxlciwgJ2RhdGFzZXRzJywgdHJ1ZSk7XG4gICAgdGhpcy5lbGVtZW50cyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KEVsZW1lbnQsICdlbGVtZW50cycpO1xuICAgIHRoaXMucGx1Z2lucyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KE9iamVjdCwgJ3BsdWdpbnMnKTtcbiAgICB0aGlzLnNjYWxlcyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KFNjYWxlLCAnc2NhbGVzJyk7XG4gICAgdGhpcy5fdHlwZWRSZWdpc3RyaWVzID0gW3RoaXMuY29udHJvbGxlcnMsIHRoaXMuc2NhbGVzLCB0aGlzLmVsZW1lbnRzXTtcbiAgfVxuICBhZGQoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncyk7XG4gIH1cbiAgcmVtb3ZlKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncyk7XG4gIH1cbiAgYWRkQ29udHJvbGxlcnMoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5jb250cm9sbGVycyk7XG4gIH1cbiAgYWRkRWxlbWVudHMoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5lbGVtZW50cyk7XG4gIH1cbiAgYWRkUGx1Z2lucyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLnBsdWdpbnMpO1xuICB9XG4gIGFkZFNjYWxlcyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLnNjYWxlcyk7XG4gIH1cbiAgZ2V0Q29udHJvbGxlcihpZCkge1xuICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMuY29udHJvbGxlcnMsICdjb250cm9sbGVyJyk7XG4gIH1cbiAgZ2V0RWxlbWVudChpZCkge1xuICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMuZWxlbWVudHMsICdlbGVtZW50Jyk7XG4gIH1cbiAgZ2V0UGx1Z2luKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5wbHVnaW5zLCAncGx1Z2luJyk7XG4gIH1cbiAgZ2V0U2NhbGUoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLnNjYWxlcywgJ3NjYWxlJyk7XG4gIH1cbiAgcmVtb3ZlQ29udHJvbGxlcnMoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLmNvbnRyb2xsZXJzKTtcbiAgfVxuICByZW1vdmVFbGVtZW50cyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMuZWxlbWVudHMpO1xuICB9XG4gIHJlbW92ZVBsdWdpbnMoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLnBsdWdpbnMpO1xuICB9XG4gIHJlbW92ZVNjYWxlcyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMuc2NhbGVzKTtcbiAgfVxuICBfZWFjaChtZXRob2QsIGFyZ3MsIHR5cGVkUmVnaXN0cnkpIHtcbiAgICBbLi4uYXJnc10uZm9yRWFjaChhcmcgPT4ge1xuICAgICAgY29uc3QgcmVnID0gdHlwZWRSZWdpc3RyeSB8fCB0aGlzLl9nZXRSZWdpc3RyeUZvclR5cGUoYXJnKTtcbiAgICAgIGlmICh0eXBlZFJlZ2lzdHJ5IHx8IHJlZy5pc0ZvclR5cGUoYXJnKSB8fCAocmVnID09PSB0aGlzLnBsdWdpbnMgJiYgYXJnLmlkKSkge1xuICAgICAgICB0aGlzLl9leGVjKG1ldGhvZCwgcmVnLCBhcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWFjaChhcmcsIGl0ZW0gPT4ge1xuICAgICAgICAgIGNvbnN0IGl0ZW1SZWcgPSB0eXBlZFJlZ2lzdHJ5IHx8IHRoaXMuX2dldFJlZ2lzdHJ5Rm9yVHlwZShpdGVtKTtcbiAgICAgICAgICB0aGlzLl9leGVjKG1ldGhvZCwgaXRlbVJlZywgaXRlbSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIF9leGVjKG1ldGhvZCwgcmVnaXN0cnksIGNvbXBvbmVudCkge1xuICAgIGNvbnN0IGNhbWVsTWV0aG9kID0gX2NhcGl0YWxpemUobWV0aG9kKTtcbiAgICBjYWxsYmFjayhjb21wb25lbnRbJ2JlZm9yZScgKyBjYW1lbE1ldGhvZF0sIFtdLCBjb21wb25lbnQpO1xuICAgIHJlZ2lzdHJ5W21ldGhvZF0oY29tcG9uZW50KTtcbiAgICBjYWxsYmFjayhjb21wb25lbnRbJ2FmdGVyJyArIGNhbWVsTWV0aG9kXSwgW10sIGNvbXBvbmVudCk7XG4gIH1cbiAgX2dldFJlZ2lzdHJ5Rm9yVHlwZSh0eXBlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90eXBlZFJlZ2lzdHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHJlZyA9IHRoaXMuX3R5cGVkUmVnaXN0cmllc1tpXTtcbiAgICAgIGlmIChyZWcuaXNGb3JUeXBlKHR5cGUpKSB7XG4gICAgICAgIHJldHVybiByZWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBsdWdpbnM7XG4gIH1cbiAgX2dldChpZCwgdHlwZWRSZWdpc3RyeSwgdHlwZSkge1xuICAgIGNvbnN0IGl0ZW0gPSB0eXBlZFJlZ2lzdHJ5LmdldChpZCk7XG4gICAgaWYgKGl0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBpZCArICdcIiBpcyBub3QgYSByZWdpc3RlcmVkICcgKyB0eXBlICsgJy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cbn1cbnZhciByZWdpc3RyeSA9IG5ldyBSZWdpc3RyeSgpO1xuXG5jbGFzcyBTY2F0dGVyQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB7ZGF0YTogcG9pbnRzID0gW119ID0gbWV0YTtcbiAgICBjb25zdCBhbmltYXRpb25zRGlzYWJsZWQgPSB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQ7XG4gICAgbGV0IHtzdGFydCwgY291bnR9ID0gX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMobWV0YSwgcG9pbnRzLCBhbmltYXRpb25zRGlzYWJsZWQpO1xuICAgIHRoaXMuX2RyYXdTdGFydCA9IHN0YXJ0O1xuICAgIHRoaXMuX2RyYXdDb3VudCA9IGNvdW50O1xuICAgIGlmIChfc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpKSB7XG4gICAgICBzdGFydCA9IDA7XG4gICAgICBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgIGNvbnN0IHtkYXRhc2V0OiBsaW5lLCBfZGF0YXNldH0gPSBtZXRhO1xuICAgICAgbGluZS5fY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgbGluZS5fZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgIGxpbmUuX2RlY2ltYXRlZCA9ICEhX2RhdGFzZXQuX2RlY2ltYXRlZDtcbiAgICAgIGxpbmUucG9pbnRzID0gcG9pbnRzO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKTtcbiAgICAgIG9wdGlvbnMuc2VnbWVudCA9IHRoaXMub3B0aW9ucy5zZWdtZW50O1xuICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGxpbmUsIHVuZGVmaW5lZCwge1xuICAgICAgICBhbmltYXRlZDogIWFuaW1hdGlvbnNEaXNhYmxlZCxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgfSwgbW9kZSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpO1xuICB9XG4gIGFkZEVsZW1lbnRzKCkge1xuICAgIGNvbnN0IHtzaG93TGluZX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKCF0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSAmJiBzaG93TGluZSkge1xuICAgICAgdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUgPSByZWdpc3RyeS5nZXRFbGVtZW50KCdsaW5lJyk7XG4gICAgfVxuICAgIHN1cGVyLmFkZEVsZW1lbnRzKCk7XG4gIH1cbiAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgY29uc3Qge2lTY2FsZSwgdlNjYWxlLCBfc3RhY2tlZCwgX2RhdGFzZXR9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICBjb25zdCBpbmNsdWRlT3B0aW9ucyA9IHRoaXMuaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucyk7XG4gICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgIGNvbnN0IHtzcGFuR2Fwcywgc2VnbWVudH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbWF4R2FwTGVuZ3RoID0gaXNOdW1iZXIoc3BhbkdhcHMpID8gc3BhbkdhcHMgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgY29uc3QgZGlyZWN0VXBkYXRlID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkIHx8IHJlc2V0IHx8IG1vZGUgPT09ICdub25lJztcbiAgICBsZXQgcHJldlBhcnNlZCA9IHN0YXJ0ID4gMCAmJiB0aGlzLmdldFBhcnNlZChzdGFydCAtIDEpO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSkge1xuICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBkaXJlY3RVcGRhdGUgPyBwb2ludCA6IHt9O1xuICAgICAgY29uc3QgbnVsbERhdGEgPSBpc051bGxPclVuZGVmKHBhcnNlZFt2QXhpc10pO1xuICAgICAgY29uc3QgaVBpeGVsID0gcHJvcGVydGllc1tpQXhpc10gPSBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdLCBpKTtcbiAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgfHwgbnVsbERhdGEgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShfc3RhY2tlZCA/IHRoaXMuYXBwbHlTdGFjayh2U2NhbGUsIHBhcnNlZCwgX3N0YWNrZWQpIDogcGFyc2VkW3ZBeGlzXSwgaSk7XG4gICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCkgfHwgbnVsbERhdGE7XG4gICAgICBwcm9wZXJ0aWVzLnN0b3AgPSBpID4gMCAmJiAoTWF0aC5hYnMocGFyc2VkW2lBeGlzXSAtIHByZXZQYXJzZWRbaUF4aXNdKSkgPiBtYXhHYXBMZW5ndGg7XG4gICAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICBwcm9wZXJ0aWVzLnBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgcHJvcGVydGllcy5yYXcgPSBfZGF0YXNldC5kYXRhW2ldO1xuICAgICAgfVxuICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICB9XG4gICAgICBpZiAoIWRpcmVjdFVwZGF0ZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgfVxuICAgICAgcHJldlBhcnNlZCA9IHBhcnNlZDtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVTaGFyZWRPcHRpb25zKHNoYXJlZE9wdGlvbnMsIG1vZGUsIGZpcnN0T3B0cyk7XG4gIH1cbiAgZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgZGF0YSA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgbGV0IG1heCA9IDA7XG4gICAgICBmb3IgKGxldCBpID0gZGF0YS5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGRhdGFbaV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSkpIC8gMik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF4ID4gMCAmJiBtYXg7XG4gICAgfVxuICAgIGNvbnN0IGRhdGFzZXQgPSBtZXRhLmRhdGFzZXQ7XG4gICAgY29uc3QgYm9yZGVyID0gZGF0YXNldC5vcHRpb25zICYmIGRhdGFzZXQub3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwO1xuICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBib3JkZXI7XG4gICAgfVxuICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBkYXRhWzBdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKDApKTtcbiAgICBjb25zdCBsYXN0UG9pbnQgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoZGF0YS5sZW5ndGggLSAxKSk7XG4gICAgcmV0dXJuIE1hdGgubWF4KGJvcmRlciwgZmlyc3RQb2ludCwgbGFzdFBvaW50KSAvIDI7XG4gIH1cbn1cblNjYXR0ZXJDb250cm9sbGVyLmlkID0gJ3NjYXR0ZXInO1xuU2NhdHRlckNvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgc2hvd0xpbmU6IGZhbHNlLFxuICBmaWxsOiBmYWxzZVxufTtcblNjYXR0ZXJDb250cm9sbGVyLm92ZXJyaWRlcyA9IHtcbiAgaW50ZXJhY3Rpb246IHtcbiAgICBtb2RlOiAncG9pbnQnXG4gIH0sXG4gIHBsdWdpbnM6IHtcbiAgICB0b29sdGlwOiB7XG4gICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgdGl0bGUoKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9LFxuICAgICAgICBsYWJlbChpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuICcoJyArIGl0ZW0ubGFiZWwgKyAnLCAnICsgaXRlbS5mb3JtYXR0ZWRWYWx1ZSArICcpJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgc2NhbGVzOiB7XG4gICAgeDoge1xuICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICB9LFxuICAgIHk6IHtcbiAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgfVxuICB9XG59O1xuXG52YXIgY29udHJvbGxlcnMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5CYXJDb250cm9sbGVyOiBCYXJDb250cm9sbGVyLFxuQnViYmxlQ29udHJvbGxlcjogQnViYmxlQ29udHJvbGxlcixcbkRvdWdobnV0Q29udHJvbGxlcjogRG91Z2hudXRDb250cm9sbGVyLFxuTGluZUNvbnRyb2xsZXI6IExpbmVDb250cm9sbGVyLFxuUG9sYXJBcmVhQ29udHJvbGxlcjogUG9sYXJBcmVhQ29udHJvbGxlcixcblBpZUNvbnRyb2xsZXI6IFBpZUNvbnRyb2xsZXIsXG5SYWRhckNvbnRyb2xsZXI6IFJhZGFyQ29udHJvbGxlcixcblNjYXR0ZXJDb250cm9sbGVyOiBTY2F0dGVyQ29udHJvbGxlclxufSk7XG5cbmZ1bmN0aW9uIGFic3RyYWN0KCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZDogQ2hlY2sgdGhhdCBhIGNvbXBsZXRlIGRhdGUgYWRhcHRlciBpcyBwcm92aWRlZC4nKTtcbn1cbmNsYXNzIERhdGVBZGFwdGVyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIH1cbiAgaW5pdChjaGFydE9wdGlvbnMpIHt9XG4gIGZvcm1hdHMoKSB7XG4gICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gIH1cbiAgcGFyc2UodmFsdWUsIGZvcm1hdCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIGZvcm1hdCh0aW1lc3RhbXAsIGZvcm1hdCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIGFkZCh0aW1lc3RhbXAsIGFtb3VudCwgdW5pdCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIGRpZmYoYSwgYiwgdW5pdCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIHN0YXJ0T2YodGltZXN0YW1wLCB1bml0LCB3ZWVrZGF5KSB7XG4gICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gIH1cbiAgZW5kT2YodGltZXN0YW1wLCB1bml0KSB7XG4gICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gIH1cbn1cbkRhdGVBZGFwdGVyLm92ZXJyaWRlID0gZnVuY3Rpb24obWVtYmVycykge1xuICBPYmplY3QuYXNzaWduKERhdGVBZGFwdGVyLnByb3RvdHlwZSwgbWVtYmVycyk7XG59O1xudmFyIGFkYXB0ZXJzID0ge1xuICBfZGF0ZTogRGF0ZUFkYXB0ZXJcbn07XG5cbmZ1bmN0aW9uIGJpbmFyeVNlYXJjaChtZXRhc2V0LCBheGlzLCB2YWx1ZSwgaW50ZXJzZWN0KSB7XG4gIGNvbnN0IHtjb250cm9sbGVyLCBkYXRhLCBfc29ydGVkfSA9IG1ldGFzZXQ7XG4gIGNvbnN0IGlTY2FsZSA9IGNvbnRyb2xsZXIuX2NhY2hlZE1ldGEuaVNjYWxlO1xuICBpZiAoaVNjYWxlICYmIGF4aXMgPT09IGlTY2FsZS5heGlzICYmIGF4aXMgIT09ICdyJyAmJiBfc29ydGVkICYmIGRhdGEubGVuZ3RoKSB7XG4gICAgY29uc3QgbG9va3VwTWV0aG9kID0gaVNjYWxlLl9yZXZlcnNlUGl4ZWxzID8gX3Jsb29rdXBCeUtleSA6IF9sb29rdXBCeUtleTtcbiAgICBpZiAoIWludGVyc2VjdCkge1xuICAgICAgcmV0dXJuIGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChjb250cm9sbGVyLl9zaGFyZWRPcHRpb25zKSB7XG4gICAgICBjb25zdCBlbCA9IGRhdGFbMF07XG4gICAgICBjb25zdCByYW5nZSA9IHR5cGVvZiBlbC5nZXRSYW5nZSA9PT0gJ2Z1bmN0aW9uJyAmJiBlbC5nZXRSYW5nZShheGlzKTtcbiAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICBjb25zdCBzdGFydCA9IGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSAtIHJhbmdlKTtcbiAgICAgICAgY29uc3QgZW5kID0gbG9va3VwTWV0aG9kKGRhdGEsIGF4aXMsIHZhbHVlICsgcmFuZ2UpO1xuICAgICAgICByZXR1cm4ge2xvOiBzdGFydC5sbywgaGk6IGVuZC5oaX07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7bG86IDAsIGhpOiBkYXRhLmxlbmd0aCAtIDF9O1xufVxuZnVuY3Rpb24gZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgaGFuZGxlciwgaW50ZXJzZWN0KSB7XG4gIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW2F4aXNdO1xuICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGNvbnN0IHtpbmRleCwgZGF0YX0gPSBtZXRhc2V0c1tpXTtcbiAgICBjb25zdCB7bG8sIGhpfSA9IGJpbmFyeVNlYXJjaChtZXRhc2V0c1tpXSwgYXhpcywgdmFsdWUsIGludGVyc2VjdCk7XG4gICAgZm9yIChsZXQgaiA9IGxvOyBqIDw9IGhpOyArK2opIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBkYXRhW2pdO1xuICAgICAgaWYgKCFlbGVtZW50LnNraXApIHtcbiAgICAgICAgaGFuZGxlcihlbGVtZW50LCBpbmRleCwgaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMoYXhpcykge1xuICBjb25zdCB1c2VYID0gYXhpcy5pbmRleE9mKCd4JykgIT09IC0xO1xuICBjb25zdCB1c2VZID0gYXhpcy5pbmRleE9mKCd5JykgIT09IC0xO1xuICByZXR1cm4gZnVuY3Rpb24ocHQxLCBwdDIpIHtcbiAgICBjb25zdCBkZWx0YVggPSB1c2VYID8gTWF0aC5hYnMocHQxLnggLSBwdDIueCkgOiAwO1xuICAgIGNvbnN0IGRlbHRhWSA9IHVzZVkgPyBNYXRoLmFicyhwdDEueSAtIHB0Mi55KSA6IDA7XG4gICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhkZWx0YVgsIDIpICsgTWF0aC5wb3coZGVsdGFZLCAyKSk7XG4gIH07XG59XG5mdW5jdGlvbiBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIHtcbiAgY29uc3QgaXRlbXMgPSBbXTtcbiAgaWYgKCFpbmNsdWRlSW52aXNpYmxlICYmICFjaGFydC5pc1BvaW50SW5BcmVhKHBvc2l0aW9uKSkge1xuICAgIHJldHVybiBpdGVtcztcbiAgfVxuICBjb25zdCBldmFsdWF0aW9uRnVuYyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICBpZiAoIWluY2x1ZGVJbnZpc2libGUgJiYgIV9pc1BvaW50SW5BcmVhKGVsZW1lbnQsIGNoYXJ0LmNoYXJ0QXJlYSwgMCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKSkge1xuICAgICAgaXRlbXMucHVzaCh7ZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleH0pO1xuICAgIH1cbiAgfTtcbiAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMsIHRydWUpO1xuICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXROZWFyZXN0UmFkaWFsSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGxldCBpdGVtcyA9IFtdO1xuICBmdW5jdGlvbiBldmFsdWF0aW9uRnVuYyhlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgY29uc3Qge3N0YXJ0QW5nbGUsIGVuZEFuZ2xlfSA9IGVsZW1lbnQuZ2V0UHJvcHMoWydzdGFydEFuZ2xlJywgJ2VuZEFuZ2xlJ10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IHthbmdsZX0gPSBnZXRBbmdsZUZyb21Qb2ludChlbGVtZW50LCB7eDogcG9zaXRpb24ueCwgeTogcG9zaXRpb24ueX0pO1xuICAgIGlmIChfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSkpIHtcbiAgICAgIGl0ZW1zLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9KTtcbiAgICB9XG4gIH1cbiAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMpO1xuICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXROZWFyZXN0Q2FydGVzaWFuSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIHtcbiAgbGV0IGl0ZW1zID0gW107XG4gIGNvbnN0IGRpc3RhbmNlTWV0cmljID0gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKGF4aXMpO1xuICBsZXQgbWluRGlzdGFuY2UgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gIGZ1bmN0aW9uIGV2YWx1YXRpb25GdW5jKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICBjb25zdCBpblJhbmdlID0gZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGlmIChpbnRlcnNlY3QgJiYgIWluUmFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY2VudGVyID0gZWxlbWVudC5nZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBjb25zdCBwb2ludEluQXJlYSA9ICEhaW5jbHVkZUludmlzaWJsZSB8fCBjaGFydC5pc1BvaW50SW5BcmVhKGNlbnRlcik7XG4gICAgaWYgKCFwb2ludEluQXJlYSAmJiAhaW5SYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkaXN0YW5jZSA9IGRpc3RhbmNlTWV0cmljKHBvc2l0aW9uLCBjZW50ZXIpO1xuICAgIGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICBpdGVtcyA9IFt7ZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleH1dO1xuICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICB9IGVsc2UgaWYgKGRpc3RhbmNlID09PSBtaW5EaXN0YW5jZSkge1xuICAgICAgaXRlbXMucHVzaCh7ZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleH0pO1xuICAgIH1cbiAgfVxuICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBldmFsdWF0aW9uRnVuYyk7XG4gIHJldHVybiBpdGVtcztcbn1cbmZ1bmN0aW9uIGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkge1xuICBpZiAoIWluY2x1ZGVJbnZpc2libGUgJiYgIWNoYXJ0LmlzUG9pbnRJbkFyZWEocG9zaXRpb24pKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBheGlzID09PSAncicgJiYgIWludGVyc2VjdFxuICAgID8gZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbilcbiAgICA6IGdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG59XG5mdW5jdGlvbiBnZXRBeGlzSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgY29uc3QgaXRlbXMgPSBbXTtcbiAgY29uc3QgcmFuZ2VNZXRob2QgPSBheGlzID09PSAneCcgPyAnaW5YUmFuZ2UnIDogJ2luWVJhbmdlJztcbiAgbGV0IGludGVyc2VjdHNJdGVtID0gZmFsc2U7XG4gIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIChlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSA9PiB7XG4gICAgaWYgKGVsZW1lbnRbcmFuZ2VNZXRob2RdKHBvc2l0aW9uW2F4aXNdLCB1c2VGaW5hbFBvc2l0aW9uKSkge1xuICAgICAgaXRlbXMucHVzaCh7ZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleH0pO1xuICAgICAgaW50ZXJzZWN0c0l0ZW0gPSBpbnRlcnNlY3RzSXRlbSB8fCBlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICB9KTtcbiAgaWYgKGludGVyc2VjdCAmJiAhaW50ZXJzZWN0c0l0ZW0pIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIGl0ZW1zO1xufVxudmFyIEludGVyYWN0aW9uID0ge1xuICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMsXG4gIG1vZGVzOiB7XG4gICAgaW5kZXgoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4JztcbiAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICBjb25zdCBpdGVtcyA9IG9wdGlvbnMuaW50ZXJzZWN0XG4gICAgICAgID8gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKVxuICAgICAgICA6IGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGZhbHNlLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbiAgICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG4gICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkuZm9yRWFjaCgobWV0YSkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IGl0ZW1zWzBdLmluZGV4O1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gbWV0YS5kYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKGVsZW1lbnQgJiYgIWVsZW1lbnQuc2tpcCkge1xuICAgICAgICAgIGVsZW1lbnRzLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleDogbWV0YS5pbmRleCwgaW5kZXh9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgfSxcbiAgICBkYXRhc2V0KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgY29uc3QgaW5jbHVkZUludmlzaWJsZSA9IG9wdGlvbnMuaW5jbHVkZUludmlzaWJsZSB8fCBmYWxzZTtcbiAgICAgIGxldCBpdGVtcyA9IG9wdGlvbnMuaW50ZXJzZWN0XG4gICAgICAgID8gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSA6XG4gICAgICAgIGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGZhbHNlLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbiAgICAgIGlmIChpdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGRhdGFzZXRJbmRleCA9IGl0ZW1zWzBdLmRhdGFzZXRJbmRleDtcbiAgICAgICAgY29uc3QgZGF0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuZGF0YTtcbiAgICAgICAgaXRlbXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgaXRlbXMucHVzaCh7ZWxlbWVudDogZGF0YVtpXSwgZGF0YXNldEluZGV4LCBpbmRleDogaX0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlbXM7XG4gICAgfSxcbiAgICBwb2ludChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5JztcbiAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICByZXR1cm4gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbiAgICB9LFxuICAgIG5lYXJlc3QoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG4gICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgcmV0dXJuIGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIG9wdGlvbnMuaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbiAgICB9LFxuICAgIHgoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICByZXR1cm4gZ2V0QXhpc0l0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgJ3gnLCBvcHRpb25zLmludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfSxcbiAgICB5KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgcmV0dXJuIGdldEF4aXNJdGVtcyhjaGFydCwgcG9zaXRpb24sICd5Jywgb3B0aW9ucy5pbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgU1RBVElDX1BPU0lUSU9OUyA9IFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ107XG5mdW5jdGlvbiBmaWx0ZXJCeVBvc2l0aW9uKGFycmF5LCBwb3NpdGlvbikge1xuICByZXR1cm4gYXJyYXkuZmlsdGVyKHYgPT4gdi5wb3MgPT09IHBvc2l0aW9uKTtcbn1cbmZ1bmN0aW9uIGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhhcnJheSwgYXhpcykge1xuICByZXR1cm4gYXJyYXkuZmlsdGVyKHYgPT4gU1RBVElDX1BPU0lUSU9OUy5pbmRleE9mKHYucG9zKSA9PT0gLTEgJiYgdi5ib3guYXhpcyA9PT0gYXhpcyk7XG59XG5mdW5jdGlvbiBzb3J0QnlXZWlnaHQoYXJyYXksIHJldmVyc2UpIHtcbiAgcmV0dXJuIGFycmF5LnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCB2MCA9IHJldmVyc2UgPyBiIDogYTtcbiAgICBjb25zdCB2MSA9IHJldmVyc2UgPyBhIDogYjtcbiAgICByZXR1cm4gdjAud2VpZ2h0ID09PSB2MS53ZWlnaHQgP1xuICAgICAgdjAuaW5kZXggLSB2MS5pbmRleCA6XG4gICAgICB2MC53ZWlnaHQgLSB2MS53ZWlnaHQ7XG4gIH0pO1xufVxuZnVuY3Rpb24gd3JhcEJveGVzKGJveGVzKSB7XG4gIGNvbnN0IGxheW91dEJveGVzID0gW107XG4gIGxldCBpLCBpbGVuLCBib3gsIHBvcywgc3RhY2ssIHN0YWNrV2VpZ2h0O1xuICBmb3IgKGkgPSAwLCBpbGVuID0gKGJveGVzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBib3ggPSBib3hlc1tpXTtcbiAgICAoe3Bvc2l0aW9uOiBwb3MsIG9wdGlvbnM6IHtzdGFjaywgc3RhY2tXZWlnaHQgPSAxfX0gPSBib3gpO1xuICAgIGxheW91dEJveGVzLnB1c2goe1xuICAgICAgaW5kZXg6IGksXG4gICAgICBib3gsXG4gICAgICBwb3MsXG4gICAgICBob3Jpem9udGFsOiBib3guaXNIb3Jpem9udGFsKCksXG4gICAgICB3ZWlnaHQ6IGJveC53ZWlnaHQsXG4gICAgICBzdGFjazogc3RhY2sgJiYgKHBvcyArIHN0YWNrKSxcbiAgICAgIHN0YWNrV2VpZ2h0XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGxheW91dEJveGVzO1xufVxuZnVuY3Rpb24gYnVpbGRTdGFja3MobGF5b3V0cykge1xuICBjb25zdCBzdGFja3MgPSB7fTtcbiAgZm9yIChjb25zdCB3cmFwIG9mIGxheW91dHMpIHtcbiAgICBjb25zdCB7c3RhY2ssIHBvcywgc3RhY2tXZWlnaHR9ID0gd3JhcDtcbiAgICBpZiAoIXN0YWNrIHx8ICFTVEFUSUNfUE9TSVRJT05TLmluY2x1ZGVzKHBvcykpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBfc3RhY2sgPSBzdGFja3Nbc3RhY2tdIHx8IChzdGFja3Nbc3RhY2tdID0ge2NvdW50OiAwLCBwbGFjZWQ6IDAsIHdlaWdodDogMCwgc2l6ZTogMH0pO1xuICAgIF9zdGFjay5jb3VudCsrO1xuICAgIF9zdGFjay53ZWlnaHQgKz0gc3RhY2tXZWlnaHQ7XG4gIH1cbiAgcmV0dXJuIHN0YWNrcztcbn1cbmZ1bmN0aW9uIHNldExheW91dERpbXMobGF5b3V0cywgcGFyYW1zKSB7XG4gIGNvbnN0IHN0YWNrcyA9IGJ1aWxkU3RhY2tzKGxheW91dHMpO1xuICBjb25zdCB7dkJveE1heFdpZHRoLCBoQm94TWF4SGVpZ2h0fSA9IHBhcmFtcztcbiAgbGV0IGksIGlsZW4sIGxheW91dDtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGxheW91dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgbGF5b3V0ID0gbGF5b3V0c1tpXTtcbiAgICBjb25zdCB7ZnVsbFNpemV9ID0gbGF5b3V0LmJveDtcbiAgICBjb25zdCBzdGFjayA9IHN0YWNrc1tsYXlvdXQuc3RhY2tdO1xuICAgIGNvbnN0IGZhY3RvciA9IHN0YWNrICYmIGxheW91dC5zdGFja1dlaWdodCAvIHN0YWNrLndlaWdodDtcbiAgICBpZiAobGF5b3V0Lmhvcml6b250YWwpIHtcbiAgICAgIGxheW91dC53aWR0aCA9IGZhY3RvciA/IGZhY3RvciAqIHZCb3hNYXhXaWR0aCA6IGZ1bGxTaXplICYmIHBhcmFtcy5hdmFpbGFibGVXaWR0aDtcbiAgICAgIGxheW91dC5oZWlnaHQgPSBoQm94TWF4SGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXlvdXQud2lkdGggPSB2Qm94TWF4V2lkdGg7XG4gICAgICBsYXlvdXQuaGVpZ2h0ID0gZmFjdG9yID8gZmFjdG9yICogaEJveE1heEhlaWdodCA6IGZ1bGxTaXplICYmIHBhcmFtcy5hdmFpbGFibGVIZWlnaHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdGFja3M7XG59XG5mdW5jdGlvbiBidWlsZExheW91dEJveGVzKGJveGVzKSB7XG4gIGNvbnN0IGxheW91dEJveGVzID0gd3JhcEJveGVzKGJveGVzKTtcbiAgY29uc3QgZnVsbFNpemUgPSBzb3J0QnlXZWlnaHQobGF5b3V0Qm94ZXMuZmlsdGVyKHdyYXAgPT4gd3JhcC5ib3guZnVsbFNpemUpLCB0cnVlKTtcbiAgY29uc3QgbGVmdCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnbGVmdCcpLCB0cnVlKTtcbiAgY29uc3QgcmlnaHQgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ3JpZ2h0JykpO1xuICBjb25zdCB0b3AgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ3RvcCcpLCB0cnVlKTtcbiAgY29uc3QgYm90dG9tID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdib3R0b20nKSk7XG4gIGNvbnN0IGNlbnRlckhvcml6b250YWwgPSBmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMobGF5b3V0Qm94ZXMsICd4Jyk7XG4gIGNvbnN0IGNlbnRlclZlcnRpY2FsID0gZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzKGxheW91dEJveGVzLCAneScpO1xuICByZXR1cm4ge1xuICAgIGZ1bGxTaXplLFxuICAgIGxlZnRBbmRUb3A6IGxlZnQuY29uY2F0KHRvcCksXG4gICAgcmlnaHRBbmRCb3R0b206IHJpZ2h0LmNvbmNhdChjZW50ZXJWZXJ0aWNhbCkuY29uY2F0KGJvdHRvbSkuY29uY2F0KGNlbnRlckhvcml6b250YWwpLFxuICAgIGNoYXJ0QXJlYTogZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2NoYXJ0QXJlYScpLFxuICAgIHZlcnRpY2FsOiBsZWZ0LmNvbmNhdChyaWdodCkuY29uY2F0KGNlbnRlclZlcnRpY2FsKSxcbiAgICBob3Jpem9udGFsOiB0b3AuY29uY2F0KGJvdHRvbSkuY29uY2F0KGNlbnRlckhvcml6b250YWwpXG4gIH07XG59XG5mdW5jdGlvbiBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsIGEsIGIpIHtcbiAgcmV0dXJuIE1hdGgubWF4KG1heFBhZGRpbmdbYV0sIGNoYXJ0QXJlYVthXSkgKyBNYXRoLm1heChtYXhQYWRkaW5nW2JdLCBjaGFydEFyZWFbYl0pO1xufVxuZnVuY3Rpb24gdXBkYXRlTWF4UGFkZGluZyhtYXhQYWRkaW5nLCBib3hQYWRkaW5nKSB7XG4gIG1heFBhZGRpbmcudG9wID0gTWF0aC5tYXgobWF4UGFkZGluZy50b3AsIGJveFBhZGRpbmcudG9wKTtcbiAgbWF4UGFkZGluZy5sZWZ0ID0gTWF0aC5tYXgobWF4UGFkZGluZy5sZWZ0LCBib3hQYWRkaW5nLmxlZnQpO1xuICBtYXhQYWRkaW5nLmJvdHRvbSA9IE1hdGgubWF4KG1heFBhZGRpbmcuYm90dG9tLCBib3hQYWRkaW5nLmJvdHRvbSk7XG4gIG1heFBhZGRpbmcucmlnaHQgPSBNYXRoLm1heChtYXhQYWRkaW5nLnJpZ2h0LCBib3hQYWRkaW5nLnJpZ2h0KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZURpbXMoY2hhcnRBcmVhLCBwYXJhbXMsIGxheW91dCwgc3RhY2tzKSB7XG4gIGNvbnN0IHtwb3MsIGJveH0gPSBsYXlvdXQ7XG4gIGNvbnN0IG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcbiAgaWYgKCFpc09iamVjdChwb3MpKSB7XG4gICAgaWYgKGxheW91dC5zaXplKSB7XG4gICAgICBjaGFydEFyZWFbcG9zXSAtPSBsYXlvdXQuc2l6ZTtcbiAgICB9XG4gICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXSB8fCB7c2l6ZTogMCwgY291bnQ6IDF9O1xuICAgIHN0YWNrLnNpemUgPSBNYXRoLm1heChzdGFjay5zaXplLCBsYXlvdXQuaG9yaXpvbnRhbCA/IGJveC5oZWlnaHQgOiBib3gud2lkdGgpO1xuICAgIGxheW91dC5zaXplID0gc3RhY2suc2l6ZSAvIHN0YWNrLmNvdW50O1xuICAgIGNoYXJ0QXJlYVtwb3NdICs9IGxheW91dC5zaXplO1xuICB9XG4gIGlmIChib3guZ2V0UGFkZGluZykge1xuICAgIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgYm94LmdldFBhZGRpbmcoKSk7XG4gIH1cbiAgY29uc3QgbmV3V2lkdGggPSBNYXRoLm1heCgwLCBwYXJhbXMub3V0ZXJXaWR0aCAtIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgJ2xlZnQnLCAncmlnaHQnKSk7XG4gIGNvbnN0IG5ld0hlaWdodCA9IE1hdGgubWF4KDAsIHBhcmFtcy5vdXRlckhlaWdodCAtIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgJ3RvcCcsICdib3R0b20nKSk7XG4gIGNvbnN0IHdpZHRoQ2hhbmdlZCA9IG5ld1dpZHRoICE9PSBjaGFydEFyZWEudztcbiAgY29uc3QgaGVpZ2h0Q2hhbmdlZCA9IG5ld0hlaWdodCAhPT0gY2hhcnRBcmVhLmg7XG4gIGNoYXJ0QXJlYS53ID0gbmV3V2lkdGg7XG4gIGNoYXJ0QXJlYS5oID0gbmV3SGVpZ2h0O1xuICByZXR1cm4gbGF5b3V0Lmhvcml6b250YWxcbiAgICA/IHtzYW1lOiB3aWR0aENoYW5nZWQsIG90aGVyOiBoZWlnaHRDaGFuZ2VkfVxuICAgIDoge3NhbWU6IGhlaWdodENoYW5nZWQsIG90aGVyOiB3aWR0aENoYW5nZWR9O1xufVxuZnVuY3Rpb24gaGFuZGxlTWF4UGFkZGluZyhjaGFydEFyZWEpIHtcbiAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICBmdW5jdGlvbiB1cGRhdGVQb3MocG9zKSB7XG4gICAgY29uc3QgY2hhbmdlID0gTWF0aC5tYXgobWF4UGFkZGluZ1twb3NdIC0gY2hhcnRBcmVhW3Bvc10sIDApO1xuICAgIGNoYXJ0QXJlYVtwb3NdICs9IGNoYW5nZTtcbiAgICByZXR1cm4gY2hhbmdlO1xuICB9XG4gIGNoYXJ0QXJlYS55ICs9IHVwZGF0ZVBvcygndG9wJyk7XG4gIGNoYXJ0QXJlYS54ICs9IHVwZGF0ZVBvcygnbGVmdCcpO1xuICB1cGRhdGVQb3MoJ3JpZ2h0Jyk7XG4gIHVwZGF0ZVBvcygnYm90dG9tJyk7XG59XG5mdW5jdGlvbiBnZXRNYXJnaW5zKGhvcml6b250YWwsIGNoYXJ0QXJlYSkge1xuICBjb25zdCBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG4gIGZ1bmN0aW9uIG1hcmdpbkZvclBvc2l0aW9ucyhwb3NpdGlvbnMpIHtcbiAgICBjb25zdCBtYXJnaW4gPSB7bGVmdDogMCwgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwfTtcbiAgICBwb3NpdGlvbnMuZm9yRWFjaCgocG9zKSA9PiB7XG4gICAgICBtYXJnaW5bcG9zXSA9IE1hdGgubWF4KGNoYXJ0QXJlYVtwb3NdLCBtYXhQYWRkaW5nW3Bvc10pO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXJnaW47XG4gIH1cbiAgcmV0dXJuIGhvcml6b250YWxcbiAgICA/IG1hcmdpbkZvclBvc2l0aW9ucyhbJ2xlZnQnLCAncmlnaHQnXSlcbiAgICA6IG1hcmdpbkZvclBvc2l0aW9ucyhbJ3RvcCcsICdib3R0b20nXSk7XG59XG5mdW5jdGlvbiBmaXRCb3hlcyhib3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykge1xuICBjb25zdCByZWZpdEJveGVzID0gW107XG4gIGxldCBpLCBpbGVuLCBsYXlvdXQsIGJveCwgcmVmaXQsIGNoYW5nZWQ7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBib3hlcy5sZW5ndGgsIHJlZml0ID0gMDsgaSA8IGlsZW47ICsraSkge1xuICAgIGxheW91dCA9IGJveGVzW2ldO1xuICAgIGJveCA9IGxheW91dC5ib3g7XG4gICAgYm94LnVwZGF0ZShcbiAgICAgIGxheW91dC53aWR0aCB8fCBjaGFydEFyZWEudyxcbiAgICAgIGxheW91dC5oZWlnaHQgfHwgY2hhcnRBcmVhLmgsXG4gICAgICBnZXRNYXJnaW5zKGxheW91dC5ob3Jpem9udGFsLCBjaGFydEFyZWEpXG4gICAgKTtcbiAgICBjb25zdCB7c2FtZSwgb3RoZXJ9ID0gdXBkYXRlRGltcyhjaGFydEFyZWEsIHBhcmFtcywgbGF5b3V0LCBzdGFja3MpO1xuICAgIHJlZml0IHw9IHNhbWUgJiYgcmVmaXRCb3hlcy5sZW5ndGg7XG4gICAgY2hhbmdlZCA9IGNoYW5nZWQgfHwgb3RoZXI7XG4gICAgaWYgKCFib3guZnVsbFNpemUpIHtcbiAgICAgIHJlZml0Qm94ZXMucHVzaChsYXlvdXQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVmaXQgJiYgZml0Qm94ZXMocmVmaXRCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykgfHwgY2hhbmdlZDtcbn1cbmZ1bmN0aW9uIHNldEJveERpbXMoYm94LCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpIHtcbiAgYm94LnRvcCA9IHRvcDtcbiAgYm94LmxlZnQgPSBsZWZ0O1xuICBib3gucmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG4gIGJveC5ib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG4gIGJveC53aWR0aCA9IHdpZHRoO1xuICBib3guaGVpZ2h0ID0gaGVpZ2h0O1xufVxuZnVuY3Rpb24gcGxhY2VCb3hlcyhib3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykge1xuICBjb25zdCB1c2VyUGFkZGluZyA9IHBhcmFtcy5wYWRkaW5nO1xuICBsZXQge3gsIHl9ID0gY2hhcnRBcmVhO1xuICBmb3IgKGNvbnN0IGxheW91dCBvZiBib3hlcykge1xuICAgIGNvbnN0IGJveCA9IGxheW91dC5ib3g7XG4gICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXSB8fCB7Y291bnQ6IDEsIHBsYWNlZDogMCwgd2VpZ2h0OiAxfTtcbiAgICBjb25zdCB3ZWlnaHQgPSAobGF5b3V0LnN0YWNrV2VpZ2h0IC8gc3RhY2sud2VpZ2h0KSB8fCAxO1xuICAgIGlmIChsYXlvdXQuaG9yaXpvbnRhbCkge1xuICAgICAgY29uc3Qgd2lkdGggPSBjaGFydEFyZWEudyAqIHdlaWdodDtcbiAgICAgIGNvbnN0IGhlaWdodCA9IHN0YWNrLnNpemUgfHwgYm94LmhlaWdodDtcbiAgICAgIGlmIChkZWZpbmVkKHN0YWNrLnN0YXJ0KSkge1xuICAgICAgICB5ID0gc3RhY2suc3RhcnQ7XG4gICAgICB9XG4gICAgICBpZiAoYm94LmZ1bGxTaXplKSB7XG4gICAgICAgIHNldEJveERpbXMoYm94LCB1c2VyUGFkZGluZy5sZWZ0LCB5LCBwYXJhbXMub3V0ZXJXaWR0aCAtIHVzZXJQYWRkaW5nLnJpZ2h0IC0gdXNlclBhZGRpbmcubGVmdCwgaGVpZ2h0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEJveERpbXMoYm94LCBjaGFydEFyZWEubGVmdCArIHN0YWNrLnBsYWNlZCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICB9XG4gICAgICBzdGFjay5zdGFydCA9IHk7XG4gICAgICBzdGFjay5wbGFjZWQgKz0gd2lkdGg7XG4gICAgICB5ID0gYm94LmJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gY2hhcnRBcmVhLmggKiB3ZWlnaHQ7XG4gICAgICBjb25zdCB3aWR0aCA9IHN0YWNrLnNpemUgfHwgYm94LndpZHRoO1xuICAgICAgaWYgKGRlZmluZWQoc3RhY2suc3RhcnQpKSB7XG4gICAgICAgIHggPSBzdGFjay5zdGFydDtcbiAgICAgIH1cbiAgICAgIGlmIChib3guZnVsbFNpemUpIHtcbiAgICAgICAgc2V0Qm94RGltcyhib3gsIHgsIHVzZXJQYWRkaW5nLnRvcCwgd2lkdGgsIHBhcmFtcy5vdXRlckhlaWdodCAtIHVzZXJQYWRkaW5nLmJvdHRvbSAtIHVzZXJQYWRkaW5nLnRvcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRCb3hEaW1zKGJveCwgeCwgY2hhcnRBcmVhLnRvcCArIHN0YWNrLnBsYWNlZCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICB9XG4gICAgICBzdGFjay5zdGFydCA9IHg7XG4gICAgICBzdGFjay5wbGFjZWQgKz0gaGVpZ2h0O1xuICAgICAgeCA9IGJveC5yaWdodDtcbiAgICB9XG4gIH1cbiAgY2hhcnRBcmVhLnggPSB4O1xuICBjaGFydEFyZWEueSA9IHk7XG59XG5kZWZhdWx0cy5zZXQoJ2xheW91dCcsIHtcbiAgYXV0b1BhZGRpbmc6IHRydWUsXG4gIHBhZGRpbmc6IHtcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDBcbiAgfVxufSk7XG52YXIgbGF5b3V0cyA9IHtcbiAgYWRkQm94KGNoYXJ0LCBpdGVtKSB7XG4gICAgaWYgKCFjaGFydC5ib3hlcykge1xuICAgICAgY2hhcnQuYm94ZXMgPSBbXTtcbiAgICB9XG4gICAgaXRlbS5mdWxsU2l6ZSA9IGl0ZW0uZnVsbFNpemUgfHwgZmFsc2U7XG4gICAgaXRlbS5wb3NpdGlvbiA9IGl0ZW0ucG9zaXRpb24gfHwgJ3RvcCc7XG4gICAgaXRlbS53ZWlnaHQgPSBpdGVtLndlaWdodCB8fCAwO1xuICAgIGl0ZW0uX2xheWVycyA9IGl0ZW0uX2xheWVycyB8fCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbe1xuICAgICAgICB6OiAwLFxuICAgICAgICBkcmF3KGNoYXJ0QXJlYSkge1xuICAgICAgICAgIGl0ZW0uZHJhdyhjaGFydEFyZWEpO1xuICAgICAgICB9XG4gICAgICB9XTtcbiAgICB9O1xuICAgIGNoYXJ0LmJveGVzLnB1c2goaXRlbSk7XG4gIH0sXG4gIHJlbW92ZUJveChjaGFydCwgbGF5b3V0SXRlbSkge1xuICAgIGNvbnN0IGluZGV4ID0gY2hhcnQuYm94ZXMgPyBjaGFydC5ib3hlcy5pbmRleE9mKGxheW91dEl0ZW0pIDogLTE7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgY2hhcnQuYm94ZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH0sXG4gIGNvbmZpZ3VyZShjaGFydCwgaXRlbSwgb3B0aW9ucykge1xuICAgIGl0ZW0uZnVsbFNpemUgPSBvcHRpb25zLmZ1bGxTaXplO1xuICAgIGl0ZW0ucG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uO1xuICAgIGl0ZW0ud2VpZ2h0ID0gb3B0aW9ucy53ZWlnaHQ7XG4gIH0sXG4gIHVwZGF0ZShjaGFydCwgd2lkdGgsIGhlaWdodCwgbWluUGFkZGluZykge1xuICAgIGlmICghY2hhcnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhjaGFydC5vcHRpb25zLmxheW91dC5wYWRkaW5nKTtcbiAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IE1hdGgubWF4KHdpZHRoIC0gcGFkZGluZy53aWR0aCwgMCk7XG4gICAgY29uc3QgYXZhaWxhYmxlSGVpZ2h0ID0gTWF0aC5tYXgoaGVpZ2h0IC0gcGFkZGluZy5oZWlnaHQsIDApO1xuICAgIGNvbnN0IGJveGVzID0gYnVpbGRMYXlvdXRCb3hlcyhjaGFydC5ib3hlcyk7XG4gICAgY29uc3QgdmVydGljYWxCb3hlcyA9IGJveGVzLnZlcnRpY2FsO1xuICAgIGNvbnN0IGhvcml6b250YWxCb3hlcyA9IGJveGVzLmhvcml6b250YWw7XG4gICAgZWFjaChjaGFydC5ib3hlcywgYm94ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYm94LmJlZm9yZUxheW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBib3guYmVmb3JlTGF5b3V0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgdmlzaWJsZVZlcnRpY2FsQm94Q291bnQgPSB2ZXJ0aWNhbEJveGVzLnJlZHVjZSgodG90YWwsIHdyYXApID0+XG4gICAgICB3cmFwLmJveC5vcHRpb25zICYmIHdyYXAuYm94Lm9wdGlvbnMuZGlzcGxheSA9PT0gZmFsc2UgPyB0b3RhbCA6IHRvdGFsICsgMSwgMCkgfHwgMTtcbiAgICBjb25zdCBwYXJhbXMgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgIG91dGVyV2lkdGg6IHdpZHRoLFxuICAgICAgb3V0ZXJIZWlnaHQ6IGhlaWdodCxcbiAgICAgIHBhZGRpbmcsXG4gICAgICBhdmFpbGFibGVXaWR0aCxcbiAgICAgIGF2YWlsYWJsZUhlaWdodCxcbiAgICAgIHZCb3hNYXhXaWR0aDogYXZhaWxhYmxlV2lkdGggLyAyIC8gdmlzaWJsZVZlcnRpY2FsQm94Q291bnQsXG4gICAgICBoQm94TWF4SGVpZ2h0OiBhdmFpbGFibGVIZWlnaHQgLyAyXG4gICAgfSk7XG4gICAgY29uc3QgbWF4UGFkZGluZyA9IE9iamVjdC5hc3NpZ24oe30sIHBhZGRpbmcpO1xuICAgIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgdG9QYWRkaW5nKG1pblBhZGRpbmcpKTtcbiAgICBjb25zdCBjaGFydEFyZWEgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIG1heFBhZGRpbmcsXG4gICAgICB3OiBhdmFpbGFibGVXaWR0aCxcbiAgICAgIGg6IGF2YWlsYWJsZUhlaWdodCxcbiAgICAgIHg6IHBhZGRpbmcubGVmdCxcbiAgICAgIHk6IHBhZGRpbmcudG9wXG4gICAgfSwgcGFkZGluZyk7XG4gICAgY29uc3Qgc3RhY2tzID0gc2V0TGF5b3V0RGltcyh2ZXJ0aWNhbEJveGVzLmNvbmNhdChob3Jpem9udGFsQm94ZXMpLCBwYXJhbXMpO1xuICAgIGZpdEJveGVzKGJveGVzLmZ1bGxTaXplLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICBmaXRCb3hlcyh2ZXJ0aWNhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICBpZiAoZml0Qm94ZXMoaG9yaXpvbnRhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSkge1xuICAgICAgZml0Qm94ZXModmVydGljYWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgfVxuICAgIGhhbmRsZU1heFBhZGRpbmcoY2hhcnRBcmVhKTtcbiAgICBwbGFjZUJveGVzKGJveGVzLmxlZnRBbmRUb3AsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgIGNoYXJ0QXJlYS54ICs9IGNoYXJ0QXJlYS53O1xuICAgIGNoYXJ0QXJlYS55ICs9IGNoYXJ0QXJlYS5oO1xuICAgIHBsYWNlQm94ZXMoYm94ZXMucmlnaHRBbmRCb3R0b20sIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgIGNoYXJ0LmNoYXJ0QXJlYSA9IHtcbiAgICAgIGxlZnQ6IGNoYXJ0QXJlYS5sZWZ0LFxuICAgICAgdG9wOiBjaGFydEFyZWEudG9wLFxuICAgICAgcmlnaHQ6IGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLncsXG4gICAgICBib3R0b206IGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuaCxcbiAgICAgIGhlaWdodDogY2hhcnRBcmVhLmgsXG4gICAgICB3aWR0aDogY2hhcnRBcmVhLncsXG4gICAgfTtcbiAgICBlYWNoKGJveGVzLmNoYXJ0QXJlYSwgKGxheW91dCkgPT4ge1xuICAgICAgY29uc3QgYm94ID0gbGF5b3V0LmJveDtcbiAgICAgIE9iamVjdC5hc3NpZ24oYm94LCBjaGFydC5jaGFydEFyZWEpO1xuICAgICAgYm94LnVwZGF0ZShjaGFydEFyZWEudywgY2hhcnRBcmVhLmgsIHtsZWZ0OiAwLCB0b3A6IDAsIHJpZ2h0OiAwLCBib3R0b206IDB9KTtcbiAgICB9KTtcbiAgfVxufTtcblxuY2xhc3MgQmFzZVBsYXRmb3JtIHtcbiAgYWNxdWlyZUNvbnRleHQoY2FudmFzLCBhc3BlY3RSYXRpbykge31cbiAgcmVsZWFzZUNvbnRleHQoY29udGV4dCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBhZGRFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge31cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHt9XG4gIGdldERldmljZVBpeGVsUmF0aW8oKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgZ2V0TWF4aW11bVNpemUoZWxlbWVudCwgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgICB3aWR0aCA9IE1hdGgubWF4KDAsIHdpZHRoIHx8IGVsZW1lbnQud2lkdGgpO1xuICAgIGhlaWdodCA9IGhlaWdodCB8fCBlbGVtZW50LmhlaWdodDtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQ6IE1hdGgubWF4KDAsIGFzcGVjdFJhdGlvID8gTWF0aC5mbG9vcih3aWR0aCAvIGFzcGVjdFJhdGlvKSA6IGhlaWdodClcbiAgICB9O1xuICB9XG4gIGlzQXR0YWNoZWQoY2FudmFzKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdXBkYXRlQ29uZmlnKGNvbmZpZykge1xuICB9XG59XG5cbmNsYXNzIEJhc2ljUGxhdGZvcm0gZXh0ZW5kcyBCYXNlUGxhdGZvcm0ge1xuICBhY3F1aXJlQ29udGV4dChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0gJiYgaXRlbS5nZXRDb250ZXh0ICYmIGl0ZW0uZ2V0Q29udGV4dCgnMmQnKSB8fCBudWxsO1xuICB9XG4gIHVwZGF0ZUNvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcub3B0aW9ucy5hbmltYXRpb24gPSBmYWxzZTtcbiAgfVxufVxuXG5jb25zdCBFWFBBTkRPX0tFWSA9ICckY2hhcnRqcyc7XG5jb25zdCBFVkVOVF9UWVBFUyA9IHtcbiAgdG91Y2hzdGFydDogJ21vdXNlZG93bicsXG4gIHRvdWNobW92ZTogJ21vdXNlbW92ZScsXG4gIHRvdWNoZW5kOiAnbW91c2V1cCcsXG4gIHBvaW50ZXJlbnRlcjogJ21vdXNlZW50ZXInLFxuICBwb2ludGVyZG93bjogJ21vdXNlZG93bicsXG4gIHBvaW50ZXJtb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgcG9pbnRlcnVwOiAnbW91c2V1cCcsXG4gIHBvaW50ZXJsZWF2ZTogJ21vdXNlb3V0JyxcbiAgcG9pbnRlcm91dDogJ21vdXNlb3V0J1xufTtcbmNvbnN0IGlzTnVsbE9yRW1wdHkgPSB2YWx1ZSA9PiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gJyc7XG5mdW5jdGlvbiBpbml0Q2FudmFzKGNhbnZhcywgYXNwZWN0UmF0aW8pIHtcbiAgY29uc3Qgc3R5bGUgPSBjYW52YXMuc3R5bGU7XG4gIGNvbnN0IHJlbmRlckhlaWdodCA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICBjb25zdCByZW5kZXJXaWR0aCA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyk7XG4gIGNhbnZhc1tFWFBBTkRPX0tFWV0gPSB7XG4gICAgaW5pdGlhbDoge1xuICAgICAgaGVpZ2h0OiByZW5kZXJIZWlnaHQsXG4gICAgICB3aWR0aDogcmVuZGVyV2lkdGgsXG4gICAgICBzdHlsZToge1xuICAgICAgICBkaXNwbGF5OiBzdHlsZS5kaXNwbGF5LFxuICAgICAgICBoZWlnaHQ6IHN0eWxlLmhlaWdodCxcbiAgICAgICAgd2lkdGg6IHN0eWxlLndpZHRoXG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzdHlsZS5kaXNwbGF5ID0gc3R5bGUuZGlzcGxheSB8fCAnYmxvY2snO1xuICBzdHlsZS5ib3hTaXppbmcgPSBzdHlsZS5ib3hTaXppbmcgfHwgJ2JvcmRlci1ib3gnO1xuICBpZiAoaXNOdWxsT3JFbXB0eShyZW5kZXJXaWR0aCkpIHtcbiAgICBjb25zdCBkaXNwbGF5V2lkdGggPSByZWFkVXNlZFNpemUoY2FudmFzLCAnd2lkdGgnKTtcbiAgICBpZiAoZGlzcGxheVdpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhbnZhcy53aWR0aCA9IGRpc3BsYXlXaWR0aDtcbiAgICB9XG4gIH1cbiAgaWYgKGlzTnVsbE9yRW1wdHkocmVuZGVySGVpZ2h0KSkge1xuICAgIGlmIChjYW52YXMuc3R5bGUuaGVpZ2h0ID09PSAnJykge1xuICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhcy53aWR0aCAvIChhc3BlY3RSYXRpbyB8fCAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGlzcGxheUhlaWdodCA9IHJlYWRVc2VkU2l6ZShjYW52YXMsICdoZWlnaHQnKTtcbiAgICAgIGlmIChkaXNwbGF5SGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGRpc3BsYXlIZWlnaHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjYW52YXM7XG59XG5jb25zdCBldmVudExpc3RlbmVyT3B0aW9ucyA9IHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPyB7cGFzc2l2ZTogdHJ1ZX0gOiBmYWxzZTtcbmZ1bmN0aW9uIGFkZExpc3RlbmVyKG5vZGUsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoYXJ0LmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XG59XG5mdW5jdGlvbiBmcm9tTmF0aXZlRXZlbnQoZXZlbnQsIGNoYXJ0KSB7XG4gIGNvbnN0IHR5cGUgPSBFVkVOVF9UWVBFU1tldmVudC50eXBlXSB8fCBldmVudC50eXBlO1xuICBjb25zdCB7eCwgeX0gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGV2ZW50LCBjaGFydCk7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICBjaGFydCxcbiAgICBuYXRpdmU6IGV2ZW50LFxuICAgIHg6IHggIT09IHVuZGVmaW5lZCA/IHggOiBudWxsLFxuICAgIHk6IHkgIT09IHVuZGVmaW5lZCA/IHkgOiBudWxsLFxuICB9O1xufVxuZnVuY3Rpb24gbm9kZUxpc3RDb250YWlucyhub2RlTGlzdCwgY2FudmFzKSB7XG4gIGZvciAoY29uc3Qgbm9kZSBvZiBub2RlTGlzdCkge1xuICAgIGlmIChub2RlID09PSBjYW52YXMgfHwgbm9kZS5jb250YWlucyhjYW52YXMpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUF0dGFjaE9ic2VydmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgbGV0IHRyaWdnZXIgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyIHx8IG5vZGVMaXN0Q29udGFpbnMoZW50cnkuYWRkZWROb2RlcywgY2FudmFzKTtcbiAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyICYmICFub2RlTGlzdENvbnRhaW5zKGVudHJ5LnJlbW92ZWROb2RlcywgY2FudmFzKTtcbiAgICB9XG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuICB9KTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZX0pO1xuICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiBjcmVhdGVEZXRhY2hPYnNlcnZlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgIGxldCB0cmlnZ2VyID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICB0cmlnZ2VyID0gdHJpZ2dlciB8fCBub2RlTGlzdENvbnRhaW5zKGVudHJ5LnJlbW92ZWROb2RlcywgY2FudmFzKTtcbiAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyICYmICFub2RlTGlzdENvbnRhaW5zKGVudHJ5LmFkZGVkTm9kZXMsIGNhbnZhcyk7XG4gICAgfVxuICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cbiAgfSk7XG4gIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHtjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWV9KTtcbiAgcmV0dXJuIG9ic2VydmVyO1xufVxuY29uc3QgZHJwTGlzdGVuaW5nQ2hhcnRzID0gbmV3IE1hcCgpO1xubGV0IG9sZERldmljZVBpeGVsUmF0aW8gPSAwO1xuZnVuY3Rpb24gb25XaW5kb3dSZXNpemUoKSB7XG4gIGNvbnN0IGRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICBpZiAoZHByID09PSBvbGREZXZpY2VQaXhlbFJhdGlvKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIG9sZERldmljZVBpeGVsUmF0aW8gPSBkcHI7XG4gIGRycExpc3RlbmluZ0NoYXJ0cy5mb3JFYWNoKChyZXNpemUsIGNoYXJ0KSA9PiB7XG4gICAgaWYgKGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvICE9PSBkcHIpIHtcbiAgICAgIHJlc2l6ZSgpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCwgcmVzaXplKSB7XG4gIGlmICghZHJwTGlzdGVuaW5nQ2hhcnRzLnNpemUpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUpO1xuICB9XG4gIGRycExpc3RlbmluZ0NoYXJ0cy5zZXQoY2hhcnQsIHJlc2l6ZSk7XG59XG5mdW5jdGlvbiB1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0KSB7XG4gIGRycExpc3RlbmluZ0NoYXJ0cy5kZWxldGUoY2hhcnQpO1xuICBpZiAoIWRycExpc3RlbmluZ0NoYXJ0cy5zaXplKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUmVzaXplT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgY29uc3QgY29udGFpbmVyID0gY2FudmFzICYmIF9nZXRQYXJlbnROb2RlKGNhbnZhcyk7XG4gIGlmICghY29udGFpbmVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHJlc2l6ZSA9IHRocm90dGxlZCgod2lkdGgsIGhlaWdodCkgPT4ge1xuICAgIGNvbnN0IHcgPSBjb250YWluZXIuY2xpZW50V2lkdGg7XG4gICAgbGlzdGVuZXIod2lkdGgsIGhlaWdodCk7XG4gICAgaWYgKHcgPCBjb250YWluZXIuY2xpZW50V2lkdGgpIHtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuICB9LCB3aW5kb3cpO1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbMF07XG4gICAgY29uc3Qgd2lkdGggPSBlbnRyeS5jb250ZW50UmVjdC53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSBlbnRyeS5jb250ZW50UmVjdC5oZWlnaHQ7XG4gICAgaWYgKHdpZHRoID09PSAwICYmIGhlaWdodCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXNpemUod2lkdGgsIGhlaWdodCk7XG4gIH0pO1xuICBvYnNlcnZlci5vYnNlcnZlKGNvbnRhaW5lcik7XG4gIGxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0LCByZXNpemUpO1xuICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiByZWxlYXNlT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIG9ic2VydmVyKSB7XG4gIGlmIChvYnNlcnZlcikge1xuICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgfVxuICBpZiAodHlwZSA9PT0gJ3Jlc2l6ZScpIHtcbiAgICB1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0KTtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUHJveHlBbmRMaXN0ZW4oY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgY29uc3QgcHJveHkgPSB0aHJvdHRsZWQoKGV2ZW50KSA9PiB7XG4gICAgaWYgKGNoYXJ0LmN0eCAhPT0gbnVsbCkge1xuICAgICAgbGlzdGVuZXIoZnJvbU5hdGl2ZUV2ZW50KGV2ZW50LCBjaGFydCkpO1xuICAgIH1cbiAgfSwgY2hhcnQsIChhcmdzKSA9PiB7XG4gICAgY29uc3QgZXZlbnQgPSBhcmdzWzBdO1xuICAgIHJldHVybiBbZXZlbnQsIGV2ZW50Lm9mZnNldFgsIGV2ZW50Lm9mZnNldFldO1xuICB9KTtcbiAgYWRkTGlzdGVuZXIoY2FudmFzLCB0eXBlLCBwcm94eSk7XG4gIHJldHVybiBwcm94eTtcbn1cbmNsYXNzIERvbVBsYXRmb3JtIGV4dGVuZHMgQmFzZVBsYXRmb3JtIHtcbiAgYWNxdWlyZUNvbnRleHQoY2FudmFzLCBhc3BlY3RSYXRpbykge1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMgJiYgY2FudmFzLmdldENvbnRleHQgJiYgY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5jYW52YXMgPT09IGNhbnZhcykge1xuICAgICAgaW5pdENhbnZhcyhjYW52YXMsIGFzcGVjdFJhdGlvKTtcbiAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZWxlYXNlQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29uc3QgY2FudmFzID0gY29udGV4dC5jYW52YXM7XG4gICAgaWYgKCFjYW52YXNbRVhQQU5ET19LRVldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGluaXRpYWwgPSBjYW52YXNbRVhQQU5ET19LRVldLmluaXRpYWw7XG4gICAgWydoZWlnaHQnLCAnd2lkdGgnXS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGluaXRpYWxbcHJvcF07XG4gICAgICBpZiAoaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcbiAgICAgICAgY2FudmFzLnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHN0eWxlID0gaW5pdGlhbC5zdHlsZSB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBjYW52YXMuc3R5bGVba2V5XSA9IHN0eWxlW2tleV07XG4gICAgfSk7XG4gICAgY2FudmFzLndpZHRoID0gY2FudmFzLndpZHRoO1xuICAgIGRlbGV0ZSBjYW52YXNbRVhQQU5ET19LRVldO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGFkZEV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlKTtcbiAgICBjb25zdCBwcm94aWVzID0gY2hhcnQuJHByb3hpZXMgfHwgKGNoYXJ0LiRwcm94aWVzID0ge30pO1xuICAgIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICAgYXR0YWNoOiBjcmVhdGVBdHRhY2hPYnNlcnZlcixcbiAgICAgIGRldGFjaDogY3JlYXRlRGV0YWNoT2JzZXJ2ZXIsXG4gICAgICByZXNpemU6IGNyZWF0ZVJlc2l6ZU9ic2VydmVyXG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbdHlwZV0gfHwgY3JlYXRlUHJveHlBbmRMaXN0ZW47XG4gICAgcHJveGllc1t0eXBlXSA9IGhhbmRsZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuICByZW1vdmVFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlKSB7XG4gICAgY29uc3QgcHJveGllcyA9IGNoYXJ0LiRwcm94aWVzIHx8IChjaGFydC4kcHJveGllcyA9IHt9KTtcbiAgICBjb25zdCBwcm94eSA9IHByb3hpZXNbdHlwZV07XG4gICAgaWYgKCFwcm94eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgIGF0dGFjaDogcmVsZWFzZU9ic2VydmVyLFxuICAgICAgZGV0YWNoOiByZWxlYXNlT2JzZXJ2ZXIsXG4gICAgICByZXNpemU6IHJlbGVhc2VPYnNlcnZlclxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW3R5cGVdIHx8IHJlbW92ZUxpc3RlbmVyO1xuICAgIGhhbmRsZXIoY2hhcnQsIHR5cGUsIHByb3h5KTtcbiAgICBwcm94aWVzW3R5cGVdID0gdW5kZWZpbmVkO1xuICB9XG4gIGdldERldmljZVBpeGVsUmF0aW8oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICB9XG4gIGdldE1heGltdW1TaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgICByZXR1cm4gZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbyk7XG4gIH1cbiAgaXNBdHRhY2hlZChjYW52YXMpIHtcbiAgICBjb25zdCBjb250YWluZXIgPSBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICAgIHJldHVybiAhIShjb250YWluZXIgJiYgY29udGFpbmVyLmlzQ29ubmVjdGVkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGV0ZWN0UGxhdGZvcm0oY2FudmFzKSB7XG4gIGlmICghX2lzRG9tU3VwcG9ydGVkKCkgfHwgKHR5cGVvZiBPZmZzY3JlZW5DYW52YXMgIT09ICd1bmRlZmluZWQnICYmIGNhbnZhcyBpbnN0YW5jZW9mIE9mZnNjcmVlbkNhbnZhcykpIHtcbiAgICByZXR1cm4gQmFzaWNQbGF0Zm9ybTtcbiAgfVxuICByZXR1cm4gRG9tUGxhdGZvcm07XG59XG5cbmNsYXNzIFBsdWdpblNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9pbml0ID0gW107XG4gIH1cbiAgbm90aWZ5KGNoYXJ0LCBob29rLCBhcmdzLCBmaWx0ZXIpIHtcbiAgICBpZiAoaG9vayA9PT0gJ2JlZm9yZUluaXQnKSB7XG4gICAgICB0aGlzLl9pbml0ID0gdGhpcy5fY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHRydWUpO1xuICAgICAgdGhpcy5fbm90aWZ5KHRoaXMuX2luaXQsIGNoYXJ0LCAnaW5zdGFsbCcpO1xuICAgIH1cbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IGZpbHRlciA/IHRoaXMuX2Rlc2NyaXB0b3JzKGNoYXJ0KS5maWx0ZXIoZmlsdGVyKSA6IHRoaXMuX2Rlc2NyaXB0b3JzKGNoYXJ0KTtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCBob29rLCBhcmdzKTtcbiAgICBpZiAoaG9vayA9PT0gJ2FmdGVyRGVzdHJveScpIHtcbiAgICAgIHRoaXMuX25vdGlmeShkZXNjcmlwdG9ycywgY2hhcnQsICdzdG9wJyk7XG4gICAgICB0aGlzLl9ub3RpZnkodGhpcy5faW5pdCwgY2hhcnQsICd1bmluc3RhbGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBfbm90aWZ5KGRlc2NyaXB0b3JzLCBjaGFydCwgaG9vaywgYXJncykge1xuICAgIGFyZ3MgPSBhcmdzIHx8IHt9O1xuICAgIGZvciAoY29uc3QgZGVzY3JpcHRvciBvZiBkZXNjcmlwdG9ycykge1xuICAgICAgY29uc3QgcGx1Z2luID0gZGVzY3JpcHRvci5wbHVnaW47XG4gICAgICBjb25zdCBtZXRob2QgPSBwbHVnaW5baG9va107XG4gICAgICBjb25zdCBwYXJhbXMgPSBbY2hhcnQsIGFyZ3MsIGRlc2NyaXB0b3Iub3B0aW9uc107XG4gICAgICBpZiAoY2FsbGJhY2sobWV0aG9kLCBwYXJhbXMsIHBsdWdpbikgPT09IGZhbHNlICYmIGFyZ3MuY2FuY2VsYWJsZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGludmFsaWRhdGUoKSB7XG4gICAgaWYgKCFpc051bGxPclVuZGVmKHRoaXMuX2NhY2hlKSkge1xuICAgICAgdGhpcy5fb2xkQ2FjaGUgPSB0aGlzLl9jYWNoZTtcbiAgICAgIHRoaXMuX2NhY2hlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBfZGVzY3JpcHRvcnMoY2hhcnQpIHtcbiAgICBpZiAodGhpcy5fY2FjaGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jYWNoZTtcbiAgICB9XG4gICAgY29uc3QgZGVzY3JpcHRvcnMgPSB0aGlzLl9jYWNoZSA9IHRoaXMuX2NyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0KTtcbiAgICB0aGlzLl9ub3RpZnlTdGF0ZUNoYW5nZXMoY2hhcnQpO1xuICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgfVxuICBfY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIGFsbCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IGNoYXJ0ICYmIGNoYXJ0LmNvbmZpZztcbiAgICBjb25zdCBvcHRpb25zID0gdmFsdWVPckRlZmF1bHQoY29uZmlnLm9wdGlvbnMgJiYgY29uZmlnLm9wdGlvbnMucGx1Z2lucywge30pO1xuICAgIGNvbnN0IHBsdWdpbnMgPSBhbGxQbHVnaW5zKGNvbmZpZyk7XG4gICAgcmV0dXJuIG9wdGlvbnMgPT09IGZhbHNlICYmICFhbGwgPyBbXSA6IGNyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCBwbHVnaW5zLCBvcHRpb25zLCBhbGwpO1xuICB9XG4gIF9ub3RpZnlTdGF0ZUNoYW5nZXMoY2hhcnQpIHtcbiAgICBjb25zdCBwcmV2aW91c0Rlc2NyaXB0b3JzID0gdGhpcy5fb2xkQ2FjaGUgfHwgW107XG4gICAgY29uc3QgZGVzY3JpcHRvcnMgPSB0aGlzLl9jYWNoZTtcbiAgICBjb25zdCBkaWZmID0gKGEsIGIpID0+IGEuZmlsdGVyKHggPT4gIWIuc29tZSh5ID0+IHgucGx1Z2luLmlkID09PSB5LnBsdWdpbi5pZCkpO1xuICAgIHRoaXMuX25vdGlmeShkaWZmKHByZXZpb3VzRGVzY3JpcHRvcnMsIGRlc2NyaXB0b3JzKSwgY2hhcnQsICdzdG9wJyk7XG4gICAgdGhpcy5fbm90aWZ5KGRpZmYoZGVzY3JpcHRvcnMsIHByZXZpb3VzRGVzY3JpcHRvcnMpLCBjaGFydCwgJ3N0YXJ0Jyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFsbFBsdWdpbnMoY29uZmlnKSB7XG4gIGNvbnN0IGxvY2FsSWRzID0ge307XG4gIGNvbnN0IHBsdWdpbnMgPSBbXTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHJlZ2lzdHJ5LnBsdWdpbnMuaXRlbXMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBwbHVnaW5zLnB1c2gocmVnaXN0cnkuZ2V0UGx1Z2luKGtleXNbaV0pKTtcbiAgfVxuICBjb25zdCBsb2NhbCA9IGNvbmZpZy5wbHVnaW5zIHx8IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY2FsLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcGx1Z2luID0gbG9jYWxbaV07XG4gICAgaWYgKHBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID09PSAtMSkge1xuICAgICAgcGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgICBsb2NhbElkc1twbHVnaW4uaWRdID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtwbHVnaW5zLCBsb2NhbElkc307XG59XG5mdW5jdGlvbiBnZXRPcHRzKG9wdGlvbnMsIGFsbCkge1xuICBpZiAoIWFsbCAmJiBvcHRpb25zID09PSBmYWxzZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChvcHRpb25zID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufVxuZnVuY3Rpb24gY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHtwbHVnaW5zLCBsb2NhbElkc30sIG9wdGlvbnMsIGFsbCkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgY29uc3QgY29udGV4dCA9IGNoYXJ0LmdldENvbnRleHQoKTtcbiAgZm9yIChjb25zdCBwbHVnaW4gb2YgcGx1Z2lucykge1xuICAgIGNvbnN0IGlkID0gcGx1Z2luLmlkO1xuICAgIGNvbnN0IG9wdHMgPSBnZXRPcHRzKG9wdGlvbnNbaWRdLCBhbGwpO1xuICAgIGlmIChvcHRzID09PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmVzdWx0LnB1c2goe1xuICAgICAgcGx1Z2luLFxuICAgICAgb3B0aW9uczogcGx1Z2luT3B0cyhjaGFydC5jb25maWcsIHtwbHVnaW4sIGxvY2FsOiBsb2NhbElkc1tpZF19LCBvcHRzLCBjb250ZXh0KVxuICAgIH0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBwbHVnaW5PcHRzKGNvbmZpZywge3BsdWdpbiwgbG9jYWx9LCBvcHRzLCBjb250ZXh0KSB7XG4gIGNvbnN0IGtleXMgPSBjb25maWcucGx1Z2luU2NvcGVLZXlzKHBsdWdpbik7XG4gIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXMob3B0cywga2V5cyk7XG4gIGlmIChsb2NhbCAmJiBwbHVnaW4uZGVmYXVsdHMpIHtcbiAgICBzY29wZXMucHVzaChwbHVnaW4uZGVmYXVsdHMpO1xuICB9XG4gIHJldHVybiBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBjb250ZXh0LCBbJyddLCB7XG4gICAgc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgaW5kZXhhYmxlOiBmYWxzZSxcbiAgICBhbGxLZXlzOiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRJbmRleEF4aXModHlwZSwgb3B0aW9ucykge1xuICBjb25zdCBkYXRhc2V0RGVmYXVsdHMgPSBkZWZhdWx0cy5kYXRhc2V0c1t0eXBlXSB8fCB7fTtcbiAgY29uc3QgZGF0YXNldE9wdGlvbnMgPSAob3B0aW9ucy5kYXRhc2V0cyB8fCB7fSlbdHlwZV0gfHwge307XG4gIHJldHVybiBkYXRhc2V0T3B0aW9ucy5pbmRleEF4aXMgfHwgb3B0aW9ucy5pbmRleEF4aXMgfHwgZGF0YXNldERlZmF1bHRzLmluZGV4QXhpcyB8fCAneCc7XG59XG5mdW5jdGlvbiBnZXRBeGlzRnJvbURlZmF1bHRTY2FsZUlEKGlkLCBpbmRleEF4aXMpIHtcbiAgbGV0IGF4aXMgPSBpZDtcbiAgaWYgKGlkID09PSAnX2luZGV4XycpIHtcbiAgICBheGlzID0gaW5kZXhBeGlzO1xuICB9IGVsc2UgaWYgKGlkID09PSAnX3ZhbHVlXycpIHtcbiAgICBheGlzID0gaW5kZXhBeGlzID09PSAneCcgPyAneScgOiAneCc7XG4gIH1cbiAgcmV0dXJuIGF4aXM7XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzKGF4aXMsIGluZGV4QXhpcykge1xuICByZXR1cm4gYXhpcyA9PT0gaW5kZXhBeGlzID8gJ19pbmRleF8nIDogJ192YWx1ZV8nO1xufVxuZnVuY3Rpb24gYXhpc0Zyb21Qb3NpdGlvbihwb3NpdGlvbikge1xuICBpZiAocG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgIHJldHVybiAneCc7XG4gIH1cbiAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgfHwgcG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICByZXR1cm4gJ3knO1xuICB9XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpIHtcbiAgaWYgKGlkID09PSAneCcgfHwgaWQgPT09ICd5Jykge1xuICAgIHJldHVybiBpZDtcbiAgfVxuICByZXR1cm4gc2NhbGVPcHRpb25zLmF4aXMgfHwgYXhpc0Zyb21Qb3NpdGlvbihzY2FsZU9wdGlvbnMucG9zaXRpb24pIHx8IGlkLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpO1xufVxuZnVuY3Rpb24gbWVyZ2VTY2FsZUNvbmZpZyhjb25maWcsIG9wdGlvbnMpIHtcbiAgY29uc3QgY2hhcnREZWZhdWx0cyA9IG92ZXJyaWRlc1tjb25maWcudHlwZV0gfHwge3NjYWxlczoge319O1xuICBjb25zdCBjb25maWdTY2FsZXMgPSBvcHRpb25zLnNjYWxlcyB8fCB7fTtcbiAgY29uc3QgY2hhcnRJbmRleEF4aXMgPSBnZXRJbmRleEF4aXMoY29uZmlnLnR5cGUsIG9wdGlvbnMpO1xuICBjb25zdCBmaXJzdElEcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHNjYWxlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIE9iamVjdC5rZXlzKGNvbmZpZ1NjYWxlcykuZm9yRWFjaChpZCA9PiB7XG4gICAgY29uc3Qgc2NhbGVDb25mID0gY29uZmlnU2NhbGVzW2lkXTtcbiAgICBpZiAoIWlzT2JqZWN0KHNjYWxlQ29uZikpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGBJbnZhbGlkIHNjYWxlIGNvbmZpZ3VyYXRpb24gZm9yIHNjYWxlOiAke2lkfWApO1xuICAgIH1cbiAgICBpZiAoc2NhbGVDb25mLl9wcm94eSkge1xuICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihgSWdub3JpbmcgcmVzb2x2ZXIgcGFzc2VkIGFzIG9wdGlvbnMgZm9yIHNjYWxlOiAke2lkfWApO1xuICAgIH1cbiAgICBjb25zdCBheGlzID0gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVDb25mKTtcbiAgICBjb25zdCBkZWZhdWx0SWQgPSBnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzKGF4aXMsIGNoYXJ0SW5kZXhBeGlzKTtcbiAgICBjb25zdCBkZWZhdWx0U2NhbGVPcHRpb25zID0gY2hhcnREZWZhdWx0cy5zY2FsZXMgfHwge307XG4gICAgZmlyc3RJRHNbYXhpc10gPSBmaXJzdElEc1theGlzXSB8fCBpZDtcbiAgICBzY2FsZXNbaWRdID0gbWVyZ2VJZihPYmplY3QuY3JlYXRlKG51bGwpLCBbe2F4aXN9LCBzY2FsZUNvbmYsIGRlZmF1bHRTY2FsZU9wdGlvbnNbYXhpc10sIGRlZmF1bHRTY2FsZU9wdGlvbnNbZGVmYXVsdElkXV0pO1xuICB9KTtcbiAgY29uZmlnLmRhdGEuZGF0YXNldHMuZm9yRWFjaChkYXRhc2V0ID0+IHtcbiAgICBjb25zdCB0eXBlID0gZGF0YXNldC50eXBlIHx8IGNvbmZpZy50eXBlO1xuICAgIGNvbnN0IGluZGV4QXhpcyA9IGRhdGFzZXQuaW5kZXhBeGlzIHx8IGdldEluZGV4QXhpcyh0eXBlLCBvcHRpb25zKTtcbiAgICBjb25zdCBkYXRhc2V0RGVmYXVsdHMgPSBvdmVycmlkZXNbdHlwZV0gfHwge307XG4gICAgY29uc3QgZGVmYXVsdFNjYWxlT3B0aW9ucyA9IGRhdGFzZXREZWZhdWx0cy5zY2FsZXMgfHwge307XG4gICAgT2JqZWN0LmtleXMoZGVmYXVsdFNjYWxlT3B0aW9ucykuZm9yRWFjaChkZWZhdWx0SUQgPT4ge1xuICAgICAgY29uc3QgYXhpcyA9IGdldEF4aXNGcm9tRGVmYXVsdFNjYWxlSUQoZGVmYXVsdElELCBpbmRleEF4aXMpO1xuICAgICAgY29uc3QgaWQgPSBkYXRhc2V0W2F4aXMgKyAnQXhpc0lEJ10gfHwgZmlyc3RJRHNbYXhpc10gfHwgYXhpcztcbiAgICAgIHNjYWxlc1tpZF0gPSBzY2FsZXNbaWRdIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBtZXJnZUlmKHNjYWxlc1tpZF0sIFt7YXhpc30sIGNvbmZpZ1NjYWxlc1tpZF0sIGRlZmF1bHRTY2FsZU9wdGlvbnNbZGVmYXVsdElEXV0pO1xuICAgIH0pO1xuICB9KTtcbiAgT2JqZWN0LmtleXMoc2NhbGVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgY29uc3Qgc2NhbGUgPSBzY2FsZXNba2V5XTtcbiAgICBtZXJnZUlmKHNjYWxlLCBbZGVmYXVsdHMuc2NhbGVzW3NjYWxlLnR5cGVdLCBkZWZhdWx0cy5zY2FsZV0pO1xuICB9KTtcbiAgcmV0dXJuIHNjYWxlcztcbn1cbmZ1bmN0aW9uIGluaXRPcHRpb25zKGNvbmZpZykge1xuICBjb25zdCBvcHRpb25zID0gY29uZmlnLm9wdGlvbnMgfHwgKGNvbmZpZy5vcHRpb25zID0ge30pO1xuICBvcHRpb25zLnBsdWdpbnMgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnBsdWdpbnMsIHt9KTtcbiAgb3B0aW9ucy5zY2FsZXMgPSBtZXJnZVNjYWxlQ29uZmlnKGNvbmZpZywgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBpbml0RGF0YShkYXRhKSB7XG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuICBkYXRhLmRhdGFzZXRzID0gZGF0YS5kYXRhc2V0cyB8fCBbXTtcbiAgZGF0YS5sYWJlbHMgPSBkYXRhLmxhYmVscyB8fCBbXTtcbiAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiBpbml0Q29uZmlnKGNvbmZpZykge1xuICBjb25maWcgPSBjb25maWcgfHwge307XG4gIGNvbmZpZy5kYXRhID0gaW5pdERhdGEoY29uZmlnLmRhdGEpO1xuICBpbml0T3B0aW9ucyhjb25maWcpO1xuICByZXR1cm4gY29uZmlnO1xufVxuY29uc3Qga2V5Q2FjaGUgPSBuZXcgTWFwKCk7XG5jb25zdCBrZXlzQ2FjaGVkID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gY2FjaGVkS2V5cyhjYWNoZUtleSwgZ2VuZXJhdGUpIHtcbiAgbGV0IGtleXMgPSBrZXlDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICBpZiAoIWtleXMpIHtcbiAgICBrZXlzID0gZ2VuZXJhdGUoKTtcbiAgICBrZXlDYWNoZS5zZXQoY2FjaGVLZXksIGtleXMpO1xuICAgIGtleXNDYWNoZWQuYWRkKGtleXMpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuY29uc3QgYWRkSWZGb3VuZCA9IChzZXQsIG9iaiwga2V5KSA9PiB7XG4gIGNvbnN0IG9wdHMgPSByZXNvbHZlT2JqZWN0S2V5KG9iaiwga2V5KTtcbiAgaWYgKG9wdHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHNldC5hZGQob3B0cyk7XG4gIH1cbn07XG5jbGFzcyBDb25maWcge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLl9jb25maWcgPSBpbml0Q29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy5fc2NvcGVDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9yZXNvbHZlckNhY2hlID0gbmV3IE1hcCgpO1xuICB9XG4gIGdldCBwbGF0Zm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLnBsYXRmb3JtO1xuICB9XG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcudHlwZTtcbiAgfVxuICBzZXQgdHlwZSh0eXBlKSB7XG4gICAgdGhpcy5fY29uZmlnLnR5cGUgPSB0eXBlO1xuICB9XG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcuZGF0YTtcbiAgfVxuICBzZXQgZGF0YShkYXRhKSB7XG4gICAgdGhpcy5fY29uZmlnLmRhdGEgPSBpbml0RGF0YShkYXRhKTtcbiAgfVxuICBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLm9wdGlvbnM7XG4gIH1cbiAgc2V0IG9wdGlvbnMob3B0aW9ucykge1xuICAgIHRoaXMuX2NvbmZpZy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICBnZXQgcGx1Z2lucygpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLnBsdWdpbnM7XG4gIH1cbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuX2NvbmZpZztcbiAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICBpbml0T3B0aW9ucyhjb25maWcpO1xuICB9XG4gIGNsZWFyQ2FjaGUoKSB7XG4gICAgdGhpcy5fc2NvcGVDYWNoZS5jbGVhcigpO1xuICAgIHRoaXMuX3Jlc29sdmVyQ2FjaGUuY2xlYXIoKTtcbiAgfVxuICBkYXRhc2V0U2NvcGVLZXlzKGRhdGFzZXRUeXBlKSB7XG4gICAgcmV0dXJuIGNhY2hlZEtleXMoZGF0YXNldFR5cGUsXG4gICAgICAoKSA9PiBbW1xuICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX1gLFxuICAgICAgICAnJ1xuICAgICAgXV0pO1xuICB9XG4gIGRhdGFzZXRBbmltYXRpb25TY29wZUtleXMoZGF0YXNldFR5cGUsIHRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHtkYXRhc2V0VHlwZX0udHJhbnNpdGlvbi4ke3RyYW5zaXRpb259YCxcbiAgICAgICgpID0+IFtcbiAgICAgICAgW1xuICAgICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfS50cmFuc2l0aW9ucy4ke3RyYW5zaXRpb259YCxcbiAgICAgICAgICBgdHJhbnNpdGlvbnMuJHt0cmFuc2l0aW9ufWAsXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX1gLFxuICAgICAgICAgICcnXG4gICAgICAgIF1cbiAgICAgIF0pO1xuICB9XG4gIGRhdGFzZXRFbGVtZW50U2NvcGVLZXlzKGRhdGFzZXRUeXBlLCBlbGVtZW50VHlwZSkge1xuICAgIHJldHVybiBjYWNoZWRLZXlzKGAke2RhdGFzZXRUeXBlfS0ke2VsZW1lbnRUeXBlfWAsXG4gICAgICAoKSA9PiBbW1xuICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX0uZWxlbWVudHMuJHtlbGVtZW50VHlwZX1gLFxuICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX1gLFxuICAgICAgICBgZWxlbWVudHMuJHtlbGVtZW50VHlwZX1gLFxuICAgICAgICAnJ1xuICAgICAgXV0pO1xuICB9XG4gIHBsdWdpblNjb3BlS2V5cyhwbHVnaW4pIHtcbiAgICBjb25zdCBpZCA9IHBsdWdpbi5pZDtcbiAgICBjb25zdCB0eXBlID0gdGhpcy50eXBlO1xuICAgIHJldHVybiBjYWNoZWRLZXlzKGAke3R5cGV9LXBsdWdpbi0ke2lkfWAsXG4gICAgICAoKSA9PiBbW1xuICAgICAgICBgcGx1Z2lucy4ke2lkfWAsXG4gICAgICAgIC4uLnBsdWdpbi5hZGRpdGlvbmFsT3B0aW9uU2NvcGVzIHx8IFtdLFxuICAgICAgXV0pO1xuICB9XG4gIF9jYWNoZWRTY29wZXMobWFpblNjb3BlLCByZXNldENhY2hlKSB7XG4gICAgY29uc3QgX3Njb3BlQ2FjaGUgPSB0aGlzLl9zY29wZUNhY2hlO1xuICAgIGxldCBjYWNoZSA9IF9zY29wZUNhY2hlLmdldChtYWluU2NvcGUpO1xuICAgIGlmICghY2FjaGUgfHwgcmVzZXRDYWNoZSkge1xuICAgICAgY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICBfc2NvcGVDYWNoZS5zZXQobWFpblNjb3BlLCBjYWNoZSk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZTtcbiAgfVxuICBnZXRPcHRpb25TY29wZXMobWFpblNjb3BlLCBrZXlMaXN0cywgcmVzZXRDYWNoZSkge1xuICAgIGNvbnN0IHtvcHRpb25zLCB0eXBlfSA9IHRoaXM7XG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZWRTY29wZXMobWFpblNjb3BlLCByZXNldENhY2hlKTtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoa2V5TGlzdHMpO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGNvbnN0IHNjb3BlcyA9IG5ldyBTZXQoKTtcbiAgICBrZXlMaXN0cy5mb3JFYWNoKGtleXMgPT4ge1xuICAgICAgaWYgKG1haW5TY29wZSkge1xuICAgICAgICBzY29wZXMuYWRkKG1haW5TY29wZSk7XG4gICAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4gYWRkSWZGb3VuZChzY29wZXMsIG1haW5TY29wZSwga2V5KSk7XG4gICAgICB9XG4gICAgICBrZXlzLmZvckVhY2goa2V5ID0+IGFkZElmRm91bmQoc2NvcGVzLCBvcHRpb25zLCBrZXkpKTtcbiAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4gYWRkSWZGb3VuZChzY29wZXMsIG92ZXJyaWRlc1t0eXBlXSB8fCB7fSwga2V5KSk7XG4gICAgICBrZXlzLmZvckVhY2goa2V5ID0+IGFkZElmRm91bmQoc2NvcGVzLCBkZWZhdWx0cywga2V5KSk7XG4gICAgICBrZXlzLmZvckVhY2goa2V5ID0+IGFkZElmRm91bmQoc2NvcGVzLCBkZXNjcmlwdG9ycywga2V5KSk7XG4gICAgfSk7XG4gICAgY29uc3QgYXJyYXkgPSBBcnJheS5mcm9tKHNjb3Blcyk7XG4gICAgaWYgKGFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgYXJyYXkucHVzaChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICB9XG4gICAgaWYgKGtleXNDYWNoZWQuaGFzKGtleUxpc3RzKSkge1xuICAgICAgY2FjaGUuc2V0KGtleUxpc3RzLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuICBjaGFydE9wdGlvblNjb3BlcygpIHtcbiAgICBjb25zdCB7b3B0aW9ucywgdHlwZX0gPSB0aGlzO1xuICAgIHJldHVybiBbXG4gICAgICBvcHRpb25zLFxuICAgICAgb3ZlcnJpZGVzW3R5cGVdIHx8IHt9LFxuICAgICAgZGVmYXVsdHMuZGF0YXNldHNbdHlwZV0gfHwge30sXG4gICAgICB7dHlwZX0sXG4gICAgICBkZWZhdWx0cyxcbiAgICAgIGRlc2NyaXB0b3JzXG4gICAgXTtcbiAgfVxuICByZXNvbHZlTmFtZWRPcHRpb25zKHNjb3BlcywgbmFtZXMsIGNvbnRleHQsIHByZWZpeGVzID0gWycnXSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHskc2hhcmVkOiB0cnVlfTtcbiAgICBjb25zdCB7cmVzb2x2ZXIsIHN1YlByZWZpeGVzfSA9IGdldFJlc29sdmVyKHRoaXMuX3Jlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpO1xuICAgIGxldCBvcHRpb25zID0gcmVzb2x2ZXI7XG4gICAgaWYgKG5lZWRDb250ZXh0KHJlc29sdmVyLCBuYW1lcykpIHtcbiAgICAgIHJlc3VsdC4kc2hhcmVkID0gZmFsc2U7XG4gICAgICBjb250ZXh0ID0gaXNGdW5jdGlvbihjb250ZXh0KSA/IGNvbnRleHQoKSA6IGNvbnRleHQ7XG4gICAgICBjb25zdCBzdWJSZXNvbHZlciA9IHRoaXMuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBjb250ZXh0LCBzdWJQcmVmaXhlcyk7XG4gICAgICBvcHRpb25zID0gX2F0dGFjaENvbnRleHQocmVzb2x2ZXIsIGNvbnRleHQsIHN1YlJlc29sdmVyKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIG5hbWVzKSB7XG4gICAgICByZXN1bHRbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgcHJlZml4ZXMgPSBbJyddLCBkZXNjcmlwdG9yRGVmYXVsdHMpIHtcbiAgICBjb25zdCB7cmVzb2x2ZXJ9ID0gZ2V0UmVzb2x2ZXIodGhpcy5fcmVzb2x2ZXJDYWNoZSwgc2NvcGVzLCBwcmVmaXhlcyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGNvbnRleHQpXG4gICAgICA/IF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBjb250ZXh0LCB1bmRlZmluZWQsIGRlc2NyaXB0b3JEZWZhdWx0cylcbiAgICAgIDogcmVzb2x2ZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFJlc29sdmVyKHJlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpIHtcbiAgbGV0IGNhY2hlID0gcmVzb2x2ZXJDYWNoZS5nZXQoc2NvcGVzKTtcbiAgaWYgKCFjYWNoZSkge1xuICAgIGNhY2hlID0gbmV3IE1hcCgpO1xuICAgIHJlc29sdmVyQ2FjaGUuc2V0KHNjb3BlcywgY2FjaGUpO1xuICB9XG4gIGNvbnN0IGNhY2hlS2V5ID0gcHJlZml4ZXMuam9pbigpO1xuICBsZXQgY2FjaGVkID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgaWYgKCFjYWNoZWQpIHtcbiAgICBjb25zdCByZXNvbHZlciA9IF9jcmVhdGVSZXNvbHZlcihzY29wZXMsIHByZWZpeGVzKTtcbiAgICBjYWNoZWQgPSB7XG4gICAgICByZXNvbHZlcixcbiAgICAgIHN1YlByZWZpeGVzOiBwcmVmaXhlcy5maWx0ZXIocCA9PiAhcC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdob3ZlcicpKVxuICAgIH07XG4gICAgY2FjaGUuc2V0KGNhY2hlS2V5LCBjYWNoZWQpO1xuICB9XG4gIHJldHVybiBjYWNoZWQ7XG59XG5jb25zdCBoYXNGdW5jdGlvbiA9IHZhbHVlID0+IGlzT2JqZWN0KHZhbHVlKVxuICAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSkucmVkdWNlKChhY2MsIGtleSkgPT4gYWNjIHx8IGlzRnVuY3Rpb24odmFsdWVba2V5XSksIGZhbHNlKTtcbmZ1bmN0aW9uIG5lZWRDb250ZXh0KHByb3h5LCBuYW1lcykge1xuICBjb25zdCB7aXNTY3JpcHRhYmxlLCBpc0luZGV4YWJsZX0gPSBfZGVzY3JpcHRvcnMocHJveHkpO1xuICBmb3IgKGNvbnN0IHByb3Agb2YgbmFtZXMpIHtcbiAgICBjb25zdCBzY3JpcHRhYmxlID0gaXNTY3JpcHRhYmxlKHByb3ApO1xuICAgIGNvbnN0IGluZGV4YWJsZSA9IGlzSW5kZXhhYmxlKHByb3ApO1xuICAgIGNvbnN0IHZhbHVlID0gKGluZGV4YWJsZSB8fCBzY3JpcHRhYmxlKSAmJiBwcm94eVtwcm9wXTtcbiAgICBpZiAoKHNjcmlwdGFibGUgJiYgKGlzRnVuY3Rpb24odmFsdWUpIHx8IGhhc0Z1bmN0aW9uKHZhbHVlKSkpXG4gICAgICB8fCAoaW5kZXhhYmxlICYmIGlzQXJyYXkodmFsdWUpKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxudmFyIHZlcnNpb24gPSBcIjMuOS4xXCI7XG5cbmNvbnN0IEtOT1dOX1BPU0lUSU9OUyA9IFsndG9wJywgJ2JvdHRvbScsICdsZWZ0JywgJ3JpZ2h0JywgJ2NoYXJ0QXJlYSddO1xuZnVuY3Rpb24gcG9zaXRpb25Jc0hvcml6b250YWwocG9zaXRpb24sIGF4aXMpIHtcbiAgcmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgKEtOT1dOX1BPU0lUSU9OUy5pbmRleE9mKHBvc2l0aW9uKSA9PT0gLTEgJiYgYXhpcyA9PT0gJ3gnKTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmUyTGV2ZWwobDEsIGwyKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGFbbDFdID09PSBiW2wxXVxuICAgICAgPyBhW2wyXSAtIGJbbDJdXG4gICAgICA6IGFbbDFdIC0gYltsMV07XG4gIH07XG59XG5mdW5jdGlvbiBvbkFuaW1hdGlvbnNDb21wbGV0ZShjb250ZXh0KSB7XG4gIGNvbnN0IGNoYXJ0ID0gY29udGV4dC5jaGFydDtcbiAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uO1xuICBjaGFydC5ub3RpZnlQbHVnaW5zKCdhZnRlclJlbmRlcicpO1xuICBjYWxsYmFjayhhbmltYXRpb25PcHRpb25zICYmIGFuaW1hdGlvbk9wdGlvbnMub25Db21wbGV0ZSwgW2NvbnRleHRdLCBjaGFydCk7XG59XG5mdW5jdGlvbiBvbkFuaW1hdGlvblByb2dyZXNzKGNvbnRleHQpIHtcbiAgY29uc3QgY2hhcnQgPSBjb250ZXh0LmNoYXJ0O1xuICBjb25zdCBhbmltYXRpb25PcHRpb25zID0gY2hhcnQub3B0aW9ucy5hbmltYXRpb247XG4gIGNhbGxiYWNrKGFuaW1hdGlvbk9wdGlvbnMgJiYgYW5pbWF0aW9uT3B0aW9ucy5vblByb2dyZXNzLCBbY29udGV4dF0sIGNoYXJ0KTtcbn1cbmZ1bmN0aW9uIGdldENhbnZhcyhpdGVtKSB7XG4gIGlmIChfaXNEb21TdXBwb3J0ZWQoKSAmJiB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICBpdGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbSk7XG4gIH0gZWxzZSBpZiAoaXRlbSAmJiBpdGVtLmxlbmd0aCkge1xuICAgIGl0ZW0gPSBpdGVtWzBdO1xuICB9XG4gIGlmIChpdGVtICYmIGl0ZW0uY2FudmFzKSB7XG4gICAgaXRlbSA9IGl0ZW0uY2FudmFzO1xuICB9XG4gIHJldHVybiBpdGVtO1xufVxuY29uc3QgaW5zdGFuY2VzID0ge307XG5jb25zdCBnZXRDaGFydCA9IChrZXkpID0+IHtcbiAgY29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKGtleSk7XG4gIHJldHVybiBPYmplY3QudmFsdWVzKGluc3RhbmNlcykuZmlsdGVyKChjKSA9PiBjLmNhbnZhcyA9PT0gY2FudmFzKS5wb3AoKTtcbn07XG5mdW5jdGlvbiBtb3ZlTnVtZXJpY0tleXMob2JqLCBzdGFydCwgbW92ZSkge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGNvbnN0IGludEtleSA9ICtrZXk7XG4gICAgaWYgKGludEtleSA+PSBzdGFydCkge1xuICAgICAgY29uc3QgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgIGRlbGV0ZSBvYmpba2V5XTtcbiAgICAgIGlmIChtb3ZlID4gMCB8fCBpbnRLZXkgPiBzdGFydCkge1xuICAgICAgICBvYmpbaW50S2V5ICsgbW92ZV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGRldGVybWluZUxhc3RFdmVudChlLCBsYXN0RXZlbnQsIGluQ2hhcnRBcmVhLCBpc0NsaWNrKSB7XG4gIGlmICghaW5DaGFydEFyZWEgfHwgZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGlzQ2xpY2spIHtcbiAgICByZXR1cm4gbGFzdEV2ZW50O1xuICB9XG4gIHJldHVybiBlO1xufVxuY2xhc3MgQ2hhcnQge1xuICBjb25zdHJ1Y3RvcihpdGVtLCB1c2VyQ29uZmlnKSB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWcgPSBuZXcgQ29uZmlnKHVzZXJDb25maWcpO1xuICAgIGNvbnN0IGluaXRpYWxDYW52YXMgPSBnZXRDYW52YXMoaXRlbSk7XG4gICAgY29uc3QgZXhpc3RpbmdDaGFydCA9IGdldENoYXJ0KGluaXRpYWxDYW52YXMpO1xuICAgIGlmIChleGlzdGluZ0NoYXJ0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW52YXMgaXMgYWxyZWFkeSBpbiB1c2UuIENoYXJ0IHdpdGggSUQgXFwnJyArIGV4aXN0aW5nQ2hhcnQuaWQgKyAnXFwnJyArXG5cdFx0XHRcdCcgbXVzdCBiZSBkZXN0cm95ZWQgYmVmb3JlIHRoZSBjYW52YXMgd2l0aCBJRCBcXCcnICsgZXhpc3RpbmdDaGFydC5jYW52YXMuaWQgKyAnXFwnIGNhbiBiZSByZXVzZWQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihjb25maWcuY2hhcnRPcHRpb25TY29wZXMoKSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIHRoaXMucGxhdGZvcm0gPSBuZXcgKGNvbmZpZy5wbGF0Zm9ybSB8fCBfZGV0ZWN0UGxhdGZvcm0oaW5pdGlhbENhbnZhcykpKCk7XG4gICAgdGhpcy5wbGF0Zm9ybS51cGRhdGVDb25maWcoY29uZmlnKTtcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5wbGF0Zm9ybS5hY3F1aXJlQ29udGV4dChpbml0aWFsQ2FudmFzLCBvcHRpb25zLmFzcGVjdFJhdGlvKTtcbiAgICBjb25zdCBjYW52YXMgPSBjb250ZXh0ICYmIGNvbnRleHQuY2FudmFzO1xuICAgIGNvbnN0IGhlaWdodCA9IGNhbnZhcyAmJiBjYW52YXMuaGVpZ2h0O1xuICAgIGNvbnN0IHdpZHRoID0gY2FudmFzICYmIGNhbnZhcy53aWR0aDtcbiAgICB0aGlzLmlkID0gdWlkKCk7XG4gICAgdGhpcy5jdHggPSBjb250ZXh0O1xuICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLl9hc3BlY3RSYXRpbyA9IHRoaXMuYXNwZWN0UmF0aW87XG4gICAgdGhpcy5fbGF5ZXJzID0gW107XG4gICAgdGhpcy5fbWV0YXNldHMgPSBbXTtcbiAgICB0aGlzLl9zdGFja3MgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ib3hlcyA9IFtdO1xuICAgIHRoaXMuY3VycmVudERldmljZVBpeGVsUmF0aW8gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jaGFydEFyZWEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fYWN0aXZlID0gW107XG4gICAgdGhpcy5fbGFzdEV2ZW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgIHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc29ydGVkTWV0YXNldHMgPSBbXTtcbiAgICB0aGlzLnNjYWxlcyA9IHt9O1xuICAgIHRoaXMuX3BsdWdpbnMgPSBuZXcgUGx1Z2luU2VydmljZSgpO1xuICAgIHRoaXMuJHByb3hpZXMgPSB7fTtcbiAgICB0aGlzLl9oaWRkZW5JbmRpY2VzID0ge307XG4gICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2FuaW1hdGlvbnNEaXNhYmxlZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2RvUmVzaXplID0gZGVib3VuY2UobW9kZSA9PiB0aGlzLnVwZGF0ZShtb2RlKSwgb3B0aW9ucy5yZXNpemVEZWxheSB8fCAwKTtcbiAgICB0aGlzLl9kYXRhQ2hhbmdlcyA9IFtdO1xuICAgIGluc3RhbmNlc1t0aGlzLmlkXSA9IHRoaXM7XG4gICAgaWYgKCFjb250ZXh0IHx8ICFjYW52YXMpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGNoYXJ0OiBjYW4ndCBhY3F1aXJlIGNvbnRleHQgZnJvbSB0aGUgZ2l2ZW4gaXRlbVwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYW5pbWF0b3IubGlzdGVuKHRoaXMsICdjb21wbGV0ZScsIG9uQW5pbWF0aW9uc0NvbXBsZXRlKTtcbiAgICBhbmltYXRvci5saXN0ZW4odGhpcywgJ3Byb2dyZXNzJywgb25BbmltYXRpb25Qcm9ncmVzcyk7XG4gICAgdGhpcy5faW5pdGlhbGl6ZSgpO1xuICAgIGlmICh0aGlzLmF0dGFjaGVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuICBnZXQgYXNwZWN0UmF0aW8oKSB7XG4gICAgY29uc3Qge29wdGlvbnM6IHthc3BlY3RSYXRpbywgbWFpbnRhaW5Bc3BlY3RSYXRpb30sIHdpZHRoLCBoZWlnaHQsIF9hc3BlY3RSYXRpb30gPSB0aGlzO1xuICAgIGlmICghaXNOdWxsT3JVbmRlZihhc3BlY3RSYXRpbykpIHtcbiAgICAgIHJldHVybiBhc3BlY3RSYXRpbztcbiAgICB9XG4gICAgaWYgKG1haW50YWluQXNwZWN0UmF0aW8gJiYgX2FzcGVjdFJhdGlvKSB7XG4gICAgICByZXR1cm4gX2FzcGVjdFJhdGlvO1xuICAgIH1cbiAgICByZXR1cm4gaGVpZ2h0ID8gd2lkdGggLyBoZWlnaHQgOiBudWxsO1xuICB9XG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5kYXRhO1xuICB9XG4gIHNldCBkYXRhKGRhdGEpIHtcbiAgICB0aGlzLmNvbmZpZy5kYXRhID0gZGF0YTtcbiAgfVxuICBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgfVxuICBzZXQgb3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdGhpcy5jb25maWcub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgX2luaXRpYWxpemUoKSB7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVJbml0Jyk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXRpbmFTY2FsZSh0aGlzLCB0aGlzLm9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgfVxuICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJJbml0Jyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgY2xlYXJDYW52YXModGhpcy5jYW52YXMsIHRoaXMuY3R4KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzdG9wKCkge1xuICAgIGFuaW1hdG9yLnN0b3AodGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBpZiAoIWFuaW1hdG9yLnJ1bm5pbmcodGhpcykpIHtcbiAgICAgIHRoaXMuX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVzaXplQmVmb3JlRHJhdyA9IHt3aWR0aCwgaGVpZ2h0fTtcbiAgICB9XG4gIH1cbiAgX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICBjb25zdCBhc3BlY3RSYXRpbyA9IG9wdGlvbnMubWFpbnRhaW5Bc3BlY3RSYXRpbyAmJiB0aGlzLmFzcGVjdFJhdGlvO1xuICAgIGNvbnN0IG5ld1NpemUgPSB0aGlzLnBsYXRmb3JtLmdldE1heGltdW1TaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pO1xuICAgIGNvbnN0IG5ld1JhdGlvID0gb3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvIHx8IHRoaXMucGxhdGZvcm0uZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAgIGNvbnN0IG1vZGUgPSB0aGlzLndpZHRoID8gJ3Jlc2l6ZScgOiAnYXR0YWNoJztcbiAgICB0aGlzLndpZHRoID0gbmV3U2l6ZS53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IG5ld1NpemUuaGVpZ2h0O1xuICAgIHRoaXMuX2FzcGVjdFJhdGlvID0gdGhpcy5hc3BlY3RSYXRpbztcbiAgICBpZiAoIXJldGluYVNjYWxlKHRoaXMsIG5ld1JhdGlvLCB0cnVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ3Jlc2l6ZScsIHtzaXplOiBuZXdTaXplfSk7XG4gICAgY2FsbGJhY2sob3B0aW9ucy5vblJlc2l6ZSwgW3RoaXMsIG5ld1NpemVdLCB0aGlzKTtcbiAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgaWYgKHRoaXMuX2RvUmVzaXplKG1vZGUpKSB7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVuc3VyZVNjYWxlc0hhdmVJRHMoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBzY2FsZXNPcHRpb25zID0gb3B0aW9ucy5zY2FsZXMgfHwge307XG4gICAgZWFjaChzY2FsZXNPcHRpb25zLCAoYXhpc09wdGlvbnMsIGF4aXNJRCkgPT4ge1xuICAgICAgYXhpc09wdGlvbnMuaWQgPSBheGlzSUQ7XG4gICAgfSk7XG4gIH1cbiAgYnVpbGRPclVwZGF0ZVNjYWxlcygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHNjYWxlT3B0cyA9IG9wdGlvbnMuc2NhbGVzO1xuICAgIGNvbnN0IHNjYWxlcyA9IHRoaXMuc2NhbGVzO1xuICAgIGNvbnN0IHVwZGF0ZWQgPSBPYmplY3Qua2V5cyhzY2FsZXMpLnJlZHVjZSgob2JqLCBpZCkgPT4ge1xuICAgICAgb2JqW2lkXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LCB7fSk7XG4gICAgbGV0IGl0ZW1zID0gW107XG4gICAgaWYgKHNjYWxlT3B0cykge1xuICAgICAgaXRlbXMgPSBpdGVtcy5jb25jYXQoXG4gICAgICAgIE9iamVjdC5rZXlzKHNjYWxlT3B0cykubWFwKChpZCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHNjYWxlT3B0aW9ucyA9IHNjYWxlT3B0c1tpZF07XG4gICAgICAgICAgY29uc3QgYXhpcyA9IGRldGVybWluZUF4aXMoaWQsIHNjYWxlT3B0aW9ucyk7XG4gICAgICAgICAgY29uc3QgaXNSYWRpYWwgPSBheGlzID09PSAncic7XG4gICAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gYXhpcyA9PT0gJ3gnO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcHRpb25zOiBzY2FsZU9wdGlvbnMsXG4gICAgICAgICAgICBkcG9zaXRpb246IGlzUmFkaWFsID8gJ2NoYXJ0QXJlYScgOiBpc0hvcml6b250YWwgPyAnYm90dG9tJyA6ICdsZWZ0JyxcbiAgICAgICAgICAgIGR0eXBlOiBpc1JhZGlhbCA/ICdyYWRpYWxMaW5lYXInIDogaXNIb3Jpem9udGFsID8gJ2NhdGVnb3J5JyA6ICdsaW5lYXInXG4gICAgICAgICAgfTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIGVhY2goaXRlbXMsIChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBzY2FsZU9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG4gICAgICBjb25zdCBpZCA9IHNjYWxlT3B0aW9ucy5pZDtcbiAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpO1xuICAgICAgY29uc3Qgc2NhbGVUeXBlID0gdmFsdWVPckRlZmF1bHQoc2NhbGVPcHRpb25zLnR5cGUsIGl0ZW0uZHR5cGUpO1xuICAgICAgaWYgKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uSXNIb3Jpem9udGFsKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiwgYXhpcykgIT09IHBvc2l0aW9uSXNIb3Jpem9udGFsKGl0ZW0uZHBvc2l0aW9uKSkge1xuICAgICAgICBzY2FsZU9wdGlvbnMucG9zaXRpb24gPSBpdGVtLmRwb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZWRbaWRdID0gdHJ1ZTtcbiAgICAgIGxldCBzY2FsZSA9IG51bGw7XG4gICAgICBpZiAoaWQgaW4gc2NhbGVzICYmIHNjYWxlc1tpZF0udHlwZSA9PT0gc2NhbGVUeXBlKSB7XG4gICAgICAgIHNjYWxlID0gc2NhbGVzW2lkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNjYWxlQ2xhc3MgPSByZWdpc3RyeS5nZXRTY2FsZShzY2FsZVR5cGUpO1xuICAgICAgICBzY2FsZSA9IG5ldyBzY2FsZUNsYXNzKHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICB0eXBlOiBzY2FsZVR5cGUsXG4gICAgICAgICAgY3R4OiB0aGlzLmN0eCxcbiAgICAgICAgICBjaGFydDogdGhpc1xuICAgICAgICB9KTtcbiAgICAgICAgc2NhbGVzW3NjYWxlLmlkXSA9IHNjYWxlO1xuICAgICAgfVxuICAgICAgc2NhbGUuaW5pdChzY2FsZU9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIH0pO1xuICAgIGVhY2godXBkYXRlZCwgKGhhc1VwZGF0ZWQsIGlkKSA9PiB7XG4gICAgICBpZiAoIWhhc1VwZGF0ZWQpIHtcbiAgICAgICAgZGVsZXRlIHNjYWxlc1tpZF07XG4gICAgICB9XG4gICAgfSk7XG4gICAgZWFjaChzY2FsZXMsIChzY2FsZSkgPT4ge1xuICAgICAgbGF5b3V0cy5jb25maWd1cmUodGhpcywgc2NhbGUsIHNjYWxlLm9wdGlvbnMpO1xuICAgICAgbGF5b3V0cy5hZGRCb3godGhpcywgc2NhbGUpO1xuICAgIH0pO1xuICB9XG4gIF91cGRhdGVNZXRhc2V0cygpIHtcbiAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuX21ldGFzZXRzO1xuICAgIGNvbnN0IG51bURhdGEgPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoO1xuICAgIGNvbnN0IG51bU1ldGEgPSBtZXRhc2V0cy5sZW5ndGg7XG4gICAgbWV0YXNldHMuc29ydCgoYSwgYikgPT4gYS5pbmRleCAtIGIuaW5kZXgpO1xuICAgIGlmIChudW1NZXRhID4gbnVtRGF0YSkge1xuICAgICAgZm9yIChsZXQgaSA9IG51bURhdGE7IGkgPCBudW1NZXRhOyArK2kpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGkpO1xuICAgICAgfVxuICAgICAgbWV0YXNldHMuc3BsaWNlKG51bURhdGEsIG51bU1ldGEgLSBudW1EYXRhKTtcbiAgICB9XG4gICAgdGhpcy5fc29ydGVkTWV0YXNldHMgPSBtZXRhc2V0cy5zbGljZSgwKS5zb3J0KGNvbXBhcmUyTGV2ZWwoJ29yZGVyJywgJ2luZGV4JykpO1xuICB9XG4gIF9yZW1vdmVVbnJlZmVyZW5jZWRNZXRhc2V0cygpIHtcbiAgICBjb25zdCB7X21ldGFzZXRzOiBtZXRhc2V0cywgZGF0YToge2RhdGFzZXRzfX0gPSB0aGlzO1xuICAgIGlmIChtZXRhc2V0cy5sZW5ndGggPiBkYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zdGFja3M7XG4gICAgfVxuICAgIG1ldGFzZXRzLmZvckVhY2goKG1ldGEsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoZGF0YXNldHMuZmlsdGVyKHggPT4geCA9PT0gbWV0YS5fZGF0YXNldCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpbmRleCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCkge1xuICAgIGNvbnN0IG5ld0NvbnRyb2xsZXJzID0gW107XG4gICAgY29uc3QgZGF0YXNldHMgPSB0aGlzLmRhdGEuZGF0YXNldHM7XG4gICAgbGV0IGksIGlsZW47XG4gICAgdGhpcy5fcmVtb3ZlVW5yZWZlcmVuY2VkTWV0YXNldHMoKTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBkYXRhc2V0ID0gZGF0YXNldHNbaV07XG4gICAgICBsZXQgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICBjb25zdCB0eXBlID0gZGF0YXNldC50eXBlIHx8IHRoaXMuY29uZmlnLnR5cGU7XG4gICAgICBpZiAobWV0YS50eXBlICYmIG1ldGEudHlwZSAhPT0gdHlwZSkge1xuICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgICAgIG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgfVxuICAgICAgbWV0YS50eXBlID0gdHlwZTtcbiAgICAgIG1ldGEuaW5kZXhBeGlzID0gZGF0YXNldC5pbmRleEF4aXMgfHwgZ2V0SW5kZXhBeGlzKHR5cGUsIHRoaXMub3B0aW9ucyk7XG4gICAgICBtZXRhLm9yZGVyID0gZGF0YXNldC5vcmRlciB8fCAwO1xuICAgICAgbWV0YS5pbmRleCA9IGk7XG4gICAgICBtZXRhLmxhYmVsID0gJycgKyBkYXRhc2V0LmxhYmVsO1xuICAgICAgbWV0YS52aXNpYmxlID0gdGhpcy5pc0RhdGFzZXRWaXNpYmxlKGkpO1xuICAgICAgaWYgKG1ldGEuY29udHJvbGxlcikge1xuICAgICAgICBtZXRhLmNvbnRyb2xsZXIudXBkYXRlSW5kZXgoaSk7XG4gICAgICAgIG1ldGEuY29udHJvbGxlci5saW5rU2NhbGVzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBDb250cm9sbGVyQ2xhc3MgPSByZWdpc3RyeS5nZXRDb250cm9sbGVyKHR5cGUpO1xuICAgICAgICBjb25zdCB7ZGF0YXNldEVsZW1lbnRUeXBlLCBkYXRhRWxlbWVudFR5cGV9ID0gZGVmYXVsdHMuZGF0YXNldHNbdHlwZV07XG4gICAgICAgIE9iamVjdC5hc3NpZ24oQ29udHJvbGxlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgICAgIGRhdGFFbGVtZW50VHlwZTogcmVnaXN0cnkuZ2V0RWxlbWVudChkYXRhRWxlbWVudFR5cGUpLFxuICAgICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogZGF0YXNldEVsZW1lbnRUeXBlICYmIHJlZ2lzdHJ5LmdldEVsZW1lbnQoZGF0YXNldEVsZW1lbnRUeXBlKVxuICAgICAgICB9KTtcbiAgICAgICAgbWV0YS5jb250cm9sbGVyID0gbmV3IENvbnRyb2xsZXJDbGFzcyh0aGlzLCBpKTtcbiAgICAgICAgbmV3Q29udHJvbGxlcnMucHVzaChtZXRhLmNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl91cGRhdGVNZXRhc2V0cygpO1xuICAgIHJldHVybiBuZXdDb250cm9sbGVycztcbiAgfVxuICBfcmVzZXRFbGVtZW50cygpIHtcbiAgICBlYWNoKHRoaXMuZGF0YS5kYXRhc2V0cywgKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkgPT4ge1xuICAgICAgdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXIucmVzZXQoKTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuICByZXNldCgpIHtcbiAgICB0aGlzLl9yZXNldEVsZW1lbnRzKCk7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdyZXNldCcpO1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgY29uZmlnLnVwZGF0ZSgpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKGNvbmZpZy5jaGFydE9wdGlvblNjb3BlcygpLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY29uc3QgYW5pbXNEaXNhYmxlZCA9IHRoaXMuX2FuaW1hdGlvbnNEaXNhYmxlZCA9ICFvcHRpb25zLmFuaW1hdGlvbjtcbiAgICB0aGlzLl91cGRhdGVTY2FsZXMoKTtcbiAgICB0aGlzLl9jaGVja0V2ZW50QmluZGluZ3MoKTtcbiAgICB0aGlzLl91cGRhdGVIaWRkZW5JbmRpY2VzKCk7XG4gICAgdGhpcy5fcGx1Z2lucy5pbnZhbGlkYXRlKCk7XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlVXBkYXRlJywge21vZGUsIGNhbmNlbGFibGU6IHRydWV9KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbmV3Q29udHJvbGxlcnMgPSB0aGlzLmJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRWxlbWVudHNVcGRhdGUnKTtcbiAgICBsZXQgbWluUGFkZGluZyA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICBjb25zdCB7Y29udHJvbGxlcn0gPSB0aGlzLmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgY29uc3QgcmVzZXQgPSAhYW5pbXNEaXNhYmxlZCAmJiBuZXdDb250cm9sbGVycy5pbmRleE9mKGNvbnRyb2xsZXIpID09PSAtMTtcbiAgICAgIGNvbnRyb2xsZXIuYnVpbGRPclVwZGF0ZUVsZW1lbnRzKHJlc2V0KTtcbiAgICAgIG1pblBhZGRpbmcgPSBNYXRoLm1heCgrY29udHJvbGxlci5nZXRNYXhPdmVyZmxvdygpLCBtaW5QYWRkaW5nKTtcbiAgICB9XG4gICAgbWluUGFkZGluZyA9IHRoaXMuX21pblBhZGRpbmcgPSBvcHRpb25zLmxheW91dC5hdXRvUGFkZGluZyA/IG1pblBhZGRpbmcgOiAwO1xuICAgIHRoaXMuX3VwZGF0ZUxheW91dChtaW5QYWRkaW5nKTtcbiAgICBpZiAoIWFuaW1zRGlzYWJsZWQpIHtcbiAgICAgIGVhY2gobmV3Q29udHJvbGxlcnMsIChjb250cm9sbGVyKSA9PiB7XG4gICAgICAgIGNvbnRyb2xsZXIucmVzZXQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVEYXRhc2V0cyhtb2RlKTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyVXBkYXRlJywge21vZGV9KTtcbiAgICB0aGlzLl9sYXllcnMuc29ydChjb21wYXJlMkxldmVsKCd6JywgJ19pZHgnKSk7XG4gICAgY29uc3Qge19hY3RpdmUsIF9sYXN0RXZlbnR9ID0gdGhpcztcbiAgICBpZiAoX2xhc3RFdmVudCkge1xuICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKF9sYXN0RXZlbnQsIHRydWUpO1xuICAgIH0gZWxzZSBpZiAoX2FjdGl2ZS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKF9hY3RpdmUsIF9hY3RpdmUsIHRydWUpO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG4gIF91cGRhdGVTY2FsZXMoKSB7XG4gICAgZWFjaCh0aGlzLnNjYWxlcywgKHNjYWxlKSA9PiB7XG4gICAgICBsYXlvdXRzLnJlbW92ZUJveCh0aGlzLCBzY2FsZSk7XG4gICAgfSk7XG4gICAgdGhpcy5lbnN1cmVTY2FsZXNIYXZlSURzKCk7XG4gICAgdGhpcy5idWlsZE9yVXBkYXRlU2NhbGVzKCk7XG4gIH1cbiAgX2NoZWNrRXZlbnRCaW5kaW5ncygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGV4aXN0aW5nRXZlbnRzID0gbmV3IFNldChPYmplY3Qua2V5cyh0aGlzLl9saXN0ZW5lcnMpKTtcbiAgICBjb25zdCBuZXdFdmVudHMgPSBuZXcgU2V0KG9wdGlvbnMuZXZlbnRzKTtcbiAgICBpZiAoIXNldHNFcXVhbChleGlzdGluZ0V2ZW50cywgbmV3RXZlbnRzKSB8fCAhIXRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgIT09IG9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgIH1cbiAgfVxuICBfdXBkYXRlSGlkZGVuSW5kaWNlcygpIHtcbiAgICBjb25zdCB7X2hpZGRlbkluZGljZXN9ID0gdGhpcztcbiAgICBjb25zdCBjaGFuZ2VzID0gdGhpcy5fZ2V0VW5pZm9ybURhdGFDaGFuZ2VzKCkgfHwgW107XG4gICAgZm9yIChjb25zdCB7bWV0aG9kLCBzdGFydCwgY291bnR9IG9mIGNoYW5nZXMpIHtcbiAgICAgIGNvbnN0IG1vdmUgPSBtZXRob2QgPT09ICdfcmVtb3ZlRWxlbWVudHMnID8gLWNvdW50IDogY291bnQ7XG4gICAgICBtb3ZlTnVtZXJpY0tleXMoX2hpZGRlbkluZGljZXMsIHN0YXJ0LCBtb3ZlKTtcbiAgICB9XG4gIH1cbiAgX2dldFVuaWZvcm1EYXRhQ2hhbmdlcygpIHtcbiAgICBjb25zdCBfZGF0YUNoYW5nZXMgPSB0aGlzLl9kYXRhQ2hhbmdlcztcbiAgICBpZiAoIV9kYXRhQ2hhbmdlcyB8fCAhX2RhdGFDaGFuZ2VzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9kYXRhQ2hhbmdlcyA9IFtdO1xuICAgIGNvbnN0IGRhdGFzZXRDb3VudCA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7XG4gICAgY29uc3QgbWFrZVNldCA9IChpZHgpID0+IG5ldyBTZXQoXG4gICAgICBfZGF0YUNoYW5nZXNcbiAgICAgICAgLmZpbHRlcihjID0+IGNbMF0gPT09IGlkeClcbiAgICAgICAgLm1hcCgoYywgaSkgPT4gaSArICcsJyArIGMuc3BsaWNlKDEpLmpvaW4oJywnKSlcbiAgICApO1xuICAgIGNvbnN0IGNoYW5nZVNldCA9IG1ha2VTZXQoMCk7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBkYXRhc2V0Q291bnQ7IGkrKykge1xuICAgICAgaWYgKCFzZXRzRXF1YWwoY2hhbmdlU2V0LCBtYWtlU2V0KGkpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKGNoYW5nZVNldClcbiAgICAgIC5tYXAoYyA9PiBjLnNwbGl0KCcsJykpXG4gICAgICAubWFwKGEgPT4gKHttZXRob2Q6IGFbMV0sIHN0YXJ0OiArYVsyXSwgY291bnQ6ICthWzNdfSkpO1xuICB9XG4gIF91cGRhdGVMYXlvdXQobWluUGFkZGluZykge1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUxheW91dCcsIHtjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxheW91dHMudXBkYXRlKHRoaXMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBtaW5QYWRkaW5nKTtcbiAgICBjb25zdCBhcmVhID0gdGhpcy5jaGFydEFyZWE7XG4gICAgY29uc3Qgbm9BcmVhID0gYXJlYS53aWR0aCA8PSAwIHx8IGFyZWEuaGVpZ2h0IDw9IDA7XG4gICAgdGhpcy5fbGF5ZXJzID0gW107XG4gICAgZWFjaCh0aGlzLmJveGVzLCAoYm94KSA9PiB7XG4gICAgICBpZiAobm9BcmVhICYmIGJveC5wb3NpdGlvbiA9PT0gJ2NoYXJ0QXJlYScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGJveC5jb25maWd1cmUpIHtcbiAgICAgICAgYm94LmNvbmZpZ3VyZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fbGF5ZXJzLnB1c2goLi4uYm94Ll9sYXllcnMoKSk7XG4gICAgfSwgdGhpcyk7XG4gICAgdGhpcy5fbGF5ZXJzLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBpdGVtLl9pZHggPSBpbmRleDtcbiAgICB9KTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyTGF5b3V0Jyk7XG4gIH1cbiAgX3VwZGF0ZURhdGFzZXRzKG1vZGUpIHtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0c1VwZGF0ZScsIHttb2RlLCBjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdGhpcy5nZXREYXRhc2V0TWV0YShpKS5jb250cm9sbGVyLmNvbmZpZ3VyZSgpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZURhdGFzZXQoaSwgaXNGdW5jdGlvbihtb2RlKSA/IG1vZGUoe2RhdGFzZXRJbmRleDogaX0pIDogbW9kZSk7XG4gICAgfVxuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0c1VwZGF0ZScsIHttb2RlfSk7XG4gIH1cbiAgX3VwZGF0ZURhdGFzZXQoaW5kZXgsIG1vZGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpbmRleCk7XG4gICAgY29uc3QgYXJncyA9IHttZXRhLCBpbmRleCwgbW9kZSwgY2FuY2VsYWJsZTogdHJ1ZX07XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldFVwZGF0ZScsIGFyZ3MpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBtZXRhLmNvbnRyb2xsZXIuX3VwZGF0ZShtb2RlKTtcbiAgICBhcmdzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldFVwZGF0ZScsIGFyZ3MpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVSZW5kZXInLCB7Y2FuY2VsYWJsZTogdHJ1ZX0pID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYW5pbWF0b3IuaGFzKHRoaXMpKSB7XG4gICAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhYW5pbWF0b3IucnVubmluZyh0aGlzKSkge1xuICAgICAgICBhbmltYXRvci5zdGFydCh0aGlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICBvbkFuaW1hdGlvbnNDb21wbGV0ZSh7Y2hhcnQ6IHRoaXN9KTtcbiAgICB9XG4gIH1cbiAgZHJhdygpIHtcbiAgICBsZXQgaTtcbiAgICBpZiAodGhpcy5fcmVzaXplQmVmb3JlRHJhdykge1xuICAgICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gdGhpcy5fcmVzaXplQmVmb3JlRHJhdztcbiAgICAgIHRoaXMuX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXcgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLmNsZWFyKCk7XG4gICAgaWYgKHRoaXMud2lkdGggPD0gMCB8fCB0aGlzLmhlaWdodCA8PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURyYXcnLCB7Y2FuY2VsYWJsZTogdHJ1ZX0pID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsYXllcnMgPSB0aGlzLl9sYXllcnM7XG4gICAgZm9yIChpID0gMDsgaSA8IGxheWVycy5sZW5ndGggJiYgbGF5ZXJzW2ldLnogPD0gMDsgKytpKSB7XG4gICAgICBsYXllcnNbaV0uZHJhdyh0aGlzLmNoYXJ0QXJlYSk7XG4gICAgfVxuICAgIHRoaXMuX2RyYXdEYXRhc2V0cygpO1xuICAgIGZvciAoOyBpIDwgbGF5ZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICBsYXllcnNbaV0uZHJhdyh0aGlzLmNoYXJ0QXJlYSk7XG4gICAgfVxuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEcmF3Jyk7XG4gIH1cbiAgX2dldFNvcnRlZERhdGFzZXRNZXRhcyhmaWx0ZXJWaXNpYmxlKSB7XG4gICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLl9zb3J0ZWRNZXRhc2V0cztcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBjb25zdCBtZXRhID0gbWV0YXNldHNbaV07XG4gICAgICBpZiAoIWZpbHRlclZpc2libGUgfHwgbWV0YS52aXNpYmxlKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG1ldGEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFNvcnRlZERhdGFzZXRNZXRhcyh0cnVlKTtcbiAgfVxuICBfZHJhd0RhdGFzZXRzKCkge1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRzRHJhdycsIHtjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgZm9yIChsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0aGlzLl9kcmF3RGF0YXNldChtZXRhc2V0c1tpXSk7XG4gICAgfVxuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0c0RyYXcnKTtcbiAgfVxuICBfZHJhd0RhdGFzZXQobWV0YSkge1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IGNsaXAgPSBtZXRhLl9jbGlwO1xuICAgIGNvbnN0IHVzZUNsaXAgPSAhY2xpcC5kaXNhYmxlZDtcbiAgICBjb25zdCBhcmVhID0gdGhpcy5jaGFydEFyZWE7XG4gICAgY29uc3QgYXJncyA9IHtcbiAgICAgIG1ldGEsXG4gICAgICBpbmRleDogbWV0YS5pbmRleCxcbiAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICB9O1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXREcmF3JywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh1c2VDbGlwKSB7XG4gICAgICBjbGlwQXJlYShjdHgsIHtcbiAgICAgICAgbGVmdDogY2xpcC5sZWZ0ID09PSBmYWxzZSA/IDAgOiBhcmVhLmxlZnQgLSBjbGlwLmxlZnQsXG4gICAgICAgIHJpZ2h0OiBjbGlwLnJpZ2h0ID09PSBmYWxzZSA/IHRoaXMud2lkdGggOiBhcmVhLnJpZ2h0ICsgY2xpcC5yaWdodCxcbiAgICAgICAgdG9wOiBjbGlwLnRvcCA9PT0gZmFsc2UgPyAwIDogYXJlYS50b3AgLSBjbGlwLnRvcCxcbiAgICAgICAgYm90dG9tOiBjbGlwLmJvdHRvbSA9PT0gZmFsc2UgPyB0aGlzLmhlaWdodCA6IGFyZWEuYm90dG9tICsgY2xpcC5ib3R0b21cbiAgICAgIH0pO1xuICAgIH1cbiAgICBtZXRhLmNvbnRyb2xsZXIuZHJhdygpO1xuICAgIGlmICh1c2VDbGlwKSB7XG4gICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgfVxuICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0RHJhdycsIGFyZ3MpO1xuICB9XG4gIGlzUG9pbnRJbkFyZWEocG9pbnQpIHtcbiAgICByZXR1cm4gX2lzUG9pbnRJbkFyZWEocG9pbnQsIHRoaXMuY2hhcnRBcmVhLCB0aGlzLl9taW5QYWRkaW5nKTtcbiAgfVxuICBnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGUsIG1vZGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCBtZXRob2QgPSBJbnRlcmFjdGlvbi5tb2Rlc1ttb2RlXTtcbiAgICBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG1ldGhvZCh0aGlzLCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkge1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuX21ldGFzZXRzO1xuICAgIGxldCBtZXRhID0gbWV0YXNldHMuZmlsdGVyKHggPT4geCAmJiB4Ll9kYXRhc2V0ID09PSBkYXRhc2V0KS5wb3AoKTtcbiAgICBpZiAoIW1ldGEpIHtcbiAgICAgIG1ldGEgPSB7XG4gICAgICAgIHR5cGU6IG51bGwsXG4gICAgICAgIGRhdGE6IFtdLFxuICAgICAgICBkYXRhc2V0OiBudWxsLFxuICAgICAgICBjb250cm9sbGVyOiBudWxsLFxuICAgICAgICBoaWRkZW46IG51bGwsXG4gICAgICAgIHhBeGlzSUQ6IG51bGwsXG4gICAgICAgIHlBeGlzSUQ6IG51bGwsXG4gICAgICAgIG9yZGVyOiBkYXRhc2V0ICYmIGRhdGFzZXQub3JkZXIgfHwgMCxcbiAgICAgICAgaW5kZXg6IGRhdGFzZXRJbmRleCxcbiAgICAgICAgX2RhdGFzZXQ6IGRhdGFzZXQsXG4gICAgICAgIF9wYXJzZWQ6IFtdLFxuICAgICAgICBfc29ydGVkOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIG1ldGFzZXRzLnB1c2gobWV0YSk7XG4gICAgfVxuICAgIHJldHVybiBtZXRhO1xuICB9XG4gIGdldENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQgfHwgKHRoaXMuJGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwsIHtjaGFydDogdGhpcywgdHlwZTogJ2NoYXJ0J30pKTtcbiAgfVxuICBnZXRWaXNpYmxlRGF0YXNldENvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKS5sZW5ndGg7XG4gIH1cbiAgaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpIHtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgaWYgKCFkYXRhc2V0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgcmV0dXJuIHR5cGVvZiBtZXRhLmhpZGRlbiA9PT0gJ2Jvb2xlYW4nID8gIW1ldGEuaGlkZGVuIDogIWRhdGFzZXQuaGlkZGVuO1xuICB9XG4gIHNldERhdGFzZXRWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgdmlzaWJsZSkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgbWV0YS5oaWRkZW4gPSAhdmlzaWJsZTtcbiAgfVxuICB0b2dnbGVEYXRhVmlzaWJpbGl0eShpbmRleCkge1xuICAgIHRoaXMuX2hpZGRlbkluZGljZXNbaW5kZXhdID0gIXRoaXMuX2hpZGRlbkluZGljZXNbaW5kZXhdO1xuICB9XG4gIGdldERhdGFWaXNpYmlsaXR5KGluZGV4KSB7XG4gICAgcmV0dXJuICF0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XTtcbiAgfVxuICBfdXBkYXRlVmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCwgdmlzaWJsZSkge1xuICAgIGNvbnN0IG1vZGUgPSB2aXNpYmxlID8gJ3Nob3cnIDogJ2hpZGUnO1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgY29uc3QgYW5pbXMgPSBtZXRhLmNvbnRyb2xsZXIuX3Jlc29sdmVBbmltYXRpb25zKHVuZGVmaW5lZCwgbW9kZSk7XG4gICAgaWYgKGRlZmluZWQoZGF0YUluZGV4KSkge1xuICAgICAgbWV0YS5kYXRhW2RhdGFJbmRleF0uaGlkZGVuID0gIXZpc2libGU7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldERhdGFzZXRWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgdmlzaWJsZSk7XG4gICAgICBhbmltcy51cGRhdGUobWV0YSwge3Zpc2libGV9KTtcbiAgICAgIHRoaXMudXBkYXRlKChjdHgpID0+IGN0eC5kYXRhc2V0SW5kZXggPT09IGRhdGFzZXRJbmRleCA/IG1vZGUgOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgfVxuICBoaWRlKGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KSB7XG4gICAgdGhpcy5fdXBkYXRlVmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCwgZmFsc2UpO1xuICB9XG4gIHNob3coZGF0YXNldEluZGV4LCBkYXRhSW5kZXgpIHtcbiAgICB0aGlzLl91cGRhdGVWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4LCB0cnVlKTtcbiAgfVxuICBfZGVzdHJveURhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9tZXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgIGlmIChtZXRhICYmIG1ldGEuY29udHJvbGxlcikge1xuICAgICAgbWV0YS5jb250cm9sbGVyLl9kZXN0cm95KCk7XG4gICAgfVxuICAgIGRlbGV0ZSB0aGlzLl9tZXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICB9XG4gIF9zdG9wKCkge1xuICAgIGxldCBpLCBpbGVuO1xuICAgIHRoaXMuc3RvcCgpO1xuICAgIGFuaW1hdG9yLnJlbW92ZSh0aGlzKTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGkpO1xuICAgIH1cbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGVzdHJveScpO1xuICAgIGNvbnN0IHtjYW52YXMsIGN0eH0gPSB0aGlzO1xuICAgIHRoaXMuX3N0b3AoKTtcbiAgICB0aGlzLmNvbmZpZy5jbGVhckNhY2hlKCk7XG4gICAgaWYgKGNhbnZhcykge1xuICAgICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgICAgIGNsZWFyQ2FudmFzKGNhbnZhcywgY3R4KTtcbiAgICAgIHRoaXMucGxhdGZvcm0ucmVsZWFzZUNvbnRleHQoY3R4KTtcbiAgICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbiAgICAgIHRoaXMuY3R4ID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdkZXN0cm95Jyk7XG4gICAgZGVsZXRlIGluc3RhbmNlc1t0aGlzLmlkXTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGVzdHJveScpO1xuICB9XG4gIHRvQmFzZTY0SW1hZ2UoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLmNhbnZhcy50b0RhdGFVUkwoLi4uYXJncyk7XG4gIH1cbiAgYmluZEV2ZW50cygpIHtcbiAgICB0aGlzLmJpbmRVc2VyRXZlbnRzKCk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICB0aGlzLmJpbmRSZXNwb25zaXZlRXZlbnRzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBiaW5kVXNlckV2ZW50cygpIHtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG4gICAgY29uc3QgcGxhdGZvcm0gPSB0aGlzLnBsYXRmb3JtO1xuICAgIGNvbnN0IF9hZGQgPSAodHlwZSwgbGlzdGVuZXIpID0+IHtcbiAgICAgIHBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgfTtcbiAgICBjb25zdCBsaXN0ZW5lciA9IChlLCB4LCB5KSA9PiB7XG4gICAgICBlLm9mZnNldFggPSB4O1xuICAgICAgZS5vZmZzZXRZID0geTtcbiAgICAgIHRoaXMuX2V2ZW50SGFuZGxlcihlKTtcbiAgICB9O1xuICAgIGVhY2godGhpcy5vcHRpb25zLmV2ZW50cywgKHR5cGUpID0+IF9hZGQodHlwZSwgbGlzdGVuZXIpKTtcbiAgfVxuICBiaW5kUmVzcG9uc2l2ZUV2ZW50cygpIHtcbiAgICBpZiAoIXRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgPSB7fTtcbiAgICB9XG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycztcbiAgICBjb25zdCBwbGF0Zm9ybSA9IHRoaXMucGxhdGZvcm07XG4gICAgY29uc3QgX2FkZCA9ICh0eXBlLCBsaXN0ZW5lcikgPT4ge1xuICAgICAgcGxhdGZvcm0uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICBsaXN0ZW5lcnNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICB9O1xuICAgIGNvbnN0IF9yZW1vdmUgPSAodHlwZSwgbGlzdGVuZXIpID0+IHtcbiAgICAgIGlmIChsaXN0ZW5lcnNbdHlwZV0pIHtcbiAgICAgICAgcGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIGRlbGV0ZSBsaXN0ZW5lcnNbdHlwZV07XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBsaXN0ZW5lciA9ICh3aWR0aCwgaGVpZ2h0KSA9PiB7XG4gICAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgICAgdGhpcy5yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBsZXQgZGV0YWNoZWQ7XG4gICAgY29uc3QgYXR0YWNoZWQgPSAoKSA9PiB7XG4gICAgICBfcmVtb3ZlKCdhdHRhY2gnLCBhdHRhY2hlZCk7XG4gICAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICBfYWRkKCdyZXNpemUnLCBsaXN0ZW5lcik7XG4gICAgICBfYWRkKCdkZXRhY2gnLCBkZXRhY2hlZCk7XG4gICAgfTtcbiAgICBkZXRhY2hlZCA9ICgpID0+IHtcbiAgICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICAgIF9yZW1vdmUoJ3Jlc2l6ZScsIGxpc3RlbmVyKTtcbiAgICAgIHRoaXMuX3N0b3AoKTtcbiAgICAgIHRoaXMuX3Jlc2l6ZSgwLCAwKTtcbiAgICAgIF9hZGQoJ2F0dGFjaCcsIGF0dGFjaGVkKTtcbiAgICB9O1xuICAgIGlmIChwbGF0Zm9ybS5pc0F0dGFjaGVkKHRoaXMuY2FudmFzKSkge1xuICAgICAgYXR0YWNoZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGV0YWNoZWQoKTtcbiAgICB9XG4gIH1cbiAgdW5iaW5kRXZlbnRzKCkge1xuICAgIGVhY2godGhpcy5fbGlzdGVuZXJzLCAobGlzdGVuZXIsIHR5cGUpID0+IHtcbiAgICAgIHRoaXMucGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgfSk7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gICAgZWFjaCh0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzLCAobGlzdGVuZXIsIHR5cGUpID0+IHtcbiAgICAgIHRoaXMucGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgfSk7XG4gICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHVuZGVmaW5lZDtcbiAgfVxuICB1cGRhdGVIb3ZlclN0eWxlKGl0ZW1zLCBtb2RlLCBlbmFibGVkKSB7XG4gICAgY29uc3QgcHJlZml4ID0gZW5hYmxlZCA/ICdzZXQnIDogJ3JlbW92ZSc7XG4gICAgbGV0IG1ldGEsIGl0ZW0sIGksIGlsZW47XG4gICAgaWYgKG1vZGUgPT09ICdkYXRhc2V0Jykge1xuICAgICAgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaXRlbXNbMF0uZGF0YXNldEluZGV4KTtcbiAgICAgIG1ldGEuY29udHJvbGxlclsnXycgKyBwcmVmaXggKyAnRGF0YXNldEhvdmVyU3R5bGUnXSgpO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpdGVtID0gaXRlbXNbaV07XG4gICAgICBjb25zdCBjb250cm9sbGVyID0gaXRlbSAmJiB0aGlzLmdldERhdGFzZXRNZXRhKGl0ZW0uZGF0YXNldEluZGV4KS5jb250cm9sbGVyO1xuICAgICAgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgY29udHJvbGxlcltwcmVmaXggKyAnSG92ZXJTdHlsZSddKGl0ZW0uZWxlbWVudCwgaXRlbS5kYXRhc2V0SW5kZXgsIGl0ZW0uaW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBnZXRBY3RpdmVFbGVtZW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICB9XG4gIHNldEFjdGl2ZUVsZW1lbnRzKGFjdGl2ZUVsZW1lbnRzKSB7XG4gICAgY29uc3QgbGFzdEFjdGl2ZSA9IHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmVFbGVtZW50cy5tYXAoKHtkYXRhc2V0SW5kZXgsIGluZGV4fSkgPT4ge1xuICAgICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgIGlmICghbWV0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGRhdGFzZXQgZm91bmQgYXQgaW5kZXggJyArIGRhdGFzZXRJbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgIGVsZW1lbnQ6IG1ldGEuZGF0YVtpbmRleF0sXG4gICAgICAgIGluZGV4LFxuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBjaGFuZ2VkID0gIV9lbGVtZW50c0VxdWFsKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgIHRoaXMuX2xhc3RFdmVudCA9IG51bGw7XG4gICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgIH1cbiAgfVxuICBub3RpZnlQbHVnaW5zKGhvb2ssIGFyZ3MsIGZpbHRlcikge1xuICAgIHJldHVybiB0aGlzLl9wbHVnaW5zLm5vdGlmeSh0aGlzLCBob29rLCBhcmdzLCBmaWx0ZXIpO1xuICB9XG4gIF91cGRhdGVIb3ZlclN0eWxlcyhhY3RpdmUsIGxhc3RBY3RpdmUsIHJlcGxheSkge1xuICAgIGNvbnN0IGhvdmVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucy5ob3ZlcjtcbiAgICBjb25zdCBkaWZmID0gKGEsIGIpID0+IGEuZmlsdGVyKHggPT4gIWIuc29tZSh5ID0+IHguZGF0YXNldEluZGV4ID09PSB5LmRhdGFzZXRJbmRleCAmJiB4LmluZGV4ID09PSB5LmluZGV4KSk7XG4gICAgY29uc3QgZGVhY3RpdmF0ZWQgPSBkaWZmKGxhc3RBY3RpdmUsIGFjdGl2ZSk7XG4gICAgY29uc3QgYWN0aXZhdGVkID0gcmVwbGF5ID8gYWN0aXZlIDogZGlmZihhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgIGlmIChkZWFjdGl2YXRlZC5sZW5ndGgpIHtcbiAgICAgIHRoaXMudXBkYXRlSG92ZXJTdHlsZShkZWFjdGl2YXRlZCwgaG92ZXJPcHRpb25zLm1vZGUsIGZhbHNlKTtcbiAgICB9XG4gICAgaWYgKGFjdGl2YXRlZC5sZW5ndGggJiYgaG92ZXJPcHRpb25zLm1vZGUpIHtcbiAgICAgIHRoaXMudXBkYXRlSG92ZXJTdHlsZShhY3RpdmF0ZWQsIGhvdmVyT3B0aW9ucy5tb2RlLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgX2V2ZW50SGFuZGxlcihlLCByZXBsYXkpIHtcbiAgICBjb25zdCBhcmdzID0ge1xuICAgICAgZXZlbnQ6IGUsXG4gICAgICByZXBsYXksXG4gICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgaW5DaGFydEFyZWE6IHRoaXMuaXNQb2ludEluQXJlYShlKVxuICAgIH07XG4gICAgY29uc3QgZXZlbnRGaWx0ZXIgPSAocGx1Z2luKSA9PiAocGx1Z2luLm9wdGlvbnMuZXZlbnRzIHx8IHRoaXMub3B0aW9ucy5ldmVudHMpLmluY2x1ZGVzKGUubmF0aXZlLnR5cGUpO1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUV2ZW50JywgYXJncywgZXZlbnRGaWx0ZXIpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5faGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBhcmdzLmluQ2hhcnRBcmVhKTtcbiAgICBhcmdzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRXZlbnQnLCBhcmdzLCBldmVudEZpbHRlcik7XG4gICAgaWYgKGNoYW5nZWQgfHwgYXJncy5jaGFuZ2VkKSB7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBfaGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IHtfYWN0aXZlOiBsYXN0QWN0aXZlID0gW10sIG9wdGlvbnN9ID0gdGhpcztcbiAgICBjb25zdCB1c2VGaW5hbFBvc2l0aW9uID0gcmVwbGF5O1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIGluQ2hhcnRBcmVhLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBjb25zdCBpc0NsaWNrID0gX2lzQ2xpY2tFdmVudChlKTtcbiAgICBjb25zdCBsYXN0RXZlbnQgPSBkZXRlcm1pbmVMYXN0RXZlbnQoZSwgdGhpcy5fbGFzdEV2ZW50LCBpbkNoYXJ0QXJlYSwgaXNDbGljayk7XG4gICAgaWYgKGluQ2hhcnRBcmVhKSB7XG4gICAgICB0aGlzLl9sYXN0RXZlbnQgPSBudWxsO1xuICAgICAgY2FsbGJhY2sob3B0aW9ucy5vbkhvdmVyLCBbZSwgYWN0aXZlLCB0aGlzXSwgdGhpcyk7XG4gICAgICBpZiAoaXNDbGljaykge1xuICAgICAgICBjYWxsYmFjayhvcHRpb25zLm9uQ2xpY2ssIFtlLCBhY3RpdmUsIHRoaXNdLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY2hhbmdlZCA9ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgIGlmIChjaGFuZ2VkIHx8IHJlcGxheSkge1xuICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgdGhpcy5fdXBkYXRlSG92ZXJTdHlsZXMoYWN0aXZlLCBsYXN0QWN0aXZlLCByZXBsYXkpO1xuICAgIH1cbiAgICB0aGlzLl9sYXN0RXZlbnQgPSBsYXN0RXZlbnQ7XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG4gIH1cbiAgX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIGluQ2hhcnRBcmVhLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBpZiAoIWluQ2hhcnRBcmVhKSB7XG4gICAgICByZXR1cm4gbGFzdEFjdGl2ZTtcbiAgICB9XG4gICAgY29uc3QgaG92ZXJPcHRpb25zID0gdGhpcy5vcHRpb25zLmhvdmVyO1xuICAgIHJldHVybiB0aGlzLmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgaG92ZXJPcHRpb25zLm1vZGUsIGhvdmVyT3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cbn1cbmNvbnN0IGludmFsaWRhdGVQbHVnaW5zID0gKCkgPT4gZWFjaChDaGFydC5pbnN0YW5jZXMsIChjaGFydCkgPT4gY2hhcnQuX3BsdWdpbnMuaW52YWxpZGF0ZSgpKTtcbmNvbnN0IGVudW1lcmFibGUgPSB0cnVlO1xuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQ2hhcnQsIHtcbiAgZGVmYXVsdHM6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiBkZWZhdWx0c1xuICB9LFxuICBpbnN0YW5jZXM6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiBpbnN0YW5jZXNcbiAgfSxcbiAgb3ZlcnJpZGVzOiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogb3ZlcnJpZGVzXG4gIH0sXG4gIHJlZ2lzdHJ5OiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogcmVnaXN0cnlcbiAgfSxcbiAgdmVyc2lvbjoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IHZlcnNpb25cbiAgfSxcbiAgZ2V0Q2hhcnQ6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiBnZXRDaGFydFxuICB9LFxuICByZWdpc3Rlcjoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6ICguLi5pdGVtcykgPT4ge1xuICAgICAgcmVnaXN0cnkuYWRkKC4uLml0ZW1zKTtcbiAgICAgIGludmFsaWRhdGVQbHVnaW5zKCk7XG4gICAgfVxuICB9LFxuICB1bnJlZ2lzdGVyOiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogKC4uLml0ZW1zKSA9PiB7XG4gICAgICByZWdpc3RyeS5yZW1vdmUoLi4uaXRlbXMpO1xuICAgICAgaW52YWxpZGF0ZVBsdWdpbnMoKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjbGlwQXJjKGN0eCwgZWxlbWVudCwgZW5kQW5nbGUpIHtcbiAgY29uc3Qge3N0YXJ0QW5nbGUsIHBpeGVsTWFyZ2luLCB4LCB5LCBvdXRlclJhZGl1cywgaW5uZXJSYWRpdXN9ID0gZWxlbWVudDtcbiAgbGV0IGFuZ2xlTWFyZ2luID0gcGl4ZWxNYXJnaW4gLyBvdXRlclJhZGl1cztcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHguYXJjKHgsIHksIG91dGVyUmFkaXVzLCBzdGFydEFuZ2xlIC0gYW5nbGVNYXJnaW4sIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4pO1xuICBpZiAoaW5uZXJSYWRpdXMgPiBwaXhlbE1hcmdpbikge1xuICAgIGFuZ2xlTWFyZ2luID0gcGl4ZWxNYXJnaW4gLyBpbm5lclJhZGl1cztcbiAgICBjdHguYXJjKHgsIHksIGlubmVyUmFkaXVzLCBlbmRBbmdsZSArIGFuZ2xlTWFyZ2luLCBzdGFydEFuZ2xlIC0gYW5nbGVNYXJnaW4sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGN0eC5hcmMoeCwgeSwgcGl4ZWxNYXJnaW4sIGVuZEFuZ2xlICsgSEFMRl9QSSwgc3RhcnRBbmdsZSAtIEhBTEZfUEkpO1xuICB9XG4gIGN0eC5jbG9zZVBhdGgoKTtcbiAgY3R4LmNsaXAoKTtcbn1cbmZ1bmN0aW9uIHRvUmFkaXVzQ29ybmVycyh2YWx1ZSkge1xuICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIFsnb3V0ZXJTdGFydCcsICdvdXRlckVuZCcsICdpbm5lclN0YXJ0JywgJ2lubmVyRW5kJ10pO1xufVxuZnVuY3Rpb24gcGFyc2VCb3JkZXJSYWRpdXMkMShhcmMsIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgYW5nbGVEZWx0YSkge1xuICBjb25zdCBvID0gdG9SYWRpdXNDb3JuZXJzKGFyYy5vcHRpb25zLmJvcmRlclJhZGl1cyk7XG4gIGNvbnN0IGhhbGZUaGlja25lc3MgPSAob3V0ZXJSYWRpdXMgLSBpbm5lclJhZGl1cykgLyAyO1xuICBjb25zdCBpbm5lckxpbWl0ID0gTWF0aC5taW4oaGFsZlRoaWNrbmVzcywgYW5nbGVEZWx0YSAqIGlubmVyUmFkaXVzIC8gMik7XG4gIGNvbnN0IGNvbXB1dGVPdXRlckxpbWl0ID0gKHZhbCkgPT4ge1xuICAgIGNvbnN0IG91dGVyQXJjTGltaXQgPSAob3V0ZXJSYWRpdXMgLSBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCB2YWwpKSAqIGFuZ2xlRGVsdGEgLyAyO1xuICAgIHJldHVybiBfbGltaXRWYWx1ZSh2YWwsIDAsIE1hdGgubWluKGhhbGZUaGlja25lc3MsIG91dGVyQXJjTGltaXQpKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBvdXRlclN0YXJ0OiBjb21wdXRlT3V0ZXJMaW1pdChvLm91dGVyU3RhcnQpLFxuICAgIG91dGVyRW5kOiBjb21wdXRlT3V0ZXJMaW1pdChvLm91dGVyRW5kKSxcbiAgICBpbm5lclN0YXJ0OiBfbGltaXRWYWx1ZShvLmlubmVyU3RhcnQsIDAsIGlubmVyTGltaXQpLFxuICAgIGlubmVyRW5kOiBfbGltaXRWYWx1ZShvLmlubmVyRW5kLCAwLCBpbm5lckxpbWl0KSxcbiAgfTtcbn1cbmZ1bmN0aW9uIHJUaGV0YVRvWFkociwgdGhldGEsIHgsIHkpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiB4ICsgciAqIE1hdGguY29zKHRoZXRhKSxcbiAgICB5OiB5ICsgciAqIE1hdGguc2luKHRoZXRhKSxcbiAgfTtcbn1cbmZ1bmN0aW9uIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZCwgY2lyY3VsYXIpIHtcbiAgY29uc3Qge3gsIHksIHN0YXJ0QW5nbGU6IHN0YXJ0LCBwaXhlbE1hcmdpbiwgaW5uZXJSYWRpdXM6IGlubmVyUn0gPSBlbGVtZW50O1xuICBjb25zdCBvdXRlclJhZGl1cyA9IE1hdGgubWF4KGVsZW1lbnQub3V0ZXJSYWRpdXMgKyBzcGFjaW5nICsgb2Zmc2V0IC0gcGl4ZWxNYXJnaW4sIDApO1xuICBjb25zdCBpbm5lclJhZGl1cyA9IGlubmVyUiA+IDAgPyBpbm5lclIgKyBzcGFjaW5nICsgb2Zmc2V0ICsgcGl4ZWxNYXJnaW4gOiAwO1xuICBsZXQgc3BhY2luZ09mZnNldCA9IDA7XG4gIGNvbnN0IGFscGhhID0gZW5kIC0gc3RhcnQ7XG4gIGlmIChzcGFjaW5nKSB7XG4gICAgY29uc3Qgbm9TcGFjaW5nSW5uZXJSYWRpdXMgPSBpbm5lclIgPiAwID8gaW5uZXJSIC0gc3BhY2luZyA6IDA7XG4gICAgY29uc3Qgbm9TcGFjaW5nT3V0ZXJSYWRpdXMgPSBvdXRlclJhZGl1cyA+IDAgPyBvdXRlclJhZGl1cyAtIHNwYWNpbmcgOiAwO1xuICAgIGNvbnN0IGF2Tm9nU3BhY2luZ1JhZGl1cyA9IChub1NwYWNpbmdJbm5lclJhZGl1cyArIG5vU3BhY2luZ091dGVyUmFkaXVzKSAvIDI7XG4gICAgY29uc3QgYWRqdXN0ZWRBbmdsZSA9IGF2Tm9nU3BhY2luZ1JhZGl1cyAhPT0gMCA/IChhbHBoYSAqIGF2Tm9nU3BhY2luZ1JhZGl1cykgLyAoYXZOb2dTcGFjaW5nUmFkaXVzICsgc3BhY2luZykgOiBhbHBoYTtcbiAgICBzcGFjaW5nT2Zmc2V0ID0gKGFscGhhIC0gYWRqdXN0ZWRBbmdsZSkgLyAyO1xuICB9XG4gIGNvbnN0IGJldGEgPSBNYXRoLm1heCgwLjAwMSwgYWxwaGEgKiBvdXRlclJhZGl1cyAtIG9mZnNldCAvIFBJKSAvIG91dGVyUmFkaXVzO1xuICBjb25zdCBhbmdsZU9mZnNldCA9IChhbHBoYSAtIGJldGEpIC8gMjtcbiAgY29uc3Qgc3RhcnRBbmdsZSA9IHN0YXJ0ICsgYW5nbGVPZmZzZXQgKyBzcGFjaW5nT2Zmc2V0O1xuICBjb25zdCBlbmRBbmdsZSA9IGVuZCAtIGFuZ2xlT2Zmc2V0IC0gc3BhY2luZ09mZnNldDtcbiAgY29uc3Qge291dGVyU3RhcnQsIG91dGVyRW5kLCBpbm5lclN0YXJ0LCBpbm5lckVuZH0gPSBwYXJzZUJvcmRlclJhZGl1cyQxKGVsZW1lbnQsIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgZW5kQW5nbGUgLSBzdGFydEFuZ2xlKTtcbiAgY29uc3Qgb3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSBvdXRlclN0YXJ0O1xuICBjb25zdCBvdXRlckVuZEFkanVzdGVkUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSBvdXRlckVuZDtcbiAgY29uc3Qgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUgPSBzdGFydEFuZ2xlICsgb3V0ZXJTdGFydCAvIG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cztcbiAgY29uc3Qgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlID0gZW5kQW5nbGUgLSBvdXRlckVuZCAvIG91dGVyRW5kQWRqdXN0ZWRSYWRpdXM7XG4gIGNvbnN0IGlubmVyU3RhcnRBZGp1c3RlZFJhZGl1cyA9IGlubmVyUmFkaXVzICsgaW5uZXJTdGFydDtcbiAgY29uc3QgaW5uZXJFbmRBZGp1c3RlZFJhZGl1cyA9IGlubmVyUmFkaXVzICsgaW5uZXJFbmQ7XG4gIGNvbnN0IGlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlID0gc3RhcnRBbmdsZSArIGlubmVyU3RhcnQgLyBpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXM7XG4gIGNvbnN0IGlubmVyRW5kQWRqdXN0ZWRBbmdsZSA9IGVuZEFuZ2xlIC0gaW5uZXJFbmQgLyBpbm5lckVuZEFkanVzdGVkUmFkaXVzO1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGlmIChjaXJjdWxhcikge1xuICAgIGN0eC5hcmMoeCwgeSwgb3V0ZXJSYWRpdXMsIG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlLCBvdXRlckVuZEFkanVzdGVkQW5nbGUpO1xuICAgIGlmIChvdXRlckVuZCA+IDApIHtcbiAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKG91dGVyRW5kQWRqdXN0ZWRSYWRpdXMsIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBvdXRlckVuZCwgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlLCBlbmRBbmdsZSArIEhBTEZfUEkpO1xuICAgIH1cbiAgICBjb25zdCBwNCA9IHJUaGV0YVRvWFkoaW5uZXJFbmRBZGp1c3RlZFJhZGl1cywgZW5kQW5nbGUsIHgsIHkpO1xuICAgIGN0eC5saW5lVG8ocDQueCwgcDQueSk7XG4gICAgaWYgKGlubmVyRW5kID4gMCkge1xuICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkoaW5uZXJFbmRBZGp1c3RlZFJhZGl1cywgaW5uZXJFbmRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIGlubmVyRW5kLCBlbmRBbmdsZSArIEhBTEZfUEksIGlubmVyRW5kQWRqdXN0ZWRBbmdsZSArIE1hdGguUEkpO1xuICAgIH1cbiAgICBjdHguYXJjKHgsIHksIGlubmVyUmFkaXVzLCBlbmRBbmdsZSAtIChpbm5lckVuZCAvIGlubmVyUmFkaXVzKSwgc3RhcnRBbmdsZSArIChpbm5lclN0YXJ0IC8gaW5uZXJSYWRpdXMpLCB0cnVlKTtcbiAgICBpZiAoaW5uZXJTdGFydCA+IDApIHtcbiAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKGlubmVyU3RhcnRBZGp1c3RlZFJhZGl1cywgaW5uZXJTdGFydEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgaW5uZXJTdGFydCwgaW5uZXJTdGFydEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gICAgfVxuICAgIGNvbnN0IHA4ID0gclRoZXRhVG9YWShvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMsIHN0YXJ0QW5nbGUsIHgsIHkpO1xuICAgIGN0eC5saW5lVG8ocDgueCwgcDgueSk7XG4gICAgaWYgKG91dGVyU3RhcnQgPiAwKSB7XG4gICAgICBjb25zdCBwQ2VudGVyID0gclRoZXRhVG9YWShvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMsIG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIG91dGVyU3RhcnQsIHN0YXJ0QW5nbGUgLSBIQUxGX1BJLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGN0eC5tb3ZlVG8oeCwgeSk7XG4gICAgY29uc3Qgb3V0ZXJTdGFydFggPSBNYXRoLmNvcyhvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSkgKiBvdXRlclJhZGl1cyArIHg7XG4gICAgY29uc3Qgb3V0ZXJTdGFydFkgPSBNYXRoLnNpbihvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSkgKiBvdXRlclJhZGl1cyArIHk7XG4gICAgY3R4LmxpbmVUbyhvdXRlclN0YXJ0WCwgb3V0ZXJTdGFydFkpO1xuICAgIGNvbnN0IG91dGVyRW5kWCA9IE1hdGguY29zKG91dGVyRW5kQWRqdXN0ZWRBbmdsZSkgKiBvdXRlclJhZGl1cyArIHg7XG4gICAgY29uc3Qgb3V0ZXJFbmRZID0gTWF0aC5zaW4ob3V0ZXJFbmRBZGp1c3RlZEFuZ2xlKSAqIG91dGVyUmFkaXVzICsgeTtcbiAgICBjdHgubGluZVRvKG91dGVyRW5kWCwgb3V0ZXJFbmRZKTtcbiAgfVxuICBjdHguY2xvc2VQYXRoKCk7XG59XG5mdW5jdGlvbiBkcmF3QXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBjaXJjdWxhcikge1xuICBjb25zdCB7ZnVsbENpcmNsZXMsIHN0YXJ0QW5nbGUsIGNpcmN1bWZlcmVuY2V9ID0gZWxlbWVudDtcbiAgbGV0IGVuZEFuZ2xlID0gZWxlbWVudC5lbmRBbmdsZTtcbiAgaWYgKGZ1bGxDaXJjbGVzKSB7XG4gICAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgc3RhcnRBbmdsZSArIFRBVSwgY2lyY3VsYXIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZnVsbENpcmNsZXM7ICsraSkge1xuICAgICAgY3R4LmZpbGwoKTtcbiAgICB9XG4gICAgaWYgKCFpc05hTihjaXJjdW1mZXJlbmNlKSkge1xuICAgICAgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgY2lyY3VtZmVyZW5jZSAlIFRBVTtcbiAgICAgIGlmIChjaXJjdW1mZXJlbmNlICUgVEFVID09PSAwKSB7XG4gICAgICAgIGVuZEFuZ2xlICs9IFRBVTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUsIGNpcmN1bGFyKTtcbiAgY3R4LmZpbGwoKTtcbiAgcmV0dXJuIGVuZEFuZ2xlO1xufVxuZnVuY3Rpb24gZHJhd0Z1bGxDaXJjbGVCb3JkZXJzKGN0eCwgZWxlbWVudCwgaW5uZXIpIHtcbiAgY29uc3Qge3gsIHksIHN0YXJ0QW5nbGUsIHBpeGVsTWFyZ2luLCBmdWxsQ2lyY2xlc30gPSBlbGVtZW50O1xuICBjb25zdCBvdXRlclJhZGl1cyA9IE1hdGgubWF4KGVsZW1lbnQub3V0ZXJSYWRpdXMgLSBwaXhlbE1hcmdpbiwgMCk7XG4gIGNvbnN0IGlubmVyUmFkaXVzID0gZWxlbWVudC5pbm5lclJhZGl1cyArIHBpeGVsTWFyZ2luO1xuICBsZXQgaTtcbiAgaWYgKGlubmVyKSB7XG4gICAgY2xpcEFyYyhjdHgsIGVsZW1lbnQsIHN0YXJ0QW5nbGUgKyBUQVUpO1xuICB9XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4LmFyYyh4LCB5LCBpbm5lclJhZGl1cywgc3RhcnRBbmdsZSArIFRBVSwgc3RhcnRBbmdsZSwgdHJ1ZSk7XG4gIGZvciAoaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKSB7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgc3RhcnRBbmdsZSwgc3RhcnRBbmdsZSArIFRBVSk7XG4gIGZvciAoaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKSB7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG59XG5mdW5jdGlvbiBkcmF3Qm9yZGVyKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSwgY2lyY3VsYXIpIHtcbiAgY29uc3Qge29wdGlvbnN9ID0gZWxlbWVudDtcbiAgY29uc3Qge2JvcmRlcldpZHRoLCBib3JkZXJKb2luU3R5bGV9ID0gb3B0aW9ucztcbiAgY29uc3QgaW5uZXIgPSBvcHRpb25zLmJvcmRlckFsaWduID09PSAnaW5uZXInO1xuICBpZiAoIWJvcmRlcldpZHRoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbm5lcikge1xuICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJXaWR0aCAqIDI7XG4gICAgY3R4LmxpbmVKb2luID0gYm9yZGVySm9pblN0eWxlIHx8ICdyb3VuZCc7XG4gIH0gZWxzZSB7XG4gICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlcldpZHRoO1xuICAgIGN0eC5saW5lSm9pbiA9IGJvcmRlckpvaW5TdHlsZSB8fCAnYmV2ZWwnO1xuICB9XG4gIGlmIChlbGVtZW50LmZ1bGxDaXJjbGVzKSB7XG4gICAgZHJhd0Z1bGxDaXJjbGVCb3JkZXJzKGN0eCwgZWxlbWVudCwgaW5uZXIpO1xuICB9XG4gIGlmIChpbm5lcikge1xuICAgIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBlbmRBbmdsZSk7XG4gIH1cbiAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUsIGNpcmN1bGFyKTtcbiAgY3R4LnN0cm9rZSgpO1xufVxuY2xhc3MgQXJjRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNpcmN1bWZlcmVuY2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zdGFydEFuZ2xlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZW5kQW5nbGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5pbm5lclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm91dGVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGl4ZWxNYXJnaW4gPSAwO1xuICAgIHRoaXMuZnVsbENpcmNsZXMgPSAwO1xuICAgIGlmIChjZmcpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICB9XG4gIH1cbiAgaW5SYW5nZShjaGFydFgsIGNoYXJ0WSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHBvaW50ID0gdGhpcy5nZXRQcm9wcyhbJ3gnLCAneSddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBjb25zdCB7YW5nbGUsIGRpc3RhbmNlfSA9IGdldEFuZ2xlRnJvbVBvaW50KHBvaW50LCB7eDogY2hhcnRYLCB5OiBjaGFydFl9KTtcbiAgICBjb25zdCB7c3RhcnRBbmdsZSwgZW5kQW5nbGUsIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgY2lyY3VtZmVyZW5jZX0gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICdlbmRBbmdsZScsXG4gICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgJ291dGVyUmFkaXVzJyxcbiAgICAgICdjaXJjdW1mZXJlbmNlJ1xuICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IHJBZGp1c3QgPSB0aGlzLm9wdGlvbnMuc3BhY2luZyAvIDI7XG4gICAgY29uc3QgX2NpcmN1bWZlcmVuY2UgPSB2YWx1ZU9yRGVmYXVsdChjaXJjdW1mZXJlbmNlLCBlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpO1xuICAgIGNvbnN0IGJldHdlZW5BbmdsZXMgPSBfY2lyY3VtZmVyZW5jZSA+PSBUQVUgfHwgX2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUpO1xuICAgIGNvbnN0IHdpdGhpblJhZGl1cyA9IF9pc0JldHdlZW4oZGlzdGFuY2UsIGlubmVyUmFkaXVzICsgckFkanVzdCwgb3V0ZXJSYWRpdXMgKyByQWRqdXN0KTtcbiAgICByZXR1cm4gKGJldHdlZW5BbmdsZXMgJiYgd2l0aGluUmFkaXVzKTtcbiAgfVxuICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qge3gsIHksIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXN9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAneCcsXG4gICAgICAneScsXG4gICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAnZW5kQW5nbGUnLFxuICAgICAgJ2lubmVyUmFkaXVzJyxcbiAgICAgICdvdXRlclJhZGl1cycsXG4gICAgICAnY2lyY3VtZmVyZW5jZScsXG4gICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3Qge29mZnNldCwgc3BhY2luZ30gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgaGFsZkFuZ2xlID0gKHN0YXJ0QW5nbGUgKyBlbmRBbmdsZSkgLyAyO1xuICAgIGNvbnN0IGhhbGZSYWRpdXMgPSAoaW5uZXJSYWRpdXMgKyBvdXRlclJhZGl1cyArIHNwYWNpbmcgKyBvZmZzZXQpIC8gMjtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeCArIE1hdGguY29zKGhhbGZBbmdsZSkgKiBoYWxmUmFkaXVzLFxuICAgICAgeTogeSArIE1hdGguc2luKGhhbGZBbmdsZSkgKiBoYWxmUmFkaXVzXG4gICAgfTtcbiAgfVxuICB0b29sdGlwUG9zaXRpb24odXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiB0aGlzLmdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG4gIGRyYXcoY3R4KSB7XG4gICAgY29uc3Qge29wdGlvbnMsIGNpcmN1bWZlcmVuY2V9ID0gdGhpcztcbiAgICBjb25zdCBvZmZzZXQgPSAob3B0aW9ucy5vZmZzZXQgfHwgMCkgLyAyO1xuICAgIGNvbnN0IHNwYWNpbmcgPSAob3B0aW9ucy5zcGFjaW5nIHx8IDApIC8gMjtcbiAgICBjb25zdCBjaXJjdWxhciA9IG9wdGlvbnMuY2lyY3VsYXI7XG4gICAgdGhpcy5waXhlbE1hcmdpbiA9IChvcHRpb25zLmJvcmRlckFsaWduID09PSAnaW5uZXInKSA/IDAuMzMgOiAwO1xuICAgIHRoaXMuZnVsbENpcmNsZXMgPSBjaXJjdW1mZXJlbmNlID4gVEFVID8gTWF0aC5mbG9vcihjaXJjdW1mZXJlbmNlIC8gVEFVKSA6IDA7XG4gICAgaWYgKGNpcmN1bWZlcmVuY2UgPT09IDAgfHwgdGhpcy5pbm5lclJhZGl1cyA8IDAgfHwgdGhpcy5vdXRlclJhZGl1cyA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3R4LnNhdmUoKTtcbiAgICBsZXQgcmFkaXVzT2Zmc2V0ID0gMDtcbiAgICBpZiAob2Zmc2V0KSB7XG4gICAgICByYWRpdXNPZmZzZXQgPSBvZmZzZXQgLyAyO1xuICAgICAgY29uc3QgaGFsZkFuZ2xlID0gKHRoaXMuc3RhcnRBbmdsZSArIHRoaXMuZW5kQW5nbGUpIC8gMjtcbiAgICAgIGN0eC50cmFuc2xhdGUoTWF0aC5jb3MoaGFsZkFuZ2xlKSAqIHJhZGl1c09mZnNldCwgTWF0aC5zaW4oaGFsZkFuZ2xlKSAqIHJhZGl1c09mZnNldCk7XG4gICAgICBpZiAodGhpcy5jaXJjdW1mZXJlbmNlID49IFBJKSB7XG4gICAgICAgIHJhZGl1c09mZnNldCA9IG9mZnNldDtcbiAgICAgIH1cbiAgICB9XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgY29uc3QgZW5kQW5nbGUgPSBkcmF3QXJjKGN0eCwgdGhpcywgcmFkaXVzT2Zmc2V0LCBzcGFjaW5nLCBjaXJjdWxhcik7XG4gICAgZHJhd0JvcmRlcihjdHgsIHRoaXMsIHJhZGl1c09mZnNldCwgc3BhY2luZywgZW5kQW5nbGUsIGNpcmN1bGFyKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG59XG5BcmNFbGVtZW50LmlkID0gJ2FyYyc7XG5BcmNFbGVtZW50LmRlZmF1bHRzID0ge1xuICBib3JkZXJBbGlnbjogJ2NlbnRlcicsXG4gIGJvcmRlckNvbG9yOiAnI2ZmZicsXG4gIGJvcmRlckpvaW5TdHlsZTogdW5kZWZpbmVkLFxuICBib3JkZXJSYWRpdXM6IDAsXG4gIGJvcmRlcldpZHRoOiAyLFxuICBvZmZzZXQ6IDAsXG4gIHNwYWNpbmc6IDAsXG4gIGFuZ2xlOiB1bmRlZmluZWQsXG4gIGNpcmN1bGFyOiB0cnVlLFxufTtcbkFyY0VsZW1lbnQuZGVmYXVsdFJvdXRlcyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJ1xufTtcblxuZnVuY3Rpb24gc2V0U3R5bGUoY3R4LCBvcHRpb25zLCBzdHlsZSA9IG9wdGlvbnMpIHtcbiAgY3R4LmxpbmVDYXAgPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJDYXBTdHlsZSwgb3B0aW9ucy5ib3JkZXJDYXBTdHlsZSk7XG4gIGN0eC5zZXRMaW5lRGFzaCh2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJEYXNoLCBvcHRpb25zLmJvcmRlckRhc2gpKTtcbiAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyRGFzaE9mZnNldCwgb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0KTtcbiAgY3R4LmxpbmVKb2luID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVySm9pblN0eWxlLCBvcHRpb25zLmJvcmRlckpvaW5TdHlsZSk7XG4gIGN0eC5saW5lV2lkdGggPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJXaWR0aCwgb3B0aW9ucy5ib3JkZXJXaWR0aCk7XG4gIGN0eC5zdHJva2VTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckNvbG9yLCBvcHRpb25zLmJvcmRlckNvbG9yKTtcbn1cbmZ1bmN0aW9uIGxpbmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQpIHtcbiAgY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xufVxuZnVuY3Rpb24gZ2V0TGluZU1ldGhvZChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnN0ZXBwZWQpIHtcbiAgICByZXR1cm4gX3N0ZXBwZWRMaW5lVG87XG4gIH1cbiAgaWYgKG9wdGlvbnMudGVuc2lvbiB8fCBvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcbiAgICByZXR1cm4gX2JlemllckN1cnZlVG87XG4gIH1cbiAgcmV0dXJuIGxpbmVUbztcbn1cbmZ1bmN0aW9uIHBhdGhWYXJzKHBvaW50cywgc2VnbWVudCwgcGFyYW1zID0ge30pIHtcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCB7c3RhcnQ6IHBhcmFtc1N0YXJ0ID0gMCwgZW5kOiBwYXJhbXNFbmQgPSBjb3VudCAtIDF9ID0gcGFyYW1zO1xuICBjb25zdCB7c3RhcnQ6IHNlZ21lbnRTdGFydCwgZW5kOiBzZWdtZW50RW5kfSA9IHNlZ21lbnQ7XG4gIGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgocGFyYW1zU3RhcnQsIHNlZ21lbnRTdGFydCk7XG4gIGNvbnN0IGVuZCA9IE1hdGgubWluKHBhcmFtc0VuZCwgc2VnbWVudEVuZCk7XG4gIGNvbnN0IG91dHNpZGUgPSBwYXJhbXNTdGFydCA8IHNlZ21lbnRTdGFydCAmJiBwYXJhbXNFbmQgPCBzZWdtZW50U3RhcnQgfHwgcGFyYW1zU3RhcnQgPiBzZWdtZW50RW5kICYmIHBhcmFtc0VuZCA+IHNlZ21lbnRFbmQ7XG4gIHJldHVybiB7XG4gICAgY291bnQsXG4gICAgc3RhcnQsXG4gICAgbG9vcDogc2VnbWVudC5sb29wLFxuICAgIGlsZW46IGVuZCA8IHN0YXJ0ICYmICFvdXRzaWRlID8gY291bnQgKyBlbmQgLSBzdGFydCA6IGVuZCAtIHN0YXJ0XG4gIH07XG59XG5mdW5jdGlvbiBwYXRoU2VnbWVudChjdHgsIGxpbmUsIHNlZ21lbnQsIHBhcmFtcykge1xuICBjb25zdCB7cG9pbnRzLCBvcHRpb25zfSA9IGxpbmU7XG4gIGNvbnN0IHtjb3VudCwgc3RhcnQsIGxvb3AsIGlsZW59ID0gcGF0aFZhcnMocG9pbnRzLCBzZWdtZW50LCBwYXJhbXMpO1xuICBjb25zdCBsaW5lTWV0aG9kID0gZ2V0TGluZU1ldGhvZChvcHRpb25zKTtcbiAgbGV0IHttb3ZlID0gdHJ1ZSwgcmV2ZXJzZX0gPSBwYXJhbXMgfHwge307XG4gIGxldCBpLCBwb2ludCwgcHJldjtcbiAgZm9yIChpID0gMDsgaSA8PSBpbGVuOyArK2kpIHtcbiAgICBwb2ludCA9IHBvaW50c1soc3RhcnQgKyAocmV2ZXJzZSA/IGlsZW4gLSBpIDogaSkpICUgY291bnRdO1xuICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKG1vdmUpIHtcbiAgICAgIGN0eC5tb3ZlVG8ocG9pbnQueCwgcG9pbnQueSk7XG4gICAgICBtb3ZlID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmVNZXRob2QoY3R4LCBwcmV2LCBwb2ludCwgcmV2ZXJzZSwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgICB9XG4gICAgcHJldiA9IHBvaW50O1xuICB9XG4gIGlmIChsb29wKSB7XG4gICAgcG9pbnQgPSBwb2ludHNbKHN0YXJ0ICsgKHJldmVyc2UgPyBpbGVuIDogMCkpICUgY291bnRdO1xuICAgIGxpbmVNZXRob2QoY3R4LCBwcmV2LCBwb2ludCwgcmV2ZXJzZSwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgfVxuICByZXR1cm4gISFsb29wO1xufVxuZnVuY3Rpb24gZmFzdFBhdGhTZWdtZW50KGN0eCwgbGluZSwgc2VnbWVudCwgcGFyYW1zKSB7XG4gIGNvbnN0IHBvaW50cyA9IGxpbmUucG9pbnRzO1xuICBjb25zdCB7Y291bnQsIHN0YXJ0LCBpbGVufSA9IHBhdGhWYXJzKHBvaW50cywgc2VnbWVudCwgcGFyYW1zKTtcbiAgY29uc3Qge21vdmUgPSB0cnVlLCByZXZlcnNlfSA9IHBhcmFtcyB8fCB7fTtcbiAgbGV0IGF2Z1ggPSAwO1xuICBsZXQgY291bnRYID0gMDtcbiAgbGV0IGksIHBvaW50LCBwcmV2WCwgbWluWSwgbWF4WSwgbGFzdFk7XG4gIGNvbnN0IHBvaW50SW5kZXggPSAoaW5kZXgpID0+IChzdGFydCArIChyZXZlcnNlID8gaWxlbiAtIGluZGV4IDogaW5kZXgpKSAlIGNvdW50O1xuICBjb25zdCBkcmF3WCA9ICgpID0+IHtcbiAgICBpZiAobWluWSAhPT0gbWF4WSkge1xuICAgICAgY3R4LmxpbmVUbyhhdmdYLCBtYXhZKTtcbiAgICAgIGN0eC5saW5lVG8oYXZnWCwgbWluWSk7XG4gICAgICBjdHgubGluZVRvKGF2Z1gsIGxhc3RZKTtcbiAgICB9XG4gIH07XG4gIGlmIChtb3ZlKSB7XG4gICAgcG9pbnQgPSBwb2ludHNbcG9pbnRJbmRleCgwKV07XG4gICAgY3R4Lm1vdmVUbyhwb2ludC54LCBwb2ludC55KTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDw9IGlsZW47ICsraSkge1xuICAgIHBvaW50ID0gcG9pbnRzW3BvaW50SW5kZXgoaSldO1xuICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgeCA9IHBvaW50Lng7XG4gICAgY29uc3QgeSA9IHBvaW50Lnk7XG4gICAgY29uc3QgdHJ1bmNYID0geCB8IDA7XG4gICAgaWYgKHRydW5jWCA9PT0gcHJldlgpIHtcbiAgICAgIGlmICh5IDwgbWluWSkge1xuICAgICAgICBtaW5ZID0geTtcbiAgICAgIH0gZWxzZSBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgbWF4WSA9IHk7XG4gICAgICB9XG4gICAgICBhdmdYID0gKGNvdW50WCAqIGF2Z1ggKyB4KSAvICsrY291bnRYO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmF3WCgpO1xuICAgICAgY3R4LmxpbmVUbyh4LCB5KTtcbiAgICAgIHByZXZYID0gdHJ1bmNYO1xuICAgICAgY291bnRYID0gMDtcbiAgICAgIG1pblkgPSBtYXhZID0geTtcbiAgICB9XG4gICAgbGFzdFkgPSB5O1xuICB9XG4gIGRyYXdYKCk7XG59XG5mdW5jdGlvbiBfZ2V0U2VnbWVudE1ldGhvZChsaW5lKSB7XG4gIGNvbnN0IG9wdHMgPSBsaW5lLm9wdGlvbnM7XG4gIGNvbnN0IGJvcmRlckRhc2ggPSBvcHRzLmJvcmRlckRhc2ggJiYgb3B0cy5ib3JkZXJEYXNoLmxlbmd0aDtcbiAgY29uc3QgdXNlRmFzdFBhdGggPSAhbGluZS5fZGVjaW1hdGVkICYmICFsaW5lLl9sb29wICYmICFvcHRzLnRlbnNpb24gJiYgb3B0cy5jdWJpY0ludGVycG9sYXRpb25Nb2RlICE9PSAnbW9ub3RvbmUnICYmICFvcHRzLnN0ZXBwZWQgJiYgIWJvcmRlckRhc2g7XG4gIHJldHVybiB1c2VGYXN0UGF0aCA/IGZhc3RQYXRoU2VnbWVudCA6IHBhdGhTZWdtZW50O1xufVxuZnVuY3Rpb24gX2dldEludGVycG9sYXRpb25NZXRob2Qob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5zdGVwcGVkKSB7XG4gICAgcmV0dXJuIF9zdGVwcGVkSW50ZXJwb2xhdGlvbjtcbiAgfVxuICBpZiAob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgIHJldHVybiBfYmV6aWVySW50ZXJwb2xhdGlvbjtcbiAgfVxuICByZXR1cm4gX3BvaW50SW5MaW5lO1xufVxuZnVuY3Rpb24gc3Ryb2tlUGF0aFdpdGhDYWNoZShjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCkge1xuICBsZXQgcGF0aCA9IGxpbmUuX3BhdGg7XG4gIGlmICghcGF0aCkge1xuICAgIHBhdGggPSBsaW5lLl9wYXRoID0gbmV3IFBhdGgyRCgpO1xuICAgIGlmIChsaW5lLnBhdGgocGF0aCwgc3RhcnQsIGNvdW50KSkge1xuICAgICAgcGF0aC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH1cbiAgc2V0U3R5bGUoY3R4LCBsaW5lLm9wdGlvbnMpO1xuICBjdHguc3Ryb2tlKHBhdGgpO1xufVxuZnVuY3Rpb24gc3Ryb2tlUGF0aERpcmVjdChjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCkge1xuICBjb25zdCB7c2VnbWVudHMsIG9wdGlvbnN9ID0gbGluZTtcbiAgY29uc3Qgc2VnbWVudE1ldGhvZCA9IF9nZXRTZWdtZW50TWV0aG9kKGxpbmUpO1xuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICBzZXRTdHlsZShjdHgsIG9wdGlvbnMsIHNlZ21lbnQuc3R5bGUpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBpZiAoc2VnbWVudE1ldGhvZChjdHgsIGxpbmUsIHNlZ21lbnQsIHtzdGFydCwgZW5kOiBzdGFydCArIGNvdW50IC0gMX0pKSB7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgfVxuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxufVxuY29uc3QgdXNlUGF0aDJEID0gdHlwZW9mIFBhdGgyRCA9PT0gJ2Z1bmN0aW9uJztcbmZ1bmN0aW9uIGRyYXcoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgaWYgKHVzZVBhdGgyRCAmJiAhbGluZS5vcHRpb25zLnNlZ21lbnQpIHtcbiAgICBzdHJva2VQYXRoV2l0aENhY2hlKGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KTtcbiAgfSBlbHNlIHtcbiAgICBzdHJva2VQYXRoRGlyZWN0KGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KTtcbiAgfVxufVxuY2xhc3MgTGluZUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmFuaW1hdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fY2hhcnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbG9vcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9mdWxsTG9vcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wYXRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3BvaW50cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zZWdtZW50cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9kZWNpbWF0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gICAgdGhpcy5fZGF0YXNldEluZGV4ID0gdW5kZWZpbmVkO1xuICAgIGlmIChjZmcpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICB9XG4gIH1cbiAgdXBkYXRlQ29udHJvbFBvaW50cyhjaGFydEFyZWEsIGluZGV4QXhpcykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKChvcHRpb25zLnRlbnNpb24gfHwgb3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSAmJiAhb3B0aW9ucy5zdGVwcGVkICYmICF0aGlzLl9wb2ludHNVcGRhdGVkKSB7XG4gICAgICBjb25zdCBsb29wID0gb3B0aW9ucy5zcGFuR2FwcyA/IHRoaXMuX2xvb3AgOiB0aGlzLl9mdWxsTG9vcDtcbiAgICAgIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzKHRoaXMuX3BvaW50cywgb3B0aW9ucywgY2hhcnRBcmVhLCBsb29wLCBpbmRleEF4aXMpO1xuICAgICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIHNldCBwb2ludHMocG9pbnRzKSB7XG4gICAgdGhpcy5fcG9pbnRzID0gcG9pbnRzO1xuICAgIGRlbGV0ZSB0aGlzLl9zZWdtZW50cztcbiAgICBkZWxldGUgdGhpcy5fcGF0aDtcbiAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gIH1cbiAgZ2V0IHBvaW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9pbnRzO1xuICB9XG4gIGdldCBzZWdtZW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VnbWVudHMgfHwgKHRoaXMuX3NlZ21lbnRzID0gX2NvbXB1dGVTZWdtZW50cyh0aGlzLCB0aGlzLm9wdGlvbnMuc2VnbWVudCkpO1xuICB9XG4gIGZpcnN0KCkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICByZXR1cm4gc2VnbWVudHMubGVuZ3RoICYmIHBvaW50c1tzZWdtZW50c1swXS5zdGFydF07XG4gIH1cbiAgbGFzdCgpIHtcbiAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgY29uc3QgY291bnQgPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGNvdW50ICYmIHBvaW50c1tzZWdtZW50c1tjb3VudCAtIDFdLmVuZF07XG4gIH1cbiAgaW50ZXJwb2xhdGUocG9pbnQsIHByb3BlcnR5KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB2YWx1ZSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICBjb25zdCBzZWdtZW50cyA9IF9ib3VuZFNlZ21lbnRzKHRoaXMsIHtwcm9wZXJ0eSwgc3RhcnQ6IHZhbHVlLCBlbmQ6IHZhbHVlfSk7XG4gICAgaWYgKCFzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3QgX2ludGVycG9sYXRlID0gX2dldEludGVycG9sYXRpb25NZXRob2Qob3B0aW9ucyk7XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgY29uc3Qge3N0YXJ0LCBlbmR9ID0gc2VnbWVudHNbaV07XG4gICAgICBjb25zdCBwMSA9IHBvaW50c1tzdGFydF07XG4gICAgICBjb25zdCBwMiA9IHBvaW50c1tlbmRdO1xuICAgICAgaWYgKHAxID09PSBwMikge1xuICAgICAgICByZXN1bHQucHVzaChwMSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgdCA9IE1hdGguYWJzKCh2YWx1ZSAtIHAxW3Byb3BlcnR5XSkgLyAocDJbcHJvcGVydHldIC0gcDFbcHJvcGVydHldKSk7XG4gICAgICBjb25zdCBpbnRlcnBvbGF0ZWQgPSBfaW50ZXJwb2xhdGUocDEsIHAyLCB0LCBvcHRpb25zLnN0ZXBwZWQpO1xuICAgICAgaW50ZXJwb2xhdGVkW3Byb3BlcnR5XSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgICAgIHJlc3VsdC5wdXNoKGludGVycG9sYXRlZCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAxID8gcmVzdWx0WzBdIDogcmVzdWx0O1xuICB9XG4gIHBhdGhTZWdtZW50KGN0eCwgc2VnbWVudCwgcGFyYW1zKSB7XG4gICAgY29uc3Qgc2VnbWVudE1ldGhvZCA9IF9nZXRTZWdtZW50TWV0aG9kKHRoaXMpO1xuICAgIHJldHVybiBzZWdtZW50TWV0aG9kKGN0eCwgdGhpcywgc2VnbWVudCwgcGFyYW1zKTtcbiAgfVxuICBwYXRoKGN0eCwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZCh0aGlzKTtcbiAgICBsZXQgbG9vcCA9IHRoaXMuX2xvb3A7XG4gICAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICAgIGNvdW50ID0gY291bnQgfHwgKHRoaXMucG9pbnRzLmxlbmd0aCAtIHN0YXJ0KTtcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICAgIGxvb3AgJj0gc2VnbWVudE1ldGhvZChjdHgsIHRoaXMsIHNlZ21lbnQsIHtzdGFydCwgZW5kOiBzdGFydCArIGNvdW50IC0gMX0pO1xuICAgIH1cbiAgICByZXR1cm4gISFsb29wO1xuICB9XG4gIGRyYXcoY3R4LCBjaGFydEFyZWEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgfHwge307XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHMgfHwgW107XG4gICAgaWYgKHBvaW50cy5sZW5ndGggJiYgb3B0aW9ucy5ib3JkZXJXaWR0aCkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGRyYXcoY3R4LCB0aGlzLCBzdGFydCwgY291bnQpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYW5pbWF0ZWQpIHtcbiAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3BhdGggPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59XG5MaW5lRWxlbWVudC5pZCA9ICdsaW5lJztcbkxpbmVFbGVtZW50LmRlZmF1bHRzID0ge1xuICBib3JkZXJDYXBTdHlsZTogJ2J1dHQnLFxuICBib3JkZXJEYXNoOiBbXSxcbiAgYm9yZGVyRGFzaE9mZnNldDogMCxcbiAgYm9yZGVySm9pblN0eWxlOiAnbWl0ZXInLFxuICBib3JkZXJXaWR0aDogMyxcbiAgY2FwQmV6aWVyUG9pbnRzOiB0cnVlLFxuICBjdWJpY0ludGVycG9sYXRpb25Nb2RlOiAnZGVmYXVsdCcsXG4gIGZpbGw6IGZhbHNlLFxuICBzcGFuR2FwczogZmFsc2UsXG4gIHN0ZXBwZWQ6IGZhbHNlLFxuICB0ZW5zaW9uOiAwLFxufTtcbkxpbmVFbGVtZW50LmRlZmF1bHRSb3V0ZXMgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcicsXG4gIGJvcmRlckNvbG9yOiAnYm9yZGVyQ29sb3InXG59O1xuTGluZUVsZW1lbnQuZGVzY3JpcHRvcnMgPSB7XG4gIF9zY3JpcHRhYmxlOiB0cnVlLFxuICBfaW5kZXhhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ2JvcmRlckRhc2gnICYmIG5hbWUgIT09ICdmaWxsJyxcbn07XG5cbmZ1bmN0aW9uIGluUmFuZ2UkMShlbCwgcG9zLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBlbC5vcHRpb25zO1xuICBjb25zdCB7W2F4aXNdOiB2YWx1ZX0gPSBlbC5nZXRQcm9wcyhbYXhpc10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICByZXR1cm4gKE1hdGguYWJzKHBvcyAtIHZhbHVlKSA8IG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy5oaXRSYWRpdXMpO1xufVxuY2xhc3MgUG9pbnRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGFyc2VkID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc2tpcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnN0b3AgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGNmZykge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgIH1cbiAgfVxuICBpblJhbmdlKG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB7eCwgeX0gPSB0aGlzLmdldFByb3BzKFsneCcsICd5J10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiAoKE1hdGgucG93KG1vdXNlWCAtIHgsIDIpICsgTWF0aC5wb3cobW91c2VZIC0geSwgMikpIDwgTWF0aC5wb3cob3B0aW9ucy5oaXRSYWRpdXMgKyBvcHRpb25zLnJhZGl1cywgMikpO1xuICB9XG4gIGluWFJhbmdlKG1vdXNlWCwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBpblJhbmdlJDEodGhpcywgbW91c2VYLCAneCcsIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG4gIGluWVJhbmdlKG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBpblJhbmdlJDEodGhpcywgbW91c2VZLCAneScsIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG4gIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7eCwgeX0gPSB0aGlzLmdldFByb3BzKFsneCcsICd5J10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiB7eCwgeX07XG4gIH1cbiAgc2l6ZShvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgIGxldCByYWRpdXMgPSBvcHRpb25zLnJhZGl1cyB8fCAwO1xuICAgIHJhZGl1cyA9IE1hdGgubWF4KHJhZGl1cywgcmFkaXVzICYmIG9wdGlvbnMuaG92ZXJSYWRpdXMgfHwgMCk7XG4gICAgY29uc3QgYm9yZGVyV2lkdGggPSByYWRpdXMgJiYgb3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwO1xuICAgIHJldHVybiAocmFkaXVzICsgYm9yZGVyV2lkdGgpICogMjtcbiAgfVxuICBkcmF3KGN0eCwgYXJlYSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKHRoaXMuc2tpcCB8fCBvcHRpb25zLnJhZGl1cyA8IDAuMSB8fCAhX2lzUG9pbnRJbkFyZWEodGhpcywgYXJlYSwgdGhpcy5zaXplKG9wdGlvbnMpIC8gMikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgZHJhd1BvaW50KGN0eCwgb3B0aW9ucywgdGhpcy54LCB0aGlzLnkpO1xuICB9XG4gIGdldFJhbmdlKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgfHwge307XG4gICAgcmV0dXJuIG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy5oaXRSYWRpdXM7XG4gIH1cbn1cblBvaW50RWxlbWVudC5pZCA9ICdwb2ludCc7XG5Qb2ludEVsZW1lbnQuZGVmYXVsdHMgPSB7XG4gIGJvcmRlcldpZHRoOiAxLFxuICBoaXRSYWRpdXM6IDEsXG4gIGhvdmVyQm9yZGVyV2lkdGg6IDEsXG4gIGhvdmVyUmFkaXVzOiA0LFxuICBwb2ludFN0eWxlOiAnY2lyY2xlJyxcbiAgcmFkaXVzOiAzLFxuICByb3RhdGlvbjogMFxufTtcblBvaW50RWxlbWVudC5kZWZhdWx0Um91dGVzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICBib3JkZXJDb2xvcjogJ2JvcmRlckNvbG9yJ1xufTtcblxuZnVuY3Rpb24gZ2V0QmFyQm91bmRzKGJhciwgdXNlRmluYWxQb3NpdGlvbikge1xuICBjb25zdCB7eCwgeSwgYmFzZSwgd2lkdGgsIGhlaWdodH0gPSBiYXIuZ2V0UHJvcHMoWyd4JywgJ3knLCAnYmFzZScsICd3aWR0aCcsICdoZWlnaHQnXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gIGxldCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIGhhbGY7XG4gIGlmIChiYXIuaG9yaXpvbnRhbCkge1xuICAgIGhhbGYgPSBoZWlnaHQgLyAyO1xuICAgIGxlZnQgPSBNYXRoLm1pbih4LCBiYXNlKTtcbiAgICByaWdodCA9IE1hdGgubWF4KHgsIGJhc2UpO1xuICAgIHRvcCA9IHkgLSBoYWxmO1xuICAgIGJvdHRvbSA9IHkgKyBoYWxmO1xuICB9IGVsc2Uge1xuICAgIGhhbGYgPSB3aWR0aCAvIDI7XG4gICAgbGVmdCA9IHggLSBoYWxmO1xuICAgIHJpZ2h0ID0geCArIGhhbGY7XG4gICAgdG9wID0gTWF0aC5taW4oeSwgYmFzZSk7XG4gICAgYm90dG9tID0gTWF0aC5tYXgoeSwgYmFzZSk7XG4gIH1cbiAgcmV0dXJuIHtsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b219O1xufVxuZnVuY3Rpb24gc2tpcE9yTGltaXQoc2tpcCwgdmFsdWUsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBza2lwID8gMCA6IF9saW1pdFZhbHVlKHZhbHVlLCBtaW4sIG1heCk7XG59XG5mdW5jdGlvbiBwYXJzZUJvcmRlcldpZHRoKGJhciwgbWF4VywgbWF4SCkge1xuICBjb25zdCB2YWx1ZSA9IGJhci5vcHRpb25zLmJvcmRlcldpZHRoO1xuICBjb25zdCBza2lwID0gYmFyLmJvcmRlclNraXBwZWQ7XG4gIGNvbnN0IG8gPSB0b1RSQkwodmFsdWUpO1xuICByZXR1cm4ge1xuICAgIHQ6IHNraXBPckxpbWl0KHNraXAudG9wLCBvLnRvcCwgMCwgbWF4SCksXG4gICAgcjogc2tpcE9yTGltaXQoc2tpcC5yaWdodCwgby5yaWdodCwgMCwgbWF4VyksXG4gICAgYjogc2tpcE9yTGltaXQoc2tpcC5ib3R0b20sIG8uYm90dG9tLCAwLCBtYXhIKSxcbiAgICBsOiBza2lwT3JMaW1pdChza2lwLmxlZnQsIG8ubGVmdCwgMCwgbWF4VylcbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyUmFkaXVzKGJhciwgbWF4VywgbWF4SCkge1xuICBjb25zdCB7ZW5hYmxlQm9yZGVyUmFkaXVzfSA9IGJhci5nZXRQcm9wcyhbJ2VuYWJsZUJvcmRlclJhZGl1cyddKTtcbiAgY29uc3QgdmFsdWUgPSBiYXIub3B0aW9ucy5ib3JkZXJSYWRpdXM7XG4gIGNvbnN0IG8gPSB0b1RSQkxDb3JuZXJzKHZhbHVlKTtcbiAgY29uc3QgbWF4UiA9IE1hdGgubWluKG1heFcsIG1heEgpO1xuICBjb25zdCBza2lwID0gYmFyLmJvcmRlclNraXBwZWQ7XG4gIGNvbnN0IGVuYWJsZUJvcmRlciA9IGVuYWJsZUJvcmRlclJhZGl1cyB8fCBpc09iamVjdCh2YWx1ZSk7XG4gIHJldHVybiB7XG4gICAgdG9wTGVmdDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLnRvcCB8fCBza2lwLmxlZnQsIG8udG9wTGVmdCwgMCwgbWF4UiksXG4gICAgdG9wUmlnaHQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC50b3AgfHwgc2tpcC5yaWdodCwgby50b3BSaWdodCwgMCwgbWF4UiksXG4gICAgYm90dG9tTGVmdDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLmJvdHRvbSB8fCBza2lwLmxlZnQsIG8uYm90dG9tTGVmdCwgMCwgbWF4UiksXG4gICAgYm90dG9tUmlnaHQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC5ib3R0b20gfHwgc2tpcC5yaWdodCwgby5ib3R0b21SaWdodCwgMCwgbWF4UilcbiAgfTtcbn1cbmZ1bmN0aW9uIGJvdW5kaW5nUmVjdHMoYmFyKSB7XG4gIGNvbnN0IGJvdW5kcyA9IGdldEJhckJvdW5kcyhiYXIpO1xuICBjb25zdCB3aWR0aCA9IGJvdW5kcy5yaWdodCAtIGJvdW5kcy5sZWZ0O1xuICBjb25zdCBoZWlnaHQgPSBib3VuZHMuYm90dG9tIC0gYm91bmRzLnRvcDtcbiAgY29uc3QgYm9yZGVyID0gcGFyc2VCb3JkZXJXaWR0aChiYXIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG4gIGNvbnN0IHJhZGl1cyA9IHBhcnNlQm9yZGVyUmFkaXVzKGJhciwgd2lkdGggLyAyLCBoZWlnaHQgLyAyKTtcbiAgcmV0dXJuIHtcbiAgICBvdXRlcjoge1xuICAgICAgeDogYm91bmRzLmxlZnQsXG4gICAgICB5OiBib3VuZHMudG9wLFxuICAgICAgdzogd2lkdGgsXG4gICAgICBoOiBoZWlnaHQsXG4gICAgICByYWRpdXNcbiAgICB9LFxuICAgIGlubmVyOiB7XG4gICAgICB4OiBib3VuZHMubGVmdCArIGJvcmRlci5sLFxuICAgICAgeTogYm91bmRzLnRvcCArIGJvcmRlci50LFxuICAgICAgdzogd2lkdGggLSBib3JkZXIubCAtIGJvcmRlci5yLFxuICAgICAgaDogaGVpZ2h0IC0gYm9yZGVyLnQgLSBib3JkZXIuYixcbiAgICAgIHJhZGl1czoge1xuICAgICAgICB0b3BMZWZ0OiBNYXRoLm1heCgwLCByYWRpdXMudG9wTGVmdCAtIE1hdGgubWF4KGJvcmRlci50LCBib3JkZXIubCkpLFxuICAgICAgICB0b3BSaWdodDogTWF0aC5tYXgoMCwgcmFkaXVzLnRvcFJpZ2h0IC0gTWF0aC5tYXgoYm9yZGVyLnQsIGJvcmRlci5yKSksXG4gICAgICAgIGJvdHRvbUxlZnQ6IE1hdGgubWF4KDAsIHJhZGl1cy5ib3R0b21MZWZ0IC0gTWF0aC5tYXgoYm9yZGVyLmIsIGJvcmRlci5sKSksXG4gICAgICAgIGJvdHRvbVJpZ2h0OiBNYXRoLm1heCgwLCByYWRpdXMuYm90dG9tUmlnaHQgLSBNYXRoLm1heChib3JkZXIuYiwgYm9yZGVyLnIpKSxcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpblJhbmdlKGJhciwgeCwgeSwgdXNlRmluYWxQb3NpdGlvbikge1xuICBjb25zdCBza2lwWCA9IHggPT09IG51bGw7XG4gIGNvbnN0IHNraXBZID0geSA9PT0gbnVsbDtcbiAgY29uc3Qgc2tpcEJvdGggPSBza2lwWCAmJiBza2lwWTtcbiAgY29uc3QgYm91bmRzID0gYmFyICYmICFza2lwQm90aCAmJiBnZXRCYXJCb3VuZHMoYmFyLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgcmV0dXJuIGJvdW5kc1xuXHRcdCYmIChza2lwWCB8fCBfaXNCZXR3ZWVuKHgsIGJvdW5kcy5sZWZ0LCBib3VuZHMucmlnaHQpKVxuXHRcdCYmIChza2lwWSB8fCBfaXNCZXR3ZWVuKHksIGJvdW5kcy50b3AsIGJvdW5kcy5ib3R0b20pKTtcbn1cbmZ1bmN0aW9uIGhhc1JhZGl1cyhyYWRpdXMpIHtcbiAgcmV0dXJuIHJhZGl1cy50b3BMZWZ0IHx8IHJhZGl1cy50b3BSaWdodCB8fCByYWRpdXMuYm90dG9tTGVmdCB8fCByYWRpdXMuYm90dG9tUmlnaHQ7XG59XG5mdW5jdGlvbiBhZGROb3JtYWxSZWN0UGF0aChjdHgsIHJlY3QpIHtcbiAgY3R4LnJlY3QocmVjdC54LCByZWN0LnksIHJlY3QudywgcmVjdC5oKTtcbn1cbmZ1bmN0aW9uIGluZmxhdGVSZWN0KHJlY3QsIGFtb3VudCwgcmVmUmVjdCA9IHt9KSB7XG4gIGNvbnN0IHggPSByZWN0LnggIT09IHJlZlJlY3QueCA/IC1hbW91bnQgOiAwO1xuICBjb25zdCB5ID0gcmVjdC55ICE9PSByZWZSZWN0LnkgPyAtYW1vdW50IDogMDtcbiAgY29uc3QgdyA9IChyZWN0LnggKyByZWN0LncgIT09IHJlZlJlY3QueCArIHJlZlJlY3QudyA/IGFtb3VudCA6IDApIC0geDtcbiAgY29uc3QgaCA9IChyZWN0LnkgKyByZWN0LmggIT09IHJlZlJlY3QueSArIHJlZlJlY3QuaCA/IGFtb3VudCA6IDApIC0geTtcbiAgcmV0dXJuIHtcbiAgICB4OiByZWN0LnggKyB4LFxuICAgIHk6IHJlY3QueSArIHksXG4gICAgdzogcmVjdC53ICsgdyxcbiAgICBoOiByZWN0LmggKyBoLFxuICAgIHJhZGl1czogcmVjdC5yYWRpdXNcbiAgfTtcbn1cbmNsYXNzIEJhckVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ob3Jpem9udGFsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYmFzZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaW5mbGF0ZUFtb3VudCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoY2ZnKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgfVxuICB9XG4gIGRyYXcoY3R4KSB7XG4gICAgY29uc3Qge2luZmxhdGVBbW91bnQsIG9wdGlvbnM6IHtib3JkZXJDb2xvciwgYmFja2dyb3VuZENvbG9yfX0gPSB0aGlzO1xuICAgIGNvbnN0IHtpbm5lciwgb3V0ZXJ9ID0gYm91bmRpbmdSZWN0cyh0aGlzKTtcbiAgICBjb25zdCBhZGRSZWN0UGF0aCA9IGhhc1JhZGl1cyhvdXRlci5yYWRpdXMpID8gYWRkUm91bmRlZFJlY3RQYXRoIDogYWRkTm9ybWFsUmVjdFBhdGg7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBpZiAob3V0ZXIudyAhPT0gaW5uZXIudyB8fCBvdXRlci5oICE9PSBpbm5lci5oKSB7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBhZGRSZWN0UGF0aChjdHgsIGluZmxhdGVSZWN0KG91dGVyLCBpbmZsYXRlQW1vdW50LCBpbm5lcikpO1xuICAgICAgY3R4LmNsaXAoKTtcbiAgICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3QoaW5uZXIsIC1pbmZsYXRlQW1vdW50LCBvdXRlcikpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGJvcmRlckNvbG9yO1xuICAgICAgY3R4LmZpbGwoJ2V2ZW5vZGQnKTtcbiAgICB9XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3QoaW5uZXIsIGluZmxhdGVBbW91bnQpKTtcbiAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgIGN0eC5maWxsKCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxuICBpblJhbmdlKG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGluUmFuZ2UodGhpcywgbW91c2VYLCBtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG4gIGluWFJhbmdlKG1vdXNlWCwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG1vdXNlWCwgbnVsbCwgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cbiAgaW5ZUmFuZ2UobW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGluUmFuZ2UodGhpcywgbnVsbCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qge3gsIHksIGJhc2UsIGhvcml6b250YWx9ID0gdGhpcy5nZXRQcm9wcyhbJ3gnLCAneScsICdiYXNlJywgJ2hvcml6b250YWwnXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGhvcml6b250YWwgPyAoeCArIGJhc2UpIC8gMiA6IHgsXG4gICAgICB5OiBob3Jpem9udGFsID8geSA6ICh5ICsgYmFzZSkgLyAyXG4gICAgfTtcbiAgfVxuICBnZXRSYW5nZShheGlzKSB7XG4gICAgcmV0dXJuIGF4aXMgPT09ICd4JyA/IHRoaXMud2lkdGggLyAyIDogdGhpcy5oZWlnaHQgLyAyO1xuICB9XG59XG5CYXJFbGVtZW50LmlkID0gJ2Jhcic7XG5CYXJFbGVtZW50LmRlZmF1bHRzID0ge1xuICBib3JkZXJTa2lwcGVkOiAnc3RhcnQnLFxuICBib3JkZXJXaWR0aDogMCxcbiAgYm9yZGVyUmFkaXVzOiAwLFxuICBpbmZsYXRlQW1vdW50OiAnYXV0bycsXG4gIHBvaW50U3R5bGU6IHVuZGVmaW5lZFxufTtcbkJhckVsZW1lbnQuZGVmYXVsdFJvdXRlcyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbn07XG5cbnZhciBlbGVtZW50cyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkFyY0VsZW1lbnQ6IEFyY0VsZW1lbnQsXG5MaW5lRWxlbWVudDogTGluZUVsZW1lbnQsXG5Qb2ludEVsZW1lbnQ6IFBvaW50RWxlbWVudCxcbkJhckVsZW1lbnQ6IEJhckVsZW1lbnRcbn0pO1xuXG5mdW5jdGlvbiBsdHRiRGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoLCBvcHRpb25zKSB7XG4gIGNvbnN0IHNhbXBsZXMgPSBvcHRpb25zLnNhbXBsZXMgfHwgYXZhaWxhYmxlV2lkdGg7XG4gIGlmIChzYW1wbGVzID49IGNvdW50KSB7XG4gICAgcmV0dXJuIGRhdGEuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgY291bnQpO1xuICB9XG4gIGNvbnN0IGRlY2ltYXRlZCA9IFtdO1xuICBjb25zdCBidWNrZXRXaWR0aCA9IChjb3VudCAtIDIpIC8gKHNhbXBsZXMgLSAyKTtcbiAgbGV0IHNhbXBsZWRJbmRleCA9IDA7XG4gIGNvbnN0IGVuZEluZGV4ID0gc3RhcnQgKyBjb3VudCAtIDE7XG4gIGxldCBhID0gc3RhcnQ7XG4gIGxldCBpLCBtYXhBcmVhUG9pbnQsIG1heEFyZWEsIGFyZWEsIG5leHRBO1xuICBkZWNpbWF0ZWRbc2FtcGxlZEluZGV4KytdID0gZGF0YVthXTtcbiAgZm9yIChpID0gMDsgaSA8IHNhbXBsZXMgLSAyOyBpKyspIHtcbiAgICBsZXQgYXZnWCA9IDA7XG4gICAgbGV0IGF2Z1kgPSAwO1xuICAgIGxldCBqO1xuICAgIGNvbnN0IGF2Z1JhbmdlU3RhcnQgPSBNYXRoLmZsb29yKChpICsgMSkgKiBidWNrZXRXaWR0aCkgKyAxICsgc3RhcnQ7XG4gICAgY29uc3QgYXZnUmFuZ2VFbmQgPSBNYXRoLm1pbihNYXRoLmZsb29yKChpICsgMikgKiBidWNrZXRXaWR0aCkgKyAxLCBjb3VudCkgKyBzdGFydDtcbiAgICBjb25zdCBhdmdSYW5nZUxlbmd0aCA9IGF2Z1JhbmdlRW5kIC0gYXZnUmFuZ2VTdGFydDtcbiAgICBmb3IgKGogPSBhdmdSYW5nZVN0YXJ0OyBqIDwgYXZnUmFuZ2VFbmQ7IGorKykge1xuICAgICAgYXZnWCArPSBkYXRhW2pdLng7XG4gICAgICBhdmdZICs9IGRhdGFbal0ueTtcbiAgICB9XG4gICAgYXZnWCAvPSBhdmdSYW5nZUxlbmd0aDtcbiAgICBhdmdZIC89IGF2Z1JhbmdlTGVuZ3RoO1xuICAgIGNvbnN0IHJhbmdlT2ZmcyA9IE1hdGguZmxvb3IoaSAqIGJ1Y2tldFdpZHRoKSArIDEgKyBzdGFydDtcbiAgICBjb25zdCByYW5nZVRvID0gTWF0aC5taW4oTWF0aC5mbG9vcigoaSArIDEpICogYnVja2V0V2lkdGgpICsgMSwgY291bnQpICsgc3RhcnQ7XG4gICAgY29uc3Qge3g6IHBvaW50QXgsIHk6IHBvaW50QXl9ID0gZGF0YVthXTtcbiAgICBtYXhBcmVhID0gYXJlYSA9IC0xO1xuICAgIGZvciAoaiA9IHJhbmdlT2ZmczsgaiA8IHJhbmdlVG87IGorKykge1xuICAgICAgYXJlYSA9IDAuNSAqIE1hdGguYWJzKFxuICAgICAgICAocG9pbnRBeCAtIGF2Z1gpICogKGRhdGFbal0ueSAtIHBvaW50QXkpIC1cbiAgICAgICAgKHBvaW50QXggLSBkYXRhW2pdLngpICogKGF2Z1kgLSBwb2ludEF5KVxuICAgICAgKTtcbiAgICAgIGlmIChhcmVhID4gbWF4QXJlYSkge1xuICAgICAgICBtYXhBcmVhID0gYXJlYTtcbiAgICAgICAgbWF4QXJlYVBvaW50ID0gZGF0YVtqXTtcbiAgICAgICAgbmV4dEEgPSBqO1xuICAgICAgfVxuICAgIH1cbiAgICBkZWNpbWF0ZWRbc2FtcGxlZEluZGV4KytdID0gbWF4QXJlYVBvaW50O1xuICAgIGEgPSBuZXh0QTtcbiAgfVxuICBkZWNpbWF0ZWRbc2FtcGxlZEluZGV4KytdID0gZGF0YVtlbmRJbmRleF07XG4gIHJldHVybiBkZWNpbWF0ZWQ7XG59XG5mdW5jdGlvbiBtaW5NYXhEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgpIHtcbiAgbGV0IGF2Z1ggPSAwO1xuICBsZXQgY291bnRYID0gMDtcbiAgbGV0IGksIHBvaW50LCB4LCB5LCBwcmV2WCwgbWluSW5kZXgsIG1heEluZGV4LCBzdGFydEluZGV4LCBtaW5ZLCBtYXhZO1xuICBjb25zdCBkZWNpbWF0ZWQgPSBbXTtcbiAgY29uc3QgZW5kSW5kZXggPSBzdGFydCArIGNvdW50IC0gMTtcbiAgY29uc3QgeE1pbiA9IGRhdGFbc3RhcnRdLng7XG4gIGNvbnN0IHhNYXggPSBkYXRhW2VuZEluZGV4XS54O1xuICBjb25zdCBkeCA9IHhNYXggLSB4TWluO1xuICBmb3IgKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSkge1xuICAgIHBvaW50ID0gZGF0YVtpXTtcbiAgICB4ID0gKHBvaW50LnggLSB4TWluKSAvIGR4ICogYXZhaWxhYmxlV2lkdGg7XG4gICAgeSA9IHBvaW50Lnk7XG4gICAgY29uc3QgdHJ1bmNYID0geCB8IDA7XG4gICAgaWYgKHRydW5jWCA9PT0gcHJldlgpIHtcbiAgICAgIGlmICh5IDwgbWluWSkge1xuICAgICAgICBtaW5ZID0geTtcbiAgICAgICAgbWluSW5kZXggPSBpO1xuICAgICAgfSBlbHNlIGlmICh5ID4gbWF4WSkge1xuICAgICAgICBtYXhZID0geTtcbiAgICAgICAgbWF4SW5kZXggPSBpO1xuICAgICAgfVxuICAgICAgYXZnWCA9IChjb3VudFggKiBhdmdYICsgcG9pbnQueCkgLyArK2NvdW50WDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbGFzdEluZGV4ID0gaSAtIDE7XG4gICAgICBpZiAoIWlzTnVsbE9yVW5kZWYobWluSW5kZXgpICYmICFpc051bGxPclVuZGVmKG1heEluZGV4KSkge1xuICAgICAgICBjb25zdCBpbnRlcm1lZGlhdGVJbmRleDEgPSBNYXRoLm1pbihtaW5JbmRleCwgbWF4SW5kZXgpO1xuICAgICAgICBjb25zdCBpbnRlcm1lZGlhdGVJbmRleDIgPSBNYXRoLm1heChtaW5JbmRleCwgbWF4SW5kZXgpO1xuICAgICAgICBpZiAoaW50ZXJtZWRpYXRlSW5kZXgxICE9PSBzdGFydEluZGV4ICYmIGludGVybWVkaWF0ZUluZGV4MSAhPT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgZGVjaW1hdGVkLnB1c2goe1xuICAgICAgICAgICAgLi4uZGF0YVtpbnRlcm1lZGlhdGVJbmRleDFdLFxuICAgICAgICAgICAgeDogYXZnWCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJtZWRpYXRlSW5kZXgyICE9PSBzdGFydEluZGV4ICYmIGludGVybWVkaWF0ZUluZGV4MiAhPT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgZGVjaW1hdGVkLnB1c2goe1xuICAgICAgICAgICAgLi4uZGF0YVtpbnRlcm1lZGlhdGVJbmRleDJdLFxuICAgICAgICAgICAgeDogYXZnWFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA+IDAgJiYgbGFzdEluZGV4ICE9PSBzdGFydEluZGV4KSB7XG4gICAgICAgIGRlY2ltYXRlZC5wdXNoKGRhdGFbbGFzdEluZGV4XSk7XG4gICAgICB9XG4gICAgICBkZWNpbWF0ZWQucHVzaChwb2ludCk7XG4gICAgICBwcmV2WCA9IHRydW5jWDtcbiAgICAgIGNvdW50WCA9IDA7XG4gICAgICBtaW5ZID0gbWF4WSA9IHk7XG4gICAgICBtaW5JbmRleCA9IG1heEluZGV4ID0gc3RhcnRJbmRleCA9IGk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWNpbWF0ZWQ7XG59XG5mdW5jdGlvbiBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCkge1xuICBpZiAoZGF0YXNldC5fZGVjaW1hdGVkKSB7XG4gICAgY29uc3QgZGF0YSA9IGRhdGFzZXQuX2RhdGE7XG4gICAgZGVsZXRlIGRhdGFzZXQuX2RlY2ltYXRlZDtcbiAgICBkZWxldGUgZGF0YXNldC5fZGF0YTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YXNldCwgJ2RhdGEnLCB7dmFsdWU6IGRhdGF9KTtcbiAgfVxufVxuZnVuY3Rpb24gY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KSB7XG4gIGNoYXJ0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCkgPT4ge1xuICAgIGNsZWFuRGVjaW1hdGVkRGF0YXNldChkYXRhc2V0KTtcbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzU2ltcGxpZmllZChtZXRhLCBwb2ludHMpIHtcbiAgY29uc3QgcG9pbnRDb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBjb3VudDtcbiAgY29uc3Qge2lTY2FsZX0gPSBtZXRhO1xuICBjb25zdCB7bWluLCBtYXgsIG1pbkRlZmluZWQsIG1heERlZmluZWR9ID0gaVNjYWxlLmdldFVzZXJCb3VuZHMoKTtcbiAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICBzdGFydCA9IF9saW1pdFZhbHVlKF9sb29rdXBCeUtleShwb2ludHMsIGlTY2FsZS5heGlzLCBtaW4pLmxvLCAwLCBwb2ludENvdW50IC0gMSk7XG4gIH1cbiAgaWYgKG1heERlZmluZWQpIHtcbiAgICBjb3VudCA9IF9saW1pdFZhbHVlKF9sb29rdXBCeUtleShwb2ludHMsIGlTY2FsZS5heGlzLCBtYXgpLmhpICsgMSwgc3RhcnQsIHBvaW50Q291bnQpIC0gc3RhcnQ7XG4gIH0gZWxzZSB7XG4gICAgY291bnQgPSBwb2ludENvdW50IC0gc3RhcnQ7XG4gIH1cbiAgcmV0dXJuIHtzdGFydCwgY291bnR9O1xufVxudmFyIHBsdWdpbl9kZWNpbWF0aW9uID0ge1xuICBpZDogJ2RlY2ltYXRpb24nLFxuICBkZWZhdWx0czoge1xuICAgIGFsZ29yaXRobTogJ21pbi1tYXgnLFxuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICB9LFxuICBiZWZvcmVFbGVtZW50c1VwZGF0ZTogKGNoYXJ0LCBhcmdzLCBvcHRpb25zKSA9PiB7XG4gICAgaWYgKCFvcHRpb25zLmVuYWJsZWQpIHtcbiAgICAgIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gY2hhcnQud2lkdGg7XG4gICAgY2hhcnQuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKChkYXRhc2V0LCBkYXRhc2V0SW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHtfZGF0YSwgaW5kZXhBeGlzfSA9IGRhdGFzZXQ7XG4gICAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgIGNvbnN0IGRhdGEgPSBfZGF0YSB8fCBkYXRhc2V0LmRhdGE7XG4gICAgICBpZiAocmVzb2x2ZShbaW5kZXhBeGlzLCBjaGFydC5vcHRpb25zLmluZGV4QXhpc10pID09PSAneScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFtZXRhLmNvbnRyb2xsZXIuc3VwcG9ydHNEZWNpbWF0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHhBeGlzID0gY2hhcnQuc2NhbGVzW21ldGEueEF4aXNJRF07XG4gICAgICBpZiAoeEF4aXMudHlwZSAhPT0gJ2xpbmVhcicgJiYgeEF4aXMudHlwZSAhPT0gJ3RpbWUnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChjaGFydC5vcHRpb25zLnBhcnNpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IHtzdGFydCwgY291bnR9ID0gZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50c1NpbXBsaWZpZWQobWV0YSwgZGF0YSk7XG4gICAgICBjb25zdCB0aHJlc2hvbGQgPSBvcHRpb25zLnRocmVzaG9sZCB8fCA0ICogYXZhaWxhYmxlV2lkdGg7XG4gICAgICBpZiAoY291bnQgPD0gdGhyZXNob2xkKSB7XG4gICAgICAgIGNsZWFuRGVjaW1hdGVkRGF0YXNldChkYXRhc2V0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzTnVsbE9yVW5kZWYoX2RhdGEpKSB7XG4gICAgICAgIGRhdGFzZXQuX2RhdGEgPSBkYXRhO1xuICAgICAgICBkZWxldGUgZGF0YXNldC5kYXRhO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YXNldCwgJ2RhdGEnLCB7XG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWNpbWF0ZWQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBsZXQgZGVjaW1hdGVkO1xuICAgICAgc3dpdGNoIChvcHRpb25zLmFsZ29yaXRobSkge1xuICAgICAgY2FzZSAnbHR0Yic6XG4gICAgICAgIGRlY2ltYXRlZCA9IGx0dGJEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgsIG9wdGlvbnMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21pbi1tYXgnOlxuICAgICAgICBkZWNpbWF0ZWQgPSBtaW5NYXhEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZGVjaW1hdGlvbiBhbGdvcml0aG0gJyR7b3B0aW9ucy5hbGdvcml0aG19J2ApO1xuICAgICAgfVxuICAgICAgZGF0YXNldC5fZGVjaW1hdGVkID0gZGVjaW1hdGVkO1xuICAgIH0pO1xuICB9LFxuICBkZXN0cm95KGNoYXJ0KSB7XG4gICAgY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX3NlZ21lbnRzKGxpbmUsIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgY29uc3QgdHBvaW50cyA9IHRhcmdldC5wb2ludHM7XG4gIGNvbnN0IHBhcnRzID0gW107XG4gIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xuICAgIGxldCB7c3RhcnQsIGVuZH0gPSBzZWdtZW50O1xuICAgIGVuZCA9IF9maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpO1xuICAgIGNvbnN0IGJvdW5kcyA9IF9nZXRCb3VuZHMocHJvcGVydHksIHBvaW50c1tzdGFydF0sIHBvaW50c1tlbmRdLCBzZWdtZW50Lmxvb3ApO1xuICAgIGlmICghdGFyZ2V0LnNlZ21lbnRzKSB7XG4gICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgc291cmNlOiBzZWdtZW50LFxuICAgICAgICB0YXJnZXQ6IGJvdW5kcyxcbiAgICAgICAgc3RhcnQ6IHBvaW50c1tzdGFydF0sXG4gICAgICAgIGVuZDogcG9pbnRzW2VuZF1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldFNlZ21lbnRzID0gX2JvdW5kU2VnbWVudHModGFyZ2V0LCBib3VuZHMpO1xuICAgIGZvciAoY29uc3QgdGd0IG9mIHRhcmdldFNlZ21lbnRzKSB7XG4gICAgICBjb25zdCBzdWJCb3VuZHMgPSBfZ2V0Qm91bmRzKHByb3BlcnR5LCB0cG9pbnRzW3RndC5zdGFydF0sIHRwb2ludHNbdGd0LmVuZF0sIHRndC5sb29wKTtcbiAgICAgIGNvbnN0IGZpbGxTb3VyY2VzID0gX2JvdW5kU2VnbWVudChzZWdtZW50LCBwb2ludHMsIHN1YkJvdW5kcyk7XG4gICAgICBmb3IgKGNvbnN0IGZpbGxTb3VyY2Ugb2YgZmlsbFNvdXJjZXMpIHtcbiAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgc291cmNlOiBmaWxsU291cmNlLFxuICAgICAgICAgIHRhcmdldDogdGd0LFxuICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICBbcHJvcGVydHldOiBfZ2V0RWRnZShib3VuZHMsIHN1YkJvdW5kcywgJ3N0YXJ0JywgTWF0aC5tYXgpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbmQ6IHtcbiAgICAgICAgICAgIFtwcm9wZXJ0eV06IF9nZXRFZGdlKGJvdW5kcywgc3ViQm91bmRzLCAnZW5kJywgTWF0aC5taW4pXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhcnRzO1xufVxuZnVuY3Rpb24gX2dldEJvdW5kcyhwcm9wZXJ0eSwgZmlyc3QsIGxhc3QsIGxvb3ApIHtcbiAgaWYgKGxvb3ApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IHN0YXJ0ID0gZmlyc3RbcHJvcGVydHldO1xuICBsZXQgZW5kID0gbGFzdFtwcm9wZXJ0eV07XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2FuZ2xlJykge1xuICAgIHN0YXJ0ID0gX25vcm1hbGl6ZUFuZ2xlKHN0YXJ0KTtcbiAgICBlbmQgPSBfbm9ybWFsaXplQW5nbGUoZW5kKTtcbiAgfVxuICByZXR1cm4ge3Byb3BlcnR5LCBzdGFydCwgZW5kfTtcbn1cbmZ1bmN0aW9uIF9wb2ludHNGcm9tU2VnbWVudHMoYm91bmRhcnksIGxpbmUpIHtcbiAgY29uc3Qge3ggPSBudWxsLCB5ID0gbnVsbH0gPSBib3VuZGFyeSB8fCB7fTtcbiAgY29uc3QgbGluZVBvaW50cyA9IGxpbmUucG9pbnRzO1xuICBjb25zdCBwb2ludHMgPSBbXTtcbiAgbGluZS5zZWdtZW50cy5mb3JFYWNoKCh7c3RhcnQsIGVuZH0pID0+IHtcbiAgICBlbmQgPSBfZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgbGluZVBvaW50cyk7XG4gICAgY29uc3QgZmlyc3QgPSBsaW5lUG9pbnRzW3N0YXJ0XTtcbiAgICBjb25zdCBsYXN0ID0gbGluZVBvaW50c1tlbmRdO1xuICAgIGlmICh5ICE9PSBudWxsKSB7XG4gICAgICBwb2ludHMucHVzaCh7eDogZmlyc3QueCwgeX0pO1xuICAgICAgcG9pbnRzLnB1c2goe3g6IGxhc3QueCwgeX0pO1xuICAgIH0gZWxzZSBpZiAoeCAhPT0gbnVsbCkge1xuICAgICAgcG9pbnRzLnB1c2goe3gsIHk6IGZpcnN0Lnl9KTtcbiAgICAgIHBvaW50cy5wdXNoKHt4LCB5OiBsYXN0Lnl9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcG9pbnRzO1xufVxuZnVuY3Rpb24gX2ZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIHBvaW50cykge1xuICBmb3IgKDtlbmQgPiBzdGFydDsgZW5kLS0pIHtcbiAgICBjb25zdCBwb2ludCA9IHBvaW50c1tlbmRdO1xuICAgIGlmICghaXNOYU4ocG9pbnQueCkgJiYgIWlzTmFOKHBvaW50LnkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVuZDtcbn1cbmZ1bmN0aW9uIF9nZXRFZGdlKGEsIGIsIHByb3AsIGZuKSB7XG4gIGlmIChhICYmIGIpIHtcbiAgICByZXR1cm4gZm4oYVtwcm9wXSwgYltwcm9wXSk7XG4gIH1cbiAgcmV0dXJuIGEgPyBhW3Byb3BdIDogYiA/IGJbcHJvcF0gOiAwO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlQm91bmRhcnlMaW5lKGJvdW5kYXJ5LCBsaW5lKSB7XG4gIGxldCBwb2ludHMgPSBbXTtcbiAgbGV0IF9sb29wID0gZmFsc2U7XG4gIGlmIChpc0FycmF5KGJvdW5kYXJ5KSkge1xuICAgIF9sb29wID0gdHJ1ZTtcbiAgICBwb2ludHMgPSBib3VuZGFyeTtcbiAgfSBlbHNlIHtcbiAgICBwb2ludHMgPSBfcG9pbnRzRnJvbVNlZ21lbnRzKGJvdW5kYXJ5LCBsaW5lKTtcbiAgfVxuICByZXR1cm4gcG9pbnRzLmxlbmd0aCA/IG5ldyBMaW5lRWxlbWVudCh7XG4gICAgcG9pbnRzLFxuICAgIG9wdGlvbnM6IHt0ZW5zaW9uOiAwfSxcbiAgICBfbG9vcCxcbiAgICBfZnVsbExvb3A6IF9sb29wXG4gIH0pIDogbnVsbDtcbn1cbmZ1bmN0aW9uIF9zaG91bGRBcHBseUZpbGwoc291cmNlKSB7XG4gIHJldHVybiBzb3VyY2UgJiYgc291cmNlLmZpbGwgIT09IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBfcmVzb2x2ZVRhcmdldChzb3VyY2VzLCBpbmRleCwgcHJvcGFnYXRlKSB7XG4gIGNvbnN0IHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICBsZXQgZmlsbCA9IHNvdXJjZS5maWxsO1xuICBjb25zdCB2aXNpdGVkID0gW2luZGV4XTtcbiAgbGV0IHRhcmdldDtcbiAgaWYgKCFwcm9wYWdhdGUpIHtcbiAgICByZXR1cm4gZmlsbDtcbiAgfVxuICB3aGlsZSAoZmlsbCAhPT0gZmFsc2UgJiYgdmlzaXRlZC5pbmRleE9mKGZpbGwpID09PSAtMSkge1xuICAgIGlmICghaXNOdW1iZXJGaW5pdGUoZmlsbCkpIHtcbiAgICAgIHJldHVybiBmaWxsO1xuICAgIH1cbiAgICB0YXJnZXQgPSBzb3VyY2VzW2ZpbGxdO1xuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0YXJnZXQudmlzaWJsZSkge1xuICAgICAgcmV0dXJuIGZpbGw7XG4gICAgfVxuICAgIHZpc2l0ZWQucHVzaChmaWxsKTtcbiAgICBmaWxsID0gdGFyZ2V0LmZpbGw7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gX2RlY29kZUZpbGwobGluZSwgaW5kZXgsIGNvdW50KSB7XG4gIGNvbnN0IGZpbGwgPSBwYXJzZUZpbGxPcHRpb24obGluZSk7XG4gIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgIHJldHVybiBpc05hTihmaWxsLnZhbHVlKSA/IGZhbHNlIDogZmlsbDtcbiAgfVxuICBsZXQgdGFyZ2V0ID0gcGFyc2VGbG9hdChmaWxsKTtcbiAgaWYgKGlzTnVtYmVyRmluaXRlKHRhcmdldCkgJiYgTWF0aC5mbG9vcih0YXJnZXQpID09PSB0YXJnZXQpIHtcbiAgICByZXR1cm4gZGVjb2RlVGFyZ2V0SW5kZXgoZmlsbFswXSwgaW5kZXgsIHRhcmdldCwgY291bnQpO1xuICB9XG4gIHJldHVybiBbJ29yaWdpbicsICdzdGFydCcsICdlbmQnLCAnc3RhY2snLCAnc2hhcGUnXS5pbmRleE9mKGZpbGwpID49IDAgJiYgZmlsbDtcbn1cbmZ1bmN0aW9uIGRlY29kZVRhcmdldEluZGV4KGZpcnN0Q2gsIGluZGV4LCB0YXJnZXQsIGNvdW50KSB7XG4gIGlmIChmaXJzdENoID09PSAnLScgfHwgZmlyc3RDaCA9PT0gJysnKSB7XG4gICAgdGFyZ2V0ID0gaW5kZXggKyB0YXJnZXQ7XG4gIH1cbiAgaWYgKHRhcmdldCA9PT0gaW5kZXggfHwgdGFyZ2V0IDwgMCB8fCB0YXJnZXQgPj0gY291bnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIF9nZXRUYXJnZXRQaXhlbChmaWxsLCBzY2FsZSkge1xuICBsZXQgcGl4ZWwgPSBudWxsO1xuICBpZiAoZmlsbCA9PT0gJ3N0YXJ0Jykge1xuICAgIHBpeGVsID0gc2NhbGUuYm90dG9tO1xuICB9IGVsc2UgaWYgKGZpbGwgPT09ICdlbmQnKSB7XG4gICAgcGl4ZWwgPSBzY2FsZS50b3A7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoZmlsbCkpIHtcbiAgICBwaXhlbCA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUoZmlsbC52YWx1ZSk7XG4gIH0gZWxzZSBpZiAoc2NhbGUuZ2V0QmFzZVBpeGVsKSB7XG4gICAgcGl4ZWwgPSBzY2FsZS5nZXRCYXNlUGl4ZWwoKTtcbiAgfVxuICByZXR1cm4gcGl4ZWw7XG59XG5mdW5jdGlvbiBfZ2V0VGFyZ2V0VmFsdWUoZmlsbCwgc2NhbGUsIHN0YXJ0VmFsdWUpIHtcbiAgbGV0IHZhbHVlO1xuICBpZiAoZmlsbCA9PT0gJ3N0YXJ0Jykge1xuICAgIHZhbHVlID0gc3RhcnRWYWx1ZTtcbiAgfSBlbHNlIGlmIChmaWxsID09PSAnZW5kJykge1xuICAgIHZhbHVlID0gc2NhbGUub3B0aW9ucy5yZXZlcnNlID8gc2NhbGUubWluIDogc2NhbGUubWF4O1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGZpbGwpKSB7XG4gICAgdmFsdWUgPSBmaWxsLnZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gc2NhbGUuZ2V0QmFzZVZhbHVlKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gcGFyc2VGaWxsT3B0aW9uKGxpbmUpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IGxpbmUub3B0aW9ucztcbiAgY29uc3QgZmlsbE9wdGlvbiA9IG9wdGlvbnMuZmlsbDtcbiAgbGV0IGZpbGwgPSB2YWx1ZU9yRGVmYXVsdChmaWxsT3B0aW9uICYmIGZpbGxPcHRpb24udGFyZ2V0LCBmaWxsT3B0aW9uKTtcbiAgaWYgKGZpbGwgPT09IHVuZGVmaW5lZCkge1xuICAgIGZpbGwgPSAhIW9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICB9XG4gIGlmIChmaWxsID09PSBmYWxzZSB8fCBmaWxsID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChmaWxsID09PSB0cnVlKSB7XG4gICAgcmV0dXJuICdvcmlnaW4nO1xuICB9XG4gIHJldHVybiBmaWxsO1xufVxuXG5mdW5jdGlvbiBfYnVpbGRTdGFja0xpbmUoc291cmNlKSB7XG4gIGNvbnN0IHtzY2FsZSwgaW5kZXgsIGxpbmV9ID0gc291cmNlO1xuICBjb25zdCBwb2ludHMgPSBbXTtcbiAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICBjb25zdCBzb3VyY2VQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgY29uc3QgbGluZXNCZWxvdyA9IGdldExpbmVzQmVsb3coc2NhbGUsIGluZGV4KTtcbiAgbGluZXNCZWxvdy5wdXNoKF9jcmVhdGVCb3VuZGFyeUxpbmUoe3g6IG51bGwsIHk6IHNjYWxlLmJvdHRvbX0sIGxpbmUpKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICBmb3IgKGxldCBqID0gc2VnbWVudC5zdGFydDsgaiA8PSBzZWdtZW50LmVuZDsgaisrKSB7XG4gICAgICBhZGRQb2ludHNCZWxvdyhwb2ludHMsIHNvdXJjZVBvaW50c1tqXSwgbGluZXNCZWxvdyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgTGluZUVsZW1lbnQoe3BvaW50cywgb3B0aW9uczoge319KTtcbn1cbmZ1bmN0aW9uIGdldExpbmVzQmVsb3coc2NhbGUsIGluZGV4KSB7XG4gIGNvbnN0IGJlbG93ID0gW107XG4gIGNvbnN0IG1ldGFzID0gc2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoJ2xpbmUnKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXRhcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG1ldGEgPSBtZXRhc1tpXTtcbiAgICBpZiAobWV0YS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoIW1ldGEuaGlkZGVuKSB7XG4gICAgICBiZWxvdy51bnNoaWZ0KG1ldGEuZGF0YXNldCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiZWxvdztcbn1cbmZ1bmN0aW9uIGFkZFBvaW50c0JlbG93KHBvaW50cywgc291cmNlUG9pbnQsIGxpbmVzQmVsb3cpIHtcbiAgY29uc3QgcG9zdHBvbmVkID0gW107XG4gIGZvciAobGV0IGogPSAwOyBqIDwgbGluZXNCZWxvdy5sZW5ndGg7IGorKykge1xuICAgIGNvbnN0IGxpbmUgPSBsaW5lc0JlbG93W2pdO1xuICAgIGNvbnN0IHtmaXJzdCwgbGFzdCwgcG9pbnR9ID0gZmluZFBvaW50KGxpbmUsIHNvdXJjZVBvaW50LCAneCcpO1xuICAgIGlmICghcG9pbnQgfHwgKGZpcnN0ICYmIGxhc3QpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGZpcnN0KSB7XG4gICAgICBwb3N0cG9uZWQudW5zaGlmdChwb2ludCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcbiAgICAgIGlmICghbGFzdCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcG9pbnRzLnB1c2goLi4ucG9zdHBvbmVkKTtcbn1cbmZ1bmN0aW9uIGZpbmRQb2ludChsaW5lLCBzb3VyY2VQb2ludCwgcHJvcGVydHkpIHtcbiAgY29uc3QgcG9pbnQgPSBsaW5lLmludGVycG9sYXRlKHNvdXJjZVBvaW50LCBwcm9wZXJ0eSk7XG4gIGlmICghcG9pbnQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgcG9pbnRWYWx1ZSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICBjb25zdCBsaW5lUG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGxldCBmaXJzdCA9IGZhbHNlO1xuICBsZXQgbGFzdCA9IGZhbHNlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgIGNvbnN0IGZpcnN0VmFsdWUgPSBsaW5lUG9pbnRzW3NlZ21lbnQuc3RhcnRdW3Byb3BlcnR5XTtcbiAgICBjb25zdCBsYXN0VmFsdWUgPSBsaW5lUG9pbnRzW3NlZ21lbnQuZW5kXVtwcm9wZXJ0eV07XG4gICAgaWYgKF9pc0JldHdlZW4ocG9pbnRWYWx1ZSwgZmlyc3RWYWx1ZSwgbGFzdFZhbHVlKSkge1xuICAgICAgZmlyc3QgPSBwb2ludFZhbHVlID09PSBmaXJzdFZhbHVlO1xuICAgICAgbGFzdCA9IHBvaW50VmFsdWUgPT09IGxhc3RWYWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge2ZpcnN0LCBsYXN0LCBwb2ludH07XG59XG5cbmNsYXNzIHNpbXBsZUFyYyB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICB0aGlzLnggPSBvcHRzLng7XG4gICAgdGhpcy55ID0gb3B0cy55O1xuICAgIHRoaXMucmFkaXVzID0gb3B0cy5yYWRpdXM7XG4gIH1cbiAgcGF0aFNlZ21lbnQoY3R4LCBib3VuZHMsIG9wdHMpIHtcbiAgICBjb25zdCB7eCwgeSwgcmFkaXVzfSA9IHRoaXM7XG4gICAgYm91bmRzID0gYm91bmRzIHx8IHtzdGFydDogMCwgZW5kOiBUQVV9O1xuICAgIGN0eC5hcmMoeCwgeSwgcmFkaXVzLCBib3VuZHMuZW5kLCBib3VuZHMuc3RhcnQsIHRydWUpO1xuICAgIHJldHVybiAhb3B0cy5ib3VuZHM7XG4gIH1cbiAgaW50ZXJwb2xhdGUocG9pbnQpIHtcbiAgICBjb25zdCB7eCwgeSwgcmFkaXVzfSA9IHRoaXM7XG4gICAgY29uc3QgYW5nbGUgPSBwb2ludC5hbmdsZTtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeCArIE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cyxcbiAgICAgIHk6IHkgKyBNYXRoLnNpbihhbmdsZSkgKiByYWRpdXMsXG4gICAgICBhbmdsZVxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gX2dldFRhcmdldChzb3VyY2UpIHtcbiAgY29uc3Qge2NoYXJ0LCBmaWxsLCBsaW5lfSA9IHNvdXJjZTtcbiAgaWYgKGlzTnVtYmVyRmluaXRlKGZpbGwpKSB7XG4gICAgcmV0dXJuIGdldExpbmVCeUluZGV4KGNoYXJ0LCBmaWxsKTtcbiAgfVxuICBpZiAoZmlsbCA9PT0gJ3N0YWNrJykge1xuICAgIHJldHVybiBfYnVpbGRTdGFja0xpbmUoc291cmNlKTtcbiAgfVxuICBpZiAoZmlsbCA9PT0gJ3NoYXBlJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IGJvdW5kYXJ5ID0gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSk7XG4gIGlmIChib3VuZGFyeSBpbnN0YW5jZW9mIHNpbXBsZUFyYykge1xuICAgIHJldHVybiBib3VuZGFyeTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUJvdW5kYXJ5TGluZShib3VuZGFyeSwgbGluZSk7XG59XG5mdW5jdGlvbiBnZXRMaW5lQnlJbmRleChjaGFydCwgaW5kZXgpIHtcbiAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGluZGV4KTtcbiAgY29uc3QgdmlzaWJsZSA9IG1ldGEgJiYgY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpbmRleCk7XG4gIHJldHVybiB2aXNpYmxlID8gbWV0YS5kYXRhc2V0IDogbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVCb3VuZGFyeShzb3VyY2UpIHtcbiAgY29uc3Qgc2NhbGUgPSBzb3VyY2Uuc2NhbGUgfHwge307XG4gIGlmIChzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUpIHtcbiAgICByZXR1cm4gY29tcHV0ZUNpcmN1bGFyQm91bmRhcnkoc291cmNlKTtcbiAgfVxuICByZXR1cm4gY29tcHV0ZUxpbmVhckJvdW5kYXJ5KHNvdXJjZSk7XG59XG5mdW5jdGlvbiBjb21wdXRlTGluZWFyQm91bmRhcnkoc291cmNlKSB7XG4gIGNvbnN0IHtzY2FsZSA9IHt9LCBmaWxsfSA9IHNvdXJjZTtcbiAgY29uc3QgcGl4ZWwgPSBfZ2V0VGFyZ2V0UGl4ZWwoZmlsbCwgc2NhbGUpO1xuICBpZiAoaXNOdW1iZXJGaW5pdGUocGl4ZWwpKSB7XG4gICAgY29uc3QgaG9yaXpvbnRhbCA9IHNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuICAgIHJldHVybiB7XG4gICAgICB4OiBob3Jpem9udGFsID8gcGl4ZWwgOiBudWxsLFxuICAgICAgeTogaG9yaXpvbnRhbCA/IG51bGwgOiBwaXhlbFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeShzb3VyY2UpIHtcbiAgY29uc3Qge3NjYWxlLCBmaWxsfSA9IHNvdXJjZTtcbiAgY29uc3Qgb3B0aW9ucyA9IHNjYWxlLm9wdGlvbnM7XG4gIGNvbnN0IGxlbmd0aCA9IHNjYWxlLmdldExhYmVscygpLmxlbmd0aDtcbiAgY29uc3Qgc3RhcnQgPSBvcHRpb25zLnJldmVyc2UgPyBzY2FsZS5tYXggOiBzY2FsZS5taW47XG4gIGNvbnN0IHZhbHVlID0gX2dldFRhcmdldFZhbHVlKGZpbGwsIHNjYWxlLCBzdGFydCk7XG4gIGNvbnN0IHRhcmdldCA9IFtdO1xuICBpZiAob3B0aW9ucy5ncmlkLmNpcmN1bGFyKSB7XG4gICAgY29uc3QgY2VudGVyID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKDAsIHN0YXJ0KTtcbiAgICByZXR1cm4gbmV3IHNpbXBsZUFyYyh7XG4gICAgICB4OiBjZW50ZXIueCxcbiAgICAgIHk6IGNlbnRlci55LFxuICAgICAgcmFkaXVzOiBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh2YWx1ZSlcbiAgICB9KTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdGFyZ2V0LnB1c2goc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGksIHZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX2RyYXdmaWxsKGN0eCwgc291cmNlLCBhcmVhKSB7XG4gIGNvbnN0IHRhcmdldCA9IF9nZXRUYXJnZXQoc291cmNlKTtcbiAgY29uc3Qge2xpbmUsIHNjYWxlLCBheGlzfSA9IHNvdXJjZTtcbiAgY29uc3QgbGluZU9wdHMgPSBsaW5lLm9wdGlvbnM7XG4gIGNvbnN0IGZpbGxPcHRpb24gPSBsaW5lT3B0cy5maWxsO1xuICBjb25zdCBjb2xvciA9IGxpbmVPcHRzLmJhY2tncm91bmRDb2xvcjtcbiAgY29uc3Qge2Fib3ZlID0gY29sb3IsIGJlbG93ID0gY29sb3J9ID0gZmlsbE9wdGlvbiB8fCB7fTtcbiAgaWYgKHRhcmdldCAmJiBsaW5lLnBvaW50cy5sZW5ndGgpIHtcbiAgICBjbGlwQXJlYShjdHgsIGFyZWEpO1xuICAgIGRvRmlsbChjdHgsIHtsaW5lLCB0YXJnZXQsIGFib3ZlLCBiZWxvdywgYXJlYSwgc2NhbGUsIGF4aXN9KTtcbiAgICB1bmNsaXBBcmVhKGN0eCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRvRmlsbChjdHgsIGNmZykge1xuICBjb25zdCB7bGluZSwgdGFyZ2V0LCBhYm92ZSwgYmVsb3csIGFyZWEsIHNjYWxlfSA9IGNmZztcbiAgY29uc3QgcHJvcGVydHkgPSBsaW5lLl9sb29wID8gJ2FuZ2xlJyA6IGNmZy5heGlzO1xuICBjdHguc2F2ZSgpO1xuICBpZiAocHJvcGVydHkgPT09ICd4JyAmJiBiZWxvdyAhPT0gYWJvdmUpIHtcbiAgICBjbGlwVmVydGljYWwoY3R4LCB0YXJnZXQsIGFyZWEudG9wKTtcbiAgICBmaWxsKGN0eCwge2xpbmUsIHRhcmdldCwgY29sb3I6IGFib3ZlLCBzY2FsZSwgcHJvcGVydHl9KTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY2xpcFZlcnRpY2FsKGN0eCwgdGFyZ2V0LCBhcmVhLmJvdHRvbSk7XG4gIH1cbiAgZmlsbChjdHgsIHtsaW5lLCB0YXJnZXQsIGNvbG9yOiBiZWxvdywgc2NhbGUsIHByb3BlcnR5fSk7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBjbGlwVmVydGljYWwoY3R4LCB0YXJnZXQsIGNsaXBZKSB7XG4gIGNvbnN0IHtzZWdtZW50cywgcG9pbnRzfSA9IHRhcmdldDtcbiAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgbGV0IGxpbmVMb29wID0gZmFsc2U7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgY29uc3Qge3N0YXJ0LCBlbmR9ID0gc2VnbWVudDtcbiAgICBjb25zdCBmaXJzdFBvaW50ID0gcG9pbnRzW3N0YXJ0XTtcbiAgICBjb25zdCBsYXN0UG9pbnQgPSBwb2ludHNbX2ZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIHBvaW50cyldO1xuICAgIGlmIChmaXJzdCkge1xuICAgICAgY3R4Lm1vdmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XG4gICAgICBmaXJzdCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHgubGluZVRvKGZpcnN0UG9pbnQueCwgY2xpcFkpO1xuICAgICAgY3R4LmxpbmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XG4gICAgfVxuICAgIGxpbmVMb29wID0gISF0YXJnZXQucGF0aFNlZ21lbnQoY3R4LCBzZWdtZW50LCB7bW92ZTogbGluZUxvb3B9KTtcbiAgICBpZiAobGluZUxvb3ApIHtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LmxpbmVUbyhsYXN0UG9pbnQueCwgY2xpcFkpO1xuICAgIH1cbiAgfVxuICBjdHgubGluZVRvKHRhcmdldC5maXJzdCgpLngsIGNsaXBZKTtcbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gZmlsbChjdHgsIGNmZykge1xuICBjb25zdCB7bGluZSwgdGFyZ2V0LCBwcm9wZXJ0eSwgY29sb3IsIHNjYWxlfSA9IGNmZztcbiAgY29uc3Qgc2VnbWVudHMgPSBfc2VnbWVudHMobGluZSwgdGFyZ2V0LCBwcm9wZXJ0eSk7XG4gIGZvciAoY29uc3Qge3NvdXJjZTogc3JjLCB0YXJnZXQ6IHRndCwgc3RhcnQsIGVuZH0gb2Ygc2VnbWVudHMpIHtcbiAgICBjb25zdCB7c3R5bGU6IHtiYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcn0gPSB7fX0gPSBzcmM7XG4gICAgY29uc3Qgbm90U2hhcGUgPSB0YXJnZXQgIT09IHRydWU7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgIGNsaXBCb3VuZHMoY3R4LCBzY2FsZSwgbm90U2hhcGUgJiYgX2dldEJvdW5kcyhwcm9wZXJ0eSwgc3RhcnQsIGVuZCkpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjb25zdCBsaW5lTG9vcCA9ICEhbGluZS5wYXRoU2VnbWVudChjdHgsIHNyYyk7XG4gICAgbGV0IGxvb3A7XG4gICAgaWYgKG5vdFNoYXBlKSB7XG4gICAgICBpZiAobGluZUxvb3ApIHtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW50ZXJwb2xhdGVkTGluZVRvKGN0eCwgdGFyZ2V0LCBlbmQsIHByb3BlcnR5KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRhcmdldExvb3AgPSAhIXRhcmdldC5wYXRoU2VnbWVudChjdHgsIHRndCwge21vdmU6IGxpbmVMb29wLCByZXZlcnNlOiB0cnVlfSk7XG4gICAgICBsb29wID0gbGluZUxvb3AgJiYgdGFyZ2V0TG9vcDtcbiAgICAgIGlmICghbG9vcCkge1xuICAgICAgICBpbnRlcnBvbGF0ZWRMaW5lVG8oY3R4LCB0YXJnZXQsIHN0YXJ0LCBwcm9wZXJ0eSk7XG4gICAgICB9XG4gICAgfVxuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguZmlsbChsb29wID8gJ2V2ZW5vZGQnIDogJ25vbnplcm8nKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG59XG5mdW5jdGlvbiBjbGlwQm91bmRzKGN0eCwgc2NhbGUsIGJvdW5kcykge1xuICBjb25zdCB7dG9wLCBib3R0b219ID0gc2NhbGUuY2hhcnQuY2hhcnRBcmVhO1xuICBjb25zdCB7cHJvcGVydHksIHN0YXJ0LCBlbmR9ID0gYm91bmRzIHx8IHt9O1xuICBpZiAocHJvcGVydHkgPT09ICd4Jykge1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgucmVjdChzdGFydCwgdG9wLCBlbmQgLSBzdGFydCwgYm90dG9tIC0gdG9wKTtcbiAgICBjdHguY2xpcCgpO1xuICB9XG59XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZWRMaW5lVG8oY3R4LCB0YXJnZXQsIHBvaW50LCBwcm9wZXJ0eSkge1xuICBjb25zdCBpbnRlcnBvbGF0ZWRQb2ludCA9IHRhcmdldC5pbnRlcnBvbGF0ZShwb2ludCwgcHJvcGVydHkpO1xuICBpZiAoaW50ZXJwb2xhdGVkUG9pbnQpIHtcbiAgICBjdHgubGluZVRvKGludGVycG9sYXRlZFBvaW50LngsIGludGVycG9sYXRlZFBvaW50LnkpO1xuICB9XG59XG5cbnZhciBpbmRleCA9IHtcbiAgaWQ6ICdmaWxsZXInLFxuICBhZnRlckRhdGFzZXRzVXBkYXRlKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IGNvdW50ID0gKGNoYXJ0LmRhdGEuZGF0YXNldHMgfHwgW10pLmxlbmd0aDtcbiAgICBjb25zdCBzb3VyY2VzID0gW107XG4gICAgbGV0IG1ldGEsIGksIGxpbmUsIHNvdXJjZTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuICAgICAgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgbGluZSA9IG1ldGEuZGF0YXNldDtcbiAgICAgIHNvdXJjZSA9IG51bGw7XG4gICAgICBpZiAobGluZSAmJiBsaW5lLm9wdGlvbnMgJiYgbGluZSBpbnN0YW5jZW9mIExpbmVFbGVtZW50KSB7XG4gICAgICAgIHNvdXJjZSA9IHtcbiAgICAgICAgICB2aXNpYmxlOiBjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpLFxuICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgIGZpbGw6IF9kZWNvZGVGaWxsKGxpbmUsIGksIGNvdW50KSxcbiAgICAgICAgICBjaGFydCxcbiAgICAgICAgICBheGlzOiBtZXRhLmNvbnRyb2xsZXIub3B0aW9ucy5pbmRleEF4aXMsXG4gICAgICAgICAgc2NhbGU6IG1ldGEudlNjYWxlLFxuICAgICAgICAgIGxpbmUsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBtZXRhLiRmaWxsZXIgPSBzb3VyY2U7XG4gICAgICBzb3VyY2VzLnB1c2goc291cmNlKTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgIHNvdXJjZSA9IHNvdXJjZXNbaV07XG4gICAgICBpZiAoIXNvdXJjZSB8fCBzb3VyY2UuZmlsbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBzb3VyY2UuZmlsbCA9IF9yZXNvbHZlVGFyZ2V0KHNvdXJjZXMsIGksIG9wdGlvbnMucHJvcGFnYXRlKTtcbiAgICB9XG4gIH0sXG4gIGJlZm9yZURyYXcoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZHJhdyA9IG9wdGlvbnMuZHJhd1RpbWUgPT09ICdiZWZvcmVEcmF3JztcbiAgICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICBjb25zdCBhcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgIGZvciAobGV0IGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgY29uc3Qgc291cmNlID0gbWV0YXNldHNbaV0uJGZpbGxlcjtcbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgc291cmNlLmxpbmUudXBkYXRlQ29udHJvbFBvaW50cyhhcmVhLCBzb3VyY2UuYXhpcyk7XG4gICAgICBpZiAoZHJhdyAmJiBzb3VyY2UuZmlsbCkge1xuICAgICAgICBfZHJhd2ZpbGwoY2hhcnQuY3R4LCBzb3VyY2UsIGFyZWEpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgYmVmb3JlRGF0YXNldHNEcmF3KGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmRyYXdUaW1lICE9PSAnYmVmb3JlRGF0YXNldHNEcmF3Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICBmb3IgKGxldCBpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IG1ldGFzZXRzW2ldLiRmaWxsZXI7XG4gICAgICBpZiAoX3Nob3VsZEFwcGx5RmlsbChzb3VyY2UpKSB7XG4gICAgICAgIF9kcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGJlZm9yZURhdGFzZXREcmF3KGNoYXJ0LCBhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc291cmNlID0gYXJncy5tZXRhLiRmaWxsZXI7XG4gICAgaWYgKCFfc2hvdWxkQXBwbHlGaWxsKHNvdXJjZSkgfHwgb3B0aW9ucy5kcmF3VGltZSAhPT0gJ2JlZm9yZURhdGFzZXREcmF3Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfZHJhd2ZpbGwoY2hhcnQuY3R4LCBzb3VyY2UsIGNoYXJ0LmNoYXJ0QXJlYSk7XG4gIH0sXG4gIGRlZmF1bHRzOiB7XG4gICAgcHJvcGFnYXRlOiB0cnVlLFxuICAgIGRyYXdUaW1lOiAnYmVmb3JlRGF0YXNldERyYXcnXG4gIH1cbn07XG5cbmNvbnN0IGdldEJveFNpemUgPSAobGFiZWxPcHRzLCBmb250U2l6ZSkgPT4ge1xuICBsZXQge2JveEhlaWdodCA9IGZvbnRTaXplLCBib3hXaWR0aCA9IGZvbnRTaXplfSA9IGxhYmVsT3B0cztcbiAgaWYgKGxhYmVsT3B0cy51c2VQb2ludFN0eWxlKSB7XG4gICAgYm94SGVpZ2h0ID0gTWF0aC5taW4oYm94SGVpZ2h0LCBmb250U2l6ZSk7XG4gICAgYm94V2lkdGggPSBsYWJlbE9wdHMucG9pbnRTdHlsZVdpZHRoIHx8IE1hdGgubWluKGJveFdpZHRoLCBmb250U2l6ZSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBib3hXaWR0aCxcbiAgICBib3hIZWlnaHQsXG4gICAgaXRlbUhlaWdodDogTWF0aC5tYXgoZm9udFNpemUsIGJveEhlaWdodClcbiAgfTtcbn07XG5jb25zdCBpdGVtc0VxdWFsID0gKGEsIGIpID0+IGEgIT09IG51bGwgJiYgYiAhPT0gbnVsbCAmJiBhLmRhdGFzZXRJbmRleCA9PT0gYi5kYXRhc2V0SW5kZXggJiYgYS5pbmRleCA9PT0gYi5pbmRleDtcbmNsYXNzIExlZ2VuZCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2FkZGVkID0gZmFsc2U7XG4gICAgdGhpcy5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuICAgIHRoaXMuX2hvdmVyZWRJdGVtID0gbnVsbDtcbiAgICB0aGlzLmRvdWdobnV0TW9kZSA9IGZhbHNlO1xuICAgIHRoaXMuY2hhcnQgPSBjb25maWcuY2hhcnQ7XG4gICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgdGhpcy5jdHggPSBjb25maWcuY3R4O1xuICAgIHRoaXMubGVnZW5kSXRlbXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jb2x1bW5TaXplcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxpbmVXaWR0aHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5tYXhIZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5tYXhXaWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxlZnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX21hcmdpbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLndlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmZ1bGxTaXplID0gdW5kZWZpbmVkO1xuICB9XG4gIHVwZGF0ZShtYXhXaWR0aCwgbWF4SGVpZ2h0LCBtYXJnaW5zKSB7XG4gICAgdGhpcy5tYXhXaWR0aCA9IG1heFdpZHRoO1xuICAgIHRoaXMubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgIHRoaXMuX21hcmdpbnMgPSBtYXJnaW5zO1xuICAgIHRoaXMuc2V0RGltZW5zaW9ucygpO1xuICAgIHRoaXMuYnVpbGRMYWJlbHMoKTtcbiAgICB0aGlzLmZpdCgpO1xuICB9XG4gIHNldERpbWVuc2lvbnMoKSB7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgdGhpcy5sZWZ0ID0gdGhpcy5fbWFyZ2lucy5sZWZ0O1xuICAgICAgdGhpcy5yaWdodCA9IHRoaXMud2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQ7XG4gICAgICB0aGlzLnRvcCA9IHRoaXMuX21hcmdpbnMudG9wO1xuICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLmhlaWdodDtcbiAgICB9XG4gIH1cbiAgYnVpbGRMYWJlbHMoKSB7XG4gICAgY29uc3QgbGFiZWxPcHRzID0gdGhpcy5vcHRpb25zLmxhYmVscyB8fCB7fTtcbiAgICBsZXQgbGVnZW5kSXRlbXMgPSBjYWxsYmFjayhsYWJlbE9wdHMuZ2VuZXJhdGVMYWJlbHMsIFt0aGlzLmNoYXJ0XSwgdGhpcykgfHwgW107XG4gICAgaWYgKGxhYmVsT3B0cy5maWx0ZXIpIHtcbiAgICAgIGxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXMuZmlsdGVyKChpdGVtKSA9PiBsYWJlbE9wdHMuZmlsdGVyKGl0ZW0sIHRoaXMuY2hhcnQuZGF0YSkpO1xuICAgIH1cbiAgICBpZiAobGFiZWxPcHRzLnNvcnQpIHtcbiAgICAgIGxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXMuc29ydCgoYSwgYikgPT4gbGFiZWxPcHRzLnNvcnQoYSwgYiwgdGhpcy5jaGFydC5kYXRhKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgbGVnZW5kSXRlbXMucmV2ZXJzZSgpO1xuICAgIH1cbiAgICB0aGlzLmxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXM7XG4gIH1cbiAgZml0KCkge1xuICAgIGNvbnN0IHtvcHRpb25zLCBjdHh9ID0gdGhpcztcbiAgICBpZiAoIW9wdGlvbnMuZGlzcGxheSkge1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaGVpZ2h0ID0gMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbGFiZWxPcHRzID0gb3B0aW9ucy5sYWJlbHM7XG4gICAgY29uc3QgbGFiZWxGb250ID0gdG9Gb250KGxhYmVsT3B0cy5mb250KTtcbiAgICBjb25zdCBmb250U2l6ZSA9IGxhYmVsRm9udC5zaXplO1xuICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gdGhpcy5fY29tcHV0ZVRpdGxlSGVpZ2h0KCk7XG4gICAgY29uc3Qge2JveFdpZHRoLCBpdGVtSGVpZ2h0fSA9IGdldEJveFNpemUobGFiZWxPcHRzLCBmb250U2l6ZSk7XG4gICAgbGV0IHdpZHRoLCBoZWlnaHQ7XG4gICAgY3R4LmZvbnQgPSBsYWJlbEZvbnQuc3RyaW5nO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB3aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICBoZWlnaHQgPSB0aGlzLl9maXRSb3dzKHRpdGxlSGVpZ2h0LCBmb250U2l6ZSwgYm94V2lkdGgsIGl0ZW1IZWlnaHQpICsgMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgd2lkdGggPSB0aGlzLl9maXRDb2xzKHRpdGxlSGVpZ2h0LCBmb250U2l6ZSwgYm94V2lkdGgsIGl0ZW1IZWlnaHQpICsgMTA7XG4gICAgfVxuICAgIHRoaXMud2lkdGggPSBNYXRoLm1pbih3aWR0aCwgb3B0aW9ucy5tYXhXaWR0aCB8fCB0aGlzLm1heFdpZHRoKTtcbiAgICB0aGlzLmhlaWdodCA9IE1hdGgubWluKGhlaWdodCwgb3B0aW9ucy5tYXhIZWlnaHQgfHwgdGhpcy5tYXhIZWlnaHQpO1xuICB9XG4gIF9maXRSb3dzKHRpdGxlSGVpZ2h0LCBmb250U2l6ZSwgYm94V2lkdGgsIGl0ZW1IZWlnaHQpIHtcbiAgICBjb25zdCB7Y3R4LCBtYXhXaWR0aCwgb3B0aW9uczoge2xhYmVsczoge3BhZGRpbmd9fX0gPSB0aGlzO1xuICAgIGNvbnN0IGhpdGJveGVzID0gdGhpcy5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuICAgIGNvbnN0IGxpbmVXaWR0aHMgPSB0aGlzLmxpbmVXaWR0aHMgPSBbMF07XG4gICAgY29uc3QgbGluZUhlaWdodCA9IGl0ZW1IZWlnaHQgKyBwYWRkaW5nO1xuICAgIGxldCB0b3RhbEhlaWdodCA9IHRpdGxlSGVpZ2h0O1xuICAgIGN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgIGxldCByb3cgPSAtMTtcbiAgICBsZXQgdG9wID0gLWxpbmVIZWlnaHQ7XG4gICAgdGhpcy5sZWdlbmRJdGVtcy5mb3JFYWNoKChsZWdlbmRJdGVtLCBpKSA9PiB7XG4gICAgICBjb25zdCBpdGVtV2lkdGggPSBib3hXaWR0aCArIChmb250U2l6ZSAvIDIpICsgY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG4gICAgICBpZiAoaSA9PT0gMCB8fCBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gMV0gKyBpdGVtV2lkdGggKyAyICogcGFkZGluZyA+IG1heFdpZHRoKSB7XG4gICAgICAgIHRvdGFsSGVpZ2h0ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgIGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAoaSA+IDAgPyAwIDogMSldID0gMDtcbiAgICAgICAgdG9wICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgIHJvdysrO1xuICAgICAgfVxuICAgICAgaGl0Ym94ZXNbaV0gPSB7bGVmdDogMCwgdG9wLCByb3csIHdpZHRoOiBpdGVtV2lkdGgsIGhlaWdodDogaXRlbUhlaWdodH07XG4gICAgICBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gMV0gKz0gaXRlbVdpZHRoICsgcGFkZGluZztcbiAgICB9KTtcbiAgICByZXR1cm4gdG90YWxIZWlnaHQ7XG4gIH1cbiAgX2ZpdENvbHModGl0bGVIZWlnaHQsIGZvbnRTaXplLCBib3hXaWR0aCwgaXRlbUhlaWdodCkge1xuICAgIGNvbnN0IHtjdHgsIG1heEhlaWdodCwgb3B0aW9uczoge2xhYmVsczoge3BhZGRpbmd9fX0gPSB0aGlzO1xuICAgIGNvbnN0IGhpdGJveGVzID0gdGhpcy5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuICAgIGNvbnN0IGNvbHVtblNpemVzID0gdGhpcy5jb2x1bW5TaXplcyA9IFtdO1xuICAgIGNvbnN0IGhlaWdodExpbWl0ID0gbWF4SGVpZ2h0IC0gdGl0bGVIZWlnaHQ7XG4gICAgbGV0IHRvdGFsV2lkdGggPSBwYWRkaW5nO1xuICAgIGxldCBjdXJyZW50Q29sV2lkdGggPSAwO1xuICAgIGxldCBjdXJyZW50Q29sSGVpZ2h0ID0gMDtcbiAgICBsZXQgbGVmdCA9IDA7XG4gICAgbGV0IGNvbCA9IDA7XG4gICAgdGhpcy5sZWdlbmRJdGVtcy5mb3JFYWNoKChsZWdlbmRJdGVtLCBpKSA9PiB7XG4gICAgICBjb25zdCBpdGVtV2lkdGggPSBib3hXaWR0aCArIChmb250U2l6ZSAvIDIpICsgY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG4gICAgICBpZiAoaSA+IDAgJiYgY3VycmVudENvbEhlaWdodCArIGl0ZW1IZWlnaHQgKyAyICogcGFkZGluZyA+IGhlaWdodExpbWl0KSB7XG4gICAgICAgIHRvdGFsV2lkdGggKz0gY3VycmVudENvbFdpZHRoICsgcGFkZGluZztcbiAgICAgICAgY29sdW1uU2l6ZXMucHVzaCh7d2lkdGg6IGN1cnJlbnRDb2xXaWR0aCwgaGVpZ2h0OiBjdXJyZW50Q29sSGVpZ2h0fSk7XG4gICAgICAgIGxlZnQgKz0gY3VycmVudENvbFdpZHRoICsgcGFkZGluZztcbiAgICAgICAgY29sKys7XG4gICAgICAgIGN1cnJlbnRDb2xXaWR0aCA9IGN1cnJlbnRDb2xIZWlnaHQgPSAwO1xuICAgICAgfVxuICAgICAgaGl0Ym94ZXNbaV0gPSB7bGVmdCwgdG9wOiBjdXJyZW50Q29sSGVpZ2h0LCBjb2wsIHdpZHRoOiBpdGVtV2lkdGgsIGhlaWdodDogaXRlbUhlaWdodH07XG4gICAgICBjdXJyZW50Q29sV2lkdGggPSBNYXRoLm1heChjdXJyZW50Q29sV2lkdGgsIGl0ZW1XaWR0aCk7XG4gICAgICBjdXJyZW50Q29sSGVpZ2h0ICs9IGl0ZW1IZWlnaHQgKyBwYWRkaW5nO1xuICAgIH0pO1xuICAgIHRvdGFsV2lkdGggKz0gY3VycmVudENvbFdpZHRoO1xuICAgIGNvbHVtblNpemVzLnB1c2goe3dpZHRoOiBjdXJyZW50Q29sV2lkdGgsIGhlaWdodDogY3VycmVudENvbEhlaWdodH0pO1xuICAgIHJldHVybiB0b3RhbFdpZHRoO1xuICB9XG4gIGFkanVzdEhpdEJveGVzKCkge1xuICAgIGlmICghdGhpcy5vcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICBjb25zdCB7bGVnZW5kSGl0Qm94ZXM6IGhpdGJveGVzLCBvcHRpb25zOiB7YWxpZ24sIGxhYmVsczoge3BhZGRpbmd9LCBydGx9fSA9IHRoaXM7XG4gICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihydGwsIHRoaXMubGVmdCwgdGhpcy53aWR0aCk7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIGxldCByb3cgPSAwO1xuICAgICAgbGV0IGxlZnQgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIHRoaXMubGluZVdpZHRoc1tyb3ddKTtcbiAgICAgIGZvciAoY29uc3QgaGl0Ym94IG9mIGhpdGJveGVzKSB7XG4gICAgICAgIGlmIChyb3cgIT09IGhpdGJveC5yb3cpIHtcbiAgICAgICAgICByb3cgPSBoaXRib3gucm93O1xuICAgICAgICAgIGxlZnQgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIHRoaXMubGluZVdpZHRoc1tyb3ddKTtcbiAgICAgICAgfVxuICAgICAgICBoaXRib3gudG9wICs9IHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgICBoaXRib3gubGVmdCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bEhlbHBlci54KGxlZnQpLCBoaXRib3gud2lkdGgpO1xuICAgICAgICBsZWZ0ICs9IGhpdGJveC53aWR0aCArIHBhZGRpbmc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBjb2wgPSAwO1xuICAgICAgbGV0IHRvcCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSB0aGlzLmNvbHVtblNpemVzW2NvbF0uaGVpZ2h0KTtcbiAgICAgIGZvciAoY29uc3QgaGl0Ym94IG9mIGhpdGJveGVzKSB7XG4gICAgICAgIGlmIChoaXRib3guY29sICE9PSBjb2wpIHtcbiAgICAgICAgICBjb2wgPSBoaXRib3guY29sO1xuICAgICAgICAgIHRvcCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSB0aGlzLmNvbHVtblNpemVzW2NvbF0uaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBoaXRib3gudG9wID0gdG9wO1xuICAgICAgICBoaXRib3gubGVmdCArPSB0aGlzLmxlZnQgKyBwYWRkaW5nO1xuICAgICAgICBoaXRib3gubGVmdCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bEhlbHBlci54KGhpdGJveC5sZWZ0KSwgaGl0Ym94LndpZHRoKTtcbiAgICAgICAgdG9wICs9IGhpdGJveC5oZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpc0hvcml6b250YWwoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ3RvcCcgfHwgdGhpcy5vcHRpb25zLnBvc2l0aW9uID09PSAnYm90dG9tJztcbiAgfVxuICBkcmF3KCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzcGxheSkge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICBjbGlwQXJlYShjdHgsIHRoaXMpO1xuICAgICAgdGhpcy5fZHJhdygpO1xuICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgIH1cbiAgfVxuICBfZHJhdygpIHtcbiAgICBjb25zdCB7b3B0aW9uczogb3B0cywgY29sdW1uU2l6ZXMsIGxpbmVXaWR0aHMsIGN0eH0gPSB0aGlzO1xuICAgIGNvbnN0IHthbGlnbiwgbGFiZWxzOiBsYWJlbE9wdHN9ID0gb3B0cztcbiAgICBjb25zdCBkZWZhdWx0Q29sb3IgPSBkZWZhdWx0cy5jb2xvcjtcbiAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdHMucnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgIGNvbnN0IGxhYmVsRm9udCA9IHRvRm9udChsYWJlbE9wdHMuZm9udCk7XG4gICAgY29uc3Qge2NvbG9yOiBmb250Q29sb3IsIHBhZGRpbmd9ID0gbGFiZWxPcHRzO1xuICAgIGNvbnN0IGZvbnRTaXplID0gbGFiZWxGb250LnNpemU7XG4gICAgY29uc3QgaGFsZkZvbnRTaXplID0gZm9udFNpemUgLyAyO1xuICAgIGxldCBjdXJzb3I7XG4gICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbignbGVmdCcpO1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICBjdHgubGluZVdpZHRoID0gMC41O1xuICAgIGN0eC5mb250ID0gbGFiZWxGb250LnN0cmluZztcbiAgICBjb25zdCB7Ym94V2lkdGgsIGJveEhlaWdodCwgaXRlbUhlaWdodH0gPSBnZXRCb3hTaXplKGxhYmVsT3B0cywgZm9udFNpemUpO1xuICAgIGNvbnN0IGRyYXdMZWdlbmRCb3ggPSBmdW5jdGlvbih4LCB5LCBsZWdlbmRJdGVtKSB7XG4gICAgICBpZiAoaXNOYU4oYm94V2lkdGgpIHx8IGJveFdpZHRoIDw9IDAgfHwgaXNOYU4oYm94SGVpZ2h0KSB8fCBib3hIZWlnaHQgPCAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjb25zdCBsaW5lV2lkdGggPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVXaWR0aCwgMSk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5maWxsU3R5bGUsIGRlZmF1bHRDb2xvcik7XG4gICAgICBjdHgubGluZUNhcCA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZUNhcCwgJ2J1dHQnKTtcbiAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZURhc2hPZmZzZXQsIDApO1xuICAgICAgY3R4LmxpbmVKb2luID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lSm9pbiwgJ21pdGVyJyk7XG4gICAgICBjdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5zdHJva2VTdHlsZSwgZGVmYXVsdENvbG9yKTtcbiAgICAgIGN0eC5zZXRMaW5lRGFzaCh2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVEYXNoLCBbXSkpO1xuICAgICAgaWYgKGxhYmVsT3B0cy51c2VQb2ludFN0eWxlKSB7XG4gICAgICAgIGNvbnN0IGRyYXdPcHRpb25zID0ge1xuICAgICAgICAgIHJhZGl1czogYm94SGVpZ2h0ICogTWF0aC5TUVJUMiAvIDIsXG4gICAgICAgICAgcG9pbnRTdHlsZTogbGVnZW5kSXRlbS5wb2ludFN0eWxlLFxuICAgICAgICAgIHJvdGF0aW9uOiBsZWdlbmRJdGVtLnJvdGF0aW9uLFxuICAgICAgICAgIGJvcmRlcldpZHRoOiBsaW5lV2lkdGhcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IHJ0bEhlbHBlci54UGx1cyh4LCBib3hXaWR0aCAvIDIpO1xuICAgICAgICBjb25zdCBjZW50ZXJZID0geSArIGhhbGZGb250U2l6ZTtcbiAgICAgICAgZHJhd1BvaW50TGVnZW5kKGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclksIGxhYmVsT3B0cy5wb2ludFN0eWxlV2lkdGggJiYgYm94V2lkdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgeUJveFRvcCA9IHkgKyBNYXRoLm1heCgoZm9udFNpemUgLSBib3hIZWlnaHQpIC8gMiwgMCk7XG4gICAgICAgIGNvbnN0IHhCb3hMZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIoeCwgYm94V2lkdGgpO1xuICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKGxlZ2VuZEl0ZW0uYm9yZGVyUmFkaXVzKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhib3JkZXJSYWRpdXMpLnNvbWUodiA9PiB2ICE9PSAwKSkge1xuICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgIHg6IHhCb3hMZWZ0LFxuICAgICAgICAgICAgeTogeUJveFRvcCxcbiAgICAgICAgICAgIHc6IGJveFdpZHRoLFxuICAgICAgICAgICAgaDogYm94SGVpZ2h0LFxuICAgICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3R4LnJlY3QoeEJveExlZnQsIHlCb3hUb3AsIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGlmIChsaW5lV2lkdGggIT09IDApIHtcbiAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfTtcbiAgICBjb25zdCBmaWxsVGV4dCA9IGZ1bmN0aW9uKHgsIHksIGxlZ2VuZEl0ZW0pIHtcbiAgICAgIHJlbmRlclRleHQoY3R4LCBsZWdlbmRJdGVtLnRleHQsIHgsIHkgKyAoaXRlbUhlaWdodCAvIDIpLCBsYWJlbEZvbnQsIHtcbiAgICAgICAgc3RyaWtldGhyb3VnaDogbGVnZW5kSXRlbS5oaWRkZW4sXG4gICAgICAgIHRleHRBbGlnbjogcnRsSGVscGVyLnRleHRBbGlnbihsZWdlbmRJdGVtLnRleHRBbGlnbilcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgeDogX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSBsaW5lV2lkdGhzWzBdKSxcbiAgICAgICAgeTogdGhpcy50b3AgKyBwYWRkaW5nICsgdGl0bGVIZWlnaHQsXG4gICAgICAgIGxpbmU6IDBcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgeDogdGhpcy5sZWZ0ICsgcGFkZGluZyxcbiAgICAgICAgeTogX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIGNvbHVtblNpemVzWzBdLmhlaWdodCksXG4gICAgICAgIGxpbmU6IDBcbiAgICAgIH07XG4gICAgfVxuICAgIG92ZXJyaWRlVGV4dERpcmVjdGlvbih0aGlzLmN0eCwgb3B0cy50ZXh0RGlyZWN0aW9uKTtcbiAgICBjb25zdCBsaW5lSGVpZ2h0ID0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgdGhpcy5sZWdlbmRJdGVtcy5mb3JFYWNoKChsZWdlbmRJdGVtLCBpKSA9PiB7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBsZWdlbmRJdGVtLmZvbnRDb2xvciB8fCBmb250Q29sb3I7XG4gICAgICBjdHguZmlsbFN0eWxlID0gbGVnZW5kSXRlbS5mb250Q29sb3IgfHwgZm9udENvbG9yO1xuICAgICAgY29uc3QgdGV4dFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG4gICAgICBjb25zdCB0ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKGxlZ2VuZEl0ZW0udGV4dEFsaWduIHx8IChsZWdlbmRJdGVtLnRleHRBbGlnbiA9IGxhYmVsT3B0cy50ZXh0QWxpZ24pKTtcbiAgICAgIGNvbnN0IHdpZHRoID0gYm94V2lkdGggKyBoYWxmRm9udFNpemUgKyB0ZXh0V2lkdGg7XG4gICAgICBsZXQgeCA9IGN1cnNvci54O1xuICAgICAgbGV0IHkgPSBjdXJzb3IueTtcbiAgICAgIHJ0bEhlbHBlci5zZXRXaWR0aCh0aGlzLndpZHRoKTtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgaWYgKGkgPiAwICYmIHggKyB3aWR0aCArIHBhZGRpbmcgPiB0aGlzLnJpZ2h0KSB7XG4gICAgICAgICAgeSA9IGN1cnNvci55ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgY3Vyc29yLmxpbmUrKztcbiAgICAgICAgICB4ID0gY3Vyc29yLnggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIGxpbmVXaWR0aHNbY3Vyc29yLmxpbmVdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpID4gMCAmJiB5ICsgbGluZUhlaWdodCA+IHRoaXMuYm90dG9tKSB7XG4gICAgICAgIHggPSBjdXJzb3IueCA9IHggKyBjb2x1bW5TaXplc1tjdXJzb3IubGluZV0ud2lkdGggKyBwYWRkaW5nO1xuICAgICAgICBjdXJzb3IubGluZSsrO1xuICAgICAgICB5ID0gY3Vyc29yLnkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gY29sdW1uU2l6ZXNbY3Vyc29yLmxpbmVdLmhlaWdodCk7XG4gICAgICB9XG4gICAgICBjb25zdCByZWFsWCA9IHJ0bEhlbHBlci54KHgpO1xuICAgICAgZHJhd0xlZ2VuZEJveChyZWFsWCwgeSwgbGVnZW5kSXRlbSk7XG4gICAgICB4ID0gX3RleHRYKHRleHRBbGlnbiwgeCArIGJveFdpZHRoICsgaGFsZkZvbnRTaXplLCBpc0hvcml6b250YWwgPyB4ICsgd2lkdGggOiB0aGlzLnJpZ2h0LCBvcHRzLnJ0bCk7XG4gICAgICBmaWxsVGV4dChydGxIZWxwZXIueCh4KSwgeSwgbGVnZW5kSXRlbSk7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGN1cnNvci54ICs9IHdpZHRoICsgcGFkZGluZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnNvci55ICs9IGxpbmVIZWlnaHQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdG9yZVRleHREaXJlY3Rpb24odGhpcy5jdHgsIG9wdHMudGV4dERpcmVjdGlvbik7XG4gIH1cbiAgZHJhd1RpdGxlKCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdGl0bGVPcHRzID0gb3B0cy50aXRsZTtcbiAgICBjb25zdCB0aXRsZUZvbnQgPSB0b0ZvbnQodGl0bGVPcHRzLmZvbnQpO1xuICAgIGNvbnN0IHRpdGxlUGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZU9wdHMucGFkZGluZyk7XG4gICAgaWYgKCF0aXRsZU9wdHMuZGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdHMucnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGl0bGVPcHRzLnBvc2l0aW9uO1xuICAgIGNvbnN0IGhhbGZGb250U2l6ZSA9IHRpdGxlRm9udC5zaXplIC8gMjtcbiAgICBjb25zdCB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZSA9IHRpdGxlUGFkZGluZy50b3AgKyBoYWxmRm9udFNpemU7XG4gICAgbGV0IHk7XG4gICAgbGV0IGxlZnQgPSB0aGlzLmxlZnQ7XG4gICAgbGV0IG1heFdpZHRoID0gdGhpcy53aWR0aDtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgbWF4V2lkdGggPSBNYXRoLm1heCguLi50aGlzLmxpbmVXaWR0aHMpO1xuICAgICAgeSA9IHRoaXMudG9wICsgdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemU7XG4gICAgICBsZWZ0ID0gX2FsaWduU3RhcnRFbmQob3B0cy5hbGlnbiwgbGVmdCwgdGhpcy5yaWdodCAtIG1heFdpZHRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gdGhpcy5jb2x1bW5TaXplcy5yZWR1Y2UoKGFjYywgc2l6ZSkgPT4gTWF0aC5tYXgoYWNjLCBzaXplLmhlaWdodCksIDApO1xuICAgICAgeSA9IHRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplICsgX2FsaWduU3RhcnRFbmQob3B0cy5hbGlnbiwgdGhpcy50b3AsIHRoaXMuYm90dG9tIC0gbWF4SGVpZ2h0IC0gb3B0cy5sYWJlbHMucGFkZGluZyAtIHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpKTtcbiAgICB9XG4gICAgY29uc3QgeCA9IF9hbGlnblN0YXJ0RW5kKHBvc2l0aW9uLCBsZWZ0LCBsZWZ0ICsgbWF4V2lkdGgpO1xuICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKF90b0xlZnRSaWdodENlbnRlcihwb3NpdGlvbikpO1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aXRsZU9wdHMuY29sb3I7XG4gICAgY3R4LmZpbGxTdHlsZSA9IHRpdGxlT3B0cy5jb2xvcjtcbiAgICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gICAgcmVuZGVyVGV4dChjdHgsIHRpdGxlT3B0cy50ZXh0LCB4LCB5LCB0aXRsZUZvbnQpO1xuICB9XG4gIF9jb21wdXRlVGl0bGVIZWlnaHQoKSB7XG4gICAgY29uc3QgdGl0bGVPcHRzID0gdGhpcy5vcHRpb25zLnRpdGxlO1xuICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udCh0aXRsZU9wdHMuZm9udCk7XG4gICAgY29uc3QgdGl0bGVQYWRkaW5nID0gdG9QYWRkaW5nKHRpdGxlT3B0cy5wYWRkaW5nKTtcbiAgICByZXR1cm4gdGl0bGVPcHRzLmRpc3BsYXkgPyB0aXRsZUZvbnQubGluZUhlaWdodCArIHRpdGxlUGFkZGluZy5oZWlnaHQgOiAwO1xuICB9XG4gIF9nZXRMZWdlbmRJdGVtQXQoeCwgeSkge1xuICAgIGxldCBpLCBoaXRCb3gsIGxoO1xuICAgIGlmIChfaXNCZXR3ZWVuKHgsIHRoaXMubGVmdCwgdGhpcy5yaWdodClcbiAgICAgICYmIF9pc0JldHdlZW4oeSwgdGhpcy50b3AsIHRoaXMuYm90dG9tKSkge1xuICAgICAgbGggPSB0aGlzLmxlZ2VuZEhpdEJveGVzO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxoLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGhpdEJveCA9IGxoW2ldO1xuICAgICAgICBpZiAoX2lzQmV0d2Vlbih4LCBoaXRCb3gubGVmdCwgaGl0Qm94LmxlZnQgKyBoaXRCb3gud2lkdGgpXG4gICAgICAgICAgJiYgX2lzQmV0d2Vlbih5LCBoaXRCb3gudG9wLCBoaXRCb3gudG9wICsgaGl0Qm94LmhlaWdodCkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5sZWdlbmRJdGVtc1tpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBoYW5kbGVFdmVudChlKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAoIWlzTGlzdGVuZWQoZS50eXBlLCBvcHRzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBob3ZlcmVkSXRlbSA9IHRoaXMuX2dldExlZ2VuZEl0ZW1BdChlLngsIGUueSk7XG4gICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlbW92ZScgfHwgZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICBjb25zdCBwcmV2aW91cyA9IHRoaXMuX2hvdmVyZWRJdGVtO1xuICAgICAgY29uc3Qgc2FtZUl0ZW0gPSBpdGVtc0VxdWFsKHByZXZpb3VzLCBob3ZlcmVkSXRlbSk7XG4gICAgICBpZiAocHJldmlvdXMgJiYgIXNhbWVJdGVtKSB7XG4gICAgICAgIGNhbGxiYWNrKG9wdHMub25MZWF2ZSwgW2UsIHByZXZpb3VzLCB0aGlzXSwgdGhpcyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9ob3ZlcmVkSXRlbSA9IGhvdmVyZWRJdGVtO1xuICAgICAgaWYgKGhvdmVyZWRJdGVtICYmICFzYW1lSXRlbSkge1xuICAgICAgICBjYWxsYmFjayhvcHRzLm9uSG92ZXIsIFtlLCBob3ZlcmVkSXRlbSwgdGhpc10sIHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaG92ZXJlZEl0ZW0pIHtcbiAgICAgIGNhbGxiYWNrKG9wdHMub25DbGljaywgW2UsIGhvdmVyZWRJdGVtLCB0aGlzXSwgdGhpcyk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBpc0xpc3RlbmVkKHR5cGUsIG9wdHMpIHtcbiAgaWYgKCh0eXBlID09PSAnbW91c2Vtb3ZlJyB8fCB0eXBlID09PSAnbW91c2VvdXQnKSAmJiAob3B0cy5vbkhvdmVyIHx8IG9wdHMub25MZWF2ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAob3B0cy5vbkNsaWNrICYmICh0eXBlID09PSAnY2xpY2snIHx8IHR5cGUgPT09ICdtb3VzZXVwJykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG52YXIgcGx1Z2luX2xlZ2VuZCA9IHtcbiAgaWQ6ICdsZWdlbmQnLFxuICBfZWxlbWVudDogTGVnZW5kLFxuICBzdGFydChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsZWdlbmQgPSBjaGFydC5sZWdlbmQgPSBuZXcgTGVnZW5kKHtjdHg6IGNoYXJ0LmN0eCwgb3B0aW9ucywgY2hhcnR9KTtcbiAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgbGVnZW5kLCBvcHRpb25zKTtcbiAgICBsYXlvdXRzLmFkZEJveChjaGFydCwgbGVnZW5kKTtcbiAgfSxcbiAgc3RvcChjaGFydCkge1xuICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCBjaGFydC5sZWdlbmQpO1xuICAgIGRlbGV0ZSBjaGFydC5sZWdlbmQ7XG4gIH0sXG4gIGJlZm9yZVVwZGF0ZShjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsZWdlbmQgPSBjaGFydC5sZWdlbmQ7XG4gICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIGxlZ2VuZCwgb3B0aW9ucyk7XG4gICAgbGVnZW5kLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9LFxuICBhZnRlclVwZGF0ZShjaGFydCkge1xuICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICBsZWdlbmQuYnVpbGRMYWJlbHMoKTtcbiAgICBsZWdlbmQuYWRqdXN0SGl0Qm94ZXMoKTtcbiAgfSxcbiAgYWZ0ZXJFdmVudChjaGFydCwgYXJncykge1xuICAgIGlmICghYXJncy5yZXBsYXkpIHtcbiAgICAgIGNoYXJ0LmxlZ2VuZC5oYW5kbGVFdmVudChhcmdzLmV2ZW50KTtcbiAgICB9XG4gIH0sXG4gIGRlZmF1bHRzOiB7XG4gICAgZGlzcGxheTogdHJ1ZSxcbiAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgYWxpZ246ICdjZW50ZXInLFxuICAgIGZ1bGxTaXplOiB0cnVlLFxuICAgIHJldmVyc2U6IGZhbHNlLFxuICAgIHdlaWdodDogMTAwMCxcbiAgICBvbkNsaWNrKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgY29uc3QgaW5kZXggPSBsZWdlbmRJdGVtLmRhdGFzZXRJbmRleDtcbiAgICAgIGNvbnN0IGNpID0gbGVnZW5kLmNoYXJ0O1xuICAgICAgaWYgKGNpLmlzRGF0YXNldFZpc2libGUoaW5kZXgpKSB7XG4gICAgICAgIGNpLmhpZGUoaW5kZXgpO1xuICAgICAgICBsZWdlbmRJdGVtLmhpZGRlbiA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaS5zaG93KGluZGV4KTtcbiAgICAgICAgbGVnZW5kSXRlbS5oaWRkZW4gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uSG92ZXI6IG51bGwsXG4gICAgb25MZWF2ZTogbnVsbCxcbiAgICBsYWJlbHM6IHtcbiAgICAgIGNvbG9yOiAoY3R4KSA9PiBjdHguY2hhcnQub3B0aW9ucy5jb2xvcixcbiAgICAgIGJveFdpZHRoOiA0MCxcbiAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgZ2VuZXJhdGVMYWJlbHMoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgZGF0YXNldHMgPSBjaGFydC5kYXRhLmRhdGFzZXRzO1xuICAgICAgICBjb25zdCB7bGFiZWxzOiB7dXNlUG9pbnRTdHlsZSwgcG9pbnRTdHlsZSwgdGV4dEFsaWduLCBjb2xvcn19ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgIHJldHVybiBjaGFydC5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKCkubWFwKChtZXRhKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUodXNlUG9pbnRTdHlsZSA/IDAgOiB1bmRlZmluZWQpO1xuICAgICAgICAgIGNvbnN0IGJvcmRlcldpZHRoID0gdG9QYWRkaW5nKHN0eWxlLmJvcmRlcldpZHRoKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dDogZGF0YXNldHNbbWV0YS5pbmRleF0ubGFiZWwsXG4gICAgICAgICAgICBmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIGZvbnRDb2xvcjogY29sb3IsXG4gICAgICAgICAgICBoaWRkZW46ICFtZXRhLnZpc2libGUsXG4gICAgICAgICAgICBsaW5lQ2FwOiBzdHlsZS5ib3JkZXJDYXBTdHlsZSxcbiAgICAgICAgICAgIGxpbmVEYXNoOiBzdHlsZS5ib3JkZXJEYXNoLFxuICAgICAgICAgICAgbGluZURhc2hPZmZzZXQ6IHN0eWxlLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgICAgICBsaW5lSm9pbjogc3R5bGUuYm9yZGVySm9pblN0eWxlLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAoYm9yZGVyV2lkdGgud2lkdGggKyBib3JkZXJXaWR0aC5oZWlnaHQpIC8gNCxcbiAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUgfHwgc3R5bGUucG9pbnRTdHlsZSxcbiAgICAgICAgICAgIHJvdGF0aW9uOiBzdHlsZS5yb3RhdGlvbixcbiAgICAgICAgICAgIHRleHRBbGlnbjogdGV4dEFsaWduIHx8IHN0eWxlLnRleHRBbGlnbixcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgICAgICAgIGRhdGFzZXRJbmRleDogbWV0YS5pbmRleFxuICAgICAgICAgIH07XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdGl0bGU6IHtcbiAgICAgIGNvbG9yOiAoY3R4KSA9PiBjdHguY2hhcnQub3B0aW9ucy5jb2xvcixcbiAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgcG9zaXRpb246ICdjZW50ZXInLFxuICAgICAgdGV4dDogJycsXG4gICAgfVxuICB9LFxuICBkZXNjcmlwdG9yczoge1xuICAgIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gIW5hbWUuc3RhcnRzV2l0aCgnb24nKSxcbiAgICBsYWJlbHM6IHtcbiAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gIVsnZ2VuZXJhdGVMYWJlbHMnLCAnZmlsdGVyJywgJ3NvcnQnXS5pbmNsdWRlcyhuYW1lKSxcbiAgICB9XG4gIH0sXG59O1xuXG5jbGFzcyBUaXRsZSBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY2hhcnQgPSBjb25maWcuY2hhcnQ7XG4gICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgdGhpcy5jdHggPSBjb25maWcuY3R4O1xuICAgIHRoaXMuX3BhZGRpbmcgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sZWZ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2VpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZnVsbFNpemUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgdXBkYXRlKG1heFdpZHRoLCBtYXhIZWlnaHQpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIHRoaXMubGVmdCA9IDA7XG4gICAgdGhpcy50b3AgPSAwO1xuICAgIGlmICghb3B0cy5kaXNwbGF5KSB7XG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5oZWlnaHQgPSB0aGlzLnJpZ2h0ID0gdGhpcy5ib3R0b20gPSAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLndpZHRoID0gdGhpcy5yaWdodCA9IG1heFdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5ib3R0b20gPSBtYXhIZWlnaHQ7XG4gICAgY29uc3QgbGluZUNvdW50ID0gaXNBcnJheShvcHRzLnRleHQpID8gb3B0cy50ZXh0Lmxlbmd0aCA6IDE7XG4gICAgdGhpcy5fcGFkZGluZyA9IHRvUGFkZGluZyhvcHRzLnBhZGRpbmcpO1xuICAgIGNvbnN0IHRleHRTaXplID0gbGluZUNvdW50ICogdG9Gb250KG9wdHMuZm9udCkubGluZUhlaWdodCArIHRoaXMuX3BhZGRpbmcuaGVpZ2h0O1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB0aGlzLmhlaWdodCA9IHRleHRTaXplO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndpZHRoID0gdGV4dFNpemU7XG4gICAgfVxuICB9XG4gIGlzSG9yaXpvbnRhbCgpIHtcbiAgICBjb25zdCBwb3MgPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG4gICAgcmV0dXJuIHBvcyA9PT0gJ3RvcCcgfHwgcG9zID09PSAnYm90dG9tJztcbiAgfVxuICBfZHJhd0FyZ3Mob2Zmc2V0KSB7XG4gICAgY29uc3Qge3RvcCwgbGVmdCwgYm90dG9tLCByaWdodCwgb3B0aW9uc30gPSB0aGlzO1xuICAgIGNvbnN0IGFsaWduID0gb3B0aW9ucy5hbGlnbjtcbiAgICBsZXQgcm90YXRpb24gPSAwO1xuICAgIGxldCBtYXhXaWR0aCwgdGl0bGVYLCB0aXRsZVk7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHRpdGxlWCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBsZWZ0LCByaWdodCk7XG4gICAgICB0aXRsZVkgPSB0b3AgKyBvZmZzZXQ7XG4gICAgICBtYXhXaWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG9wdGlvbnMucG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICB0aXRsZVggPSBsZWZ0ICsgb2Zmc2V0O1xuICAgICAgICB0aXRsZVkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgYm90dG9tLCB0b3ApO1xuICAgICAgICByb3RhdGlvbiA9IFBJICogLTAuNTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpdGxlWCA9IHJpZ2h0IC0gb2Zmc2V0O1xuICAgICAgICB0aXRsZVkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdG9wLCBib3R0b20pO1xuICAgICAgICByb3RhdGlvbiA9IFBJICogMC41O1xuICAgICAgfVxuICAgICAgbWF4V2lkdGggPSBib3R0b20gLSB0b3A7XG4gICAgfVxuICAgIHJldHVybiB7dGl0bGVYLCB0aXRsZVksIG1heFdpZHRoLCByb3RhdGlvbn07XG4gIH1cbiAgZHJhdygpIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGlmICghb3B0cy5kaXNwbGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGZvbnRPcHRzID0gdG9Gb250KG9wdHMuZm9udCk7XG4gICAgY29uc3QgbGluZUhlaWdodCA9IGZvbnRPcHRzLmxpbmVIZWlnaHQ7XG4gICAgY29uc3Qgb2Zmc2V0ID0gbGluZUhlaWdodCAvIDIgKyB0aGlzLl9wYWRkaW5nLnRvcDtcbiAgICBjb25zdCB7dGl0bGVYLCB0aXRsZVksIG1heFdpZHRoLCByb3RhdGlvbn0gPSB0aGlzLl9kcmF3QXJncyhvZmZzZXQpO1xuICAgIHJlbmRlclRleHQoY3R4LCBvcHRzLnRleHQsIDAsIDAsIGZvbnRPcHRzLCB7XG4gICAgICBjb2xvcjogb3B0cy5jb2xvcixcbiAgICAgIG1heFdpZHRoLFxuICAgICAgcm90YXRpb24sXG4gICAgICB0ZXh0QWxpZ246IF90b0xlZnRSaWdodENlbnRlcihvcHRzLmFsaWduKSxcbiAgICAgIHRleHRCYXNlbGluZTogJ21pZGRsZScsXG4gICAgICB0cmFuc2xhdGlvbjogW3RpdGxlWCwgdGl0bGVZXSxcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlVGl0bGUoY2hhcnQsIHRpdGxlT3B0cykge1xuICBjb25zdCB0aXRsZSA9IG5ldyBUaXRsZSh7XG4gICAgY3R4OiBjaGFydC5jdHgsXG4gICAgb3B0aW9uczogdGl0bGVPcHRzLFxuICAgIGNoYXJ0XG4gIH0pO1xuICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIHRpdGxlT3B0cyk7XG4gIGxheW91dHMuYWRkQm94KGNoYXJ0LCB0aXRsZSk7XG4gIGNoYXJ0LnRpdGxlQmxvY2sgPSB0aXRsZTtcbn1cbnZhciBwbHVnaW5fdGl0bGUgPSB7XG4gIGlkOiAndGl0bGUnLFxuICBfZWxlbWVudDogVGl0bGUsXG4gIHN0YXJ0KGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGNyZWF0ZVRpdGxlKGNoYXJ0LCBvcHRpb25zKTtcbiAgfSxcbiAgc3RvcChjaGFydCkge1xuICAgIGNvbnN0IHRpdGxlQmxvY2sgPSBjaGFydC50aXRsZUJsb2NrO1xuICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCB0aXRsZUJsb2NrKTtcbiAgICBkZWxldGUgY2hhcnQudGl0bGVCbG9jaztcbiAgfSxcbiAgYmVmb3JlVXBkYXRlKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHRpdGxlID0gY2hhcnQudGl0bGVCbG9jaztcbiAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIG9wdGlvbnMpO1xuICAgIHRpdGxlLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9LFxuICBkZWZhdWx0czoge1xuICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICBmb250OiB7XG4gICAgICB3ZWlnaHQ6ICdib2xkJyxcbiAgICB9LFxuICAgIGZ1bGxTaXplOiB0cnVlLFxuICAgIHBhZGRpbmc6IDEwLFxuICAgIHBvc2l0aW9uOiAndG9wJyxcbiAgICB0ZXh0OiAnJyxcbiAgICB3ZWlnaHQ6IDIwMDBcbiAgfSxcbiAgZGVmYXVsdFJvdXRlczoge1xuICAgIGNvbG9yOiAnY29sb3InXG4gIH0sXG4gIGRlc2NyaXB0b3JzOiB7XG4gICAgX3NjcmlwdGFibGU6IHRydWUsXG4gICAgX2luZGV4YWJsZTogZmFsc2UsXG4gIH0sXG59O1xuXG5jb25zdCBtYXAgPSBuZXcgV2Vha01hcCgpO1xudmFyIHBsdWdpbl9zdWJ0aXRsZSA9IHtcbiAgaWQ6ICdzdWJ0aXRsZScsXG4gIHN0YXJ0KGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHRpdGxlID0gbmV3IFRpdGxlKHtcbiAgICAgIGN0eDogY2hhcnQuY3R4LFxuICAgICAgb3B0aW9ucyxcbiAgICAgIGNoYXJ0XG4gICAgfSk7XG4gICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCBvcHRpb25zKTtcbiAgICBsYXlvdXRzLmFkZEJveChjaGFydCwgdGl0bGUpO1xuICAgIG1hcC5zZXQoY2hhcnQsIHRpdGxlKTtcbiAgfSxcbiAgc3RvcChjaGFydCkge1xuICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCBtYXAuZ2V0KGNoYXJ0KSk7XG4gICAgbWFwLmRlbGV0ZShjaGFydCk7XG4gIH0sXG4gIGJlZm9yZVVwZGF0ZShjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB0aXRsZSA9IG1hcC5nZXQoY2hhcnQpO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgdGl0bGUub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH0sXG4gIGRlZmF1bHRzOiB7XG4gICAgYWxpZ246ICdjZW50ZXInLFxuICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgIGZvbnQ6IHtcbiAgICAgIHdlaWdodDogJ25vcm1hbCcsXG4gICAgfSxcbiAgICBmdWxsU2l6ZTogdHJ1ZSxcbiAgICBwYWRkaW5nOiAwLFxuICAgIHBvc2l0aW9uOiAndG9wJyxcbiAgICB0ZXh0OiAnJyxcbiAgICB3ZWlnaHQ6IDE1MDBcbiAgfSxcbiAgZGVmYXVsdFJvdXRlczoge1xuICAgIGNvbG9yOiAnY29sb3InXG4gIH0sXG4gIGRlc2NyaXB0b3JzOiB7XG4gICAgX3NjcmlwdGFibGU6IHRydWUsXG4gICAgX2luZGV4YWJsZTogZmFsc2UsXG4gIH0sXG59O1xuXG5jb25zdCBwb3NpdGlvbmVycyA9IHtcbiAgYXZlcmFnZShpdGVtcykge1xuICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBpLCBsZW47XG4gICAgbGV0IHggPSAwO1xuICAgIGxldCB5ID0gMDtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBjb25zdCBlbCA9IGl0ZW1zW2ldLmVsZW1lbnQ7XG4gICAgICBpZiAoZWwgJiYgZWwuaGFzVmFsdWUoKSkge1xuICAgICAgICBjb25zdCBwb3MgPSBlbC50b29sdGlwUG9zaXRpb24oKTtcbiAgICAgICAgeCArPSBwb3MueDtcbiAgICAgICAgeSArPSBwb3MueTtcbiAgICAgICAgKytjb3VudDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHggLyBjb3VudCxcbiAgICAgIHk6IHkgLyBjb3VudFxuICAgIH07XG4gIH0sXG4gIG5lYXJlc3QoaXRlbXMsIGV2ZW50UG9zaXRpb24pIHtcbiAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgeCA9IGV2ZW50UG9zaXRpb24ueDtcbiAgICBsZXQgeSA9IGV2ZW50UG9zaXRpb24ueTtcbiAgICBsZXQgbWluRGlzdGFuY2UgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgbGV0IGksIGxlbiwgbmVhcmVzdEVsZW1lbnQ7XG4gICAgZm9yIChpID0gMCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IGVsID0gaXRlbXNbaV0uZWxlbWVudDtcbiAgICAgIGlmIChlbCAmJiBlbC5oYXNWYWx1ZSgpKSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IGVsLmdldENlbnRlclBvaW50KCk7XG4gICAgICAgIGNvbnN0IGQgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMoZXZlbnRQb3NpdGlvbiwgY2VudGVyKTtcbiAgICAgICAgaWYgKGQgPCBtaW5EaXN0YW5jZSkge1xuICAgICAgICAgIG1pbkRpc3RhbmNlID0gZDtcbiAgICAgICAgICBuZWFyZXN0RWxlbWVudCA9IGVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChuZWFyZXN0RWxlbWVudCkge1xuICAgICAgY29uc3QgdHAgPSBuZWFyZXN0RWxlbWVudC50b29sdGlwUG9zaXRpb24oKTtcbiAgICAgIHggPSB0cC54O1xuICAgICAgeSA9IHRwLnk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH07XG4gIH1cbn07XG5mdW5jdGlvbiBwdXNoT3JDb25jYXQoYmFzZSwgdG9QdXNoKSB7XG4gIGlmICh0b1B1c2gpIHtcbiAgICBpZiAoaXNBcnJheSh0b1B1c2gpKSB7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShiYXNlLCB0b1B1c2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXNlLnB1c2godG9QdXNoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJhc2U7XG59XG5mdW5jdGlvbiBzcGxpdE5ld2xpbmVzKHN0cikge1xuICBpZiAoKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnIHx8IHN0ciBpbnN0YW5jZW9mIFN0cmluZykgJiYgc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICByZXR1cm4gc3RyLnNwbGl0KCdcXG4nKTtcbiAgfVxuICByZXR1cm4gc3RyO1xufVxuZnVuY3Rpb24gY3JlYXRlVG9vbHRpcEl0ZW0oY2hhcnQsIGl0ZW0pIHtcbiAgY29uc3Qge2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9ID0gaXRlbTtcbiAgY29uc3QgY29udHJvbGxlciA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgY29uc3Qge2xhYmVsLCB2YWx1ZX0gPSBjb250cm9sbGVyLmdldExhYmVsQW5kVmFsdWUoaW5kZXgpO1xuICByZXR1cm4ge1xuICAgIGNoYXJ0LFxuICAgIGxhYmVsLFxuICAgIHBhcnNlZDogY29udHJvbGxlci5nZXRQYXJzZWQoaW5kZXgpLFxuICAgIHJhdzogY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmRhdGFbaW5kZXhdLFxuICAgIGZvcm1hdHRlZFZhbHVlOiB2YWx1ZSxcbiAgICBkYXRhc2V0OiBjb250cm9sbGVyLmdldERhdGFzZXQoKSxcbiAgICBkYXRhSW5kZXg6IGluZGV4LFxuICAgIGRhdGFzZXRJbmRleCxcbiAgICBlbGVtZW50XG4gIH07XG59XG5mdW5jdGlvbiBnZXRUb29sdGlwU2l6ZSh0b29sdGlwLCBvcHRpb25zKSB7XG4gIGNvbnN0IGN0eCA9IHRvb2x0aXAuY2hhcnQuY3R4O1xuICBjb25zdCB7Ym9keSwgZm9vdGVyLCB0aXRsZX0gPSB0b29sdGlwO1xuICBjb25zdCB7Ym94V2lkdGgsIGJveEhlaWdodH0gPSBvcHRpb25zO1xuICBjb25zdCBib2R5Rm9udCA9IHRvRm9udChvcHRpb25zLmJvZHlGb250KTtcbiAgY29uc3QgdGl0bGVGb250ID0gdG9Gb250KG9wdGlvbnMudGl0bGVGb250KTtcbiAgY29uc3QgZm9vdGVyRm9udCA9IHRvRm9udChvcHRpb25zLmZvb3RlckZvbnQpO1xuICBjb25zdCB0aXRsZUxpbmVDb3VudCA9IHRpdGxlLmxlbmd0aDtcbiAgY29uc3QgZm9vdGVyTGluZUNvdW50ID0gZm9vdGVyLmxlbmd0aDtcbiAgY29uc3QgYm9keUxpbmVJdGVtQ291bnQgPSBib2R5Lmxlbmd0aDtcbiAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICBsZXQgaGVpZ2h0ID0gcGFkZGluZy5oZWlnaHQ7XG4gIGxldCB3aWR0aCA9IDA7XG4gIGxldCBjb21iaW5lZEJvZHlMZW5ndGggPSBib2R5LnJlZHVjZSgoY291bnQsIGJvZHlJdGVtKSA9PiBjb3VudCArIGJvZHlJdGVtLmJlZm9yZS5sZW5ndGggKyBib2R5SXRlbS5saW5lcy5sZW5ndGggKyBib2R5SXRlbS5hZnRlci5sZW5ndGgsIDApO1xuICBjb21iaW5lZEJvZHlMZW5ndGggKz0gdG9vbHRpcC5iZWZvcmVCb2R5Lmxlbmd0aCArIHRvb2x0aXAuYWZ0ZXJCb2R5Lmxlbmd0aDtcbiAgaWYgKHRpdGxlTGluZUNvdW50KSB7XG4gICAgaGVpZ2h0ICs9IHRpdGxlTGluZUNvdW50ICogdGl0bGVGb250LmxpbmVIZWlnaHRcblx0XHRcdCsgKHRpdGxlTGluZUNvdW50IC0gMSkgKiBvcHRpb25zLnRpdGxlU3BhY2luZ1xuXHRcdFx0KyBvcHRpb25zLnRpdGxlTWFyZ2luQm90dG9tO1xuICB9XG4gIGlmIChjb21iaW5lZEJvZHlMZW5ndGgpIHtcbiAgICBjb25zdCBib2R5TGluZUhlaWdodCA9IG9wdGlvbnMuZGlzcGxheUNvbG9ycyA/IE1hdGgubWF4KGJveEhlaWdodCwgYm9keUZvbnQubGluZUhlaWdodCkgOiBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgIGhlaWdodCArPSBib2R5TGluZUl0ZW1Db3VudCAqIGJvZHlMaW5lSGVpZ2h0XG5cdFx0XHQrIChjb21iaW5lZEJvZHlMZW5ndGggLSBib2R5TGluZUl0ZW1Db3VudCkgKiBib2R5Rm9udC5saW5lSGVpZ2h0XG5cdFx0XHQrIChjb21iaW5lZEJvZHlMZW5ndGggLSAxKSAqIG9wdGlvbnMuYm9keVNwYWNpbmc7XG4gIH1cbiAgaWYgKGZvb3RlckxpbmVDb3VudCkge1xuICAgIGhlaWdodCArPSBvcHRpb25zLmZvb3Rlck1hcmdpblRvcFxuXHRcdFx0KyBmb290ZXJMaW5lQ291bnQgKiBmb290ZXJGb250LmxpbmVIZWlnaHRcblx0XHRcdCsgKGZvb3RlckxpbmVDb3VudCAtIDEpICogb3B0aW9ucy5mb290ZXJTcGFjaW5nO1xuICB9XG4gIGxldCB3aWR0aFBhZGRpbmcgPSAwO1xuICBjb25zdCBtYXhMaW5lV2lkdGggPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgd2lkdGggPSBNYXRoLm1heCh3aWR0aCwgY3R4Lm1lYXN1cmVUZXh0KGxpbmUpLndpZHRoICsgd2lkdGhQYWRkaW5nKTtcbiAgfTtcbiAgY3R4LnNhdmUoKTtcbiAgY3R4LmZvbnQgPSB0aXRsZUZvbnQuc3RyaW5nO1xuICBlYWNoKHRvb2x0aXAudGl0bGUsIG1heExpbmVXaWR0aCk7XG4gIGN0eC5mb250ID0gYm9keUZvbnQuc3RyaW5nO1xuICBlYWNoKHRvb2x0aXAuYmVmb3JlQm9keS5jb25jYXQodG9vbHRpcC5hZnRlckJvZHkpLCBtYXhMaW5lV2lkdGgpO1xuICB3aWR0aFBhZGRpbmcgPSBvcHRpb25zLmRpc3BsYXlDb2xvcnMgPyAoYm94V2lkdGggKyAyICsgb3B0aW9ucy5ib3hQYWRkaW5nKSA6IDA7XG4gIGVhY2goYm9keSwgKGJvZHlJdGVtKSA9PiB7XG4gICAgZWFjaChib2R5SXRlbS5iZWZvcmUsIG1heExpbmVXaWR0aCk7XG4gICAgZWFjaChib2R5SXRlbS5saW5lcywgbWF4TGluZVdpZHRoKTtcbiAgICBlYWNoKGJvZHlJdGVtLmFmdGVyLCBtYXhMaW5lV2lkdGgpO1xuICB9KTtcbiAgd2lkdGhQYWRkaW5nID0gMDtcbiAgY3R4LmZvbnQgPSBmb290ZXJGb250LnN0cmluZztcbiAgZWFjaCh0b29sdGlwLmZvb3RlciwgbWF4TGluZVdpZHRoKTtcbiAgY3R4LnJlc3RvcmUoKTtcbiAgd2lkdGggKz0gcGFkZGluZy53aWR0aDtcbiAgcmV0dXJuIHt3aWR0aCwgaGVpZ2h0fTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZVlBbGlnbihjaGFydCwgc2l6ZSkge1xuICBjb25zdCB7eSwgaGVpZ2h0fSA9IHNpemU7XG4gIGlmICh5IDwgaGVpZ2h0IC8gMikge1xuICAgIHJldHVybiAndG9wJztcbiAgfSBlbHNlIGlmICh5ID4gKGNoYXJ0LmhlaWdodCAtIGhlaWdodCAvIDIpKSB7XG4gICAgcmV0dXJuICdib3R0b20nO1xuICB9XG4gIHJldHVybiAnY2VudGVyJztcbn1cbmZ1bmN0aW9uIGRvZXNOb3RGaXRXaXRoQWxpZ24oeEFsaWduLCBjaGFydCwgb3B0aW9ucywgc2l6ZSkge1xuICBjb25zdCB7eCwgd2lkdGh9ID0gc2l6ZTtcbiAgY29uc3QgY2FyZXQgPSBvcHRpb25zLmNhcmV0U2l6ZSArIG9wdGlvbnMuY2FyZXRQYWRkaW5nO1xuICBpZiAoeEFsaWduID09PSAnbGVmdCcgJiYgeCArIHdpZHRoICsgY2FyZXQgPiBjaGFydC53aWR0aCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh4QWxpZ24gPT09ICdyaWdodCcgJiYgeCAtIHdpZHRoIC0gY2FyZXQgPCAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGRldGVybWluZVhBbGlnbihjaGFydCwgb3B0aW9ucywgc2l6ZSwgeUFsaWduKSB7XG4gIGNvbnN0IHt4LCB3aWR0aH0gPSBzaXplO1xuICBjb25zdCB7d2lkdGg6IGNoYXJ0V2lkdGgsIGNoYXJ0QXJlYToge2xlZnQsIHJpZ2h0fX0gPSBjaGFydDtcbiAgbGV0IHhBbGlnbiA9ICdjZW50ZXInO1xuICBpZiAoeUFsaWduID09PSAnY2VudGVyJykge1xuICAgIHhBbGlnbiA9IHggPD0gKGxlZnQgKyByaWdodCkgLyAyID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgfSBlbHNlIGlmICh4IDw9IHdpZHRoIC8gMikge1xuICAgIHhBbGlnbiA9ICdsZWZ0JztcbiAgfSBlbHNlIGlmICh4ID49IGNoYXJ0V2lkdGggLSB3aWR0aCAvIDIpIHtcbiAgICB4QWxpZ24gPSAncmlnaHQnO1xuICB9XG4gIGlmIChkb2VzTm90Rml0V2l0aEFsaWduKHhBbGlnbiwgY2hhcnQsIG9wdGlvbnMsIHNpemUpKSB7XG4gICAgeEFsaWduID0gJ2NlbnRlcic7XG4gIH1cbiAgcmV0dXJuIHhBbGlnbjtcbn1cbmZ1bmN0aW9uIGRldGVybWluZUFsaWdubWVudChjaGFydCwgb3B0aW9ucywgc2l6ZSkge1xuICBjb25zdCB5QWxpZ24gPSBzaXplLnlBbGlnbiB8fCBvcHRpb25zLnlBbGlnbiB8fCBkZXRlcm1pbmVZQWxpZ24oY2hhcnQsIHNpemUpO1xuICByZXR1cm4ge1xuICAgIHhBbGlnbjogc2l6ZS54QWxpZ24gfHwgb3B0aW9ucy54QWxpZ24gfHwgZGV0ZXJtaW5lWEFsaWduKGNoYXJ0LCBvcHRpb25zLCBzaXplLCB5QWxpZ24pLFxuICAgIHlBbGlnblxuICB9O1xufVxuZnVuY3Rpb24gYWxpZ25YKHNpemUsIHhBbGlnbikge1xuICBsZXQge3gsIHdpZHRofSA9IHNpemU7XG4gIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICB4IC09IHdpZHRoO1xuICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICB4IC09ICh3aWR0aCAvIDIpO1xuICB9XG4gIHJldHVybiB4O1xufVxuZnVuY3Rpb24gYWxpZ25ZKHNpemUsIHlBbGlnbiwgcGFkZGluZ0FuZFNpemUpIHtcbiAgbGV0IHt5LCBoZWlnaHR9ID0gc2l6ZTtcbiAgaWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICB5ICs9IHBhZGRpbmdBbmRTaXplO1xuICB9IGVsc2UgaWYgKHlBbGlnbiA9PT0gJ2JvdHRvbScpIHtcbiAgICB5IC09IGhlaWdodCArIHBhZGRpbmdBbmRTaXplO1xuICB9IGVsc2Uge1xuICAgIHkgLT0gKGhlaWdodCAvIDIpO1xuICB9XG4gIHJldHVybiB5O1xufVxuZnVuY3Rpb24gZ2V0QmFja2dyb3VuZFBvaW50KG9wdGlvbnMsIHNpemUsIGFsaWdubWVudCwgY2hhcnQpIHtcbiAgY29uc3Qge2NhcmV0U2l6ZSwgY2FyZXRQYWRkaW5nLCBjb3JuZXJSYWRpdXN9ID0gb3B0aW9ucztcbiAgY29uc3Qge3hBbGlnbiwgeUFsaWdufSA9IGFsaWdubWVudDtcbiAgY29uc3QgcGFkZGluZ0FuZFNpemUgPSBjYXJldFNpemUgKyBjYXJldFBhZGRpbmc7XG4gIGNvbnN0IHt0b3BMZWZ0LCB0b3BSaWdodCwgYm90dG9tTGVmdCwgYm90dG9tUmlnaHR9ID0gdG9UUkJMQ29ybmVycyhjb3JuZXJSYWRpdXMpO1xuICBsZXQgeCA9IGFsaWduWChzaXplLCB4QWxpZ24pO1xuICBjb25zdCB5ID0gYWxpZ25ZKHNpemUsIHlBbGlnbiwgcGFkZGluZ0FuZFNpemUpO1xuICBpZiAoeUFsaWduID09PSAnY2VudGVyJykge1xuICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgeCArPSBwYWRkaW5nQW5kU2l6ZTtcbiAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgeCAtPSBwYWRkaW5nQW5kU2l6ZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICB4IC09IE1hdGgubWF4KHRvcExlZnQsIGJvdHRvbUxlZnQpICsgY2FyZXRTaXplO1xuICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgIHggKz0gTWF0aC5tYXgodG9wUmlnaHQsIGJvdHRvbVJpZ2h0KSArIGNhcmV0U2l6ZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHg6IF9saW1pdFZhbHVlKHgsIDAsIGNoYXJ0LndpZHRoIC0gc2l6ZS53aWR0aCksXG4gICAgeTogX2xpbWl0VmFsdWUoeSwgMCwgY2hhcnQuaGVpZ2h0IC0gc2l6ZS5oZWlnaHQpXG4gIH07XG59XG5mdW5jdGlvbiBnZXRBbGlnbmVkWCh0b29sdGlwLCBhbGlnbiwgb3B0aW9ucykge1xuICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gIHJldHVybiBhbGlnbiA9PT0gJ2NlbnRlcidcbiAgICA/IHRvb2x0aXAueCArIHRvb2x0aXAud2lkdGggLyAyXG4gICAgOiBhbGlnbiA9PT0gJ3JpZ2h0J1xuICAgICAgPyB0b29sdGlwLnggKyB0b29sdGlwLndpZHRoIC0gcGFkZGluZy5yaWdodFxuICAgICAgOiB0b29sdGlwLnggKyBwYWRkaW5nLmxlZnQ7XG59XG5mdW5jdGlvbiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhjYWxsYmFjaykge1xuICByZXR1cm4gcHVzaE9yQ29uY2F0KFtdLCBzcGxpdE5ld2xpbmVzKGNhbGxiYWNrKSk7XG59XG5mdW5jdGlvbiBjcmVhdGVUb29sdGlwQ29udGV4dChwYXJlbnQsIHRvb2x0aXAsIHRvb2x0aXBJdGVtcykge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICB0b29sdGlwLFxuICAgIHRvb2x0aXBJdGVtcyxcbiAgICB0eXBlOiAndG9vbHRpcCdcbiAgfSk7XG59XG5mdW5jdGlvbiBvdmVycmlkZUNhbGxiYWNrcyhjYWxsYmFja3MsIGNvbnRleHQpIHtcbiAgY29uc3Qgb3ZlcnJpZGUgPSBjb250ZXh0ICYmIGNvbnRleHQuZGF0YXNldCAmJiBjb250ZXh0LmRhdGFzZXQudG9vbHRpcCAmJiBjb250ZXh0LmRhdGFzZXQudG9vbHRpcC5jYWxsYmFja3M7XG4gIHJldHVybiBvdmVycmlkZSA/IGNhbGxiYWNrcy5vdmVycmlkZShvdmVycmlkZSkgOiBjYWxsYmFja3M7XG59XG5jbGFzcyBUb29sdGlwIGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vcGFjaXR5ID0gMDtcbiAgICB0aGlzLl9hY3RpdmUgPSBbXTtcbiAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3NpemUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fY2FjaGVkQW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl90b29sdGlwSXRlbXMgPSBbXTtcbiAgICB0aGlzLiRhbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydCB8fCBjb25maWcuX2NoYXJ0O1xuICAgIHRoaXMuX2NoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICB0aGlzLmRhdGFQb2ludHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy50aXRsZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJlZm9yZUJvZHkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ib2R5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYWZ0ZXJCb2R5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZm9vdGVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMueEFsaWduID0gdW5kZWZpbmVkO1xuICAgIHRoaXMueUFsaWduID0gdW5kZWZpbmVkO1xuICAgIHRoaXMueCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNhcmV0WCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNhcmV0WSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxhYmVsQ29sb3JzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGFiZWxQb2ludFN0eWxlcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxhYmVsVGV4dENvbG9ycyA9IHVuZGVmaW5lZDtcbiAgfVxuICBpbml0aWFsaXplKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgfVxuICBfcmVzb2x2ZUFuaW1hdGlvbnMoKSB7XG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy5fY2FjaGVkQW5pbWF0aW9ucztcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH1cbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICBjb25zdCBvcHRzID0gb3B0aW9ucy5lbmFibGVkICYmIGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uICYmIG9wdGlvbnMuYW5pbWF0aW9ucztcbiAgICBjb25zdCBhbmltYXRpb25zID0gbmV3IEFuaW1hdGlvbnModGhpcy5jaGFydCwgb3B0cyk7XG4gICAgaWYgKG9wdHMuX2NhY2hlYWJsZSkge1xuICAgICAgdGhpcy5fY2FjaGVkQW5pbWF0aW9ucyA9IE9iamVjdC5mcmVlemUoYW5pbWF0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBhbmltYXRpb25zO1xuICB9XG4gIGdldENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQgfHxcblx0XHRcdCh0aGlzLiRjb250ZXh0ID0gY3JlYXRlVG9vbHRpcENvbnRleHQodGhpcy5jaGFydC5nZXRDb250ZXh0KCksIHRoaXMsIHRoaXMuX3Rvb2x0aXBJdGVtcykpO1xuICB9XG4gIGdldFRpdGxlKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7Y2FsbGJhY2tzfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYmVmb3JlVGl0bGUgPSBjYWxsYmFja3MuYmVmb3JlVGl0bGUuYXBwbHkodGhpcywgW2NvbnRleHRdKTtcbiAgICBjb25zdCB0aXRsZSA9IGNhbGxiYWNrcy50aXRsZS5hcHBseSh0aGlzLCBbY29udGV4dF0pO1xuICAgIGNvbnN0IGFmdGVyVGl0bGUgPSBjYWxsYmFja3MuYWZ0ZXJUaXRsZS5hcHBseSh0aGlzLCBbY29udGV4dF0pO1xuICAgIGxldCBsaW5lcyA9IFtdO1xuICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGJlZm9yZVRpdGxlKSk7XG4gICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXModGl0bGUpKTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhhZnRlclRpdGxlKSk7XG4gICAgcmV0dXJuIGxpbmVzO1xuICB9XG4gIGdldEJlZm9yZUJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKG9wdGlvbnMuY2FsbGJhY2tzLmJlZm9yZUJvZHkuYXBwbHkodGhpcywgW3Rvb2x0aXBJdGVtc10pKTtcbiAgfVxuICBnZXRCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgIGNvbnN0IHtjYWxsYmFja3N9ID0gb3B0aW9ucztcbiAgICBjb25zdCBib2R5SXRlbXMgPSBbXTtcbiAgICBlYWNoKHRvb2x0aXBJdGVtcywgKGNvbnRleHQpID0+IHtcbiAgICAgIGNvbnN0IGJvZHlJdGVtID0ge1xuICAgICAgICBiZWZvcmU6IFtdLFxuICAgICAgICBsaW5lczogW10sXG4gICAgICAgIGFmdGVyOiBbXVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHNjb3BlZCA9IG92ZXJyaWRlQ2FsbGJhY2tzKGNhbGxiYWNrcywgY29udGV4dCk7XG4gICAgICBwdXNoT3JDb25jYXQoYm9keUl0ZW0uYmVmb3JlLCBzcGxpdE5ld2xpbmVzKHNjb3BlZC5iZWZvcmVMYWJlbC5jYWxsKHRoaXMsIGNvbnRleHQpKSk7XG4gICAgICBwdXNoT3JDb25jYXQoYm9keUl0ZW0ubGluZXMsIHNjb3BlZC5sYWJlbC5jYWxsKHRoaXMsIGNvbnRleHQpKTtcbiAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5hZnRlciwgc3BsaXROZXdsaW5lcyhzY29wZWQuYWZ0ZXJMYWJlbC5jYWxsKHRoaXMsIGNvbnRleHQpKSk7XG4gICAgICBib2R5SXRlbXMucHVzaChib2R5SXRlbSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJvZHlJdGVtcztcbiAgfVxuICBnZXRBZnRlckJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKG9wdGlvbnMuY2FsbGJhY2tzLmFmdGVyQm9keS5hcHBseSh0aGlzLCBbdG9vbHRpcEl0ZW1zXSkpO1xuICB9XG4gIGdldEZvb3Rlcih0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7Y2FsbGJhY2tzfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYmVmb3JlRm9vdGVyID0gY2FsbGJhY2tzLmJlZm9yZUZvb3Rlci5hcHBseSh0aGlzLCBbdG9vbHRpcEl0ZW1zXSk7XG4gICAgY29uc3QgZm9vdGVyID0gY2FsbGJhY2tzLmZvb3Rlci5hcHBseSh0aGlzLCBbdG9vbHRpcEl0ZW1zXSk7XG4gICAgY29uc3QgYWZ0ZXJGb290ZXIgPSBjYWxsYmFja3MuYWZ0ZXJGb290ZXIuYXBwbHkodGhpcywgW3Rvb2x0aXBJdGVtc10pO1xuICAgIGxldCBsaW5lcyA9IFtdO1xuICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGJlZm9yZUZvb3RlcikpO1xuICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGZvb3RlcikpO1xuICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGFmdGVyRm9vdGVyKSk7XG4gICAgcmV0dXJuIGxpbmVzO1xuICB9XG4gIF9jcmVhdGVJdGVtcyhvcHRpb25zKSB7XG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNoYXJ0LmRhdGE7XG4gICAgY29uc3QgbGFiZWxDb2xvcnMgPSBbXTtcbiAgICBjb25zdCBsYWJlbFBvaW50U3R5bGVzID0gW107XG4gICAgY29uc3QgbGFiZWxUZXh0Q29sb3JzID0gW107XG4gICAgbGV0IHRvb2x0aXBJdGVtcyA9IFtdO1xuICAgIGxldCBpLCBsZW47XG4gICAgZm9yIChpID0gMCwgbGVuID0gYWN0aXZlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0b29sdGlwSXRlbXMucHVzaChjcmVhdGVUb29sdGlwSXRlbSh0aGlzLmNoYXJ0LCBhY3RpdmVbaV0pKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuZmlsdGVyKSB7XG4gICAgICB0b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXMuZmlsdGVyKChlbGVtZW50LCBpbmRleCwgYXJyYXkpID0+IG9wdGlvbnMuZmlsdGVyKGVsZW1lbnQsIGluZGV4LCBhcnJheSwgZGF0YSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5pdGVtU29ydCkge1xuICAgICAgdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLnNvcnQoKGEsIGIpID0+IG9wdGlvbnMuaXRlbVNvcnQoYSwgYiwgZGF0YSkpO1xuICAgIH1cbiAgICBlYWNoKHRvb2x0aXBJdGVtcywgKGNvbnRleHQpID0+IHtcbiAgICAgIGNvbnN0IHNjb3BlZCA9IG92ZXJyaWRlQ2FsbGJhY2tzKG9wdGlvbnMuY2FsbGJhY2tzLCBjb250ZXh0KTtcbiAgICAgIGxhYmVsQ29sb3JzLnB1c2goc2NvcGVkLmxhYmVsQ29sb3IuY2FsbCh0aGlzLCBjb250ZXh0KSk7XG4gICAgICBsYWJlbFBvaW50U3R5bGVzLnB1c2goc2NvcGVkLmxhYmVsUG9pbnRTdHlsZS5jYWxsKHRoaXMsIGNvbnRleHQpKTtcbiAgICAgIGxhYmVsVGV4dENvbG9ycy5wdXNoKHNjb3BlZC5sYWJlbFRleHRDb2xvci5jYWxsKHRoaXMsIGNvbnRleHQpKTtcbiAgICB9KTtcbiAgICB0aGlzLmxhYmVsQ29sb3JzID0gbGFiZWxDb2xvcnM7XG4gICAgdGhpcy5sYWJlbFBvaW50U3R5bGVzID0gbGFiZWxQb2ludFN0eWxlcztcbiAgICB0aGlzLmxhYmVsVGV4dENvbG9ycyA9IGxhYmVsVGV4dENvbG9ycztcbiAgICB0aGlzLmRhdGFQb2ludHMgPSB0b29sdGlwSXRlbXM7XG4gICAgcmV0dXJuIHRvb2x0aXBJdGVtcztcbiAgfVxuICB1cGRhdGUoY2hhbmdlZCwgcmVwbGF5KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG4gICAgbGV0IHByb3BlcnRpZXM7XG4gICAgbGV0IHRvb2x0aXBJdGVtcyA9IFtdO1xuICAgIGlmICghYWN0aXZlLmxlbmd0aCkge1xuICAgICAgaWYgKHRoaXMub3BhY2l0eSAhPT0gMCkge1xuICAgICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbmVyc1tvcHRpb25zLnBvc2l0aW9uXS5jYWxsKHRoaXMsIGFjdGl2ZSwgdGhpcy5fZXZlbnRQb3NpdGlvbik7XG4gICAgICB0b29sdGlwSXRlbXMgPSB0aGlzLl9jcmVhdGVJdGVtcyhvcHRpb25zKTtcbiAgICAgIHRoaXMudGl0bGUgPSB0aGlzLmdldFRpdGxlKHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICB0aGlzLmJlZm9yZUJvZHkgPSB0aGlzLmdldEJlZm9yZUJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuYm9keSA9IHRoaXMuZ2V0Qm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5hZnRlckJvZHkgPSB0aGlzLmdldEFmdGVyQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5mb290ZXIgPSB0aGlzLmdldEZvb3Rlcih0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuX3NpemUgPSBnZXRUb29sdGlwU2l6ZSh0aGlzLCBvcHRpb25zKTtcbiAgICAgIGNvbnN0IHBvc2l0aW9uQW5kU2l6ZSA9IE9iamVjdC5hc3NpZ24oe30sIHBvc2l0aW9uLCBzaXplKTtcbiAgICAgIGNvbnN0IGFsaWdubWVudCA9IGRldGVybWluZUFsaWdubWVudCh0aGlzLmNoYXJ0LCBvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUpO1xuICAgICAgY29uc3QgYmFja2dyb3VuZFBvaW50ID0gZ2V0QmFja2dyb3VuZFBvaW50KG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSwgYWxpZ25tZW50LCB0aGlzLmNoYXJ0KTtcbiAgICAgIHRoaXMueEFsaWduID0gYWxpZ25tZW50LnhBbGlnbjtcbiAgICAgIHRoaXMueUFsaWduID0gYWxpZ25tZW50LnlBbGlnbjtcbiAgICAgIHByb3BlcnRpZXMgPSB7XG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIHg6IGJhY2tncm91bmRQb2ludC54LFxuICAgICAgICB5OiBiYWNrZ3JvdW5kUG9pbnQueSxcbiAgICAgICAgd2lkdGg6IHNpemUud2lkdGgsXG4gICAgICAgIGhlaWdodDogc2l6ZS5oZWlnaHQsXG4gICAgICAgIGNhcmV0WDogcG9zaXRpb24ueCxcbiAgICAgICAgY2FyZXRZOiBwb3NpdGlvbi55XG4gICAgICB9O1xuICAgIH1cbiAgICB0aGlzLl90b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXM7XG4gICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocHJvcGVydGllcykge1xuICAgICAgdGhpcy5fcmVzb2x2ZUFuaW1hdGlvbnMoKS51cGRhdGUodGhpcywgcHJvcGVydGllcyk7XG4gICAgfVxuICAgIGlmIChjaGFuZ2VkICYmIG9wdGlvbnMuZXh0ZXJuYWwpIHtcbiAgICAgIG9wdGlvbnMuZXh0ZXJuYWwuY2FsbCh0aGlzLCB7Y2hhcnQ6IHRoaXMuY2hhcnQsIHRvb2x0aXA6IHRoaXMsIHJlcGxheX0pO1xuICAgIH1cbiAgfVxuICBkcmF3Q2FyZXQodG9vbHRpcFBvaW50LCBjdHgsIHNpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjYXJldFBvc2l0aW9uID0gdGhpcy5nZXRDYXJldFBvc2l0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgb3B0aW9ucyk7XG4gICAgY3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngxLCBjYXJldFBvc2l0aW9uLnkxKTtcbiAgICBjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDIsIGNhcmV0UG9zaXRpb24ueTIpO1xuICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MywgY2FyZXRQb3NpdGlvbi55Myk7XG4gIH1cbiAgZ2V0Q2FyZXRQb3NpdGlvbih0b29sdGlwUG9pbnQsIHNpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7eEFsaWduLCB5QWxpZ259ID0gdGhpcztcbiAgICBjb25zdCB7Y2FyZXRTaXplLCBjb3JuZXJSYWRpdXN9ID0gb3B0aW9ucztcbiAgICBjb25zdCB7dG9wTGVmdCwgdG9wUmlnaHQsIGJvdHRvbUxlZnQsIGJvdHRvbVJpZ2h0fSA9IHRvVFJCTENvcm5lcnMoY29ybmVyUmFkaXVzKTtcbiAgICBjb25zdCB7eDogcHRYLCB5OiBwdFl9ID0gdG9vbHRpcFBvaW50O1xuICAgIGNvbnN0IHt3aWR0aCwgaGVpZ2h0fSA9IHNpemU7XG4gICAgbGV0IHgxLCB4MiwgeDMsIHkxLCB5MiwgeTM7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgIHkyID0gcHRZICsgKGhlaWdodCAvIDIpO1xuICAgICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIHgxID0gcHRYO1xuICAgICAgICB4MiA9IHgxIC0gY2FyZXRTaXplO1xuICAgICAgICB5MSA9IHkyICsgY2FyZXRTaXplO1xuICAgICAgICB5MyA9IHkyIC0gY2FyZXRTaXplO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeDEgPSBwdFggKyB3aWR0aDtcbiAgICAgICAgeDIgPSB4MSArIGNhcmV0U2l6ZTtcbiAgICAgICAgeTEgPSB5MiAtIGNhcmV0U2l6ZTtcbiAgICAgICAgeTMgPSB5MiArIGNhcmV0U2l6ZTtcbiAgICAgIH1cbiAgICAgIHgzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICB4MiA9IHB0WCArIE1hdGgubWF4KHRvcExlZnQsIGJvdHRvbUxlZnQpICsgKGNhcmV0U2l6ZSk7XG4gICAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB4MiA9IHB0WCArIHdpZHRoIC0gTWF0aC5tYXgodG9wUmlnaHQsIGJvdHRvbVJpZ2h0KSAtIGNhcmV0U2l6ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHgyID0gdGhpcy5jYXJldFg7XG4gICAgICB9XG4gICAgICBpZiAoeUFsaWduID09PSAndG9wJykge1xuICAgICAgICB5MSA9IHB0WTtcbiAgICAgICAgeTIgPSB5MSAtIGNhcmV0U2l6ZTtcbiAgICAgICAgeDEgPSB4MiAtIGNhcmV0U2l6ZTtcbiAgICAgICAgeDMgPSB4MiArIGNhcmV0U2l6ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkxID0gcHRZICsgaGVpZ2h0O1xuICAgICAgICB5MiA9IHkxICsgY2FyZXRTaXplO1xuICAgICAgICB4MSA9IHgyICsgY2FyZXRTaXplO1xuICAgICAgICB4MyA9IHgyIC0gY2FyZXRTaXplO1xuICAgICAgfVxuICAgICAgeTMgPSB5MTtcbiAgICB9XG4gICAgcmV0dXJuIHt4MSwgeDIsIHgzLCB5MSwgeTIsIHkzfTtcbiAgfVxuICBkcmF3VGl0bGUocHQsIGN0eCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHRpdGxlID0gdGhpcy50aXRsZTtcbiAgICBjb25zdCBsZW5ndGggPSB0aXRsZS5sZW5ndGg7XG4gICAgbGV0IHRpdGxlRm9udCwgdGl0bGVTcGFjaW5nLCBpO1xuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0aW9ucy5ydGwsIHRoaXMueCwgdGhpcy53aWR0aCk7XG4gICAgICBwdC54ID0gZ2V0QWxpZ25lZFgodGhpcywgb3B0aW9ucy50aXRsZUFsaWduLCBvcHRpb25zKTtcbiAgICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKG9wdGlvbnMudGl0bGVBbGlnbik7XG4gICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICB0aXRsZUZvbnQgPSB0b0ZvbnQob3B0aW9ucy50aXRsZUZvbnQpO1xuICAgICAgdGl0bGVTcGFjaW5nID0gb3B0aW9ucy50aXRsZVNwYWNpbmc7XG4gICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy50aXRsZUNvbG9yO1xuICAgICAgY3R4LmZvbnQgPSB0aXRsZUZvbnQuc3RyaW5nO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGN0eC5maWxsVGV4dCh0aXRsZVtpXSwgcnRsSGVscGVyLngocHQueCksIHB0LnkgKyB0aXRsZUZvbnQubGluZUhlaWdodCAvIDIpO1xuICAgICAgICBwdC55ICs9IHRpdGxlRm9udC5saW5lSGVpZ2h0ICsgdGl0bGVTcGFjaW5nO1xuICAgICAgICBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIHB0LnkgKz0gb3B0aW9ucy50aXRsZU1hcmdpbkJvdHRvbSAtIHRpdGxlU3BhY2luZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBfZHJhd0NvbG9yQm94KGN0eCwgcHQsIGksIHJ0bEhlbHBlciwgb3B0aW9ucykge1xuICAgIGNvbnN0IGxhYmVsQ29sb3JzID0gdGhpcy5sYWJlbENvbG9yc1tpXTtcbiAgICBjb25zdCBsYWJlbFBvaW50U3R5bGUgPSB0aGlzLmxhYmVsUG9pbnRTdHlsZXNbaV07XG4gICAgY29uc3Qge2JveEhlaWdodCwgYm94V2lkdGgsIGJveFBhZGRpbmd9ID0gb3B0aW9ucztcbiAgICBjb25zdCBib2R5Rm9udCA9IHRvRm9udChvcHRpb25zLmJvZHlGb250KTtcbiAgICBjb25zdCBjb2xvclggPSBnZXRBbGlnbmVkWCh0aGlzLCAnbGVmdCcsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHJ0bENvbG9yWCA9IHJ0bEhlbHBlci54KGNvbG9yWCk7XG4gICAgY29uc3QgeU9mZlNldCA9IGJveEhlaWdodCA8IGJvZHlGb250LmxpbmVIZWlnaHQgPyAoYm9keUZvbnQubGluZUhlaWdodCAtIGJveEhlaWdodCkgLyAyIDogMDtcbiAgICBjb25zdCBjb2xvclkgPSBwdC55ICsgeU9mZlNldDtcbiAgICBpZiAob3B0aW9ucy51c2VQb2ludFN0eWxlKSB7XG4gICAgICBjb25zdCBkcmF3T3B0aW9ucyA9IHtcbiAgICAgICAgcmFkaXVzOiBNYXRoLm1pbihib3hXaWR0aCwgYm94SGVpZ2h0KSAvIDIsXG4gICAgICAgIHBvaW50U3R5bGU6IGxhYmVsUG9pbnRTdHlsZS5wb2ludFN0eWxlLFxuICAgICAgICByb3RhdGlvbjogbGFiZWxQb2ludFN0eWxlLnJvdGF0aW9uLFxuICAgICAgICBib3JkZXJXaWR0aDogMVxuICAgICAgfTtcbiAgICAgIGNvbnN0IGNlbnRlclggPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxDb2xvclgsIGJveFdpZHRoKSArIGJveFdpZHRoIC8gMjtcbiAgICAgIGNvbnN0IGNlbnRlclkgPSBjb2xvclkgKyBib3hIZWlnaHQgLyAyO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5tdWx0aUtleUJhY2tncm91bmQ7XG4gICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5tdWx0aUtleUJhY2tncm91bmQ7XG4gICAgICBkcmF3UG9pbnQoY3R4LCBkcmF3T3B0aW9ucywgY2VudGVyWCwgY2VudGVyWSk7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBsYWJlbENvbG9ycy5ib3JkZXJDb2xvcjtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9ycy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICBkcmF3UG9pbnQoY3R4LCBkcmF3T3B0aW9ucywgY2VudGVyWCwgY2VudGVyWSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC5saW5lV2lkdGggPSBpc09iamVjdChsYWJlbENvbG9ycy5ib3JkZXJXaWR0aCkgPyBNYXRoLm1heCguLi5PYmplY3QudmFsdWVzKGxhYmVsQ29sb3JzLmJvcmRlcldpZHRoKSkgOiAobGFiZWxDb2xvcnMuYm9yZGVyV2lkdGggfHwgMSk7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBsYWJlbENvbG9ycy5ib3JkZXJDb2xvcjtcbiAgICAgIGN0eC5zZXRMaW5lRGFzaChsYWJlbENvbG9ycy5ib3JkZXJEYXNoIHx8IFtdKTtcbiAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGxhYmVsQ29sb3JzLmJvcmRlckRhc2hPZmZzZXQgfHwgMDtcbiAgICAgIGNvbnN0IG91dGVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bENvbG9yWCwgYm94V2lkdGggLSBib3hQYWRkaW5nKTtcbiAgICAgIGNvbnN0IGlubmVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bEhlbHBlci54UGx1cyhydGxDb2xvclgsIDEpLCBib3hXaWR0aCAtIGJveFBhZGRpbmcgLSAyKTtcbiAgICAgIGNvbnN0IGJvcmRlclJhZGl1cyA9IHRvVFJCTENvcm5lcnMobGFiZWxDb2xvcnMuYm9yZGVyUmFkaXVzKTtcbiAgICAgIGlmIChPYmplY3QudmFsdWVzKGJvcmRlclJhZGl1cykuc29tZSh2ID0+IHYgIT09IDApKSB7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgICAgICAgeDogb3V0ZXJYLFxuICAgICAgICAgIHk6IGNvbG9yWSxcbiAgICAgICAgICB3OiBib3hXaWR0aCxcbiAgICAgICAgICBoOiBib3hIZWlnaHQsXG4gICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIH0pO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9ycy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgIHg6IGlubmVyWCxcbiAgICAgICAgICB5OiBjb2xvclkgKyAxLFxuICAgICAgICAgIHc6IGJveFdpZHRoIC0gMixcbiAgICAgICAgICBoOiBib3hIZWlnaHQgLSAyLFxuICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICB9KTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLm11bHRpS2V5QmFja2dyb3VuZDtcbiAgICAgICAgY3R4LmZpbGxSZWN0KG91dGVyWCwgY29sb3JZLCBib3hXaWR0aCwgYm94SGVpZ2h0KTtcbiAgICAgICAgY3R4LnN0cm9rZVJlY3Qob3V0ZXJYLCBjb2xvclksIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvcnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBjdHguZmlsbFJlY3QoaW5uZXJYLCBjb2xvclkgKyAxLCBib3hXaWR0aCAtIDIsIGJveEhlaWdodCAtIDIpO1xuICAgICAgfVxuICAgIH1cbiAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5sYWJlbFRleHRDb2xvcnNbaV07XG4gIH1cbiAgZHJhd0JvZHkocHQsIGN0eCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHtib2R5fSA9IHRoaXM7XG4gICAgY29uc3Qge2JvZHlTcGFjaW5nLCBib2R5QWxpZ24sIGRpc3BsYXlDb2xvcnMsIGJveEhlaWdodCwgYm94V2lkdGgsIGJveFBhZGRpbmd9ID0gb3B0aW9ucztcbiAgICBjb25zdCBib2R5Rm9udCA9IHRvRm9udChvcHRpb25zLmJvZHlGb250KTtcbiAgICBsZXQgYm9keUxpbmVIZWlnaHQgPSBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgIGxldCB4TGluZVBhZGRpbmcgPSAwO1xuICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0aW9ucy5ydGwsIHRoaXMueCwgdGhpcy53aWR0aCk7XG4gICAgY29uc3QgZmlsbExpbmVPZlRleHQgPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgICBjdHguZmlsbFRleHQobGluZSwgcnRsSGVscGVyLngocHQueCArIHhMaW5lUGFkZGluZyksIHB0LnkgKyBib2R5TGluZUhlaWdodCAvIDIpO1xuICAgICAgcHQueSArPSBib2R5TGluZUhlaWdodCArIGJvZHlTcGFjaW5nO1xuICAgIH07XG4gICAgY29uc3QgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24gPSBydGxIZWxwZXIudGV4dEFsaWduKGJvZHlBbGlnbik7XG4gICAgbGV0IGJvZHlJdGVtLCB0ZXh0Q29sb3IsIGxpbmVzLCBpLCBqLCBpbGVuLCBqbGVuO1xuICAgIGN0eC50ZXh0QWxpZ24gPSBib2R5QWxpZ247XG4gICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgIGN0eC5mb250ID0gYm9keUZvbnQuc3RyaW5nO1xuICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiwgb3B0aW9ucyk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYm9keUNvbG9yO1xuICAgIGVhY2godGhpcy5iZWZvcmVCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG4gICAgeExpbmVQYWRkaW5nID0gZGlzcGxheUNvbG9ycyAmJiBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiAhPT0gJ3JpZ2h0J1xuICAgICAgPyBib2R5QWxpZ24gPT09ICdjZW50ZXInID8gKGJveFdpZHRoIC8gMiArIGJveFBhZGRpbmcpIDogKGJveFdpZHRoICsgMiArIGJveFBhZGRpbmcpXG4gICAgICA6IDA7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGJvZHkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBib2R5SXRlbSA9IGJvZHlbaV07XG4gICAgICB0ZXh0Q29sb3IgPSB0aGlzLmxhYmVsVGV4dENvbG9yc1tpXTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSB0ZXh0Q29sb3I7XG4gICAgICBlYWNoKGJvZHlJdGVtLmJlZm9yZSwgZmlsbExpbmVPZlRleHQpO1xuICAgICAgbGluZXMgPSBib2R5SXRlbS5saW5lcztcbiAgICAgIGlmIChkaXNwbGF5Q29sb3JzICYmIGxpbmVzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9kcmF3Q29sb3JCb3goY3R4LCBwdCwgaSwgcnRsSGVscGVyLCBvcHRpb25zKTtcbiAgICAgICAgYm9keUxpbmVIZWlnaHQgPSBNYXRoLm1heChib2R5Rm9udC5saW5lSGVpZ2h0LCBib3hIZWlnaHQpO1xuICAgICAgfVxuICAgICAgZm9yIChqID0gMCwgamxlbiA9IGxpbmVzLmxlbmd0aDsgaiA8IGpsZW47ICsraikge1xuICAgICAgICBmaWxsTGluZU9mVGV4dChsaW5lc1tqXSk7XG4gICAgICAgIGJvZHlMaW5lSGVpZ2h0ID0gYm9keUZvbnQubGluZUhlaWdodDtcbiAgICAgIH1cbiAgICAgIGVhY2goYm9keUl0ZW0uYWZ0ZXIsIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICB9XG4gICAgeExpbmVQYWRkaW5nID0gMDtcbiAgICBib2R5TGluZUhlaWdodCA9IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgZWFjaCh0aGlzLmFmdGVyQm9keSwgZmlsbExpbmVPZlRleHQpO1xuICAgIHB0LnkgLT0gYm9keVNwYWNpbmc7XG4gIH1cbiAgZHJhd0Zvb3RlcihwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgY29uc3QgZm9vdGVyID0gdGhpcy5mb290ZXI7XG4gICAgY29uc3QgbGVuZ3RoID0gZm9vdGVyLmxlbmd0aDtcbiAgICBsZXQgZm9vdGVyRm9udCwgaTtcbiAgICBpZiAobGVuZ3RoKSB7XG4gICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdGlvbnMucnRsLCB0aGlzLngsIHRoaXMud2lkdGgpO1xuICAgICAgcHQueCA9IGdldEFsaWduZWRYKHRoaXMsIG9wdGlvbnMuZm9vdGVyQWxpZ24sIG9wdGlvbnMpO1xuICAgICAgcHQueSArPSBvcHRpb25zLmZvb3Rlck1hcmdpblRvcDtcbiAgICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKG9wdGlvbnMuZm9vdGVyQWxpZ24pO1xuICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgZm9vdGVyRm9udCA9IHRvRm9udChvcHRpb25zLmZvb3RlckZvbnQpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuZm9vdGVyQ29sb3I7XG4gICAgICBjdHguZm9udCA9IGZvb3RlckZvbnQuc3RyaW5nO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGN0eC5maWxsVGV4dChmb290ZXJbaV0sIHJ0bEhlbHBlci54KHB0LngpLCBwdC55ICsgZm9vdGVyRm9udC5saW5lSGVpZ2h0IC8gMik7XG4gICAgICAgIHB0LnkgKz0gZm9vdGVyRm9udC5saW5lSGVpZ2h0ICsgb3B0aW9ucy5mb290ZXJTcGFjaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBkcmF3QmFja2dyb3VuZChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHt4QWxpZ24sIHlBbGlnbn0gPSB0aGlzO1xuICAgIGNvbnN0IHt4LCB5fSA9IHB0O1xuICAgIGNvbnN0IHt3aWR0aCwgaGVpZ2h0fSA9IHRvb2x0aXBTaXplO1xuICAgIGNvbnN0IHt0b3BMZWZ0LCB0b3BSaWdodCwgYm90dG9tTGVmdCwgYm90dG9tUmlnaHR9ID0gdG9UUkJMQ29ybmVycyhvcHRpb25zLmNvcm5lclJhZGl1cyk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5tb3ZlVG8oeCArIHRvcExlZnQsIHkpO1xuICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8oeCArIHdpZHRoIC0gdG9wUmlnaHQsIHkpO1xuICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSwgeCArIHdpZHRoLCB5ICsgdG9wUmlnaHQpO1xuICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInICYmIHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjdHgubGluZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCAtIGJvdHRvbVJpZ2h0KTtcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQsIHggKyB3aWR0aCAtIGJvdHRvbVJpZ2h0LCB5ICsgaGVpZ2h0KTtcbiAgICBpZiAoeUFsaWduID09PSAnYm90dG9tJykge1xuICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjdHgubGluZVRvKHggKyBib3R0b21MZWZ0LCB5ICsgaGVpZ2h0KTtcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5ICsgaGVpZ2h0LCB4LCB5ICsgaGVpZ2h0IC0gYm90dG9tTGVmdCk7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicgJiYgeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY3R4LmxpbmVUbyh4LCB5ICsgdG9wTGVmdCk7XG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHRvcExlZnQsIHkpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguZmlsbCgpO1xuICAgIGlmIChvcHRpb25zLmJvcmRlcldpZHRoID4gMCkge1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgfVxuICBfdXBkYXRlQW5pbWF0aW9uVGFyZ2V0KG9wdGlvbnMpIHtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgYW5pbXMgPSB0aGlzLiRhbmltYXRpb25zO1xuICAgIGNvbnN0IGFuaW1YID0gYW5pbXMgJiYgYW5pbXMueDtcbiAgICBjb25zdCBhbmltWSA9IGFuaW1zICYmIGFuaW1zLnk7XG4gICAgaWYgKGFuaW1YIHx8IGFuaW1ZKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdGlvbnMucG9zaXRpb25dLmNhbGwodGhpcywgdGhpcy5fYWN0aXZlLCB0aGlzLl9ldmVudFBvc2l0aW9uKTtcbiAgICAgIGlmICghcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuX3NpemUgPSBnZXRUb29sdGlwU2l6ZSh0aGlzLCBvcHRpb25zKTtcbiAgICAgIGNvbnN0IHBvc2l0aW9uQW5kU2l6ZSA9IE9iamVjdC5hc3NpZ24oe30sIHBvc2l0aW9uLCB0aGlzLl9zaXplKTtcbiAgICAgIGNvbnN0IGFsaWdubWVudCA9IGRldGVybWluZUFsaWdubWVudChjaGFydCwgb3B0aW9ucywgcG9zaXRpb25BbmRTaXplKTtcbiAgICAgIGNvbnN0IHBvaW50ID0gZ2V0QmFja2dyb3VuZFBvaW50KG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSwgYWxpZ25tZW50LCBjaGFydCk7XG4gICAgICBpZiAoYW5pbVguX3RvICE9PSBwb2ludC54IHx8IGFuaW1ZLl90byAhPT0gcG9pbnQueSkge1xuICAgICAgICB0aGlzLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG4gICAgICAgIHRoaXMueUFsaWduID0gYWxpZ25tZW50LnlBbGlnbjtcbiAgICAgICAgdGhpcy53aWR0aCA9IHNpemUud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG4gICAgICAgIHRoaXMuY2FyZXRYID0gcG9zaXRpb24ueDtcbiAgICAgICAgdGhpcy5jYXJldFkgPSBwb3NpdGlvbi55O1xuICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucygpLnVwZGF0ZSh0aGlzLCBwb2ludCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIF93aWxsUmVuZGVyKCkge1xuICAgIHJldHVybiAhIXRoaXMub3BhY2l0eTtcbiAgfVxuICBkcmF3KGN0eCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgbGV0IG9wYWNpdHkgPSB0aGlzLm9wYWNpdHk7XG4gICAgaWYgKCFvcGFjaXR5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZUFuaW1hdGlvblRhcmdldChvcHRpb25zKTtcbiAgICBjb25zdCB0b29sdGlwU2l6ZSA9IHtcbiAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodFxuICAgIH07XG4gICAgY29uc3QgcHQgPSB7XG4gICAgICB4OiB0aGlzLngsXG4gICAgICB5OiB0aGlzLnlcbiAgICB9O1xuICAgIG9wYWNpdHkgPSBNYXRoLmFicyhvcGFjaXR5KSA8IDFlLTMgPyAwIDogb3BhY2l0eTtcbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gICAgY29uc3QgaGFzVG9vbHRpcENvbnRlbnQgPSB0aGlzLnRpdGxlLmxlbmd0aCB8fCB0aGlzLmJlZm9yZUJvZHkubGVuZ3RoIHx8IHRoaXMuYm9keS5sZW5ndGggfHwgdGhpcy5hZnRlckJvZHkubGVuZ3RoIHx8IHRoaXMuZm9vdGVyLmxlbmd0aDtcbiAgICBpZiAob3B0aW9ucy5lbmFibGVkICYmIGhhc1Rvb2x0aXBDb250ZW50KSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4Lmdsb2JhbEFscGhhID0gb3BhY2l0eTtcbiAgICAgIHRoaXMuZHJhd0JhY2tncm91bmQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgICAgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uKGN0eCwgb3B0aW9ucy50ZXh0RGlyZWN0aW9uKTtcbiAgICAgIHB0LnkgKz0gcGFkZGluZy50b3A7XG4gICAgICB0aGlzLmRyYXdUaXRsZShwdCwgY3R4LCBvcHRpb25zKTtcbiAgICAgIHRoaXMuZHJhd0JvZHkocHQsIGN0eCwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmRyYXdGb290ZXIocHQsIGN0eCwgb3B0aW9ucyk7XG4gICAgICByZXN0b3JlVGV4dERpcmVjdGlvbihjdHgsIG9wdGlvbnMudGV4dERpcmVjdGlvbik7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfVxuICBnZXRBY3RpdmVFbGVtZW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICB9XG4gIHNldEFjdGl2ZUVsZW1lbnRzKGFjdGl2ZUVsZW1lbnRzLCBldmVudFBvc2l0aW9uKSB7XG4gICAgY29uc3QgbGFzdEFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcbiAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmVFbGVtZW50cy5tYXAoKHtkYXRhc2V0SW5kZXgsIGluZGV4fSkgPT4ge1xuICAgICAgY29uc3QgbWV0YSA9IHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgIGlmICghbWV0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIGEgZGF0YXNldCBhdCBpbmRleCAnICsgZGF0YXNldEluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgZWxlbWVudDogbWV0YS5kYXRhW2luZGV4XSxcbiAgICAgICAgaW5kZXgsXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwobGFzdEFjdGl2ZSwgYWN0aXZlKTtcbiAgICBjb25zdCBwb3NpdGlvbkNoYW5nZWQgPSB0aGlzLl9wb3NpdGlvbkNoYW5nZWQoYWN0aXZlLCBldmVudFBvc2l0aW9uKTtcbiAgICBpZiAoY2hhbmdlZCB8fCBwb3NpdGlvbkNoYW5nZWQpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgIHRoaXMuX2V2ZW50UG9zaXRpb24gPSBldmVudFBvc2l0aW9uO1xuICAgICAgdGhpcy5faWdub3JlUmVwbGF5RXZlbnRzID0gdHJ1ZTtcbiAgICAgIHRoaXMudXBkYXRlKHRydWUpO1xuICAgIH1cbiAgfVxuICBoYW5kbGVFdmVudChlLCByZXBsYXksIGluQ2hhcnRBcmVhID0gdHJ1ZSkge1xuICAgIGlmIChyZXBsYXkgJiYgdGhpcy5faWdub3JlUmVwbGF5RXZlbnRzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuX2lnbm9yZVJlcGxheUV2ZW50cyA9IGZhbHNlO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbGFzdEFjdGl2ZSA9IHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCByZXBsYXksIGluQ2hhcnRBcmVhKTtcbiAgICBjb25zdCBwb3NpdGlvbkNoYW5nZWQgPSB0aGlzLl9wb3NpdGlvbkNoYW5nZWQoYWN0aXZlLCBlKTtcbiAgICBjb25zdCBjaGFuZ2VkID0gcmVwbGF5IHx8ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpIHx8IHBvc2l0aW9uQ2hhbmdlZDtcbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgaWYgKG9wdGlvbnMuZW5hYmxlZCB8fCBvcHRpb25zLmV4dGVybmFsKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50UG9zaXRpb24gPSB7XG4gICAgICAgICAgeDogZS54LFxuICAgICAgICAgIHk6IGUueVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZSh0cnVlLCByZXBsYXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZDtcbiAgfVxuICBfZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBpZiAoIWluQ2hhcnRBcmVhKSB7XG4gICAgICByZXR1cm4gbGFzdEFjdGl2ZTtcbiAgICB9XG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5jaGFydC5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGUsIG9wdGlvbnMubW9kZSwgb3B0aW9ucywgcmVwbGF5KTtcbiAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICBhY3RpdmUucmV2ZXJzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gYWN0aXZlO1xuICB9XG4gIF9wb3NpdGlvbkNoYW5nZWQoYWN0aXZlLCBlKSB7XG4gICAgY29uc3Qge2NhcmV0WCwgY2FyZXRZLCBvcHRpb25zfSA9IHRoaXM7XG4gICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbmVyc1tvcHRpb25zLnBvc2l0aW9uXS5jYWxsKHRoaXMsIGFjdGl2ZSwgZSk7XG4gICAgcmV0dXJuIHBvc2l0aW9uICE9PSBmYWxzZSAmJiAoY2FyZXRYICE9PSBwb3NpdGlvbi54IHx8IGNhcmV0WSAhPT0gcG9zaXRpb24ueSk7XG4gIH1cbn1cblRvb2x0aXAucG9zaXRpb25lcnMgPSBwb3NpdGlvbmVycztcbnZhciBwbHVnaW5fdG9vbHRpcCA9IHtcbiAgaWQ6ICd0b29sdGlwJyxcbiAgX2VsZW1lbnQ6IFRvb2x0aXAsXG4gIHBvc2l0aW9uZXJzLFxuICBhZnRlckluaXQoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIGNoYXJ0LnRvb2x0aXAgPSBuZXcgVG9vbHRpcCh7Y2hhcnQsIG9wdGlvbnN9KTtcbiAgICB9XG4gIH0sXG4gIGJlZm9yZVVwZGF0ZShjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBpZiAoY2hhcnQudG9vbHRpcCkge1xuICAgICAgY2hhcnQudG9vbHRpcC5pbml0aWFsaXplKG9wdGlvbnMpO1xuICAgIH1cbiAgfSxcbiAgcmVzZXQoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgIGNoYXJ0LnRvb2x0aXAuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICB9XG4gIH0sXG4gIGFmdGVyRHJhdyhjaGFydCkge1xuICAgIGNvbnN0IHRvb2x0aXAgPSBjaGFydC50b29sdGlwO1xuICAgIGlmICh0b29sdGlwICYmIHRvb2x0aXAuX3dpbGxSZW5kZXIoKSkge1xuICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgdG9vbHRpcFxuICAgICAgfTtcbiAgICAgIGlmIChjaGFydC5ub3RpZnlQbHVnaW5zKCdiZWZvcmVUb29sdGlwRHJhdycsIGFyZ3MpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0b29sdGlwLmRyYXcoY2hhcnQuY3R4KTtcbiAgICAgIGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2FmdGVyVG9vbHRpcERyYXcnLCBhcmdzKTtcbiAgICB9XG4gIH0sXG4gIGFmdGVyRXZlbnQoY2hhcnQsIGFyZ3MpIHtcbiAgICBpZiAoY2hhcnQudG9vbHRpcCkge1xuICAgICAgY29uc3QgdXNlRmluYWxQb3NpdGlvbiA9IGFyZ3MucmVwbGF5O1xuICAgICAgaWYgKGNoYXJ0LnRvb2x0aXAuaGFuZGxlRXZlbnQoYXJncy5ldmVudCwgdXNlRmluYWxQb3NpdGlvbiwgYXJncy5pbkNoYXJ0QXJlYSkpIHtcbiAgICAgICAgYXJncy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGRlZmF1bHRzOiB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBleHRlcm5hbDogbnVsbCxcbiAgICBwb3NpdGlvbjogJ2F2ZXJhZ2UnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC44KScsXG4gICAgdGl0bGVDb2xvcjogJyNmZmYnLFxuICAgIHRpdGxlRm9udDoge1xuICAgICAgd2VpZ2h0OiAnYm9sZCcsXG4gICAgfSxcbiAgICB0aXRsZVNwYWNpbmc6IDIsXG4gICAgdGl0bGVNYXJnaW5Cb3R0b206IDYsXG4gICAgdGl0bGVBbGlnbjogJ2xlZnQnLFxuICAgIGJvZHlDb2xvcjogJyNmZmYnLFxuICAgIGJvZHlTcGFjaW5nOiAyLFxuICAgIGJvZHlGb250OiB7XG4gICAgfSxcbiAgICBib2R5QWxpZ246ICdsZWZ0JyxcbiAgICBmb290ZXJDb2xvcjogJyNmZmYnLFxuICAgIGZvb3RlclNwYWNpbmc6IDIsXG4gICAgZm9vdGVyTWFyZ2luVG9wOiA2LFxuICAgIGZvb3RlckZvbnQ6IHtcbiAgICAgIHdlaWdodDogJ2JvbGQnLFxuICAgIH0sXG4gICAgZm9vdGVyQWxpZ246ICdsZWZ0JyxcbiAgICBwYWRkaW5nOiA2LFxuICAgIGNhcmV0UGFkZGluZzogMixcbiAgICBjYXJldFNpemU6IDUsXG4gICAgY29ybmVyUmFkaXVzOiA2LFxuICAgIGJveEhlaWdodDogKGN0eCwgb3B0cykgPT4gb3B0cy5ib2R5Rm9udC5zaXplLFxuICAgIGJveFdpZHRoOiAoY3R4LCBvcHRzKSA9PiBvcHRzLmJvZHlGb250LnNpemUsXG4gICAgbXVsdGlLZXlCYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgZGlzcGxheUNvbG9yczogdHJ1ZSxcbiAgICBib3hQYWRkaW5nOiAwLFxuICAgIGJvcmRlckNvbG9yOiAncmdiYSgwLDAsMCwwKScsXG4gICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICBkdXJhdGlvbjogNDAwLFxuICAgICAgZWFzaW5nOiAnZWFzZU91dFF1YXJ0JyxcbiAgICB9LFxuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgIG51bWJlcnM6IHtcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgIHByb3BlcnRpZXM6IFsneCcsICd5JywgJ3dpZHRoJywgJ2hlaWdodCcsICdjYXJldFgnLCAnY2FyZXRZJ10sXG4gICAgICB9LFxuICAgICAgb3BhY2l0eToge1xuICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICBkdXJhdGlvbjogMjAwXG4gICAgICB9XG4gICAgfSxcbiAgICBjYWxsYmFja3M6IHtcbiAgICAgIGJlZm9yZVRpdGxlOiBub29wLFxuICAgICAgdGl0bGUodG9vbHRpcEl0ZW1zKSB7XG4gICAgICAgIGlmICh0b29sdGlwSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0b29sdGlwSXRlbXNbMF07XG4gICAgICAgICAgY29uc3QgbGFiZWxzID0gaXRlbS5jaGFydC5kYXRhLmxhYmVscztcbiAgICAgICAgICBjb25zdCBsYWJlbENvdW50ID0gbGFiZWxzID8gbGFiZWxzLmxlbmd0aCA6IDA7XG4gICAgICAgICAgaWYgKHRoaXMgJiYgdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5tb2RlID09PSAnZGF0YXNldCcpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLmRhdGFzZXQubGFiZWwgfHwgJyc7XG4gICAgICAgICAgfSBlbHNlIGlmIChpdGVtLmxhYmVsKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5sYWJlbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxhYmVsQ291bnQgPiAwICYmIGl0ZW0uZGF0YUluZGV4IDwgbGFiZWxDb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIGxhYmVsc1tpdGVtLmRhdGFJbmRleF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0sXG4gICAgICBhZnRlclRpdGxlOiBub29wLFxuICAgICAgYmVmb3JlQm9keTogbm9vcCxcbiAgICAgIGJlZm9yZUxhYmVsOiBub29wLFxuICAgICAgbGFiZWwodG9vbHRpcEl0ZW0pIHtcbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5tb2RlID09PSAnZGF0YXNldCcpIHtcbiAgICAgICAgICByZXR1cm4gdG9vbHRpcEl0ZW0ubGFiZWwgKyAnOiAnICsgdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWUgfHwgdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxhYmVsID0gdG9vbHRpcEl0ZW0uZGF0YXNldC5sYWJlbCB8fCAnJztcbiAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgbGFiZWwgKz0gJzogJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICAgICAgbGFiZWwgKz0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxhYmVsO1xuICAgICAgfSxcbiAgICAgIGxhYmVsQ29sb3IodG9vbHRpcEl0ZW0pIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRvb2x0aXBJdGVtLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRvb2x0aXBJdGVtLmRhdGFzZXRJbmRleCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUodG9vbHRpcEl0ZW0uZGF0YUluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgIGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuICAgICAgICAgIGJvcmRlckRhc2g6IG9wdGlvbnMuYm9yZGVyRGFzaCxcbiAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiBvcHRpb25zLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGxhYmVsVGV4dENvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmJvZHlDb2xvcjtcbiAgICAgIH0sXG4gICAgICBsYWJlbFBvaW50U3R5bGUodG9vbHRpcEl0ZW0pIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRvb2x0aXBJdGVtLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRvb2x0aXBJdGVtLmRhdGFzZXRJbmRleCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUodG9vbHRpcEl0ZW0uZGF0YUluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwb2ludFN0eWxlOiBvcHRpb25zLnBvaW50U3R5bGUsXG4gICAgICAgICAgcm90YXRpb246IG9wdGlvbnMucm90YXRpb24sXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgYWZ0ZXJMYWJlbDogbm9vcCxcbiAgICAgIGFmdGVyQm9keTogbm9vcCxcbiAgICAgIGJlZm9yZUZvb3Rlcjogbm9vcCxcbiAgICAgIGZvb3Rlcjogbm9vcCxcbiAgICAgIGFmdGVyRm9vdGVyOiBub29wXG4gICAgfVxuICB9LFxuICBkZWZhdWx0Um91dGVzOiB7XG4gICAgYm9keUZvbnQ6ICdmb250JyxcbiAgICBmb290ZXJGb250OiAnZm9udCcsXG4gICAgdGl0bGVGb250OiAnZm9udCdcbiAgfSxcbiAgZGVzY3JpcHRvcnM6IHtcbiAgICBfc2NyaXB0YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdmaWx0ZXInICYmIG5hbWUgIT09ICdpdGVtU29ydCcgJiYgbmFtZSAhPT0gJ2V4dGVybmFsJyxcbiAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgICBjYWxsYmFja3M6IHtcbiAgICAgIF9zY3JpcHRhYmxlOiBmYWxzZSxcbiAgICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICAgIH0sXG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICBfZmFsbGJhY2s6IGZhbHNlXG4gICAgfSxcbiAgICBhbmltYXRpb25zOiB7XG4gICAgICBfZmFsbGJhY2s6ICdhbmltYXRpb24nXG4gICAgfVxuICB9LFxuICBhZGRpdGlvbmFsT3B0aW9uU2NvcGVzOiBbJ2ludGVyYWN0aW9uJ11cbn07XG5cbnZhciBwbHVnaW5zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuRGVjaW1hdGlvbjogcGx1Z2luX2RlY2ltYXRpb24sXG5GaWxsZXI6IGluZGV4LFxuTGVnZW5kOiBwbHVnaW5fbGVnZW5kLFxuU3ViVGl0bGU6IHBsdWdpbl9zdWJ0aXRsZSxcblRpdGxlOiBwbHVnaW5fdGl0bGUsXG5Ub29sdGlwOiBwbHVnaW5fdG9vbHRpcFxufSk7XG5cbmNvbnN0IGFkZElmU3RyaW5nID0gKGxhYmVscywgcmF3LCBpbmRleCwgYWRkZWRMYWJlbHMpID0+IHtcbiAgaWYgKHR5cGVvZiByYXcgPT09ICdzdHJpbmcnKSB7XG4gICAgaW5kZXggPSBsYWJlbHMucHVzaChyYXcpIC0gMTtcbiAgICBhZGRlZExhYmVscy51bnNoaWZ0KHtpbmRleCwgbGFiZWw6IHJhd30pO1xuICB9IGVsc2UgaWYgKGlzTmFOKHJhdykpIHtcbiAgICBpbmRleCA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufTtcbmZ1bmN0aW9uIGZpbmRPckFkZExhYmVsKGxhYmVscywgcmF3LCBpbmRleCwgYWRkZWRMYWJlbHMpIHtcbiAgY29uc3QgZmlyc3QgPSBsYWJlbHMuaW5kZXhPZihyYXcpO1xuICBpZiAoZmlyc3QgPT09IC0xKSB7XG4gICAgcmV0dXJuIGFkZElmU3RyaW5nKGxhYmVscywgcmF3LCBpbmRleCwgYWRkZWRMYWJlbHMpO1xuICB9XG4gIGNvbnN0IGxhc3QgPSBsYWJlbHMubGFzdEluZGV4T2YocmF3KTtcbiAgcmV0dXJuIGZpcnN0ICE9PSBsYXN0ID8gaW5kZXggOiBmaXJzdDtcbn1cbmNvbnN0IHZhbGlkSW5kZXggPSAoaW5kZXgsIG1heCkgPT4gaW5kZXggPT09IG51bGwgPyBudWxsIDogX2xpbWl0VmFsdWUoTWF0aC5yb3VuZChpbmRleCksIDAsIG1heCk7XG5jbGFzcyBDYXRlZ29yeVNjYWxlIGV4dGVuZHMgU2NhbGUge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcihjZmcpO1xuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gICAgdGhpcy5fYWRkZWRMYWJlbHMgPSBbXTtcbiAgfVxuICBpbml0KHNjYWxlT3B0aW9ucykge1xuICAgIGNvbnN0IGFkZGVkID0gdGhpcy5fYWRkZWRMYWJlbHM7XG4gICAgaWYgKGFkZGVkLmxlbmd0aCkge1xuICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICAgIGZvciAoY29uc3Qge2luZGV4LCBsYWJlbH0gb2YgYWRkZWQpIHtcbiAgICAgICAgaWYgKGxhYmVsc1tpbmRleF0gPT09IGxhYmVsKSB7XG4gICAgICAgICAgbGFiZWxzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2FkZGVkTGFiZWxzID0gW107XG4gICAgfVxuICAgIHN1cGVyLmluaXQoc2NhbGVPcHRpb25zKTtcbiAgfVxuICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgaWYgKGlzTnVsbE9yVW5kZWYocmF3KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgaW5kZXggPSBpc0Zpbml0ZShpbmRleCkgJiYgbGFiZWxzW2luZGV4XSA9PT0gcmF3ID8gaW5kZXhcbiAgICAgIDogZmluZE9yQWRkTGFiZWwobGFiZWxzLCByYXcsIHZhbHVlT3JEZWZhdWx0KGluZGV4LCByYXcpLCB0aGlzLl9hZGRlZExhYmVscyk7XG4gICAgcmV0dXJuIHZhbGlkSW5kZXgoaW5kZXgsIGxhYmVscy5sZW5ndGggLSAxKTtcbiAgfVxuICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgIGNvbnN0IHttaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGxldCB7bWluLCBtYXh9ID0gdGhpcy5nZXRNaW5NYXgodHJ1ZSk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgIGlmICghbWluRGVmaW5lZCkge1xuICAgICAgICBtaW4gPSAwO1xuICAgICAgfVxuICAgICAgaWYgKCFtYXhEZWZpbmVkKSB7XG4gICAgICAgIG1heCA9IHRoaXMuZ2V0TGFiZWxzKCkubGVuZ3RoIC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5taW4gPSBtaW47XG4gICAgdGhpcy5tYXggPSBtYXg7XG4gIH1cbiAgYnVpbGRUaWNrcygpIHtcbiAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLm9wdGlvbnMub2Zmc2V0O1xuICAgIGNvbnN0IHRpY2tzID0gW107XG4gICAgbGV0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgbGFiZWxzID0gKG1pbiA9PT0gMCAmJiBtYXggPT09IGxhYmVscy5sZW5ndGggLSAxKSA/IGxhYmVscyA6IGxhYmVscy5zbGljZShtaW4sIG1heCArIDEpO1xuICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSBNYXRoLm1heChsYWJlbHMubGVuZ3RoIC0gKG9mZnNldCA/IDAgOiAxKSwgMSk7XG4gICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHRoaXMubWluIC0gKG9mZnNldCA/IDAuNSA6IDApO1xuICAgIGZvciAobGV0IHZhbHVlID0gbWluOyB2YWx1ZSA8PSBtYXg7IHZhbHVlKyspIHtcbiAgICAgIHRpY2tzLnB1c2goe3ZhbHVlfSk7XG4gICAgfVxuICAgIHJldHVybiB0aWNrcztcbiAgfVxuICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICBpZiAodmFsdWUgPj0gMCAmJiB2YWx1ZSA8IGxhYmVscy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBsYWJlbHNbdmFsdWVdO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgY29uZmlndXJlKCkge1xuICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgIGlmICghdGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGhpcy5fcmV2ZXJzZVBpeGVscyA9ICF0aGlzLl9yZXZlcnNlUGl4ZWxzO1xuICAgIH1cbiAgfVxuICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHZhbHVlID0gdGhpcy5wYXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6IHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKCh2YWx1ZSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gIH1cbiAgZ2V0UGl4ZWxGb3JUaWNrKGluZGV4KSB7XG4gICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aWNrcy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aWNrc1tpbmRleF0udmFsdWUpO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLl9zdGFydFZhbHVlICsgdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpICogdGhpcy5fdmFsdWVSYW5nZSk7XG4gIH1cbiAgZ2V0QmFzZVBpeGVsKCkge1xuICAgIHJldHVybiB0aGlzLmJvdHRvbTtcbiAgfVxufVxuQ2F0ZWdvcnlTY2FsZS5pZCA9ICdjYXRlZ29yeSc7XG5DYXRlZ29yeVNjYWxlLmRlZmF1bHRzID0ge1xuICB0aWNrczoge1xuICAgIGNhbGxiYWNrOiBDYXRlZ29yeVNjYWxlLnByb3RvdHlwZS5nZXRMYWJlbEZvclZhbHVlXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGlja3MkMShnZW5lcmF0aW9uT3B0aW9ucywgZGF0YVJhbmdlKSB7XG4gIGNvbnN0IHRpY2tzID0gW107XG4gIGNvbnN0IE1JTl9TUEFDSU5HID0gMWUtMTQ7XG4gIGNvbnN0IHtib3VuZHMsIHN0ZXAsIG1pbiwgbWF4LCBwcmVjaXNpb24sIGNvdW50LCBtYXhUaWNrcywgbWF4RGlnaXRzLCBpbmNsdWRlQm91bmRzfSA9IGdlbmVyYXRpb25PcHRpb25zO1xuICBjb25zdCB1bml0ID0gc3RlcCB8fCAxO1xuICBjb25zdCBtYXhTcGFjZXMgPSBtYXhUaWNrcyAtIDE7XG4gIGNvbnN0IHttaW46IHJtaW4sIG1heDogcm1heH0gPSBkYXRhUmFuZ2U7XG4gIGNvbnN0IG1pbkRlZmluZWQgPSAhaXNOdWxsT3JVbmRlZihtaW4pO1xuICBjb25zdCBtYXhEZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYobWF4KTtcbiAgY29uc3QgY291bnREZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYoY291bnQpO1xuICBjb25zdCBtaW5TcGFjaW5nID0gKHJtYXggLSBybWluKSAvIChtYXhEaWdpdHMgKyAxKTtcbiAgbGV0IHNwYWNpbmcgPSBuaWNlTnVtKChybWF4IC0gcm1pbikgLyBtYXhTcGFjZXMgLyB1bml0KSAqIHVuaXQ7XG4gIGxldCBmYWN0b3IsIG5pY2VNaW4sIG5pY2VNYXgsIG51bVNwYWNlcztcbiAgaWYgKHNwYWNpbmcgPCBNSU5fU1BBQ0lORyAmJiAhbWluRGVmaW5lZCAmJiAhbWF4RGVmaW5lZCkge1xuICAgIHJldHVybiBbe3ZhbHVlOiBybWlufSwge3ZhbHVlOiBybWF4fV07XG4gIH1cbiAgbnVtU3BhY2VzID0gTWF0aC5jZWlsKHJtYXggLyBzcGFjaW5nKSAtIE1hdGguZmxvb3Iocm1pbiAvIHNwYWNpbmcpO1xuICBpZiAobnVtU3BhY2VzID4gbWF4U3BhY2VzKSB7XG4gICAgc3BhY2luZyA9IG5pY2VOdW0obnVtU3BhY2VzICogc3BhY2luZyAvIG1heFNwYWNlcyAvIHVuaXQpICogdW5pdDtcbiAgfVxuICBpZiAoIWlzTnVsbE9yVW5kZWYocHJlY2lzaW9uKSkge1xuICAgIGZhY3RvciA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuICAgIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyAqIGZhY3RvcikgLyBmYWN0b3I7XG4gIH1cbiAgaWYgKGJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgIG5pY2VNaW4gPSBNYXRoLmZsb29yKHJtaW4gLyBzcGFjaW5nKSAqIHNwYWNpbmc7XG4gICAgbmljZU1heCA9IE1hdGguY2VpbChybWF4IC8gc3BhY2luZykgKiBzcGFjaW5nO1xuICB9IGVsc2Uge1xuICAgIG5pY2VNaW4gPSBybWluO1xuICAgIG5pY2VNYXggPSBybWF4O1xuICB9XG4gIGlmIChtaW5EZWZpbmVkICYmIG1heERlZmluZWQgJiYgc3RlcCAmJiBhbG1vc3RXaG9sZSgobWF4IC0gbWluKSAvIHN0ZXAsIHNwYWNpbmcgLyAxMDAwKSkge1xuICAgIG51bVNwYWNlcyA9IE1hdGgucm91bmQoTWF0aC5taW4oKG1heCAtIG1pbikgLyBzcGFjaW5nLCBtYXhUaWNrcykpO1xuICAgIHNwYWNpbmcgPSAobWF4IC0gbWluKSAvIG51bVNwYWNlcztcbiAgICBuaWNlTWluID0gbWluO1xuICAgIG5pY2VNYXggPSBtYXg7XG4gIH0gZWxzZSBpZiAoY291bnREZWZpbmVkKSB7XG4gICAgbmljZU1pbiA9IG1pbkRlZmluZWQgPyBtaW4gOiBuaWNlTWluO1xuICAgIG5pY2VNYXggPSBtYXhEZWZpbmVkID8gbWF4IDogbmljZU1heDtcbiAgICBudW1TcGFjZXMgPSBjb3VudCAtIDE7XG4gICAgc3BhY2luZyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBudW1TcGFjZXM7XG4gIH0gZWxzZSB7XG4gICAgbnVtU3BhY2VzID0gKG5pY2VNYXggLSBuaWNlTWluKSAvIHNwYWNpbmc7XG4gICAgaWYgKGFsbW9zdEVxdWFscyhudW1TcGFjZXMsIE1hdGgucm91bmQobnVtU3BhY2VzKSwgc3BhY2luZyAvIDEwMDApKSB7XG4gICAgICBudW1TcGFjZXMgPSBNYXRoLnJvdW5kKG51bVNwYWNlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG51bVNwYWNlcyA9IE1hdGguY2VpbChudW1TcGFjZXMpO1xuICAgIH1cbiAgfVxuICBjb25zdCBkZWNpbWFsUGxhY2VzID0gTWF0aC5tYXgoXG4gICAgX2RlY2ltYWxQbGFjZXMoc3BhY2luZyksXG4gICAgX2RlY2ltYWxQbGFjZXMobmljZU1pbilcbiAgKTtcbiAgZmFjdG9yID0gTWF0aC5wb3coMTAsIGlzTnVsbE9yVW5kZWYocHJlY2lzaW9uKSA/IGRlY2ltYWxQbGFjZXMgOiBwcmVjaXNpb24pO1xuICBuaWNlTWluID0gTWF0aC5yb3VuZChuaWNlTWluICogZmFjdG9yKSAvIGZhY3RvcjtcbiAgbmljZU1heCA9IE1hdGgucm91bmQobmljZU1heCAqIGZhY3RvcikgLyBmYWN0b3I7XG4gIGxldCBqID0gMDtcbiAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICBpZiAoaW5jbHVkZUJvdW5kcyAmJiBuaWNlTWluICE9PSBtaW4pIHtcbiAgICAgIHRpY2tzLnB1c2goe3ZhbHVlOiBtaW59KTtcbiAgICAgIGlmIChuaWNlTWluIDwgbWluKSB7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICAgIGlmIChhbG1vc3RFcXVhbHMoTWF0aC5yb3VuZCgobmljZU1pbiArIGogKiBzcGFjaW5nKSAqIGZhY3RvcikgLyBmYWN0b3IsIG1pbiwgcmVsYXRpdmVMYWJlbFNpemUobWluLCBtaW5TcGFjaW5nLCBnZW5lcmF0aW9uT3B0aW9ucykpKSB7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5pY2VNaW4gPCBtaW4pIHtcbiAgICAgIGorKztcbiAgICB9XG4gIH1cbiAgZm9yICg7IGogPCBudW1TcGFjZXM7ICsraikge1xuICAgIHRpY2tzLnB1c2goe3ZhbHVlOiBNYXRoLnJvdW5kKChuaWNlTWluICsgaiAqIHNwYWNpbmcpICogZmFjdG9yKSAvIGZhY3Rvcn0pO1xuICB9XG4gIGlmIChtYXhEZWZpbmVkICYmIGluY2x1ZGVCb3VuZHMgJiYgbmljZU1heCAhPT0gbWF4KSB7XG4gICAgaWYgKHRpY2tzLmxlbmd0aCAmJiBhbG1vc3RFcXVhbHModGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWUsIG1heCwgcmVsYXRpdmVMYWJlbFNpemUobWF4LCBtaW5TcGFjaW5nLCBnZW5lcmF0aW9uT3B0aW9ucykpKSB7XG4gICAgICB0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSA9IG1heDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGlja3MucHVzaCh7dmFsdWU6IG1heH0pO1xuICAgIH1cbiAgfSBlbHNlIGlmICghbWF4RGVmaW5lZCB8fCBuaWNlTWF4ID09PSBtYXgpIHtcbiAgICB0aWNrcy5wdXNoKHt2YWx1ZTogbmljZU1heH0pO1xuICB9XG4gIHJldHVybiB0aWNrcztcbn1cbmZ1bmN0aW9uIHJlbGF0aXZlTGFiZWxTaXplKHZhbHVlLCBtaW5TcGFjaW5nLCB7aG9yaXpvbnRhbCwgbWluUm90YXRpb259KSB7XG4gIGNvbnN0IHJhZCA9IHRvUmFkaWFucyhtaW5Sb3RhdGlvbik7XG4gIGNvbnN0IHJhdGlvID0gKGhvcml6b250YWwgPyBNYXRoLnNpbihyYWQpIDogTWF0aC5jb3MocmFkKSkgfHwgMC4wMDE7XG4gIGNvbnN0IGxlbmd0aCA9IDAuNzUgKiBtaW5TcGFjaW5nICogKCcnICsgdmFsdWUpLmxlbmd0aDtcbiAgcmV0dXJuIE1hdGgubWluKG1pblNwYWNpbmcgLyByYXRpbywgbGVuZ3RoKTtcbn1cbmNsYXNzIExpbmVhclNjYWxlQmFzZSBleHRlbmRzIFNjYWxlIHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoY2ZnKTtcbiAgICB0aGlzLnN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZW5kID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZW5kVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gIH1cbiAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgIGlmIChpc051bGxPclVuZGVmKHJhdykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoKHR5cGVvZiByYXcgPT09ICdudW1iZXInIHx8IHJhdyBpbnN0YW5jZW9mIE51bWJlcikgJiYgIWlzRmluaXRlKCtyYXcpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuICtyYXc7XG4gIH1cbiAgaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpIHtcbiAgICBjb25zdCB7YmVnaW5BdFplcm99ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHttaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGxldCB7bWluLCBtYXh9ID0gdGhpcztcbiAgICBjb25zdCBzZXRNaW4gPSB2ID0+IChtaW4gPSBtaW5EZWZpbmVkID8gbWluIDogdik7XG4gICAgY29uc3Qgc2V0TWF4ID0gdiA9PiAobWF4ID0gbWF4RGVmaW5lZCA/IG1heCA6IHYpO1xuICAgIGlmIChiZWdpbkF0WmVybykge1xuICAgICAgY29uc3QgbWluU2lnbiA9IHNpZ24obWluKTtcbiAgICAgIGNvbnN0IG1heFNpZ24gPSBzaWduKG1heCk7XG4gICAgICBpZiAobWluU2lnbiA8IDAgJiYgbWF4U2lnbiA8IDApIHtcbiAgICAgICAgc2V0TWF4KDApO1xuICAgICAgfSBlbHNlIGlmIChtaW5TaWduID4gMCAmJiBtYXhTaWduID4gMCkge1xuICAgICAgICBzZXRNaW4oMCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtaW4gPT09IG1heCkge1xuICAgICAgbGV0IG9mZnNldCA9IDE7XG4gICAgICBpZiAobWF4ID49IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8IG1pbiA8PSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUikge1xuICAgICAgICBvZmZzZXQgPSBNYXRoLmFicyhtYXggKiAwLjA1KTtcbiAgICAgIH1cbiAgICAgIHNldE1heChtYXggKyBvZmZzZXQpO1xuICAgICAgaWYgKCFiZWdpbkF0WmVybykge1xuICAgICAgICBzZXRNaW4obWluIC0gb2Zmc2V0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5taW4gPSBtaW47XG4gICAgdGhpcy5tYXggPSBtYXg7XG4gIH1cbiAgZ2V0VGlja0xpbWl0KCkge1xuICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgIGxldCB7bWF4VGlja3NMaW1pdCwgc3RlcFNpemV9ID0gdGlja09wdHM7XG4gICAgbGV0IG1heFRpY2tzO1xuICAgIGlmIChzdGVwU2l6ZSkge1xuICAgICAgbWF4VGlja3MgPSBNYXRoLmNlaWwodGhpcy5tYXggLyBzdGVwU2l6ZSkgLSBNYXRoLmZsb29yKHRoaXMubWluIC8gc3RlcFNpemUpICsgMTtcbiAgICAgIGlmIChtYXhUaWNrcyA+IDEwMDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBzY2FsZXMuJHt0aGlzLmlkfS50aWNrcy5zdGVwU2l6ZTogJHtzdGVwU2l6ZX0gd291bGQgcmVzdWx0IGdlbmVyYXRpbmcgdXAgdG8gJHttYXhUaWNrc30gdGlja3MuIExpbWl0aW5nIHRvIDEwMDAuYCk7XG4gICAgICAgIG1heFRpY2tzID0gMTAwMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbWF4VGlja3MgPSB0aGlzLmNvbXB1dGVUaWNrTGltaXQoKTtcbiAgICAgIG1heFRpY2tzTGltaXQgPSBtYXhUaWNrc0xpbWl0IHx8IDExO1xuICAgIH1cbiAgICBpZiAobWF4VGlja3NMaW1pdCkge1xuICAgICAgbWF4VGlja3MgPSBNYXRoLm1pbihtYXhUaWNrc0xpbWl0LCBtYXhUaWNrcyk7XG4gICAgfVxuICAgIHJldHVybiBtYXhUaWNrcztcbiAgfVxuICBjb21wdXRlVGlja0xpbWl0KCkge1xuICAgIHJldHVybiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gIH1cbiAgYnVpbGRUaWNrcygpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICBsZXQgbWF4VGlja3MgPSB0aGlzLmdldFRpY2tMaW1pdCgpO1xuICAgIG1heFRpY2tzID0gTWF0aC5tYXgoMiwgbWF4VGlja3MpO1xuICAgIGNvbnN0IG51bWVyaWNHZW5lcmF0b3JPcHRpb25zID0ge1xuICAgICAgbWF4VGlja3MsXG4gICAgICBib3VuZHM6IG9wdHMuYm91bmRzLFxuICAgICAgbWluOiBvcHRzLm1pbixcbiAgICAgIG1heDogb3B0cy5tYXgsXG4gICAgICBwcmVjaXNpb246IHRpY2tPcHRzLnByZWNpc2lvbixcbiAgICAgIHN0ZXA6IHRpY2tPcHRzLnN0ZXBTaXplLFxuICAgICAgY291bnQ6IHRpY2tPcHRzLmNvdW50LFxuICAgICAgbWF4RGlnaXRzOiB0aGlzLl9tYXhEaWdpdHMoKSxcbiAgICAgIGhvcml6b250YWw6IHRoaXMuaXNIb3Jpem9udGFsKCksXG4gICAgICBtaW5Sb3RhdGlvbjogdGlja09wdHMubWluUm90YXRpb24gfHwgMCxcbiAgICAgIGluY2x1ZGVCb3VuZHM6IHRpY2tPcHRzLmluY2x1ZGVCb3VuZHMgIT09IGZhbHNlXG4gICAgfTtcbiAgICBjb25zdCBkYXRhUmFuZ2UgPSB0aGlzLl9yYW5nZSB8fCB0aGlzO1xuICAgIGNvbnN0IHRpY2tzID0gZ2VuZXJhdGVUaWNrcyQxKG51bWVyaWNHZW5lcmF0b3JPcHRpb25zLCBkYXRhUmFuZ2UpO1xuICAgIGlmIChvcHRzLmJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgICAgX3NldE1pbkFuZE1heEJ5S2V5KHRpY2tzLCB0aGlzLCAndmFsdWUnKTtcbiAgICB9XG4gICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWluO1xuICAgICAgdGhpcy5lbmQgPSB0aGlzLm1heDtcbiAgICB9XG4gICAgcmV0dXJuIHRpY2tzO1xuICB9XG4gIGNvbmZpZ3VyZSgpIHtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgbGV0IHN0YXJ0ID0gdGhpcy5taW47XG4gICAgbGV0IGVuZCA9IHRoaXMubWF4O1xuICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0ICYmIHRpY2tzLmxlbmd0aCkge1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gKGVuZCAtIHN0YXJ0KSAvIE1hdGgubWF4KHRpY2tzLmxlbmd0aCAtIDEsIDEpIC8gMjtcbiAgICAgIHN0YXJ0IC09IG9mZnNldDtcbiAgICAgIGVuZCArPSBvZmZzZXQ7XG4gICAgfVxuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSBzdGFydDtcbiAgICB0aGlzLl9lbmRWYWx1ZSA9IGVuZDtcbiAgICB0aGlzLl92YWx1ZVJhbmdlID0gZW5kIC0gc3RhcnQ7XG4gIH1cbiAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiBmb3JtYXROdW1iZXIodmFsdWUsIHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGUsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICB9XG59XG5cbmNsYXNzIExpbmVhclNjYWxlIGV4dGVuZHMgTGluZWFyU2NhbGVCYXNlIHtcbiAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICBjb25zdCB7bWluLCBtYXh9ID0gdGhpcy5nZXRNaW5NYXgodHJ1ZSk7XG4gICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pID8gbWluIDogMDtcbiAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgPyBtYXggOiAxO1xuICAgIHRoaXMuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuICB9XG4gIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgY29uc3QgaG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgbGVuZ3RoID0gaG9yaXpvbnRhbCA/IHRoaXMud2lkdGggOiB0aGlzLmhlaWdodDtcbiAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRvUmFkaWFucyh0aGlzLm9wdGlvbnMudGlja3MubWluUm90YXRpb24pO1xuICAgIGNvbnN0IHJhdGlvID0gKGhvcml6b250YWwgPyBNYXRoLnNpbihtaW5Sb3RhdGlvbikgOiBNYXRoLmNvcyhtaW5Sb3RhdGlvbikpIHx8IDAuMDAxO1xuICAgIGNvbnN0IHRpY2tGb250ID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKTtcbiAgICByZXR1cm4gTWF0aC5jZWlsKGxlbmd0aCAvIE1hdGgubWluKDQwLCB0aWNrRm9udC5saW5lSGVpZ2h0IC8gcmF0aW8pKTtcbiAgfVxuICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gTmFOIDogdGhpcy5nZXRQaXhlbEZvckRlY2ltYWwoKHZhbHVlIC0gdGhpcy5fc3RhcnRWYWx1ZSkgLyB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgfVxuICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0VmFsdWUgKyB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgKiB0aGlzLl92YWx1ZVJhbmdlO1xuICB9XG59XG5MaW5lYXJTY2FsZS5pZCA9ICdsaW5lYXInO1xuTGluZWFyU2NhbGUuZGVmYXVsdHMgPSB7XG4gIHRpY2tzOiB7XG4gICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMubnVtZXJpY1xuICB9XG59O1xuXG5mdW5jdGlvbiBpc01ham9yKHRpY2tWYWwpIHtcbiAgY29uc3QgcmVtYWluID0gdGlja1ZhbCAvIChNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMCh0aWNrVmFsKSkpKTtcbiAgcmV0dXJuIHJlbWFpbiA9PT0gMTtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIGRhdGFSYW5nZSkge1xuICBjb25zdCBlbmRFeHAgPSBNYXRoLmZsb29yKGxvZzEwKGRhdGFSYW5nZS5tYXgpKTtcbiAgY29uc3QgZW5kU2lnbmlmaWNhbmQgPSBNYXRoLmNlaWwoZGF0YVJhbmdlLm1heCAvIE1hdGgucG93KDEwLCBlbmRFeHApKTtcbiAgY29uc3QgdGlja3MgPSBbXTtcbiAgbGV0IHRpY2tWYWwgPSBmaW5pdGVPckRlZmF1bHQoZ2VuZXJhdGlvbk9wdGlvbnMubWluLCBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChkYXRhUmFuZ2UubWluKSkpKTtcbiAgbGV0IGV4cCA9IE1hdGguZmxvb3IobG9nMTAodGlja1ZhbCkpO1xuICBsZXQgc2lnbmlmaWNhbmQgPSBNYXRoLmZsb29yKHRpY2tWYWwgLyBNYXRoLnBvdygxMCwgZXhwKSk7XG4gIGxldCBwcmVjaXNpb24gPSBleHAgPCAwID8gTWF0aC5wb3coMTAsIE1hdGguYWJzKGV4cCkpIDogMTtcbiAgZG8ge1xuICAgIHRpY2tzLnB1c2goe3ZhbHVlOiB0aWNrVmFsLCBtYWpvcjogaXNNYWpvcih0aWNrVmFsKX0pO1xuICAgICsrc2lnbmlmaWNhbmQ7XG4gICAgaWYgKHNpZ25pZmljYW5kID09PSAxMCkge1xuICAgICAgc2lnbmlmaWNhbmQgPSAxO1xuICAgICAgKytleHA7XG4gICAgICBwcmVjaXNpb24gPSBleHAgPj0gMCA/IDEgOiBwcmVjaXNpb247XG4gICAgfVxuICAgIHRpY2tWYWwgPSBNYXRoLnJvdW5kKHNpZ25pZmljYW5kICogTWF0aC5wb3coMTAsIGV4cCkgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuICB9IHdoaWxlIChleHAgPCBlbmRFeHAgfHwgKGV4cCA9PT0gZW5kRXhwICYmIHNpZ25pZmljYW5kIDwgZW5kU2lnbmlmaWNhbmQpKTtcbiAgY29uc3QgbGFzdFRpY2sgPSBmaW5pdGVPckRlZmF1bHQoZ2VuZXJhdGlvbk9wdGlvbnMubWF4LCB0aWNrVmFsKTtcbiAgdGlja3MucHVzaCh7dmFsdWU6IGxhc3RUaWNrLCBtYWpvcjogaXNNYWpvcih0aWNrVmFsKX0pO1xuICByZXR1cm4gdGlja3M7XG59XG5jbGFzcyBMb2dhcml0aG1pY1NjYWxlIGV4dGVuZHMgU2NhbGUge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcihjZmcpO1xuICAgIHRoaXMuc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5lbmQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl92YWx1ZVJhbmdlID0gMDtcbiAgfVxuICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgY29uc3QgdmFsdWUgPSBMaW5lYXJTY2FsZUJhc2UucHJvdG90eXBlLnBhcnNlLmFwcGx5KHRoaXMsIFtyYXcsIGluZGV4XSk7XG4gICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICB0aGlzLl96ZXJvID0gdHJ1ZTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBpc051bWJlckZpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgPiAwID8gdmFsdWUgOiBudWxsO1xuICB9XG4gIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgY29uc3Qge21pbiwgbWF4fSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgIHRoaXMubWluID0gaXNOdW1iZXJGaW5pdGUobWluKSA/IE1hdGgubWF4KDAsIG1pbikgOiBudWxsO1xuICAgIHRoaXMubWF4ID0gaXNOdW1iZXJGaW5pdGUobWF4KSA/IE1hdGgubWF4KDAsIG1heCkgOiBudWxsO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYmVnaW5BdFplcm8pIHtcbiAgICAgIHRoaXMuX3plcm8gPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgfVxuICBoYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCkge1xuICAgIGNvbnN0IHttaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGxldCBtaW4gPSB0aGlzLm1pbjtcbiAgICBsZXQgbWF4ID0gdGhpcy5tYXg7XG4gICAgY29uc3Qgc2V0TWluID0gdiA9PiAobWluID0gbWluRGVmaW5lZCA/IG1pbiA6IHYpO1xuICAgIGNvbnN0IHNldE1heCA9IHYgPT4gKG1heCA9IG1heERlZmluZWQgPyBtYXggOiB2KTtcbiAgICBjb25zdCBleHAgPSAodiwgbSkgPT4gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAodikpICsgbSk7XG4gICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICBpZiAobWluIDw9IDApIHtcbiAgICAgICAgc2V0TWluKDEpO1xuICAgICAgICBzZXRNYXgoMTApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0TWluKGV4cChtaW4sIC0xKSk7XG4gICAgICAgIHNldE1heChleHAobWF4LCArMSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobWluIDw9IDApIHtcbiAgICAgIHNldE1pbihleHAobWF4LCAtMSkpO1xuICAgIH1cbiAgICBpZiAobWF4IDw9IDApIHtcbiAgICAgIHNldE1heChleHAobWluLCArMSkpO1xuICAgIH1cbiAgICBpZiAodGhpcy5femVybyAmJiB0aGlzLm1pbiAhPT0gdGhpcy5fc3VnZ2VzdGVkTWluICYmIG1pbiA9PT0gZXhwKHRoaXMubWluLCAwKSkge1xuICAgICAgc2V0TWluKGV4cChtaW4sIC0xKSk7XG4gICAgfVxuICAgIHRoaXMubWluID0gbWluO1xuICAgIHRoaXMubWF4ID0gbWF4O1xuICB9XG4gIGJ1aWxkVGlja3MoKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBnZW5lcmF0aW9uT3B0aW9ucyA9IHtcbiAgICAgIG1pbjogdGhpcy5fdXNlck1pbixcbiAgICAgIG1heDogdGhpcy5fdXNlck1heFxuICAgIH07XG4gICAgY29uc3QgdGlja3MgPSBnZW5lcmF0ZVRpY2tzKGdlbmVyYXRpb25PcHRpb25zLCB0aGlzKTtcbiAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgfVxuICAgIGlmIChvcHRzLnJldmVyc2UpIHtcbiAgICAgIHRpY2tzLnJldmVyc2UoKTtcbiAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1heDtcbiAgICAgIHRoaXMuZW5kID0gdGhpcy5taW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgfVxuICAgIHJldHVybiB0aWNrcztcbiAgfVxuICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWRcbiAgICAgID8gJzAnXG4gICAgICA6IGZvcm1hdE51bWJlcih2YWx1ZSwgdGhpcy5jaGFydC5vcHRpb25zLmxvY2FsZSwgdGhpcy5vcHRpb25zLnRpY2tzLmZvcm1hdCk7XG4gIH1cbiAgY29uZmlndXJlKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5taW47XG4gICAgc3VwZXIuY29uZmlndXJlKCk7XG4gICAgdGhpcy5fc3RhcnRWYWx1ZSA9IGxvZzEwKHN0YXJ0KTtcbiAgICB0aGlzLl92YWx1ZVJhbmdlID0gbG9nMTAodGhpcy5tYXgpIC0gbG9nMTAoc3RhcnQpO1xuICB9XG4gIGdldFBpeGVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgdmFsdWUgPSB0aGlzLm1pbjtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IGlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKHZhbHVlID09PSB0aGlzLm1pblxuICAgICAgPyAwXG4gICAgICA6IChsb2cxMCh2YWx1ZSkgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICBjb25zdCBkZWNpbWFsID0gdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpO1xuICAgIHJldHVybiBNYXRoLnBvdygxMCwgdGhpcy5fc3RhcnRWYWx1ZSArIGRlY2ltYWwgKiB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgfVxufVxuTG9nYXJpdGhtaWNTY2FsZS5pZCA9ICdsb2dhcml0aG1pYyc7XG5Mb2dhcml0aG1pY1NjYWxlLmRlZmF1bHRzID0ge1xuICB0aWNrczoge1xuICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLmxvZ2FyaXRobWljLFxuICAgIG1ham9yOiB7XG4gICAgICBlbmFibGVkOiB0cnVlXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRUaWNrQmFja2Ryb3BIZWlnaHQob3B0cykge1xuICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gIGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmIG9wdHMuZGlzcGxheSkge1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcodGlja09wdHMuYmFja2Ryb3BQYWRkaW5nKTtcbiAgICByZXR1cm4gdmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udCAmJiB0aWNrT3B0cy5mb250LnNpemUsIGRlZmF1bHRzLmZvbnQuc2l6ZSkgKyBwYWRkaW5nLmhlaWdodDtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIG1lYXN1cmVMYWJlbFNpemUoY3R4LCBmb250LCBsYWJlbCkge1xuICBsYWJlbCA9IGlzQXJyYXkobGFiZWwpID8gbGFiZWwgOiBbbGFiZWxdO1xuICByZXR1cm4ge1xuICAgIHc6IF9sb25nZXN0VGV4dChjdHgsIGZvbnQuc3RyaW5nLCBsYWJlbCksXG4gICAgaDogbGFiZWwubGVuZ3RoICogZm9udC5saW5lSGVpZ2h0XG4gIH07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvcywgc2l6ZSwgbWluLCBtYXgpIHtcbiAgaWYgKGFuZ2xlID09PSBtaW4gfHwgYW5nbGUgPT09IG1heCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogcG9zIC0gKHNpemUgLyAyKSxcbiAgICAgIGVuZDogcG9zICsgKHNpemUgLyAyKVxuICAgIH07XG4gIH0gZWxzZSBpZiAoYW5nbGUgPCBtaW4gfHwgYW5nbGUgPiBtYXgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IHBvcyAtIHNpemUsXG4gICAgICBlbmQ6IHBvc1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdGFydDogcG9zLFxuICAgIGVuZDogcG9zICsgc2l6ZVxuICB9O1xufVxuZnVuY3Rpb24gZml0V2l0aFBvaW50TGFiZWxzKHNjYWxlKSB7XG4gIGNvbnN0IG9yaWcgPSB7XG4gICAgbDogc2NhbGUubGVmdCArIHNjYWxlLl9wYWRkaW5nLmxlZnQsXG4gICAgcjogc2NhbGUucmlnaHQgLSBzY2FsZS5fcGFkZGluZy5yaWdodCxcbiAgICB0OiBzY2FsZS50b3AgKyBzY2FsZS5fcGFkZGluZy50b3AsXG4gICAgYjogc2NhbGUuYm90dG9tIC0gc2NhbGUuX3BhZGRpbmcuYm90dG9tXG4gIH07XG4gIGNvbnN0IGxpbWl0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9yaWcpO1xuICBjb25zdCBsYWJlbFNpemVzID0gW107XG4gIGNvbnN0IHBhZGRpbmcgPSBbXTtcbiAgY29uc3QgdmFsdWVDb3VudCA9IHNjYWxlLl9wb2ludExhYmVscy5sZW5ndGg7XG4gIGNvbnN0IHBvaW50TGFiZWxPcHRzID0gc2NhbGUub3B0aW9ucy5wb2ludExhYmVscztcbiAgY29uc3QgYWRkaXRpb25hbEFuZ2xlID0gcG9pbnRMYWJlbE9wdHMuY2VudGVyUG9pbnRMYWJlbHMgPyBQSSAvIHZhbHVlQ291bnQgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKykge1xuICAgIGNvbnN0IG9wdHMgPSBwb2ludExhYmVsT3B0cy5zZXRDb250ZXh0KHNjYWxlLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICBwYWRkaW5nW2ldID0gb3B0cy5wYWRkaW5nO1xuICAgIGNvbnN0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIHNjYWxlLmRyYXdpbmdBcmVhICsgcGFkZGluZ1tpXSwgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICBjb25zdCBwbEZvbnQgPSB0b0ZvbnQob3B0cy5mb250KTtcbiAgICBjb25zdCB0ZXh0U2l6ZSA9IG1lYXN1cmVMYWJlbFNpemUoc2NhbGUuY3R4LCBwbEZvbnQsIHNjYWxlLl9wb2ludExhYmVsc1tpXSk7XG4gICAgbGFiZWxTaXplc1tpXSA9IHRleHRTaXplO1xuICAgIGNvbnN0IGFuZ2xlUmFkaWFucyA9IF9ub3JtYWxpemVBbmdsZShzY2FsZS5nZXRJbmRleEFuZ2xlKGkpICsgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICBjb25zdCBhbmdsZSA9IE1hdGgucm91bmQodG9EZWdyZWVzKGFuZ2xlUmFkaWFucykpO1xuICAgIGNvbnN0IGhMaW1pdHMgPSBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvaW50UG9zaXRpb24ueCwgdGV4dFNpemUudywgMCwgMTgwKTtcbiAgICBjb25zdCB2TGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLnksIHRleHRTaXplLmgsIDkwLCAyNzApO1xuICAgIHVwZGF0ZUxpbWl0cyhsaW1pdHMsIG9yaWcsIGFuZ2xlUmFkaWFucywgaExpbWl0cywgdkxpbWl0cyk7XG4gIH1cbiAgc2NhbGUuc2V0Q2VudGVyUG9pbnQoXG4gICAgb3JpZy5sIC0gbGltaXRzLmwsXG4gICAgbGltaXRzLnIgLSBvcmlnLnIsXG4gICAgb3JpZy50IC0gbGltaXRzLnQsXG4gICAgbGltaXRzLmIgLSBvcmlnLmJcbiAgKTtcbiAgc2NhbGUuX3BvaW50TGFiZWxJdGVtcyA9IGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUxpbWl0cyhsaW1pdHMsIG9yaWcsIGFuZ2xlLCBoTGltaXRzLCB2TGltaXRzKSB7XG4gIGNvbnN0IHNpbiA9IE1hdGguYWJzKE1hdGguc2luKGFuZ2xlKSk7XG4gIGNvbnN0IGNvcyA9IE1hdGguYWJzKE1hdGguY29zKGFuZ2xlKSk7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuICBpZiAoaExpbWl0cy5zdGFydCA8IG9yaWcubCkge1xuICAgIHggPSAob3JpZy5sIC0gaExpbWl0cy5zdGFydCkgLyBzaW47XG4gICAgbGltaXRzLmwgPSBNYXRoLm1pbihsaW1pdHMubCwgb3JpZy5sIC0geCk7XG4gIH0gZWxzZSBpZiAoaExpbWl0cy5lbmQgPiBvcmlnLnIpIHtcbiAgICB4ID0gKGhMaW1pdHMuZW5kIC0gb3JpZy5yKSAvIHNpbjtcbiAgICBsaW1pdHMuciA9IE1hdGgubWF4KGxpbWl0cy5yLCBvcmlnLnIgKyB4KTtcbiAgfVxuICBpZiAodkxpbWl0cy5zdGFydCA8IG9yaWcudCkge1xuICAgIHkgPSAob3JpZy50IC0gdkxpbWl0cy5zdGFydCkgLyBjb3M7XG4gICAgbGltaXRzLnQgPSBNYXRoLm1pbihsaW1pdHMudCwgb3JpZy50IC0geSk7XG4gIH0gZWxzZSBpZiAodkxpbWl0cy5lbmQgPiBvcmlnLmIpIHtcbiAgICB5ID0gKHZMaW1pdHMuZW5kIC0gb3JpZy5iKSAvIGNvcztcbiAgICBsaW1pdHMuYiA9IE1hdGgubWF4KGxpbWl0cy5iLCBvcmlnLmIgKyB5KTtcbiAgfVxufVxuZnVuY3Rpb24gYnVpbGRQb2ludExhYmVsSXRlbXMoc2NhbGUsIGxhYmVsU2l6ZXMsIHBhZGRpbmcpIHtcbiAgY29uc3QgaXRlbXMgPSBbXTtcbiAgY29uc3QgdmFsdWVDb3VudCA9IHNjYWxlLl9wb2ludExhYmVscy5sZW5ndGg7XG4gIGNvbnN0IG9wdHMgPSBzY2FsZS5vcHRpb25zO1xuICBjb25zdCBleHRyYSA9IGdldFRpY2tCYWNrZHJvcEhlaWdodChvcHRzKSAvIDI7XG4gIGNvbnN0IG91dGVyRGlzdGFuY2UgPSBzY2FsZS5kcmF3aW5nQXJlYTtcbiAgY29uc3QgYWRkaXRpb25hbEFuZ2xlID0gb3B0cy5wb2ludExhYmVscy5jZW50ZXJQb2ludExhYmVscyA/IFBJIC8gdmFsdWVDb3VudCA6IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVDb3VudDsgaSsrKSB7XG4gICAgY29uc3QgcG9pbnRMYWJlbFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBvdXRlckRpc3RhbmNlICsgZXh0cmEgKyBwYWRkaW5nW2ldLCBhZGRpdGlvbmFsQW5nbGUpO1xuICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5yb3VuZCh0b0RlZ3JlZXMoX25vcm1hbGl6ZUFuZ2xlKHBvaW50TGFiZWxQb3NpdGlvbi5hbmdsZSArIEhBTEZfUEkpKSk7XG4gICAgY29uc3Qgc2l6ZSA9IGxhYmVsU2l6ZXNbaV07XG4gICAgY29uc3QgeSA9IHlGb3JBbmdsZShwb2ludExhYmVsUG9zaXRpb24ueSwgc2l6ZS5oLCBhbmdsZSk7XG4gICAgY29uc3QgdGV4dEFsaWduID0gZ2V0VGV4dEFsaWduRm9yQW5nbGUoYW5nbGUpO1xuICAgIGNvbnN0IGxlZnQgPSBsZWZ0Rm9yVGV4dEFsaWduKHBvaW50TGFiZWxQb3NpdGlvbi54LCBzaXplLncsIHRleHRBbGlnbik7XG4gICAgaXRlbXMucHVzaCh7XG4gICAgICB4OiBwb2ludExhYmVsUG9zaXRpb24ueCxcbiAgICAgIHksXG4gICAgICB0ZXh0QWxpZ24sXG4gICAgICBsZWZ0LFxuICAgICAgdG9wOiB5LFxuICAgICAgcmlnaHQ6IGxlZnQgKyBzaXplLncsXG4gICAgICBib3R0b206IHkgKyBzaXplLmhcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXRUZXh0QWxpZ25Gb3JBbmdsZShhbmdsZSkge1xuICBpZiAoYW5nbGUgPT09IDAgfHwgYW5nbGUgPT09IDE4MCkge1xuICAgIHJldHVybiAnY2VudGVyJztcbiAgfSBlbHNlIGlmIChhbmdsZSA8IDE4MCkge1xuICAgIHJldHVybiAnbGVmdCc7XG4gIH1cbiAgcmV0dXJuICdyaWdodCc7XG59XG5mdW5jdGlvbiBsZWZ0Rm9yVGV4dEFsaWduKHgsIHcsIGFsaWduKSB7XG4gIGlmIChhbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgIHggLT0gdztcbiAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICB4IC09ICh3IC8gMik7XG4gIH1cbiAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiB5Rm9yQW5nbGUoeSwgaCwgYW5nbGUpIHtcbiAgaWYgKGFuZ2xlID09PSA5MCB8fCBhbmdsZSA9PT0gMjcwKSB7XG4gICAgeSAtPSAoaCAvIDIpO1xuICB9IGVsc2UgaWYgKGFuZ2xlID4gMjcwIHx8IGFuZ2xlIDwgOTApIHtcbiAgICB5IC09IGg7XG4gIH1cbiAgcmV0dXJuIHk7XG59XG5mdW5jdGlvbiBkcmF3UG9pbnRMYWJlbHMoc2NhbGUsIGxhYmVsQ291bnQpIHtcbiAgY29uc3Qge2N0eCwgb3B0aW9uczoge3BvaW50TGFiZWxzfX0gPSBzY2FsZTtcbiAgZm9yIChsZXQgaSA9IGxhYmVsQ291bnQgLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gcG9pbnRMYWJlbHMuc2V0Q29udGV4dChzY2FsZS5nZXRQb2ludExhYmVsQ29udGV4dChpKSk7XG4gICAgY29uc3QgcGxGb250ID0gdG9Gb250KG9wdHNBdEluZGV4LmZvbnQpO1xuICAgIGNvbnN0IHt4LCB5LCB0ZXh0QWxpZ24sIGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbX0gPSBzY2FsZS5fcG9pbnRMYWJlbEl0ZW1zW2ldO1xuICAgIGNvbnN0IHtiYWNrZHJvcENvbG9yfSA9IG9wdHNBdEluZGV4O1xuICAgIGlmICghaXNOdWxsT3JVbmRlZihiYWNrZHJvcENvbG9yKSkge1xuICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhvcHRzQXRJbmRleC5ib3JkZXJSYWRpdXMpO1xuICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRzQXRJbmRleC5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tkcm9wQ29sb3I7XG4gICAgICBjb25zdCBiYWNrZHJvcExlZnQgPSBsZWZ0IC0gcGFkZGluZy5sZWZ0O1xuICAgICAgY29uc3QgYmFja2Ryb3BUb3AgPSB0b3AgLSBwYWRkaW5nLnRvcDtcbiAgICAgIGNvbnN0IGJhY2tkcm9wV2lkdGggPSByaWdodCAtIGxlZnQgKyBwYWRkaW5nLndpZHRoO1xuICAgICAgY29uc3QgYmFja2Ryb3BIZWlnaHQgPSBib3R0b20gLSB0b3AgKyBwYWRkaW5nLmhlaWdodDtcbiAgICAgIGlmIChPYmplY3QudmFsdWVzKGJvcmRlclJhZGl1cykuc29tZSh2ID0+IHYgIT09IDApKSB7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgIHg6IGJhY2tkcm9wTGVmdCxcbiAgICAgICAgICB5OiBiYWNrZHJvcFRvcCxcbiAgICAgICAgICB3OiBiYWNrZHJvcFdpZHRoLFxuICAgICAgICAgIGg6IGJhY2tkcm9wSGVpZ2h0LFxuICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICB9KTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5maWxsUmVjdChiYWNrZHJvcExlZnQsIGJhY2tkcm9wVG9wLCBiYWNrZHJvcFdpZHRoLCBiYWNrZHJvcEhlaWdodCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlbmRlclRleHQoXG4gICAgICBjdHgsXG4gICAgICBzY2FsZS5fcG9pbnRMYWJlbHNbaV0sXG4gICAgICB4LFxuICAgICAgeSArIChwbEZvbnQubGluZUhlaWdodCAvIDIpLFxuICAgICAgcGxGb250LFxuICAgICAge1xuICAgICAgICBjb2xvcjogb3B0c0F0SW5kZXguY29sb3IsXG4gICAgICAgIHRleHRBbGlnbjogdGV4dEFsaWduLFxuICAgICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnXG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gcGF0aFJhZGl1c0xpbmUoc2NhbGUsIHJhZGl1cywgY2lyY3VsYXIsIGxhYmVsQ291bnQpIHtcbiAgY29uc3Qge2N0eH0gPSBzY2FsZTtcbiAgaWYgKGNpcmN1bGFyKSB7XG4gICAgY3R4LmFyYyhzY2FsZS54Q2VudGVyLCBzY2FsZS55Q2VudGVyLCByYWRpdXMsIDAsIFRBVSk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKDAsIHJhZGl1cyk7XG4gICAgY3R4Lm1vdmVUbyhwb2ludFBvc2l0aW9uLngsIHBvaW50UG9zaXRpb24ueSk7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsYWJlbENvdW50OyBpKyspIHtcbiAgICAgIHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIHJhZGl1cyk7XG4gICAgICBjdHgubGluZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGRyYXdSYWRpdXNMaW5lKHNjYWxlLCBncmlkTGluZU9wdHMsIHJhZGl1cywgbGFiZWxDb3VudCkge1xuICBjb25zdCBjdHggPSBzY2FsZS5jdHg7XG4gIGNvbnN0IGNpcmN1bGFyID0gZ3JpZExpbmVPcHRzLmNpcmN1bGFyO1xuICBjb25zdCB7Y29sb3IsIGxpbmVXaWR0aH0gPSBncmlkTGluZU9wdHM7XG4gIGlmICgoIWNpcmN1bGFyICYmICFsYWJlbENvdW50KSB8fCAhY29sb3IgfHwgIWxpbmVXaWR0aCB8fCByYWRpdXMgPCAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuICBjdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xuICBjdHguc2V0TGluZURhc2goZ3JpZExpbmVPcHRzLmJvcmRlckRhc2gpO1xuICBjdHgubGluZURhc2hPZmZzZXQgPSBncmlkTGluZU9wdHMuYm9yZGVyRGFzaE9mZnNldDtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBwYXRoUmFkaXVzTGluZShzY2FsZSwgcmFkaXVzLCBjaXJjdWxhciwgbGFiZWxDb3VudCk7XG4gIGN0eC5jbG9zZVBhdGgoKTtcbiAgY3R4LnN0cm9rZSgpO1xuICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gY3JlYXRlUG9pbnRMYWJlbENvbnRleHQocGFyZW50LCBpbmRleCwgbGFiZWwpIHtcbiAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgbGFiZWwsXG4gICAgaW5kZXgsXG4gICAgdHlwZTogJ3BvaW50TGFiZWwnXG4gIH0pO1xufVxuY2xhc3MgUmFkaWFsTGluZWFyU2NhbGUgZXh0ZW5kcyBMaW5lYXJTY2FsZUJhc2Uge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcihjZmcpO1xuICAgIHRoaXMueENlbnRlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnlDZW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kcmF3aW5nQXJlYSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wb2ludExhYmVscyA9IFtdO1xuICAgIHRoaXMuX3BvaW50TGFiZWxJdGVtcyA9IFtdO1xuICB9XG4gIHNldERpbWVuc2lvbnMoKSB7XG4gICAgY29uc3QgcGFkZGluZyA9IHRoaXMuX3BhZGRpbmcgPSB0b1BhZGRpbmcoZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KHRoaXMub3B0aW9ucykgLyAyKTtcbiAgICBjb25zdCB3ID0gdGhpcy53aWR0aCA9IHRoaXMubWF4V2lkdGggLSBwYWRkaW5nLndpZHRoO1xuICAgIGNvbnN0IGggPSB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0IC0gcGFkZGluZy5oZWlnaHQ7XG4gICAgdGhpcy54Q2VudGVyID0gTWF0aC5mbG9vcih0aGlzLmxlZnQgKyB3IC8gMiArIHBhZGRpbmcubGVmdCk7XG4gICAgdGhpcy55Q2VudGVyID0gTWF0aC5mbG9vcih0aGlzLnRvcCArIGggLyAyICsgcGFkZGluZy50b3ApO1xuICAgIHRoaXMuZHJhd2luZ0FyZWEgPSBNYXRoLmZsb29yKE1hdGgubWluKHcsIGgpIC8gMik7XG4gIH1cbiAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICBjb25zdCB7bWluLCBtYXh9ID0gdGhpcy5nZXRNaW5NYXgoZmFsc2UpO1xuICAgIHRoaXMubWluID0gaXNOdW1iZXJGaW5pdGUobWluKSAmJiAhaXNOYU4obWluKSA/IG1pbiA6IDA7XG4gICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpICYmICFpc05hTihtYXgpID8gbWF4IDogMDtcbiAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgfVxuICBjb21wdXRlVGlja0xpbWl0KCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5kcmF3aW5nQXJlYSAvIGdldFRpY2tCYWNrZHJvcEhlaWdodCh0aGlzLm9wdGlvbnMpKTtcbiAgfVxuICBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICBMaW5lYXJTY2FsZUJhc2UucHJvdG90eXBlLmdlbmVyYXRlVGlja0xhYmVscy5jYWxsKHRoaXMsIHRpY2tzKTtcbiAgICB0aGlzLl9wb2ludExhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKClcbiAgICAgIC5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBsYWJlbCA9IGNhbGxiYWNrKHRoaXMub3B0aW9ucy5wb2ludExhYmVscy5jYWxsYmFjaywgW3ZhbHVlLCBpbmRleF0sIHRoaXMpO1xuICAgICAgICByZXR1cm4gbGFiZWwgfHwgbGFiZWwgPT09IDAgPyBsYWJlbCA6ICcnO1xuICAgICAgfSlcbiAgICAgIC5maWx0ZXIoKHYsIGkpID0+IHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSkpO1xuICB9XG4gIGZpdCgpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGlmIChvcHRzLmRpc3BsYXkgJiYgb3B0cy5wb2ludExhYmVscy5kaXNwbGF5KSB7XG4gICAgICBmaXRXaXRoUG9pbnRMYWJlbHModGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0Q2VudGVyUG9pbnQoMCwgMCwgMCwgMCk7XG4gICAgfVxuICB9XG4gIHNldENlbnRlclBvaW50KGxlZnRNb3ZlbWVudCwgcmlnaHRNb3ZlbWVudCwgdG9wTW92ZW1lbnQsIGJvdHRvbU1vdmVtZW50KSB7XG4gICAgdGhpcy54Q2VudGVyICs9IE1hdGguZmxvb3IoKGxlZnRNb3ZlbWVudCAtIHJpZ2h0TW92ZW1lbnQpIC8gMik7XG4gICAgdGhpcy55Q2VudGVyICs9IE1hdGguZmxvb3IoKHRvcE1vdmVtZW50IC0gYm90dG9tTW92ZW1lbnQpIC8gMik7XG4gICAgdGhpcy5kcmF3aW5nQXJlYSAtPSBNYXRoLm1pbih0aGlzLmRyYXdpbmdBcmVhIC8gMiwgTWF0aC5tYXgobGVmdE1vdmVtZW50LCByaWdodE1vdmVtZW50LCB0b3BNb3ZlbWVudCwgYm90dG9tTW92ZW1lbnQpKTtcbiAgfVxuICBnZXRJbmRleEFuZ2xlKGluZGV4KSB7XG4gICAgY29uc3QgYW5nbGVNdWx0aXBsaWVyID0gVEFVIC8gKHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aCB8fCAxKTtcbiAgICBjb25zdCBzdGFydEFuZ2xlID0gdGhpcy5vcHRpb25zLnN0YXJ0QW5nbGUgfHwgMDtcbiAgICByZXR1cm4gX25vcm1hbGl6ZUFuZ2xlKGluZGV4ICogYW5nbGVNdWx0aXBsaWVyICsgdG9SYWRpYW5zKHN0YXJ0QW5nbGUpKTtcbiAgfVxuICBnZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGlmIChpc051bGxPclVuZGVmKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgY29uc3Qgc2NhbGluZ0ZhY3RvciA9IHRoaXMuZHJhd2luZ0FyZWEgLyAodGhpcy5tYXggLSB0aGlzLm1pbik7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICByZXR1cm4gKHRoaXMubWF4IC0gdmFsdWUpICogc2NhbGluZ0ZhY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuICh2YWx1ZSAtIHRoaXMubWluKSAqIHNjYWxpbmdGYWN0b3I7XG4gIH1cbiAgZ2V0VmFsdWVGb3JEaXN0YW5jZUZyb21DZW50ZXIoZGlzdGFuY2UpIHtcbiAgICBpZiAoaXNOdWxsT3JVbmRlZihkaXN0YW5jZSkpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIGNvbnN0IHNjYWxlZERpc3RhbmNlID0gZGlzdGFuY2UgLyAodGhpcy5kcmF3aW5nQXJlYSAvICh0aGlzLm1heCAtIHRoaXMubWluKSk7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXZlcnNlID8gdGhpcy5tYXggLSBzY2FsZWREaXN0YW5jZSA6IHRoaXMubWluICsgc2NhbGVkRGlzdGFuY2U7XG4gIH1cbiAgZ2V0UG9pbnRMYWJlbENvbnRleHQoaW5kZXgpIHtcbiAgICBjb25zdCBwb2ludExhYmVscyA9IHRoaXMuX3BvaW50TGFiZWxzIHx8IFtdO1xuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgcG9pbnRMYWJlbHMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBwb2ludExhYmVsID0gcG9pbnRMYWJlbHNbaW5kZXhdO1xuICAgICAgcmV0dXJuIGNyZWF0ZVBvaW50TGFiZWxDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgcG9pbnRMYWJlbCk7XG4gICAgfVxuICB9XG4gIGdldFBvaW50UG9zaXRpb24oaW5kZXgsIGRpc3RhbmNlRnJvbUNlbnRlciwgYWRkaXRpb25hbEFuZ2xlID0gMCkge1xuICAgIGNvbnN0IGFuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKGluZGV4KSAtIEhBTEZfUEkgKyBhZGRpdGlvbmFsQW5nbGU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IE1hdGguY29zKGFuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlciArIHRoaXMueENlbnRlcixcbiAgICAgIHk6IE1hdGguc2luKGFuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlciArIHRoaXMueUNlbnRlcixcbiAgICAgIGFuZ2xlXG4gICAgfTtcbiAgfVxuICBnZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaW5kZXgsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh2YWx1ZSkpO1xuICB9XG4gIGdldEJhc2VQb3NpdGlvbihpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCB8fCAwLCB0aGlzLmdldEJhc2VWYWx1ZSgpKTtcbiAgfVxuICBnZXRQb2ludExhYmVsUG9zaXRpb24oaW5kZXgpIHtcbiAgICBjb25zdCB7bGVmdCwgdG9wLCByaWdodCwgYm90dG9tfSA9IHRoaXMuX3BvaW50TGFiZWxJdGVtc1tpbmRleF07XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQsXG4gICAgICB0b3AsXG4gICAgICByaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICB9O1xuICB9XG4gIGRyYXdCYWNrZ3JvdW5kKCkge1xuICAgIGNvbnN0IHtiYWNrZ3JvdW5kQ29sb3IsIGdyaWQ6IHtjaXJjdWxhcn19ID0gdGhpcy5vcHRpb25zO1xuICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIHBhdGhSYWRpdXNMaW5lKHRoaXMsIHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodGhpcy5fZW5kVmFsdWUpLCBjaXJjdWxhciwgdGhpcy5fcG9pbnRMYWJlbHMubGVuZ3RoKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgICBjdHguZmlsbCgpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cbiAgZHJhd0dyaWQoKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB7YW5nbGVMaW5lcywgZ3JpZH0gPSBvcHRzO1xuICAgIGNvbnN0IGxhYmVsQ291bnQgPSB0aGlzLl9wb2ludExhYmVscy5sZW5ndGg7XG4gICAgbGV0IGksIG9mZnNldCwgcG9zaXRpb247XG4gICAgaWYgKG9wdHMucG9pbnRMYWJlbHMuZGlzcGxheSkge1xuICAgICAgZHJhd1BvaW50TGFiZWxzKHRoaXMsIGxhYmVsQ291bnQpO1xuICAgIH1cbiAgICBpZiAoZ3JpZC5kaXNwbGF5KSB7XG4gICAgICB0aGlzLnRpY2tzLmZvckVhY2goKHRpY2ssIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xuICAgICAgICAgIG9mZnNldCA9IHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodGljay52YWx1ZSk7XG4gICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGluZGV4IC0gMSkpO1xuICAgICAgICAgIGRyYXdSYWRpdXNMaW5lKHRoaXMsIG9wdHNBdEluZGV4LCBvZmZzZXQsIGxhYmVsQ291bnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGFuZ2xlTGluZXMuZGlzcGxheSkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGZvciAoaSA9IGxhYmVsQ291bnQgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCBvcHRzQXRJbmRleCA9IGFuZ2xlTGluZXMuc2V0Q29udGV4dCh0aGlzLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICAgICAgY29uc3Qge2NvbG9yLCBsaW5lV2lkdGh9ID0gb3B0c0F0SW5kZXg7XG4gICAgICAgIGlmICghbGluZVdpZHRoIHx8ICFjb2xvcikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuICAgICAgICBjdHguc2V0TGluZURhc2gob3B0c0F0SW5kZXguYm9yZGVyRGFzaCk7XG4gICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LmJvcmRlckRhc2hPZmZzZXQ7XG4gICAgICAgIG9mZnNldCA9IHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUob3B0cy50aWNrcy5yZXZlcnNlID8gdGhpcy5taW4gOiB0aGlzLm1heCk7XG4gICAgICAgIHBvc2l0aW9uID0gdGhpcy5nZXRQb2ludFBvc2l0aW9uKGksIG9mZnNldCk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyh0aGlzLnhDZW50ZXIsIHRoaXMueUNlbnRlcik7XG4gICAgICAgIGN0eC5saW5lVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgIH1cbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICB9XG4gIGRyYXdCb3JkZXIoKSB7fVxuICBkcmF3TGFiZWxzKCkge1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuICAgIGlmICghdGlja09wdHMuZGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzdGFydEFuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKDApO1xuICAgIGxldCBvZmZzZXQsIHdpZHRoO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnRyYW5zbGF0ZSh0aGlzLnhDZW50ZXIsIHRoaXMueUNlbnRlcik7XG4gICAgY3R4LnJvdGF0ZShzdGFydEFuZ2xlKTtcbiAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgIHRoaXMudGlja3MuZm9yRWFjaCgodGljaywgaW5kZXgpID0+IHtcbiAgICAgIGlmIChpbmRleCA9PT0gMCAmJiAhb3B0cy5yZXZlcnNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gdGlja09wdHMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaW5kZXgpKTtcbiAgICAgIGNvbnN0IHRpY2tGb250ID0gdG9Gb250KG9wdHNBdEluZGV4LmZvbnQpO1xuICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0aGlzLnRpY2tzW2luZGV4XS52YWx1ZSk7XG4gICAgICBpZiAob3B0c0F0SW5kZXguc2hvd0xhYmVsQmFja2Ryb3ApIHtcbiAgICAgICAgY3R4LmZvbnQgPSB0aWNrRm9udC5zdHJpbmc7XG4gICAgICAgIHdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHRpY2subGFiZWwpLndpZHRoO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0c0F0SW5kZXguYmFja2Ryb3BDb2xvcjtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRzQXRJbmRleC5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgICAgLXdpZHRoIC8gMiAtIHBhZGRpbmcubGVmdCxcbiAgICAgICAgICAtb2Zmc2V0IC0gdGlja0ZvbnQuc2l6ZSAvIDIgLSBwYWRkaW5nLnRvcCxcbiAgICAgICAgICB3aWR0aCArIHBhZGRpbmcud2lkdGgsXG4gICAgICAgICAgdGlja0ZvbnQuc2l6ZSArIHBhZGRpbmcuaGVpZ2h0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZW5kZXJUZXh0KGN0eCwgdGljay5sYWJlbCwgMCwgLW9mZnNldCwgdGlja0ZvbnQsIHtcbiAgICAgICAgY29sb3I6IG9wdHNBdEluZGV4LmNvbG9yLFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxuICBkcmF3VGl0bGUoKSB7fVxufVxuUmFkaWFsTGluZWFyU2NhbGUuaWQgPSAncmFkaWFsTGluZWFyJztcblJhZGlhbExpbmVhclNjYWxlLmRlZmF1bHRzID0ge1xuICBkaXNwbGF5OiB0cnVlLFxuICBhbmltYXRlOiB0cnVlLFxuICBwb3NpdGlvbjogJ2NoYXJ0QXJlYScsXG4gIGFuZ2xlTGluZXM6IHtcbiAgICBkaXNwbGF5OiB0cnVlLFxuICAgIGxpbmVXaWR0aDogMSxcbiAgICBib3JkZXJEYXNoOiBbXSxcbiAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLjBcbiAgfSxcbiAgZ3JpZDoge1xuICAgIGNpcmN1bGFyOiBmYWxzZVxuICB9LFxuICBzdGFydEFuZ2xlOiAwLFxuICB0aWNrczoge1xuICAgIHNob3dMYWJlbEJhY2tkcm9wOiB0cnVlLFxuICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgfSxcbiAgcG9pbnRMYWJlbHM6IHtcbiAgICBiYWNrZHJvcENvbG9yOiB1bmRlZmluZWQsXG4gICAgYmFja2Ryb3BQYWRkaW5nOiAyLFxuICAgIGRpc3BsYXk6IHRydWUsXG4gICAgZm9udDoge1xuICAgICAgc2l6ZTogMTBcbiAgICB9LFxuICAgIGNhbGxiYWNrKGxhYmVsKSB7XG4gICAgICByZXR1cm4gbGFiZWw7XG4gICAgfSxcbiAgICBwYWRkaW5nOiA1LFxuICAgIGNlbnRlclBvaW50TGFiZWxzOiBmYWxzZVxuICB9XG59O1xuUmFkaWFsTGluZWFyU2NhbGUuZGVmYXVsdFJvdXRlcyA9IHtcbiAgJ2FuZ2xlTGluZXMuY29sb3InOiAnYm9yZGVyQ29sb3InLFxuICAncG9pbnRMYWJlbHMuY29sb3InOiAnY29sb3InLFxuICAndGlja3MuY29sb3InOiAnY29sb3InXG59O1xuUmFkaWFsTGluZWFyU2NhbGUuZGVzY3JpcHRvcnMgPSB7XG4gIGFuZ2xlTGluZXM6IHtcbiAgICBfZmFsbGJhY2s6ICdncmlkJ1xuICB9XG59O1xuXG5jb25zdCBJTlRFUlZBTFMgPSB7XG4gIG1pbGxpc2Vjb25kOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAxLCBzdGVwczogMTAwMH0sXG4gIHNlY29uZDoge2NvbW1vbjogdHJ1ZSwgc2l6ZTogMTAwMCwgc3RlcHM6IDYwfSxcbiAgbWludXRlOiB7Y29tbW9uOiB0cnVlLCBzaXplOiA2MDAwMCwgc3RlcHM6IDYwfSxcbiAgaG91cjoge2NvbW1vbjogdHJ1ZSwgc2l6ZTogMzYwMDAwMCwgc3RlcHM6IDI0fSxcbiAgZGF5OiB7Y29tbW9uOiB0cnVlLCBzaXplOiA4NjQwMDAwMCwgc3RlcHM6IDMwfSxcbiAgd2Vlazoge2NvbW1vbjogZmFsc2UsIHNpemU6IDYwNDgwMDAwMCwgc3RlcHM6IDR9LFxuICBtb250aDoge2NvbW1vbjogdHJ1ZSwgc2l6ZTogMi42MjhlOSwgc3RlcHM6IDEyfSxcbiAgcXVhcnRlcjoge2NvbW1vbjogZmFsc2UsIHNpemU6IDcuODg0ZTksIHN0ZXBzOiA0fSxcbiAgeWVhcjoge2NvbW1vbjogdHJ1ZSwgc2l6ZTogMy4xNTRlMTB9XG59O1xuY29uc3QgVU5JVFMgPSAoT2JqZWN0LmtleXMoSU5URVJWQUxTKSk7XG5mdW5jdGlvbiBzb3J0ZXIoYSwgYikge1xuICByZXR1cm4gYSAtIGI7XG59XG5mdW5jdGlvbiBwYXJzZShzY2FsZSwgaW5wdXQpIHtcbiAgaWYgKGlzTnVsbE9yVW5kZWYoaW5wdXQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgYWRhcHRlciA9IHNjYWxlLl9hZGFwdGVyO1xuICBjb25zdCB7cGFyc2VyLCByb3VuZCwgaXNvV2Vla2RheX0gPSBzY2FsZS5fcGFyc2VPcHRzO1xuICBsZXQgdmFsdWUgPSBpbnB1dDtcbiAgaWYgKHR5cGVvZiBwYXJzZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YWx1ZSA9IHBhcnNlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKCFpc051bWJlckZpbml0ZSh2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IHR5cGVvZiBwYXJzZXIgPT09ICdzdHJpbmcnXG4gICAgICA/IGFkYXB0ZXIucGFyc2UodmFsdWUsIHBhcnNlcilcbiAgICAgIDogYWRhcHRlci5wYXJzZSh2YWx1ZSk7XG4gIH1cbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKHJvdW5kKSB7XG4gICAgdmFsdWUgPSByb3VuZCA9PT0gJ3dlZWsnICYmIChpc051bWJlcihpc29XZWVrZGF5KSB8fCBpc29XZWVrZGF5ID09PSB0cnVlKVxuICAgICAgPyBhZGFwdGVyLnN0YXJ0T2YodmFsdWUsICdpc29XZWVrJywgaXNvV2Vla2RheSlcbiAgICAgIDogYWRhcHRlci5zdGFydE9mKHZhbHVlLCByb3VuZCk7XG4gIH1cbiAgcmV0dXJuICt2YWx1ZTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JBdXRvVGlja3MobWluVW5pdCwgbWluLCBtYXgsIGNhcGFjaXR5KSB7XG4gIGNvbnN0IGlsZW4gPSBVTklUUy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSBVTklUUy5pbmRleE9mKG1pblVuaXQpOyBpIDwgaWxlbiAtIDE7ICsraSkge1xuICAgIGNvbnN0IGludGVydmFsID0gSU5URVJWQUxTW1VOSVRTW2ldXTtcbiAgICBjb25zdCBmYWN0b3IgPSBpbnRlcnZhbC5zdGVwcyA/IGludGVydmFsLnN0ZXBzIDogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgaWYgKGludGVydmFsLmNvbW1vbiAmJiBNYXRoLmNlaWwoKG1heCAtIG1pbikgLyAoZmFjdG9yICogaW50ZXJ2YWwuc2l6ZSkpIDw9IGNhcGFjaXR5KSB7XG4gICAgICByZXR1cm4gVU5JVFNbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBVTklUU1tpbGVuIC0gMV07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyhzY2FsZSwgbnVtVGlja3MsIG1pblVuaXQsIG1pbiwgbWF4KSB7XG4gIGZvciAobGV0IGkgPSBVTklUUy5sZW5ndGggLSAxOyBpID49IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGktLSkge1xuICAgIGNvbnN0IHVuaXQgPSBVTklUU1tpXTtcbiAgICBpZiAoSU5URVJWQUxTW3VuaXRdLmNvbW1vbiAmJiBzY2FsZS5fYWRhcHRlci5kaWZmKG1heCwgbWluLCB1bml0KSA+PSBudW1UaWNrcyAtIDEpIHtcbiAgICAgIHJldHVybiB1bml0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gVU5JVFNbbWluVW5pdCA/IFVOSVRTLmluZGV4T2YobWluVW5pdCkgOiAwXTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZU1ham9yVW5pdCh1bml0KSB7XG4gIGZvciAobGV0IGkgPSBVTklUUy5pbmRleE9mKHVuaXQpICsgMSwgaWxlbiA9IFVOSVRTLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGlmIChJTlRFUlZBTFNbVU5JVFNbaV1dLmNvbW1vbikge1xuICAgICAgcmV0dXJuIFVOSVRTW2ldO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcykge1xuICBpZiAoIXRpbWVzdGFtcHMpIHtcbiAgICB0aWNrc1t0aW1lXSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICBjb25zdCB7bG8sIGhpfSA9IF9sb29rdXAodGltZXN0YW1wcywgdGltZSk7XG4gICAgY29uc3QgdGltZXN0YW1wID0gdGltZXN0YW1wc1tsb10gPj0gdGltZSA/IHRpbWVzdGFtcHNbbG9dIDogdGltZXN0YW1wc1toaV07XG4gICAgdGlja3NbdGltZXN0YW1wXSA9IHRydWU7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldE1ham9yVGlja3Moc2NhbGUsIHRpY2tzLCBtYXAsIG1ham9yVW5pdCkge1xuICBjb25zdCBhZGFwdGVyID0gc2NhbGUuX2FkYXB0ZXI7XG4gIGNvbnN0IGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZih0aWNrc1swXS52YWx1ZSwgbWFqb3JVbml0KTtcbiAgY29uc3QgbGFzdCA9IHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlO1xuICBsZXQgbWFqb3IsIGluZGV4O1xuICBmb3IgKG1ham9yID0gZmlyc3Q7IG1ham9yIDw9IGxhc3Q7IG1ham9yID0gK2FkYXB0ZXIuYWRkKG1ham9yLCAxLCBtYWpvclVuaXQpKSB7XG4gICAgaW5kZXggPSBtYXBbbWFqb3JdO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB0aWNrc1tpbmRleF0ubWFqb3IgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGlja3M7XG59XG5mdW5jdGlvbiB0aWNrc0Zyb21UaW1lc3RhbXBzKHNjYWxlLCB2YWx1ZXMsIG1ham9yVW5pdCkge1xuICBjb25zdCB0aWNrcyA9IFtdO1xuICBjb25zdCBtYXAgPSB7fTtcbiAgY29uc3QgaWxlbiA9IHZhbHVlcy5sZW5ndGg7XG4gIGxldCBpLCB2YWx1ZTtcbiAgZm9yIChpID0gMDsgaSA8IGlsZW47ICsraSkge1xuICAgIHZhbHVlID0gdmFsdWVzW2ldO1xuICAgIG1hcFt2YWx1ZV0gPSBpO1xuICAgIHRpY2tzLnB1c2goe1xuICAgICAgdmFsdWUsXG4gICAgICBtYWpvcjogZmFsc2VcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gKGlsZW4gPT09IDAgfHwgIW1ham9yVW5pdCkgPyB0aWNrcyA6IHNldE1ham9yVGlja3Moc2NhbGUsIHRpY2tzLCBtYXAsIG1ham9yVW5pdCk7XG59XG5jbGFzcyBUaW1lU2NhbGUgZXh0ZW5kcyBTY2FsZSB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuX2NhY2hlID0ge1xuICAgICAgZGF0YTogW10sXG4gICAgICBsYWJlbHM6IFtdLFxuICAgICAgYWxsOiBbXVxuICAgIH07XG4gICAgdGhpcy5fdW5pdCA9ICdkYXknO1xuICAgIHRoaXMuX21ham9yVW5pdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9vZmZzZXRzID0ge307XG4gICAgdGhpcy5fbm9ybWFsaXplZCA9IGZhbHNlO1xuICAgIHRoaXMuX3BhcnNlT3B0cyA9IHVuZGVmaW5lZDtcbiAgfVxuICBpbml0KHNjYWxlT3B0cywgb3B0cykge1xuICAgIGNvbnN0IHRpbWUgPSBzY2FsZU9wdHMudGltZSB8fCAoc2NhbGVPcHRzLnRpbWUgPSB7fSk7XG4gICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXIgPSBuZXcgYWRhcHRlcnMuX2RhdGUoc2NhbGVPcHRzLmFkYXB0ZXJzLmRhdGUpO1xuICAgIGFkYXB0ZXIuaW5pdChvcHRzKTtcbiAgICBtZXJnZUlmKHRpbWUuZGlzcGxheUZvcm1hdHMsIGFkYXB0ZXIuZm9ybWF0cygpKTtcbiAgICB0aGlzLl9wYXJzZU9wdHMgPSB7XG4gICAgICBwYXJzZXI6IHRpbWUucGFyc2VyLFxuICAgICAgcm91bmQ6IHRpbWUucm91bmQsXG4gICAgICBpc29XZWVrZGF5OiB0aW1lLmlzb1dlZWtkYXlcbiAgICB9O1xuICAgIHN1cGVyLmluaXQoc2NhbGVPcHRzKTtcbiAgICB0aGlzLl9ub3JtYWxpemVkID0gb3B0cy5ub3JtYWxpemVkO1xuICB9XG4gIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICBpZiAocmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2UodGhpcywgcmF3KTtcbiAgfVxuICBiZWZvcmVMYXlvdXQoKSB7XG4gICAgc3VwZXIuYmVmb3JlTGF5b3V0KCk7XG4gICAgdGhpcy5fY2FjaGUgPSB7XG4gICAgICBkYXRhOiBbXSxcbiAgICAgIGxhYmVsczogW10sXG4gICAgICBhbGw6IFtdXG4gICAgfTtcbiAgfVxuICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXI7XG4gICAgY29uc3QgdW5pdCA9IG9wdGlvbnMudGltZS51bml0IHx8ICdkYXknO1xuICAgIGxldCB7bWluLCBtYXgsIG1pbkRlZmluZWQsIG1heERlZmluZWR9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgZnVuY3Rpb24gX2FwcGx5Qm91bmRzKGJvdW5kcykge1xuICAgICAgaWYgKCFtaW5EZWZpbmVkICYmICFpc05hTihib3VuZHMubWluKSkge1xuICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIGJvdW5kcy5taW4pO1xuICAgICAgfVxuICAgICAgaWYgKCFtYXhEZWZpbmVkICYmICFpc05hTihib3VuZHMubWF4KSkge1xuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGJvdW5kcy5tYXgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW1pbkRlZmluZWQgfHwgIW1heERlZmluZWQpIHtcbiAgICAgIF9hcHBseUJvdW5kcyh0aGlzLl9nZXRMYWJlbEJvdW5kcygpKTtcbiAgICAgIGlmIChvcHRpb25zLmJvdW5kcyAhPT0gJ3RpY2tzJyB8fCBvcHRpb25zLnRpY2tzLnNvdXJjZSAhPT0gJ2xhYmVscycpIHtcbiAgICAgICAgX2FwcGx5Qm91bmRzKHRoaXMuZ2V0TWluTWF4KGZhbHNlKSk7XG4gICAgICB9XG4gICAgfVxuICAgIG1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgJiYgIWlzTmFOKG1pbikgPyBtaW4gOiArYWRhcHRlci5zdGFydE9mKERhdGUubm93KCksIHVuaXQpO1xuICAgIG1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgJiYgIWlzTmFOKG1heCkgPyBtYXggOiArYWRhcHRlci5lbmRPZihEYXRlLm5vdygpLCB1bml0KSArIDE7XG4gICAgdGhpcy5taW4gPSBNYXRoLm1pbihtaW4sIG1heCAtIDEpO1xuICAgIHRoaXMubWF4ID0gTWF0aC5tYXgobWluICsgMSwgbWF4KTtcbiAgfVxuICBfZ2V0TGFiZWxCb3VuZHMoKSB7XG4gICAgY29uc3QgYXJyID0gdGhpcy5nZXRMYWJlbFRpbWVzdGFtcHMoKTtcbiAgICBsZXQgbWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIGxldCBtYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG4gICAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICAgIG1pbiA9IGFyclswXTtcbiAgICAgIG1heCA9IGFyclthcnIubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIHJldHVybiB7bWluLCBtYXh9O1xuICB9XG4gIGJ1aWxkVGlja3MoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0aW1lT3B0cyA9IG9wdGlvbnMudGltZTtcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG4gICAgY29uc3QgdGltZXN0YW1wcyA9IHRpY2tPcHRzLnNvdXJjZSA9PT0gJ2xhYmVscycgPyB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpIDogdGhpcy5fZ2VuZXJhdGUoKTtcbiAgICBpZiAob3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycgJiYgdGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWluID0gdGhpcy5fdXNlck1pbiB8fCB0aW1lc3RhbXBzWzBdO1xuICAgICAgdGhpcy5tYXggPSB0aGlzLl91c2VyTWF4IHx8IHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgY29uc3QgbWluID0gdGhpcy5taW47XG4gICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgY29uc3QgdGlja3MgPSBfZmlsdGVyQmV0d2Vlbih0aW1lc3RhbXBzLCBtaW4sIG1heCk7XG4gICAgdGhpcy5fdW5pdCA9IHRpbWVPcHRzLnVuaXQgfHwgKHRpY2tPcHRzLmF1dG9Ta2lwXG4gICAgICA/IGRldGVybWluZVVuaXRGb3JBdXRvVGlja3ModGltZU9wdHMubWluVW5pdCwgdGhpcy5taW4sIHRoaXMubWF4LCB0aGlzLl9nZXRMYWJlbENhcGFjaXR5KG1pbikpXG4gICAgICA6IGRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nKHRoaXMsIHRpY2tzLmxlbmd0aCwgdGltZU9wdHMubWluVW5pdCwgdGhpcy5taW4sIHRoaXMubWF4KSk7XG4gICAgdGhpcy5fbWFqb3JVbml0ID0gIXRpY2tPcHRzLm1ham9yLmVuYWJsZWQgfHwgdGhpcy5fdW5pdCA9PT0gJ3llYXInID8gdW5kZWZpbmVkXG4gICAgICA6IGRldGVybWluZU1ham9yVW5pdCh0aGlzLl91bml0KTtcbiAgICB0aGlzLmluaXRPZmZzZXRzKHRpbWVzdGFtcHMpO1xuICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgIHRpY2tzLnJldmVyc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRpY2tzRnJvbVRpbWVzdGFtcHModGhpcywgdGlja3MsIHRoaXMuX21ham9yVW5pdCk7XG4gIH1cbiAgYWZ0ZXJBdXRvU2tpcCgpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLm9mZnNldEFmdGVyQXV0b3NraXApIHtcbiAgICAgIHRoaXMuaW5pdE9mZnNldHModGhpcy50aWNrcy5tYXAodGljayA9PiArdGljay52YWx1ZSkpO1xuICAgIH1cbiAgfVxuICBpbml0T2Zmc2V0cyh0aW1lc3RhbXBzKSB7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgZW5kID0gMDtcbiAgICBsZXQgZmlyc3QsIGxhc3Q7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5vZmZzZXQgJiYgdGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgIGZpcnN0ID0gdGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodGltZXN0YW1wc1swXSk7XG4gICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgc3RhcnQgPSAxIC0gZmlyc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydCA9ICh0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzWzFdKSAtIGZpcnN0KSAvIDI7XG4gICAgICB9XG4gICAgICBsYXN0ID0gdGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdKTtcbiAgICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbmQgPSBsYXN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gKGxhc3QgLSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMl0pKSAvIDI7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGxpbWl0ID0gdGltZXN0YW1wcy5sZW5ndGggPCAzID8gMC41IDogMC4yNTtcbiAgICBzdGFydCA9IF9saW1pdFZhbHVlKHN0YXJ0LCAwLCBsaW1pdCk7XG4gICAgZW5kID0gX2xpbWl0VmFsdWUoZW5kLCAwLCBsaW1pdCk7XG4gICAgdGhpcy5fb2Zmc2V0cyA9IHtzdGFydCwgZW5kLCBmYWN0b3I6IDEgLyAoc3RhcnQgKyAxICsgZW5kKX07XG4gIH1cbiAgX2dlbmVyYXRlKCkge1xuICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyO1xuICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgIGNvbnN0IG1heCA9IHRoaXMubWF4O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdGltZU9wdHMgPSBvcHRpb25zLnRpbWU7XG4gICAgY29uc3QgbWlub3IgPSB0aW1lT3B0cy51bml0IHx8IGRldGVybWluZVVuaXRGb3JBdXRvVGlja3ModGltZU9wdHMubWluVW5pdCwgbWluLCBtYXgsIHRoaXMuX2dldExhYmVsQ2FwYWNpdHkobWluKSk7XG4gICAgY29uc3Qgc3RlcFNpemUgPSB2YWx1ZU9yRGVmYXVsdCh0aW1lT3B0cy5zdGVwU2l6ZSwgMSk7XG4gICAgY29uc3Qgd2Vla2RheSA9IG1pbm9yID09PSAnd2VlaycgPyB0aW1lT3B0cy5pc29XZWVrZGF5IDogZmFsc2U7XG4gICAgY29uc3QgaGFzV2Vla2RheSA9IGlzTnVtYmVyKHdlZWtkYXkpIHx8IHdlZWtkYXkgPT09IHRydWU7XG4gICAgY29uc3QgdGlja3MgPSB7fTtcbiAgICBsZXQgZmlyc3QgPSBtaW47XG4gICAgbGV0IHRpbWUsIGNvdW50O1xuICAgIGlmIChoYXNXZWVrZGF5KSB7XG4gICAgICBmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YoZmlyc3QsICdpc29XZWVrJywgd2Vla2RheSk7XG4gICAgfVxuICAgIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgaGFzV2Vla2RheSA/ICdkYXknIDogbWlub3IpO1xuICAgIGlmIChhZGFwdGVyLmRpZmYobWF4LCBtaW4sIG1pbm9yKSA+IDEwMDAwMCAqIHN0ZXBTaXplKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWluICsgJyBhbmQgJyArIG1heCArICcgYXJlIHRvbyBmYXIgYXBhcnQgd2l0aCBzdGVwU2l6ZSBvZiAnICsgc3RlcFNpemUgKyAnICcgKyBtaW5vcik7XG4gICAgfVxuICAgIGNvbnN0IHRpbWVzdGFtcHMgPSBvcHRpb25zLnRpY2tzLnNvdXJjZSA9PT0gJ2RhdGEnICYmIHRoaXMuZ2V0RGF0YVRpbWVzdGFtcHMoKTtcbiAgICBmb3IgKHRpbWUgPSBmaXJzdCwgY291bnQgPSAwOyB0aW1lIDwgbWF4OyB0aW1lID0gK2FkYXB0ZXIuYWRkKHRpbWUsIHN0ZXBTaXplLCBtaW5vciksIGNvdW50KyspIHtcbiAgICAgIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpO1xuICAgIH1cbiAgICBpZiAodGltZSA9PT0gbWF4IHx8IG9wdGlvbnMuYm91bmRzID09PSAndGlja3MnIHx8IGNvdW50ID09PSAxKSB7XG4gICAgICBhZGRUaWNrKHRpY2tzLCB0aW1lLCB0aW1lc3RhbXBzKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRpY2tzKS5zb3J0KChhLCBiKSA9PiBhIC0gYikubWFwKHggPT4gK3gpO1xuICB9XG4gIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlcjtcbiAgICBjb25zdCB0aW1lT3B0cyA9IHRoaXMub3B0aW9ucy50aW1lO1xuICAgIGlmICh0aW1lT3B0cy50b29sdGlwRm9ybWF0KSB7XG4gICAgICByZXR1cm4gYWRhcHRlci5mb3JtYXQodmFsdWUsIHRpbWVPcHRzLnRvb2x0aXBGb3JtYXQpO1xuICAgIH1cbiAgICByZXR1cm4gYWRhcHRlci5mb3JtYXQodmFsdWUsIHRpbWVPcHRzLmRpc3BsYXlGb3JtYXRzLmRhdGV0aW1lKTtcbiAgfVxuICBfdGlja0Zvcm1hdEZ1bmN0aW9uKHRpbWUsIGluZGV4LCB0aWNrcywgZm9ybWF0KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBmb3JtYXRzID0gb3B0aW9ucy50aW1lLmRpc3BsYXlGb3JtYXRzO1xuICAgIGNvbnN0IHVuaXQgPSB0aGlzLl91bml0O1xuICAgIGNvbnN0IG1ham9yVW5pdCA9IHRoaXMuX21ham9yVW5pdDtcbiAgICBjb25zdCBtaW5vckZvcm1hdCA9IHVuaXQgJiYgZm9ybWF0c1t1bml0XTtcbiAgICBjb25zdCBtYWpvckZvcm1hdCA9IG1ham9yVW5pdCAmJiBmb3JtYXRzW21ham9yVW5pdF07XG4gICAgY29uc3QgdGljayA9IHRpY2tzW2luZGV4XTtcbiAgICBjb25zdCBtYWpvciA9IG1ham9yVW5pdCAmJiBtYWpvckZvcm1hdCAmJiB0aWNrICYmIHRpY2subWFqb3I7XG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLl9hZGFwdGVyLmZvcm1hdCh0aW1lLCBmb3JtYXQgfHwgKG1ham9yID8gbWFqb3JGb3JtYXQgOiBtaW5vckZvcm1hdCkpO1xuICAgIGNvbnN0IGZvcm1hdHRlciA9IG9wdGlvbnMudGlja3MuY2FsbGJhY2s7XG4gICAgcmV0dXJuIGZvcm1hdHRlciA/IGNhbGxiYWNrKGZvcm1hdHRlciwgW2xhYmVsLCBpbmRleCwgdGlja3NdLCB0aGlzKSA6IGxhYmVsO1xuICB9XG4gIGdlbmVyYXRlVGlja0xhYmVscyh0aWNrcykge1xuICAgIGxldCBpLCBpbGVuLCB0aWNrO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgIHRpY2subGFiZWwgPSB0aGlzLl90aWNrRm9ybWF0RnVuY3Rpb24odGljay52YWx1ZSwgaSwgdGlja3MpO1xuICAgIH1cbiAgfVxuICBnZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBOYU4gOiAodmFsdWUgLSB0aGlzLm1pbikgLyAodGhpcy5tYXggLSB0aGlzLm1pbik7XG4gIH1cbiAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvckRlY2ltYWwoKG9mZnNldHMuc3RhcnQgKyBwb3MpICogb2Zmc2V0cy5mYWN0b3IpO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICBjb25zdCBvZmZzZXRzID0gdGhpcy5fb2Zmc2V0cztcbiAgICBjb25zdCBwb3MgPSB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgLyBvZmZzZXRzLmZhY3RvciAtIG9mZnNldHMuZW5kO1xuICAgIHJldHVybiB0aGlzLm1pbiArIHBvcyAqICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgfVxuICBfZ2V0TGFiZWxTaXplKGxhYmVsKSB7XG4gICAgY29uc3QgdGlja3NPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgIGNvbnN0IHRpY2tMYWJlbFdpZHRoID0gdGhpcy5jdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuICAgIGNvbnN0IGFuZ2xlID0gdG9SYWRpYW5zKHRoaXMuaXNIb3Jpem9udGFsKCkgPyB0aWNrc09wdHMubWF4Um90YXRpb24gOiB0aWNrc09wdHMubWluUm90YXRpb24pO1xuICAgIGNvbnN0IGNvc1JvdGF0aW9uID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgIGNvbnN0IHNpblJvdGF0aW9uID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgIGNvbnN0IHRpY2tGb250U2l6ZSA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoMCkuc2l6ZTtcbiAgICByZXR1cm4ge1xuICAgICAgdzogKHRpY2tMYWJlbFdpZHRoICogY29zUm90YXRpb24pICsgKHRpY2tGb250U2l6ZSAqIHNpblJvdGF0aW9uKSxcbiAgICAgIGg6ICh0aWNrTGFiZWxXaWR0aCAqIHNpblJvdGF0aW9uKSArICh0aWNrRm9udFNpemUgKiBjb3NSb3RhdGlvbilcbiAgICB9O1xuICB9XG4gIF9nZXRMYWJlbENhcGFjaXR5KGV4YW1wbGVUaW1lKSB7XG4gICAgY29uc3QgdGltZU9wdHMgPSB0aGlzLm9wdGlvbnMudGltZTtcbiAgICBjb25zdCBkaXNwbGF5Rm9ybWF0cyA9IHRpbWVPcHRzLmRpc3BsYXlGb3JtYXRzO1xuICAgIGNvbnN0IGZvcm1hdCA9IGRpc3BsYXlGb3JtYXRzW3RpbWVPcHRzLnVuaXRdIHx8IGRpc3BsYXlGb3JtYXRzLm1pbGxpc2Vjb25kO1xuICAgIGNvbnN0IGV4YW1wbGVMYWJlbCA9IHRoaXMuX3RpY2tGb3JtYXRGdW5jdGlvbihleGFtcGxlVGltZSwgMCwgdGlja3NGcm9tVGltZXN0YW1wcyh0aGlzLCBbZXhhbXBsZVRpbWVdLCB0aGlzLl9tYWpvclVuaXQpLCBmb3JtYXQpO1xuICAgIGNvbnN0IHNpemUgPSB0aGlzLl9nZXRMYWJlbFNpemUoZXhhbXBsZUxhYmVsKTtcbiAgICBjb25zdCBjYXBhY2l0eSA9IE1hdGguZmxvb3IodGhpcy5pc0hvcml6b250YWwoKSA/IHRoaXMud2lkdGggLyBzaXplLncgOiB0aGlzLmhlaWdodCAvIHNpemUuaCkgLSAxO1xuICAgIHJldHVybiBjYXBhY2l0eSA+IDAgPyBjYXBhY2l0eSA6IDE7XG4gIH1cbiAgZ2V0RGF0YVRpbWVzdGFtcHMoKSB7XG4gICAgbGV0IHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5kYXRhIHx8IFtdO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gICAgfVxuICAgIGNvbnN0IG1ldGFzID0gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpO1xuICAgIGlmICh0aGlzLl9ub3JtYWxpemVkICYmIG1ldGFzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuICh0aGlzLl9jYWNoZS5kYXRhID0gbWV0YXNbMF0uY29udHJvbGxlci5nZXRBbGxQYXJzZWRWYWx1ZXModGhpcykpO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aW1lc3RhbXBzID0gdGltZXN0YW1wcy5jb25jYXQobWV0YXNbaV0uY29udHJvbGxlci5nZXRBbGxQYXJzZWRWYWx1ZXModGhpcykpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMuX2NhY2hlLmRhdGEgPSB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKSk7XG4gIH1cbiAgZ2V0TGFiZWxUaW1lc3RhbXBzKCkge1xuICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5sYWJlbHMgfHwgW107XG4gICAgbGV0IGksIGlsZW47XG4gICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICB9XG4gICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbGFiZWxzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdGltZXN0YW1wcy5wdXNoKHBhcnNlKHRoaXMsIGxhYmVsc1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMuX2NhY2hlLmxhYmVscyA9IHRoaXMuX25vcm1hbGl6ZWQgPyB0aW1lc3RhbXBzIDogdGhpcy5ub3JtYWxpemUodGltZXN0YW1wcykpO1xuICB9XG4gIG5vcm1hbGl6ZSh2YWx1ZXMpIHtcbiAgICByZXR1cm4gX2FycmF5VW5pcXVlKHZhbHVlcy5zb3J0KHNvcnRlcikpO1xuICB9XG59XG5UaW1lU2NhbGUuaWQgPSAndGltZSc7XG5UaW1lU2NhbGUuZGVmYXVsdHMgPSB7XG4gIGJvdW5kczogJ2RhdGEnLFxuICBhZGFwdGVyczoge30sXG4gIHRpbWU6IHtcbiAgICBwYXJzZXI6IGZhbHNlLFxuICAgIHVuaXQ6IGZhbHNlLFxuICAgIHJvdW5kOiBmYWxzZSxcbiAgICBpc29XZWVrZGF5OiBmYWxzZSxcbiAgICBtaW5Vbml0OiAnbWlsbGlzZWNvbmQnLFxuICAgIGRpc3BsYXlGb3JtYXRzOiB7fVxuICB9LFxuICB0aWNrczoge1xuICAgIHNvdXJjZTogJ2F1dG8nLFxuICAgIG1ham9yOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGUodGFibGUsIHZhbCwgcmV2ZXJzZSkge1xuICBsZXQgbG8gPSAwO1xuICBsZXQgaGkgPSB0YWJsZS5sZW5ndGggLSAxO1xuICBsZXQgcHJldlNvdXJjZSwgbmV4dFNvdXJjZSwgcHJldlRhcmdldCwgbmV4dFRhcmdldDtcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBpZiAodmFsID49IHRhYmxlW2xvXS5wb3MgJiYgdmFsIDw9IHRhYmxlW2hpXS5wb3MpIHtcbiAgICAgICh7bG8sIGhpfSA9IF9sb29rdXBCeUtleSh0YWJsZSwgJ3BvcycsIHZhbCkpO1xuICAgIH1cbiAgICAoe3BvczogcHJldlNvdXJjZSwgdGltZTogcHJldlRhcmdldH0gPSB0YWJsZVtsb10pO1xuICAgICh7cG9zOiBuZXh0U291cmNlLCB0aW1lOiBuZXh0VGFyZ2V0fSA9IHRhYmxlW2hpXSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbCA+PSB0YWJsZVtsb10udGltZSAmJiB2YWwgPD0gdGFibGVbaGldLnRpbWUpIHtcbiAgICAgICh7bG8sIGhpfSA9IF9sb29rdXBCeUtleSh0YWJsZSwgJ3RpbWUnLCB2YWwpKTtcbiAgICB9XG4gICAgKHt0aW1lOiBwcmV2U291cmNlLCBwb3M6IHByZXZUYXJnZXR9ID0gdGFibGVbbG9dKTtcbiAgICAoe3RpbWU6IG5leHRTb3VyY2UsIHBvczogbmV4dFRhcmdldH0gPSB0YWJsZVtoaV0pO1xuICB9XG4gIGNvbnN0IHNwYW4gPSBuZXh0U291cmNlIC0gcHJldlNvdXJjZTtcbiAgcmV0dXJuIHNwYW4gPyBwcmV2VGFyZ2V0ICsgKG5leHRUYXJnZXQgLSBwcmV2VGFyZ2V0KSAqICh2YWwgLSBwcmV2U291cmNlKSAvIHNwYW4gOiBwcmV2VGFyZ2V0O1xufVxuY2xhc3MgVGltZVNlcmllc1NjYWxlIGV4dGVuZHMgVGltZVNjYWxlIHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5fdGFibGUgPSBbXTtcbiAgICB0aGlzLl9taW5Qb3MgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdGFibGVSYW5nZSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpbml0T2Zmc2V0cygpIHtcbiAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5fZ2V0VGltZXN0YW1wc0ZvclRhYmxlKCk7XG4gICAgY29uc3QgdGFibGUgPSB0aGlzLl90YWJsZSA9IHRoaXMuYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzKTtcbiAgICB0aGlzLl9taW5Qb3MgPSBpbnRlcnBvbGF0ZSh0YWJsZSwgdGhpcy5taW4pO1xuICAgIHRoaXMuX3RhYmxlUmFuZ2UgPSBpbnRlcnBvbGF0ZSh0YWJsZSwgdGhpcy5tYXgpIC0gdGhpcy5fbWluUG9zO1xuICAgIHN1cGVyLmluaXRPZmZzZXRzKHRpbWVzdGFtcHMpO1xuICB9XG4gIGJ1aWxkTG9va3VwVGFibGUodGltZXN0YW1wcykge1xuICAgIGNvbnN0IHttaW4sIG1heH0gPSB0aGlzO1xuICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgY29uc3QgdGFibGUgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgcHJldiwgY3VyciwgbmV4dDtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gdGltZXN0YW1wcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGN1cnIgPSB0aW1lc3RhbXBzW2ldO1xuICAgICAgaWYgKGN1cnIgPj0gbWluICYmIGN1cnIgPD0gbWF4KSB7XG4gICAgICAgIGl0ZW1zLnB1c2goY3Vycik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpdGVtcy5sZW5ndGggPCAyKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB7dGltZTogbWluLCBwb3M6IDB9LFxuICAgICAgICB7dGltZTogbWF4LCBwb3M6IDF9XG4gICAgICBdO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBuZXh0ID0gaXRlbXNbaSArIDFdO1xuICAgICAgcHJldiA9IGl0ZW1zW2kgLSAxXTtcbiAgICAgIGN1cnIgPSBpdGVtc1tpXTtcbiAgICAgIGlmIChNYXRoLnJvdW5kKChuZXh0ICsgcHJldikgLyAyKSAhPT0gY3Vycikge1xuICAgICAgICB0YWJsZS5wdXNoKHt0aW1lOiBjdXJyLCBwb3M6IGkgLyAoaWxlbiAtIDEpfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YWJsZTtcbiAgfVxuICBfZ2V0VGltZXN0YW1wc0ZvclRhYmxlKCkge1xuICAgIGxldCB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUuYWxsIHx8IFtdO1xuICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGFUaW1lc3RhbXBzKCk7XG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpO1xuICAgIGlmIChkYXRhLmxlbmd0aCAmJiBsYWJlbC5sZW5ndGgpIHtcbiAgICAgIHRpbWVzdGFtcHMgPSB0aGlzLm5vcm1hbGl6ZShkYXRhLmNvbmNhdChsYWJlbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aW1lc3RhbXBzID0gZGF0YS5sZW5ndGggPyBkYXRhIDogbGFiZWw7XG4gICAgfVxuICAgIHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5hbGwgPSB0aW1lc3RhbXBzO1xuICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICB9XG4gIGdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiAoaW50ZXJwb2xhdGUodGhpcy5fdGFibGUsIHZhbHVlKSAtIHRoaXMuX21pblBvcykgLyB0aGlzLl90YWJsZVJhbmdlO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICBjb25zdCBvZmZzZXRzID0gdGhpcy5fb2Zmc2V0cztcbiAgICBjb25zdCBkZWNpbWFsID0gdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpIC8gb2Zmc2V0cy5mYWN0b3IgLSBvZmZzZXRzLmVuZDtcbiAgICByZXR1cm4gaW50ZXJwb2xhdGUodGhpcy5fdGFibGUsIGRlY2ltYWwgKiB0aGlzLl90YWJsZVJhbmdlICsgdGhpcy5fbWluUG9zLCB0cnVlKTtcbiAgfVxufVxuVGltZVNlcmllc1NjYWxlLmlkID0gJ3RpbWVzZXJpZXMnO1xuVGltZVNlcmllc1NjYWxlLmRlZmF1bHRzID0gVGltZVNjYWxlLmRlZmF1bHRzO1xuXG52YXIgc2NhbGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQ2F0ZWdvcnlTY2FsZTogQ2F0ZWdvcnlTY2FsZSxcbkxpbmVhclNjYWxlOiBMaW5lYXJTY2FsZSxcbkxvZ2FyaXRobWljU2NhbGU6IExvZ2FyaXRobWljU2NhbGUsXG5SYWRpYWxMaW5lYXJTY2FsZTogUmFkaWFsTGluZWFyU2NhbGUsXG5UaW1lU2NhbGU6IFRpbWVTY2FsZSxcblRpbWVTZXJpZXNTY2FsZTogVGltZVNlcmllc1NjYWxlXG59KTtcblxuY29uc3QgcmVnaXN0ZXJhYmxlcyA9IFtcbiAgY29udHJvbGxlcnMsXG4gIGVsZW1lbnRzLFxuICBwbHVnaW5zLFxuICBzY2FsZXMsXG5dO1xuXG5leHBvcnQgeyBBbmltYXRpb24sIEFuaW1hdGlvbnMsIEFyY0VsZW1lbnQsIEJhckNvbnRyb2xsZXIsIEJhckVsZW1lbnQsIEJhc2VQbGF0Zm9ybSwgQmFzaWNQbGF0Zm9ybSwgQnViYmxlQ29udHJvbGxlciwgQ2F0ZWdvcnlTY2FsZSwgQ2hhcnQsIERhdGFzZXRDb250cm9sbGVyLCBwbHVnaW5fZGVjaW1hdGlvbiBhcyBEZWNpbWF0aW9uLCBEb21QbGF0Zm9ybSwgRG91Z2hudXRDb250cm9sbGVyLCBFbGVtZW50LCBpbmRleCBhcyBGaWxsZXIsIEludGVyYWN0aW9uLCBwbHVnaW5fbGVnZW5kIGFzIExlZ2VuZCwgTGluZUNvbnRyb2xsZXIsIExpbmVFbGVtZW50LCBMaW5lYXJTY2FsZSwgTG9nYXJpdGhtaWNTY2FsZSwgUGllQ29udHJvbGxlciwgUG9pbnRFbGVtZW50LCBQb2xhckFyZWFDb250cm9sbGVyLCBSYWRhckNvbnRyb2xsZXIsIFJhZGlhbExpbmVhclNjYWxlLCBTY2FsZSwgU2NhdHRlckNvbnRyb2xsZXIsIHBsdWdpbl9zdWJ0aXRsZSBhcyBTdWJUaXRsZSwgVGlja3MsIFRpbWVTY2FsZSwgVGltZVNlcmllc1NjYWxlLCBwbHVnaW5fdGl0bGUgYXMgVGl0bGUsIHBsdWdpbl90b29sdGlwIGFzIFRvb2x0aXAsIGFkYXB0ZXJzIGFzIF9hZGFwdGVycywgX2RldGVjdFBsYXRmb3JtLCBhbmltYXRvciwgY29udHJvbGxlcnMsIGVsZW1lbnRzLCBsYXlvdXRzLCBwbHVnaW5zLCByZWdpc3RlcmFibGVzLCByZWdpc3RyeSwgc2NhbGVzIH07XG4iLCIvKiFcbiAqIENoYXJ0LmpzIHYzLjkuMVxuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDIyIENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuY29uc3QgdWlkID0gKGZ1bmN0aW9uKCkge1xuICBsZXQgaWQgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGlkKys7XG4gIH07XG59KCkpO1xuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbn1cbmZ1bmN0aW9uIGlzQXJyYXkodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHR5cGUuc2xpY2UoMCwgNykgPT09ICdbb2JqZWN0JyAmJiB0eXBlLnNsaWNlKC02KSA9PT0gJ0FycmF5XScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5jb25zdCBpc051bWJlckZpbml0ZSA9ICh2YWx1ZSkgPT4gKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIpICYmIGlzRmluaXRlKCt2YWx1ZSk7XG5mdW5jdGlvbiBmaW5pdGVPckRlZmF1bHQodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4gaXNOdW1iZXJGaW5pdGUodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG5mdW5jdGlvbiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG59XG5jb25zdCB0b1BlcmNlbnRhZ2UgPSAodmFsdWUsIGRpbWVuc2lvbikgPT5cbiAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnJScpID9cbiAgICBwYXJzZUZsb2F0KHZhbHVlKSAvIDEwMFxuICAgIDogdmFsdWUgLyBkaW1lbnNpb247XG5jb25zdCB0b0RpbWVuc2lvbiA9ICh2YWx1ZSwgZGltZW5zaW9uKSA9PlxuICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmVuZHNXaXRoKCclJykgP1xuICAgIHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwICogZGltZW5zaW9uXG4gICAgOiArdmFsdWU7XG5mdW5jdGlvbiBjYWxsYmFjayhmbiwgYXJncywgdGhpc0FyZykge1xuICBpZiAoZm4gJiYgdHlwZW9mIGZuLmNhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVhY2gobG9vcGFibGUsIGZuLCB0aGlzQXJnLCByZXZlcnNlKSB7XG4gIGxldCBpLCBsZW4sIGtleXM7XG4gIGlmIChpc0FycmF5KGxvb3BhYmxlKSkge1xuICAgIGxlbiA9IGxvb3BhYmxlLmxlbmd0aDtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2ldLCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobG9vcGFibGUpKSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKGxvb3BhYmxlKTtcbiAgICBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVba2V5c1tpXV0sIGtleXNbaV0pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gX2VsZW1lbnRzRXF1YWwoYTAsIGExKSB7XG4gIGxldCBpLCBpbGVuLCB2MCwgdjE7XG4gIGlmICghYTAgfHwgIWExIHx8IGEwLmxlbmd0aCAhPT0gYTEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBhMC5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICB2MCA9IGEwW2ldO1xuICAgIHYxID0gYTFbaV07XG4gICAgaWYgKHYwLmRhdGFzZXRJbmRleCAhPT0gdjEuZGF0YXNldEluZGV4IHx8IHYwLmluZGV4ICE9PSB2MS5pbmRleCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGNsb25lJDEoc291cmNlKSB7XG4gIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICByZXR1cm4gc291cmNlLm1hcChjbG9uZSQxKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgIGNvbnN0IHRhcmdldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgY29uc3Qga2xlbiA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBrID0gMDtcbiAgICBmb3IgKDsgayA8IGtsZW47ICsraykge1xuICAgICAgdGFyZ2V0W2tleXNba11dID0gY2xvbmUkMShzb3VyY2Vba2V5c1trXV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIHJldHVybiBzb3VyY2U7XG59XG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xuICByZXR1cm4gWydfX3Byb3RvX18nLCAncHJvdG90eXBlJywgJ2NvbnN0cnVjdG9yJ10uaW5kZXhPZihrZXkpID09PSAtMTtcbn1cbmZ1bmN0aW9uIF9tZXJnZXIoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICBpZiAoIWlzVmFsaWRLZXkoa2V5KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgaWYgKGlzT2JqZWN0KHR2YWwpICYmIGlzT2JqZWN0KHN2YWwpKSB7XG4gICAgbWVyZ2UodHZhbCwgc3ZhbCwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0W2tleV0gPSBjbG9uZSQxKHN2YWwpO1xuICB9XG59XG5mdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICBjb25zdCBzb3VyY2VzID0gaXNBcnJheShzb3VyY2UpID8gc291cmNlIDogW3NvdXJjZV07XG4gIGNvbnN0IGlsZW4gPSBzb3VyY2VzLmxlbmd0aDtcbiAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgbWVyZ2VyID0gb3B0aW9ucy5tZXJnZXIgfHwgX21lcmdlcjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgIGlmICghaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgIGZvciAobGV0IGsgPSAwLCBrbGVuID0ga2V5cy5sZW5ndGg7IGsgPCBrbGVuOyArK2spIHtcbiAgICAgIG1lcmdlcihrZXlzW2tdLCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBtZXJnZUlmKHRhcmdldCwgc291cmNlKSB7XG4gIHJldHVybiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwge21lcmdlcjogX21lcmdlcklmfSk7XG59XG5mdW5jdGlvbiBfbWVyZ2VySWYoa2V5LCB0YXJnZXQsIHNvdXJjZSkge1xuICBpZiAoIWlzVmFsaWRLZXkoa2V5KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgaWYgKGlzT2JqZWN0KHR2YWwpICYmIGlzT2JqZWN0KHN2YWwpKSB7XG4gICAgbWVyZ2VJZih0dmFsLCBzdmFsKTtcbiAgfSBlbHNlIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KSkge1xuICAgIHRhcmdldFtrZXldID0gY2xvbmUkMShzdmFsKTtcbiAgfVxufVxuZnVuY3Rpb24gX2RlcHJlY2F0ZWQoc2NvcGUsIHZhbHVlLCBwcmV2aW91cywgY3VycmVudCkge1xuICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybihzY29wZSArICc6IFwiJyArIHByZXZpb3VzICtcblx0XHRcdCdcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiJyArIGN1cnJlbnQgKyAnXCIgaW5zdGVhZCcpO1xuICB9XG59XG5jb25zdCBrZXlSZXNvbHZlcnMgPSB7XG4gICcnOiB2ID0+IHYsXG4gIHg6IG8gPT4gby54LFxuICB5OiBvID0+IG8ueVxufTtcbmZ1bmN0aW9uIHJlc29sdmVPYmplY3RLZXkob2JqLCBrZXkpIHtcbiAgY29uc3QgcmVzb2x2ZXIgPSBrZXlSZXNvbHZlcnNba2V5XSB8fCAoa2V5UmVzb2x2ZXJzW2tleV0gPSBfZ2V0S2V5UmVzb2x2ZXIoa2V5KSk7XG4gIHJldHVybiByZXNvbHZlcihvYmopO1xufVxuZnVuY3Rpb24gX2dldEtleVJlc29sdmVyKGtleSkge1xuICBjb25zdCBrZXlzID0gX3NwbGl0S2V5KGtleSk7XG4gIHJldHVybiBvYmogPT4ge1xuICAgIGZvciAoY29uc3QgayBvZiBrZXlzKSB7XG4gICAgICBpZiAoayA9PT0gJycpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBvYmogPSBvYmogJiYgb2JqW2tdO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xufVxuZnVuY3Rpb24gX3NwbGl0S2V5KGtleSkge1xuICBjb25zdCBwYXJ0cyA9IGtleS5zcGxpdCgnLicpO1xuICBjb25zdCBrZXlzID0gW107XG4gIGxldCB0bXAgPSAnJztcbiAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgdG1wICs9IHBhcnQ7XG4gICAgaWYgKHRtcC5lbmRzV2l0aCgnXFxcXCcpKSB7XG4gICAgICB0bXAgPSB0bXAuc2xpY2UoMCwgLTEpICsgJy4nO1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzLnB1c2godG1wKTtcbiAgICAgIHRtcCA9ICcnO1xuICAgIH1cbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIF9jYXBpdGFsaXplKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxuY29uc3QgZGVmaW5lZCA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJztcbmNvbnN0IGlzRnVuY3Rpb24gPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IHNldHNFcXVhbCA9IChhLCBiKSA9PiB7XG4gIGlmIChhLnNpemUgIT09IGIuc2l6ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGNvbnN0IGl0ZW0gb2YgYSkge1xuICAgIGlmICghYi5oYXMoaXRlbSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuZnVuY3Rpb24gX2lzQ2xpY2tFdmVudChlKSB7XG4gIHJldHVybiBlLnR5cGUgPT09ICdtb3VzZXVwJyB8fCBlLnR5cGUgPT09ICdjbGljaycgfHwgZS50eXBlID09PSAnY29udGV4dG1lbnUnO1xufVxuXG5jb25zdCBQSSA9IE1hdGguUEk7XG5jb25zdCBUQVUgPSAyICogUEk7XG5jb25zdCBQSVRBVSA9IFRBVSArIFBJO1xuY29uc3QgSU5GSU5JVFkgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5jb25zdCBSQURfUEVSX0RFRyA9IFBJIC8gMTgwO1xuY29uc3QgSEFMRl9QSSA9IFBJIC8gMjtcbmNvbnN0IFFVQVJURVJfUEkgPSBQSSAvIDQ7XG5jb25zdCBUV09fVEhJUkRTX1BJID0gUEkgKiAyIC8gMztcbmNvbnN0IGxvZzEwID0gTWF0aC5sb2cxMDtcbmNvbnN0IHNpZ24gPSBNYXRoLnNpZ247XG5mdW5jdGlvbiBuaWNlTnVtKHJhbmdlKSB7XG4gIGNvbnN0IHJvdW5kZWRSYW5nZSA9IE1hdGgucm91bmQocmFuZ2UpO1xuICByYW5nZSA9IGFsbW9zdEVxdWFscyhyYW5nZSwgcm91bmRlZFJhbmdlLCByYW5nZSAvIDEwMDApID8gcm91bmRlZFJhbmdlIDogcmFuZ2U7XG4gIGNvbnN0IG5pY2VSYW5nZSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGxvZzEwKHJhbmdlKSkpO1xuICBjb25zdCBmcmFjdGlvbiA9IHJhbmdlIC8gbmljZVJhbmdlO1xuICBjb25zdCBuaWNlRnJhY3Rpb24gPSBmcmFjdGlvbiA8PSAxID8gMSA6IGZyYWN0aW9uIDw9IDIgPyAyIDogZnJhY3Rpb24gPD0gNSA/IDUgOiAxMDtcbiAgcmV0dXJuIG5pY2VGcmFjdGlvbiAqIG5pY2VSYW5nZTtcbn1cbmZ1bmN0aW9uIF9mYWN0b3JpemUodmFsdWUpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IHNxcnQgPSBNYXRoLnNxcnQodmFsdWUpO1xuICBsZXQgaTtcbiAgZm9yIChpID0gMTsgaSA8IHNxcnQ7IGkrKykge1xuICAgIGlmICh2YWx1ZSAlIGkgPT09IDApIHtcbiAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgcmVzdWx0LnB1c2godmFsdWUgLyBpKTtcbiAgICB9XG4gIH1cbiAgaWYgKHNxcnQgPT09IChzcXJ0IHwgMCkpIHtcbiAgICByZXN1bHQucHVzaChzcXJ0KTtcbiAgfVxuICByZXN1bHQuc29ydCgoYSwgYikgPT4gYSAtIGIpLnBvcCgpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gaXNOdW1iZXIobikge1xuICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuZnVuY3Rpb24gYWxtb3N0RXF1YWxzKHgsIHksIGVwc2lsb24pIHtcbiAgcmV0dXJuIE1hdGguYWJzKHggLSB5KSA8IGVwc2lsb247XG59XG5mdW5jdGlvbiBhbG1vc3RXaG9sZSh4LCBlcHNpbG9uKSB7XG4gIGNvbnN0IHJvdW5kZWQgPSBNYXRoLnJvdW5kKHgpO1xuICByZXR1cm4gKChyb3VuZGVkIC0gZXBzaWxvbikgPD0geCkgJiYgKChyb3VuZGVkICsgZXBzaWxvbikgPj0geCk7XG59XG5mdW5jdGlvbiBfc2V0TWluQW5kTWF4QnlLZXkoYXJyYXksIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgdmFsdWUgPSBhcnJheVtpXVtwcm9wZXJ0eV07XG4gICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgIHRhcmdldC5taW4gPSBNYXRoLm1pbih0YXJnZXQubWluLCB2YWx1ZSk7XG4gICAgICB0YXJnZXQubWF4ID0gTWF0aC5tYXgodGFyZ2V0Lm1heCwgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gdG9SYWRpYW5zKGRlZ3JlZXMpIHtcbiAgcmV0dXJuIGRlZ3JlZXMgKiAoUEkgLyAxODApO1xufVxuZnVuY3Rpb24gdG9EZWdyZWVzKHJhZGlhbnMpIHtcbiAgcmV0dXJuIHJhZGlhbnMgKiAoMTgwIC8gUEkpO1xufVxuZnVuY3Rpb24gX2RlY2ltYWxQbGFjZXMoeCkge1xuICBpZiAoIWlzTnVtYmVyRmluaXRlKHgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBlID0gMTtcbiAgbGV0IHAgPSAwO1xuICB3aGlsZSAoTWF0aC5yb3VuZCh4ICogZSkgLyBlICE9PSB4KSB7XG4gICAgZSAqPSAxMDtcbiAgICBwKys7XG4gIH1cbiAgcmV0dXJuIHA7XG59XG5mdW5jdGlvbiBnZXRBbmdsZUZyb21Qb2ludChjZW50cmVQb2ludCwgYW5nbGVQb2ludCkge1xuICBjb25zdCBkaXN0YW5jZUZyb21YQ2VudGVyID0gYW5nbGVQb2ludC54IC0gY2VudHJlUG9pbnQueDtcbiAgY29uc3QgZGlzdGFuY2VGcm9tWUNlbnRlciA9IGFuZ2xlUG9pbnQueSAtIGNlbnRyZVBvaW50Lnk7XG4gIGNvbnN0IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciA9IE1hdGguc3FydChkaXN0YW5jZUZyb21YQ2VudGVyICogZGlzdGFuY2VGcm9tWENlbnRlciArIGRpc3RhbmNlRnJvbVlDZW50ZXIgKiBkaXN0YW5jZUZyb21ZQ2VudGVyKTtcbiAgbGV0IGFuZ2xlID0gTWF0aC5hdGFuMihkaXN0YW5jZUZyb21ZQ2VudGVyLCBkaXN0YW5jZUZyb21YQ2VudGVyKTtcbiAgaWYgKGFuZ2xlIDwgKC0wLjUgKiBQSSkpIHtcbiAgICBhbmdsZSArPSBUQVU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBhbmdsZSxcbiAgICBkaXN0YW5jZTogcmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyXG4gIH07XG59XG5mdW5jdGlvbiBkaXN0YW5jZUJldHdlZW5Qb2ludHMocHQxLCBwdDIpIHtcbiAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhwdDIueCAtIHB0MS54LCAyKSArIE1hdGgucG93KHB0Mi55IC0gcHQxLnksIDIpKTtcbn1cbmZ1bmN0aW9uIF9hbmdsZURpZmYoYSwgYikge1xuICByZXR1cm4gKGEgLSBiICsgUElUQVUpICUgVEFVIC0gUEk7XG59XG5mdW5jdGlvbiBfbm9ybWFsaXplQW5nbGUoYSkge1xuICByZXR1cm4gKGEgJSBUQVUgKyBUQVUpICUgVEFVO1xufVxuZnVuY3Rpb24gX2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnQsIGVuZCwgc2FtZUFuZ2xlSXNGdWxsQ2lyY2xlKSB7XG4gIGNvbnN0IGEgPSBfbm9ybWFsaXplQW5nbGUoYW5nbGUpO1xuICBjb25zdCBzID0gX25vcm1hbGl6ZUFuZ2xlKHN0YXJ0KTtcbiAgY29uc3QgZSA9IF9ub3JtYWxpemVBbmdsZShlbmQpO1xuICBjb25zdCBhbmdsZVRvU3RhcnQgPSBfbm9ybWFsaXplQW5nbGUocyAtIGEpO1xuICBjb25zdCBhbmdsZVRvRW5kID0gX25vcm1hbGl6ZUFuZ2xlKGUgLSBhKTtcbiAgY29uc3Qgc3RhcnRUb0FuZ2xlID0gX25vcm1hbGl6ZUFuZ2xlKGEgLSBzKTtcbiAgY29uc3QgZW5kVG9BbmdsZSA9IF9ub3JtYWxpemVBbmdsZShhIC0gZSk7XG4gIHJldHVybiBhID09PSBzIHx8IGEgPT09IGUgfHwgKHNhbWVBbmdsZUlzRnVsbENpcmNsZSAmJiBzID09PSBlKVxuICAgIHx8IChhbmdsZVRvU3RhcnQgPiBhbmdsZVRvRW5kICYmIHN0YXJ0VG9BbmdsZSA8IGVuZFRvQW5nbGUpO1xufVxuZnVuY3Rpb24gX2xpbWl0VmFsdWUodmFsdWUsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgdmFsdWUpKTtcbn1cbmZ1bmN0aW9uIF9pbnQxNlJhbmdlKHZhbHVlKSB7XG4gIHJldHVybiBfbGltaXRWYWx1ZSh2YWx1ZSwgLTMyNzY4LCAzMjc2Nyk7XG59XG5mdW5jdGlvbiBfaXNCZXR3ZWVuKHZhbHVlLCBzdGFydCwgZW5kLCBlcHNpbG9uID0gMWUtNikge1xuICByZXR1cm4gdmFsdWUgPj0gTWF0aC5taW4oc3RhcnQsIGVuZCkgLSBlcHNpbG9uICYmIHZhbHVlIDw9IE1hdGgubWF4KHN0YXJ0LCBlbmQpICsgZXBzaWxvbjtcbn1cblxuZnVuY3Rpb24gX2xvb2t1cCh0YWJsZSwgdmFsdWUsIGNtcCkge1xuICBjbXAgPSBjbXAgfHwgKChpbmRleCkgPT4gdGFibGVbaW5kZXhdIDwgdmFsdWUpO1xuICBsZXQgaGkgPSB0YWJsZS5sZW5ndGggLSAxO1xuICBsZXQgbG8gPSAwO1xuICBsZXQgbWlkO1xuICB3aGlsZSAoaGkgLSBsbyA+IDEpIHtcbiAgICBtaWQgPSAobG8gKyBoaSkgPj4gMTtcbiAgICBpZiAoY21wKG1pZCkpIHtcbiAgICAgIGxvID0gbWlkO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaSA9IG1pZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtsbywgaGl9O1xufVxuY29uc3QgX2xvb2t1cEJ5S2V5ID0gKHRhYmxlLCBrZXksIHZhbHVlLCBsYXN0KSA9PlxuICBfbG9va3VwKHRhYmxlLCB2YWx1ZSwgbGFzdFxuICAgID8gaW5kZXggPT4gdGFibGVbaW5kZXhdW2tleV0gPD0gdmFsdWVcbiAgICA6IGluZGV4ID0+IHRhYmxlW2luZGV4XVtrZXldIDwgdmFsdWUpO1xuY29uc3QgX3Jsb29rdXBCeUtleSA9ICh0YWJsZSwga2V5LCB2YWx1ZSkgPT5cbiAgX2xvb2t1cCh0YWJsZSwgdmFsdWUsIGluZGV4ID0+IHRhYmxlW2luZGV4XVtrZXldID49IHZhbHVlKTtcbmZ1bmN0aW9uIF9maWx0ZXJCZXR3ZWVuKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGVuZCA9IHZhbHVlcy5sZW5ndGg7XG4gIHdoaWxlIChzdGFydCA8IGVuZCAmJiB2YWx1ZXNbc3RhcnRdIDwgbWluKSB7XG4gICAgc3RhcnQrKztcbiAgfVxuICB3aGlsZSAoZW5kID4gc3RhcnQgJiYgdmFsdWVzW2VuZCAtIDFdID4gbWF4KSB7XG4gICAgZW5kLS07XG4gIH1cbiAgcmV0dXJuIHN0YXJ0ID4gMCB8fCBlbmQgPCB2YWx1ZXMubGVuZ3RoXG4gICAgPyB2YWx1ZXMuc2xpY2Uoc3RhcnQsIGVuZClcbiAgICA6IHZhbHVlcztcbn1cbmNvbnN0IGFycmF5RXZlbnRzID0gWydwdXNoJywgJ3BvcCcsICdzaGlmdCcsICdzcGxpY2UnLCAndW5zaGlmdCddO1xuZnVuY3Rpb24gbGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gIGlmIChhcnJheS5fY2hhcnRqcykge1xuICAgIGFycmF5Ll9jaGFydGpzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm47XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFycmF5LCAnX2NoYXJ0anMnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiB7XG4gICAgICBsaXN0ZW5lcnM6IFtsaXN0ZW5lcl1cbiAgICB9XG4gIH0pO1xuICBhcnJheUV2ZW50cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCBtZXRob2QgPSAnX29uRGF0YScgKyBfY2FwaXRhbGl6ZShrZXkpO1xuICAgIGNvbnN0IGJhc2UgPSBhcnJheVtrZXldO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgcmVzID0gYmFzZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgYXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLmZvckVhY2goKG9iamVjdCkgPT4ge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0W21ldGhvZF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9iamVjdFttZXRob2RdKC4uLmFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gdW5saXN0ZW5BcnJheUV2ZW50cyhhcnJheSwgbGlzdGVuZXIpIHtcbiAgY29uc3Qgc3R1YiA9IGFycmF5Ll9jaGFydGpzO1xuICBpZiAoIXN0dWIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbGlzdGVuZXJzID0gc3R1Yi5saXN0ZW5lcnM7XG4gIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgaWYgKGxpc3RlbmVycy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFycmF5RXZlbnRzLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGRlbGV0ZSBhcnJheVtrZXldO1xuICB9KTtcbiAgZGVsZXRlIGFycmF5Ll9jaGFydGpzO1xufVxuZnVuY3Rpb24gX2FycmF5VW5pcXVlKGl0ZW1zKSB7XG4gIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgbGV0IGksIGlsZW47XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBzZXQuYWRkKGl0ZW1zW2ldKTtcbiAgfVxuICBpZiAoc2V0LnNpemUgPT09IGlsZW4pIHtcbiAgICByZXR1cm4gaXRlbXM7XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20oc2V0KTtcbn1cblxuZnVuY3Rpb24gZm9udFN0cmluZyhwaXhlbFNpemUsIGZvbnRTdHlsZSwgZm9udEZhbWlseSkge1xuICByZXR1cm4gZm9udFN0eWxlICsgJyAnICsgcGl4ZWxTaXplICsgJ3B4ICcgKyBmb250RmFtaWx5O1xufVxuY29uc3QgcmVxdWVzdEFuaW1GcmFtZSA9IChmdW5jdGlvbigpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xufSgpKTtcbmZ1bmN0aW9uIHRocm90dGxlZChmbiwgdGhpc0FyZywgdXBkYXRlRm4pIHtcbiAgY29uc3QgdXBkYXRlQXJncyA9IHVwZGF0ZUZuIHx8ICgoYXJncykgPT4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncykpO1xuICBsZXQgdGlja2luZyA9IGZhbHNlO1xuICBsZXQgYXJncyA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24oLi4ucmVzdCkge1xuICAgIGFyZ3MgPSB1cGRhdGVBcmdzKHJlc3QpO1xuICAgIGlmICghdGlja2luZykge1xuICAgICAgdGlja2luZyA9IHRydWU7XG4gICAgICByZXF1ZXN0QW5pbUZyYW1lLmNhbGwod2luZG93LCAoKSA9PiB7XG4gICAgICAgIHRpY2tpbmcgPSBmYWxzZTtcbiAgICAgICAgZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgZGVsYXkpIHtcbiAgbGV0IHRpbWVvdXQ7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmbiwgZGVsYXksIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlbGF5O1xuICB9O1xufVxuY29uc3QgX3RvTGVmdFJpZ2h0Q2VudGVyID0gKGFsaWduKSA9PiBhbGlnbiA9PT0gJ3N0YXJ0JyA/ICdsZWZ0JyA6IGFsaWduID09PSAnZW5kJyA/ICdyaWdodCcgOiAnY2VudGVyJztcbmNvbnN0IF9hbGlnblN0YXJ0RW5kID0gKGFsaWduLCBzdGFydCwgZW5kKSA9PiBhbGlnbiA9PT0gJ3N0YXJ0JyA/IHN0YXJ0IDogYWxpZ24gPT09ICdlbmQnID8gZW5kIDogKHN0YXJ0ICsgZW5kKSAvIDI7XG5jb25zdCBfdGV4dFggPSAoYWxpZ24sIGxlZnQsIHJpZ2h0LCBydGwpID0+IHtcbiAgY29uc3QgY2hlY2sgPSBydGwgPyAnbGVmdCcgOiAncmlnaHQnO1xuICByZXR1cm4gYWxpZ24gPT09IGNoZWNrID8gcmlnaHQgOiBhbGlnbiA9PT0gJ2NlbnRlcicgPyAobGVmdCArIHJpZ2h0KSAvIDIgOiBsZWZ0O1xufTtcbmZ1bmN0aW9uIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKSB7XG4gIGNvbnN0IHBvaW50Q291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBsZXQgc3RhcnQgPSAwO1xuICBsZXQgY291bnQgPSBwb2ludENvdW50O1xuICBpZiAobWV0YS5fc29ydGVkKSB7XG4gICAgY29uc3Qge2lTY2FsZSwgX3BhcnNlZH0gPSBtZXRhO1xuICAgIGNvbnN0IGF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBjb25zdCB7bWluLCBtYXgsIG1pbkRlZmluZWQsIG1heERlZmluZWR9ID0gaVNjYWxlLmdldFVzZXJCb3VuZHMoKTtcbiAgICBpZiAobWluRGVmaW5lZCkge1xuICAgICAgc3RhcnQgPSBfbGltaXRWYWx1ZShNYXRoLm1pbihcbiAgICAgICAgX2xvb2t1cEJ5S2V5KF9wYXJzZWQsIGlTY2FsZS5heGlzLCBtaW4pLmxvLFxuICAgICAgICBhbmltYXRpb25zRGlzYWJsZWQgPyBwb2ludENvdW50IDogX2xvb2t1cEJ5S2V5KHBvaW50cywgYXhpcywgaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUobWluKSkubG8pLFxuICAgICAgMCwgcG9pbnRDb3VudCAtIDEpO1xuICAgIH1cbiAgICBpZiAobWF4RGVmaW5lZCkge1xuICAgICAgY291bnQgPSBfbGltaXRWYWx1ZShNYXRoLm1heChcbiAgICAgICAgX2xvb2t1cEJ5S2V5KF9wYXJzZWQsIGlTY2FsZS5heGlzLCBtYXgsIHRydWUpLmhpICsgMSxcbiAgICAgICAgYW5pbWF0aW9uc0Rpc2FibGVkID8gMCA6IF9sb29rdXBCeUtleShwb2ludHMsIGF4aXMsIGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKG1heCksIHRydWUpLmhpICsgMSksXG4gICAgICBzdGFydCwgcG9pbnRDb3VudCkgLSBzdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgPSBwb2ludENvdW50IC0gc3RhcnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB7c3RhcnQsIGNvdW50fTtcbn1cbmZ1bmN0aW9uIF9zY2FsZVJhbmdlc0NoYW5nZWQobWV0YSkge1xuICBjb25zdCB7eFNjYWxlLCB5U2NhbGUsIF9zY2FsZVJhbmdlc30gPSBtZXRhO1xuICBjb25zdCBuZXdSYW5nZXMgPSB7XG4gICAgeG1pbjogeFNjYWxlLm1pbixcbiAgICB4bWF4OiB4U2NhbGUubWF4LFxuICAgIHltaW46IHlTY2FsZS5taW4sXG4gICAgeW1heDogeVNjYWxlLm1heFxuICB9O1xuICBpZiAoIV9zY2FsZVJhbmdlcykge1xuICAgIG1ldGEuX3NjYWxlUmFuZ2VzID0gbmV3UmFuZ2VzO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IGNoYW5nZWQgPSBfc2NhbGVSYW5nZXMueG1pbiAhPT0geFNjYWxlLm1pblxuXHRcdHx8IF9zY2FsZVJhbmdlcy54bWF4ICE9PSB4U2NhbGUubWF4XG5cdFx0fHwgX3NjYWxlUmFuZ2VzLnltaW4gIT09IHlTY2FsZS5taW5cblx0XHR8fCBfc2NhbGVSYW5nZXMueW1heCAhPT0geVNjYWxlLm1heDtcbiAgT2JqZWN0LmFzc2lnbihfc2NhbGVSYW5nZXMsIG5ld1Jhbmdlcyk7XG4gIHJldHVybiBjaGFuZ2VkO1xufVxuXG5jb25zdCBhdEVkZ2UgPSAodCkgPT4gdCA9PT0gMCB8fCB0ID09PSAxO1xuY29uc3QgZWxhc3RpY0luID0gKHQsIHMsIHApID0+IC0oTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAtIHMpICogVEFVIC8gcCkpO1xuY29uc3QgZWxhc3RpY091dCA9ICh0LCBzLCBwKSA9PiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0IC0gcykgKiBUQVUgLyBwKSArIDE7XG5jb25zdCBlZmZlY3RzID0ge1xuICBsaW5lYXI6IHQgPT4gdCxcbiAgZWFzZUluUXVhZDogdCA9PiB0ICogdCxcbiAgZWFzZU91dFF1YWQ6IHQgPT4gLXQgKiAodCAtIDIpLFxuICBlYXNlSW5PdXRRdWFkOiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IDAuNSAqIHQgKiB0XG4gICAgOiAtMC41ICogKCgtLXQpICogKHQgLSAyKSAtIDEpLFxuICBlYXNlSW5DdWJpYzogdCA9PiB0ICogdCAqIHQsXG4gIGVhc2VPdXRDdWJpYzogdCA9PiAodCAtPSAxKSAqIHQgKiB0ICsgMSxcbiAgZWFzZUluT3V0Q3ViaWM6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gMC41ICogdCAqIHQgKiB0XG4gICAgOiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCArIDIpLFxuICBlYXNlSW5RdWFydDogdCA9PiB0ICogdCAqIHQgKiB0LFxuICBlYXNlT3V0UXVhcnQ6IHQgPT4gLSgodCAtPSAxKSAqIHQgKiB0ICogdCAtIDEpLFxuICBlYXNlSW5PdXRRdWFydDogdCA9PiAoKHQgLz0gMC41KSA8IDEpXG4gICAgPyAwLjUgKiB0ICogdCAqIHQgKiB0XG4gICAgOiAtMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMiksXG4gIGVhc2VJblF1aW50OiB0ID0+IHQgKiB0ICogdCAqIHQgKiB0LFxuICBlYXNlT3V0UXVpbnQ6IHQgPT4gKHQgLT0gMSkgKiB0ICogdCAqIHQgKiB0ICsgMSxcbiAgZWFzZUluT3V0UXVpbnQ6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gMC41ICogdCAqIHQgKiB0ICogdCAqIHRcbiAgICA6IDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAqIHQgKyAyKSxcbiAgZWFzZUluU2luZTogdCA9PiAtTWF0aC5jb3ModCAqIEhBTEZfUEkpICsgMSxcbiAgZWFzZU91dFNpbmU6IHQgPT4gTWF0aC5zaW4odCAqIEhBTEZfUEkpLFxuICBlYXNlSW5PdXRTaW5lOiB0ID0+IC0wLjUgKiAoTWF0aC5jb3MoUEkgKiB0KSAtIDEpLFxuICBlYXNlSW5FeHBvOiB0ID0+ICh0ID09PSAwKSA/IDAgOiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpLFxuICBlYXNlT3V0RXhwbzogdCA9PiAodCA9PT0gMSkgPyAxIDogLU1hdGgucG93KDIsIC0xMCAqIHQpICsgMSxcbiAgZWFzZUluT3V0RXhwbzogdCA9PiBhdEVkZ2UodCkgPyB0IDogdCA8IDAuNVxuICAgID8gMC41ICogTWF0aC5wb3coMiwgMTAgKiAodCAqIDIgLSAxKSlcbiAgICA6IDAuNSAqICgtTWF0aC5wb3coMiwgLTEwICogKHQgKiAyIC0gMSkpICsgMiksXG4gIGVhc2VJbkNpcmM6IHQgPT4gKHQgPj0gMSkgPyB0IDogLShNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpLFxuICBlYXNlT3V0Q2lyYzogdCA9PiBNYXRoLnNxcnQoMSAtICh0IC09IDEpICogdCksXG4gIGVhc2VJbk91dENpcmM6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gLTAuNSAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpXG4gICAgOiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSksXG4gIGVhc2VJbkVsYXN0aWM6IHQgPT4gYXRFZGdlKHQpID8gdCA6IGVsYXN0aWNJbih0LCAwLjA3NSwgMC4zKSxcbiAgZWFzZU91dEVsYXN0aWM6IHQgPT4gYXRFZGdlKHQpID8gdCA6IGVsYXN0aWNPdXQodCwgMC4wNzUsIDAuMyksXG4gIGVhc2VJbk91dEVsYXN0aWModCkge1xuICAgIGNvbnN0IHMgPSAwLjExMjU7XG4gICAgY29uc3QgcCA9IDAuNDU7XG4gICAgcmV0dXJuIGF0RWRnZSh0KSA/IHQgOlxuICAgICAgdCA8IDAuNVxuICAgICAgICA/IDAuNSAqIGVsYXN0aWNJbih0ICogMiwgcywgcClcbiAgICAgICAgOiAwLjUgKyAwLjUgKiBlbGFzdGljT3V0KHQgKiAyIC0gMSwgcywgcCk7XG4gIH0sXG4gIGVhc2VJbkJhY2sodCkge1xuICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuICB9LFxuICBlYXNlT3V0QmFjayh0KSB7XG4gICAgY29uc3QgcyA9IDEuNzAxNTg7XG4gICAgcmV0dXJuICh0IC09IDEpICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbiAgfSxcbiAgZWFzZUluT3V0QmFjayh0KSB7XG4gICAgbGV0IHMgPSAxLjcwMTU4O1xuICAgIGlmICgodCAvPSAwLjUpIDwgMSkge1xuICAgICAgcmV0dXJuIDAuNSAqICh0ICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgLSBzKSk7XG4gICAgfVxuICAgIHJldHVybiAwLjUgKiAoKHQgLT0gMikgKiB0ICogKCgocyAqPSAoMS41MjUpKSArIDEpICogdCArIHMpICsgMik7XG4gIH0sXG4gIGVhc2VJbkJvdW5jZTogdCA9PiAxIC0gZWZmZWN0cy5lYXNlT3V0Qm91bmNlKDEgLSB0KSxcbiAgZWFzZU91dEJvdW5jZSh0KSB7XG4gICAgY29uc3QgbSA9IDcuNTYyNTtcbiAgICBjb25zdCBkID0gMi43NTtcbiAgICBpZiAodCA8ICgxIC8gZCkpIHtcbiAgICAgIHJldHVybiBtICogdCAqIHQ7XG4gICAgfVxuICAgIGlmICh0IDwgKDIgLyBkKSkge1xuICAgICAgcmV0dXJuIG0gKiAodCAtPSAoMS41IC8gZCkpICogdCArIDAuNzU7XG4gICAgfVxuICAgIGlmICh0IDwgKDIuNSAvIGQpKSB7XG4gICAgICByZXR1cm4gbSAqICh0IC09ICgyLjI1IC8gZCkpICogdCArIDAuOTM3NTtcbiAgICB9XG4gICAgcmV0dXJuIG0gKiAodCAtPSAoMi42MjUgLyBkKSkgKiB0ICsgMC45ODQzNzU7XG4gIH0sXG4gIGVhc2VJbk91dEJvdW5jZTogdCA9PiAodCA8IDAuNSlcbiAgICA/IGVmZmVjdHMuZWFzZUluQm91bmNlKHQgKiAyKSAqIDAuNVxuICAgIDogZWZmZWN0cy5lYXNlT3V0Qm91bmNlKHQgKiAyIC0gMSkgKiAwLjUgKyAwLjUsXG59O1xuXG4vKiFcbiAqIEBrdXJrbGUvY29sb3IgdjAuMi4xXG4gKiBodHRwczovL2dpdGh1Yi5jb20va3Vya2xlL2NvbG9yI3JlYWRtZVxuICogKGMpIDIwMjIgSnVra2EgS3Vya2VsYVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmZ1bmN0aW9uIHJvdW5kKHYpIHtcbiAgcmV0dXJuIHYgKyAwLjUgfCAwO1xufVxuY29uc3QgbGltID0gKHYsIGwsIGgpID0+IE1hdGgubWF4KE1hdGgubWluKHYsIGgpLCBsKTtcbmZ1bmN0aW9uIHAyYih2KSB7XG4gIHJldHVybiBsaW0ocm91bmQodiAqIDIuNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gbjJiKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2ICogMjU1KSwgMCwgMjU1KTtcbn1cbmZ1bmN0aW9uIGIybih2KSB7XG4gIHJldHVybiBsaW0ocm91bmQodiAvIDIuNTUpIC8gMTAwLCAwLCAxKTtcbn1cbmZ1bmN0aW9uIG4ycCh2KSB7XG4gIHJldHVybiBsaW0ocm91bmQodiAqIDEwMCksIDAsIDEwMCk7XG59XG5jb25zdCBtYXAkMSA9IHswOiAwLCAxOiAxLCAyOiAyLCAzOiAzLCA0OiA0LCA1OiA1LCA2OiA2LCA3OiA3LCA4OiA4LCA5OiA5LCBBOiAxMCwgQjogMTEsIEM6IDEyLCBEOiAxMywgRTogMTQsIEY6IDE1LCBhOiAxMCwgYjogMTEsIGM6IDEyLCBkOiAxMywgZTogMTQsIGY6IDE1fTtcbmNvbnN0IGhleCA9IFsuLi4nMDEyMzQ1Njc4OUFCQ0RFRiddO1xuY29uc3QgaDEgPSBiID0+IGhleFtiICYgMHhGXTtcbmNvbnN0IGgyID0gYiA9PiBoZXhbKGIgJiAweEYwKSA+PiA0XSArIGhleFtiICYgMHhGXTtcbmNvbnN0IGVxID0gYiA9PiAoKGIgJiAweEYwKSA+PiA0KSA9PT0gKGIgJiAweEYpO1xuY29uc3QgaXNTaG9ydCA9IHYgPT4gZXEodi5yKSAmJiBlcSh2LmcpICYmIGVxKHYuYikgJiYgZXEodi5hKTtcbmZ1bmN0aW9uIGhleFBhcnNlKHN0cikge1xuICB2YXIgbGVuID0gc3RyLmxlbmd0aDtcbiAgdmFyIHJldDtcbiAgaWYgKHN0clswXSA9PT0gJyMnKSB7XG4gICAgaWYgKGxlbiA9PT0gNCB8fCBsZW4gPT09IDUpIHtcbiAgICAgIHJldCA9IHtcbiAgICAgICAgcjogMjU1ICYgbWFwJDFbc3RyWzFdXSAqIDE3LFxuICAgICAgICBnOiAyNTUgJiBtYXAkMVtzdHJbMl1dICogMTcsXG4gICAgICAgIGI6IDI1NSAmIG1hcCQxW3N0clszXV0gKiAxNyxcbiAgICAgICAgYTogbGVuID09PSA1ID8gbWFwJDFbc3RyWzRdXSAqIDE3IDogMjU1XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAobGVuID09PSA3IHx8IGxlbiA9PT0gOSkge1xuICAgICAgcmV0ID0ge1xuICAgICAgICByOiBtYXAkMVtzdHJbMV1dIDw8IDQgfCBtYXAkMVtzdHJbMl1dLFxuICAgICAgICBnOiBtYXAkMVtzdHJbM11dIDw8IDQgfCBtYXAkMVtzdHJbNF1dLFxuICAgICAgICBiOiBtYXAkMVtzdHJbNV1dIDw8IDQgfCBtYXAkMVtzdHJbNl1dLFxuICAgICAgICBhOiBsZW4gPT09IDkgPyAobWFwJDFbc3RyWzddXSA8PCA0IHwgbWFwJDFbc3RyWzhdXSkgOiAyNTVcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5jb25zdCBhbHBoYSA9IChhLCBmKSA9PiBhIDwgMjU1ID8gZihhKSA6ICcnO1xuZnVuY3Rpb24gaGV4U3RyaW5nKHYpIHtcbiAgdmFyIGYgPSBpc1Nob3J0KHYpID8gaDEgOiBoMjtcbiAgcmV0dXJuIHZcbiAgICA/ICcjJyArIGYodi5yKSArIGYodi5nKSArIGYodi5iKSArIGFscGhhKHYuYSwgZilcbiAgICA6IHVuZGVmaW5lZDtcbn1cbmNvbnN0IEhVRV9SRSA9IC9eKGhzbGE/fGh3Ynxoc3YpXFwoXFxzKihbLSsuZVxcZF0rKSg/OmRlZyk/W1xccyxdKyhbLSsuZVxcZF0rKSVbXFxzLF0rKFstKy5lXFxkXSspJSg/OltcXHMsXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiBoc2wycmdibihoLCBzLCBsKSB7XG4gIGNvbnN0IGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIHJldHVybiBbZigwKSwgZig4KSwgZig0KV07XG59XG5mdW5jdGlvbiBoc3YycmdibihoLCBzLCB2KSB7XG4gIGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDYwKSAlIDYpID0+IHYgLSB2ICogcyAqIE1hdGgubWF4KE1hdGgubWluKGssIDQgLSBrLCAxKSwgMCk7XG4gIHJldHVybiBbZig1KSwgZigzKSwgZigxKV07XG59XG5mdW5jdGlvbiBod2IycmdibihoLCB3LCBiKSB7XG4gIGNvbnN0IHJnYiA9IGhzbDJyZ2JuKGgsIDEsIDAuNSk7XG4gIGxldCBpO1xuICBpZiAodyArIGIgPiAxKSB7XG4gICAgaSA9IDEgLyAodyArIGIpO1xuICAgIHcgKj0gaTtcbiAgICBiICo9IGk7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIHJnYltpXSAqPSAxIC0gdyAtIGI7XG4gICAgcmdiW2ldICs9IHc7XG4gIH1cbiAgcmV0dXJuIHJnYjtcbn1cbmZ1bmN0aW9uIGh1ZVZhbHVlKHIsIGcsIGIsIGQsIG1heCkge1xuICBpZiAociA9PT0gbWF4KSB7XG4gICAgcmV0dXJuICgoZyAtIGIpIC8gZCkgKyAoZyA8IGIgPyA2IDogMCk7XG4gIH1cbiAgaWYgKGcgPT09IG1heCkge1xuICAgIHJldHVybiAoYiAtIHIpIC8gZCArIDI7XG4gIH1cbiAgcmV0dXJuIChyIC0gZykgLyBkICsgNDtcbn1cbmZ1bmN0aW9uIHJnYjJoc2wodikge1xuICBjb25zdCByYW5nZSA9IDI1NTtcbiAgY29uc3QgciA9IHYuciAvIHJhbmdlO1xuICBjb25zdCBnID0gdi5nIC8gcmFuZ2U7XG4gIGNvbnN0IGIgPSB2LmIgLyByYW5nZTtcbiAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gIGNvbnN0IG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICBjb25zdCBsID0gKG1heCArIG1pbikgLyAyO1xuICBsZXQgaCwgcywgZDtcbiAgaWYgKG1heCAhPT0gbWluKSB7XG4gICAgZCA9IG1heCAtIG1pbjtcbiAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgaCA9IGh1ZVZhbHVlKHIsIGcsIGIsIGQsIG1heCk7XG4gICAgaCA9IGggKiA2MCArIDAuNTtcbiAgfVxuICByZXR1cm4gW2ggfCAwLCBzIHx8IDAsIGxdO1xufVxuZnVuY3Rpb24gY2FsbG4oZiwgYSwgYiwgYykge1xuICByZXR1cm4gKFxuICAgIEFycmF5LmlzQXJyYXkoYSlcbiAgICAgID8gZihhWzBdLCBhWzFdLCBhWzJdKVxuICAgICAgOiBmKGEsIGIsIGMpXG4gICkubWFwKG4yYik7XG59XG5mdW5jdGlvbiBoc2wycmdiKGgsIHMsIGwpIHtcbiAgcmV0dXJuIGNhbGxuKGhzbDJyZ2JuLCBoLCBzLCBsKTtcbn1cbmZ1bmN0aW9uIGh3YjJyZ2IoaCwgdywgYikge1xuICByZXR1cm4gY2FsbG4oaHdiMnJnYm4sIGgsIHcsIGIpO1xufVxuZnVuY3Rpb24gaHN2MnJnYihoLCBzLCB2KSB7XG4gIHJldHVybiBjYWxsbihoc3YycmdibiwgaCwgcywgdik7XG59XG5mdW5jdGlvbiBodWUoaCkge1xuICByZXR1cm4gKGggJSAzNjAgKyAzNjApICUgMzYwO1xufVxuZnVuY3Rpb24gaHVlUGFyc2Uoc3RyKSB7XG4gIGNvbnN0IG0gPSBIVUVfUkUuZXhlYyhzdHIpO1xuICBsZXQgYSA9IDI1NTtcbiAgbGV0IHY7XG4gIGlmICghbSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobVs1XSAhPT0gdikge1xuICAgIGEgPSBtWzZdID8gcDJiKCttWzVdKSA6IG4yYigrbVs1XSk7XG4gIH1cbiAgY29uc3QgaCA9IGh1ZSgrbVsyXSk7XG4gIGNvbnN0IHAxID0gK21bM10gLyAxMDA7XG4gIGNvbnN0IHAyID0gK21bNF0gLyAxMDA7XG4gIGlmIChtWzFdID09PSAnaHdiJykge1xuICAgIHYgPSBod2IycmdiKGgsIHAxLCBwMik7XG4gIH0gZWxzZSBpZiAobVsxXSA9PT0gJ2hzdicpIHtcbiAgICB2ID0gaHN2MnJnYihoLCBwMSwgcDIpO1xuICB9IGVsc2Uge1xuICAgIHYgPSBoc2wycmdiKGgsIHAxLCBwMik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByOiB2WzBdLFxuICAgIGc6IHZbMV0sXG4gICAgYjogdlsyXSxcbiAgICBhOiBhXG4gIH07XG59XG5mdW5jdGlvbiByb3RhdGUodiwgZGVnKSB7XG4gIHZhciBoID0gcmdiMmhzbCh2KTtcbiAgaFswXSA9IGh1ZShoWzBdICsgZGVnKTtcbiAgaCA9IGhzbDJyZ2IoaCk7XG4gIHYuciA9IGhbMF07XG4gIHYuZyA9IGhbMV07XG4gIHYuYiA9IGhbMl07XG59XG5mdW5jdGlvbiBoc2xTdHJpbmcodikge1xuICBpZiAoIXYpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYSA9IHJnYjJoc2wodik7XG4gIGNvbnN0IGggPSBhWzBdO1xuICBjb25zdCBzID0gbjJwKGFbMV0pO1xuICBjb25zdCBsID0gbjJwKGFbMl0pO1xuICByZXR1cm4gdi5hIDwgMjU1XG4gICAgPyBgaHNsYSgke2h9LCAke3N9JSwgJHtsfSUsICR7YjJuKHYuYSl9KWBcbiAgICA6IGBoc2woJHtofSwgJHtzfSUsICR7bH0lKWA7XG59XG5jb25zdCBtYXAgPSB7XG4gIHg6ICdkYXJrJyxcbiAgWjogJ2xpZ2h0JyxcbiAgWTogJ3JlJyxcbiAgWDogJ2JsdScsXG4gIFc6ICdncicsXG4gIFY6ICdtZWRpdW0nLFxuICBVOiAnc2xhdGUnLFxuICBBOiAnZWUnLFxuICBUOiAnb2wnLFxuICBTOiAnb3InLFxuICBCOiAncmEnLFxuICBDOiAnbGF0ZWcnLFxuICBEOiAnaWdodHMnLFxuICBSOiAnaW4nLFxuICBROiAndHVycXVvaXMnLFxuICBFOiAnaGknLFxuICBQOiAncm8nLFxuICBPOiAnYWwnLFxuICBOOiAnbGUnLFxuICBNOiAnZGUnLFxuICBMOiAneWVsbG8nLFxuICBGOiAnZW4nLFxuICBLOiAnY2gnLFxuICBHOiAnYXJrcycsXG4gIEg6ICdlYScsXG4gIEk6ICdpZ2h0ZycsXG4gIEo6ICd3aCdcbn07XG5jb25zdCBuYW1lcyQxID0ge1xuICBPaWNlWGU6ICdmMGY4ZmYnLFxuICBhbnRpcXVld0V0ZTogJ2ZhZWJkNycsXG4gIGFxdWE6ICdmZmZmJyxcbiAgYXF1YW1hclJlOiAnN2ZmZmQ0JyxcbiAgYXp1WTogJ2YwZmZmZicsXG4gIGJlaWdlOiAnZjVmNWRjJyxcbiAgYmlzcXVlOiAnZmZlNGM0JyxcbiAgYmxhY2s6ICcwJyxcbiAgYmxhbktlZE9tb25kOiAnZmZlYmNkJyxcbiAgWGU6ICdmZicsXG4gIFhldmlUZXQ6ICc4YTJiZTInLFxuICBiUHduOiAnYTUyYTJhJyxcbiAgYnVybHl3b29kOiAnZGViODg3JyxcbiAgY2FNdFhlOiAnNWY5ZWEwJyxcbiAgS2FydFl1c2U6ICc3ZmZmMDAnLFxuICBLb2NUYXRlOiAnZDI2OTFlJyxcbiAgY1NPOiAnZmY3ZjUwJyxcbiAgY1NuZmxvd2VyWGU6ICc2NDk1ZWQnLFxuICBjU25zaWxrOiAnZmZmOGRjJyxcbiAgY3JpbXNvbjogJ2RjMTQzYycsXG4gIGN5YW46ICdmZmZmJyxcbiAgeFhlOiAnOGInLFxuICB4Y3lhbjogJzhiOGInLFxuICB4Z1RNblBkOiAnYjg4NjBiJyxcbiAgeFdheTogJ2E5YTlhOScsXG4gIHhnWUY6ICc2NDAwJyxcbiAgeGdZeTogJ2E5YTlhOScsXG4gIHhraGFraTogJ2JkYjc2YicsXG4gIHhtYWdGdGE6ICc4YjAwOGInLFxuICB4VGl2ZWdZRjogJzU1NmIyZicsXG4gIHhTYW5nZTogJ2ZmOGMwMCcsXG4gIHhTY0VkOiAnOTkzMmNjJyxcbiAgeFlkOiAnOGIwMDAwJyxcbiAgeHNPbW9uOiAnZTk5NjdhJyxcbiAgeHNIZ1lGOiAnOGZiYzhmJyxcbiAgeFVYZTogJzQ4M2Q4YicsXG4gIHhVV2F5OiAnMmY0ZjRmJyxcbiAgeFVnWXk6ICcyZjRmNGYnLFxuICB4UWU6ICdjZWQxJyxcbiAgeHZpVGV0OiAnOTQwMGQzJyxcbiAgZEFwcFJrOiAnZmYxNDkzJyxcbiAgZEFwc2t5WGU6ICdiZmZmJyxcbiAgZGltV2F5OiAnNjk2OTY5JyxcbiAgZGltZ1l5OiAnNjk2OTY5JyxcbiAgZG9kZ2VyWGU6ICcxZTkwZmYnLFxuICBmaVlicmljazogJ2IyMjIyMicsXG4gIGZsU093RXRlOiAnZmZmYWYwJyxcbiAgZm9Zc3RXQW46ICcyMjhiMjInLFxuICBmdUtzaWE6ICdmZjAwZmYnLFxuICBnYVJzYlNvOiAnZGNkY2RjJyxcbiAgZ2hvc3R3RXRlOiAnZjhmOGZmJyxcbiAgZ1RkOiAnZmZkNzAwJyxcbiAgZ1RNblBkOiAnZGFhNTIwJyxcbiAgV2F5OiAnODA4MDgwJyxcbiAgZ1lGOiAnODAwMCcsXG4gIGdZRkx3OiAnYWRmZjJmJyxcbiAgZ1l5OiAnODA4MDgwJyxcbiAgaG9uZXlNdzogJ2YwZmZmMCcsXG4gIGhvdHBSazogJ2ZmNjliNCcsXG4gIFJkaWFuWWQ6ICdjZDVjNWMnLFxuICBSZGlnbzogJzRiMDA4MicsXG4gIGl2U3k6ICdmZmZmZjAnLFxuICBraGFraTogJ2YwZTY4YycsXG4gIGxhdkZNcjogJ2U2ZTZmYScsXG4gIGxhdkZNclhzaDogJ2ZmZjBmNScsXG4gIGxhd25nWUY6ICc3Y2ZjMDAnLFxuICBObW9uY0VmZm9uOiAnZmZmYWNkJyxcbiAgWlhlOiAnYWRkOGU2JyxcbiAgWmNTTzogJ2YwODA4MCcsXG4gIFpjeWFuOiAnZTBmZmZmJyxcbiAgWmdUTW5QZEx3OiAnZmFmYWQyJyxcbiAgWldheTogJ2QzZDNkMycsXG4gIFpnWUY6ICc5MGVlOTAnLFxuICBaZ1l5OiAnZDNkM2QzJyxcbiAgWnBSazogJ2ZmYjZjMScsXG4gIFpzT21vbjogJ2ZmYTA3YScsXG4gIFpzSGdZRjogJzIwYjJhYScsXG4gIFpza3lYZTogJzg3Y2VmYScsXG4gIFpVV2F5OiAnNzc4ODk5JyxcbiAgWlVnWXk6ICc3Nzg4OTknLFxuICBac3RBbFhlOiAnYjBjNGRlJyxcbiAgWkx3OiAnZmZmZmUwJyxcbiAgbGltZTogJ2ZmMDAnLFxuICBsaW1lZ1lGOiAnMzJjZDMyJyxcbiAgbFJGOiAnZmFmMGU2JyxcbiAgbWFnRnRhOiAnZmYwMGZmJyxcbiAgbWFQb246ICc4MDAwMDAnLFxuICBWYXF1YW1hclJlOiAnNjZjZGFhJyxcbiAgVlhlOiAnY2QnLFxuICBWU2NFZDogJ2JhNTVkMycsXG4gIFZwdXJwTjogJzkzNzBkYicsXG4gIFZzSGdZRjogJzNjYjM3MScsXG4gIFZVWGU6ICc3YjY4ZWUnLFxuICBWc3ByUmdnWUY6ICdmYTlhJyxcbiAgVlFlOiAnNDhkMWNjJyxcbiAgVnZpVGV0WWQ6ICdjNzE1ODUnLFxuICBtaWRuaWdodFhlOiAnMTkxOTcwJyxcbiAgbVJ0Y1lhbTogJ2Y1ZmZmYScsXG4gIG1pc3R5UHNlOiAnZmZlNGUxJyxcbiAgbW9jY2FzUjogJ2ZmZTRiNScsXG4gIG5hdmFqb3dFdGU6ICdmZmRlYWQnLFxuICBuYXZ5OiAnODAnLFxuICBUZGxhY2U6ICdmZGY1ZTYnLFxuICBUaXZlOiAnODA4MDAwJyxcbiAgVGl2ZWRCYjogJzZiOGUyMycsXG4gIFNhbmdlOiAnZmZhNTAwJyxcbiAgU2FuZ2VZZDogJ2ZmNDUwMCcsXG4gIFNjRWQ6ICdkYTcwZDYnLFxuICBwT2VnVE1uUGQ6ICdlZWU4YWEnLFxuICBwT2VnWUY6ICc5OGZiOTgnLFxuICBwT2VRZTogJ2FmZWVlZScsXG4gIHBPZXZpVGV0WWQ6ICdkYjcwOTMnLFxuICBwYXBheWF3RXA6ICdmZmVmZDUnLFxuICBwSEtwdWZmOiAnZmZkYWI5JyxcbiAgcGVydTogJ2NkODUzZicsXG4gIHBSazogJ2ZmYzBjYicsXG4gIHBsdW06ICdkZGEwZGQnLFxuICBwb3dNclhlOiAnYjBlMGU2JyxcbiAgcHVycE46ICc4MDAwODAnLFxuICBZYmVjY2FwdXJwTjogJzY2MzM5OScsXG4gIFlkOiAnZmYwMDAwJyxcbiAgUHN5YnJvd246ICdiYzhmOGYnLFxuICBQeU9YZTogJzQxNjllMScsXG4gIHNhZGROYlB3bjogJzhiNDUxMycsXG4gIHNPbW9uOiAnZmE4MDcyJyxcbiAgc2FuZHliUHduOiAnZjRhNDYwJyxcbiAgc0hnWUY6ICcyZThiNTcnLFxuICBzSHNoZWxsOiAnZmZmNWVlJyxcbiAgc2lGbmE6ICdhMDUyMmQnLFxuICBzaWx2ZXI6ICdjMGMwYzAnLFxuICBza3lYZTogJzg3Y2VlYicsXG4gIFVYZTogJzZhNWFjZCcsXG4gIFVXYXk6ICc3MDgwOTAnLFxuICBVZ1l5OiAnNzA4MDkwJyxcbiAgc25vdzogJ2ZmZmFmYScsXG4gIHNwclJnZ1lGOiAnZmY3ZicsXG4gIHN0QWxYZTogJzQ2ODJiNCcsXG4gIHRhbjogJ2QyYjQ4YycsXG4gIHRlTzogJzgwODAnLFxuICB0RXN0TjogJ2Q4YmZkOCcsXG4gIHRvbWF0bzogJ2ZmNjM0NycsXG4gIFFlOiAnNDBlMGQwJyxcbiAgdmlUZXQ6ICdlZTgyZWUnLFxuICBKSHQ6ICdmNWRlYjMnLFxuICB3RXRlOiAnZmZmZmZmJyxcbiAgd0V0ZXNtb2tlOiAnZjVmNWY1JyxcbiAgTHc6ICdmZmZmMDAnLFxuICBMd2dZRjogJzlhY2QzMidcbn07XG5mdW5jdGlvbiB1bnBhY2soKSB7XG4gIGNvbnN0IHVucGFja2VkID0ge307XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhuYW1lcyQxKTtcbiAgY29uc3QgdGtleXMgPSBPYmplY3Qua2V5cyhtYXApO1xuICBsZXQgaSwgaiwgaywgb2ssIG5rO1xuICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIG9rID0gbmsgPSBrZXlzW2ldO1xuICAgIGZvciAoaiA9IDA7IGogPCB0a2V5cy5sZW5ndGg7IGorKykge1xuICAgICAgayA9IHRrZXlzW2pdO1xuICAgICAgbmsgPSBuay5yZXBsYWNlKGssIG1hcFtrXSk7XG4gICAgfVxuICAgIGsgPSBwYXJzZUludChuYW1lcyQxW29rXSwgMTYpO1xuICAgIHVucGFja2VkW25rXSA9IFtrID4+IDE2ICYgMHhGRiwgayA+PiA4ICYgMHhGRiwgayAmIDB4RkZdO1xuICB9XG4gIHJldHVybiB1bnBhY2tlZDtcbn1cbmxldCBuYW1lcztcbmZ1bmN0aW9uIG5hbWVQYXJzZShzdHIpIHtcbiAgaWYgKCFuYW1lcykge1xuICAgIG5hbWVzID0gdW5wYWNrKCk7XG4gICAgbmFtZXMudHJhbnNwYXJlbnQgPSBbMCwgMCwgMCwgMF07XG4gIH1cbiAgY29uc3QgYSA9IG5hbWVzW3N0ci50b0xvd2VyQ2FzZSgpXTtcbiAgcmV0dXJuIGEgJiYge1xuICAgIHI6IGFbMF0sXG4gICAgZzogYVsxXSxcbiAgICBiOiBhWzJdLFxuICAgIGE6IGEubGVuZ3RoID09PSA0ID8gYVszXSA6IDI1NVxuICB9O1xufVxuY29uc3QgUkdCX1JFID0gL15yZ2JhP1xcKFxccyooWy0rLlxcZF0rKSglKT9bXFxzLF0rKFstKy5lXFxkXSspKCUpP1tcXHMsXSsoWy0rLmVcXGRdKykoJSk/KD86W1xccywvXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiByZ2JQYXJzZShzdHIpIHtcbiAgY29uc3QgbSA9IFJHQl9SRS5leGVjKHN0cik7XG4gIGxldCBhID0gMjU1O1xuICBsZXQgciwgZywgYjtcbiAgaWYgKCFtKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtWzddICE9PSByKSB7XG4gICAgY29uc3QgdiA9ICttWzddO1xuICAgIGEgPSBtWzhdID8gcDJiKHYpIDogbGltKHYgKiAyNTUsIDAsIDI1NSk7XG4gIH1cbiAgciA9ICttWzFdO1xuICBnID0gK21bM107XG4gIGIgPSArbVs1XTtcbiAgciA9IDI1NSAmIChtWzJdID8gcDJiKHIpIDogbGltKHIsIDAsIDI1NSkpO1xuICBnID0gMjU1ICYgKG1bNF0gPyBwMmIoZykgOiBsaW0oZywgMCwgMjU1KSk7XG4gIGIgPSAyNTUgJiAobVs2XSA/IHAyYihiKSA6IGxpbShiLCAwLCAyNTUpKTtcbiAgcmV0dXJuIHtcbiAgICByOiByLFxuICAgIGc6IGcsXG4gICAgYjogYixcbiAgICBhOiBhXG4gIH07XG59XG5mdW5jdGlvbiByZ2JTdHJpbmcodikge1xuICByZXR1cm4gdiAmJiAoXG4gICAgdi5hIDwgMjU1XG4gICAgICA/IGByZ2JhKCR7di5yfSwgJHt2Lmd9LCAke3YuYn0sICR7YjJuKHYuYSl9KWBcbiAgICAgIDogYHJnYigke3Yucn0sICR7di5nfSwgJHt2LmJ9KWBcbiAgKTtcbn1cbmNvbnN0IHRvID0gdiA9PiB2IDw9IDAuMDAzMTMwOCA/IHYgKiAxMi45MiA6IE1hdGgucG93KHYsIDEuMCAvIDIuNCkgKiAxLjA1NSAtIDAuMDU1O1xuY29uc3QgZnJvbSA9IHYgPT4gdiA8PSAwLjA0MDQ1ID8gdiAvIDEyLjkyIDogTWF0aC5wb3coKHYgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbmZ1bmN0aW9uIGludGVycG9sYXRlKHJnYjEsIHJnYjIsIHQpIHtcbiAgY29uc3QgciA9IGZyb20oYjJuKHJnYjEucikpO1xuICBjb25zdCBnID0gZnJvbShiMm4ocmdiMS5nKSk7XG4gIGNvbnN0IGIgPSBmcm9tKGIybihyZ2IxLmIpKTtcbiAgcmV0dXJuIHtcbiAgICByOiBuMmIodG8ociArIHQgKiAoZnJvbShiMm4ocmdiMi5yKSkgLSByKSkpLFxuICAgIGc6IG4yYih0byhnICsgdCAqIChmcm9tKGIybihyZ2IyLmcpKSAtIGcpKSksXG4gICAgYjogbjJiKHRvKGIgKyB0ICogKGZyb20oYjJuKHJnYjIuYikpIC0gYikpKSxcbiAgICBhOiByZ2IxLmEgKyB0ICogKHJnYjIuYSAtIHJnYjEuYSlcbiAgfTtcbn1cbmZ1bmN0aW9uIG1vZEhTTCh2LCBpLCByYXRpbykge1xuICBpZiAodikge1xuICAgIGxldCB0bXAgPSByZ2IyaHNsKHYpO1xuICAgIHRtcFtpXSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRtcFtpXSArIHRtcFtpXSAqIHJhdGlvLCBpID09PSAwID8gMzYwIDogMSkpO1xuICAgIHRtcCA9IGhzbDJyZ2IodG1wKTtcbiAgICB2LnIgPSB0bXBbMF07XG4gICAgdi5nID0gdG1wWzFdO1xuICAgIHYuYiA9IHRtcFsyXTtcbiAgfVxufVxuZnVuY3Rpb24gY2xvbmUodiwgcHJvdG8pIHtcbiAgcmV0dXJuIHYgPyBPYmplY3QuYXNzaWduKHByb3RvIHx8IHt9LCB2KSA6IHY7XG59XG5mdW5jdGlvbiBmcm9tT2JqZWN0KGlucHV0KSB7XG4gIHZhciB2ID0ge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDI1NX07XG4gIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgIGlmIChpbnB1dC5sZW5ndGggPj0gMykge1xuICAgICAgdiA9IHtyOiBpbnB1dFswXSwgZzogaW5wdXRbMV0sIGI6IGlucHV0WzJdLCBhOiAyNTV9O1xuICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IDMpIHtcbiAgICAgICAgdi5hID0gbjJiKGlucHV0WzNdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdiA9IGNsb25lKGlucHV0LCB7cjogMCwgZzogMCwgYjogMCwgYTogMX0pO1xuICAgIHYuYSA9IG4yYih2LmEpO1xuICB9XG4gIHJldHVybiB2O1xufVxuZnVuY3Rpb24gZnVuY3Rpb25QYXJzZShzdHIpIHtcbiAgaWYgKHN0ci5jaGFyQXQoMCkgPT09ICdyJykge1xuICAgIHJldHVybiByZ2JQYXJzZShzdHIpO1xuICB9XG4gIHJldHVybiBodWVQYXJzZShzdHIpO1xufVxuY2xhc3MgQ29sb3Ige1xuICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIENvbG9yKSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgaW5wdXQ7XG4gICAgbGV0IHY7XG4gICAgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICB2ID0gZnJvbU9iamVjdChpbnB1dCk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgdiA9IGhleFBhcnNlKGlucHV0KSB8fCBuYW1lUGFyc2UoaW5wdXQpIHx8IGZ1bmN0aW9uUGFyc2UoaW5wdXQpO1xuICAgIH1cbiAgICB0aGlzLl9yZ2IgPSB2O1xuICAgIHRoaXMuX3ZhbGlkID0gISF2O1xuICB9XG4gIGdldCB2YWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQ7XG4gIH1cbiAgZ2V0IHJnYigpIHtcbiAgICB2YXIgdiA9IGNsb25lKHRoaXMuX3JnYik7XG4gICAgaWYgKHYpIHtcbiAgICAgIHYuYSA9IGIybih2LmEpO1xuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfVxuICBzZXQgcmdiKG9iaikge1xuICAgIHRoaXMuX3JnYiA9IGZyb21PYmplY3Qob2JqKTtcbiAgfVxuICByZ2JTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkID8gcmdiU3RyaW5nKHRoaXMuX3JnYikgOiB1bmRlZmluZWQ7XG4gIH1cbiAgaGV4U3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWxpZCA/IGhleFN0cmluZyh0aGlzLl9yZ2IpIDogdW5kZWZpbmVkO1xuICB9XG4gIGhzbFN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQgPyBoc2xTdHJpbmcodGhpcy5fcmdiKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBtaXgoY29sb3IsIHdlaWdodCkge1xuICAgIGlmIChjb2xvcikge1xuICAgICAgY29uc3QgYzEgPSB0aGlzLnJnYjtcbiAgICAgIGNvbnN0IGMyID0gY29sb3IucmdiO1xuICAgICAgbGV0IHcyO1xuICAgICAgY29uc3QgcCA9IHdlaWdodCA9PT0gdzIgPyAwLjUgOiB3ZWlnaHQ7XG4gICAgICBjb25zdCB3ID0gMiAqIHAgLSAxO1xuICAgICAgY29uc3QgYSA9IGMxLmEgLSBjMi5hO1xuICAgICAgY29uc3QgdzEgPSAoKHcgKiBhID09PSAtMSA/IHcgOiAodyArIGEpIC8gKDEgKyB3ICogYSkpICsgMSkgLyAyLjA7XG4gICAgICB3MiA9IDEgLSB3MTtcbiAgICAgIGMxLnIgPSAweEZGICYgdzEgKiBjMS5yICsgdzIgKiBjMi5yICsgMC41O1xuICAgICAgYzEuZyA9IDB4RkYgJiB3MSAqIGMxLmcgKyB3MiAqIGMyLmcgKyAwLjU7XG4gICAgICBjMS5iID0gMHhGRiAmIHcxICogYzEuYiArIHcyICogYzIuYiArIDAuNTtcbiAgICAgIGMxLmEgPSBwICogYzEuYSArICgxIC0gcCkgKiBjMi5hO1xuICAgICAgdGhpcy5yZ2IgPSBjMTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgaW50ZXJwb2xhdGUoY29sb3IsIHQpIHtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIHRoaXMuX3JnYiA9IGludGVycG9sYXRlKHRoaXMuX3JnYiwgY29sb3IuX3JnYiwgdCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgQ29sb3IodGhpcy5yZ2IpO1xuICB9XG4gIGFscGhhKGEpIHtcbiAgICB0aGlzLl9yZ2IuYSA9IG4yYihhKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjbGVhcmVyKHJhdGlvKSB7XG4gICAgY29uc3QgcmdiID0gdGhpcy5fcmdiO1xuICAgIHJnYi5hICo9IDEgLSByYXRpbztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBncmV5c2NhbGUoKSB7XG4gICAgY29uc3QgcmdiID0gdGhpcy5fcmdiO1xuICAgIGNvbnN0IHZhbCA9IHJvdW5kKHJnYi5yICogMC4zICsgcmdiLmcgKiAwLjU5ICsgcmdiLmIgKiAwLjExKTtcbiAgICByZ2IuciA9IHJnYi5nID0gcmdiLmIgPSB2YWw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgb3BhcXVlcihyYXRpbykge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICByZ2IuYSAqPSAxICsgcmF0aW87XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgbmVnYXRlKCkge1xuICAgIGNvbnN0IHYgPSB0aGlzLl9yZ2I7XG4gICAgdi5yID0gMjU1IC0gdi5yO1xuICAgIHYuZyA9IDI1NSAtIHYuZztcbiAgICB2LmIgPSAyNTUgLSB2LmI7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgbGlnaHRlbihyYXRpbykge1xuICAgIG1vZEhTTCh0aGlzLl9yZ2IsIDIsIHJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBkYXJrZW4ocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAyLCAtcmF0aW8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHNhdHVyYXRlKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMSwgcmF0aW8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGRlc2F0dXJhdGUocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAxLCAtcmF0aW8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJvdGF0ZShkZWcpIHtcbiAgICByb3RhdGUodGhpcy5fcmdiLCBkZWcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5mdW5jdGlvbiBpbmRleF9lc20oaW5wdXQpIHtcbiAgcmV0dXJuIG5ldyBDb2xvcihpbnB1dCk7XG59XG5cbmZ1bmN0aW9uIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpIHtcbiAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCB0eXBlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gdHlwZSA9PT0gJ1tvYmplY3QgQ2FudmFzUGF0dGVybl0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IENhbnZhc0dyYWRpZW50XSc7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY29sb3IodmFsdWUpIHtcbiAgcmV0dXJuIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpID8gdmFsdWUgOiBpbmRleF9lc20odmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0SG92ZXJDb2xvcih2YWx1ZSkge1xuICByZXR1cm4gaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSlcbiAgICA/IHZhbHVlXG4gICAgOiBpbmRleF9lc20odmFsdWUpLnNhdHVyYXRlKDAuNSkuZGFya2VuKDAuMSkuaGV4U3RyaW5nKCk7XG59XG5cbmNvbnN0IG92ZXJyaWRlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5jb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBnZXRTY29wZSQxKG5vZGUsIGtleSkge1xuICBpZiAoIWtleSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG4gIGNvbnN0IGtleXMgPSBrZXkuc3BsaXQoJy4nKTtcbiAgZm9yIChsZXQgaSA9IDAsIG4gPSBrZXlzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGNvbnN0IGsgPSBrZXlzW2ldO1xuICAgIG5vZGUgPSBub2RlW2tdIHx8IChub2RlW2tdID0gT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5mdW5jdGlvbiBzZXQocm9vdCwgc2NvcGUsIHZhbHVlcykge1xuICBpZiAodHlwZW9mIHNjb3BlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBtZXJnZShnZXRTY29wZSQxKHJvb3QsIHNjb3BlKSwgdmFsdWVzKTtcbiAgfVxuICByZXR1cm4gbWVyZ2UoZ2V0U2NvcGUkMShyb290LCAnJyksIHNjb3BlKTtcbn1cbmNsYXNzIERlZmF1bHRzIHtcbiAgY29uc3RydWN0b3IoX2Rlc2NyaXB0b3JzKSB7XG4gICAgdGhpcy5hbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgwLDAsMCwwLjEpJztcbiAgICB0aGlzLmJvcmRlckNvbG9yID0gJ3JnYmEoMCwwLDAsMC4xKSc7XG4gICAgdGhpcy5jb2xvciA9ICcjNjY2JztcbiAgICB0aGlzLmRhdGFzZXRzID0ge307XG4gICAgdGhpcy5kZXZpY2VQaXhlbFJhdGlvID0gKGNvbnRleHQpID0+IGNvbnRleHQuY2hhcnQucGxhdGZvcm0uZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAgIHRoaXMuZWxlbWVudHMgPSB7fTtcbiAgICB0aGlzLmV2ZW50cyA9IFtcbiAgICAgICdtb3VzZW1vdmUnLFxuICAgICAgJ21vdXNlb3V0JyxcbiAgICAgICdjbGljaycsXG4gICAgICAndG91Y2hzdGFydCcsXG4gICAgICAndG91Y2htb3ZlJ1xuICAgIF07XG4gICAgdGhpcy5mb250ID0ge1xuICAgICAgZmFtaWx5OiBcIidIZWx2ZXRpY2EgTmV1ZScsICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmXCIsXG4gICAgICBzaXplOiAxMixcbiAgICAgIHN0eWxlOiAnbm9ybWFsJyxcbiAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgIHdlaWdodDogbnVsbFxuICAgIH07XG4gICAgdGhpcy5ob3ZlciA9IHt9O1xuICAgIHRoaXMuaG92ZXJCYWNrZ3JvdW5kQ29sb3IgPSAoY3R4LCBvcHRpb25zKSA9PiBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKTtcbiAgICB0aGlzLmhvdmVyQm9yZGVyQ29sb3IgPSAoY3R4LCBvcHRpb25zKSA9PiBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuYm9yZGVyQ29sb3IpO1xuICAgIHRoaXMuaG92ZXJDb2xvciA9IChjdHgsIG9wdGlvbnMpID0+IGdldEhvdmVyQ29sb3Iob3B0aW9ucy5jb2xvcik7XG4gICAgdGhpcy5pbmRleEF4aXMgPSAneCc7XG4gICAgdGhpcy5pbnRlcmFjdGlvbiA9IHtcbiAgICAgIG1vZGU6ICduZWFyZXN0JyxcbiAgICAgIGludGVyc2VjdDogdHJ1ZSxcbiAgICAgIGluY2x1ZGVJbnZpc2libGU6IGZhbHNlXG4gICAgfTtcbiAgICB0aGlzLm1haW50YWluQXNwZWN0UmF0aW8gPSB0cnVlO1xuICAgIHRoaXMub25Ib3ZlciA9IG51bGw7XG4gICAgdGhpcy5vbkNsaWNrID0gbnVsbDtcbiAgICB0aGlzLnBhcnNpbmcgPSB0cnVlO1xuICAgIHRoaXMucGx1Z2lucyA9IHt9O1xuICAgIHRoaXMucmVzcG9uc2l2ZSA9IHRydWU7XG4gICAgdGhpcy5zY2FsZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNjYWxlcyA9IHt9O1xuICAgIHRoaXMuc2hvd0xpbmUgPSB0cnVlO1xuICAgIHRoaXMuZHJhd0FjdGl2ZUVsZW1lbnRzT25Ub3AgPSB0cnVlO1xuICAgIHRoaXMuZGVzY3JpYmUoX2Rlc2NyaXB0b3JzKTtcbiAgfVxuICBzZXQoc2NvcGUsIHZhbHVlcykge1xuICAgIHJldHVybiBzZXQodGhpcywgc2NvcGUsIHZhbHVlcyk7XG4gIH1cbiAgZ2V0KHNjb3BlKSB7XG4gICAgcmV0dXJuIGdldFNjb3BlJDEodGhpcywgc2NvcGUpO1xuICB9XG4gIGRlc2NyaWJlKHNjb3BlLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4gc2V0KGRlc2NyaXB0b3JzLCBzY29wZSwgdmFsdWVzKTtcbiAgfVxuICBvdmVycmlkZShzY29wZSwgdmFsdWVzKSB7XG4gICAgcmV0dXJuIHNldChvdmVycmlkZXMsIHNjb3BlLCB2YWx1ZXMpO1xuICB9XG4gIHJvdXRlKHNjb3BlLCBuYW1lLCB0YXJnZXRTY29wZSwgdGFyZ2V0TmFtZSkge1xuICAgIGNvbnN0IHNjb3BlT2JqZWN0ID0gZ2V0U2NvcGUkMSh0aGlzLCBzY29wZSk7XG4gICAgY29uc3QgdGFyZ2V0U2NvcGVPYmplY3QgPSBnZXRTY29wZSQxKHRoaXMsIHRhcmdldFNjb3BlKTtcbiAgICBjb25zdCBwcml2YXRlTmFtZSA9ICdfJyArIG5hbWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc2NvcGVPYmplY3QsIHtcbiAgICAgIFtwcml2YXRlTmFtZV06IHtcbiAgICAgICAgdmFsdWU6IHNjb3BlT2JqZWN0W25hbWVdLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIFtuYW1lXToge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgY29uc3QgbG9jYWwgPSB0aGlzW3ByaXZhdGVOYW1lXTtcbiAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0YXJnZXRTY29wZU9iamVjdFt0YXJnZXROYW1lXTtcbiAgICAgICAgICBpZiAoaXNPYmplY3QobG9jYWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGFyZ2V0LCBsb2NhbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB2YWx1ZU9yRGVmYXVsdChsb2NhbCwgdGFyZ2V0KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgdGhpc1twcml2YXRlTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG52YXIgZGVmYXVsdHMgPSBuZXcgRGVmYXVsdHMoe1xuICBfc2NyaXB0YWJsZTogKG5hbWUpID0+ICFuYW1lLnN0YXJ0c1dpdGgoJ29uJyksXG4gIF9pbmRleGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnZXZlbnRzJyxcbiAgaG92ZXI6IHtcbiAgICBfZmFsbGJhY2s6ICdpbnRlcmFjdGlvbidcbiAgfSxcbiAgaW50ZXJhY3Rpb246IHtcbiAgICBfc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgX2luZGV4YWJsZTogZmFsc2UsXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB0b0ZvbnRTdHJpbmcoZm9udCkge1xuICBpZiAoIWZvbnQgfHwgaXNOdWxsT3JVbmRlZihmb250LnNpemUpIHx8IGlzTnVsbE9yVW5kZWYoZm9udC5mYW1pbHkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIChmb250LnN0eWxlID8gZm9udC5zdHlsZSArICcgJyA6ICcnKVxuXHRcdCsgKGZvbnQud2VpZ2h0ID8gZm9udC53ZWlnaHQgKyAnICcgOiAnJylcblx0XHQrIGZvbnQuc2l6ZSArICdweCAnXG5cdFx0KyBmb250LmZhbWlseTtcbn1cbmZ1bmN0aW9uIF9tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCBzdHJpbmcpIHtcbiAgbGV0IHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXTtcbiAgaWYgKCF0ZXh0V2lkdGgpIHtcbiAgICB0ZXh0V2lkdGggPSBkYXRhW3N0cmluZ10gPSBjdHgubWVhc3VyZVRleHQoc3RyaW5nKS53aWR0aDtcbiAgICBnYy5wdXNoKHN0cmluZyk7XG4gIH1cbiAgaWYgKHRleHRXaWR0aCA+IGxvbmdlc3QpIHtcbiAgICBsb25nZXN0ID0gdGV4dFdpZHRoO1xuICB9XG4gIHJldHVybiBsb25nZXN0O1xufVxuZnVuY3Rpb24gX2xvbmdlc3RUZXh0KGN0eCwgZm9udCwgYXJyYXlPZlRoaW5ncywgY2FjaGUpIHtcbiAgY2FjaGUgPSBjYWNoZSB8fCB7fTtcbiAgbGV0IGRhdGEgPSBjYWNoZS5kYXRhID0gY2FjaGUuZGF0YSB8fCB7fTtcbiAgbGV0IGdjID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCB8fCBbXTtcbiAgaWYgKGNhY2hlLmZvbnQgIT09IGZvbnQpIHtcbiAgICBkYXRhID0gY2FjaGUuZGF0YSA9IHt9O1xuICAgIGdjID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgPSBbXTtcbiAgICBjYWNoZS5mb250ID0gZm9udDtcbiAgfVxuICBjdHguc2F2ZSgpO1xuICBjdHguZm9udCA9IGZvbnQ7XG4gIGxldCBsb25nZXN0ID0gMDtcbiAgY29uc3QgaWxlbiA9IGFycmF5T2ZUaGluZ3MubGVuZ3RoO1xuICBsZXQgaSwgaiwgamxlbiwgdGhpbmcsIG5lc3RlZFRoaW5nO1xuICBmb3IgKGkgPSAwOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgdGhpbmcgPSBhcnJheU9mVGhpbmdzW2ldO1xuICAgIGlmICh0aGluZyAhPT0gdW5kZWZpbmVkICYmIHRoaW5nICE9PSBudWxsICYmIGlzQXJyYXkodGhpbmcpICE9PSB0cnVlKSB7XG4gICAgICBsb25nZXN0ID0gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIHRoaW5nKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodGhpbmcpKSB7XG4gICAgICBmb3IgKGogPSAwLCBqbGVuID0gdGhpbmcubGVuZ3RoOyBqIDwgamxlbjsgaisrKSB7XG4gICAgICAgIG5lc3RlZFRoaW5nID0gdGhpbmdbal07XG4gICAgICAgIGlmIChuZXN0ZWRUaGluZyAhPT0gdW5kZWZpbmVkICYmIG5lc3RlZFRoaW5nICE9PSBudWxsICYmICFpc0FycmF5KG5lc3RlZFRoaW5nKSkge1xuICAgICAgICAgIGxvbmdlc3QgPSBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgbmVzdGVkVGhpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGN0eC5yZXN0b3JlKCk7XG4gIGNvbnN0IGdjTGVuID0gZ2MubGVuZ3RoIC8gMjtcbiAgaWYgKGdjTGVuID4gYXJyYXlPZlRoaW5ncy5sZW5ndGgpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZ2NMZW47IGkrKykge1xuICAgICAgZGVsZXRlIGRhdGFbZ2NbaV1dO1xuICAgIH1cbiAgICBnYy5zcGxpY2UoMCwgZ2NMZW4pO1xuICB9XG4gIHJldHVybiBsb25nZXN0O1xufVxuZnVuY3Rpb24gX2FsaWduUGl4ZWwoY2hhcnQsIHBpeGVsLCB3aWR0aCkge1xuICBjb25zdCBkZXZpY2VQaXhlbFJhdGlvID0gY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW87XG4gIGNvbnN0IGhhbGZXaWR0aCA9IHdpZHRoICE9PSAwID8gTWF0aC5tYXgod2lkdGggLyAyLCAwLjUpIDogMDtcbiAgcmV0dXJuIE1hdGgucm91bmQoKHBpeGVsIC0gaGFsZldpZHRoKSAqIGRldmljZVBpeGVsUmF0aW8pIC8gZGV2aWNlUGl4ZWxSYXRpbyArIGhhbGZXaWR0aDtcbn1cbmZ1bmN0aW9uIGNsZWFyQ2FudmFzKGNhbnZhcywgY3R4KSB7XG4gIGN0eCA9IGN0eCB8fCBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgY3R4LnNhdmUoKTtcbiAgY3R4LnJlc2V0VHJhbnNmb3JtKCk7XG4gIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGRyYXdQb2ludChjdHgsIG9wdGlvbnMsIHgsIHkpIHtcbiAgZHJhd1BvaW50TGVnZW5kKGN0eCwgb3B0aW9ucywgeCwgeSwgbnVsbCk7XG59XG5mdW5jdGlvbiBkcmF3UG9pbnRMZWdlbmQoY3R4LCBvcHRpb25zLCB4LCB5LCB3KSB7XG4gIGxldCB0eXBlLCB4T2Zmc2V0LCB5T2Zmc2V0LCBzaXplLCBjb3JuZXJSYWRpdXMsIHdpZHRoO1xuICBjb25zdCBzdHlsZSA9IG9wdGlvbnMucG9pbnRTdHlsZTtcbiAgY29uc3Qgcm90YXRpb24gPSBvcHRpb25zLnJvdGF0aW9uO1xuICBjb25zdCByYWRpdXMgPSBvcHRpb25zLnJhZGl1cztcbiAgbGV0IHJhZCA9IChyb3RhdGlvbiB8fCAwKSAqIFJBRF9QRVJfREVHO1xuICBpZiAoc3R5bGUgJiYgdHlwZW9mIHN0eWxlID09PSAnb2JqZWN0Jykge1xuICAgIHR5cGUgPSBzdHlsZS50b1N0cmluZygpO1xuICAgIGlmICh0eXBlID09PSAnW29iamVjdCBIVE1MSW1hZ2VFbGVtZW50XScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgSFRNTENhbnZhc0VsZW1lbnRdJykge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC50cmFuc2xhdGUoeCwgeSk7XG4gICAgICBjdHgucm90YXRlKHJhZCk7XG4gICAgICBjdHguZHJhd0ltYWdlKHN0eWxlLCAtc3R5bGUud2lkdGggLyAyLCAtc3R5bGUuaGVpZ2h0IC8gMiwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoaXNOYU4ocmFkaXVzKSB8fCByYWRpdXMgPD0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjdHguYmVnaW5QYXRoKCk7XG4gIHN3aXRjaCAoc3R5bGUpIHtcbiAgZGVmYXVsdDpcbiAgICBpZiAodykge1xuICAgICAgY3R4LmVsbGlwc2UoeCwgeSwgdyAvIDIsIHJhZGl1cywgMCwgMCwgVEFVKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIDAsIFRBVSk7XG4gICAgfVxuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBicmVhaztcbiAgY2FzZSAndHJpYW5nbGUnOlxuICAgIGN0eC5tb3ZlVG8oeCArIE1hdGguc2luKHJhZCkgKiByYWRpdXMsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICByYWQgKz0gVFdPX1RISVJEU19QSTtcbiAgICBjdHgubGluZVRvKHggKyBNYXRoLnNpbihyYWQpICogcmFkaXVzLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgcmFkICs9IFRXT19USElSRFNfUEk7XG4gICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cywgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBicmVhaztcbiAgY2FzZSAncmVjdFJvdW5kZWQnOlxuICAgIGNvcm5lclJhZGl1cyA9IHJhZGl1cyAqIDAuNTE2O1xuICAgIHNpemUgPSByYWRpdXMgLSBjb3JuZXJSYWRpdXM7XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCArIFFVQVJURVJfUEkpICogc2l6ZTtcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkICsgUVVBUlRFUl9QSSkgKiBzaXplO1xuICAgIGN0eC5hcmMoeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCAtIFBJLCByYWQgLSBIQUxGX1BJKTtcbiAgICBjdHguYXJjKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBIQUxGX1BJLCByYWQpO1xuICAgIGN0eC5hcmMoeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCwgcmFkICsgSEFMRl9QSSk7XG4gICAgY3R4LmFyYyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkICsgSEFMRl9QSSwgcmFkICsgUEkpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBicmVhaztcbiAgY2FzZSAncmVjdCc6XG4gICAgaWYgKCFyb3RhdGlvbikge1xuICAgICAgc2l6ZSA9IE1hdGguU1FSVDFfMiAqIHJhZGl1cztcbiAgICAgIHdpZHRoID0gdyA/IHcgLyAyIDogc2l6ZTtcbiAgICAgIGN0eC5yZWN0KHggLSB3aWR0aCwgeSAtIHNpemUsIDIgKiB3aWR0aCwgMiAqIHNpemUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICBjYXNlICdyZWN0Um90JzpcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGJyZWFrO1xuICBjYXNlICdjcm9zc1JvdCc6XG4gICAgcmFkICs9IFFVQVJURVJfUEk7XG4gIGNhc2UgJ2Nyb3NzJzpcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3N0YXInOlxuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2xpbmUnOlxuICAgIHhPZmZzZXQgPSB3ID8gdyAvIDIgOiBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2Rhc2gnOlxuICAgIGN0eC5tb3ZlVG8oeCwgeSk7XG4gICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5jb3MocmFkKSAqIHJhZGl1cywgeSArIE1hdGguc2luKHJhZCkgKiByYWRpdXMpO1xuICAgIGJyZWFrO1xuICB9XG4gIGN0eC5maWxsKCk7XG4gIGlmIChvcHRpb25zLmJvcmRlcldpZHRoID4gMCkge1xuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxufVxuZnVuY3Rpb24gX2lzUG9pbnRJbkFyZWEocG9pbnQsIGFyZWEsIG1hcmdpbikge1xuICBtYXJnaW4gPSBtYXJnaW4gfHwgMC41O1xuICByZXR1cm4gIWFyZWEgfHwgKHBvaW50ICYmIHBvaW50LnggPiBhcmVhLmxlZnQgLSBtYXJnaW4gJiYgcG9pbnQueCA8IGFyZWEucmlnaHQgKyBtYXJnaW4gJiZcblx0XHRwb2ludC55ID4gYXJlYS50b3AgLSBtYXJnaW4gJiYgcG9pbnQueSA8IGFyZWEuYm90dG9tICsgbWFyZ2luKTtcbn1cbmZ1bmN0aW9uIGNsaXBBcmVhKGN0eCwgYXJlYSkge1xuICBjdHguc2F2ZSgpO1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5yZWN0KGFyZWEubGVmdCwgYXJlYS50b3AsIGFyZWEucmlnaHQgLSBhcmVhLmxlZnQsIGFyZWEuYm90dG9tIC0gYXJlYS50b3ApO1xuICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gdW5jbGlwQXJlYShjdHgpIHtcbiAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIF9zdGVwcGVkTGluZVRvKGN0eCwgcHJldmlvdXMsIHRhcmdldCwgZmxpcCwgbW9kZSkge1xuICBpZiAoIXByZXZpb3VzKSB7XG4gICAgcmV0dXJuIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbiAgfVxuICBpZiAobW9kZSA9PT0gJ21pZGRsZScpIHtcbiAgICBjb25zdCBtaWRwb2ludCA9IChwcmV2aW91cy54ICsgdGFyZ2V0LngpIC8gMi4wO1xuICAgIGN0eC5saW5lVG8obWlkcG9pbnQsIHByZXZpb3VzLnkpO1xuICAgIGN0eC5saW5lVG8obWlkcG9pbnQsIHRhcmdldC55KTtcbiAgfSBlbHNlIGlmIChtb2RlID09PSAnYWZ0ZXInICE9PSAhIWZsaXApIHtcbiAgICBjdHgubGluZVRvKHByZXZpb3VzLngsIHRhcmdldC55KTtcbiAgfSBlbHNlIHtcbiAgICBjdHgubGluZVRvKHRhcmdldC54LCBwcmV2aW91cy55KTtcbiAgfVxuICBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG59XG5mdW5jdGlvbiBfYmV6aWVyQ3VydmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQsIGZsaXApIHtcbiAgaWYgKCFwcmV2aW91cykge1xuICAgIHJldHVybiBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG4gIH1cbiAgY3R4LmJlemllckN1cnZlVG8oXG4gICAgZmxpcCA/IHByZXZpb3VzLmNwMXggOiBwcmV2aW91cy5jcDJ4LFxuICAgIGZsaXAgPyBwcmV2aW91cy5jcDF5IDogcHJldmlvdXMuY3AyeSxcbiAgICBmbGlwID8gdGFyZ2V0LmNwMnggOiB0YXJnZXQuY3AxeCxcbiAgICBmbGlwID8gdGFyZ2V0LmNwMnkgOiB0YXJnZXQuY3AxeSxcbiAgICB0YXJnZXQueCxcbiAgICB0YXJnZXQueSk7XG59XG5mdW5jdGlvbiByZW5kZXJUZXh0KGN0eCwgdGV4dCwgeCwgeSwgZm9udCwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IGxpbmVzID0gaXNBcnJheSh0ZXh0KSA/IHRleHQgOiBbdGV4dF07XG4gIGNvbnN0IHN0cm9rZSA9IG9wdHMuc3Ryb2tlV2lkdGggPiAwICYmIG9wdHMuc3Ryb2tlQ29sb3IgIT09ICcnO1xuICBsZXQgaSwgbGluZTtcbiAgY3R4LnNhdmUoKTtcbiAgY3R4LmZvbnQgPSBmb250LnN0cmluZztcbiAgc2V0UmVuZGVyT3B0cyhjdHgsIG9wdHMpO1xuICBmb3IgKGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpIHtcbiAgICBsaW5lID0gbGluZXNbaV07XG4gICAgaWYgKHN0cm9rZSkge1xuICAgICAgaWYgKG9wdHMuc3Ryb2tlQ29sb3IpIHtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0cy5zdHJva2VDb2xvcjtcbiAgICAgIH1cbiAgICAgIGlmICghaXNOdWxsT3JVbmRlZihvcHRzLnN0cm9rZVdpZHRoKSkge1xuICAgICAgICBjdHgubGluZVdpZHRoID0gb3B0cy5zdHJva2VXaWR0aDtcbiAgICAgIH1cbiAgICAgIGN0eC5zdHJva2VUZXh0KGxpbmUsIHgsIHksIG9wdHMubWF4V2lkdGgpO1xuICAgIH1cbiAgICBjdHguZmlsbFRleHQobGluZSwgeCwgeSwgb3B0cy5tYXhXaWR0aCk7XG4gICAgZGVjb3JhdGVUZXh0KGN0eCwgeCwgeSwgbGluZSwgb3B0cyk7XG4gICAgeSArPSBmb250LmxpbmVIZWlnaHQ7XG4gIH1cbiAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIHNldFJlbmRlck9wdHMoY3R4LCBvcHRzKSB7XG4gIGlmIChvcHRzLnRyYW5zbGF0aW9uKSB7XG4gICAgY3R4LnRyYW5zbGF0ZShvcHRzLnRyYW5zbGF0aW9uWzBdLCBvcHRzLnRyYW5zbGF0aW9uWzFdKTtcbiAgfVxuICBpZiAoIWlzTnVsbE9yVW5kZWYob3B0cy5yb3RhdGlvbikpIHtcbiAgICBjdHgucm90YXRlKG9wdHMucm90YXRpb24pO1xuICB9XG4gIGlmIChvcHRzLmNvbG9yKSB7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdHMuY29sb3I7XG4gIH1cbiAgaWYgKG9wdHMudGV4dEFsaWduKSB7XG4gICAgY3R4LnRleHRBbGlnbiA9IG9wdHMudGV4dEFsaWduO1xuICB9XG4gIGlmIChvcHRzLnRleHRCYXNlbGluZSkge1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSBvcHRzLnRleHRCYXNlbGluZTtcbiAgfVxufVxuZnVuY3Rpb24gZGVjb3JhdGVUZXh0KGN0eCwgeCwgeSwgbGluZSwgb3B0cykge1xuICBpZiAob3B0cy5zdHJpa2V0aHJvdWdoIHx8IG9wdHMudW5kZXJsaW5lKSB7XG4gICAgY29uc3QgbWV0cmljcyA9IGN0eC5tZWFzdXJlVGV4dChsaW5lKTtcbiAgICBjb25zdCBsZWZ0ID0geCAtIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hMZWZ0O1xuICAgIGNvbnN0IHJpZ2h0ID0geCArIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hSaWdodDtcbiAgICBjb25zdCB0b3AgPSB5IC0gbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveEFzY2VudDtcbiAgICBjb25zdCBib3R0b20gPSB5ICsgbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveERlc2NlbnQ7XG4gICAgY29uc3QgeURlY29yYXRpb24gPSBvcHRzLnN0cmlrZXRocm91Z2ggPyAodG9wICsgYm90dG9tKSAvIDIgOiBib3R0b207XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gY3R4LmZpbGxTdHlsZTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmxpbmVXaWR0aCA9IG9wdHMuZGVjb3JhdGlvbldpZHRoIHx8IDI7XG4gICAgY3R4Lm1vdmVUbyhsZWZ0LCB5RGVjb3JhdGlvbik7XG4gICAgY3R4LmxpbmVUbyhyaWdodCwgeURlY29yYXRpb24pO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxufVxuZnVuY3Rpb24gYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwgcmVjdCkge1xuICBjb25zdCB7eCwgeSwgdywgaCwgcmFkaXVzfSA9IHJlY3Q7XG4gIGN0eC5hcmMoeCArIHJhZGl1cy50b3BMZWZ0LCB5ICsgcmFkaXVzLnRvcExlZnQsIHJhZGl1cy50b3BMZWZ0LCAtSEFMRl9QSSwgUEksIHRydWUpO1xuICBjdHgubGluZVRvKHgsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbUxlZnQpO1xuICBjdHguYXJjKHggKyByYWRpdXMuYm90dG9tTGVmdCwgeSArIGggLSByYWRpdXMuYm90dG9tTGVmdCwgcmFkaXVzLmJvdHRvbUxlZnQsIFBJLCBIQUxGX1BJLCB0cnVlKTtcbiAgY3R4LmxpbmVUbyh4ICsgdyAtIHJhZGl1cy5ib3R0b21SaWdodCwgeSArIGgpO1xuICBjdHguYXJjKHggKyB3IC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21SaWdodCwgcmFkaXVzLmJvdHRvbVJpZ2h0LCBIQUxGX1BJLCAwLCB0cnVlKTtcbiAgY3R4LmxpbmVUbyh4ICsgdywgeSArIHJhZGl1cy50b3BSaWdodCk7XG4gIGN0eC5hcmMoeCArIHcgLSByYWRpdXMudG9wUmlnaHQsIHkgKyByYWRpdXMudG9wUmlnaHQsIHJhZGl1cy50b3BSaWdodCwgMCwgLUhBTEZfUEksIHRydWUpO1xuICBjdHgubGluZVRvKHggKyByYWRpdXMudG9wTGVmdCwgeSk7XG59XG5cbmNvbnN0IExJTkVfSEVJR0hUID0gbmV3IFJlZ0V4cCgvXihub3JtYWx8KFxcZCsoPzpcXC5cXGQrKT8pKHB4fGVtfCUpPykkLyk7XG5jb25zdCBGT05UX1NUWUxFID0gbmV3IFJlZ0V4cCgvXihub3JtYWx8aXRhbGljfGluaXRpYWx8aW5oZXJpdHx1bnNldHwob2JsaXF1ZSggLT9bMC05XT9bMC05XWRlZyk/KSkkLyk7XG5mdW5jdGlvbiB0b0xpbmVIZWlnaHQodmFsdWUsIHNpemUpIHtcbiAgY29uc3QgbWF0Y2hlcyA9ICgnJyArIHZhbHVlKS5tYXRjaChMSU5FX0hFSUdIVCk7XG4gIGlmICghbWF0Y2hlcyB8fCBtYXRjaGVzWzFdID09PSAnbm9ybWFsJykge1xuICAgIHJldHVybiBzaXplICogMS4yO1xuICB9XG4gIHZhbHVlID0gK21hdGNoZXNbMl07XG4gIHN3aXRjaCAobWF0Y2hlc1szXSkge1xuICBjYXNlICdweCc6XG4gICAgcmV0dXJuIHZhbHVlO1xuICBjYXNlICclJzpcbiAgICB2YWx1ZSAvPSAxMDA7XG4gICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHNpemUgKiB2YWx1ZTtcbn1cbmNvbnN0IG51bWJlck9yWmVybyA9IHYgPT4gK3YgfHwgMDtcbmZ1bmN0aW9uIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBwcm9wcykge1xuICBjb25zdCByZXQgPSB7fTtcbiAgY29uc3Qgb2JqUHJvcHMgPSBpc09iamVjdChwcm9wcyk7XG4gIGNvbnN0IGtleXMgPSBvYmpQcm9wcyA/IE9iamVjdC5rZXlzKHByb3BzKSA6IHByb3BzO1xuICBjb25zdCByZWFkID0gaXNPYmplY3QodmFsdWUpXG4gICAgPyBvYmpQcm9wc1xuICAgICAgPyBwcm9wID0+IHZhbHVlT3JEZWZhdWx0KHZhbHVlW3Byb3BdLCB2YWx1ZVtwcm9wc1twcm9wXV0pXG4gICAgICA6IHByb3AgPT4gdmFsdWVbcHJvcF1cbiAgICA6ICgpID0+IHZhbHVlO1xuICBmb3IgKGNvbnN0IHByb3Agb2Yga2V5cykge1xuICAgIHJldFtwcm9wXSA9IG51bWJlck9yWmVybyhyZWFkKHByb3ApKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gdG9UUkJMKHZhbHVlKSB7XG4gIHJldHVybiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwge3RvcDogJ3knLCByaWdodDogJ3gnLCBib3R0b206ICd5JywgbGVmdDogJ3gnfSk7XG59XG5mdW5jdGlvbiB0b1RSQkxDb3JuZXJzKHZhbHVlKSB7XG4gIHJldHVybiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwgWyd0b3BMZWZ0JywgJ3RvcFJpZ2h0JywgJ2JvdHRvbUxlZnQnLCAnYm90dG9tUmlnaHQnXSk7XG59XG5mdW5jdGlvbiB0b1BhZGRpbmcodmFsdWUpIHtcbiAgY29uc3Qgb2JqID0gdG9UUkJMKHZhbHVlKTtcbiAgb2JqLndpZHRoID0gb2JqLmxlZnQgKyBvYmoucmlnaHQ7XG4gIG9iai5oZWlnaHQgPSBvYmoudG9wICsgb2JqLmJvdHRvbTtcbiAgcmV0dXJuIG9iajtcbn1cbmZ1bmN0aW9uIHRvRm9udChvcHRpb25zLCBmYWxsYmFjaykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgZmFsbGJhY2sgPSBmYWxsYmFjayB8fCBkZWZhdWx0cy5mb250O1xuICBsZXQgc2l6ZSA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuc2l6ZSwgZmFsbGJhY2suc2l6ZSk7XG4gIGlmICh0eXBlb2Ygc2l6ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBzaXplID0gcGFyc2VJbnQoc2l6ZSwgMTApO1xuICB9XG4gIGxldCBzdHlsZSA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuc3R5bGUsIGZhbGxiYWNrLnN0eWxlKTtcbiAgaWYgKHN0eWxlICYmICEoJycgKyBzdHlsZSkubWF0Y2goRk9OVF9TVFlMRSkpIHtcbiAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgZm9udCBzdHlsZSBzcGVjaWZpZWQ6IFwiJyArIHN0eWxlICsgJ1wiJyk7XG4gICAgc3R5bGUgPSAnJztcbiAgfVxuICBjb25zdCBmb250ID0ge1xuICAgIGZhbWlseTogdmFsdWVPckRlZmF1bHQob3B0aW9ucy5mYW1pbHksIGZhbGxiYWNrLmZhbWlseSksXG4gICAgbGluZUhlaWdodDogdG9MaW5lSGVpZ2h0KHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMubGluZUhlaWdodCwgZmFsbGJhY2subGluZUhlaWdodCksIHNpemUpLFxuICAgIHNpemUsXG4gICAgc3R5bGUsXG4gICAgd2VpZ2h0OiB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLndlaWdodCwgZmFsbGJhY2sud2VpZ2h0KSxcbiAgICBzdHJpbmc6ICcnXG4gIH07XG4gIGZvbnQuc3RyaW5nID0gdG9Gb250U3RyaW5nKGZvbnQpO1xuICByZXR1cm4gZm9udDtcbn1cbmZ1bmN0aW9uIHJlc29sdmUoaW5wdXRzLCBjb250ZXh0LCBpbmRleCwgaW5mbykge1xuICBsZXQgY2FjaGVhYmxlID0gdHJ1ZTtcbiAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gaW5wdXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIHZhbHVlID0gaW5wdXRzW2ldO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUoY29udGV4dCk7XG4gICAgICBjYWNoZWFibGUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWVbaW5kZXggJSB2YWx1ZS5sZW5ndGhdO1xuICAgICAgY2FjaGVhYmxlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoaW5mbyAmJiAhY2FjaGVhYmxlKSB7XG4gICAgICAgIGluZm8uY2FjaGVhYmxlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBfYWRkR3JhY2UobWlubWF4LCBncmFjZSwgYmVnaW5BdFplcm8pIHtcbiAgY29uc3Qge21pbiwgbWF4fSA9IG1pbm1heDtcbiAgY29uc3QgY2hhbmdlID0gdG9EaW1lbnNpb24oZ3JhY2UsIChtYXggLSBtaW4pIC8gMik7XG4gIGNvbnN0IGtlZXBaZXJvID0gKHZhbHVlLCBhZGQpID0+IGJlZ2luQXRaZXJvICYmIHZhbHVlID09PSAwID8gMCA6IHZhbHVlICsgYWRkO1xuICByZXR1cm4ge1xuICAgIG1pbjoga2VlcFplcm8obWluLCAtTWF0aC5hYnMoY2hhbmdlKSksXG4gICAgbWF4OiBrZWVwWmVybyhtYXgsIGNoYW5nZSlcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQocGFyZW50Q29udGV4dCwgY29udGV4dCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHBhcmVudENvbnRleHQpLCBjb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZVJlc29sdmVyKHNjb3BlcywgcHJlZml4ZXMgPSBbJyddLCByb290U2NvcGVzID0gc2NvcGVzLCBmYWxsYmFjaywgZ2V0VGFyZ2V0ID0gKCkgPT4gc2NvcGVzWzBdKSB7XG4gIGlmICghZGVmaW5lZChmYWxsYmFjaykpIHtcbiAgICBmYWxsYmFjayA9IF9yZXNvbHZlKCdfZmFsbGJhY2snLCBzY29wZXMpO1xuICB9XG4gIGNvbnN0IGNhY2hlID0ge1xuICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnT2JqZWN0JyxcbiAgICBfY2FjaGVhYmxlOiB0cnVlLFxuICAgIF9zY29wZXM6IHNjb3BlcyxcbiAgICBfcm9vdFNjb3Blczogcm9vdFNjb3BlcyxcbiAgICBfZmFsbGJhY2s6IGZhbGxiYWNrLFxuICAgIF9nZXRUYXJnZXQ6IGdldFRhcmdldCxcbiAgICBvdmVycmlkZTogKHNjb3BlKSA9PiBfY3JlYXRlUmVzb2x2ZXIoW3Njb3BlLCAuLi5zY29wZXNdLCBwcmVmaXhlcywgcm9vdFNjb3BlcywgZmFsbGJhY2spLFxuICB9O1xuICByZXR1cm4gbmV3IFByb3h5KGNhY2hlLCB7XG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBkZWxldGUgdGFyZ2V0W3Byb3BdO1xuICAgICAgZGVsZXRlIHRhcmdldC5fa2V5cztcbiAgICAgIGRlbGV0ZSBzY29wZXNbMF1bcHJvcF07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiBfY2FjaGVkKHRhcmdldCwgcHJvcCxcbiAgICAgICAgKCkgPT4gX3Jlc29sdmVXaXRoUHJlZml4ZXMocHJvcCwgcHJlZml4ZXMsIHNjb3BlcywgdGFyZ2V0KSk7XG4gICAgfSxcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0Ll9zY29wZXNbMF0sIHByb3ApO1xuICAgIH0sXG4gICAgZ2V0UHJvdG90eXBlT2YoKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihzY29wZXNbMF0pO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgcmV0dXJuIGdldEtleXNGcm9tQWxsU2NvcGVzKHRhcmdldCkuaW5jbHVkZXMocHJvcCk7XG4gICAgfSxcbiAgICBvd25LZXlzKHRhcmdldCkge1xuICAgICAgcmV0dXJuIGdldEtleXNGcm9tQWxsU2NvcGVzKHRhcmdldCk7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgY29uc3Qgc3RvcmFnZSA9IHRhcmdldC5fc3RvcmFnZSB8fCAodGFyZ2V0Ll9zdG9yYWdlID0gZ2V0VGFyZ2V0KCkpO1xuICAgICAgdGFyZ2V0W3Byb3BdID0gc3RvcmFnZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIHRhcmdldC5fa2V5cztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBfYXR0YWNoQ29udGV4dChwcm94eSwgY29udGV4dCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cykge1xuICBjb25zdCBjYWNoZSA9IHtcbiAgICBfY2FjaGVhYmxlOiBmYWxzZSxcbiAgICBfcHJveHk6IHByb3h5LFxuICAgIF9jb250ZXh0OiBjb250ZXh0LFxuICAgIF9zdWJQcm94eTogc3ViUHJveHksXG4gICAgX3N0YWNrOiBuZXcgU2V0KCksXG4gICAgX2Rlc2NyaXB0b3JzOiBfZGVzY3JpcHRvcnMocHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cyksXG4gICAgc2V0Q29udGV4dDogKGN0eCkgPT4gX2F0dGFjaENvbnRleHQocHJveHksIGN0eCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cyksXG4gICAgb3ZlcnJpZGU6IChzY29wZSkgPT4gX2F0dGFjaENvbnRleHQocHJveHkub3ZlcnJpZGUoc2NvcGUpLCBjb250ZXh0LCBzdWJQcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKVxuICB9O1xuICByZXR1cm4gbmV3IFByb3h5KGNhY2hlLCB7XG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBkZWxldGUgdGFyZ2V0W3Byb3BdO1xuICAgICAgZGVsZXRlIHByb3h5W3Byb3BdO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgcmV0dXJuIF9jYWNoZWQodGFyZ2V0LCBwcm9wLFxuICAgICAgICAoKSA9PiBfcmVzb2x2ZVdpdGhDb250ZXh0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpKTtcbiAgICB9LFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiB0YXJnZXQuX2Rlc2NyaXB0b3JzLmFsbEtleXNcbiAgICAgICAgPyBSZWZsZWN0Lmhhcyhwcm94eSwgcHJvcCkgPyB7ZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSA6IHVuZGVmaW5lZFxuICAgICAgICA6IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3h5LCBwcm9wKTtcbiAgICB9LFxuICAgIGdldFByb3RvdHlwZU9mKCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YocHJveHkpO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuaGFzKHByb3h5LCBwcm9wKTtcbiAgICB9LFxuICAgIG93bktleXMoKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHByb3h5KTtcbiAgICB9LFxuICAgIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICBwcm94eVtwcm9wXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBfZGVzY3JpcHRvcnMocHJveHksIGRlZmF1bHRzID0ge3NjcmlwdGFibGU6IHRydWUsIGluZGV4YWJsZTogdHJ1ZX0pIHtcbiAgY29uc3Qge19zY3JpcHRhYmxlID0gZGVmYXVsdHMuc2NyaXB0YWJsZSwgX2luZGV4YWJsZSA9IGRlZmF1bHRzLmluZGV4YWJsZSwgX2FsbEtleXMgPSBkZWZhdWx0cy5hbGxLZXlzfSA9IHByb3h5O1xuICByZXR1cm4ge1xuICAgIGFsbEtleXM6IF9hbGxLZXlzLFxuICAgIHNjcmlwdGFibGU6IF9zY3JpcHRhYmxlLFxuICAgIGluZGV4YWJsZTogX2luZGV4YWJsZSxcbiAgICBpc1NjcmlwdGFibGU6IGlzRnVuY3Rpb24oX3NjcmlwdGFibGUpID8gX3NjcmlwdGFibGUgOiAoKSA9PiBfc2NyaXB0YWJsZSxcbiAgICBpc0luZGV4YWJsZTogaXNGdW5jdGlvbihfaW5kZXhhYmxlKSA/IF9pbmRleGFibGUgOiAoKSA9PiBfaW5kZXhhYmxlXG4gIH07XG59XG5jb25zdCByZWFkS2V5ID0gKHByZWZpeCwgbmFtZSkgPT4gcHJlZml4ID8gcHJlZml4ICsgX2NhcGl0YWxpemUobmFtZSkgOiBuYW1lO1xuY29uc3QgbmVlZHNTdWJSZXNvbHZlciA9IChwcm9wLCB2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpICYmIHByb3AgIT09ICdhZGFwdGVycycgJiZcbiAgKE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSkgPT09IG51bGwgfHwgdmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdCk7XG5mdW5jdGlvbiBfY2FjaGVkKHRhcmdldCwgcHJvcCwgcmVzb2x2ZSkge1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgcHJvcCkpIHtcbiAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICB9XG4gIGNvbnN0IHZhbHVlID0gcmVzb2x2ZSgpO1xuICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVXaXRoQ29udGV4dCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gIGNvbnN0IHtfcHJveHksIF9jb250ZXh0LCBfc3ViUHJveHksIF9kZXNjcmlwdG9yczogZGVzY3JpcHRvcnN9ID0gdGFyZ2V0O1xuICBsZXQgdmFsdWUgPSBfcHJveHlbcHJvcF07XG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSAmJiBkZXNjcmlwdG9ycy5pc1NjcmlwdGFibGUocHJvcCkpIHtcbiAgICB2YWx1ZSA9IF9yZXNvbHZlU2NyaXB0YWJsZShwcm9wLCB2YWx1ZSwgdGFyZ2V0LCByZWNlaXZlcik7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCkge1xuICAgIHZhbHVlID0gX3Jlc29sdmVBcnJheShwcm9wLCB2YWx1ZSwgdGFyZ2V0LCBkZXNjcmlwdG9ycy5pc0luZGV4YWJsZSk7XG4gIH1cbiAgaWYgKG5lZWRzU3ViUmVzb2x2ZXIocHJvcCwgdmFsdWUpKSB7XG4gICAgdmFsdWUgPSBfYXR0YWNoQ29udGV4dCh2YWx1ZSwgX2NvbnRleHQsIF9zdWJQcm94eSAmJiBfc3ViUHJveHlbcHJvcF0sIGRlc2NyaXB0b3JzKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZVNjcmlwdGFibGUocHJvcCwgdmFsdWUsIHRhcmdldCwgcmVjZWl2ZXIpIHtcbiAgY29uc3Qge19wcm94eSwgX2NvbnRleHQsIF9zdWJQcm94eSwgX3N0YWNrfSA9IHRhcmdldDtcbiAgaWYgKF9zdGFjay5oYXMocHJvcCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlY3Vyc2lvbiBkZXRlY3RlZDogJyArIEFycmF5LmZyb20oX3N0YWNrKS5qb2luKCctPicpICsgJy0+JyArIHByb3ApO1xuICB9XG4gIF9zdGFjay5hZGQocHJvcCk7XG4gIHZhbHVlID0gdmFsdWUoX2NvbnRleHQsIF9zdWJQcm94eSB8fCByZWNlaXZlcik7XG4gIF9zdGFjay5kZWxldGUocHJvcCk7XG4gIGlmIChuZWVkc1N1YlJlc29sdmVyKHByb3AsIHZhbHVlKSkge1xuICAgIHZhbHVlID0gY3JlYXRlU3ViUmVzb2x2ZXIoX3Byb3h5Ll9zY29wZXMsIF9wcm94eSwgcHJvcCwgdmFsdWUpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgaXNJbmRleGFibGUpIHtcbiAgY29uc3Qge19wcm94eSwgX2NvbnRleHQsIF9zdWJQcm94eSwgX2Rlc2NyaXB0b3JzOiBkZXNjcmlwdG9yc30gPSB0YXJnZXQ7XG4gIGlmIChkZWZpbmVkKF9jb250ZXh0LmluZGV4KSAmJiBpc0luZGV4YWJsZShwcm9wKSkge1xuICAgIHZhbHVlID0gdmFsdWVbX2NvbnRleHQuaW5kZXggJSB2YWx1ZS5sZW5ndGhdO1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlWzBdKSkge1xuICAgIGNvbnN0IGFyciA9IHZhbHVlO1xuICAgIGNvbnN0IHNjb3BlcyA9IF9wcm94eS5fc2NvcGVzLmZpbHRlcihzID0+IHMgIT09IGFycik7XG4gICAgdmFsdWUgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyKSB7XG4gICAgICBjb25zdCByZXNvbHZlciA9IGNyZWF0ZVN1YlJlc29sdmVyKHNjb3BlcywgX3Byb3h5LCBwcm9wLCBpdGVtKTtcbiAgICAgIHZhbHVlLnB1c2goX2F0dGFjaENvbnRleHQocmVzb2x2ZXIsIF9jb250ZXh0LCBfc3ViUHJveHkgJiYgX3N1YlByb3h5W3Byb3BdLCBkZXNjcmlwdG9ycykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiByZXNvbHZlRmFsbGJhY2soZmFsbGJhY2ssIHByb3AsIHZhbHVlKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKGZhbGxiYWNrKSA/IGZhbGxiYWNrKHByb3AsIHZhbHVlKSA6IGZhbGxiYWNrO1xufVxuY29uc3QgZ2V0U2NvcGUgPSAoa2V5LCBwYXJlbnQpID0+IGtleSA9PT0gdHJ1ZSA/IHBhcmVudFxuICA6IHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnID8gcmVzb2x2ZU9iamVjdEtleShwYXJlbnQsIGtleSkgOiB1bmRlZmluZWQ7XG5mdW5jdGlvbiBhZGRTY29wZXMoc2V0LCBwYXJlbnRTY29wZXMsIGtleSwgcGFyZW50RmFsbGJhY2ssIHZhbHVlKSB7XG4gIGZvciAoY29uc3QgcGFyZW50IG9mIHBhcmVudFNjb3Blcykge1xuICAgIGNvbnN0IHNjb3BlID0gZ2V0U2NvcGUoa2V5LCBwYXJlbnQpO1xuICAgIGlmIChzY29wZSkge1xuICAgICAgc2V0LmFkZChzY29wZSk7XG4gICAgICBjb25zdCBmYWxsYmFjayA9IHJlc29sdmVGYWxsYmFjayhzY29wZS5fZmFsbGJhY2ssIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKGRlZmluZWQoZmFsbGJhY2spICYmIGZhbGxiYWNrICE9PSBrZXkgJiYgZmFsbGJhY2sgIT09IHBhcmVudEZhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNjb3BlID09PSBmYWxzZSAmJiBkZWZpbmVkKHBhcmVudEZhbGxiYWNrKSAmJiBrZXkgIT09IHBhcmVudEZhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY3JlYXRlU3ViUmVzb2x2ZXIocGFyZW50U2NvcGVzLCByZXNvbHZlciwgcHJvcCwgdmFsdWUpIHtcbiAgY29uc3Qgcm9vdFNjb3BlcyA9IHJlc29sdmVyLl9yb290U2NvcGVzO1xuICBjb25zdCBmYWxsYmFjayA9IHJlc29sdmVGYWxsYmFjayhyZXNvbHZlci5fZmFsbGJhY2ssIHByb3AsIHZhbHVlKTtcbiAgY29uc3QgYWxsU2NvcGVzID0gWy4uLnBhcmVudFNjb3BlcywgLi4ucm9vdFNjb3Blc107XG4gIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgc2V0LmFkZCh2YWx1ZSk7XG4gIGxldCBrZXkgPSBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBwcm9wLCBmYWxsYmFjayB8fCBwcm9wLCB2YWx1ZSk7XG4gIGlmIChrZXkgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGRlZmluZWQoZmFsbGJhY2spICYmIGZhbGxiYWNrICE9PSBwcm9wKSB7XG4gICAga2V5ID0gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3BlcywgZmFsbGJhY2ssIGtleSwgdmFsdWUpO1xuICAgIGlmIChrZXkgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVSZXNvbHZlcihBcnJheS5mcm9tKHNldCksIFsnJ10sIHJvb3RTY29wZXMsIGZhbGxiYWNrLFxuICAgICgpID0+IHN1YkdldFRhcmdldChyZXNvbHZlciwgcHJvcCwgdmFsdWUpKTtcbn1cbmZ1bmN0aW9uIGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIGtleSwgZmFsbGJhY2ssIGl0ZW0pIHtcbiAgd2hpbGUgKGtleSkge1xuICAgIGtleSA9IGFkZFNjb3BlcyhzZXQsIGFsbFNjb3Blcywga2V5LCBmYWxsYmFjaywgaXRlbSk7XG4gIH1cbiAgcmV0dXJuIGtleTtcbn1cbmZ1bmN0aW9uIHN1YkdldFRhcmdldChyZXNvbHZlciwgcHJvcCwgdmFsdWUpIHtcbiAgY29uc3QgcGFyZW50ID0gcmVzb2x2ZXIuX2dldFRhcmdldCgpO1xuICBpZiAoIShwcm9wIGluIHBhcmVudCkpIHtcbiAgICBwYXJlbnRbcHJvcF0gPSB7fTtcbiAgfVxuICBjb25zdCB0YXJnZXQgPSBwYXJlbnRbcHJvcF07XG4gIGlmIChpc0FycmF5KHRhcmdldCkgJiYgaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZVdpdGhQcmVmaXhlcyhwcm9wLCBwcmVmaXhlcywgc2NvcGVzLCBwcm94eSkge1xuICBsZXQgdmFsdWU7XG4gIGZvciAoY29uc3QgcHJlZml4IG9mIHByZWZpeGVzKSB7XG4gICAgdmFsdWUgPSBfcmVzb2x2ZShyZWFkS2V5KHByZWZpeCwgcHJvcCksIHNjb3Blcyk7XG4gICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSlcbiAgICAgICAgPyBjcmVhdGVTdWJSZXNvbHZlcihzY29wZXMsIHByb3h5LCBwcm9wLCB2YWx1ZSlcbiAgICAgICAgOiB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIF9yZXNvbHZlKGtleSwgc2NvcGVzKSB7XG4gIGZvciAoY29uc3Qgc2NvcGUgb2Ygc2NvcGVzKSB7XG4gICAgaWYgKCFzY29wZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gc2NvcGVba2V5XTtcbiAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEtleXNGcm9tQWxsU2NvcGVzKHRhcmdldCkge1xuICBsZXQga2V5cyA9IHRhcmdldC5fa2V5cztcbiAgaWYgKCFrZXlzKSB7XG4gICAga2V5cyA9IHRhcmdldC5fa2V5cyA9IHJlc29sdmVLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQuX3Njb3Blcyk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5mdW5jdGlvbiByZXNvbHZlS2V5c0Zyb21BbGxTY29wZXMoc2NvcGVzKSB7XG4gIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgZm9yIChjb25zdCBzY29wZSBvZiBzY29wZXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhzY29wZSkuZmlsdGVyKGsgPT4gIWsuc3RhcnRzV2l0aCgnXycpKSkge1xuICAgICAgc2V0LmFkZChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gQXJyYXkuZnJvbShzZXQpO1xufVxuZnVuY3Rpb24gX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICBjb25zdCB7aVNjYWxlfSA9IG1ldGE7XG4gIGNvbnN0IHtrZXkgPSAncid9ID0gdGhpcy5fcGFyc2luZztcbiAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgcGFyc2VkW2ldID0ge1xuICAgICAgcjogaVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkoaXRlbSwga2V5KSwgaW5kZXgpXG4gICAgfTtcbiAgfVxuICByZXR1cm4gcGFyc2VkO1xufVxuXG5jb25zdCBFUFNJTE9OID0gTnVtYmVyLkVQU0lMT04gfHwgMWUtMTQ7XG5jb25zdCBnZXRQb2ludCA9IChwb2ludHMsIGkpID0+IGkgPCBwb2ludHMubGVuZ3RoICYmICFwb2ludHNbaV0uc2tpcCAmJiBwb2ludHNbaV07XG5jb25zdCBnZXRWYWx1ZUF4aXMgPSAoaW5kZXhBeGlzKSA9PiBpbmRleEF4aXMgPT09ICd4JyA/ICd5JyA6ICd4JztcbmZ1bmN0aW9uIHNwbGluZUN1cnZlKGZpcnN0UG9pbnQsIG1pZGRsZVBvaW50LCBhZnRlclBvaW50LCB0KSB7XG4gIGNvbnN0IHByZXZpb3VzID0gZmlyc3RQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBmaXJzdFBvaW50O1xuICBjb25zdCBjdXJyZW50ID0gbWlkZGxlUG9pbnQ7XG4gIGNvbnN0IG5leHQgPSBhZnRlclBvaW50LnNraXAgPyBtaWRkbGVQb2ludCA6IGFmdGVyUG9pbnQ7XG4gIGNvbnN0IGQwMSA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhjdXJyZW50LCBwcmV2aW91cyk7XG4gIGNvbnN0IGQxMiA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhuZXh0LCBjdXJyZW50KTtcbiAgbGV0IHMwMSA9IGQwMSAvIChkMDEgKyBkMTIpO1xuICBsZXQgczEyID0gZDEyIC8gKGQwMSArIGQxMik7XG4gIHMwMSA9IGlzTmFOKHMwMSkgPyAwIDogczAxO1xuICBzMTIgPSBpc05hTihzMTIpID8gMCA6IHMxMjtcbiAgY29uc3QgZmEgPSB0ICogczAxO1xuICBjb25zdCBmYiA9IHQgKiBzMTI7XG4gIHJldHVybiB7XG4gICAgcHJldmlvdXM6IHtcbiAgICAgIHg6IGN1cnJlbnQueCAtIGZhICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuICAgICAgeTogY3VycmVudC55IC0gZmEgKiAobmV4dC55IC0gcHJldmlvdXMueSlcbiAgICB9LFxuICAgIG5leHQ6IHtcbiAgICAgIHg6IGN1cnJlbnQueCArIGZiICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuICAgICAgeTogY3VycmVudC55ICsgZmIgKiAobmV4dC55IC0gcHJldmlvdXMueSlcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBtb25vdG9uZUFkanVzdChwb2ludHMsIGRlbHRhSywgbUspIHtcbiAgY29uc3QgcG9pbnRzTGVuID0gcG9pbnRzLmxlbmd0aDtcbiAgbGV0IGFscGhhSywgYmV0YUssIHRhdUssIHNxdWFyZWRNYWduaXR1ZGUsIHBvaW50Q3VycmVudDtcbiAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50c0xlbiAtIDE7ICsraSkge1xuICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgaSArIDEpO1xuICAgIGlmICghcG9pbnRDdXJyZW50IHx8ICFwb2ludEFmdGVyKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbW9zdEVxdWFscyhkZWx0YUtbaV0sIDAsIEVQU0lMT04pKSB7XG4gICAgICBtS1tpXSA9IG1LW2kgKyAxXSA9IDA7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgYWxwaGFLID0gbUtbaV0gLyBkZWx0YUtbaV07XG4gICAgYmV0YUsgPSBtS1tpICsgMV0gLyBkZWx0YUtbaV07XG4gICAgc3F1YXJlZE1hZ25pdHVkZSA9IE1hdGgucG93KGFscGhhSywgMikgKyBNYXRoLnBvdyhiZXRhSywgMik7XG4gICAgaWYgKHNxdWFyZWRNYWduaXR1ZGUgPD0gOSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHRhdUsgPSAzIC8gTWF0aC5zcXJ0KHNxdWFyZWRNYWduaXR1ZGUpO1xuICAgIG1LW2ldID0gYWxwaGFLICogdGF1SyAqIGRlbHRhS1tpXTtcbiAgICBtS1tpICsgMV0gPSBiZXRhSyAqIHRhdUsgKiBkZWx0YUtbaV07XG4gIH1cbn1cbmZ1bmN0aW9uIG1vbm90b25lQ29tcHV0ZShwb2ludHMsIG1LLCBpbmRleEF4aXMgPSAneCcpIHtcbiAgY29uc3QgdmFsdWVBeGlzID0gZ2V0VmFsdWVBeGlzKGluZGV4QXhpcyk7XG4gIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCBkZWx0YSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudDtcbiAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKSB7XG4gICAgcG9pbnRCZWZvcmUgPSBwb2ludEN1cnJlbnQ7XG4gICAgcG9pbnRDdXJyZW50ID0gcG9pbnRBZnRlcjtcbiAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgaWYgKCFwb2ludEN1cnJlbnQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBpUGl4ZWwgPSBwb2ludEN1cnJlbnRbaW5kZXhBeGlzXTtcbiAgICBjb25zdCB2UGl4ZWwgPSBwb2ludEN1cnJlbnRbdmFsdWVBeGlzXTtcbiAgICBpZiAocG9pbnRCZWZvcmUpIHtcbiAgICAgIGRlbHRhID0gKGlQaXhlbCAtIHBvaW50QmVmb3JlW2luZGV4QXhpc10pIC8gMztcbiAgICAgIHBvaW50Q3VycmVudFtgY3AxJHtpbmRleEF4aXN9YF0gPSBpUGl4ZWwgLSBkZWx0YTtcbiAgICAgIHBvaW50Q3VycmVudFtgY3AxJHt2YWx1ZUF4aXN9YF0gPSB2UGl4ZWwgLSBkZWx0YSAqIG1LW2ldO1xuICAgIH1cbiAgICBpZiAocG9pbnRBZnRlcikge1xuICAgICAgZGVsdGEgPSAocG9pbnRBZnRlcltpbmRleEF4aXNdIC0gaVBpeGVsKSAvIDM7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMiR7aW5kZXhBeGlzfWBdID0gaVBpeGVsICsgZGVsdGE7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMiR7dmFsdWVBeGlzfWBdID0gdlBpeGVsICsgZGVsdGEgKiBtS1tpXTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzLCBpbmRleEF4aXMgPSAneCcpIHtcbiAgY29uc3QgdmFsdWVBeGlzID0gZ2V0VmFsdWVBeGlzKGluZGV4QXhpcyk7XG4gIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IGRlbHRhSyA9IEFycmF5KHBvaW50c0xlbikuZmlsbCgwKTtcbiAgY29uc3QgbUsgPSBBcnJheShwb2ludHNMZW4pO1xuICBsZXQgaSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudDtcbiAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICBmb3IgKGkgPSAwOyBpIDwgcG9pbnRzTGVuOyArK2kpIHtcbiAgICBwb2ludEJlZm9yZSA9IHBvaW50Q3VycmVudDtcbiAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICBpZiAoIXBvaW50Q3VycmVudCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChwb2ludEFmdGVyKSB7XG4gICAgICBjb25zdCBzbG9wZURlbHRhID0gcG9pbnRBZnRlcltpbmRleEF4aXNdIC0gcG9pbnRDdXJyZW50W2luZGV4QXhpc107XG4gICAgICBkZWx0YUtbaV0gPSBzbG9wZURlbHRhICE9PSAwID8gKHBvaW50QWZ0ZXJbdmFsdWVBeGlzXSAtIHBvaW50Q3VycmVudFt2YWx1ZUF4aXNdKSAvIHNsb3BlRGVsdGEgOiAwO1xuICAgIH1cbiAgICBtS1tpXSA9ICFwb2ludEJlZm9yZSA/IGRlbHRhS1tpXVxuICAgICAgOiAhcG9pbnRBZnRlciA/IGRlbHRhS1tpIC0gMV1cbiAgICAgIDogKHNpZ24oZGVsdGFLW2kgLSAxXSkgIT09IHNpZ24oZGVsdGFLW2ldKSkgPyAwXG4gICAgICA6IChkZWx0YUtbaSAtIDFdICsgZGVsdGFLW2ldKSAvIDI7XG4gIH1cbiAgbW9ub3RvbmVBZGp1c3QocG9pbnRzLCBkZWx0YUssIG1LKTtcbiAgbW9ub3RvbmVDb21wdXRlKHBvaW50cywgbUssIGluZGV4QXhpcyk7XG59XG5mdW5jdGlvbiBjYXBDb250cm9sUG9pbnQocHQsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihwdCwgbWF4KSwgbWluKTtcbn1cbmZ1bmN0aW9uIGNhcEJlemllclBvaW50cyhwb2ludHMsIGFyZWEpIHtcbiAgbGV0IGksIGlsZW4sIHBvaW50LCBpbkFyZWEsIGluQXJlYVByZXY7XG4gIGxldCBpbkFyZWFOZXh0ID0gX2lzUG9pbnRJbkFyZWEocG9pbnRzWzBdLCBhcmVhKTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBpbkFyZWFQcmV2ID0gaW5BcmVhO1xuICAgIGluQXJlYSA9IGluQXJlYU5leHQ7XG4gICAgaW5BcmVhTmV4dCA9IGkgPCBpbGVuIC0gMSAmJiBfaXNQb2ludEluQXJlYShwb2ludHNbaSArIDFdLCBhcmVhKTtcbiAgICBpZiAoIWluQXJlYSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuICAgIGlmIChpbkFyZWFQcmV2KSB7XG4gICAgICBwb2ludC5jcDF4ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMXgsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG4gICAgICBwb2ludC5jcDF5ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMXksIGFyZWEudG9wLCBhcmVhLmJvdHRvbSk7XG4gICAgfVxuICAgIGlmIChpbkFyZWFOZXh0KSB7XG4gICAgICBwb2ludC5jcDJ4ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMngsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG4gICAgICBwb2ludC5jcDJ5ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMnksIGFyZWEudG9wLCBhcmVhLmJvdHRvbSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyhwb2ludHMsIG9wdGlvbnMsIGFyZWEsIGxvb3AsIGluZGV4QXhpcykge1xuICBsZXQgaSwgaWxlbiwgcG9pbnQsIGNvbnRyb2xQb2ludHM7XG4gIGlmIChvcHRpb25zLnNwYW5HYXBzKSB7XG4gICAgcG9pbnRzID0gcG9pbnRzLmZpbHRlcigocHQpID0+ICFwdC5za2lwKTtcbiAgfVxuICBpZiAob3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgc3BsaW5lQ3VydmVNb25vdG9uZShwb2ludHMsIGluZGV4QXhpcyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHByZXYgPSBsb29wID8gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSA6IHBvaW50c1swXTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICBjb250cm9sUG9pbnRzID0gc3BsaW5lQ3VydmUoXG4gICAgICAgIHByZXYsXG4gICAgICAgIHBvaW50LFxuICAgICAgICBwb2ludHNbTWF0aC5taW4oaSArIDEsIGlsZW4gLSAobG9vcCA/IDAgOiAxKSkgJSBpbGVuXSxcbiAgICAgICAgb3B0aW9ucy50ZW5zaW9uXG4gICAgICApO1xuICAgICAgcG9pbnQuY3AxeCA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueDtcbiAgICAgIHBvaW50LmNwMXkgPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLnk7XG4gICAgICBwb2ludC5jcDJ4ID0gY29udHJvbFBvaW50cy5uZXh0Lng7XG4gICAgICBwb2ludC5jcDJ5ID0gY29udHJvbFBvaW50cy5uZXh0Lnk7XG4gICAgICBwcmV2ID0gcG9pbnQ7XG4gICAgfVxuICB9XG4gIGlmIChvcHRpb25zLmNhcEJlemllclBvaW50cykge1xuICAgIGNhcEJlemllclBvaW50cyhwb2ludHMsIGFyZWEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9pc0RvbVN1cHBvcnRlZCgpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG59XG5mdW5jdGlvbiBfZ2V0UGFyZW50Tm9kZShkb21Ob2RlKSB7XG4gIGxldCBwYXJlbnQgPSBkb21Ob2RlLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQgJiYgcGFyZW50LnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IFNoYWRvd1Jvb3RdJykge1xuICAgIHBhcmVudCA9IHBhcmVudC5ob3N0O1xuICB9XG4gIHJldHVybiBwYXJlbnQ7XG59XG5mdW5jdGlvbiBwYXJzZU1heFN0eWxlKHN0eWxlVmFsdWUsIG5vZGUsIHBhcmVudFByb3BlcnR5KSB7XG4gIGxldCB2YWx1ZUluUGl4ZWxzO1xuICBpZiAodHlwZW9mIHN0eWxlVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWVJblBpeGVscyA9IHBhcnNlSW50KHN0eWxlVmFsdWUsIDEwKTtcbiAgICBpZiAoc3R5bGVWYWx1ZS5pbmRleE9mKCclJykgIT09IC0xKSB7XG4gICAgICB2YWx1ZUluUGl4ZWxzID0gdmFsdWVJblBpeGVscyAvIDEwMCAqIG5vZGUucGFyZW50Tm9kZVtwYXJlbnRQcm9wZXJ0eV07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlSW5QaXhlbHMgPSBzdHlsZVZhbHVlO1xuICB9XG4gIHJldHVybiB2YWx1ZUluUGl4ZWxzO1xufVxuY29uc3QgZ2V0Q29tcHV0ZWRTdHlsZSA9IChlbGVtZW50KSA9PiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcbmZ1bmN0aW9uIGdldFN0eWxlKGVsLCBwcm9wZXJ0eSkge1xuICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG59XG5jb25zdCBwb3NpdGlvbnMgPSBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddO1xuZnVuY3Rpb24gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlcywgc3R5bGUsIHN1ZmZpeCkge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgc3VmZml4ID0gc3VmZml4ID8gJy0nICsgc3VmZml4IDogJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgY29uc3QgcG9zID0gcG9zaXRpb25zW2ldO1xuICAgIHJlc3VsdFtwb3NdID0gcGFyc2VGbG9hdChzdHlsZXNbc3R5bGUgKyAnLScgKyBwb3MgKyBzdWZmaXhdKSB8fCAwO1xuICB9XG4gIHJlc3VsdC53aWR0aCA9IHJlc3VsdC5sZWZ0ICsgcmVzdWx0LnJpZ2h0O1xuICByZXN1bHQuaGVpZ2h0ID0gcmVzdWx0LnRvcCArIHJlc3VsdC5ib3R0b207XG4gIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCB1c2VPZmZzZXRQb3MgPSAoeCwgeSwgdGFyZ2V0KSA9PiAoeCA+IDAgfHwgeSA+IDApICYmICghdGFyZ2V0IHx8ICF0YXJnZXQuc2hhZG93Um9vdCk7XG5mdW5jdGlvbiBnZXRDYW52YXNQb3NpdGlvbihlLCBjYW52YXMpIHtcbiAgY29uc3QgdG91Y2hlcyA9IGUudG91Y2hlcztcbiAgY29uc3Qgc291cmNlID0gdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCA/IHRvdWNoZXNbMF0gOiBlO1xuICBjb25zdCB7b2Zmc2V0WCwgb2Zmc2V0WX0gPSBzb3VyY2U7XG4gIGxldCBib3ggPSBmYWxzZTtcbiAgbGV0IHgsIHk7XG4gIGlmICh1c2VPZmZzZXRQb3Mob2Zmc2V0WCwgb2Zmc2V0WSwgZS50YXJnZXQpKSB7XG4gICAgeCA9IG9mZnNldFg7XG4gICAgeSA9IG9mZnNldFk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB4ID0gc291cmNlLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gICAgeSA9IHNvdXJjZS5jbGllbnRZIC0gcmVjdC50b3A7XG4gICAgYm94ID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4ge3gsIHksIGJveH07XG59XG5mdW5jdGlvbiBnZXRSZWxhdGl2ZVBvc2l0aW9uKGV2dCwgY2hhcnQpIHtcbiAgaWYgKCduYXRpdmUnIGluIGV2dCkge1xuICAgIHJldHVybiBldnQ7XG4gIH1cbiAgY29uc3Qge2NhbnZhcywgY3VycmVudERldmljZVBpeGVsUmF0aW99ID0gY2hhcnQ7XG4gIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjYW52YXMpO1xuICBjb25zdCBib3JkZXJCb3ggPSBzdHlsZS5ib3hTaXppbmcgPT09ICdib3JkZXItYm94JztcbiAgY29uc3QgcGFkZGluZ3MgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdwYWRkaW5nJyk7XG4gIGNvbnN0IGJvcmRlcnMgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgY29uc3Qge3gsIHksIGJveH0gPSBnZXRDYW52YXNQb3NpdGlvbihldnQsIGNhbnZhcyk7XG4gIGNvbnN0IHhPZmZzZXQgPSBwYWRkaW5ncy5sZWZ0ICsgKGJveCAmJiBib3JkZXJzLmxlZnQpO1xuICBjb25zdCB5T2Zmc2V0ID0gcGFkZGluZ3MudG9wICsgKGJveCAmJiBib3JkZXJzLnRvcCk7XG4gIGxldCB7d2lkdGgsIGhlaWdodH0gPSBjaGFydDtcbiAgaWYgKGJvcmRlckJveCkge1xuICAgIHdpZHRoIC09IHBhZGRpbmdzLndpZHRoICsgYm9yZGVycy53aWR0aDtcbiAgICBoZWlnaHQgLT0gcGFkZGluZ3MuaGVpZ2h0ICsgYm9yZGVycy5oZWlnaHQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiBNYXRoLnJvdW5kKCh4IC0geE9mZnNldCkgLyB3aWR0aCAqIGNhbnZhcy53aWR0aCAvIGN1cnJlbnREZXZpY2VQaXhlbFJhdGlvKSxcbiAgICB5OiBNYXRoLnJvdW5kKCh5IC0geU9mZnNldCkgLyBoZWlnaHQgKiBjYW52YXMuaGVpZ2h0IC8gY3VycmVudERldmljZVBpeGVsUmF0aW8pXG4gIH07XG59XG5mdW5jdGlvbiBnZXRDb250YWluZXJTaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCkge1xuICBsZXQgbWF4V2lkdGgsIG1heEhlaWdodDtcbiAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQgfHwgaGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBjb250YWluZXIgPSBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICB3aWR0aCA9IGNhbnZhcy5jbGllbnRXaWR0aDtcbiAgICAgIGhlaWdodCA9IGNhbnZhcy5jbGllbnRIZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlY3QgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjb25zdCBjb250YWluZXJTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY29udGFpbmVyKTtcbiAgICAgIGNvbnN0IGNvbnRhaW5lckJvcmRlciA9IGdldFBvc2l0aW9uZWRTdHlsZShjb250YWluZXJTdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICAgICAgY29uc3QgY29udGFpbmVyUGFkZGluZyA9IGdldFBvc2l0aW9uZWRTdHlsZShjb250YWluZXJTdHlsZSwgJ3BhZGRpbmcnKTtcbiAgICAgIHdpZHRoID0gcmVjdC53aWR0aCAtIGNvbnRhaW5lclBhZGRpbmcud2lkdGggLSBjb250YWluZXJCb3JkZXIud2lkdGg7XG4gICAgICBoZWlnaHQgPSByZWN0LmhlaWdodCAtIGNvbnRhaW5lclBhZGRpbmcuaGVpZ2h0IC0gY29udGFpbmVyQm9yZGVyLmhlaWdodDtcbiAgICAgIG1heFdpZHRoID0gcGFyc2VNYXhTdHlsZShjb250YWluZXJTdHlsZS5tYXhXaWR0aCwgY29udGFpbmVyLCAnY2xpZW50V2lkdGgnKTtcbiAgICAgIG1heEhlaWdodCA9IHBhcnNlTWF4U3R5bGUoY29udGFpbmVyU3R5bGUubWF4SGVpZ2h0LCBjb250YWluZXIsICdjbGllbnRIZWlnaHQnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgbWF4V2lkdGg6IG1heFdpZHRoIHx8IElORklOSVRZLFxuICAgIG1heEhlaWdodDogbWF4SGVpZ2h0IHx8IElORklOSVRZXG4gIH07XG59XG5jb25zdCByb3VuZDEgPSB2ID0+IE1hdGgucm91bmQodiAqIDEwKSAvIDEwO1xuZnVuY3Rpb24gZ2V0TWF4aW11bVNpemUoY2FudmFzLCBiYldpZHRoLCBiYkhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNhbnZhcyk7XG4gIGNvbnN0IG1hcmdpbnMgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdtYXJnaW4nKTtcbiAgY29uc3QgbWF4V2lkdGggPSBwYXJzZU1heFN0eWxlKHN0eWxlLm1heFdpZHRoLCBjYW52YXMsICdjbGllbnRXaWR0aCcpIHx8IElORklOSVRZO1xuICBjb25zdCBtYXhIZWlnaHQgPSBwYXJzZU1heFN0eWxlKHN0eWxlLm1heEhlaWdodCwgY2FudmFzLCAnY2xpZW50SGVpZ2h0JykgfHwgSU5GSU5JVFk7XG4gIGNvbnN0IGNvbnRhaW5lclNpemUgPSBnZXRDb250YWluZXJTaXplKGNhbnZhcywgYmJXaWR0aCwgYmJIZWlnaHQpO1xuICBsZXQge3dpZHRoLCBoZWlnaHR9ID0gY29udGFpbmVyU2l6ZTtcbiAgaWYgKHN0eWxlLmJveFNpemluZyA9PT0gJ2NvbnRlbnQtYm94Jykge1xuICAgIGNvbnN0IGJvcmRlcnMgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgICBjb25zdCBwYWRkaW5ncyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ3BhZGRpbmcnKTtcbiAgICB3aWR0aCAtPSBwYWRkaW5ncy53aWR0aCArIGJvcmRlcnMud2lkdGg7XG4gICAgaGVpZ2h0IC09IHBhZGRpbmdzLmhlaWdodCArIGJvcmRlcnMuaGVpZ2h0O1xuICB9XG4gIHdpZHRoID0gTWF0aC5tYXgoMCwgd2lkdGggLSBtYXJnaW5zLndpZHRoKTtcbiAgaGVpZ2h0ID0gTWF0aC5tYXgoMCwgYXNwZWN0UmF0aW8gPyBNYXRoLmZsb29yKHdpZHRoIC8gYXNwZWN0UmF0aW8pIDogaGVpZ2h0IC0gbWFyZ2lucy5oZWlnaHQpO1xuICB3aWR0aCA9IHJvdW5kMShNYXRoLm1pbih3aWR0aCwgbWF4V2lkdGgsIGNvbnRhaW5lclNpemUubWF4V2lkdGgpKTtcbiAgaGVpZ2h0ID0gcm91bmQxKE1hdGgubWluKGhlaWdodCwgbWF4SGVpZ2h0LCBjb250YWluZXJTaXplLm1heEhlaWdodCkpO1xuICBpZiAod2lkdGggJiYgIWhlaWdodCkge1xuICAgIGhlaWdodCA9IHJvdW5kMSh3aWR0aCAvIDIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0XG4gIH07XG59XG5mdW5jdGlvbiByZXRpbmFTY2FsZShjaGFydCwgZm9yY2VSYXRpbywgZm9yY2VTdHlsZSkge1xuICBjb25zdCBwaXhlbFJhdGlvID0gZm9yY2VSYXRpbyB8fCAxO1xuICBjb25zdCBkZXZpY2VIZWlnaHQgPSBNYXRoLmZsb29yKGNoYXJ0LmhlaWdodCAqIHBpeGVsUmF0aW8pO1xuICBjb25zdCBkZXZpY2VXaWR0aCA9IE1hdGguZmxvb3IoY2hhcnQud2lkdGggKiBwaXhlbFJhdGlvKTtcbiAgY2hhcnQuaGVpZ2h0ID0gZGV2aWNlSGVpZ2h0IC8gcGl4ZWxSYXRpbztcbiAgY2hhcnQud2lkdGggPSBkZXZpY2VXaWR0aCAvIHBpeGVsUmF0aW87XG4gIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgaWYgKGNhbnZhcy5zdHlsZSAmJiAoZm9yY2VTdHlsZSB8fCAoIWNhbnZhcy5zdHlsZS5oZWlnaHQgJiYgIWNhbnZhcy5zdHlsZS53aWR0aCkpKSB7XG4gICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IGAke2NoYXJ0LmhlaWdodH1weGA7XG4gICAgY2FudmFzLnN0eWxlLndpZHRoID0gYCR7Y2hhcnQud2lkdGh9cHhgO1xuICB9XG4gIGlmIChjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyAhPT0gcGl4ZWxSYXRpb1xuICAgICAgfHwgY2FudmFzLmhlaWdodCAhPT0gZGV2aWNlSGVpZ2h0XG4gICAgICB8fCBjYW52YXMud2lkdGggIT09IGRldmljZVdpZHRoKSB7XG4gICAgY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBkZXZpY2VIZWlnaHQ7XG4gICAgY2FudmFzLndpZHRoID0gZGV2aWNlV2lkdGg7XG4gICAgY2hhcnQuY3R4LnNldFRyYW5zZm9ybShwaXhlbFJhdGlvLCAwLCAwLCBwaXhlbFJhdGlvLCAwLCAwKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5jb25zdCBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zID0gKGZ1bmN0aW9uKCkge1xuICBsZXQgcGFzc2l2ZVN1cHBvcnRlZCA9IGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBnZXQgcGFzc2l2ZSgpIHtcbiAgICAgICAgcGFzc2l2ZVN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgb3B0aW9ucyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRpb25zKTtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG4gIHJldHVybiBwYXNzaXZlU3VwcG9ydGVkO1xufSgpKTtcbmZ1bmN0aW9uIHJlYWRVc2VkU2l6ZShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBjb25zdCB2YWx1ZSA9IGdldFN0eWxlKGVsZW1lbnQsIHByb3BlcnR5KTtcbiAgY29uc3QgbWF0Y2hlcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKC9eKFxcZCspKFxcLlxcZCspP3B4JC8pO1xuICByZXR1cm4gbWF0Y2hlcyA/ICttYXRjaGVzWzFdIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfcG9pbnRJbkxpbmUocDEsIHAyLCB0LCBtb2RlKSB7XG4gIHJldHVybiB7XG4gICAgeDogcDEueCArIHQgKiAocDIueCAtIHAxLngpLFxuICAgIHk6IHAxLnkgKyB0ICogKHAyLnkgLSBwMS55KVxuICB9O1xufVxuZnVuY3Rpb24gX3N0ZXBwZWRJbnRlcnBvbGF0aW9uKHAxLCBwMiwgdCwgbW9kZSkge1xuICByZXR1cm4ge1xuICAgIHg6IHAxLnggKyB0ICogKHAyLnggLSBwMS54KSxcbiAgICB5OiBtb2RlID09PSAnbWlkZGxlJyA/IHQgPCAwLjUgPyBwMS55IDogcDIueVxuICAgIDogbW9kZSA9PT0gJ2FmdGVyJyA/IHQgPCAxID8gcDEueSA6IHAyLnlcbiAgICA6IHQgPiAwID8gcDIueSA6IHAxLnlcbiAgfTtcbn1cbmZ1bmN0aW9uIF9iZXppZXJJbnRlcnBvbGF0aW9uKHAxLCBwMiwgdCwgbW9kZSkge1xuICBjb25zdCBjcDEgPSB7eDogcDEuY3AyeCwgeTogcDEuY3AyeX07XG4gIGNvbnN0IGNwMiA9IHt4OiBwMi5jcDF4LCB5OiBwMi5jcDF5fTtcbiAgY29uc3QgYSA9IF9wb2ludEluTGluZShwMSwgY3AxLCB0KTtcbiAgY29uc3QgYiA9IF9wb2ludEluTGluZShjcDEsIGNwMiwgdCk7XG4gIGNvbnN0IGMgPSBfcG9pbnRJbkxpbmUoY3AyLCBwMiwgdCk7XG4gIGNvbnN0IGQgPSBfcG9pbnRJbkxpbmUoYSwgYiwgdCk7XG4gIGNvbnN0IGUgPSBfcG9pbnRJbkxpbmUoYiwgYywgdCk7XG4gIHJldHVybiBfcG9pbnRJbkxpbmUoZCwgZSwgdCk7XG59XG5cbmNvbnN0IGludGxDYWNoZSA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldE51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IGNhY2hlS2V5ID0gbG9jYWxlICsgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyk7XG4gIGxldCBmb3JtYXR0ZXIgPSBpbnRsQ2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgaWYgKCFmb3JtYXR0ZXIpIHtcbiAgICBmb3JtYXR0ZXIgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKTtcbiAgICBpbnRsQ2FjaGUuc2V0KGNhY2hlS2V5LCBmb3JtYXR0ZXIpO1xuICB9XG4gIHJldHVybiBmb3JtYXR0ZXI7XG59XG5mdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtLCBsb2NhbGUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGdldE51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpLmZvcm1hdChudW0pO1xufVxuXG5jb25zdCBnZXRSaWdodFRvTGVmdEFkYXB0ZXIgPSBmdW5jdGlvbihyZWN0WCwgd2lkdGgpIHtcbiAgcmV0dXJuIHtcbiAgICB4KHgpIHtcbiAgICAgIHJldHVybiByZWN0WCArIHJlY3RYICsgd2lkdGggLSB4O1xuICAgIH0sXG4gICAgc2V0V2lkdGgodykge1xuICAgICAgd2lkdGggPSB3O1xuICAgIH0sXG4gICAgdGV4dEFsaWduKGFsaWduKSB7XG4gICAgICBpZiAoYWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHJldHVybiBhbGlnbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhbGlnbiA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgfSxcbiAgICB4UGx1cyh4LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHggLSB2YWx1ZTtcbiAgICB9LFxuICAgIGxlZnRGb3JMdHIoeCwgaXRlbVdpZHRoKSB7XG4gICAgICByZXR1cm4geCAtIGl0ZW1XaWR0aDtcbiAgICB9LFxuICB9O1xufTtcbmNvbnN0IGdldExlZnRUb1JpZ2h0QWRhcHRlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHgoeCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfSxcbiAgICBzZXRXaWR0aCh3KSB7XG4gICAgfSxcbiAgICB0ZXh0QWxpZ24oYWxpZ24pIHtcbiAgICAgIHJldHVybiBhbGlnbjtcbiAgICB9LFxuICAgIHhQbHVzKHgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4geCArIHZhbHVlO1xuICAgIH0sXG4gICAgbGVmdEZvckx0cih4LCBfaXRlbVdpZHRoKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9LFxuICB9O1xufTtcbmZ1bmN0aW9uIGdldFJ0bEFkYXB0ZXIocnRsLCByZWN0WCwgd2lkdGgpIHtcbiAgcmV0dXJuIHJ0bCA/IGdldFJpZ2h0VG9MZWZ0QWRhcHRlcihyZWN0WCwgd2lkdGgpIDogZ2V0TGVmdFRvUmlnaHRBZGFwdGVyKCk7XG59XG5mdW5jdGlvbiBvdmVycmlkZVRleHREaXJlY3Rpb24oY3R4LCBkaXJlY3Rpb24pIHtcbiAgbGV0IHN0eWxlLCBvcmlnaW5hbDtcbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ2x0cicgfHwgZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHN0eWxlID0gY3R4LmNhbnZhcy5zdHlsZTtcbiAgICBvcmlnaW5hbCA9IFtcbiAgICAgIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2RpcmVjdGlvbicpLFxuICAgICAgc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eSgnZGlyZWN0aW9uJyksXG4gICAgXTtcbiAgICBzdHlsZS5zZXRQcm9wZXJ0eSgnZGlyZWN0aW9uJywgZGlyZWN0aW9uLCAnaW1wb3J0YW50Jyk7XG4gICAgY3R4LnByZXZUZXh0RGlyZWN0aW9uID0gb3JpZ2luYWw7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlc3RvcmVUZXh0RGlyZWN0aW9uKGN0eCwgb3JpZ2luYWwpIHtcbiAgaWYgKG9yaWdpbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZWxldGUgY3R4LnByZXZUZXh0RGlyZWN0aW9uO1xuICAgIGN0eC5jYW52YXMuc3R5bGUuc2V0UHJvcGVydHkoJ2RpcmVjdGlvbicsIG9yaWdpbmFsWzBdLCBvcmlnaW5hbFsxXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGbihwcm9wZXJ0eSkge1xuICBpZiAocHJvcGVydHkgPT09ICdhbmdsZScpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmV0d2VlbjogX2FuZ2xlQmV0d2VlbixcbiAgICAgIGNvbXBhcmU6IF9hbmdsZURpZmYsXG4gICAgICBub3JtYWxpemU6IF9ub3JtYWxpemVBbmdsZSxcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgYmV0d2VlbjogX2lzQmV0d2VlbixcbiAgICBjb21wYXJlOiAoYSwgYikgPT4gYSAtIGIsXG4gICAgbm9ybWFsaXplOiB4ID0+IHhcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNlZ21lbnQoe3N0YXJ0LCBlbmQsIGNvdW50LCBsb29wLCBzdHlsZX0pIHtcbiAgcmV0dXJuIHtcbiAgICBzdGFydDogc3RhcnQgJSBjb3VudCxcbiAgICBlbmQ6IGVuZCAlIGNvdW50LFxuICAgIGxvb3A6IGxvb3AgJiYgKGVuZCAtIHN0YXJ0ICsgMSkgJSBjb3VudCA9PT0gMCxcbiAgICBzdHlsZVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0U2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcykge1xuICBjb25zdCB7cHJvcGVydHksIHN0YXJ0OiBzdGFydEJvdW5kLCBlbmQ6IGVuZEJvdW5kfSA9IGJvdW5kcztcbiAgY29uc3Qge2JldHdlZW4sIG5vcm1hbGl6ZX0gPSBwcm9wZXJ0eUZuKHByb3BlcnR5KTtcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBsZXQge3N0YXJ0LCBlbmQsIGxvb3B9ID0gc2VnbWVudDtcbiAgbGV0IGksIGlsZW47XG4gIGlmIChsb29wKSB7XG4gICAgc3RhcnQgKz0gY291bnQ7XG4gICAgZW5kICs9IGNvdW50O1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaWYgKCFiZXR3ZWVuKG5vcm1hbGl6ZShwb2ludHNbc3RhcnQgJSBjb3VudF1bcHJvcGVydHldKSwgc3RhcnRCb3VuZCwgZW5kQm91bmQpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc3RhcnQtLTtcbiAgICAgIGVuZC0tO1xuICAgIH1cbiAgICBzdGFydCAlPSBjb3VudDtcbiAgICBlbmQgJT0gY291bnQ7XG4gIH1cbiAgaWYgKGVuZCA8IHN0YXJ0KSB7XG4gICAgZW5kICs9IGNvdW50O1xuICB9XG4gIHJldHVybiB7c3RhcnQsIGVuZCwgbG9vcCwgc3R5bGU6IHNlZ21lbnQuc3R5bGV9O1xufVxuZnVuY3Rpb24gX2JvdW5kU2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcykge1xuICBpZiAoIWJvdW5kcykge1xuICAgIHJldHVybiBbc2VnbWVudF07XG4gIH1cbiAgY29uc3Qge3Byb3BlcnR5LCBzdGFydDogc3RhcnRCb3VuZCwgZW5kOiBlbmRCb3VuZH0gPSBib3VuZHM7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgY29uc3Qge2NvbXBhcmUsIGJldHdlZW4sIG5vcm1hbGl6ZX0gPSBwcm9wZXJ0eUZuKHByb3BlcnR5KTtcbiAgY29uc3Qge3N0YXJ0LCBlbmQsIGxvb3AsIHN0eWxlfSA9IGdldFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBib3VuZHMpO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgbGV0IGluc2lkZSA9IGZhbHNlO1xuICBsZXQgc3ViU3RhcnQgPSBudWxsO1xuICBsZXQgdmFsdWUsIHBvaW50LCBwcmV2VmFsdWU7XG4gIGNvbnN0IHN0YXJ0SXNCZWZvcmUgPSAoKSA9PiBiZXR3ZWVuKHN0YXJ0Qm91bmQsIHByZXZWYWx1ZSwgdmFsdWUpICYmIGNvbXBhcmUoc3RhcnRCb3VuZCwgcHJldlZhbHVlKSAhPT0gMDtcbiAgY29uc3QgZW5kSXNCZWZvcmUgPSAoKSA9PiBjb21wYXJlKGVuZEJvdW5kLCB2YWx1ZSkgPT09IDAgfHwgYmV0d2VlbihlbmRCb3VuZCwgcHJldlZhbHVlLCB2YWx1ZSk7XG4gIGNvbnN0IHNob3VsZFN0YXJ0ID0gKCkgPT4gaW5zaWRlIHx8IHN0YXJ0SXNCZWZvcmUoKTtcbiAgY29uc3Qgc2hvdWxkU3RvcCA9ICgpID0+ICFpbnNpZGUgfHwgZW5kSXNCZWZvcmUoKTtcbiAgZm9yIChsZXQgaSA9IHN0YXJ0LCBwcmV2ID0gc3RhcnQ7IGkgPD0gZW5kOyArK2kpIHtcbiAgICBwb2ludCA9IHBvaW50c1tpICUgY291bnRdO1xuICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFsdWUgPSBub3JtYWxpemUocG9pbnRbcHJvcGVydHldKTtcbiAgICBpZiAodmFsdWUgPT09IHByZXZWYWx1ZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGluc2lkZSA9IGJldHdlZW4odmFsdWUsIHN0YXJ0Qm91bmQsIGVuZEJvdW5kKTtcbiAgICBpZiAoc3ViU3RhcnQgPT09IG51bGwgJiYgc2hvdWxkU3RhcnQoKSkge1xuICAgICAgc3ViU3RhcnQgPSBjb21wYXJlKHZhbHVlLCBzdGFydEJvdW5kKSA9PT0gMCA/IGkgOiBwcmV2O1xuICAgIH1cbiAgICBpZiAoc3ViU3RhcnQgIT09IG51bGwgJiYgc2hvdWxkU3RvcCgpKSB7XG4gICAgICByZXN1bHQucHVzaChub3JtYWxpemVTZWdtZW50KHtzdGFydDogc3ViU3RhcnQsIGVuZDogaSwgbG9vcCwgY291bnQsIHN0eWxlfSkpO1xuICAgICAgc3ViU3RhcnQgPSBudWxsO1xuICAgIH1cbiAgICBwcmV2ID0gaTtcbiAgICBwcmV2VmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBpZiAoc3ViU3RhcnQgIT09IG51bGwpIHtcbiAgICByZXN1bHQucHVzaChub3JtYWxpemVTZWdtZW50KHtzdGFydDogc3ViU3RhcnQsIGVuZCwgbG9vcCwgY291bnQsIHN0eWxlfSkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBfYm91bmRTZWdtZW50cyhsaW5lLCBib3VuZHMpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHN1YiA9IF9ib3VuZFNlZ21lbnQoc2VnbWVudHNbaV0sIGxpbmUucG9pbnRzLCBib3VuZHMpO1xuICAgIGlmIChzdWIubGVuZ3RoKSB7XG4gICAgICByZXN1bHQucHVzaCguLi5zdWIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZmluZFN0YXJ0QW5kRW5kKHBvaW50cywgY291bnQsIGxvb3AsIHNwYW5HYXBzKSB7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBlbmQgPSBjb3VudCAtIDE7XG4gIGlmIChsb29wICYmICFzcGFuR2Fwcykge1xuICAgIHdoaWxlIChzdGFydCA8IGNvdW50ICYmICFwb2ludHNbc3RhcnRdLnNraXApIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuICB9XG4gIHdoaWxlIChzdGFydCA8IGNvdW50ICYmIHBvaW50c1tzdGFydF0uc2tpcCkge1xuICAgIHN0YXJ0Kys7XG4gIH1cbiAgc3RhcnQgJT0gY291bnQ7XG4gIGlmIChsb29wKSB7XG4gICAgZW5kICs9IHN0YXJ0O1xuICB9XG4gIHdoaWxlIChlbmQgPiBzdGFydCAmJiBwb2ludHNbZW5kICUgY291bnRdLnNraXApIHtcbiAgICBlbmQtLTtcbiAgfVxuICBlbmQgJT0gY291bnQ7XG4gIHJldHVybiB7c3RhcnQsIGVuZH07XG59XG5mdW5jdGlvbiBzb2xpZFNlZ21lbnRzKHBvaW50cywgc3RhcnQsIG1heCwgbG9vcCkge1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBsZXQgbGFzdCA9IHN0YXJ0O1xuICBsZXQgcHJldiA9IHBvaW50c1tzdGFydF07XG4gIGxldCBlbmQ7XG4gIGZvciAoZW5kID0gc3RhcnQgKyAxOyBlbmQgPD0gbWF4OyArK2VuZCkge1xuICAgIGNvbnN0IGN1ciA9IHBvaW50c1tlbmQgJSBjb3VudF07XG4gICAgaWYgKGN1ci5za2lwIHx8IGN1ci5zdG9wKSB7XG4gICAgICBpZiAoIXByZXYuc2tpcCkge1xuICAgICAgICBsb29wID0gZmFsc2U7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtzdGFydDogc3RhcnQgJSBjb3VudCwgZW5kOiAoZW5kIC0gMSkgJSBjb3VudCwgbG9vcH0pO1xuICAgICAgICBzdGFydCA9IGxhc3QgPSBjdXIuc3RvcCA/IGVuZCA6IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3QgPSBlbmQ7XG4gICAgICBpZiAocHJldi5za2lwKSB7XG4gICAgICAgIHN0YXJ0ID0gZW5kO1xuICAgICAgfVxuICAgIH1cbiAgICBwcmV2ID0gY3VyO1xuICB9XG4gIGlmIChsYXN0ICE9PSBudWxsKSB7XG4gICAgcmVzdWx0LnB1c2goe3N0YXJ0OiBzdGFydCAlIGNvdW50LCBlbmQ6IGxhc3QgJSBjb3VudCwgbG9vcH0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBfY29tcHV0ZVNlZ21lbnRzKGxpbmUsIHNlZ21lbnRPcHRpb25zKSB7XG4gIGNvbnN0IHBvaW50cyA9IGxpbmUucG9pbnRzO1xuICBjb25zdCBzcGFuR2FwcyA9IGxpbmUub3B0aW9ucy5zcGFuR2FwcztcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBpZiAoIWNvdW50KSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGNvbnN0IGxvb3AgPSAhIWxpbmUuX2xvb3A7XG4gIGNvbnN0IHtzdGFydCwgZW5kfSA9IGZpbmRTdGFydEFuZEVuZChwb2ludHMsIGNvdW50LCBsb29wLCBzcGFuR2Fwcyk7XG4gIGlmIChzcGFuR2FwcyA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBzcGxpdEJ5U3R5bGVzKGxpbmUsIFt7c3RhcnQsIGVuZCwgbG9vcH1dLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbiAgfVxuICBjb25zdCBtYXggPSBlbmQgPCBzdGFydCA/IGVuZCArIGNvdW50IDogZW5kO1xuICBjb25zdCBjb21wbGV0ZUxvb3AgPSAhIWxpbmUuX2Z1bGxMb29wICYmIHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gY291bnQgLSAxO1xuICByZXR1cm4gc3BsaXRCeVN0eWxlcyhsaW5lLCBzb2xpZFNlZ21lbnRzKHBvaW50cywgc3RhcnQsIG1heCwgY29tcGxldGVMb29wKSwgcG9pbnRzLCBzZWdtZW50T3B0aW9ucyk7XG59XG5mdW5jdGlvbiBzcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKSB7XG4gIGlmICghc2VnbWVudE9wdGlvbnMgfHwgIXNlZ21lbnRPcHRpb25zLnNldENvbnRleHQgfHwgIXBvaW50cykge1xuICAgIHJldHVybiBzZWdtZW50cztcbiAgfVxuICByZXR1cm4gZG9TcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGRvU3BsaXRCeVN0eWxlcyhsaW5lLCBzZWdtZW50cywgcG9pbnRzLCBzZWdtZW50T3B0aW9ucykge1xuICBjb25zdCBjaGFydENvbnRleHQgPSBsaW5lLl9jaGFydC5nZXRDb250ZXh0KCk7XG4gIGNvbnN0IGJhc2VTdHlsZSA9IHJlYWRTdHlsZShsaW5lLm9wdGlvbnMpO1xuICBjb25zdCB7X2RhdGFzZXRJbmRleDogZGF0YXNldEluZGV4LCBvcHRpb25zOiB7c3BhbkdhcHN9fSA9IGxpbmU7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGxldCBwcmV2U3R5bGUgPSBiYXNlU3R5bGU7XG4gIGxldCBzdGFydCA9IHNlZ21lbnRzWzBdLnN0YXJ0O1xuICBsZXQgaSA9IHN0YXJ0O1xuICBmdW5jdGlvbiBhZGRTdHlsZShzLCBlLCBsLCBzdCkge1xuICAgIGNvbnN0IGRpciA9IHNwYW5HYXBzID8gLTEgOiAxO1xuICAgIGlmIChzID09PSBlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHMgKz0gY291bnQ7XG4gICAgd2hpbGUgKHBvaW50c1tzICUgY291bnRdLnNraXApIHtcbiAgICAgIHMgLT0gZGlyO1xuICAgIH1cbiAgICB3aGlsZSAocG9pbnRzW2UgJSBjb3VudF0uc2tpcCkge1xuICAgICAgZSArPSBkaXI7XG4gICAgfVxuICAgIGlmIChzICUgY291bnQgIT09IGUgJSBjb3VudCkge1xuICAgICAgcmVzdWx0LnB1c2goe3N0YXJ0OiBzICUgY291bnQsIGVuZDogZSAlIGNvdW50LCBsb29wOiBsLCBzdHlsZTogc3R9KTtcbiAgICAgIHByZXZTdHlsZSA9IHN0O1xuICAgICAgc3RhcnQgPSBlICUgY291bnQ7XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xuICAgIHN0YXJ0ID0gc3BhbkdhcHMgPyBzdGFydCA6IHNlZ21lbnQuc3RhcnQ7XG4gICAgbGV0IHByZXYgPSBwb2ludHNbc3RhcnQgJSBjb3VudF07XG4gICAgbGV0IHN0eWxlO1xuICAgIGZvciAoaSA9IHN0YXJ0ICsgMTsgaSA8PSBzZWdtZW50LmVuZDsgaSsrKSB7XG4gICAgICBjb25zdCBwdCA9IHBvaW50c1tpICUgY291bnRdO1xuICAgICAgc3R5bGUgPSByZWFkU3R5bGUoc2VnbWVudE9wdGlvbnMuc2V0Q29udGV4dChjcmVhdGVDb250ZXh0KGNoYXJ0Q29udGV4dCwge1xuICAgICAgICB0eXBlOiAnc2VnbWVudCcsXG4gICAgICAgIHAwOiBwcmV2LFxuICAgICAgICBwMTogcHQsXG4gICAgICAgIHAwRGF0YUluZGV4OiAoaSAtIDEpICUgY291bnQsXG4gICAgICAgIHAxRGF0YUluZGV4OiBpICUgY291bnQsXG4gICAgICAgIGRhdGFzZXRJbmRleFxuICAgICAgfSkpKTtcbiAgICAgIGlmIChzdHlsZUNoYW5nZWQoc3R5bGUsIHByZXZTdHlsZSkpIHtcbiAgICAgICAgYWRkU3R5bGUoc3RhcnQsIGkgLSAxLCBzZWdtZW50Lmxvb3AsIHByZXZTdHlsZSk7XG4gICAgICB9XG4gICAgICBwcmV2ID0gcHQ7XG4gICAgICBwcmV2U3R5bGUgPSBzdHlsZTtcbiAgICB9XG4gICAgaWYgKHN0YXJ0IDwgaSAtIDEpIHtcbiAgICAgIGFkZFN0eWxlKHN0YXJ0LCBpIC0gMSwgc2VnbWVudC5sb29wLCBwcmV2U3R5bGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcmVhZFN0eWxlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLFxuICAgIGJvcmRlckNhcFN0eWxlOiBvcHRpb25zLmJvcmRlckNhcFN0eWxlLFxuICAgIGJvcmRlckRhc2g6IG9wdGlvbnMuYm9yZGVyRGFzaCxcbiAgICBib3JkZXJEYXNoT2Zmc2V0OiBvcHRpb25zLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgYm9yZGVySm9pblN0eWxlOiBvcHRpb25zLmJvcmRlckpvaW5TdHlsZSxcbiAgICBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcbiAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvclxuICB9O1xufVxuZnVuY3Rpb24gc3R5bGVDaGFuZ2VkKHN0eWxlLCBwcmV2U3R5bGUpIHtcbiAgcmV0dXJuIHByZXZTdHlsZSAmJiBKU09OLnN0cmluZ2lmeShzdHlsZSkgIT09IEpTT04uc3RyaW5naWZ5KHByZXZTdHlsZSk7XG59XG5cbmV4cG9ydCB7IF9pc1BvaW50SW5BcmVhIGFzICQsIF9mYWN0b3JpemUgYXMgQSwgZmluaXRlT3JEZWZhdWx0IGFzIEIsIGNhbGxiYWNrIGFzIEMsIF9hZGRHcmFjZSBhcyBELCBfbGltaXRWYWx1ZSBhcyBFLCB0b0RlZ3JlZXMgYXMgRiwgX21lYXN1cmVUZXh0IGFzIEcsIEhBTEZfUEkgYXMgSCwgX2ludDE2UmFuZ2UgYXMgSSwgX2FsaWduUGl4ZWwgYXMgSiwgdG9QYWRkaW5nIGFzIEssIGNsaXBBcmVhIGFzIEwsIHJlbmRlclRleHQgYXMgTSwgdW5jbGlwQXJlYSBhcyBOLCB0b0ZvbnQgYXMgTywgUEkgYXMgUCwgZWFjaCBhcyBRLCBfdG9MZWZ0UmlnaHRDZW50ZXIgYXMgUiwgX2FsaWduU3RhcnRFbmQgYXMgUywgVEFVIGFzIFQsIG92ZXJyaWRlcyBhcyBVLCBtZXJnZSBhcyBWLCBfY2FwaXRhbGl6ZSBhcyBXLCBnZXRSZWxhdGl2ZVBvc2l0aW9uIGFzIFgsIF9ybG9va3VwQnlLZXkgYXMgWSwgX2xvb2t1cEJ5S2V5IGFzIFosIF9hcnJheVVuaXF1ZSBhcyBfLCByZXNvbHZlIGFzIGEsIHRvTGluZUhlaWdodCBhcyBhJCwgZ2V0QW5nbGVGcm9tUG9pbnQgYXMgYTAsIGdldE1heGltdW1TaXplIGFzIGExLCBfZ2V0UGFyZW50Tm9kZSBhcyBhMiwgcmVhZFVzZWRTaXplIGFzIGEzLCB0aHJvdHRsZWQgYXMgYTQsIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgYXMgYTUsIF9pc0RvbVN1cHBvcnRlZCBhcyBhNiwgZGVzY3JpcHRvcnMgYXMgYTcsIGlzRnVuY3Rpb24gYXMgYTgsIF9hdHRhY2hDb250ZXh0IGFzIGE5LCBnZXRSdGxBZGFwdGVyIGFzIGFBLCBvdmVycmlkZVRleHREaXJlY3Rpb24gYXMgYUIsIF90ZXh0WCBhcyBhQywgcmVzdG9yZVRleHREaXJlY3Rpb24gYXMgYUQsIGRyYXdQb2ludExlZ2VuZCBhcyBhRSwgbm9vcCBhcyBhRiwgZGlzdGFuY2VCZXR3ZWVuUG9pbnRzIGFzIGFHLCBfc2V0TWluQW5kTWF4QnlLZXkgYXMgYUgsIG5pY2VOdW0gYXMgYUksIGFsbW9zdFdob2xlIGFzIGFKLCBhbG1vc3RFcXVhbHMgYXMgYUssIF9kZWNpbWFsUGxhY2VzIGFzIGFMLCBfbG9uZ2VzdFRleHQgYXMgYU0sIF9maWx0ZXJCZXR3ZWVuIGFzIGFOLCBfbG9va3VwIGFzIGFPLCBpc1BhdHRlcm5PckdyYWRpZW50IGFzIGFQLCBnZXRIb3ZlckNvbG9yIGFzIGFRLCBjbG9uZSQxIGFzIGFSLCBfbWVyZ2VyIGFzIGFTLCBfbWVyZ2VySWYgYXMgYVQsIF9kZXByZWNhdGVkIGFzIGFVLCBfc3BsaXRLZXkgYXMgYVYsIHRvRm9udFN0cmluZyBhcyBhVywgc3BsaW5lQ3VydmUgYXMgYVgsIHNwbGluZUN1cnZlTW9ub3RvbmUgYXMgYVksIGdldFN0eWxlIGFzIGFaLCBmb250U3RyaW5nIGFzIGFfLCBfY3JlYXRlUmVzb2x2ZXIgYXMgYWEsIF9kZXNjcmlwdG9ycyBhcyBhYiwgbWVyZ2VJZiBhcyBhYywgdWlkIGFzIGFkLCBkZWJvdW5jZSBhcyBhZSwgcmV0aW5hU2NhbGUgYXMgYWYsIGNsZWFyQ2FudmFzIGFzIGFnLCBzZXRzRXF1YWwgYXMgYWgsIF9lbGVtZW50c0VxdWFsIGFzIGFpLCBfaXNDbGlja0V2ZW50IGFzIGFqLCBfaXNCZXR3ZWVuIGFzIGFrLCBfcmVhZFZhbHVlVG9Qcm9wcyBhcyBhbCwgX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMgYXMgYW0sIF9jb21wdXRlU2VnbWVudHMgYXMgYW4sIF9ib3VuZFNlZ21lbnRzIGFzIGFvLCBfc3RlcHBlZEludGVycG9sYXRpb24gYXMgYXAsIF9iZXppZXJJbnRlcnBvbGF0aW9uIGFzIGFxLCBfcG9pbnRJbkxpbmUgYXMgYXIsIF9zdGVwcGVkTGluZVRvIGFzIGFzLCBfYmV6aWVyQ3VydmVUbyBhcyBhdCwgZHJhd1BvaW50IGFzIGF1LCBhZGRSb3VuZGVkUmVjdFBhdGggYXMgYXYsIHRvVFJCTCBhcyBhdywgdG9UUkJMQ29ybmVycyBhcyBheCwgX2JvdW5kU2VnbWVudCBhcyBheSwgX25vcm1hbGl6ZUFuZ2xlIGFzIGF6LCBpc0FycmF5IGFzIGIsIFBJVEFVIGFzIGIwLCBJTkZJTklUWSBhcyBiMSwgUkFEX1BFUl9ERUcgYXMgYjIsIFFVQVJURVJfUEkgYXMgYjMsIFRXT19USElSRFNfUEkgYXMgYjQsIF9hbmdsZURpZmYgYXMgYjUsIGNvbG9yIGFzIGMsIGRlZmF1bHRzIGFzIGQsIGVmZmVjdHMgYXMgZSwgcmVzb2x2ZU9iamVjdEtleSBhcyBmLCBpc051bWJlckZpbml0ZSBhcyBnLCBjcmVhdGVDb250ZXh0IGFzIGgsIGlzT2JqZWN0IGFzIGksIGRlZmluZWQgYXMgaiwgaXNOdWxsT3JVbmRlZiBhcyBrLCBsaXN0ZW5BcnJheUV2ZW50cyBhcyBsLCB0b1BlcmNlbnRhZ2UgYXMgbSwgdG9EaW1lbnNpb24gYXMgbiwgZm9ybWF0TnVtYmVyIGFzIG8sIF9hbmdsZUJldHdlZW4gYXMgcCwgX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMgYXMgcSwgcmVxdWVzdEFuaW1GcmFtZSBhcyByLCBzaWduIGFzIHMsIHRvUmFkaWFucyBhcyB0LCB1bmxpc3RlbkFycmF5RXZlbnRzIGFzIHUsIHZhbHVlT3JEZWZhdWx0IGFzIHYsIF9zY2FsZVJhbmdlc0NoYW5nZWQgYXMgdywgaXNOdW1iZXIgYXMgeCwgX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlIGFzIHksIGxvZzEwIGFzIHogfTtcbiIsIi8qIVxuICAqIHZ1ZS1yb3V0ZXIgdjQuMS41XG4gICogKGMpIDIwMjIgRWR1YXJkbyBTYW4gTWFydGluIE1vcm90ZVxuICAqIEBsaWNlbnNlIE1JVFxuICAqL1xuaW1wb3J0IHsgZ2V0Q3VycmVudEluc3RhbmNlLCBpbmplY3QsIG9uVW5tb3VudGVkLCBvbkRlYWN0aXZhdGVkLCBvbkFjdGl2YXRlZCwgY29tcHV0ZWQsIHVucmVmLCB3YXRjaEVmZmVjdCwgZGVmaW5lQ29tcG9uZW50LCByZWFjdGl2ZSwgaCwgcHJvdmlkZSwgcmVmLCB3YXRjaCwgc2hhbGxvd1JlZiwgbmV4dFRpY2sgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgc2V0dXBEZXZ0b29sc1BsdWdpbiB9IGZyb20gJ0B2dWUvZGV2dG9vbHMtYXBpJztcblxuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5cbmZ1bmN0aW9uIGlzRVNNb2R1bGUob2JqKSB7XHJcbiAgICByZXR1cm4gb2JqLl9fZXNNb2R1bGUgfHwgb2JqW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnO1xyXG59XHJcbmNvbnN0IGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XHJcbmZ1bmN0aW9uIGFwcGx5VG9QYXJhbXMoZm4sIHBhcmFtcykge1xyXG4gICAgY29uc3QgbmV3UGFyYW1zID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtc1trZXldO1xyXG4gICAgICAgIG5ld1BhcmFtc1trZXldID0gaXNBcnJheSh2YWx1ZSlcclxuICAgICAgICAgICAgPyB2YWx1ZS5tYXAoZm4pXHJcbiAgICAgICAgICAgIDogZm4odmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ld1BhcmFtcztcclxufVxyXG5jb25zdCBub29wID0gKCkgPT4geyB9O1xyXG4vKipcclxuICogVHlwZXNhZmUgYWx0ZXJuYXRpdmUgdG8gQXJyYXkuaXNBcnJheVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvcHVsbC80ODIyOFxyXG4gKi9cclxuY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbmZ1bmN0aW9uIHdhcm4obXNnKSB7XHJcbiAgICAvLyBhdm9pZCB1c2luZyAuLi5hcmdzIGFzIGl0IGJyZWFrcyBpbiBvbGRlciBFZGdlIGJ1aWxkc1xyXG4gICAgY29uc3QgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKS5zbGljZSgxKTtcclxuICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBbJ1tWdWUgUm91dGVyIHdhcm5dOiAnICsgbXNnXS5jb25jYXQoYXJncykpO1xyXG59XG5cbmNvbnN0IFRSQUlMSU5HX1NMQVNIX1JFID0gL1xcLyQvO1xyXG5jb25zdCByZW1vdmVUcmFpbGluZ1NsYXNoID0gKHBhdGgpID0+IHBhdGgucmVwbGFjZShUUkFJTElOR19TTEFTSF9SRSwgJycpO1xyXG4vKipcclxuICogVHJhbnNmb3JtcyBhIFVSSSBpbnRvIGEgbm9ybWFsaXplZCBoaXN0b3J5IGxvY2F0aW9uXHJcbiAqXHJcbiAqIEBwYXJhbSBwYXJzZVF1ZXJ5XHJcbiAqIEBwYXJhbSBsb2NhdGlvbiAtIFVSSSB0byBub3JtYWxpemVcclxuICogQHBhcmFtIGN1cnJlbnRMb2NhdGlvbiAtIGN1cnJlbnQgYWJzb2x1dGUgbG9jYXRpb24uIEFsbG93cyByZXNvbHZpbmcgcmVsYXRpdmVcclxuICogcGF0aHMuIE11c3Qgc3RhcnQgd2l0aCBgL2AuIERlZmF1bHRzIHRvIGAvYFxyXG4gKiBAcmV0dXJucyBhIG5vcm1hbGl6ZWQgaGlzdG9yeSBsb2NhdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VVUkwocGFyc2VRdWVyeSwgbG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbiA9ICcvJykge1xyXG4gICAgbGV0IHBhdGgsIHF1ZXJ5ID0ge30sIHNlYXJjaFN0cmluZyA9ICcnLCBoYXNoID0gJyc7XHJcbiAgICAvLyBDb3VsZCB1c2UgVVJMIGFuZCBVUkxTZWFyY2hQYXJhbXMgYnV0IElFIDExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxyXG4gICAgLy8gVE9ETzogbW92ZSB0byBuZXcgVVJMKClcclxuICAgIGNvbnN0IGhhc2hQb3MgPSBsb2NhdGlvbi5pbmRleE9mKCcjJyk7XHJcbiAgICBsZXQgc2VhcmNoUG9zID0gbG9jYXRpb24uaW5kZXhPZignPycpO1xyXG4gICAgLy8gdGhlIGhhc2ggYXBwZWFycyBiZWZvcmUgdGhlIHNlYXJjaCwgc28gaXQncyBub3QgcGFydCBvZiB0aGUgc2VhcmNoIHN0cmluZ1xyXG4gICAgaWYgKGhhc2hQb3MgPCBzZWFyY2hQb3MgJiYgaGFzaFBvcyA+PSAwKSB7XHJcbiAgICAgICAgc2VhcmNoUG9zID0gLTE7XHJcbiAgICB9XHJcbiAgICBpZiAoc2VhcmNoUG9zID4gLTEpIHtcclxuICAgICAgICBwYXRoID0gbG9jYXRpb24uc2xpY2UoMCwgc2VhcmNoUG9zKTtcclxuICAgICAgICBzZWFyY2hTdHJpbmcgPSBsb2NhdGlvbi5zbGljZShzZWFyY2hQb3MgKyAxLCBoYXNoUG9zID4gLTEgPyBoYXNoUG9zIDogbG9jYXRpb24ubGVuZ3RoKTtcclxuICAgICAgICBxdWVyeSA9IHBhcnNlUXVlcnkoc2VhcmNoU3RyaW5nKTtcclxuICAgIH1cclxuICAgIGlmIChoYXNoUG9zID4gLTEpIHtcclxuICAgICAgICBwYXRoID0gcGF0aCB8fCBsb2NhdGlvbi5zbGljZSgwLCBoYXNoUG9zKTtcclxuICAgICAgICAvLyBrZWVwIHRoZSAjIGNoYXJhY3RlclxyXG4gICAgICAgIGhhc2ggPSBsb2NhdGlvbi5zbGljZShoYXNoUG9zLCBsb2NhdGlvbi5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgLy8gbm8gc2VhcmNoIGFuZCBubyBxdWVyeVxyXG4gICAgcGF0aCA9IHJlc29sdmVSZWxhdGl2ZVBhdGgocGF0aCAhPSBudWxsID8gcGF0aCA6IGxvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24pO1xyXG4gICAgLy8gZW1wdHkgcGF0aCBtZWFucyBhIHJlbGF0aXZlIHF1ZXJ5IG9yIGhhc2ggYD9mb289ZmAsIGAjdGhpbmdgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGZ1bGxQYXRoOiBwYXRoICsgKHNlYXJjaFN0cmluZyAmJiAnPycpICsgc2VhcmNoU3RyaW5nICsgaGFzaCxcclxuICAgICAgICBwYXRoLFxyXG4gICAgICAgIHF1ZXJ5LFxyXG4gICAgICAgIGhhc2gsXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBTdHJpbmdpZmllcyBhIFVSTCBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHN0cmluZ2lmeVF1ZXJ5XHJcbiAqIEBwYXJhbSBsb2NhdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaW5naWZ5VVJMKHN0cmluZ2lmeVF1ZXJ5LCBsb2NhdGlvbikge1xyXG4gICAgY29uc3QgcXVlcnkgPSBsb2NhdGlvbi5xdWVyeSA/IHN0cmluZ2lmeVF1ZXJ5KGxvY2F0aW9uLnF1ZXJ5KSA6ICcnO1xyXG4gICAgcmV0dXJuIGxvY2F0aW9uLnBhdGggKyAocXVlcnkgJiYgJz8nKSArIHF1ZXJ5ICsgKGxvY2F0aW9uLmhhc2ggfHwgJycpO1xyXG59XHJcbi8qKlxyXG4gKiBTdHJpcHMgb2ZmIHRoZSBiYXNlIGZyb20gdGhlIGJlZ2lubmluZyBvZiBhIGxvY2F0aW9uLnBhdGhuYW1lIGluIGEgbm9uLWNhc2Utc2Vuc2l0aXZlIHdheS5cclxuICpcclxuICogQHBhcmFtIHBhdGhuYW1lIC0gbG9jYXRpb24ucGF0aG5hbWVcclxuICogQHBhcmFtIGJhc2UgLSBiYXNlIHRvIHN0cmlwIG9mZlxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaXBCYXNlKHBhdGhuYW1lLCBiYXNlKSB7XHJcbiAgICAvLyBubyBiYXNlIG9yIGJhc2UgaXMgbm90IGZvdW5kIGF0IHRoZSBiZWdpbm5pbmdcclxuICAgIGlmICghYmFzZSB8fCAhcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2UudG9Mb3dlckNhc2UoKSkpXHJcbiAgICAgICAgcmV0dXJuIHBhdGhuYW1lO1xyXG4gICAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKGJhc2UubGVuZ3RoKSB8fCAnLyc7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrcyBpZiB0d28gUm91dGVMb2NhdGlvbiBhcmUgZXF1YWwuIFRoaXMgbWVhbnMgdGhhdCBib3RoIGxvY2F0aW9ucyBhcmVcclxuICogcG9pbnRpbmcgdG93YXJkcyB0aGUgc2FtZSB7QGxpbmsgUm91dGVSZWNvcmR9IGFuZCB0aGF0IGFsbCBgcGFyYW1zYCwgYHF1ZXJ5YFxyXG4gKiBwYXJhbWV0ZXJzIGFuZCBgaGFzaGAgYXJlIHRoZSBzYW1lXHJcbiAqXHJcbiAqIEBwYXJhbSBhIC0gZmlyc3Qge0BsaW5rIFJvdXRlTG9jYXRpb259XHJcbiAqIEBwYXJhbSBiIC0gc2Vjb25kIHtAbGluayBSb3V0ZUxvY2F0aW9ufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNTYW1lUm91dGVMb2NhdGlvbihzdHJpbmdpZnlRdWVyeSwgYSwgYikge1xyXG4gICAgY29uc3QgYUxhc3RJbmRleCA9IGEubWF0Y2hlZC5sZW5ndGggLSAxO1xyXG4gICAgY29uc3QgYkxhc3RJbmRleCA9IGIubWF0Y2hlZC5sZW5ndGggLSAxO1xyXG4gICAgcmV0dXJuIChhTGFzdEluZGV4ID4gLTEgJiZcclxuICAgICAgICBhTGFzdEluZGV4ID09PSBiTGFzdEluZGV4ICYmXHJcbiAgICAgICAgaXNTYW1lUm91dGVSZWNvcmQoYS5tYXRjaGVkW2FMYXN0SW5kZXhdLCBiLm1hdGNoZWRbYkxhc3RJbmRleF0pICYmXHJcbiAgICAgICAgaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtcyhhLnBhcmFtcywgYi5wYXJhbXMpICYmXHJcbiAgICAgICAgc3RyaW5naWZ5UXVlcnkoYS5xdWVyeSkgPT09IHN0cmluZ2lmeVF1ZXJ5KGIucXVlcnkpICYmXHJcbiAgICAgICAgYS5oYXNoID09PSBiLmhhc2gpO1xyXG59XHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0d28gYFJvdXRlUmVjb3Jkc2AgYXJlIGVxdWFsLiBUYWtlcyBpbnRvIGFjY291bnQgYWxpYXNlczogdGhleSBhcmVcclxuICogY29uc2lkZXJlZCBlcXVhbCB0byB0aGUgYFJvdXRlUmVjb3JkYCB0aGV5IGFyZSBhbGlhc2luZy5cclxuICpcclxuICogQHBhcmFtIGEgLSBmaXJzdCB7QGxpbmsgUm91dGVSZWNvcmR9XHJcbiAqIEBwYXJhbSBiIC0gc2Vjb25kIHtAbGluayBSb3V0ZVJlY29yZH1cclxuICovXHJcbmZ1bmN0aW9uIGlzU2FtZVJvdXRlUmVjb3JkKGEsIGIpIHtcclxuICAgIC8vIHNpbmNlIHRoZSBvcmlnaW5hbCByZWNvcmQgaGFzIGFuIHVuZGVmaW5lZCB2YWx1ZSBmb3IgYWxpYXNPZlxyXG4gICAgLy8gYnV0IGFsbCBhbGlhc2VzIHBvaW50IHRvIHRoZSBvcmlnaW5hbCByZWNvcmQsIHRoaXMgd2lsbCBhbHdheXMgY29tcGFyZVxyXG4gICAgLy8gdGhlIG9yaWdpbmFsIHJlY29yZFxyXG4gICAgcmV0dXJuIChhLmFsaWFzT2YgfHwgYSkgPT09IChiLmFsaWFzT2YgfHwgYik7XHJcbn1cclxuZnVuY3Rpb24gaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtcyhhLCBiKSB7XHJcbiAgICBpZiAoT2JqZWN0LmtleXMoYSkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xyXG4gICAgICAgIGlmICghaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtc1ZhbHVlKGFba2V5XSwgYltrZXldKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtc1ZhbHVlKGEsIGIpIHtcclxuICAgIHJldHVybiBpc0FycmF5KGEpXHJcbiAgICAgICAgPyBpc0VxdWl2YWxlbnRBcnJheShhLCBiKVxyXG4gICAgICAgIDogaXNBcnJheShiKVxyXG4gICAgICAgICAgICA/IGlzRXF1aXZhbGVudEFycmF5KGIsIGEpXHJcbiAgICAgICAgICAgIDogYSA9PT0gYjtcclxufVxyXG4vKipcclxuICogQ2hlY2sgaWYgdHdvIGFycmF5cyBhcmUgdGhlIHNhbWUgb3IgaWYgYW4gYXJyYXkgd2l0aCBvbmUgc2luZ2xlIGVudHJ5IGlzIHRoZVxyXG4gKiBzYW1lIGFzIGFub3RoZXIgcHJpbWl0aXZlIHZhbHVlLiBVc2VkIHRvIGNoZWNrIHF1ZXJ5IGFuZCBwYXJhbWV0ZXJzXHJcbiAqXHJcbiAqIEBwYXJhbSBhIC0gYXJyYXkgb2YgdmFsdWVzXHJcbiAqIEBwYXJhbSBiIC0gYXJyYXkgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIHZhbHVlXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0VxdWl2YWxlbnRBcnJheShhLCBiKSB7XHJcbiAgICByZXR1cm4gaXNBcnJheShiKVxyXG4gICAgICAgID8gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoKHZhbHVlLCBpKSA9PiB2YWx1ZSA9PT0gYltpXSlcclxuICAgICAgICA6IGEubGVuZ3RoID09PSAxICYmIGFbMF0gPT09IGI7XHJcbn1cclxuLyoqXHJcbiAqIFJlc29sdmVzIGEgcmVsYXRpdmUgcGF0aCB0aGF0IHN0YXJ0cyB3aXRoIGAuYC5cclxuICpcclxuICogQHBhcmFtIHRvIC0gcGF0aCBsb2NhdGlvbiB3ZSBhcmUgcmVzb2x2aW5nXHJcbiAqIEBwYXJhbSBmcm9tIC0gY3VycmVudExvY2F0aW9uLnBhdGgsIHNob3VsZCBzdGFydCB3aXRoIGAvYFxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZVJlbGF0aXZlUGF0aCh0bywgZnJvbSkge1xyXG4gICAgaWYgKHRvLnN0YXJ0c1dpdGgoJy8nKSlcclxuICAgICAgICByZXR1cm4gdG87XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFmcm9tLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG4gICAgICAgIHdhcm4oYENhbm5vdCByZXNvbHZlIGEgcmVsYXRpdmUgbG9jYXRpb24gd2l0aG91dCBhbiBhYnNvbHV0ZSBwYXRoLiBUcnlpbmcgdG8gcmVzb2x2ZSBcIiR7dG99XCIgZnJvbSBcIiR7ZnJvbX1cIi4gSXQgc2hvdWxkIGxvb2sgbGlrZSBcIi8ke2Zyb219XCIuYCk7XHJcbiAgICAgICAgcmV0dXJuIHRvO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0bylcclxuICAgICAgICByZXR1cm4gZnJvbTtcclxuICAgIGNvbnN0IGZyb21TZWdtZW50cyA9IGZyb20uc3BsaXQoJy8nKTtcclxuICAgIGNvbnN0IHRvU2VnbWVudHMgPSB0by5zcGxpdCgnLycpO1xyXG4gICAgbGV0IHBvc2l0aW9uID0gZnJvbVNlZ21lbnRzLmxlbmd0aCAtIDE7XHJcbiAgICBsZXQgdG9Qb3NpdGlvbjtcclxuICAgIGxldCBzZWdtZW50O1xyXG4gICAgZm9yICh0b1Bvc2l0aW9uID0gMDsgdG9Qb3NpdGlvbiA8IHRvU2VnbWVudHMubGVuZ3RoOyB0b1Bvc2l0aW9uKyspIHtcclxuICAgICAgICBzZWdtZW50ID0gdG9TZWdtZW50c1t0b1Bvc2l0aW9uXTtcclxuICAgICAgICAvLyB3ZSBzdGF5IG9uIHRoZSBzYW1lIHBvc2l0aW9uXHJcbiAgICAgICAgaWYgKHNlZ21lbnQgPT09ICcuJylcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgLy8gZ28gdXAgaW4gdGhlIGZyb20gYXJyYXlcclxuICAgICAgICBpZiAoc2VnbWVudCA9PT0gJy4uJykge1xyXG4gICAgICAgICAgICAvLyB3ZSBjYW4ndCBnbyBiZWxvdyB6ZXJvLCBidXQgd2Ugc3RpbGwgbmVlZCB0byBpbmNyZW1lbnQgdG9Qb3NpdGlvblxyXG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPiAxKVxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24tLTtcclxuICAgICAgICAgICAgLy8gY29udGludWVcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gd2UgcmVhY2hlZCBhIG5vbi1yZWxhdGl2ZSBwYXRoLCB3ZSBzdG9wIGhlcmVcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChmcm9tU2VnbWVudHMuc2xpY2UoMCwgcG9zaXRpb24pLmpvaW4oJy8nKSArXHJcbiAgICAgICAgJy8nICtcclxuICAgICAgICB0b1NlZ21lbnRzXHJcbiAgICAgICAgICAgIC8vIGVuc3VyZSB3ZSB1c2UgYXQgbGVhc3QgdGhlIGxhc3QgZWxlbWVudCBpbiB0aGUgdG9TZWdtZW50c1xyXG4gICAgICAgICAgICAuc2xpY2UodG9Qb3NpdGlvbiAtICh0b1Bvc2l0aW9uID09PSB0b1NlZ21lbnRzLmxlbmd0aCA/IDEgOiAwKSlcclxuICAgICAgICAgICAgLmpvaW4oJy8nKSk7XHJcbn1cblxudmFyIE5hdmlnYXRpb25UeXBlO1xyXG4oZnVuY3Rpb24gKE5hdmlnYXRpb25UeXBlKSB7XHJcbiAgICBOYXZpZ2F0aW9uVHlwZVtcInBvcFwiXSA9IFwicG9wXCI7XHJcbiAgICBOYXZpZ2F0aW9uVHlwZVtcInB1c2hcIl0gPSBcInB1c2hcIjtcclxufSkoTmF2aWdhdGlvblR5cGUgfHwgKE5hdmlnYXRpb25UeXBlID0ge30pKTtcclxudmFyIE5hdmlnYXRpb25EaXJlY3Rpb247XHJcbihmdW5jdGlvbiAoTmF2aWdhdGlvbkRpcmVjdGlvbikge1xyXG4gICAgTmF2aWdhdGlvbkRpcmVjdGlvbltcImJhY2tcIl0gPSBcImJhY2tcIjtcclxuICAgIE5hdmlnYXRpb25EaXJlY3Rpb25bXCJmb3J3YXJkXCJdID0gXCJmb3J3YXJkXCI7XHJcbiAgICBOYXZpZ2F0aW9uRGlyZWN0aW9uW1widW5rbm93blwiXSA9IFwiXCI7XHJcbn0pKE5hdmlnYXRpb25EaXJlY3Rpb24gfHwgKE5hdmlnYXRpb25EaXJlY3Rpb24gPSB7fSkpO1xyXG4vKipcclxuICogU3RhcnRpbmcgbG9jYXRpb24gZm9yIEhpc3Rvcmllc1xyXG4gKi9cclxuY29uc3QgU1RBUlQgPSAnJztcclxuLy8gR2VuZXJpYyB1dGlsc1xyXG4vKipcclxuICogTm9ybWFsaXplcyBhIGJhc2UgYnkgcmVtb3ZpbmcgYW55IHRyYWlsaW5nIHNsYXNoIGFuZCByZWFkaW5nIHRoZSBiYXNlIHRhZyBpZlxyXG4gKiBwcmVzZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0gYmFzZSAtIGJhc2UgdG8gbm9ybWFsaXplXHJcbiAqL1xyXG5mdW5jdGlvbiBub3JtYWxpemVCYXNlKGJhc2UpIHtcclxuICAgIGlmICghYmFzZSkge1xyXG4gICAgICAgIGlmIChpc0Jyb3dzZXIpIHtcclxuICAgICAgICAgICAgLy8gcmVzcGVjdCA8YmFzZT4gdGFnXHJcbiAgICAgICAgICAgIGNvbnN0IGJhc2VFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcclxuICAgICAgICAgICAgYmFzZSA9IChiYXNlRWwgJiYgYmFzZUVsLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB8fCAnLyc7XHJcbiAgICAgICAgICAgIC8vIHN0cmlwIGZ1bGwgVVJMIG9yaWdpblxyXG4gICAgICAgICAgICBiYXNlID0gYmFzZS5yZXBsYWNlKC9eXFx3KzpcXC9cXC9bXlxcL10rLywgJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYmFzZSA9ICcvJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBlbnN1cmUgbGVhZGluZyBzbGFzaCB3aGVuIGl0IHdhcyByZW1vdmVkIGJ5IHRoZSByZWdleCBhYm92ZSBhdm9pZCBsZWFkaW5nXHJcbiAgICAvLyBzbGFzaCB3aXRoIGhhc2ggYmVjYXVzZSB0aGUgZmlsZSBjb3VsZCBiZSByZWFkIGZyb20gdGhlIGRpc2sgbGlrZSBmaWxlOi8vXHJcbiAgICAvLyBhbmQgdGhlIGxlYWRpbmcgc2xhc2ggd291bGQgY2F1c2UgcHJvYmxlbXNcclxuICAgIGlmIChiYXNlWzBdICE9PSAnLycgJiYgYmFzZVswXSAhPT0gJyMnKVxyXG4gICAgICAgIGJhc2UgPSAnLycgKyBiYXNlO1xyXG4gICAgLy8gcmVtb3ZlIHRoZSB0cmFpbGluZyBzbGFzaCBzbyBhbGwgb3RoZXIgbWV0aG9kIGNhbiBqdXN0IGRvIGBiYXNlICsgZnVsbFBhdGhgXHJcbiAgICAvLyB0byBidWlsZCBhbiBocmVmXHJcbiAgICByZXR1cm4gcmVtb3ZlVHJhaWxpbmdTbGFzaChiYXNlKTtcclxufVxyXG4vLyByZW1vdmUgYW55IGNoYXJhY3RlciBiZWZvcmUgdGhlIGhhc2hcclxuY29uc3QgQkVGT1JFX0hBU0hfUkUgPSAvXlteI10rIy87XHJcbmZ1bmN0aW9uIGNyZWF0ZUhyZWYoYmFzZSwgbG9jYXRpb24pIHtcclxuICAgIHJldHVybiBiYXNlLnJlcGxhY2UoQkVGT1JFX0hBU0hfUkUsICcjJykgKyBsb2NhdGlvbjtcclxufVxuXG5mdW5jdGlvbiBnZXRFbGVtZW50UG9zaXRpb24oZWwsIG9mZnNldCkge1xyXG4gICAgY29uc3QgZG9jUmVjdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIGNvbnN0IGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBiZWhhdmlvcjogb2Zmc2V0LmJlaGF2aW9yLFxyXG4gICAgICAgIGxlZnQ6IGVsUmVjdC5sZWZ0IC0gZG9jUmVjdC5sZWZ0IC0gKG9mZnNldC5sZWZ0IHx8IDApLFxyXG4gICAgICAgIHRvcDogZWxSZWN0LnRvcCAtIGRvY1JlY3QudG9wIC0gKG9mZnNldC50b3AgfHwgMCksXHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IGNvbXB1dGVTY3JvbGxQb3NpdGlvbiA9ICgpID0+ICh7XHJcbiAgICBsZWZ0OiB3aW5kb3cucGFnZVhPZmZzZXQsXHJcbiAgICB0b3A6IHdpbmRvdy5wYWdlWU9mZnNldCxcclxufSk7XHJcbmZ1bmN0aW9uIHNjcm9sbFRvUG9zaXRpb24ocG9zaXRpb24pIHtcclxuICAgIGxldCBzY3JvbGxUb09wdGlvbnM7XHJcbiAgICBpZiAoJ2VsJyBpbiBwb3NpdGlvbikge1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uRWwgPSBwb3NpdGlvbi5lbDtcclxuICAgICAgICBjb25zdCBpc0lkU2VsZWN0b3IgPSB0eXBlb2YgcG9zaXRpb25FbCA9PT0gJ3N0cmluZycgJiYgcG9zaXRpb25FbC5zdGFydHNXaXRoKCcjJyk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogYGlkYHMgY2FuIGFjY2VwdCBwcmV0dHkgbXVjaCBhbnkgY2hhcmFjdGVycywgaW5jbHVkaW5nIENTUyBjb21iaW5hdG9yc1xyXG4gICAgICAgICAqIGxpa2UgYD5gIG9yIGB+YC4gSXQncyBzdGlsbCBwb3NzaWJsZSB0byByZXRyaWV2ZSBlbGVtZW50cyB1c2luZ1xyXG4gICAgICAgICAqIGBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnficpYCBidXQgaXQgbmVlZHMgdG8gYmUgZXNjYXBlZCB3aGVuIHVzaW5nXHJcbiAgICAgICAgICogYGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNcXFxcficpYCBmb3IgaXQgdG8gYmUgdmFsaWQuIFRoZSBvbmx5XHJcbiAgICAgICAgICogcmVxdWlyZW1lbnRzIGZvciBgaWRgcyBhcmUgdGhlbSB0byBiZSB1bmlxdWUgb24gdGhlIHBhZ2UgYW5kIHRvIG5vdCBiZVxyXG4gICAgICAgICAqIGVtcHR5IChgaWQ9XCJcImApLiBCZWNhdXNlIG9mIHRoYXQsIHdoZW4gcGFzc2luZyBhbiBpZCBzZWxlY3RvciwgaXQgc2hvdWxkXHJcbiAgICAgICAgICogYmUgcHJvcGVybHkgZXNjYXBlZCBmb3IgaXQgdG8gd29yayB3aXRoIGBxdWVyeVNlbGVjdG9yYC4gV2UgY291bGQgY2hlY2tcclxuICAgICAgICAgKiBmb3IgdGhlIGlkIHNlbGVjdG9yIHRvIGJlIHNpbXBsZSAobm8gQ1NTIGNvbWJpbmF0b3JzIGArID5+YCkgYnV0IHRoYXRcclxuICAgICAgICAgKiB3b3VsZCBtYWtlIHRoaW5ncyBpbmNvbnNpc3RlbnQgc2luY2UgdGhleSBhcmUgdmFsaWQgY2hhcmFjdGVycyBmb3IgYW5cclxuICAgICAgICAgKiBgaWRgIGJ1dCB3b3VsZCBuZWVkIHRvIGJlIGVzY2FwZWQgd2hlbiB1c2luZyBgcXVlcnlTZWxlY3RvcmAsIGJyZWFraW5nXHJcbiAgICAgICAgICogdGhlaXIgdXNhZ2UgYW5kIGVuZGluZyB1cCBpbiBubyBzZWxlY3RvciByZXR1cm5lZC4gU2VsZWN0b3JzIG5lZWQgdG8gYmVcclxuICAgICAgICAgKiBlc2NhcGVkOlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogLSBgIzEtdGhpbmdgIGJlY29tZXMgYCNcXDMxIC10aGluZ2BcclxuICAgICAgICAgKiAtIGAjd2l0aH5zeW1ib2xzYCBiZWNvbWVzIGAjd2l0aFxcXFx+c3ltYm9sc2BcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIC0gTW9yZSBpbmZvcm1hdGlvbiBhYm91dCAgdGhlIHRvcGljIGNhbiBiZSBmb3VuZCBhdFxyXG4gICAgICAgICAqICAgaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2h0bWw1LWlkLWNsYXNzLlxyXG4gICAgICAgICAqIC0gUHJhY3RpY2FsIGV4YW1wbGU6IGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9kZW1vL2h0bWw1LWlkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB0eXBlb2YgcG9zaXRpb24uZWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNJZFNlbGVjdG9yIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwb3NpdGlvbi5lbC5zbGljZSgxKSkpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm91bmRFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9zaXRpb24uZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0lkU2VsZWN0b3IgJiYgZm91bmRFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBUaGUgc2VsZWN0b3IgXCIke3Bvc2l0aW9uLmVsfVwiIHNob3VsZCBiZSBwYXNzZWQgYXMgXCJlbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignJHtwb3NpdGlvbi5lbH0nKVwiIGJlY2F1c2UgaXQgc3RhcnRzIHdpdGggXCIjXCIuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiB0byBhdm9pZCBvdGhlciB3YXJuaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYFRoZSBzZWxlY3RvciBcIiR7cG9zaXRpb24uZWx9XCIgaXMgaW52YWxpZC4gSWYgeW91IGFyZSB1c2luZyBhbiBpZCBzZWxlY3RvciwgbWFrZSBzdXJlIHRvIGVzY2FwZSBpdC4gWW91IGNhbiBmaW5kIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgZXNjYXBpbmcgY2hhcmFjdGVycyBpbiBzZWxlY3RvcnMgYXQgaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2Nzcy1lc2NhcGVzIG9yIHVzZSBDU1MuZXNjYXBlIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ1NTL2VzY2FwZSkuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRvIGF2b2lkIG90aGVyIHdhcm5pbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGVsID0gdHlwZW9mIHBvc2l0aW9uRWwgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgID8gaXNJZFNlbGVjdG9yXHJcbiAgICAgICAgICAgICAgICA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBvc2l0aW9uRWwuc2xpY2UoMSkpXHJcbiAgICAgICAgICAgICAgICA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9zaXRpb25FbClcclxuICAgICAgICAgICAgOiBwb3NpdGlvbkVsO1xyXG4gICAgICAgIGlmICghZWwpIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICB3YXJuKGBDb3VsZG4ndCBmaW5kIGVsZW1lbnQgdXNpbmcgc2VsZWN0b3IgXCIke3Bvc2l0aW9uLmVsfVwiIHJldHVybmVkIGJ5IHNjcm9sbEJlaGF2aW9yLmApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNjcm9sbFRvT3B0aW9ucyA9IGdldEVsZW1lbnRQb3NpdGlvbihlbCwgcG9zaXRpb24pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgc2Nyb2xsVG9PcHRpb25zID0gcG9zaXRpb247XHJcbiAgICB9XHJcbiAgICBpZiAoJ3Njcm9sbEJlaGF2aW9yJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpXHJcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKHNjcm9sbFRvT3B0aW9ucyk7XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oc2Nyb2xsVG9PcHRpb25zLmxlZnQgIT0gbnVsbCA/IHNjcm9sbFRvT3B0aW9ucy5sZWZ0IDogd2luZG93LnBhZ2VYT2Zmc2V0LCBzY3JvbGxUb09wdGlvbnMudG9wICE9IG51bGwgPyBzY3JvbGxUb09wdGlvbnMudG9wIDogd2luZG93LnBhZ2VZT2Zmc2V0KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRTY3JvbGxLZXkocGF0aCwgZGVsdGEpIHtcclxuICAgIGNvbnN0IHBvc2l0aW9uID0gaGlzdG9yeS5zdGF0ZSA/IGhpc3Rvcnkuc3RhdGUucG9zaXRpb24gLSBkZWx0YSA6IC0xO1xyXG4gICAgcmV0dXJuIHBvc2l0aW9uICsgcGF0aDtcclxufVxyXG5jb25zdCBzY3JvbGxQb3NpdGlvbnMgPSBuZXcgTWFwKCk7XHJcbmZ1bmN0aW9uIHNhdmVTY3JvbGxQb3NpdGlvbihrZXksIHNjcm9sbFBvc2l0aW9uKSB7XHJcbiAgICBzY3JvbGxQb3NpdGlvbnMuc2V0KGtleSwgc2Nyb2xsUG9zaXRpb24pO1xyXG59XHJcbmZ1bmN0aW9uIGdldFNhdmVkU2Nyb2xsUG9zaXRpb24oa2V5KSB7XHJcbiAgICBjb25zdCBzY3JvbGwgPSBzY3JvbGxQb3NpdGlvbnMuZ2V0KGtleSk7XHJcbiAgICAvLyBjb25zdW1lIGl0IHNvIGl0J3Mgbm90IHVzZWQgYWdhaW5cclxuICAgIHNjcm9sbFBvc2l0aW9ucy5kZWxldGUoa2V5KTtcclxuICAgIHJldHVybiBzY3JvbGw7XHJcbn1cclxuLy8gVE9ETzogUkZDIGFib3V0IGhvdyB0byBzYXZlIHNjcm9sbCBwb3NpdGlvblxyXG4vKipcclxuICogU2Nyb2xsQmVoYXZpb3IgaW5zdGFuY2UgdXNlZCBieSB0aGUgcm91dGVyIHRvIGNvbXB1dGUgYW5kIHJlc3RvcmUgdGhlIHNjcm9sbFxyXG4gKiBwb3NpdGlvbiB3aGVuIG5hdmlnYXRpbmcuXHJcbiAqL1xyXG4vLyBleHBvcnQgaW50ZXJmYWNlIFNjcm9sbEhhbmRsZXI8U2Nyb2xsUG9zaXRpb25FbnRyeSBleHRlbmRzIEhpc3RvcnlTdGF0ZVZhbHVlLCBTY3JvbGxQb3NpdGlvbiBleHRlbmRzIFNjcm9sbFBvc2l0aW9uRW50cnk+IHtcclxuLy8gICAvLyByZXR1cm5zIGEgc2Nyb2xsIHBvc2l0aW9uIHRoYXQgY2FuIGJlIHNhdmVkIGluIGhpc3RvcnlcclxuLy8gICBjb21wdXRlKCk6IFNjcm9sbFBvc2l0aW9uRW50cnlcclxuLy8gICAvLyBjYW4gdGFrZSBhbiBleHRlbmRlZCBTY3JvbGxQb3NpdGlvbkVudHJ5XHJcbi8vICAgc2Nyb2xsKHBvc2l0aW9uOiBTY3JvbGxQb3NpdGlvbik6IHZvaWRcclxuLy8gfVxyXG4vLyBleHBvcnQgY29uc3Qgc2Nyb2xsSGFuZGxlcjogU2Nyb2xsSGFuZGxlcjxTY3JvbGxQb3NpdGlvbj4gPSB7XHJcbi8vICAgY29tcHV0ZTogY29tcHV0ZVNjcm9sbCxcclxuLy8gICBzY3JvbGw6IHNjcm9sbFRvUG9zaXRpb24sXHJcbi8vIH1cblxubGV0IGNyZWF0ZUJhc2VMb2NhdGlvbiA9ICgpID0+IGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3Q7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbm9ybWFsaXplZCBoaXN0b3J5IGxvY2F0aW9uIGZyb20gYSB3aW5kb3cubG9jYXRpb24gb2JqZWN0XHJcbiAqIEBwYXJhbSBsb2NhdGlvbiAtXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVDdXJyZW50TG9jYXRpb24oYmFzZSwgbG9jYXRpb24pIHtcclxuICAgIGNvbnN0IHsgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCB9ID0gbG9jYXRpb247XHJcbiAgICAvLyBhbGxvd3MgaGFzaCBiYXNlcyBsaWtlICMsIC8jLCAjLywgIyEsICMhLywgLyMhLywgb3IgZXZlbiAvZm9sZGVyI2VuZFxyXG4gICAgY29uc3QgaGFzaFBvcyA9IGJhc2UuaW5kZXhPZignIycpO1xyXG4gICAgaWYgKGhhc2hQb3MgPiAtMSkge1xyXG4gICAgICAgIGxldCBzbGljZVBvcyA9IGhhc2guaW5jbHVkZXMoYmFzZS5zbGljZShoYXNoUG9zKSlcclxuICAgICAgICAgICAgPyBiYXNlLnNsaWNlKGhhc2hQb3MpLmxlbmd0aFxyXG4gICAgICAgICAgICA6IDE7XHJcbiAgICAgICAgbGV0IHBhdGhGcm9tSGFzaCA9IGhhc2guc2xpY2Uoc2xpY2VQb3MpO1xyXG4gICAgICAgIC8vIHByZXBlbmQgdGhlIHN0YXJ0aW5nIHNsYXNoIHRvIGhhc2ggc28gdGhlIHVybCBzdGFydHMgd2l0aCAvI1xyXG4gICAgICAgIGlmIChwYXRoRnJvbUhhc2hbMF0gIT09ICcvJylcclxuICAgICAgICAgICAgcGF0aEZyb21IYXNoID0gJy8nICsgcGF0aEZyb21IYXNoO1xyXG4gICAgICAgIHJldHVybiBzdHJpcEJhc2UocGF0aEZyb21IYXNoLCAnJyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXRoID0gc3RyaXBCYXNlKHBhdGhuYW1lLCBiYXNlKTtcclxuICAgIHJldHVybiBwYXRoICsgc2VhcmNoICsgaGFzaDtcclxufVxyXG5mdW5jdGlvbiB1c2VIaXN0b3J5TGlzdGVuZXJzKGJhc2UsIGhpc3RvcnlTdGF0ZSwgY3VycmVudExvY2F0aW9uLCByZXBsYWNlKSB7XHJcbiAgICBsZXQgbGlzdGVuZXJzID0gW107XHJcbiAgICBsZXQgdGVhcmRvd25zID0gW107XHJcbiAgICAvLyBUT0RPOiBzaG91bGQgaXQgYmUgYSBzdGFjaz8gYSBEaWN0LiBDaGVjayBpZiB0aGUgcG9wc3RhdGUgbGlzdGVuZXJcclxuICAgIC8vIGNhbiB0cmlnZ2VyIHR3aWNlXHJcbiAgICBsZXQgcGF1c2VTdGF0ZSA9IG51bGw7XHJcbiAgICBjb25zdCBwb3BTdGF0ZUhhbmRsZXIgPSAoeyBzdGF0ZSwgfSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRvID0gY3JlYXRlQ3VycmVudExvY2F0aW9uKGJhc2UsIGxvY2F0aW9uKTtcclxuICAgICAgICBjb25zdCBmcm9tID0gY3VycmVudExvY2F0aW9uLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGZyb21TdGF0ZSA9IGhpc3RvcnlTdGF0ZS52YWx1ZTtcclxuICAgICAgICBsZXQgZGVsdGEgPSAwO1xyXG4gICAgICAgIGlmIChzdGF0ZSkge1xyXG4gICAgICAgICAgICBjdXJyZW50TG9jYXRpb24udmFsdWUgPSB0bztcclxuICAgICAgICAgICAgaGlzdG9yeVN0YXRlLnZhbHVlID0gc3RhdGU7XHJcbiAgICAgICAgICAgIC8vIGlnbm9yZSB0aGUgcG9wc3RhdGUgYW5kIHJlc2V0IHRoZSBwYXVzZVN0YXRlXHJcbiAgICAgICAgICAgIGlmIChwYXVzZVN0YXRlICYmIHBhdXNlU3RhdGUgPT09IGZyb20pIHtcclxuICAgICAgICAgICAgICAgIHBhdXNlU3RhdGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlbHRhID0gZnJvbVN0YXRlID8gc3RhdGUucG9zaXRpb24gLSBmcm9tU3RhdGUucG9zaXRpb24gOiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVwbGFjZSh0byk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHsgZGVsdGFGcm9tQ3VycmVudCB9KVxyXG4gICAgICAgIC8vIEhlcmUgd2UgY291bGQgYWxzbyByZXZlcnQgdGhlIG5hdmlnYXRpb24gYnkgY2FsbGluZyBoaXN0b3J5LmdvKC1kZWx0YSlcclxuICAgICAgICAvLyB0aGlzIGxpc3RlbmVyIHdpbGwgaGF2ZSB0byBiZSBhZGFwdGVkIHRvIG5vdCB0cmlnZ2VyIGFnYWluIGFuZCB0byB3YWl0IGZvciB0aGUgdXJsXHJcbiAgICAgICAgLy8gdG8gYmUgdXBkYXRlZCBiZWZvcmUgdHJpZ2dlcmluZyB0aGUgbGlzdGVuZXJzLiBTb21lIGtpbmQgb2YgdmFsaWRhdGlvbiBmdW5jdGlvbiB3b3VsZCBhbHNvXHJcbiAgICAgICAgLy8gbmVlZCB0byBiZSBwYXNzZWQgdG8gdGhlIGxpc3RlbmVycyBzbyB0aGUgbmF2aWdhdGlvbiBjYW4gYmUgYWNjZXB0ZWRcclxuICAgICAgICAvLyBjYWxsIGFsbCBsaXN0ZW5lcnNcclxuICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVyKGN1cnJlbnRMb2NhdGlvbi52YWx1ZSwgZnJvbSwge1xyXG4gICAgICAgICAgICAgICAgZGVsdGEsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBOYXZpZ2F0aW9uVHlwZS5wb3AsXHJcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246IGRlbHRhXHJcbiAgICAgICAgICAgICAgICAgICAgPyBkZWx0YSA+IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBOYXZpZ2F0aW9uRGlyZWN0aW9uLmZvcndhcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBOYXZpZ2F0aW9uRGlyZWN0aW9uLmJhY2tcclxuICAgICAgICAgICAgICAgICAgICA6IE5hdmlnYXRpb25EaXJlY3Rpb24udW5rbm93bixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgZnVuY3Rpb24gcGF1c2VMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgcGF1c2VTdGF0ZSA9IGN1cnJlbnRMb2NhdGlvbi52YWx1ZTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGxpc3RlbihjYWxsYmFjaykge1xyXG4gICAgICAgIC8vIHNldCB1cCB0aGUgbGlzdGVuZXIgYW5kIHByZXBhcmUgdGVhcmRvd24gY2FsbGJhY2tzXHJcbiAgICAgICAgbGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgIGNvbnN0IHRlYXJkb3duID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRlYXJkb3ducy5wdXNoKHRlYXJkb3duKTtcclxuICAgICAgICByZXR1cm4gdGVhcmRvd247XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBiZWZvcmVVbmxvYWRMaXN0ZW5lcigpIHtcclxuICAgICAgICBjb25zdCB7IGhpc3RvcnkgfSA9IHdpbmRvdztcclxuICAgICAgICBpZiAoIWhpc3Rvcnkuc3RhdGUpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShhc3NpZ24oe30sIGhpc3Rvcnkuc3RhdGUsIHsgc2Nyb2xsOiBjb21wdXRlU2Nyb2xsUG9zaXRpb24oKSB9KSwgJycpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZGVzdHJveSgpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHRlYXJkb3duIG9mIHRlYXJkb3ducylcclxuICAgICAgICAgICAgdGVhcmRvd24oKTtcclxuICAgICAgICB0ZWFyZG93bnMgPSBbXTtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBwb3BTdGF0ZUhhbmRsZXIpO1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBiZWZvcmVVbmxvYWRMaXN0ZW5lcik7XHJcbiAgICB9XHJcbiAgICAvLyBzZXQgdXAgdGhlIGxpc3RlbmVycyBhbmQgcHJlcGFyZSB0ZWFyZG93biBjYWxsYmFja3NcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHBvcFN0YXRlSGFuZGxlcik7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgYmVmb3JlVW5sb2FkTGlzdGVuZXIpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwYXVzZUxpc3RlbmVycyxcclxuICAgICAgICBsaXN0ZW4sXHJcbiAgICAgICAgZGVzdHJveSxcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBzdGF0ZSBvYmplY3RcclxuICovXHJcbmZ1bmN0aW9uIGJ1aWxkU3RhdGUoYmFjaywgY3VycmVudCwgZm9yd2FyZCwgcmVwbGFjZWQgPSBmYWxzZSwgY29tcHV0ZVNjcm9sbCA9IGZhbHNlKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJhY2ssXHJcbiAgICAgICAgY3VycmVudCxcclxuICAgICAgICBmb3J3YXJkLFxyXG4gICAgICAgIHJlcGxhY2VkLFxyXG4gICAgICAgIHBvc2l0aW9uOiB3aW5kb3cuaGlzdG9yeS5sZW5ndGgsXHJcbiAgICAgICAgc2Nyb2xsOiBjb21wdXRlU2Nyb2xsID8gY29tcHV0ZVNjcm9sbFBvc2l0aW9uKCkgOiBudWxsLFxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB1c2VIaXN0b3J5U3RhdGVOYXZpZ2F0aW9uKGJhc2UpIHtcclxuICAgIGNvbnN0IHsgaGlzdG9yeSwgbG9jYXRpb24gfSA9IHdpbmRvdztcclxuICAgIC8vIHByaXZhdGUgdmFyaWFibGVzXHJcbiAgICBjb25zdCBjdXJyZW50TG9jYXRpb24gPSB7XHJcbiAgICAgICAgdmFsdWU6IGNyZWF0ZUN1cnJlbnRMb2NhdGlvbihiYXNlLCBsb2NhdGlvbiksXHJcbiAgICB9O1xyXG4gICAgY29uc3QgaGlzdG9yeVN0YXRlID0geyB2YWx1ZTogaGlzdG9yeS5zdGF0ZSB9O1xyXG4gICAgLy8gYnVpbGQgY3VycmVudCBoaXN0b3J5IGVudHJ5IGFzIHRoaXMgaXMgYSBmcmVzaCBuYXZpZ2F0aW9uXHJcbiAgICBpZiAoIWhpc3RvcnlTdGF0ZS52YWx1ZSkge1xyXG4gICAgICAgIGNoYW5nZUxvY2F0aW9uKGN1cnJlbnRMb2NhdGlvbi52YWx1ZSwge1xyXG4gICAgICAgICAgICBiYWNrOiBudWxsLFxyXG4gICAgICAgICAgICBjdXJyZW50OiBjdXJyZW50TG9jYXRpb24udmFsdWUsXHJcbiAgICAgICAgICAgIGZvcndhcmQ6IG51bGwsXHJcbiAgICAgICAgICAgIC8vIHRoZSBsZW5ndGggaXMgb2ZmIGJ5IG9uZSwgd2UgbmVlZCB0byBkZWNyZWFzZSBpdFxyXG4gICAgICAgICAgICBwb3NpdGlvbjogaGlzdG9yeS5sZW5ndGggLSAxLFxyXG4gICAgICAgICAgICByZXBsYWNlZDogdHJ1ZSxcclxuICAgICAgICAgICAgLy8gZG9uJ3QgYWRkIGEgc2Nyb2xsIGFzIHRoZSB1c2VyIG1heSBoYXZlIGFuIGFuY2hvciwgYW5kIHdlIHdhbnRcclxuICAgICAgICAgICAgLy8gc2Nyb2xsQmVoYXZpb3IgdG8gYmUgdHJpZ2dlcmVkIHdpdGhvdXQgYSBzYXZlZCBwb3NpdGlvblxyXG4gICAgICAgICAgICBzY3JvbGw6IG51bGwsXHJcbiAgICAgICAgfSwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjaGFuZ2VMb2NhdGlvbih0bywgc3RhdGUsIHJlcGxhY2UpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBpZiBhIGJhc2UgdGFnIGlzIHByb3ZpZGVkLCBhbmQgd2UgYXJlIG9uIGEgbm9ybWFsIGRvbWFpbiwgd2UgaGF2ZSB0b1xyXG4gICAgICAgICAqIHJlc3BlY3QgdGhlIHByb3ZpZGVkIGBiYXNlYCBhdHRyaWJ1dGUgYmVjYXVzZSBwdXNoU3RhdGUoKSB3aWxsIHVzZSBpdCBhbmRcclxuICAgICAgICAgKiBwb3RlbnRpYWxseSBlcmFzZSBhbnl0aGluZyBiZWZvcmUgdGhlIGAjYCBsaWtlIGF0XHJcbiAgICAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3JvdXRlci9pc3N1ZXMvNjg1IHdoZXJlIGEgYmFzZSBvZlxyXG4gICAgICAgICAqIGAvZm9sZGVyLyNgIGJ1dCBhIGJhc2Ugb2YgYC9gIHdvdWxkIGVyYXNlIHRoZSBgL2ZvbGRlci9gIHNlY3Rpb24uIElmXHJcbiAgICAgICAgICogdGhlcmUgaXMgbm8gaG9zdCwgdGhlIGA8YmFzZT5gIHRhZyBtYWtlcyBubyBzZW5zZSBhbmQgaWYgdGhlcmUgaXNuJ3QgYVxyXG4gICAgICAgICAqIGJhc2UgdGFnIHdlIGNhbiBqdXN0IHVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBgI2AuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3QgaGFzaEluZGV4ID0gYmFzZS5pbmRleE9mKCcjJyk7XHJcbiAgICAgICAgY29uc3QgdXJsID0gaGFzaEluZGV4ID4gLTFcclxuICAgICAgICAgICAgPyAobG9jYXRpb24uaG9zdCAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJylcclxuICAgICAgICAgICAgICAgID8gYmFzZVxyXG4gICAgICAgICAgICAgICAgOiBiYXNlLnNsaWNlKGhhc2hJbmRleCkpICsgdG9cclxuICAgICAgICAgICAgOiBjcmVhdGVCYXNlTG9jYXRpb24oKSArIGJhc2UgKyB0bztcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBCUk9XU0VSIFFVSVJLXHJcbiAgICAgICAgICAgIC8vIE5PVEU6IFNhZmFyaSB0aHJvd3MgYSBTZWN1cml0eUVycm9yIHdoZW4gY2FsbGluZyB0aGlzIGZ1bmN0aW9uIDEwMCB0aW1lcyBpbiAzMCBzZWNvbmRzXHJcbiAgICAgICAgICAgIGhpc3RvcnlbcmVwbGFjZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSddKHN0YXRlLCAnJywgdXJsKTtcclxuICAgICAgICAgICAgaGlzdG9yeVN0YXRlLnZhbHVlID0gc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybignRXJyb3Igd2l0aCBwdXNoL3JlcGxhY2UgU3RhdGUnLCBlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEZvcmNlIHRoZSBuYXZpZ2F0aW9uLCB0aGlzIGFsc28gcmVzZXRzIHRoZSBjYWxsIGNvdW50XHJcbiAgICAgICAgICAgIGxvY2F0aW9uW3JlcGxhY2UgPyAncmVwbGFjZScgOiAnYXNzaWduJ10odXJsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZXBsYWNlKHRvLCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBhc3NpZ24oe30sIGhpc3Rvcnkuc3RhdGUsIGJ1aWxkU3RhdGUoaGlzdG9yeVN0YXRlLnZhbHVlLmJhY2ssIFxyXG4gICAgICAgIC8vIGtlZXAgYmFjayBhbmQgZm9yd2FyZCBlbnRyaWVzIGJ1dCBvdmVycmlkZSBjdXJyZW50IHBvc2l0aW9uXHJcbiAgICAgICAgdG8sIGhpc3RvcnlTdGF0ZS52YWx1ZS5mb3J3YXJkLCB0cnVlKSwgZGF0YSwgeyBwb3NpdGlvbjogaGlzdG9yeVN0YXRlLnZhbHVlLnBvc2l0aW9uIH0pO1xyXG4gICAgICAgIGNoYW5nZUxvY2F0aW9uKHRvLCBzdGF0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgY3VycmVudExvY2F0aW9uLnZhbHVlID0gdG87XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBwdXNoKHRvLCBkYXRhKSB7XHJcbiAgICAgICAgLy8gQWRkIHRvIGN1cnJlbnQgZW50cnkgdGhlIGluZm9ybWF0aW9uIG9mIHdoZXJlIHdlIGFyZSBnb2luZ1xyXG4gICAgICAgIC8vIGFzIHdlbGwgYXMgc2F2aW5nIHRoZSBjdXJyZW50IHBvc2l0aW9uXHJcbiAgICAgICAgY29uc3QgY3VycmVudFN0YXRlID0gYXNzaWduKHt9LCBcclxuICAgICAgICAvLyB1c2UgY3VycmVudCBoaXN0b3J5IHN0YXRlIHRvIGdyYWNlZnVsbHkgaGFuZGxlIGEgd3JvbmcgY2FsbCB0b1xyXG4gICAgICAgIC8vIGhpc3RvcnkucmVwbGFjZVN0YXRlXHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3JvdXRlci9pc3N1ZXMvMzY2XHJcbiAgICAgICAgaGlzdG9yeVN0YXRlLnZhbHVlLCBoaXN0b3J5LnN0YXRlLCB7XHJcbiAgICAgICAgICAgIGZvcndhcmQ6IHRvLFxyXG4gICAgICAgICAgICBzY3JvbGw6IGNvbXB1dGVTY3JvbGxQb3NpdGlvbigpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWhpc3Rvcnkuc3RhdGUpIHtcclxuICAgICAgICAgICAgd2FybihgaGlzdG9yeS5zdGF0ZSBzZWVtcyB0byBoYXZlIGJlZW4gbWFudWFsbHkgcmVwbGFjZWQgd2l0aG91dCBwcmVzZXJ2aW5nIHRoZSBuZWNlc3NhcnkgdmFsdWVzLiBNYWtlIHN1cmUgdG8gcHJlc2VydmUgZXhpc3RpbmcgaGlzdG9yeSBzdGF0ZSBpZiB5b3UgYXJlIG1hbnVhbGx5IGNhbGxpbmcgaGlzdG9yeS5yZXBsYWNlU3RhdGU6XFxuXFxuYCArXHJcbiAgICAgICAgICAgICAgICBgaGlzdG9yeS5yZXBsYWNlU3RhdGUoaGlzdG9yeS5zdGF0ZSwgJycsIHVybClcXG5cXG5gICtcclxuICAgICAgICAgICAgICAgIGBZb3UgY2FuIGZpbmQgbW9yZSBpbmZvcm1hdGlvbiBhdCBodHRwczovL25leHQucm91dGVyLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24vI3VzYWdlLW9mLWhpc3Rvcnktc3RhdGUuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNoYW5nZUxvY2F0aW9uKGN1cnJlbnRTdGF0ZS5jdXJyZW50LCBjdXJyZW50U3RhdGUsIHRydWUpO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gYXNzaWduKHt9LCBidWlsZFN0YXRlKGN1cnJlbnRMb2NhdGlvbi52YWx1ZSwgdG8sIG51bGwpLCB7IHBvc2l0aW9uOiBjdXJyZW50U3RhdGUucG9zaXRpb24gKyAxIH0sIGRhdGEpO1xyXG4gICAgICAgIGNoYW5nZUxvY2F0aW9uKHRvLCBzdGF0ZSwgZmFsc2UpO1xyXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbi52YWx1ZSA9IHRvO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBsb2NhdGlvbjogY3VycmVudExvY2F0aW9uLFxyXG4gICAgICAgIHN0YXRlOiBoaXN0b3J5U3RhdGUsXHJcbiAgICAgICAgcHVzaCxcclxuICAgICAgICByZXBsYWNlLFxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogQ3JlYXRlcyBhbiBIVE1MNSBoaXN0b3J5LiBNb3N0IGNvbW1vbiBoaXN0b3J5IGZvciBzaW5nbGUgcGFnZSBhcHBsaWNhdGlvbnMuXHJcbiAqXHJcbiAqIEBwYXJhbSBiYXNlIC1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVdlYkhpc3RvcnkoYmFzZSkge1xyXG4gICAgYmFzZSA9IG5vcm1hbGl6ZUJhc2UoYmFzZSk7XHJcbiAgICBjb25zdCBoaXN0b3J5TmF2aWdhdGlvbiA9IHVzZUhpc3RvcnlTdGF0ZU5hdmlnYXRpb24oYmFzZSk7XHJcbiAgICBjb25zdCBoaXN0b3J5TGlzdGVuZXJzID0gdXNlSGlzdG9yeUxpc3RlbmVycyhiYXNlLCBoaXN0b3J5TmF2aWdhdGlvbi5zdGF0ZSwgaGlzdG9yeU5hdmlnYXRpb24ubG9jYXRpb24sIGhpc3RvcnlOYXZpZ2F0aW9uLnJlcGxhY2UpO1xyXG4gICAgZnVuY3Rpb24gZ28oZGVsdGEsIHRyaWdnZXJMaXN0ZW5lcnMgPSB0cnVlKSB7XHJcbiAgICAgICAgaWYgKCF0cmlnZ2VyTGlzdGVuZXJzKVxyXG4gICAgICAgICAgICBoaXN0b3J5TGlzdGVuZXJzLnBhdXNlTGlzdGVuZXJzKCk7XHJcbiAgICAgICAgaGlzdG9yeS5nbyhkZWx0YSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCByb3V0ZXJIaXN0b3J5ID0gYXNzaWduKHtcclxuICAgICAgICAvLyBpdCdzIG92ZXJyaWRkZW4gcmlnaHQgYWZ0ZXJcclxuICAgICAgICBsb2NhdGlvbjogJycsXHJcbiAgICAgICAgYmFzZSxcclxuICAgICAgICBnbyxcclxuICAgICAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLmJpbmQobnVsbCwgYmFzZSksXHJcbiAgICB9LCBoaXN0b3J5TmF2aWdhdGlvbiwgaGlzdG9yeUxpc3RlbmVycyk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocm91dGVySGlzdG9yeSwgJ2xvY2F0aW9uJywge1xyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgZ2V0OiAoKSA9PiBoaXN0b3J5TmF2aWdhdGlvbi5sb2NhdGlvbi52YWx1ZSxcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJvdXRlckhpc3RvcnksICdzdGF0ZScsIHtcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGdldDogKCkgPT4gaGlzdG9yeU5hdmlnYXRpb24uc3RhdGUudmFsdWUsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiByb3V0ZXJIaXN0b3J5O1xyXG59XG5cbi8qKlxyXG4gKiBDcmVhdGVzIGFuIGluLW1lbW9yeSBiYXNlZCBoaXN0b3J5LiBUaGUgbWFpbiBwdXJwb3NlIG9mIHRoaXMgaGlzdG9yeSBpcyB0byBoYW5kbGUgU1NSLiBJdCBzdGFydHMgaW4gYSBzcGVjaWFsIGxvY2F0aW9uIHRoYXQgaXMgbm93aGVyZS5cclxuICogSXQncyB1cCB0byB0aGUgdXNlciB0byByZXBsYWNlIHRoYXQgbG9jYXRpb24gd2l0aCB0aGUgc3RhcnRlciBsb2NhdGlvbiBieSBlaXRoZXIgY2FsbGluZyBgcm91dGVyLnB1c2hgIG9yIGByb3V0ZXIucmVwbGFjZWAuXHJcbiAqXHJcbiAqIEBwYXJhbSBiYXNlIC0gQmFzZSBhcHBsaWVkIHRvIGFsbCB1cmxzLCBkZWZhdWx0cyB0byAnLydcclxuICogQHJldHVybnMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gdGhlIHJvdXRlciBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShiYXNlID0gJycpIHtcclxuICAgIGxldCBsaXN0ZW5lcnMgPSBbXTtcclxuICAgIGxldCBxdWV1ZSA9IFtTVEFSVF07XHJcbiAgICBsZXQgcG9zaXRpb24gPSAwO1xyXG4gICAgYmFzZSA9IG5vcm1hbGl6ZUJhc2UoYmFzZSk7XHJcbiAgICBmdW5jdGlvbiBzZXRMb2NhdGlvbihsb2NhdGlvbikge1xyXG4gICAgICAgIHBvc2l0aW9uKys7XHJcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSBxdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gd2UgYXJlIGF0IHRoZSBlbmQsIHdlIGNhbiBzaW1wbHkgYXBwZW5kIGEgbmV3IGVudHJ5XHJcbiAgICAgICAgICAgIHF1ZXVlLnB1c2gobG9jYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gd2UgYXJlIGluIHRoZSBtaWRkbGUsIHdlIHJlbW92ZSBldmVyeXRoaW5nIGZyb20gaGVyZSBpbiB0aGUgcXVldWVcclxuICAgICAgICAgICAgcXVldWUuc3BsaWNlKHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgcXVldWUucHVzaChsb2NhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdHJpZ2dlckxpc3RlbmVycyh0bywgZnJvbSwgeyBkaXJlY3Rpb24sIGRlbHRhIH0pIHtcclxuICAgICAgICBjb25zdCBpbmZvID0ge1xyXG4gICAgICAgICAgICBkaXJlY3Rpb24sXHJcbiAgICAgICAgICAgIGRlbHRhLFxyXG4gICAgICAgICAgICB0eXBlOiBOYXZpZ2F0aW9uVHlwZS5wb3AsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICBjYWxsYmFjayh0bywgZnJvbSwgaW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgcm91dGVySGlzdG9yeSA9IHtcclxuICAgICAgICAvLyByZXdyaXR0ZW4gYnkgT2JqZWN0LmRlZmluZVByb3BlcnR5XHJcbiAgICAgICAgbG9jYXRpb246IFNUQVJULFxyXG4gICAgICAgIC8vIFRPRE86IHNob3VsZCBiZSBrZXB0IGluIHF1ZXVlXHJcbiAgICAgICAgc3RhdGU6IHt9LFxyXG4gICAgICAgIGJhc2UsXHJcbiAgICAgICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZi5iaW5kKG51bGwsIGJhc2UpLFxyXG4gICAgICAgIHJlcGxhY2UodG8pIHtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIGN1cnJlbnQgZW50cnkgYW5kIGRlY3JlbWVudCBwb3NpdGlvblxyXG4gICAgICAgICAgICBxdWV1ZS5zcGxpY2UocG9zaXRpb24tLSwgMSk7XHJcbiAgICAgICAgICAgIHNldExvY2F0aW9uKHRvKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHB1c2godG8sIGRhdGEpIHtcclxuICAgICAgICAgICAgc2V0TG9jYXRpb24odG8pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGlzdGVuKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcnMgPSBbXTtcclxuICAgICAgICAgICAgcXVldWUgPSBbU1RBUlRdO1xyXG4gICAgICAgICAgICBwb3NpdGlvbiA9IDA7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnbyhkZWx0YSwgc2hvdWxkVHJpZ2dlciA9IHRydWUpIHtcclxuICAgICAgICAgICAgY29uc3QgZnJvbSA9IHRoaXMubG9jYXRpb247XHJcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IFxyXG4gICAgICAgICAgICAvLyB3ZSBhcmUgY29uc2lkZXJpbmcgZGVsdGEgPT09IDAgZ29pbmcgZm9yd2FyZCwgYnV0IGluIGFic3RyYWN0IG1vZGVcclxuICAgICAgICAgICAgLy8gdXNpbmcgMCBmb3IgdGhlIGRlbHRhIGRvZXNuJ3QgbWFrZSBzZW5zZSBsaWtlIGl0IGRvZXMgaW4gaHRtbDUgd2hlcmVcclxuICAgICAgICAgICAgLy8gaXQgcmVsb2FkcyB0aGUgcGFnZVxyXG4gICAgICAgICAgICBkZWx0YSA8IDAgPyBOYXZpZ2F0aW9uRGlyZWN0aW9uLmJhY2sgOiBOYXZpZ2F0aW9uRGlyZWN0aW9uLmZvcndhcmQ7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocG9zaXRpb24gKyBkZWx0YSwgcXVldWUubGVuZ3RoIC0gMSkpO1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkVHJpZ2dlcikge1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlckxpc3RlbmVycyh0aGlzLmxvY2F0aW9uLCBmcm9tLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyb3V0ZXJIaXN0b3J5LCAnbG9jYXRpb24nLCB7XHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBnZXQ6ICgpID0+IHF1ZXVlW3Bvc2l0aW9uXSxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJvdXRlckhpc3Rvcnk7XHJcbn1cblxuLyoqXHJcbiAqIENyZWF0ZXMgYSBoYXNoIGhpc3RvcnkuIFVzZWZ1bCBmb3Igd2ViIGFwcGxpY2F0aW9ucyB3aXRoIG5vIGhvc3QgKGUuZy4gYGZpbGU6Ly9gKSBvciB3aGVuIGNvbmZpZ3VyaW5nIGEgc2VydmVyIHRvXHJcbiAqIGhhbmRsZSBhbnkgVVJMIGlzIG5vdCBwb3NzaWJsZS5cclxuICpcclxuICogQHBhcmFtIGJhc2UgLSBvcHRpb25hbCBiYXNlIHRvIHByb3ZpZGUuIERlZmF1bHRzIHRvIGBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaGAgSWYgdGhlcmUgaXMgYSBgPGJhc2U+YCB0YWdcclxuICogaW4gdGhlIGBoZWFkYCwgaXRzIHZhbHVlIHdpbGwgYmUgaWdub3JlZCBpbiBmYXZvciBvZiB0aGlzIHBhcmFtZXRlciAqKmJ1dCBub3RlIGl0IGFmZmVjdHMgYWxsIHRoZSBoaXN0b3J5LnB1c2hTdGF0ZSgpXHJcbiAqIGNhbGxzKiosIG1lYW5pbmcgdGhhdCBpZiB5b3UgdXNlIGEgYDxiYXNlPmAgdGFnLCBpdCdzIGBocmVmYCB2YWx1ZSAqKmhhcyB0byBtYXRjaCB0aGlzIHBhcmFtZXRlcioqIChpZ25vcmluZyBhbnl0aGluZ1xyXG4gKiBhZnRlciB0aGUgYCNgKS5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBganNcclxuICogLy8gYXQgaHR0cHM6Ly9leGFtcGxlLmNvbS9mb2xkZXJcclxuICogY3JlYXRlV2ViSGFzaEhpc3RvcnkoKSAvLyBnaXZlcyBhIHVybCBvZiBgaHR0cHM6Ly9leGFtcGxlLmNvbS9mb2xkZXIjYFxyXG4gKiBjcmVhdGVXZWJIYXNoSGlzdG9yeSgnL2ZvbGRlci8nKSAvLyBnaXZlcyBhIHVybCBvZiBgaHR0cHM6Ly9leGFtcGxlLmNvbS9mb2xkZXIvI2BcclxuICogLy8gaWYgdGhlIGAjYCBpcyBwcm92aWRlZCBpbiB0aGUgYmFzZSwgaXQgd29uJ3QgYmUgYWRkZWQgYnkgYGNyZWF0ZVdlYkhhc2hIaXN0b3J5YFxyXG4gKiBjcmVhdGVXZWJIYXNoSGlzdG9yeSgnL2ZvbGRlci8jL2FwcC8nKSAvLyBnaXZlcyBhIHVybCBvZiBgaHR0cHM6Ly9leGFtcGxlLmNvbS9mb2xkZXIvIy9hcHAvYFxyXG4gKiAvLyB5b3Ugc2hvdWxkIGF2b2lkIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCBjaGFuZ2VzIHRoZSBvcmlnaW5hbCB1cmwgYW5kIGJyZWFrcyBjb3B5aW5nIHVybHNcclxuICogY3JlYXRlV2ViSGFzaEhpc3RvcnkoJy9vdGhlci1mb2xkZXIvJykgLy8gZ2l2ZXMgYSB1cmwgb2YgYGh0dHBzOi8vZXhhbXBsZS5jb20vb3RoZXItZm9sZGVyLyNgXHJcbiAqXHJcbiAqIC8vIGF0IGZpbGU6Ly8vdXNyL2V0Yy9mb2xkZXIvaW5kZXguaHRtbFxyXG4gKiAvLyBmb3IgbG9jYXRpb25zIHdpdGggbm8gYGhvc3RgLCB0aGUgYmFzZSBpcyBpZ25vcmVkXHJcbiAqIGNyZWF0ZVdlYkhhc2hIaXN0b3J5KCcvaUFtSWdub3JlZCcpIC8vIGdpdmVzIGEgdXJsIG9mIGBmaWxlOi8vL3Vzci9ldGMvZm9sZGVyL2luZGV4Lmh0bWwjYFxyXG4gKiBgYGBcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVdlYkhhc2hIaXN0b3J5KGJhc2UpIHtcclxuICAgIC8vIE1ha2Ugc3VyZSB0aGlzIGltcGxlbWVudGF0aW9uIGlzIGZpbmUgaW4gdGVybXMgb2YgZW5jb2RpbmcsIHNwZWNpYWxseSBmb3IgSUUxMVxyXG4gICAgLy8gZm9yIGBmaWxlOi8vYCwgZGlyZWN0bHkgdXNlIHRoZSBwYXRobmFtZSBhbmQgaWdub3JlIHRoZSBiYXNlXHJcbiAgICAvLyBsb2NhdGlvbi5wYXRobmFtZSBjb250YWlucyBhbiBpbml0aWFsIGAvYCBldmVuIGF0IHRoZSByb290OiBgaHR0cHM6Ly9leGFtcGxlLmNvbWBcclxuICAgIGJhc2UgPSBsb2NhdGlvbi5ob3N0ID8gYmFzZSB8fCBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCA6ICcnO1xyXG4gICAgLy8gYWxsb3cgdGhlIHVzZXIgdG8gcHJvdmlkZSBhIGAjYCBpbiB0aGUgbWlkZGxlOiBgL2Jhc2UvIy9hcHBgXHJcbiAgICBpZiAoIWJhc2UuaW5jbHVkZXMoJyMnKSlcclxuICAgICAgICBiYXNlICs9ICcjJztcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWJhc2UuZW5kc1dpdGgoJyMvJykgJiYgIWJhc2UuZW5kc1dpdGgoJyMnKSkge1xyXG4gICAgICAgIHdhcm4oYEEgaGFzaCBiYXNlIG11c3QgZW5kIHdpdGggYSBcIiNcIjpcXG5cIiR7YmFzZX1cIiBzaG91bGQgYmUgXCIke2Jhc2UucmVwbGFjZSgvIy4qJC8sICcjJyl9XCIuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3JlYXRlV2ViSGlzdG9yeShiYXNlKTtcclxufVxuXG5mdW5jdGlvbiBpc1JvdXRlTG9jYXRpb24ocm91dGUpIHtcclxuICAgIHJldHVybiB0eXBlb2Ygcm91dGUgPT09ICdzdHJpbmcnIHx8IChyb3V0ZSAmJiB0eXBlb2Ygcm91dGUgPT09ICdvYmplY3QnKTtcclxufVxyXG5mdW5jdGlvbiBpc1JvdXRlTmFtZShuYW1lKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBuYW1lID09PSAnc3ltYm9sJztcclxufVxuXG4vKipcclxuICogSW5pdGlhbCByb3V0ZSBsb2NhdGlvbiB3aGVyZSB0aGUgcm91dGVyIGlzLiBDYW4gYmUgdXNlZCBpbiBuYXZpZ2F0aW9uIGd1YXJkc1xyXG4gKiB0byBkaWZmZXJlbnRpYXRlIHRoZSBpbml0aWFsIG5hdmlnYXRpb24uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGpzXHJcbiAqIGltcG9ydCB7IFNUQVJUX0xPQ0FUSU9OIH0gZnJvbSAndnVlLXJvdXRlcidcclxuICpcclxuICogcm91dGVyLmJlZm9yZUVhY2goKHRvLCBmcm9tKSA9PiB7XHJcbiAqICAgaWYgKGZyb20gPT09IFNUQVJUX0xPQ0FUSU9OKSB7XHJcbiAqICAgICAvLyBpbml0aWFsIG5hdmlnYXRpb25cclxuICogICB9XHJcbiAqIH0pXHJcbiAqIGBgYFxyXG4gKi9cclxuY29uc3QgU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRCA9IHtcclxuICAgIHBhdGg6ICcvJyxcclxuICAgIG5hbWU6IHVuZGVmaW5lZCxcclxuICAgIHBhcmFtczoge30sXHJcbiAgICBxdWVyeToge30sXHJcbiAgICBoYXNoOiAnJyxcclxuICAgIGZ1bGxQYXRoOiAnLycsXHJcbiAgICBtYXRjaGVkOiBbXSxcclxuICAgIG1ldGE6IHt9LFxyXG4gICAgcmVkaXJlY3RlZEZyb206IHVuZGVmaW5lZCxcclxufTtcblxuY29uc3QgTmF2aWdhdGlvbkZhaWx1cmVTeW1ib2wgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ25hdmlnYXRpb24gZmFpbHVyZScgOiAnJyk7XHJcbi8qKlxyXG4gKiBFbnVtZXJhdGlvbiB3aXRoIGFsbCBwb3NzaWJsZSB0eXBlcyBmb3IgbmF2aWdhdGlvbiBmYWlsdXJlcy4gQ2FuIGJlIHBhc3NlZCB0b1xyXG4gKiB7QGxpbmsgaXNOYXZpZ2F0aW9uRmFpbHVyZX0gdG8gY2hlY2sgZm9yIHNwZWNpZmljIGZhaWx1cmVzLlxyXG4gKi9cclxudmFyIE5hdmlnYXRpb25GYWlsdXJlVHlwZTtcclxuKGZ1bmN0aW9uIChOYXZpZ2F0aW9uRmFpbHVyZVR5cGUpIHtcclxuICAgIC8qKlxyXG4gICAgICogQW4gYWJvcnRlZCBuYXZpZ2F0aW9uIGlzIGEgbmF2aWdhdGlvbiB0aGF0IGZhaWxlZCBiZWNhdXNlIGEgbmF2aWdhdGlvblxyXG4gICAgICogZ3VhcmQgcmV0dXJuZWQgYGZhbHNlYCBvciBjYWxsZWQgYG5leHQoZmFsc2UpYFxyXG4gICAgICovXHJcbiAgICBOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbTmF2aWdhdGlvbkZhaWx1cmVUeXBlW1wiYWJvcnRlZFwiXSA9IDRdID0gXCJhYm9ydGVkXCI7XHJcbiAgICAvKipcclxuICAgICAqIEEgY2FuY2VsbGVkIG5hdmlnYXRpb24gaXMgYSBuYXZpZ2F0aW9uIHRoYXQgZmFpbGVkIGJlY2F1c2UgYSBtb3JlIHJlY2VudFxyXG4gICAgICogbmF2aWdhdGlvbiBmaW5pc2hlZCBzdGFydGVkIChub3QgbmVjZXNzYXJpbHkgZmluaXNoZWQpLlxyXG4gICAgICovXHJcbiAgICBOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbTmF2aWdhdGlvbkZhaWx1cmVUeXBlW1wiY2FuY2VsbGVkXCJdID0gOF0gPSBcImNhbmNlbGxlZFwiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIGR1cGxpY2F0ZWQgbmF2aWdhdGlvbiBpcyBhIG5hdmlnYXRpb24gdGhhdCBmYWlsZWQgYmVjYXVzZSBpdCB3YXNcclxuICAgICAqIGluaXRpYXRlZCB3aGlsZSBhbHJlYWR5IGJlaW5nIGF0IHRoZSBleGFjdCBzYW1lIGxvY2F0aW9uLlxyXG4gICAgICovXHJcbiAgICBOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbTmF2aWdhdGlvbkZhaWx1cmVUeXBlW1wiZHVwbGljYXRlZFwiXSA9IDE2XSA9IFwiZHVwbGljYXRlZFwiO1xyXG59KShOYXZpZ2F0aW9uRmFpbHVyZVR5cGUgfHwgKE5hdmlnYXRpb25GYWlsdXJlVHlwZSA9IHt9KSk7XHJcbi8vIERFViBvbmx5IGRlYnVnIG1lc3NhZ2VzXHJcbmNvbnN0IEVycm9yVHlwZU1lc3NhZ2VzID0ge1xyXG4gICAgWzEgLyogRXJyb3JUeXBlcy5NQVRDSEVSX05PVF9GT1VORCAqL10oeyBsb2NhdGlvbiwgY3VycmVudExvY2F0aW9uIH0pIHtcclxuICAgICAgICByZXR1cm4gYE5vIG1hdGNoIGZvclxcbiAke0pTT04uc3RyaW5naWZ5KGxvY2F0aW9uKX0ke2N1cnJlbnRMb2NhdGlvblxyXG4gICAgICAgICAgICA/ICdcXG53aGlsZSBiZWluZyBhdFxcbicgKyBKU09OLnN0cmluZ2lmeShjdXJyZW50TG9jYXRpb24pXHJcbiAgICAgICAgICAgIDogJyd9YDtcclxuICAgIH0sXHJcbiAgICBbMiAvKiBFcnJvclR5cGVzLk5BVklHQVRJT05fR1VBUkRfUkVESVJFQ1QgKi9dKHsgZnJvbSwgdG8sIH0pIHtcclxuICAgICAgICByZXR1cm4gYFJlZGlyZWN0ZWQgZnJvbSBcIiR7ZnJvbS5mdWxsUGF0aH1cIiB0byBcIiR7c3RyaW5naWZ5Um91dGUodG8pfVwiIHZpYSBhIG5hdmlnYXRpb24gZ3VhcmQuYDtcclxuICAgIH0sXHJcbiAgICBbNCAvKiBFcnJvclR5cGVzLk5BVklHQVRJT05fQUJPUlRFRCAqL10oeyBmcm9tLCB0byB9KSB7XHJcbiAgICAgICAgcmV0dXJuIGBOYXZpZ2F0aW9uIGFib3J0ZWQgZnJvbSBcIiR7ZnJvbS5mdWxsUGF0aH1cIiB0byBcIiR7dG8uZnVsbFBhdGh9XCIgdmlhIGEgbmF2aWdhdGlvbiBndWFyZC5gO1xyXG4gICAgfSxcclxuICAgIFs4IC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9DQU5DRUxMRUQgKi9dKHsgZnJvbSwgdG8gfSkge1xyXG4gICAgICAgIHJldHVybiBgTmF2aWdhdGlvbiBjYW5jZWxsZWQgZnJvbSBcIiR7ZnJvbS5mdWxsUGF0aH1cIiB0byBcIiR7dG8uZnVsbFBhdGh9XCIgd2l0aCBhIG5ldyBuYXZpZ2F0aW9uLmA7XHJcbiAgICB9LFxyXG4gICAgWzE2IC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9EVVBMSUNBVEVEICovXSh7IGZyb20sIHRvIH0pIHtcclxuICAgICAgICByZXR1cm4gYEF2b2lkZWQgcmVkdW5kYW50IG5hdmlnYXRpb24gdG8gY3VycmVudCBsb2NhdGlvbjogXCIke2Zyb20uZnVsbFBhdGh9XCIuYDtcclxuICAgIH0sXHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlckVycm9yKHR5cGUsIHBhcmFtcykge1xyXG4gICAgLy8ga2VlcCBmdWxsIGVycm9yIG1lc3NhZ2VzIGluIGNqcyB2ZXJzaW9uc1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCAhdHJ1ZSkge1xyXG4gICAgICAgIHJldHVybiBhc3NpZ24obmV3IEVycm9yKEVycm9yVHlwZU1lc3NhZ2VzW3R5cGVdKHBhcmFtcykpLCB7XHJcbiAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgIFtOYXZpZ2F0aW9uRmFpbHVyZVN5bWJvbF06IHRydWUsXHJcbiAgICAgICAgfSwgcGFyYW1zKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBhc3NpZ24obmV3IEVycm9yKCksIHtcclxuICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgW05hdmlnYXRpb25GYWlsdXJlU3ltYm9sXTogdHJ1ZSxcclxuICAgICAgICB9LCBwYXJhbXMpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzTmF2aWdhdGlvbkZhaWx1cmUoZXJyb3IsIHR5cGUpIHtcclxuICAgIHJldHVybiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJlxyXG4gICAgICAgIE5hdmlnYXRpb25GYWlsdXJlU3ltYm9sIGluIGVycm9yICYmXHJcbiAgICAgICAgKHR5cGUgPT0gbnVsbCB8fCAhIShlcnJvci50eXBlICYgdHlwZSkpKTtcclxufVxyXG5jb25zdCBwcm9wZXJ0aWVzVG9Mb2cgPSBbJ3BhcmFtcycsICdxdWVyeScsICdoYXNoJ107XHJcbmZ1bmN0aW9uIHN0cmluZ2lmeVJvdXRlKHRvKSB7XHJcbiAgICBpZiAodHlwZW9mIHRvID09PSAnc3RyaW5nJylcclxuICAgICAgICByZXR1cm4gdG87XHJcbiAgICBpZiAoJ3BhdGgnIGluIHRvKVxyXG4gICAgICAgIHJldHVybiB0by5wYXRoO1xyXG4gICAgY29uc3QgbG9jYXRpb24gPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IG9mIHByb3BlcnRpZXNUb0xvZykge1xyXG4gICAgICAgIGlmIChrZXkgaW4gdG8pXHJcbiAgICAgICAgICAgIGxvY2F0aW9uW2tleV0gPSB0b1trZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGxvY2F0aW9uLCBudWxsLCAyKTtcclxufVxuXG4vLyBkZWZhdWx0IHBhdHRlcm4gZm9yIGEgcGFyYW06IG5vbi1ncmVlZHkgZXZlcnl0aGluZyBidXQgL1xyXG5jb25zdCBCQVNFX1BBUkFNX1BBVFRFUk4gPSAnW14vXSs/JztcclxuY29uc3QgQkFTRV9QQVRIX1BBUlNFUl9PUFRJT05TID0ge1xyXG4gICAgc2Vuc2l0aXZlOiBmYWxzZSxcclxuICAgIHN0cmljdDogZmFsc2UsXHJcbiAgICBzdGFydDogdHJ1ZSxcclxuICAgIGVuZDogdHJ1ZSxcclxufTtcclxuLy8gU3BlY2lhbCBSZWdleCBjaGFyYWN0ZXJzIHRoYXQgbXVzdCBiZSBlc2NhcGVkIGluIHN0YXRpYyB0b2tlbnNcclxuY29uc3QgUkVHRVhfQ0hBUlNfUkUgPSAvWy4rKj9eJHt9KClbXFxdL1xcXFxdL2c7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgcGF0aCBwYXJzZXIgZnJvbSBhbiBhcnJheSBvZiBTZWdtZW50cyAoYSBzZWdtZW50IGlzIGFuIGFycmF5IG9mIFRva2VucylcclxuICpcclxuICogQHBhcmFtIHNlZ21lbnRzIC0gYXJyYXkgb2Ygc2VnbWVudHMgcmV0dXJuZWQgYnkgdG9rZW5pemVQYXRoXHJcbiAqIEBwYXJhbSBleHRyYU9wdGlvbnMgLSBvcHRpb25hbCBvcHRpb25zIGZvciB0aGUgcmVnZXhwXHJcbiAqIEByZXR1cm5zIGEgUGF0aFBhcnNlclxyXG4gKi9cclxuZnVuY3Rpb24gdG9rZW5zVG9QYXJzZXIoc2VnbWVudHMsIGV4dHJhT3B0aW9ucykge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IGFzc2lnbih7fSwgQkFTRV9QQVRIX1BBUlNFUl9PUFRJT05TLCBleHRyYU9wdGlvbnMpO1xyXG4gICAgLy8gdGhlIGFtb3VudCBvZiBzY29yZXMgaXMgdGhlIHNhbWUgYXMgdGhlIGxlbmd0aCBvZiBzZWdtZW50cyBleGNlcHQgZm9yIHRoZSByb290IHNlZ21lbnQgXCIvXCJcclxuICAgIGNvbnN0IHNjb3JlID0gW107XHJcbiAgICAvLyB0aGUgcmVnZXhwIGFzIGEgc3RyaW5nXHJcbiAgICBsZXQgcGF0dGVybiA9IG9wdGlvbnMuc3RhcnQgPyAnXicgOiAnJztcclxuICAgIC8vIGV4dHJhY3RlZCBrZXlzXHJcbiAgICBjb25zdCBrZXlzID0gW107XHJcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcclxuICAgICAgICAvLyB0aGUgcm9vdCBzZWdtZW50IG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50XHJcbiAgICAgICAgY29uc3Qgc2VnbWVudFNjb3JlcyA9IHNlZ21lbnQubGVuZ3RoID8gW10gOiBbOTAgLyogUGF0aFNjb3JlLlJvb3QgKi9dO1xyXG4gICAgICAgIC8vIGFsbG93IHRyYWlsaW5nIHNsYXNoXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc3RyaWN0ICYmICFzZWdtZW50Lmxlbmd0aClcclxuICAgICAgICAgICAgcGF0dGVybiArPSAnLyc7XHJcbiAgICAgICAgZm9yIChsZXQgdG9rZW5JbmRleCA9IDA7IHRva2VuSW5kZXggPCBzZWdtZW50Lmxlbmd0aDsgdG9rZW5JbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gc2VnbWVudFt0b2tlbkluZGV4XTtcclxuICAgICAgICAgICAgLy8gcmVzZXRzIHRoZSBzY29yZSBpZiB3ZSBhcmUgaW5zaWRlIGEgc3ViLXNlZ21lbnQgLzphLW90aGVyLTpiXHJcbiAgICAgICAgICAgIGxldCBzdWJTZWdtZW50U2NvcmUgPSA0MCAvKiBQYXRoU2NvcmUuU2VnbWVudCAqLyArXHJcbiAgICAgICAgICAgICAgICAob3B0aW9ucy5zZW5zaXRpdmUgPyAwLjI1IC8qIFBhdGhTY29yZS5Cb251c0Nhc2VTZW5zaXRpdmUgKi8gOiAwKTtcclxuICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDAgLyogVG9rZW5UeXBlLlN0YXRpYyAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gcHJlcGVuZCB0aGUgc2xhc2ggaWYgd2UgYXJlIHN0YXJ0aW5nIGEgbmV3IHNlZ21lbnRcclxuICAgICAgICAgICAgICAgIGlmICghdG9rZW5JbmRleClcclxuICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuICs9ICcvJztcclxuICAgICAgICAgICAgICAgIHBhdHRlcm4gKz0gdG9rZW4udmFsdWUucmVwbGFjZShSRUdFWF9DSEFSU19SRSwgJ1xcXFwkJicpO1xyXG4gICAgICAgICAgICAgICAgc3ViU2VnbWVudFNjb3JlICs9IDQwIC8qIFBhdGhTY29yZS5TdGF0aWMgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gMSAvKiBUb2tlblR5cGUuUGFyYW0gKi8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIHJlcGVhdGFibGUsIG9wdGlvbmFsLCByZWdleHAgfSA9IHRva2VuO1xyXG4gICAgICAgICAgICAgICAga2V5cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICByZXBlYXRhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZSA9IHJlZ2V4cCA/IHJlZ2V4cCA6IEJBU0VfUEFSQU1fUEFUVEVSTjtcclxuICAgICAgICAgICAgICAgIC8vIHRoZSB1c2VyIHByb3ZpZGVkIGEgY3VzdG9tIHJlZ2V4cCAvOmlkKFxcXFxkKylcclxuICAgICAgICAgICAgICAgIGlmIChyZSAhPT0gQkFTRV9QQVJBTV9QQVRURVJOKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3ViU2VnbWVudFNjb3JlICs9IDEwIC8qIFBhdGhTY29yZS5Cb251c0N1c3RvbVJlZ0V4cCAqLztcclxuICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIHJlZ2V4cCBpcyB2YWxpZCBiZWZvcmUgdXNpbmcgaXRcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKGAoJHtyZX0pYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGN1c3RvbSBSZWdFeHAgZm9yIHBhcmFtIFwiJHt2YWx1ZX1cIiAoJHtyZX0pOiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHdlIHJlcGVhdCB3ZSBtdXN0IHRha2UgY2FyZSBvZiB0aGUgcmVwZWF0aW5nIGxlYWRpbmcgc2xhc2hcclxuICAgICAgICAgICAgICAgIGxldCBzdWJQYXR0ZXJuID0gcmVwZWF0YWJsZSA/IGAoKD86JHtyZX0pKD86Lyg/OiR7cmV9KSkqKWAgOiBgKCR7cmV9KWA7XHJcbiAgICAgICAgICAgICAgICAvLyBwcmVwZW5kIHRoZSBzbGFzaCBpZiB3ZSBhcmUgc3RhcnRpbmcgYSBuZXcgc2VnbWVudFxyXG4gICAgICAgICAgICAgICAgaWYgKCF0b2tlbkluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgIHN1YlBhdHRlcm4gPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhdm9pZCBhbiBvcHRpb25hbCAvIGlmIHRoZXJlIGFyZSBtb3JlIHNlZ21lbnRzIGUuZy4gLzpwPy1zdGF0aWNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3IgLzpwPy06cDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWwgJiYgc2VnbWVudC5sZW5ndGggPCAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGAoPzovJHtzdWJQYXR0ZXJufSlgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcvJyArIHN1YlBhdHRlcm47XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpXHJcbiAgICAgICAgICAgICAgICAgICAgc3ViUGF0dGVybiArPSAnPyc7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IHN1YlBhdHRlcm47XHJcbiAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gMjAgLyogUGF0aFNjb3JlLkR5bmFtaWMgKi87XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpXHJcbiAgICAgICAgICAgICAgICAgICAgc3ViU2VnbWVudFNjb3JlICs9IC04IC8qIFBhdGhTY29yZS5Cb251c09wdGlvbmFsICovO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlcGVhdGFibGUpXHJcbiAgICAgICAgICAgICAgICAgICAgc3ViU2VnbWVudFNjb3JlICs9IC0yMCAvKiBQYXRoU2NvcmUuQm9udXNSZXBlYXRhYmxlICovO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlID09PSAnLionKVxyXG4gICAgICAgICAgICAgICAgICAgIHN1YlNlZ21lbnRTY29yZSArPSAtNTAgLyogUGF0aFNjb3JlLkJvbnVzV2lsZGNhcmQgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VnbWVudFNjb3Jlcy5wdXNoKHN1YlNlZ21lbnRTY29yZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFuIGVtcHR5IGFycmF5IGxpa2UgL2hvbWUvIC0+IFtbe2hvbWV9XSwgW11dXHJcbiAgICAgICAgLy8gaWYgKCFzZWdtZW50Lmxlbmd0aCkgcGF0dGVybiArPSAnLydcclxuICAgICAgICBzY29yZS5wdXNoKHNlZ21lbnRTY29yZXMpO1xyXG4gICAgfVxyXG4gICAgLy8gb25seSBhcHBseSB0aGUgc3RyaWN0IGJvbnVzIHRvIHRoZSBsYXN0IHNjb3JlXHJcbiAgICBpZiAob3B0aW9ucy5zdHJpY3QgJiYgb3B0aW9ucy5lbmQpIHtcclxuICAgICAgICBjb25zdCBpID0gc2NvcmUubGVuZ3RoIC0gMTtcclxuICAgICAgICBzY29yZVtpXVtzY29yZVtpXS5sZW5ndGggLSAxXSArPSAwLjcwMDAwMDAwMDAwMDAwMDEgLyogUGF0aFNjb3JlLkJvbnVzU3RyaWN0ICovO1xyXG4gICAgfVxyXG4gICAgLy8gVE9ETzogZGV2IG9ubHkgd2FybiBkb3VibGUgdHJhaWxpbmcgc2xhc2hcclxuICAgIGlmICghb3B0aW9ucy5zdHJpY3QpXHJcbiAgICAgICAgcGF0dGVybiArPSAnLz8nO1xyXG4gICAgaWYgKG9wdGlvbnMuZW5kKVxyXG4gICAgICAgIHBhdHRlcm4gKz0gJyQnO1xyXG4gICAgLy8gYWxsb3cgcGF0aHMgbGlrZSAvZHluYW1pYyB0byBvbmx5IG1hdGNoIGR5bmFtaWMgb3IgZHluYW1pYy8uLi4gYnV0IG5vdCBkeW5hbWljX3NvbWV0aGluZ19lbHNlXHJcbiAgICBlbHNlIGlmIChvcHRpb25zLnN0cmljdClcclxuICAgICAgICBwYXR0ZXJuICs9ICcoPzovfCQpJztcclxuICAgIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knKTtcclxuICAgIGZ1bmN0aW9uIHBhcnNlKHBhdGgpIHtcclxuICAgICAgICBjb25zdCBtYXRjaCA9IHBhdGgubWF0Y2gocmUpO1xyXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHt9O1xyXG4gICAgICAgIGlmICghbWF0Y2gpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbWF0Y2gubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBtYXRjaFtpXSB8fCAnJztcclxuICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpIC0gMV07XHJcbiAgICAgICAgICAgIHBhcmFtc1trZXkubmFtZV0gPSB2YWx1ZSAmJiBrZXkucmVwZWF0YWJsZSA/IHZhbHVlLnNwbGl0KCcvJykgOiB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhcmFtcztcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHN0cmluZ2lmeShwYXJhbXMpIHtcclxuICAgICAgICBsZXQgcGF0aCA9ICcnO1xyXG4gICAgICAgIC8vIGZvciBvcHRpb25hbCBwYXJhbWV0ZXJzIHRvIGFsbG93IHRvIGJlIGVtcHR5XHJcbiAgICAgICAgbGV0IGF2b2lkRHVwbGljYXRlZFNsYXNoID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XHJcbiAgICAgICAgICAgIGlmICghYXZvaWREdXBsaWNhdGVkU2xhc2ggfHwgIXBhdGguZW5kc1dpdGgoJy8nKSlcclxuICAgICAgICAgICAgICAgIHBhdGggKz0gJy8nO1xyXG4gICAgICAgICAgICBhdm9pZER1cGxpY2F0ZWRTbGFzaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHNlZ21lbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAwIC8qIFRva2VuVHlwZS5TdGF0aWMgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoICs9IHRva2VuLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gMSAvKiBUb2tlblR5cGUuUGFyYW0gKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlLCByZXBlYXRhYmxlLCBvcHRpb25hbCB9ID0gdG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyYW0gPSB2YWx1ZSBpbiBwYXJhbXMgPyBwYXJhbXNbdmFsdWVdIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkocGFyYW0pICYmICFyZXBlYXRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvdmlkZWQgcGFyYW0gXCIke3ZhbHVlfVwiIGlzIGFuIGFycmF5IGJ1dCBpdCBpcyBub3QgcmVwZWF0YWJsZSAoKiBvciArIG1vZGlmaWVycylgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGlzQXJyYXkocGFyYW0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcGFyYW0uam9pbignLycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcGFyYW07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBtb3JlIHRoYW4gb25lIG9wdGlvbmFsIHBhcmFtIGxpa2UgLzphPy1zdGF0aWMgd2UgZG9uJ3QgbmVlZCB0byBjYXJlIGFib3V0IHRoZSBvcHRpb25hbCBwYXJhbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoIDwgMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgbGFzdCBzbGFzaCBhcyB3ZSBjb3VsZCBiZSBhdCB0aGUgZW5kXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGguZW5kc1dpdGgoJy8nKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgLTEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvIG5vdCBhcHBlbmQgYSBzbGFzaCBvbiB0aGUgbmV4dCBpdGVyYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF2b2lkRHVwbGljYXRlZFNsYXNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgcmVxdWlyZWQgcGFyYW0gXCIke3ZhbHVlfVwiYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGggKz0gdGV4dDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhdm9pZCBlbXB0eSBwYXRoIHdoZW4gd2UgaGF2ZSBtdWx0aXBsZSBvcHRpb25hbCBwYXJhbXNcclxuICAgICAgICByZXR1cm4gcGF0aCB8fCAnLyc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlLFxyXG4gICAgICAgIHNjb3JlLFxyXG4gICAgICAgIGtleXMsXHJcbiAgICAgICAgcGFyc2UsXHJcbiAgICAgICAgc3RyaW5naWZ5LFxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogQ29tcGFyZXMgYW4gYXJyYXkgb2YgbnVtYmVycyBhcyB1c2VkIGluIFBhdGhQYXJzZXIuc2NvcmUgYW5kIHJldHVybnMgYVxyXG4gKiBudW1iZXIuIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYHNvcnRgIGFuIGFycmF5XHJcbiAqXHJcbiAqIEBwYXJhbSBhIC0gZmlyc3QgYXJyYXkgb2YgbnVtYmVyc1xyXG4gKiBAcGFyYW0gYiAtIHNlY29uZCBhcnJheSBvZiBudW1iZXJzXHJcbiAqIEByZXR1cm5zIDAgaWYgYm90aCBhcmUgZXF1YWwsIDwgMCBpZiBhIHNob3VsZCBiZSBzb3J0ZWQgZmlyc3QsID4gMCBpZiBiXHJcbiAqIHNob3VsZCBiZSBzb3J0ZWQgZmlyc3RcclxuICovXHJcbmZ1bmN0aW9uIGNvbXBhcmVTY29yZUFycmF5KGEsIGIpIHtcclxuICAgIGxldCBpID0gMDtcclxuICAgIHdoaWxlIChpIDwgYS5sZW5ndGggJiYgaSA8IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgZGlmZiA9IGJbaV0gLSBhW2ldO1xyXG4gICAgICAgIC8vIG9ubHkga2VlcCBnb2luZyBpZiBkaWZmID09PSAwXHJcbiAgICAgICAgaWYgKGRpZmYpXHJcbiAgICAgICAgICAgIHJldHVybiBkaWZmO1xyXG4gICAgICAgIGkrKztcclxuICAgIH1cclxuICAgIC8vIGlmIHRoZSBsYXN0IHN1YnNlZ21lbnQgd2FzIFN0YXRpYywgdGhlIHNob3J0ZXIgc2VnbWVudHMgc2hvdWxkIGJlIHNvcnRlZCBmaXJzdFxyXG4gICAgLy8gb3RoZXJ3aXNlIHNvcnQgdGhlIGxvbmdlc3Qgc2VnbWVudCBmaXJzdFxyXG4gICAgaWYgKGEubGVuZ3RoIDwgYi5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IDEgJiYgYVswXSA9PT0gNDAgLyogUGF0aFNjb3JlLlN0YXRpYyAqLyArIDQwIC8qIFBhdGhTY29yZS5TZWdtZW50ICovXHJcbiAgICAgICAgICAgID8gLTFcclxuICAgICAgICAgICAgOiAxO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYS5sZW5ndGggPiBiLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiBiLmxlbmd0aCA9PT0gMSAmJiBiWzBdID09PSA0MCAvKiBQYXRoU2NvcmUuU3RhdGljICovICsgNDAgLyogUGF0aFNjb3JlLlNlZ21lbnQgKi9cclxuICAgICAgICAgICAgPyAxXHJcbiAgICAgICAgICAgIDogLTE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gMDtcclxufVxyXG4vKipcclxuICogQ29tcGFyZSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHdpdGggYHNvcnRgIHRvIHNvcnQgYW4gYXJyYXkgb2YgUGF0aFBhcnNlclxyXG4gKlxyXG4gKiBAcGFyYW0gYSAtIGZpcnN0IFBhdGhQYXJzZXJcclxuICogQHBhcmFtIGIgLSBzZWNvbmQgUGF0aFBhcnNlclxyXG4gKiBAcmV0dXJucyAwIGlmIGJvdGggYXJlIGVxdWFsLCA8IDAgaWYgYSBzaG91bGQgYmUgc29ydGVkIGZpcnN0LCA+IDAgaWYgYlxyXG4gKi9cclxuZnVuY3Rpb24gY29tcGFyZVBhdGhQYXJzZXJTY29yZShhLCBiKSB7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBjb25zdCBhU2NvcmUgPSBhLnNjb3JlO1xyXG4gICAgY29uc3QgYlNjb3JlID0gYi5zY29yZTtcclxuICAgIHdoaWxlIChpIDwgYVNjb3JlLmxlbmd0aCAmJiBpIDwgYlNjb3JlLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGNvbXAgPSBjb21wYXJlU2NvcmVBcnJheShhU2NvcmVbaV0sIGJTY29yZVtpXSk7XHJcbiAgICAgICAgLy8gZG8gbm90IHJldHVybiBpZiBib3RoIGFyZSBlcXVhbFxyXG4gICAgICAgIGlmIChjb21wKVxyXG4gICAgICAgICAgICByZXR1cm4gY29tcDtcclxuICAgICAgICBpKys7XHJcbiAgICB9XHJcbiAgICBpZiAoTWF0aC5hYnMoYlNjb3JlLmxlbmd0aCAtIGFTY29yZS5sZW5ndGgpID09PSAxKSB7XHJcbiAgICAgICAgaWYgKGlzTGFzdFNjb3JlTmVnYXRpdmUoYVNjb3JlKSlcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgaWYgKGlzTGFzdFNjb3JlTmVnYXRpdmUoYlNjb3JlKSlcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgYSBhbmQgYiBzaGFyZSB0aGUgc2FtZSBzY29yZSBlbnRyaWVzIGJ1dCBiIGhhcyBtb3JlLCBzb3J0IGIgZmlyc3RcclxuICAgIHJldHVybiBiU2NvcmUubGVuZ3RoIC0gYVNjb3JlLmxlbmd0aDtcclxuICAgIC8vIHRoaXMgaXMgdGhlIHRlcm5hcnkgdmVyc2lvblxyXG4gICAgLy8gcmV0dXJuIGFTY29yZS5sZW5ndGggPCBiU2NvcmUubGVuZ3RoXHJcbiAgICAvLyAgID8gMVxyXG4gICAgLy8gICA6IGFTY29yZS5sZW5ndGggPiBiU2NvcmUubGVuZ3RoXHJcbiAgICAvLyAgID8gLTFcclxuICAgIC8vICAgOiAwXHJcbn1cclxuLyoqXHJcbiAqIFRoaXMgYWxsb3dzIGRldGVjdGluZyBzcGxhdHMgYXQgdGhlIGVuZCBvZiBhIHBhdGg6IC9ob21lLzppZCguKikqXHJcbiAqXHJcbiAqIEBwYXJhbSBzY29yZSAtIHNjb3JlIHRvIGNoZWNrXHJcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGxhc3QgZW50cnkgaXMgbmVnYXRpdmVcclxuICovXHJcbmZ1bmN0aW9uIGlzTGFzdFNjb3JlTmVnYXRpdmUoc2NvcmUpIHtcclxuICAgIGNvbnN0IGxhc3QgPSBzY29yZVtzY29yZS5sZW5ndGggLSAxXTtcclxuICAgIHJldHVybiBzY29yZS5sZW5ndGggPiAwICYmIGxhc3RbbGFzdC5sZW5ndGggLSAxXSA8IDA7XHJcbn1cblxuY29uc3QgUk9PVF9UT0tFTiA9IHtcclxuICAgIHR5cGU6IDAgLyogVG9rZW5UeXBlLlN0YXRpYyAqLyxcclxuICAgIHZhbHVlOiAnJyxcclxufTtcclxuY29uc3QgVkFMSURfUEFSQU1fUkUgPSAvW2EtekEtWjAtOV9dLztcclxuLy8gQWZ0ZXIgc29tZSBwcm9maWxpbmcsIHRoZSBjYWNoZSBzZWVtcyB0byBiZSB1bm5lY2Vzc2FyeSBiZWNhdXNlIHRva2VuaXplUGF0aFxyXG4vLyAodGhlIHNsb3dlc3QgcGFydCBvZiBhZGRpbmcgYSByb3V0ZSkgaXMgdmVyeSBmYXN0XHJcbi8vIGNvbnN0IHRva2VuQ2FjaGUgPSBuZXcgTWFwPHN0cmluZywgVG9rZW5bXVtdPigpXHJcbmZ1bmN0aW9uIHRva2VuaXplUGF0aChwYXRoKSB7XHJcbiAgICBpZiAoIXBhdGgpXHJcbiAgICAgICAgcmV0dXJuIFtbXV07XHJcbiAgICBpZiAocGF0aCA9PT0gJy8nKVxyXG4gICAgICAgIHJldHVybiBbW1JPT1RfVE9LRU5dXTtcclxuICAgIGlmICghcGF0aC5zdGFydHNXaXRoKCcvJykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgID8gYFJvdXRlIHBhdGhzIHNob3VsZCBzdGFydCB3aXRoIGEgXCIvXCI6IFwiJHtwYXRofVwiIHNob3VsZCBiZSBcIi8ke3BhdGh9XCIuYFxyXG4gICAgICAgICAgICA6IGBJbnZhbGlkIHBhdGggXCIke3BhdGh9XCJgKTtcclxuICAgIH1cclxuICAgIC8vIGlmICh0b2tlbkNhY2hlLmhhcyhwYXRoKSkgcmV0dXJuIHRva2VuQ2FjaGUuZ2V0KHBhdGgpIVxyXG4gICAgZnVuY3Rpb24gY3Jhc2gobWVzc2FnZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRVJSICgke3N0YXRlfSkvXCIke2J1ZmZlcn1cIjogJHttZXNzYWdlfWApO1xyXG4gICAgfVxyXG4gICAgbGV0IHN0YXRlID0gMCAvKiBUb2tlbml6ZXJTdGF0ZS5TdGF0aWMgKi87XHJcbiAgICBsZXQgcHJldmlvdXNTdGF0ZSA9IHN0YXRlO1xyXG4gICAgY29uc3QgdG9rZW5zID0gW107XHJcbiAgICAvLyB0aGUgc2VnbWVudCB3aWxsIGFsd2F5cyBiZSB2YWxpZCBiZWNhdXNlIHdlIGdldCBpbnRvIHRoZSBpbml0aWFsIHN0YXRlXHJcbiAgICAvLyB3aXRoIHRoZSBsZWFkaW5nIC9cclxuICAgIGxldCBzZWdtZW50O1xyXG4gICAgZnVuY3Rpb24gZmluYWxpemVTZWdtZW50KCkge1xyXG4gICAgICAgIGlmIChzZWdtZW50KVxyXG4gICAgICAgICAgICB0b2tlbnMucHVzaChzZWdtZW50KTtcclxuICAgICAgICBzZWdtZW50ID0gW107XHJcbiAgICB9XHJcbiAgICAvLyBpbmRleCBvbiB0aGUgcGF0aFxyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgLy8gY2hhciBhdCBpbmRleFxyXG4gICAgbGV0IGNoYXI7XHJcbiAgICAvLyBidWZmZXIgb2YgdGhlIHZhbHVlIHJlYWRcclxuICAgIGxldCBidWZmZXIgPSAnJztcclxuICAgIC8vIGN1c3RvbSByZWdleHAgZm9yIGEgcGFyYW1cclxuICAgIGxldCBjdXN0b21SZSA9ICcnO1xyXG4gICAgZnVuY3Rpb24gY29uc3VtZUJ1ZmZlcigpIHtcclxuICAgICAgICBpZiAoIWJ1ZmZlcilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gMCAvKiBUb2tlbml6ZXJTdGF0ZS5TdGF0aWMgKi8pIHtcclxuICAgICAgICAgICAgc2VnbWVudC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogVG9rZW5UeXBlLlN0YXRpYyAqLyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBidWZmZXIsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzdGF0ZSA9PT0gMSAvKiBUb2tlbml6ZXJTdGF0ZS5QYXJhbSAqLyB8fFxyXG4gICAgICAgICAgICBzdGF0ZSA9PT0gMiAvKiBUb2tlbml6ZXJTdGF0ZS5QYXJhbVJlZ0V4cCAqLyB8fFxyXG4gICAgICAgICAgICBzdGF0ZSA9PT0gMyAvKiBUb2tlbml6ZXJTdGF0ZS5QYXJhbVJlZ0V4cEVuZCAqLykge1xyXG4gICAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPiAxICYmIChjaGFyID09PSAnKicgfHwgY2hhciA9PT0gJysnKSlcclxuICAgICAgICAgICAgICAgIGNyYXNoKGBBIHJlcGVhdGFibGUgcGFyYW0gKCR7YnVmZmVyfSkgbXVzdCBiZSBhbG9uZSBpbiBpdHMgc2VnbWVudC4gZWc6ICcvOmlkcysuYCk7XHJcbiAgICAgICAgICAgIHNlZ21lbnQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAxIC8qIFRva2VuVHlwZS5QYXJhbSAqLyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBidWZmZXIsXHJcbiAgICAgICAgICAgICAgICByZWdleHA6IGN1c3RvbVJlLFxyXG4gICAgICAgICAgICAgICAgcmVwZWF0YWJsZTogY2hhciA9PT0gJyonIHx8IGNoYXIgPT09ICcrJyxcclxuICAgICAgICAgICAgICAgIG9wdGlvbmFsOiBjaGFyID09PSAnKicgfHwgY2hhciA9PT0gJz8nLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNyYXNoKCdJbnZhbGlkIHN0YXRlIHRvIGNvbnN1bWUgYnVmZmVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJ1ZmZlciA9ICcnO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYWRkQ2hhclRvQnVmZmVyKCkge1xyXG4gICAgICAgIGJ1ZmZlciArPSBjaGFyO1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKGkgPCBwYXRoLmxlbmd0aCkge1xyXG4gICAgICAgIGNoYXIgPSBwYXRoW2krK107XHJcbiAgICAgICAgaWYgKGNoYXIgPT09ICdcXFxcJyAmJiBzdGF0ZSAhPT0gMiAvKiBUb2tlbml6ZXJTdGF0ZS5QYXJhbVJlZ0V4cCAqLykge1xyXG4gICAgICAgICAgICBwcmV2aW91c1N0YXRlID0gc3RhdGU7XHJcbiAgICAgICAgICAgIHN0YXRlID0gNCAvKiBUb2tlbml6ZXJTdGF0ZS5Fc2NhcGVOZXh0ICovO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xyXG4gICAgICAgICAgICBjYXNlIDAgLyogVG9rZW5pemVyU3RhdGUuU3RhdGljICovOlxyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09ICcvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3VtZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmaW5hbGl6ZVNlZ21lbnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09ICc6Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN1bWVCdWZmZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDEgLyogVG9rZW5pemVyU3RhdGUuUGFyYW0gKi87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhZGRDaGFyVG9CdWZmZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDQgLyogVG9rZW5pemVyU3RhdGUuRXNjYXBlTmV4dCAqLzpcclxuICAgICAgICAgICAgICAgIGFkZENoYXJUb0J1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMSAvKiBUb2tlbml6ZXJTdGF0ZS5QYXJhbSAqLzpcclxuICAgICAgICAgICAgICAgIGlmIChjaGFyID09PSAnKCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDIgLyogVG9rZW5pemVyU3RhdGUuUGFyYW1SZWdFeHAgKi87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChWQUxJRF9QQVJBTV9SRS50ZXN0KGNoYXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2hhclRvQnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdW1lQnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAwIC8qIFRva2VuaXplclN0YXRlLlN0YXRpYyAqLztcclxuICAgICAgICAgICAgICAgICAgICAvLyBnbyBiYWNrIG9uZSBjaGFyYWN0ZXIgaWYgd2Ugd2VyZSBub3QgbW9kaWZ5aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXIgIT09ICcqJyAmJiBjaGFyICE9PSAnPycgJiYgY2hhciAhPT0gJysnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyIC8qIFRva2VuaXplclN0YXRlLlBhcmFtUmVnRXhwICovOlxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogaXMgaXQgd29ydGggaGFuZGxpbmcgbmVzdGVkIHJlZ2V4cD8gbGlrZSA6cCg/OnByZWZpeF8oW14vXSspX3N1ZmZpeClcclxuICAgICAgICAgICAgICAgIC8vIGl0IGFscmVhZHkgd29ya3MgYnkgZXNjYXBpbmcgdGhlIGNsb3NpbmcgKVxyXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9wYXRocy5lc20uZGV2Lz9wPUFBTWVKYmlBd1FFY0RLYkFvQUFrUDYwUEcyUjZRQXZnTmFBNkFGQUNNMkFCdVFCQiNcclxuICAgICAgICAgICAgICAgIC8vIGlzIHRoaXMgcmVhbGx5IHNvbWV0aGluZyBwZW9wbGUgbmVlZCBzaW5jZSB5b3UgY2FuIGFsc28gd3JpdGVcclxuICAgICAgICAgICAgICAgIC8vIC9wcmVmaXhfOnAoKV9zdWZmaXhcclxuICAgICAgICAgICAgICAgIGlmIChjaGFyID09PSAnKScpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgdGhlIGVzY2FwZWQgKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b21SZVtjdXN0b21SZS5sZW5ndGggLSAxXSA9PSAnXFxcXCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbVJlID0gY3VzdG9tUmUuc2xpY2UoMCwgLTEpICsgY2hhcjtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMyAvKiBUb2tlbml6ZXJTdGF0ZS5QYXJhbVJlZ0V4cEVuZCAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbVJlICs9IGNoYXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzIC8qIFRva2VuaXplclN0YXRlLlBhcmFtUmVnRXhwRW5kICovOlxyXG4gICAgICAgICAgICAgICAgLy8gc2FtZSBhcyBmaW5hbGl6aW5nIGEgcGFyYW1cclxuICAgICAgICAgICAgICAgIGNvbnN1bWVCdWZmZXIoKTtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gMCAvKiBUb2tlbml6ZXJTdGF0ZS5TdGF0aWMgKi87XHJcbiAgICAgICAgICAgICAgICAvLyBnbyBiYWNrIG9uZSBjaGFyYWN0ZXIgaWYgd2Ugd2VyZSBub3QgbW9kaWZ5aW5nXHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhciAhPT0gJyonICYmIGNoYXIgIT09ICc/JyAmJiBjaGFyICE9PSAnKycpXHJcbiAgICAgICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICAgICAgY3VzdG9tUmUgPSAnJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY3Jhc2goJ1Vua25vd24gc3RhdGUnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChzdGF0ZSA9PT0gMiAvKiBUb2tlbml6ZXJTdGF0ZS5QYXJhbVJlZ0V4cCAqLylcclxuICAgICAgICBjcmFzaChgVW5maW5pc2hlZCBjdXN0b20gUmVnRXhwIGZvciBwYXJhbSBcIiR7YnVmZmVyfVwiYCk7XHJcbiAgICBjb25zdW1lQnVmZmVyKCk7XHJcbiAgICBmaW5hbGl6ZVNlZ21lbnQoKTtcclxuICAgIC8vIHRva2VuQ2FjaGUuc2V0KHBhdGgsIHRva2VucylcclxuICAgIHJldHVybiB0b2tlbnM7XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVSZWNvcmRNYXRjaGVyKHJlY29yZCwgcGFyZW50LCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCBwYXJzZXIgPSB0b2tlbnNUb1BhcnNlcih0b2tlbml6ZVBhdGgocmVjb3JkLnBhdGgpLCBvcHRpb25zKTtcclxuICAgIC8vIHdhcm4gYWdhaW5zdCBwYXJhbXMgd2l0aCB0aGUgc2FtZSBuYW1lXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmdLZXlzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHBhcnNlci5rZXlzKSB7XHJcbiAgICAgICAgICAgIGlmIChleGlzdGluZ0tleXMuaGFzKGtleS5uYW1lKSlcclxuICAgICAgICAgICAgICAgIHdhcm4oYEZvdW5kIGR1cGxpY2F0ZWQgcGFyYW1zIHdpdGggbmFtZSBcIiR7a2V5Lm5hbWV9XCIgZm9yIHBhdGggXCIke3JlY29yZC5wYXRofVwiLiBPbmx5IHRoZSBsYXN0IG9uZSB3aWxsIGJlIGF2YWlsYWJsZSBvbiBcIiRyb3V0ZS5wYXJhbXNcIi5gKTtcclxuICAgICAgICAgICAgZXhpc3RpbmdLZXlzLmFkZChrZXkubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgbWF0Y2hlciA9IGFzc2lnbihwYXJzZXIsIHtcclxuICAgICAgICByZWNvcmQsXHJcbiAgICAgICAgcGFyZW50LFxyXG4gICAgICAgIC8vIHRoZXNlIG5lZWRzIHRvIGJlIHBvcHVsYXRlZCBieSB0aGUgcGFyZW50XHJcbiAgICAgICAgY2hpbGRyZW46IFtdLFxyXG4gICAgICAgIGFsaWFzOiBbXSxcclxuICAgIH0pO1xyXG4gICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgIC8vIGJvdGggYXJlIGFsaWFzZXMgb3IgYm90aCBhcmUgbm90IGFsaWFzZXNcclxuICAgICAgICAvLyB3ZSBkb24ndCB3YW50IHRvIG1peCB0aGVtIGJlY2F1c2UgdGhlIG9yZGVyIGlzIHVzZWQgd2hlblxyXG4gICAgICAgIC8vIHBhc3Npbmcgb3JpZ2luYWxSZWNvcmQgaW4gTWF0Y2hlci5hZGRSb3V0ZVxyXG4gICAgICAgIGlmICghbWF0Y2hlci5yZWNvcmQuYWxpYXNPZiA9PT0gIXBhcmVudC5yZWNvcmQuYWxpYXNPZilcclxuICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2gobWF0Y2hlcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWF0Y2hlcjtcclxufVxuXG4vKipcclxuICogQ3JlYXRlcyBhIFJvdXRlciBNYXRjaGVyLlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICogQHBhcmFtIHJvdXRlcyAtIGFycmF5IG9mIGluaXRpYWwgcm91dGVzXHJcbiAqIEBwYXJhbSBnbG9iYWxPcHRpb25zIC0gZ2xvYmFsIHJvdXRlIG9wdGlvbnNcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlck1hdGNoZXIocm91dGVzLCBnbG9iYWxPcHRpb25zKSB7XHJcbiAgICAvLyBub3JtYWxpemVkIG9yZGVyZWQgYXJyYXkgb2YgbWF0Y2hlcnNcclxuICAgIGNvbnN0IG1hdGNoZXJzID0gW107XHJcbiAgICBjb25zdCBtYXRjaGVyTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgZ2xvYmFsT3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh7IHN0cmljdDogZmFsc2UsIGVuZDogdHJ1ZSwgc2Vuc2l0aXZlOiBmYWxzZSB9LCBnbG9iYWxPcHRpb25zKTtcclxuICAgIGZ1bmN0aW9uIGdldFJlY29yZE1hdGNoZXIobmFtZSkge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVyTWFwLmdldChuYW1lKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZFJvdXRlKHJlY29yZCwgcGFyZW50LCBvcmlnaW5hbFJlY29yZCkge1xyXG4gICAgICAgIC8vIHVzZWQgbGF0ZXIgb24gdG8gcmVtb3ZlIGJ5IG5hbWVcclxuICAgICAgICBjb25zdCBpc1Jvb3RBZGQgPSAhb3JpZ2luYWxSZWNvcmQ7XHJcbiAgICAgICAgY29uc3QgbWFpbk5vcm1hbGl6ZWRSZWNvcmQgPSBub3JtYWxpemVSb3V0ZVJlY29yZChyZWNvcmQpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgY2hlY2tDaGlsZE1pc3NpbmdOYW1lV2l0aEVtcHR5UGF0aChtYWluTm9ybWFsaXplZFJlY29yZCwgcGFyZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gd2UgbWlnaHQgYmUgdGhlIGNoaWxkIG9mIGFuIGFsaWFzXHJcbiAgICAgICAgbWFpbk5vcm1hbGl6ZWRSZWNvcmQuYWxpYXNPZiA9IG9yaWdpbmFsUmVjb3JkICYmIG9yaWdpbmFsUmVjb3JkLnJlY29yZDtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gbWVyZ2VPcHRpb25zKGdsb2JhbE9wdGlvbnMsIHJlY29yZCk7XHJcbiAgICAgICAgLy8gZ2VuZXJhdGUgYW4gYXJyYXkgb2YgcmVjb3JkcyB0byBjb3JyZWN0bHkgaGFuZGxlIGFsaWFzZXNcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkUmVjb3JkcyA9IFtcclxuICAgICAgICAgICAgbWFpbk5vcm1hbGl6ZWRSZWNvcmQsXHJcbiAgICAgICAgXTtcclxuICAgICAgICBpZiAoJ2FsaWFzJyBpbiByZWNvcmQpIHtcclxuICAgICAgICAgICAgY29uc3QgYWxpYXNlcyA9IHR5cGVvZiByZWNvcmQuYWxpYXMgPT09ICdzdHJpbmcnID8gW3JlY29yZC5hbGlhc10gOiByZWNvcmQuYWxpYXM7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgYWxpYXNlcykge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFJlY29yZHMucHVzaChhc3NpZ24oe30sIG1haW5Ob3JtYWxpemVkUmVjb3JkLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBhbGxvd3MgdXMgdG8gaG9sZCBhIGNvcHkgb2YgdGhlIGBjb21wb25lbnRzYCBvcHRpb25cclxuICAgICAgICAgICAgICAgICAgICAvLyBzbyB0aGF0IGFzeW5jIGNvbXBvbmVudHMgY2FjaGUgaXMgaG9sZCBvbiB0aGUgb3JpZ2luYWwgcmVjb3JkXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50czogb3JpZ2luYWxSZWNvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvcmlnaW5hbFJlY29yZC5yZWNvcmQuY29tcG9uZW50c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG1haW5Ob3JtYWxpemVkUmVjb3JkLmNvbXBvbmVudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogYWxpYXMsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgbWlnaHQgYmUgdGhlIGNoaWxkIG9mIGFuIGFsaWFzXHJcbiAgICAgICAgICAgICAgICAgICAgYWxpYXNPZjogb3JpZ2luYWxSZWNvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBvcmlnaW5hbFJlY29yZC5yZWNvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBtYWluTm9ybWFsaXplZFJlY29yZCxcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYWxpYXNlcyBhcmUgYWx3YXlzIG9mIHRoZSBzYW1lIGtpbmQgYXMgdGhlIG9yaWdpbmFsIHNpbmNlIHRoZXlcclxuICAgICAgICAgICAgICAgICAgICAvLyBhcmUgZGVmaW5lZCBvbiB0aGUgc2FtZSByZWNvcmRcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbWF0Y2hlcjtcclxuICAgICAgICBsZXQgb3JpZ2luYWxNYXRjaGVyO1xyXG4gICAgICAgIGZvciAoY29uc3Qgbm9ybWFsaXplZFJlY29yZCBvZiBub3JtYWxpemVkUmVjb3Jkcykge1xyXG4gICAgICAgICAgICBjb25zdCB7IHBhdGggfSA9IG5vcm1hbGl6ZWRSZWNvcmQ7XHJcbiAgICAgICAgICAgIC8vIEJ1aWxkIHVwIHRoZSBwYXRoIGZvciBuZXN0ZWQgcm91dGVzIGlmIHRoZSBjaGlsZCBpc24ndCBhbiBhYnNvbHV0ZVxyXG4gICAgICAgICAgICAvLyByb3V0ZS4gT25seSBhZGQgdGhlIC8gZGVsaW1pdGVyIGlmIHRoZSBjaGlsZCBwYXRoIGlzbid0IGVtcHR5IGFuZCBpZiB0aGVcclxuICAgICAgICAgICAgLy8gcGFyZW50IHBhdGggZG9lc24ndCBoYXZlIGEgdHJhaWxpbmcgc2xhc2hcclxuICAgICAgICAgICAgaWYgKHBhcmVudCAmJiBwYXRoWzBdICE9PSAnLycpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFBhdGggPSBwYXJlbnQucmVjb3JkLnBhdGg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0aW5nU2xhc2ggPSBwYXJlbnRQYXRoW3BhcmVudFBhdGgubGVuZ3RoIC0gMV0gPT09ICcvJyA/ICcnIDogJy8nO1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFJlY29yZC5wYXRoID1cclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQucmVjb3JkLnBhdGggKyAocGF0aCAmJiBjb25uZWN0aW5nU2xhc2ggKyBwYXRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG5vcm1hbGl6ZWRSZWNvcmQucGF0aCA9PT0gJyonKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhdGNoIGFsbCByb3V0ZXMgKFwiKlwiKSBtdXN0IG5vdyBiZSBkZWZpbmVkIHVzaW5nIGEgcGFyYW0gd2l0aCBhIGN1c3RvbSByZWdleHAuXFxuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ1NlZSBtb3JlIGF0IGh0dHBzOi8vbmV4dC5yb3V0ZXIudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi8jcmVtb3ZlZC1zdGFyLW9yLWNhdGNoLWFsbC1yb3V0ZXMuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY3JlYXRlIHRoZSBvYmplY3QgYmVmb3JlaGFuZCwgc28gaXQgY2FuIGJlIHBhc3NlZCB0byBjaGlsZHJlblxyXG4gICAgICAgICAgICBtYXRjaGVyID0gY3JlYXRlUm91dGVSZWNvcmRNYXRjaGVyKG5vcm1hbGl6ZWRSZWNvcmQsIHBhcmVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcGFyZW50ICYmIHBhdGhbMF0gPT09ICcvJylcclxuICAgICAgICAgICAgICAgIGNoZWNrTWlzc2luZ1BhcmFtc0luQWJzb2x1dGVQYXRoKG1hdGNoZXIsIHBhcmVudCk7XHJcbiAgICAgICAgICAgIC8vIGlmIHdlIGFyZSBhbiBhbGlhcyB3ZSBtdXN0IHRlbGwgdGhlIG9yaWdpbmFsIHJlY29yZCB0aGF0IHdlIGV4aXN0LFxyXG4gICAgICAgICAgICAvLyBzbyB3ZSBjYW4gYmUgcmVtb3ZlZFxyXG4gICAgICAgICAgICBpZiAob3JpZ2luYWxSZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsUmVjb3JkLmFsaWFzLnB1c2gobWF0Y2hlcik7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tTYW1lUGFyYW1zKG9yaWdpbmFsUmVjb3JkLCBtYXRjaGVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSwgdGhlIGZpcnN0IHJlY29yZCBpcyB0aGUgb3JpZ2luYWwgYW5kIG90aGVycyBhcmUgYWxpYXNlc1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxNYXRjaGVyID0gb3JpZ2luYWxNYXRjaGVyIHx8IG1hdGNoZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxNYXRjaGVyICE9PSBtYXRjaGVyKVxyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsTWF0Y2hlci5hbGlhcy5wdXNoKG1hdGNoZXIpO1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSByb3V0ZSBpZiBuYW1lZCBhbmQgb25seSBmb3IgdGhlIHRvcCByZWNvcmQgKGF2b2lkIGluIG5lc3RlZCBjYWxscylcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgd29ya3MgYmVjYXVzZSB0aGUgb3JpZ2luYWwgcmVjb3JkIGlzIHRoZSBmaXJzdCBvbmVcclxuICAgICAgICAgICAgICAgIGlmIChpc1Jvb3RBZGQgJiYgcmVjb3JkLm5hbWUgJiYgIWlzQWxpYXNSZWNvcmQobWF0Y2hlcikpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUm91dGUocmVjb3JkLm5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChtYWluTm9ybWFsaXplZFJlY29yZC5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBtYWluTm9ybWFsaXplZFJlY29yZC5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBhZGRSb3V0ZShjaGlsZHJlbltpXSwgbWF0Y2hlciwgb3JpZ2luYWxSZWNvcmQgJiYgb3JpZ2luYWxSZWNvcmQuY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIHdhcyBubyBvcmlnaW5hbCByZWNvcmQsIHRoZW4gdGhlIGZpcnN0IG9uZSB3YXMgbm90IGFuIGFsaWFzIGFuZCBhbGxcclxuICAgICAgICAgICAgLy8gb3RoZXIgYWxpYXNlcyAoaWYgYW55KSBuZWVkIHRvIHJlZmVyZW5jZSB0aGlzIHJlY29yZCB3aGVuIGFkZGluZyBjaGlsZHJlblxyXG4gICAgICAgICAgICBvcmlnaW5hbFJlY29yZCA9IG9yaWdpbmFsUmVjb3JkIHx8IG1hdGNoZXI7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IGFkZCBub3JtYWxpemVkIHJlY29yZHMgZm9yIG1vcmUgZmxleGliaWxpdHlcclxuICAgICAgICAgICAgLy8gaWYgKHBhcmVudCAmJiBpc0FsaWFzUmVjb3JkKG9yaWdpbmFsUmVjb3JkKSkge1xyXG4gICAgICAgICAgICAvLyAgIHBhcmVudC5jaGlsZHJlbi5wdXNoKG9yaWdpbmFsUmVjb3JkKVxyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIGluc2VydE1hdGNoZXIobWF0Y2hlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvcmlnaW5hbE1hdGNoZXJcclxuICAgICAgICAgICAgPyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSBvdGhlciBtYXRjaGVycyBhcmUgYWxpYXNlcywgdGhleSBzaG91bGQgYmUgcmVtb3ZlZCBieSB0aGUgb3JpZ2luYWwgbWF0Y2hlclxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlUm91dGUob3JpZ2luYWxNYXRjaGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IG5vb3A7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZW1vdmVSb3V0ZShtYXRjaGVyUmVmKSB7XHJcbiAgICAgICAgaWYgKGlzUm91dGVOYW1lKG1hdGNoZXJSZWYpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXIgPSBtYXRjaGVyTWFwLmdldChtYXRjaGVyUmVmKTtcclxuICAgICAgICAgICAgaWYgKG1hdGNoZXIpIHtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXJNYXAuZGVsZXRlKG1hdGNoZXJSZWYpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlcnMuc3BsaWNlKG1hdGNoZXJzLmluZGV4T2YobWF0Y2hlciksIDEpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlci5jaGlsZHJlbi5mb3JFYWNoKHJlbW92ZVJvdXRlKTtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXIuYWxpYXMuZm9yRWFjaChyZW1vdmVSb3V0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbWF0Y2hlcnMuaW5kZXhPZihtYXRjaGVyUmVmKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXJzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlclJlZi5yZWNvcmQubmFtZSlcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVyTWFwLmRlbGV0ZShtYXRjaGVyUmVmLnJlY29yZC5uYW1lKTtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXJSZWYuY2hpbGRyZW4uZm9yRWFjaChyZW1vdmVSb3V0ZSk7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVyUmVmLmFsaWFzLmZvckVhY2gocmVtb3ZlUm91dGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZ2V0Um91dGVzKCkge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVycztcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGluc2VydE1hdGNoZXIobWF0Y2hlcikge1xyXG4gICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICB3aGlsZSAoaSA8IG1hdGNoZXJzLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICBjb21wYXJlUGF0aFBhcnNlclNjb3JlKG1hdGNoZXIsIG1hdGNoZXJzW2ldKSA+PSAwICYmXHJcbiAgICAgICAgICAgIC8vIEFkZGluZyBjaGlsZHJlbiB3aXRoIGVtcHR5IHBhdGggc2hvdWxkIHN0aWxsIGFwcGVhciBiZWZvcmUgdGhlIHBhcmVudFxyXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvcm91dGVyL2lzc3Vlcy8xMTI0XHJcbiAgICAgICAgICAgIChtYXRjaGVyLnJlY29yZC5wYXRoICE9PSBtYXRjaGVyc1tpXS5yZWNvcmQucGF0aCB8fFxyXG4gICAgICAgICAgICAgICAgIWlzUmVjb3JkQ2hpbGRPZihtYXRjaGVyLCBtYXRjaGVyc1tpXSkpKVxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgbWF0Y2hlcnMuc3BsaWNlKGksIDAsIG1hdGNoZXIpO1xyXG4gICAgICAgIC8vIG9ubHkgYWRkIHRoZSBvcmlnaW5hbCByZWNvcmQgdG8gdGhlIG5hbWUgbWFwXHJcbiAgICAgICAgaWYgKG1hdGNoZXIucmVjb3JkLm5hbWUgJiYgIWlzQWxpYXNSZWNvcmQobWF0Y2hlcikpXHJcbiAgICAgICAgICAgIG1hdGNoZXJNYXAuc2V0KG1hdGNoZXIucmVjb3JkLm5hbWUsIG1hdGNoZXIpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVzb2x2ZShsb2NhdGlvbiwgY3VycmVudExvY2F0aW9uKSB7XHJcbiAgICAgICAgbGV0IG1hdGNoZXI7XHJcbiAgICAgICAgbGV0IHBhcmFtcyA9IHt9O1xyXG4gICAgICAgIGxldCBwYXRoO1xyXG4gICAgICAgIGxldCBuYW1lO1xyXG4gICAgICAgIGlmICgnbmFtZScgaW4gbG9jYXRpb24gJiYgbG9jYXRpb24ubmFtZSkge1xyXG4gICAgICAgICAgICBtYXRjaGVyID0gbWF0Y2hlck1hcC5nZXQobG9jYXRpb24ubmFtZSk7XHJcbiAgICAgICAgICAgIGlmICghbWF0Y2hlcilcclxuICAgICAgICAgICAgICAgIHRocm93IGNyZWF0ZVJvdXRlckVycm9yKDEgLyogRXJyb3JUeXBlcy5NQVRDSEVSX05PVF9GT1VORCAqLywge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIHdhcm4gaWYgdGhlIHVzZXIgaXMgcGFzc2luZyBpbnZhbGlkIHBhcmFtcyBzbyB0aGV5IGNhbiBkZWJ1ZyBpdCBiZXR0ZXIgd2hlbiB0aGV5IGdldCByZW1vdmVkXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGludmFsaWRQYXJhbXMgPSBPYmplY3Qua2V5cyhsb2NhdGlvbi5wYXJhbXMgfHwge30pLmZpbHRlcihwYXJhbU5hbWUgPT4gIW1hdGNoZXIua2V5cy5maW5kKGsgPT4gay5uYW1lID09PSBwYXJhbU5hbWUpKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbnZhbGlkUGFyYW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYERpc2NhcmRlZCBpbnZhbGlkIHBhcmFtKHMpIFwiJHtpbnZhbGlkUGFyYW1zLmpvaW4oJ1wiLCBcIicpfVwiIHdoZW4gbmF2aWdhdGluZy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy9yb3V0ZXIvYmxvYi9tYWluL3BhY2thZ2VzL3JvdXRlci9DSEFOR0VMT0cubWQjNDE0LTIwMjItMDgtMjIgZm9yIG1vcmUgZGV0YWlscy5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuYW1lID0gbWF0Y2hlci5yZWNvcmQubmFtZTtcclxuICAgICAgICAgICAgcGFyYW1zID0gYXNzaWduKFxyXG4gICAgICAgICAgICAvLyBwYXJhbXNGcm9tTG9jYXRpb24gaXMgYSBuZXcgb2JqZWN0XHJcbiAgICAgICAgICAgIHBhcmFtc0Zyb21Mb2NhdGlvbihjdXJyZW50TG9jYXRpb24ucGFyYW1zLCBcclxuICAgICAgICAgICAgLy8gb25seSBrZWVwIHBhcmFtcyB0aGF0IGV4aXN0IGluIHRoZSByZXNvbHZlZCBsb2NhdGlvblxyXG4gICAgICAgICAgICAvLyBUT0RPOiBvbmx5IGtlZXAgb3B0aW9uYWwgcGFyYW1zIGNvbWluZyBmcm9tIGEgcGFyZW50IHJlY29yZFxyXG4gICAgICAgICAgICBtYXRjaGVyLmtleXMuZmlsdGVyKGsgPT4gIWsub3B0aW9uYWwpLm1hcChrID0+IGsubmFtZSkpLCBcclxuICAgICAgICAgICAgLy8gZGlzY2FyZCBhbnkgZXhpc3RpbmcgcGFyYW1zIGluIHRoZSBjdXJyZW50IGxvY2F0aW9uIHRoYXQgZG8gbm90IGV4aXN0IGhlcmVcclxuICAgICAgICAgICAgLy8gIzE0OTcgdGhpcyBlbnN1cmVzIGJldHRlciBhY3RpdmUvZXhhY3QgbWF0Y2hpbmdcclxuICAgICAgICAgICAgbG9jYXRpb24ucGFyYW1zICYmXHJcbiAgICAgICAgICAgICAgICBwYXJhbXNGcm9tTG9jYXRpb24obG9jYXRpb24ucGFyYW1zLCBtYXRjaGVyLmtleXMubWFwKGsgPT4gay5uYW1lKSkpO1xyXG4gICAgICAgICAgICAvLyB0aHJvd3MgaWYgY2Fubm90IGJlIHN0cmluZ2lmaWVkXHJcbiAgICAgICAgICAgIHBhdGggPSBtYXRjaGVyLnN0cmluZ2lmeShwYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgncGF0aCcgaW4gbG9jYXRpb24pIHtcclxuICAgICAgICAgICAgLy8gbm8gbmVlZCB0byByZXNvbHZlIHRoZSBwYXRoIHdpdGggdGhlIG1hdGNoZXIgYXMgaXQgd2FzIHByb3ZpZGVkXHJcbiAgICAgICAgICAgIC8vIHRoaXMgYWxzbyBhbGxvd3MgdGhlIHVzZXIgdG8gY29udHJvbCB0aGUgZW5jb2RpbmdcclxuICAgICAgICAgICAgcGF0aCA9IGxvY2F0aW9uLnBhdGg7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXBhdGguc3RhcnRzV2l0aCgnLycpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBUaGUgTWF0Y2hlciBjYW5ub3QgcmVzb2x2ZSByZWxhdGl2ZSBwYXRocyBidXQgcmVjZWl2ZWQgXCIke3BhdGh9XCIuIFVubGVzcyB5b3UgZGlyZWN0bHkgY2FsbGVkIFxcYG1hdGNoZXIucmVzb2x2ZShcIiR7cGF0aH1cIilcXGAsIHRoaXMgaXMgcHJvYmFibHkgYSBidWcgaW4gdnVlLXJvdXRlci4gUGxlYXNlIG9wZW4gYW4gaXNzdWUgYXQgaHR0cHM6Ly9uZXctaXNzdWUudnVlanMub3JnLz9yZXBvPXZ1ZWpzL3JvdXRlci5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYXRjaGVyID0gbWF0Y2hlcnMuZmluZChtID0+IG0ucmUudGVzdChwYXRoKSk7XHJcbiAgICAgICAgICAgIC8vIG1hdGNoZXIgc2hvdWxkIGhhdmUgYSB2YWx1ZSBhZnRlciB0aGUgbG9vcFxyXG4gICAgICAgICAgICBpZiAobWF0Y2hlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gd2Uga25vdyB0aGUgbWF0Y2hlciB3b3JrcyBiZWNhdXNlIHdlIHRlc3RlZCB0aGUgcmVnZXhwXHJcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBtYXRjaGVyLnBhcnNlKHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IG1hdGNoZXIucmVjb3JkLm5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbG9jYXRpb24gaXMgYSByZWxhdGl2ZSBwYXRoXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBtYXRjaCBieSBuYW1lIG9yIHBhdGggb2YgY3VycmVudCByb3V0ZVxyXG4gICAgICAgICAgICBtYXRjaGVyID0gY3VycmVudExvY2F0aW9uLm5hbWVcclxuICAgICAgICAgICAgICAgID8gbWF0Y2hlck1hcC5nZXQoY3VycmVudExvY2F0aW9uLm5hbWUpXHJcbiAgICAgICAgICAgICAgICA6IG1hdGNoZXJzLmZpbmQobSA9PiBtLnJlLnRlc3QoY3VycmVudExvY2F0aW9uLnBhdGgpKTtcclxuICAgICAgICAgICAgaWYgKCFtYXRjaGVyKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgY3JlYXRlUm91dGVyRXJyb3IoMSAvKiBFcnJvclR5cGVzLk1BVENIRVJfTk9UX0ZPVU5EICovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudExvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG5hbWUgPSBtYXRjaGVyLnJlY29yZC5uYW1lO1xyXG4gICAgICAgICAgICAvLyBzaW5jZSB3ZSBhcmUgbmF2aWdhdGluZyB0byB0aGUgc2FtZSBsb2NhdGlvbiwgd2UgZG9uJ3QgbmVlZCB0byBwaWNrIHRoZVxyXG4gICAgICAgICAgICAvLyBwYXJhbXMgbGlrZSB3aGVuIGBuYW1lYCBpcyBwcm92aWRlZFxyXG4gICAgICAgICAgICBwYXJhbXMgPSBhc3NpZ24oe30sIGN1cnJlbnRMb2NhdGlvbi5wYXJhbXMsIGxvY2F0aW9uLnBhcmFtcyk7XHJcbiAgICAgICAgICAgIHBhdGggPSBtYXRjaGVyLnN0cmluZ2lmeShwYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtYXRjaGVkID0gW107XHJcbiAgICAgICAgbGV0IHBhcmVudE1hdGNoZXIgPSBtYXRjaGVyO1xyXG4gICAgICAgIHdoaWxlIChwYXJlbnRNYXRjaGVyKSB7XHJcbiAgICAgICAgICAgIC8vIHJldmVyc2VkIG9yZGVyIHNvIHBhcmVudHMgYXJlIGF0IHRoZSBiZWdpbm5pbmdcclxuICAgICAgICAgICAgbWF0Y2hlZC51bnNoaWZ0KHBhcmVudE1hdGNoZXIucmVjb3JkKTtcclxuICAgICAgICAgICAgcGFyZW50TWF0Y2hlciA9IHBhcmVudE1hdGNoZXIucGFyZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICBwYXRoLFxyXG4gICAgICAgICAgICBwYXJhbXMsXHJcbiAgICAgICAgICAgIG1hdGNoZWQsXHJcbiAgICAgICAgICAgIG1ldGE6IG1lcmdlTWV0YUZpZWxkcyhtYXRjaGVkKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLy8gYWRkIGluaXRpYWwgcm91dGVzXHJcbiAgICByb3V0ZXMuZm9yRWFjaChyb3V0ZSA9PiBhZGRSb3V0ZShyb3V0ZSkpO1xyXG4gICAgcmV0dXJuIHsgYWRkUm91dGUsIHJlc29sdmUsIHJlbW92ZVJvdXRlLCBnZXRSb3V0ZXMsIGdldFJlY29yZE1hdGNoZXIgfTtcclxufVxyXG5mdW5jdGlvbiBwYXJhbXNGcm9tTG9jYXRpb24ocGFyYW1zLCBrZXlzKSB7XHJcbiAgICBjb25zdCBuZXdQYXJhbXMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcclxuICAgICAgICBpZiAoa2V5IGluIHBhcmFtcylcclxuICAgICAgICAgICAgbmV3UGFyYW1zW2tleV0gPSBwYXJhbXNba2V5XTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdQYXJhbXM7XHJcbn1cclxuLyoqXHJcbiAqIE5vcm1hbGl6ZXMgYSBSb3V0ZVJlY29yZFJhdy4gQ3JlYXRlcyBhIGNvcHlcclxuICpcclxuICogQHBhcmFtIHJlY29yZFxyXG4gKiBAcmV0dXJucyB0aGUgbm9ybWFsaXplZCB2ZXJzaW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBub3JtYWxpemVSb3V0ZVJlY29yZChyZWNvcmQpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcGF0aDogcmVjb3JkLnBhdGgsXHJcbiAgICAgICAgcmVkaXJlY3Q6IHJlY29yZC5yZWRpcmVjdCxcclxuICAgICAgICBuYW1lOiByZWNvcmQubmFtZSxcclxuICAgICAgICBtZXRhOiByZWNvcmQubWV0YSB8fCB7fSxcclxuICAgICAgICBhbGlhc09mOiB1bmRlZmluZWQsXHJcbiAgICAgICAgYmVmb3JlRW50ZXI6IHJlY29yZC5iZWZvcmVFbnRlcixcclxuICAgICAgICBwcm9wczogbm9ybWFsaXplUmVjb3JkUHJvcHMocmVjb3JkKSxcclxuICAgICAgICBjaGlsZHJlbjogcmVjb3JkLmNoaWxkcmVuIHx8IFtdLFxyXG4gICAgICAgIGluc3RhbmNlczoge30sXHJcbiAgICAgICAgbGVhdmVHdWFyZHM6IG5ldyBTZXQoKSxcclxuICAgICAgICB1cGRhdGVHdWFyZHM6IG5ldyBTZXQoKSxcclxuICAgICAgICBlbnRlckNhbGxiYWNrczoge30sXHJcbiAgICAgICAgY29tcG9uZW50czogJ2NvbXBvbmVudHMnIGluIHJlY29yZFxyXG4gICAgICAgICAgICA/IHJlY29yZC5jb21wb25lbnRzIHx8IG51bGxcclxuICAgICAgICAgICAgOiByZWNvcmQuY29tcG9uZW50ICYmIHsgZGVmYXVsdDogcmVjb3JkLmNvbXBvbmVudCB9LFxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogTm9ybWFsaXplIHRoZSBvcHRpb25hbCBgcHJvcHNgIGluIGEgcmVjb3JkIHRvIGFsd2F5cyBiZSBhbiBvYmplY3Qgc2ltaWxhciB0b1xyXG4gKiBjb21wb25lbnRzLiBBbHNvIGFjY2VwdCBhIGJvb2xlYW4gZm9yIGNvbXBvbmVudHMuXHJcbiAqIEBwYXJhbSByZWNvcmRcclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlY29yZFByb3BzKHJlY29yZCkge1xyXG4gICAgY29uc3QgcHJvcHNPYmplY3QgPSB7fTtcclxuICAgIC8vIHByb3BzIGRvZXMgbm90IGV4aXN0IG9uIHJlZGlyZWN0IHJlY29yZHMsIGJ1dCB3ZSBjYW4gc2V0IGZhbHNlIGRpcmVjdGx5XHJcbiAgICBjb25zdCBwcm9wcyA9IHJlY29yZC5wcm9wcyB8fCBmYWxzZTtcclxuICAgIGlmICgnY29tcG9uZW50JyBpbiByZWNvcmQpIHtcclxuICAgICAgICBwcm9wc09iamVjdC5kZWZhdWx0ID0gcHJvcHM7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBOT1RFOiB3ZSBjb3VsZCBhbHNvIGFsbG93IGEgZnVuY3Rpb24gdG8gYmUgYXBwbGllZCB0byBldmVyeSBjb21wb25lbnQuXHJcbiAgICAgICAgLy8gV291bGQgbmVlZCB1c2VyIGZlZWRiYWNrIGZvciB1c2UgY2FzZXNcclxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gcmVjb3JkLmNvbXBvbmVudHMpXHJcbiAgICAgICAgICAgIHByb3BzT2JqZWN0W25hbWVdID0gdHlwZW9mIHByb3BzID09PSAnYm9vbGVhbicgPyBwcm9wcyA6IHByb3BzW25hbWVdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3BzT2JqZWN0O1xyXG59XHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYSByZWNvcmQgb3IgYW55IG9mIGl0cyBwYXJlbnQgaXMgYW4gYWxpYXNcclxuICogQHBhcmFtIHJlY29yZFxyXG4gKi9cclxuZnVuY3Rpb24gaXNBbGlhc1JlY29yZChyZWNvcmQpIHtcclxuICAgIHdoaWxlIChyZWNvcmQpIHtcclxuICAgICAgICBpZiAocmVjb3JkLnJlY29yZC5hbGlhc09mKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICByZWNvcmQgPSByZWNvcmQucGFyZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbi8qKlxyXG4gKiBNZXJnZSBtZXRhIGZpZWxkcyBvZiBhbiBhcnJheSBvZiByZWNvcmRzXHJcbiAqXHJcbiAqIEBwYXJhbSBtYXRjaGVkIC0gYXJyYXkgb2YgbWF0Y2hlZCByZWNvcmRzXHJcbiAqL1xyXG5mdW5jdGlvbiBtZXJnZU1ldGFGaWVsZHMobWF0Y2hlZCkge1xyXG4gICAgcmV0dXJuIG1hdGNoZWQucmVkdWNlKChtZXRhLCByZWNvcmQpID0+IGFzc2lnbihtZXRhLCByZWNvcmQubWV0YSksIHt9KTtcclxufVxyXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMoZGVmYXVsdHMsIHBhcnRpYWxPcHRpb25zKSB7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBkZWZhdWx0cykge1xyXG4gICAgICAgIG9wdGlvbnNba2V5XSA9IGtleSBpbiBwYXJ0aWFsT3B0aW9ucyA/IHBhcnRpYWxPcHRpb25zW2tleV0gOiBkZWZhdWx0c1trZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9wdGlvbnM7XHJcbn1cclxuZnVuY3Rpb24gaXNTYW1lUGFyYW0oYSwgYikge1xyXG4gICAgcmV0dXJuIChhLm5hbWUgPT09IGIubmFtZSAmJlxyXG4gICAgICAgIGEub3B0aW9uYWwgPT09IGIub3B0aW9uYWwgJiZcclxuICAgICAgICBhLnJlcGVhdGFibGUgPT09IGIucmVwZWF0YWJsZSk7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrIGlmIGEgcGF0aCBhbmQgaXRzIGFsaWFzIGhhdmUgdGhlIHNhbWUgcmVxdWlyZWQgcGFyYW1zXHJcbiAqXHJcbiAqIEBwYXJhbSBhIC0gb3JpZ2luYWwgcmVjb3JkXHJcbiAqIEBwYXJhbSBiIC0gYWxpYXMgcmVjb3JkXHJcbiAqL1xyXG5mdW5jdGlvbiBjaGVja1NhbWVQYXJhbXMoYSwgYikge1xyXG4gICAgZm9yIChjb25zdCBrZXkgb2YgYS5rZXlzKSB7XHJcbiAgICAgICAgaWYgKCFrZXkub3B0aW9uYWwgJiYgIWIua2V5cy5maW5kKGlzU2FtZVBhcmFtLmJpbmQobnVsbCwga2V5KSkpXHJcbiAgICAgICAgICAgIHJldHVybiB3YXJuKGBBbGlhcyBcIiR7Yi5yZWNvcmQucGF0aH1cIiBhbmQgdGhlIG9yaWdpbmFsIHJlY29yZDogXCIke2EucmVjb3JkLnBhdGh9XCIgbXVzdCBoYXZlIHRoZSBleGFjdCBzYW1lIHBhcmFtIG5hbWVkIFwiJHtrZXkubmFtZX1cImApO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBrZXkgb2YgYi5rZXlzKSB7XHJcbiAgICAgICAgaWYgKCFrZXkub3B0aW9uYWwgJiYgIWEua2V5cy5maW5kKGlzU2FtZVBhcmFtLmJpbmQobnVsbCwga2V5KSkpXHJcbiAgICAgICAgICAgIHJldHVybiB3YXJuKGBBbGlhcyBcIiR7Yi5yZWNvcmQucGF0aH1cIiBhbmQgdGhlIG9yaWdpbmFsIHJlY29yZDogXCIke2EucmVjb3JkLnBhdGh9XCIgbXVzdCBoYXZlIHRoZSBleGFjdCBzYW1lIHBhcmFtIG5hbWVkIFwiJHtrZXkubmFtZX1cImApO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBIHJvdXRlIHdpdGggYSBuYW1lIGFuZCBhIGNoaWxkIHdpdGggYW4gZW1wdHkgcGF0aCB3aXRob3V0IGEgbmFtZSBzaG91bGQgd2FybiB3aGVuIGFkZGluZyB0aGUgcm91dGVcclxuICpcclxuICogQHBhcmFtIG1haW5Ob3JtYWxpemVkUmVjb3JkIC0gUm91dGVSZWNvcmROb3JtYWxpemVkXHJcbiAqIEBwYXJhbSBwYXJlbnQgLSBSb3V0ZVJlY29yZE1hdGNoZXJcclxuICovXHJcbmZ1bmN0aW9uIGNoZWNrQ2hpbGRNaXNzaW5nTmFtZVdpdGhFbXB0eVBhdGgobWFpbk5vcm1hbGl6ZWRSZWNvcmQsIHBhcmVudCkge1xyXG4gICAgaWYgKHBhcmVudCAmJlxyXG4gICAgICAgIHBhcmVudC5yZWNvcmQubmFtZSAmJlxyXG4gICAgICAgICFtYWluTm9ybWFsaXplZFJlY29yZC5uYW1lICYmXHJcbiAgICAgICAgIW1haW5Ob3JtYWxpemVkUmVjb3JkLnBhdGgpIHtcclxuICAgICAgICB3YXJuKGBUaGUgcm91dGUgbmFtZWQgXCIke1N0cmluZyhwYXJlbnQucmVjb3JkLm5hbWUpfVwiIGhhcyBhIGNoaWxkIHdpdGhvdXQgYSBuYW1lIGFuZCBhbiBlbXB0eSBwYXRoLiBVc2luZyB0aGF0IG5hbWUgd29uJ3QgcmVuZGVyIHRoZSBlbXB0eSBwYXRoIGNoaWxkIHNvIHlvdSBwcm9iYWJseSB3YW50IHRvIG1vdmUgdGhlIG5hbWUgdG8gdGhlIGNoaWxkIGluc3RlYWQuIElmIHRoaXMgaXMgaW50ZW50aW9uYWwsIGFkZCBhIG5hbWUgdG8gdGhlIGNoaWxkIHJvdXRlIHRvIHJlbW92ZSB0aGUgd2FybmluZy5gKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjaGVja01pc3NpbmdQYXJhbXNJbkFic29sdXRlUGF0aChyZWNvcmQsIHBhcmVudCkge1xyXG4gICAgZm9yIChjb25zdCBrZXkgb2YgcGFyZW50LmtleXMpIHtcclxuICAgICAgICBpZiAoIXJlY29yZC5rZXlzLmZpbmQoaXNTYW1lUGFyYW0uYmluZChudWxsLCBrZXkpKSlcclxuICAgICAgICAgICAgcmV0dXJuIHdhcm4oYEFic29sdXRlIHBhdGggXCIke3JlY29yZC5yZWNvcmQucGF0aH1cIiBtdXN0IGhhdmUgdGhlIGV4YWN0IHNhbWUgcGFyYW0gbmFtZWQgXCIke2tleS5uYW1lfVwiIGFzIGl0cyBwYXJlbnQgXCIke3BhcmVudC5yZWNvcmQucGF0aH1cIi5gKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc1JlY29yZENoaWxkT2YocmVjb3JkLCBwYXJlbnQpIHtcclxuICAgIHJldHVybiBwYXJlbnQuY2hpbGRyZW4uc29tZShjaGlsZCA9PiBjaGlsZCA9PT0gcmVjb3JkIHx8IGlzUmVjb3JkQ2hpbGRPZihyZWNvcmQsIGNoaWxkKSk7XHJcbn1cblxuLyoqXHJcbiAqIEVuY29kaW5nIFJ1bGVzIOKQoyA9IFNwYWNlIFBhdGg6IOKQoyBcIiA8ID4gIyA/IHsgfSBRdWVyeTog4pCjIFwiIDwgPiAjICYgPSBIYXNoOiDikKMgXCJcclxuICogPCA+IGBcclxuICpcclxuICogT24gdG9wIG9mIHRoYXQsIHRoZSBSRkMzOTg2IChodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTIuMilcclxuICogZGVmaW5lcyBzb21lIGV4dHJhIGNoYXJhY3RlcnMgdG8gYmUgZW5jb2RlZC4gTW9zdCBicm93c2VycyBkbyBub3QgZW5jb2RlIHRoZW1cclxuICogaW4gZW5jb2RlVVJJIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvdXJsL2lzc3Vlcy8zNjksIHNvIGl0IG1heSBiZSBzYWZlciB0b1xyXG4gKiBhbHNvIGVuY29kZSBgIScoKSpgLiBMZWF2aW5nIHVuLWVuY29kZWQgb25seSBBU0NJSSBhbHBoYW51bWVyaWMoYGEtekEtWjAtOWApXHJcbiAqIHBsdXMgYC0uX35gLiBUaGlzIGV4dHJhIHNhZmV0eSBzaG91bGQgYmUgYXBwbGllZCB0byBxdWVyeSBieSBwYXRjaGluZyB0aGVcclxuICogc3RyaW5nIHJldHVybmVkIGJ5IGVuY29kZVVSSUNvbXBvbmVudCBlbmNvZGVVUkkgYWxzbyBlbmNvZGVzIGBbXFxdXmAuIGBcXGBcclxuICogc2hvdWxkIGJlIGVuY29kZWQgdG8gYXZvaWQgYW1iaWd1aXR5LiBCcm93c2VycyAoSUUsIEZGLCBDKSB0cmFuc2Zvcm0gYSBgXFxgXHJcbiAqIGludG8gYSBgL2AgaWYgZGlyZWN0bHkgdHlwZWQgaW4uIFRoZSBfYmFja3RpY2tfIChgYGBgYCkgc2hvdWxkIGFsc28gYmVcclxuICogZW5jb2RlZCBldmVyeXdoZXJlIGJlY2F1c2Ugc29tZSBicm93c2VycyBsaWtlIEZGIGVuY29kZSBpdCB3aGVuIGRpcmVjdGx5XHJcbiAqIHdyaXR0ZW4gd2hpbGUgb3RoZXJzIGRvbid0LiBTYWZhcmkgYW5kIElFIGRvbid0IGVuY29kZSBgYFwiPD57fWBgYCBpbiBoYXNoLlxyXG4gKi9cclxuLy8gY29uc3QgRVhUUkFfUkVTRVJWRURfUkUgPSAvWyEnKCkqXS9nXHJcbi8vIGNvbnN0IGVuY29kZVJlc2VydmVkUmVwbGFjZXIgPSAoYzogc3RyaW5nKSA9PiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpXHJcbmNvbnN0IEhBU0hfUkUgPSAvIy9nOyAvLyAlMjNcclxuY29uc3QgQU1QRVJTQU5EX1JFID0gLyYvZzsgLy8gJTI2XHJcbmNvbnN0IFNMQVNIX1JFID0gL1xcLy9nOyAvLyAlMkZcclxuY29uc3QgRVFVQUxfUkUgPSAvPS9nOyAvLyAlM0RcclxuY29uc3QgSU1fUkUgPSAvXFw/L2c7IC8vICUzRlxyXG5jb25zdCBQTFVTX1JFID0gL1xcKy9nOyAvLyAlMkJcclxuLyoqXHJcbiAqIE5PVEU6IEl0J3Mgbm90IGNsZWFyIHRvIG1lIGlmIHdlIHNob3VsZCBlbmNvZGUgdGhlICsgc3ltYm9sIGluIHF1ZXJpZXMsIGl0XHJcbiAqIHNlZW1zIHRvIGJlIGxlc3MgZmxleGlibGUgdGhhbiBub3QgZG9pbmcgc28gYW5kIEkgY2FuJ3QgZmluZCBvdXQgdGhlIGxlZ2FjeVxyXG4gKiBzeXN0ZW1zIHJlcXVpcmluZyB0aGlzIGZvciByZWd1bGFyIHJlcXVlc3RzIGxpa2UgdGV4dC9odG1sLiBJbiB0aGUgc3RhbmRhcmQsXHJcbiAqIHRoZSBlbmNvZGluZyBvZiB0aGUgcGx1cyBjaGFyYWN0ZXIgaXMgb25seSBtZW50aW9uZWQgZm9yXHJcbiAqIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFxyXG4gKiAoaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmxlbmNvZGVkLXBhcnNpbmcpIGFuZCBtb3N0IGJyb3dzZXJzIHNlZW1zIGxvXHJcbiAqIGxlYXZlIHRoZSBwbHVzIGNoYXJhY3RlciBhcyBpcyBpbiBxdWVyaWVzLiBUbyBiZSBtb3JlIGZsZXhpYmxlLCB3ZSBhbGxvdyB0aGVcclxuICogcGx1cyBjaGFyYWN0ZXIgb24gdGhlIHF1ZXJ5LCBidXQgaXQgY2FuIGFsc28gYmUgbWFudWFsbHkgZW5jb2RlZCBieSB0aGUgdXNlci5cclxuICpcclxuICogUmVzb3VyY2VzOlxyXG4gKiAtIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsZW5jb2RlZC1wYXJzaW5nXHJcbiAqIC0gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTYzNDI3MS91cmwtZW5jb2RpbmctdGhlLXNwYWNlLWNoYXJhY3Rlci1vci0yMFxyXG4gKi9cclxuY29uc3QgRU5DX0JSQUNLRVRfT1BFTl9SRSA9IC8lNUIvZzsgLy8gW1xyXG5jb25zdCBFTkNfQlJBQ0tFVF9DTE9TRV9SRSA9IC8lNUQvZzsgLy8gXVxyXG5jb25zdCBFTkNfQ0FSRVRfUkUgPSAvJTVFL2c7IC8vIF5cclxuY29uc3QgRU5DX0JBQ0tUSUNLX1JFID0gLyU2MC9nOyAvLyBgXHJcbmNvbnN0IEVOQ19DVVJMWV9PUEVOX1JFID0gLyU3Qi9nOyAvLyB7XHJcbmNvbnN0IEVOQ19QSVBFX1JFID0gLyU3Qy9nOyAvLyB8XHJcbmNvbnN0IEVOQ19DVVJMWV9DTE9TRV9SRSA9IC8lN0QvZzsgLy8gfVxyXG5jb25zdCBFTkNfU1BBQ0VfUkUgPSAvJTIwL2c7IC8vIH1cclxuLyoqXHJcbiAqIEVuY29kZSBjaGFyYWN0ZXJzIHRoYXQgbmVlZCB0byBiZSBlbmNvZGVkIG9uIHRoZSBwYXRoLCBzZWFyY2ggYW5kIGhhc2hcclxuICogc2VjdGlvbnMgb2YgdGhlIFVSTC5cclxuICpcclxuICogQGludGVybmFsXHJcbiAqIEBwYXJhbSB0ZXh0IC0gc3RyaW5nIHRvIGVuY29kZVxyXG4gKiBAcmV0dXJucyBlbmNvZGVkIHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gY29tbW9uRW5jb2RlKHRleHQpIHtcclxuICAgIHJldHVybiBlbmNvZGVVUkkoJycgKyB0ZXh0KVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19QSVBFX1JFLCAnfCcpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0JSQUNLRVRfT1BFTl9SRSwgJ1snKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19CUkFDS0VUX0NMT1NFX1JFLCAnXScpO1xyXG59XHJcbi8qKlxyXG4gKiBFbmNvZGUgY2hhcmFjdGVycyB0aGF0IG5lZWQgdG8gYmUgZW5jb2RlZCBvbiB0aGUgaGFzaCBzZWN0aW9uIG9mIHRoZSBVUkwuXHJcbiAqXHJcbiAqIEBwYXJhbSB0ZXh0IC0gc3RyaW5nIHRvIGVuY29kZVxyXG4gKiBAcmV0dXJucyBlbmNvZGVkIHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZW5jb2RlSGFzaCh0ZXh0KSB7XHJcbiAgICByZXR1cm4gY29tbW9uRW5jb2RlKHRleHQpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0NVUkxZX09QRU5fUkUsICd7JylcclxuICAgICAgICAucmVwbGFjZShFTkNfQ1VSTFlfQ0xPU0VfUkUsICd9JylcclxuICAgICAgICAucmVwbGFjZShFTkNfQ0FSRVRfUkUsICdeJyk7XHJcbn1cclxuLyoqXHJcbiAqIEVuY29kZSBjaGFyYWN0ZXJzIHRoYXQgbmVlZCB0byBiZSBlbmNvZGVkIHF1ZXJ5IHZhbHVlcyBvbiB0aGUgcXVlcnlcclxuICogc2VjdGlvbiBvZiB0aGUgVVJMLlxyXG4gKlxyXG4gKiBAcGFyYW0gdGV4dCAtIHN0cmluZyB0byBlbmNvZGVcclxuICogQHJldHVybnMgZW5jb2RlZCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGVuY29kZVF1ZXJ5VmFsdWUodGV4dCkge1xyXG4gICAgcmV0dXJuIChjb21tb25FbmNvZGUodGV4dClcclxuICAgICAgICAvLyBFbmNvZGUgdGhlIHNwYWNlIGFzICssIGVuY29kZSB0aGUgKyB0byBkaWZmZXJlbnRpYXRlIGl0IGZyb20gdGhlIHNwYWNlXHJcbiAgICAgICAgLnJlcGxhY2UoUExVU19SRSwgJyUyQicpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX1NQQUNFX1JFLCAnKycpXHJcbiAgICAgICAgLnJlcGxhY2UoSEFTSF9SRSwgJyUyMycpXHJcbiAgICAgICAgLnJlcGxhY2UoQU1QRVJTQU5EX1JFLCAnJTI2JylcclxuICAgICAgICAucmVwbGFjZShFTkNfQkFDS1RJQ0tfUkUsICdgJylcclxuICAgICAgICAucmVwbGFjZShFTkNfQ1VSTFlfT1BFTl9SRSwgJ3snKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19DVVJMWV9DTE9TRV9SRSwgJ30nKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19DQVJFVF9SRSwgJ14nKSk7XHJcbn1cclxuLyoqXHJcbiAqIExpa2UgYGVuY29kZVF1ZXJ5VmFsdWVgIGJ1dCBhbHNvIGVuY29kZXMgdGhlIGA9YCBjaGFyYWN0ZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB0ZXh0IC0gc3RyaW5nIHRvIGVuY29kZVxyXG4gKi9cclxuZnVuY3Rpb24gZW5jb2RlUXVlcnlLZXkodGV4dCkge1xyXG4gICAgcmV0dXJuIGVuY29kZVF1ZXJ5VmFsdWUodGV4dCkucmVwbGFjZShFUVVBTF9SRSwgJyUzRCcpO1xyXG59XHJcbi8qKlxyXG4gKiBFbmNvZGUgY2hhcmFjdGVycyB0aGF0IG5lZWQgdG8gYmUgZW5jb2RlZCBvbiB0aGUgcGF0aCBzZWN0aW9uIG9mIHRoZSBVUkwuXHJcbiAqXHJcbiAqIEBwYXJhbSB0ZXh0IC0gc3RyaW5nIHRvIGVuY29kZVxyXG4gKiBAcmV0dXJucyBlbmNvZGVkIHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZW5jb2RlUGF0aCh0ZXh0KSB7XHJcbiAgICByZXR1cm4gY29tbW9uRW5jb2RlKHRleHQpLnJlcGxhY2UoSEFTSF9SRSwgJyUyMycpLnJlcGxhY2UoSU1fUkUsICclM0YnKTtcclxufVxyXG4vKipcclxuICogRW5jb2RlIGNoYXJhY3RlcnMgdGhhdCBuZWVkIHRvIGJlIGVuY29kZWQgb24gdGhlIHBhdGggc2VjdGlvbiBvZiB0aGUgVVJMIGFzIGFcclxuICogcGFyYW0uIFRoaXMgZnVuY3Rpb24gZW5jb2RlcyBldmVyeXRoaW5nIHtAbGluayBlbmNvZGVQYXRofSBkb2VzIHBsdXMgdGhlXHJcbiAqIHNsYXNoIChgL2ApIGNoYXJhY3Rlci4gSWYgYHRleHRgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYCwgcmV0dXJucyBhbiBlbXB0eVxyXG4gKiBzdHJpbmcgaW5zdGVhZC5cclxuICpcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZW5jb2RlXHJcbiAqIEByZXR1cm5zIGVuY29kZWQgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmNvZGVQYXJhbSh0ZXh0KSB7XHJcbiAgICByZXR1cm4gdGV4dCA9PSBudWxsID8gJycgOiBlbmNvZGVQYXRoKHRleHQpLnJlcGxhY2UoU0xBU0hfUkUsICclMkYnKTtcclxufVxyXG4vKipcclxuICogRGVjb2RlIHRleHQgdXNpbmcgYGRlY29kZVVSSUNvbXBvbmVudGAuIFJldHVybnMgdGhlIG9yaWdpbmFsIHRleHQgaWYgaXRcclxuICogZmFpbHMuXHJcbiAqXHJcbiAqIEBwYXJhbSB0ZXh0IC0gc3RyaW5nIHRvIGRlY29kZVxyXG4gKiBAcmV0dXJucyBkZWNvZGVkIHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZGVjb2RlKHRleHQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCgnJyArIHRleHQpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBFcnJvciBkZWNvZGluZyBcIiR7dGV4dH1cIi4gVXNpbmcgb3JpZ2luYWwgdmFsdWVgKTtcclxuICAgIH1cclxuICAgIHJldHVybiAnJyArIHRleHQ7XHJcbn1cblxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgYSBxdWVyeVN0cmluZyBpbnRvIGEge0BsaW5rIExvY2F0aW9uUXVlcnl9IG9iamVjdC4gQWNjZXB0IGJvdGgsIGFcclxuICogdmVyc2lvbiB3aXRoIHRoZSBsZWFkaW5nIGA/YCBhbmQgd2l0aG91dCBTaG91bGQgd29yayBhcyBVUkxTZWFyY2hQYXJhbXNcclxuXG4gKiBAaW50ZXJuYWxcclxuICpcclxuICogQHBhcmFtIHNlYXJjaCAtIHNlYXJjaCBzdHJpbmcgdG8gcGFyc2VcclxuICogQHJldHVybnMgYSBxdWVyeSBvYmplY3RcclxuICovXHJcbmZ1bmN0aW9uIHBhcnNlUXVlcnkoc2VhcmNoKSB7XHJcbiAgICBjb25zdCBxdWVyeSA9IHt9O1xyXG4gICAgLy8gYXZvaWQgY3JlYXRpbmcgYW4gb2JqZWN0IHdpdGggYW4gZW1wdHkga2V5IGFuZCBlbXB0eSB2YWx1ZVxyXG4gICAgLy8gYmVjYXVzZSBvZiBzcGxpdCgnJicpXHJcbiAgICBpZiAoc2VhcmNoID09PSAnJyB8fCBzZWFyY2ggPT09ICc/JylcclxuICAgICAgICByZXR1cm4gcXVlcnk7XHJcbiAgICBjb25zdCBoYXNMZWFkaW5nSU0gPSBzZWFyY2hbMF0gPT09ICc/JztcclxuICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IChoYXNMZWFkaW5nSU0gPyBzZWFyY2guc2xpY2UoMSkgOiBzZWFyY2gpLnNwbGl0KCcmJyk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlYXJjaFBhcmFtcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIC8vIHByZSBkZWNvZGUgdGhlICsgaW50byBzcGFjZVxyXG4gICAgICAgIGNvbnN0IHNlYXJjaFBhcmFtID0gc2VhcmNoUGFyYW1zW2ldLnJlcGxhY2UoUExVU19SRSwgJyAnKTtcclxuICAgICAgICAvLyBhbGxvdyB0aGUgPSBjaGFyYWN0ZXJcclxuICAgICAgICBjb25zdCBlcVBvcyA9IHNlYXJjaFBhcmFtLmluZGV4T2YoJz0nKTtcclxuICAgICAgICBjb25zdCBrZXkgPSBkZWNvZGUoZXFQb3MgPCAwID8gc2VhcmNoUGFyYW0gOiBzZWFyY2hQYXJhbS5zbGljZSgwLCBlcVBvcykpO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZXFQb3MgPCAwID8gbnVsbCA6IGRlY29kZShzZWFyY2hQYXJhbS5zbGljZShlcVBvcyArIDEpKTtcclxuICAgICAgICBpZiAoa2V5IGluIHF1ZXJ5KSB7XHJcbiAgICAgICAgICAgIC8vIGFuIGV4dHJhIHZhcmlhYmxlIGZvciB0cyB0eXBlc1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudFZhbHVlID0gcXVlcnlba2V5XTtcclxuICAgICAgICAgICAgaWYgKCFpc0FycmF5KGN1cnJlbnRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IHF1ZXJ5W2tleV0gPSBbY3VycmVudFZhbHVlXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50VmFsdWUucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBxdWVyeVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHF1ZXJ5O1xyXG59XHJcbi8qKlxyXG4gKiBTdHJpbmdpZmllcyBhIHtAbGluayBMb2NhdGlvblF1ZXJ5UmF3fSBvYmplY3QuIExpa2UgYFVSTFNlYXJjaFBhcmFtc2AsIGl0XHJcbiAqIGRvZXNuJ3QgcHJlcGVuZCBhIGA/YFxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICpcclxuICogQHBhcmFtIHF1ZXJ5IC0gcXVlcnkgb2JqZWN0IHRvIHN0cmluZ2lmeVxyXG4gKiBAcmV0dXJucyBzdHJpbmcgdmVyc2lvbiBvZiB0aGUgcXVlcnkgd2l0aG91dCB0aGUgbGVhZGluZyBgP2BcclxuICovXHJcbmZ1bmN0aW9uIHN0cmluZ2lmeVF1ZXJ5KHF1ZXJ5KSB7XHJcbiAgICBsZXQgc2VhcmNoID0gJyc7XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gcXVlcnkpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHF1ZXJ5W2tleV07XHJcbiAgICAgICAga2V5ID0gZW5jb2RlUXVlcnlLZXkoa2V5KTtcclxuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBvbmx5IG51bGwgYWRkcyB0aGUgdmFsdWVcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHNlYXJjaCArPSAoc2VhcmNoLmxlbmd0aCA/ICcmJyA6ICcnKSArIGtleTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8ga2VlcCBudWxsIHZhbHVlc1xyXG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IGlzQXJyYXkodmFsdWUpXHJcbiAgICAgICAgICAgID8gdmFsdWUubWFwKHYgPT4gdiAmJiBlbmNvZGVRdWVyeVZhbHVlKHYpKVxyXG4gICAgICAgICAgICA6IFt2YWx1ZSAmJiBlbmNvZGVRdWVyeVZhbHVlKHZhbHVlKV07XHJcbiAgICAgICAgdmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAvLyBza2lwIHVuZGVmaW5lZCB2YWx1ZXMgaW4gYXJyYXlzIGFzIGlmIHRoZXkgd2VyZSBub3QgcHJlc2VudFxyXG4gICAgICAgICAgICAvLyBzbWFsbGVyIGNvZGUgdGhhbiB1c2luZyBmaWx0ZXJcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIG9ubHkgYXBwZW5kICYgd2l0aCBub24tZW1wdHkgc2VhcmNoXHJcbiAgICAgICAgICAgICAgICBzZWFyY2ggKz0gKHNlYXJjaC5sZW5ndGggPyAnJicgOiAnJykgKyBrZXk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBzZWFyY2ggKz0gJz0nICsgdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBzZWFyY2g7XHJcbn1cclxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgYSB7QGxpbmsgTG9jYXRpb25RdWVyeVJhd30gaW50byBhIHtAbGluayBMb2NhdGlvblF1ZXJ5fSBieSBjYXN0aW5nXHJcbiAqIG51bWJlcnMgaW50byBzdHJpbmdzLCByZW1vdmluZyBrZXlzIHdpdGggYW4gdW5kZWZpbmVkIHZhbHVlIGFuZCByZXBsYWNpbmdcclxuICogdW5kZWZpbmVkIHdpdGggbnVsbCBpbiBhcnJheXNcclxuICpcclxuICogQHBhcmFtIHF1ZXJ5IC0gcXVlcnkgb2JqZWN0IHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyBhIG5vcm1hbGl6ZWQgcXVlcnkgb2JqZWN0XHJcbiAqL1xyXG5mdW5jdGlvbiBub3JtYWxpemVRdWVyeShxdWVyeSkge1xyXG4gICAgY29uc3Qgbm9ybWFsaXplZFF1ZXJ5ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBxdWVyeSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcXVlcnlba2V5XTtcclxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBub3JtYWxpemVkUXVlcnlba2V5XSA9IGlzQXJyYXkodmFsdWUpXHJcbiAgICAgICAgICAgICAgICA/IHZhbHVlLm1hcCh2ID0+ICh2ID09IG51bGwgPyBudWxsIDogJycgKyB2KSlcclxuICAgICAgICAgICAgICAgIDogdmFsdWUgPT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgID8gdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICA6ICcnICsgdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRRdWVyeTtcclxufVxuXG4vKipcclxuICogUm91dGVSZWNvcmQgYmVpbmcgcmVuZGVyZWQgYnkgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgUm91dGVyIFZpZXcuIFVzZWQgZm9yXHJcbiAqIGBvbkJlZm9yZVJvdXRlVXBkYXRlYCBhbmQgYG9uQmVmb3JlUm91dGVMZWF2ZWAuIHJ2bG0gc3RhbmRzIGZvciBSb3V0ZXIgVmlld1xyXG4gKiBMb2NhdGlvbiBNYXRjaGVkXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3QgbWF0Y2hlZFJvdXRlS2V5ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdyb3V0ZXIgdmlldyBsb2NhdGlvbiBtYXRjaGVkJyA6ICcnKTtcclxuLyoqXHJcbiAqIEFsbG93cyBvdmVycmlkaW5nIHRoZSByb3V0ZXIgdmlldyBkZXB0aCB0byBjb250cm9sIHdoaWNoIGNvbXBvbmVudCBpblxyXG4gKiBgbWF0Y2hlZGAgaXMgcmVuZGVyZWQuIHJ2ZCBzdGFuZHMgZm9yIFJvdXRlciBWaWV3IERlcHRoXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3Qgdmlld0RlcHRoS2V5ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdyb3V0ZXIgdmlldyBkZXB0aCcgOiAnJyk7XHJcbi8qKlxyXG4gKiBBbGxvd3Mgb3ZlcnJpZGluZyB0aGUgcm91dGVyIGluc3RhbmNlIHJldHVybmVkIGJ5IGB1c2VSb3V0ZXJgIGluIHRlc3RzLiByXHJcbiAqIHN0YW5kcyBmb3Igcm91dGVyXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3Qgcm91dGVyS2V5ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdyb3V0ZXInIDogJycpO1xyXG4vKipcclxuICogQWxsb3dzIG92ZXJyaWRpbmcgdGhlIGN1cnJlbnQgcm91dGUgcmV0dXJuZWQgYnkgYHVzZVJvdXRlYCBpbiB0ZXN0cy4gcmxcclxuICogc3RhbmRzIGZvciByb3V0ZSBsb2NhdGlvblxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmNvbnN0IHJvdXRlTG9jYXRpb25LZXkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ3JvdXRlIGxvY2F0aW9uJyA6ICcnKTtcclxuLyoqXHJcbiAqIEFsbG93cyBvdmVycmlkaW5nIHRoZSBjdXJyZW50IHJvdXRlIHVzZWQgYnkgcm91dGVyLXZpZXcuIEludGVybmFsbHkgdGhpcyBpc1xyXG4gKiB1c2VkIHdoZW4gdGhlIGByb3V0ZWAgcHJvcCBpcyBwYXNzZWQuXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3Qgcm91dGVyVmlld0xvY2F0aW9uS2V5ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdyb3V0ZXIgdmlldyBsb2NhdGlvbicgOiAnJyk7XG5cbi8qKlxyXG4gKiBDcmVhdGUgYSBsaXN0IG9mIGNhbGxiYWNrcyB0aGF0IGNhbiBiZSByZXNldC4gVXNlZCB0byBjcmVhdGUgYmVmb3JlIGFuZCBhZnRlciBuYXZpZ2F0aW9uIGd1YXJkcyBsaXN0XHJcbiAqL1xyXG5mdW5jdGlvbiB1c2VDYWxsYmFja3MoKSB7XHJcbiAgICBsZXQgaGFuZGxlcnMgPSBbXTtcclxuICAgIGZ1bmN0aW9uIGFkZChoYW5kbGVyKSB7XHJcbiAgICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gaGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKTtcclxuICAgICAgICAgICAgaWYgKGkgPiAtMSlcclxuICAgICAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVzZXQoKSB7XHJcbiAgICAgICAgaGFuZGxlcnMgPSBbXTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYWRkLFxyXG4gICAgICAgIGxpc3Q6ICgpID0+IGhhbmRsZXJzLFxyXG4gICAgICAgIHJlc2V0LFxyXG4gICAgfTtcclxufVxuXG5mdW5jdGlvbiByZWdpc3Rlckd1YXJkKHJlY29yZCwgbmFtZSwgZ3VhcmQpIHtcclxuICAgIGNvbnN0IHJlbW92ZUZyb21MaXN0ID0gKCkgPT4ge1xyXG4gICAgICAgIHJlY29yZFtuYW1lXS5kZWxldGUoZ3VhcmQpO1xyXG4gICAgfTtcclxuICAgIG9uVW5tb3VudGVkKHJlbW92ZUZyb21MaXN0KTtcclxuICAgIG9uRGVhY3RpdmF0ZWQocmVtb3ZlRnJvbUxpc3QpO1xyXG4gICAgb25BY3RpdmF0ZWQoKCkgPT4ge1xyXG4gICAgICAgIHJlY29yZFtuYW1lXS5hZGQoZ3VhcmQpO1xyXG4gICAgfSk7XHJcbiAgICByZWNvcmRbbmFtZV0uYWRkKGd1YXJkKTtcclxufVxyXG4vKipcclxuICogQWRkIGEgbmF2aWdhdGlvbiBndWFyZCB0aGF0IHRyaWdnZXJzIHdoZW5ldmVyIHRoZSBjb21wb25lbnQgZm9yIHRoZSBjdXJyZW50XHJcbiAqIGxvY2F0aW9uIGlzIGFib3V0IHRvIGJlIGxlZnQuIFNpbWlsYXIgdG8ge0BsaW5rIGJlZm9yZVJvdXRlTGVhdmV9IGJ1dCBjYW4gYmVcclxuICogdXNlZCBpbiBhbnkgY29tcG9uZW50LiBUaGUgZ3VhcmQgaXMgcmVtb3ZlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxyXG4gKlxyXG4gKiBAcGFyYW0gbGVhdmVHdWFyZCAtIHtAbGluayBOYXZpZ2F0aW9uR3VhcmR9XHJcbiAqL1xyXG5mdW5jdGlvbiBvbkJlZm9yZVJvdXRlTGVhdmUobGVhdmVHdWFyZCkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhZ2V0Q3VycmVudEluc3RhbmNlKCkpIHtcclxuICAgICAgICB3YXJuKCdnZXRDdXJyZW50SW5zdGFuY2UoKSByZXR1cm5lZCBudWxsLiBvbkJlZm9yZVJvdXRlTGVhdmUoKSBtdXN0IGJlIGNhbGxlZCBhdCB0aGUgdG9wIG9mIGEgc2V0dXAgZnVuY3Rpb24nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBhY3RpdmVSZWNvcmQgPSBpbmplY3QobWF0Y2hlZFJvdXRlS2V5LCBcclxuICAgIC8vIHRvIGF2b2lkIHdhcm5pbmdcclxuICAgIHt9KS52YWx1ZTtcclxuICAgIGlmICghYWN0aXZlUmVjb3JkKSB7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgIHdhcm4oJ05vIGFjdGl2ZSByb3V0ZSByZWNvcmQgd2FzIGZvdW5kIHdoZW4gY2FsbGluZyBgb25CZWZvcmVSb3V0ZUxlYXZlKClgLiBNYWtlIHN1cmUgeW91IGNhbGwgdGhpcyBmdW5jdGlvbiBpbnNpZGUgYSBjb21wb25lbnQgY2hpbGQgb2YgPHJvdXRlci12aWV3Pi4gTWF5YmUgeW91IGNhbGxlZCBpdCBpbnNpZGUgb2YgQXBwLnZ1ZT8nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICByZWdpc3Rlckd1YXJkKGFjdGl2ZVJlY29yZCwgJ2xlYXZlR3VhcmRzJywgbGVhdmVHdWFyZCk7XHJcbn1cclxuLyoqXHJcbiAqIEFkZCBhIG5hdmlnYXRpb24gZ3VhcmQgdGhhdCB0cmlnZ2VycyB3aGVuZXZlciB0aGUgY3VycmVudCBsb2NhdGlvbiBpcyBhYm91dFxyXG4gKiB0byBiZSB1cGRhdGVkLiBTaW1pbGFyIHRvIHtAbGluayBiZWZvcmVSb3V0ZVVwZGF0ZX0gYnV0IGNhbiBiZSB1c2VkIGluIGFueVxyXG4gKiBjb21wb25lbnQuIFRoZSBndWFyZCBpcyByZW1vdmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB1cGRhdGVHdWFyZCAtIHtAbGluayBOYXZpZ2F0aW9uR3VhcmR9XHJcbiAqL1xyXG5mdW5jdGlvbiBvbkJlZm9yZVJvdXRlVXBkYXRlKHVwZGF0ZUd1YXJkKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFnZXRDdXJyZW50SW5zdGFuY2UoKSkge1xyXG4gICAgICAgIHdhcm4oJ2dldEN1cnJlbnRJbnN0YW5jZSgpIHJldHVybmVkIG51bGwuIG9uQmVmb3JlUm91dGVVcGRhdGUoKSBtdXN0IGJlIGNhbGxlZCBhdCB0aGUgdG9wIG9mIGEgc2V0dXAgZnVuY3Rpb24nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBhY3RpdmVSZWNvcmQgPSBpbmplY3QobWF0Y2hlZFJvdXRlS2V5LCBcclxuICAgIC8vIHRvIGF2b2lkIHdhcm5pbmdcclxuICAgIHt9KS52YWx1ZTtcclxuICAgIGlmICghYWN0aXZlUmVjb3JkKSB7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgIHdhcm4oJ05vIGFjdGl2ZSByb3V0ZSByZWNvcmQgd2FzIGZvdW5kIHdoZW4gY2FsbGluZyBgb25CZWZvcmVSb3V0ZVVwZGF0ZSgpYC4gTWFrZSBzdXJlIHlvdSBjYWxsIHRoaXMgZnVuY3Rpb24gaW5zaWRlIGEgY29tcG9uZW50IGNoaWxkIG9mIDxyb3V0ZXItdmlldz4uIE1heWJlIHlvdSBjYWxsZWQgaXQgaW5zaWRlIG9mIEFwcC52dWU/Jyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcmVnaXN0ZXJHdWFyZChhY3RpdmVSZWNvcmQsICd1cGRhdGVHdWFyZHMnLCB1cGRhdGVHdWFyZCk7XHJcbn1cclxuZnVuY3Rpb24gZ3VhcmRUb1Byb21pc2VGbihndWFyZCwgdG8sIGZyb20sIHJlY29yZCwgbmFtZSkge1xyXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgZW50ZXJDYWxsYmFja0FycmF5IHRvIHByZXZlbnQgcHVzaGluZyBjYWxsYmFja3MgaWYgYSBuZXcgbmF2aWdhdGlvbiB0b29rIHBsYWNlXHJcbiAgICBjb25zdCBlbnRlckNhbGxiYWNrQXJyYXkgPSByZWNvcmQgJiZcclxuICAgICAgICAvLyBuYW1lIGlzIGRlZmluZWQgaWYgcmVjb3JkIGlzIGJlY2F1c2Ugb2YgdGhlIGZ1bmN0aW9uIG92ZXJsb2FkXHJcbiAgICAgICAgKHJlY29yZC5lbnRlckNhbGxiYWNrc1tuYW1lXSA9IHJlY29yZC5lbnRlckNhbGxiYWNrc1tuYW1lXSB8fCBbXSk7XHJcbiAgICByZXR1cm4gKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5leHQgPSAodmFsaWQpID0+IHtcclxuICAgICAgICAgICAgaWYgKHZhbGlkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGNyZWF0ZVJvdXRlckVycm9yKDQgLyogRXJyb3JUeXBlcy5OQVZJR0FUSU9OX0FCT1JURUQgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvLFxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbGlkIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdCh2YWxpZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSb3V0ZUxvY2F0aW9uKHZhbGlkKSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGNyZWF0ZVJvdXRlckVycm9yKDIgLyogRXJyb3JUeXBlcy5OQVZJR0FUSU9OX0dVQVJEX1JFRElSRUNUICovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogdG8sXHJcbiAgICAgICAgICAgICAgICAgICAgdG86IHZhbGlkLFxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVudGVyQ2FsbGJhY2tBcnJheSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNpbmNlIGVudGVyQ2FsbGJhY2tBcnJheSBpcyB0cnV0aHksIGJvdGggcmVjb3JkIGFuZCBuYW1lIGFsc28gYXJlXHJcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkLmVudGVyQ2FsbGJhY2tzW25hbWVdID09PSBlbnRlckNhbGxiYWNrQXJyYXkgJiZcclxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdmFsaWQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnRlckNhbGxiYWNrQXJyYXkucHVzaCh2YWxpZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIHdyYXBwaW5nIHdpdGggUHJvbWlzZS5yZXNvbHZlIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYm90aCBhc3luYyBhbmQgc3luYyBndWFyZHNcclxuICAgICAgICBjb25zdCBndWFyZFJldHVybiA9IGd1YXJkLmNhbGwocmVjb3JkICYmIHJlY29yZC5pbnN0YW5jZXNbbmFtZV0sIHRvLCBmcm9tLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBjYW5Pbmx5QmVDYWxsZWRPbmNlKG5leHQsIHRvLCBmcm9tKSA6IG5leHQpO1xyXG4gICAgICAgIGxldCBndWFyZENhbGwgPSBQcm9taXNlLnJlc29sdmUoZ3VhcmRSZXR1cm4pO1xyXG4gICAgICAgIGlmIChndWFyZC5sZW5ndGggPCAzKVxyXG4gICAgICAgICAgICBndWFyZENhbGwgPSBndWFyZENhbGwudGhlbihuZXh0KTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGd1YXJkLmxlbmd0aCA+IDIpIHtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBUaGUgXCJuZXh0XCIgY2FsbGJhY2sgd2FzIG5ldmVyIGNhbGxlZCBpbnNpZGUgb2YgJHtndWFyZC5uYW1lID8gJ1wiJyArIGd1YXJkLm5hbWUgKyAnXCInIDogJyd9OlxcbiR7Z3VhcmQudG9TdHJpbmcoKX1cXG4uIElmIHlvdSBhcmUgcmV0dXJuaW5nIGEgdmFsdWUgaW5zdGVhZCBvZiBjYWxsaW5nIFwibmV4dFwiLCBtYWtlIHN1cmUgdG8gcmVtb3ZlIHRoZSBcIm5leHRcIiBwYXJhbWV0ZXIgZnJvbSB5b3VyIGZ1bmN0aW9uLmA7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ3VhcmRSZXR1cm4gPT09ICdvYmplY3QnICYmICd0aGVuJyBpbiBndWFyZFJldHVybikge1xyXG4gICAgICAgICAgICAgICAgZ3VhcmRDYWxsID0gZ3VhcmRDYWxsLnRoZW4ocmVzb2x2ZWRWYWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogX2NhbGxlZCBpcyBhZGRlZCBhdCBjYW5Pbmx5QmVDYWxsZWRPbmNlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0Ll9jYWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignSW52YWxpZCBuYXZpZ2F0aW9uIGd1YXJkJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGd1YXJkUmV0dXJuICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IF9jYWxsZWQgaXMgYWRkZWQgYXQgY2FuT25seUJlQ2FsbGVkT25jZVxyXG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0Ll9jYWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0ludmFsaWQgbmF2aWdhdGlvbiBndWFyZCcpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZ3VhcmRDYWxsLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBjYW5Pbmx5QmVDYWxsZWRPbmNlKG5leHQsIHRvLCBmcm9tKSB7XHJcbiAgICBsZXQgY2FsbGVkID0gMDtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGNhbGxlZCsrID09PSAxKVxyXG4gICAgICAgICAgICB3YXJuKGBUaGUgXCJuZXh0XCIgY2FsbGJhY2sgd2FzIGNhbGxlZCBtb3JlIHRoYW4gb25jZSBpbiBvbmUgbmF2aWdhdGlvbiBndWFyZCB3aGVuIGdvaW5nIGZyb20gXCIke2Zyb20uZnVsbFBhdGh9XCIgdG8gXCIke3RvLmZ1bGxQYXRofVwiLiBJdCBzaG91bGQgYmUgY2FsbGVkIGV4YWN0bHkgb25lIHRpbWUgaW4gZWFjaCBuYXZpZ2F0aW9uIGd1YXJkLiBUaGlzIHdpbGwgZmFpbCBpbiBwcm9kdWN0aW9uLmApO1xyXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHdlIHB1dCBpdCBpbiB0aGUgb3JpZ2luYWwgb25lIGJlY2F1c2UgaXQncyBlYXNpZXIgdG8gY2hlY2tcclxuICAgICAgICBuZXh0Ll9jYWxsZWQgPSB0cnVlO1xyXG4gICAgICAgIGlmIChjYWxsZWQgPT09IDEpXHJcbiAgICAgICAgICAgIG5leHQuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdENvbXBvbmVudHNHdWFyZHMobWF0Y2hlZCwgZ3VhcmRUeXBlLCB0bywgZnJvbSkge1xyXG4gICAgY29uc3QgZ3VhcmRzID0gW107XHJcbiAgICBmb3IgKGNvbnN0IHJlY29yZCBvZiBtYXRjaGVkKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhcmVjb3JkLmNvbXBvbmVudHMgJiYgIXJlY29yZC5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgd2FybihgUmVjb3JkIHdpdGggcGF0aCBcIiR7cmVjb3JkLnBhdGh9XCIgaXMgZWl0aGVyIG1pc3NpbmcgYSBcImNvbXBvbmVudChzKVwiYCArXHJcbiAgICAgICAgICAgICAgICBgIG9yIFwiY2hpbGRyZW5cIiBwcm9wZXJ0eS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHJlY29yZC5jb21wb25lbnRzKSB7XHJcbiAgICAgICAgICAgIGxldCByYXdDb21wb25lbnQgPSByZWNvcmQuY29tcG9uZW50c1tuYW1lXTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyYXdDb21wb25lbnQgfHxcclxuICAgICAgICAgICAgICAgICAgICAodHlwZW9mIHJhd0NvbXBvbmVudCAhPT0gJ29iamVjdCcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHJhd0NvbXBvbmVudCAhPT0gJ2Z1bmN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgXCIke25hbWV9XCIgaW4gcmVjb3JkIHdpdGggcGF0aCBcIiR7cmVjb3JkLnBhdGh9XCIgaXMgbm90YCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGAgYSB2YWxpZCBjb21wb25lbnQuIFJlY2VpdmVkIFwiJHtTdHJpbmcocmF3Q29tcG9uZW50KX1cIi5gKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aHJvdyB0byBlbnN1cmUgd2Ugc3RvcCBoZXJlIGJ1dCB3YXJuIHRvIGVuc3VyZSB0aGUgbWVzc2FnZSBpc24ndFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1pc3NlZCBieSB0aGUgdXNlclxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCByb3V0ZSBjb21wb25lbnQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCd0aGVuJyBpbiByYXdDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB3YXJuIGlmIHVzZXIgd3JvdGUgaW1wb3J0KCcvY29tcG9uZW50LnZ1ZScpIGluc3RlYWQgb2YgKCkgPT5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpbXBvcnQoJy4vY29tcG9uZW50LnZ1ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IFwiJHtuYW1lfVwiIGluIHJlY29yZCB3aXRoIHBhdGggXCIke3JlY29yZC5wYXRofVwiIGlzIGEgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBQcm9taXNlIGluc3RlYWQgb2YgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBQcm9taXNlLiBEaWQgeW91IGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgd3JpdGUgXCJpbXBvcnQoJy4vTXlQYWdlLnZ1ZScpXCIgaW5zdGVhZCBvZiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFwiKCkgPT4gaW1wb3J0KCcuL015UGFnZS52dWUnKVwiID8gVGhpcyB3aWxsIGJyZWFrIGluIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgcHJvZHVjdGlvbiBpZiBub3QgZml4ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHJhd0NvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICByYXdDb21wb25lbnQgPSAoKSA9PiBwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmF3Q29tcG9uZW50Ll9fYXN5bmNMb2FkZXIgJiZcclxuICAgICAgICAgICAgICAgICAgICAvLyB3YXJuIG9ubHkgb25jZSBwZXIgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgIXJhd0NvbXBvbmVudC5fX3dhcm5lZERlZmluZUFzeW5jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmF3Q29tcG9uZW50Ll9fd2FybmVkRGVmaW5lQXN5bmMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBcIiR7bmFtZX1cIiBpbiByZWNvcmQgd2l0aCBwYXRoIFwiJHtyZWNvcmQucGF0aH1cIiBpcyBkZWZpbmVkIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgdXNpbmcgXCJkZWZpbmVBc3luY0NvbXBvbmVudCgpXCIuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgV3JpdGUgXCIoKSA9PiBpbXBvcnQoJy4vTXlQYWdlLnZ1ZScpXCIgaW5zdGVhZCBvZiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFwiZGVmaW5lQXN5bmNDb21wb25lbnQoKCkgPT4gaW1wb3J0KCcuL015UGFnZS52dWUnKSlcIi5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBza2lwIHVwZGF0ZSBhbmQgbGVhdmUgZ3VhcmRzIGlmIHRoZSByb3V0ZSBjb21wb25lbnQgaXMgbm90IG1vdW50ZWRcclxuICAgICAgICAgICAgaWYgKGd1YXJkVHlwZSAhPT0gJ2JlZm9yZVJvdXRlRW50ZXInICYmICFyZWNvcmQuaW5zdGFuY2VzW25hbWVdKVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmIChpc1JvdXRlQ29tcG9uZW50KHJhd0NvbXBvbmVudCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIF9fdmNjT3B0cyBpcyBhZGRlZCBieSB2dWUtY2xhc3MtY29tcG9uZW50IGFuZCBjb250YWluIHRoZSByZWd1bGFyIG9wdGlvbnNcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSByYXdDb21wb25lbnQuX192Y2NPcHRzIHx8IHJhd0NvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGd1YXJkID0gb3B0aW9uc1tndWFyZFR5cGVdO1xyXG4gICAgICAgICAgICAgICAgZ3VhcmQgJiYgZ3VhcmRzLnB1c2goZ3VhcmRUb1Byb21pc2VGbihndWFyZCwgdG8sIGZyb20sIHJlY29yZCwgbmFtZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgcmVxdWVzdGluZyB0aGUgY2h1bmsgYWxyZWFkeVxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbXBvbmVudFByb21pc2UgPSByYXdDb21wb25lbnQoKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgISgnY2F0Y2gnIGluIGNvbXBvbmVudFByb21pc2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IFwiJHtuYW1lfVwiIGluIHJlY29yZCB3aXRoIHBhdGggXCIke3JlY29yZC5wYXRofVwiIGlzIGEgZnVuY3Rpb24gdGhhdCBkb2VzIG5vdCByZXR1cm4gYSBQcm9taXNlLiBJZiB5b3Ugd2VyZSBwYXNzaW5nIGEgZnVuY3Rpb25hbCBjb21wb25lbnQsIG1ha2Ugc3VyZSB0byBhZGQgYSBcImRpc3BsYXlOYW1lXCIgdG8gdGhlIGNvbXBvbmVudC4gVGhpcyB3aWxsIGJyZWFrIGluIHByb2R1Y3Rpb24gaWYgbm90IGZpeGVkLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29tcG9uZW50UHJvbWlzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBndWFyZHMucHVzaCgoKSA9PiBjb21wb25lbnRQcm9taXNlLnRoZW4ocmVzb2x2ZWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzb2x2ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYENvdWxkbid0IHJlc29sdmUgY29tcG9uZW50IFwiJHtuYW1lfVwiIGF0IFwiJHtyZWNvcmQucGF0aH1cImApKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZENvbXBvbmVudCA9IGlzRVNNb2R1bGUocmVzb2x2ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzb2x2ZWQuZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlc29sdmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIHJlc29sdmVkIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCBiZWNhdXNlIHdlIHdlbnQgaW50byB0aGUgZm9yIGxvb3BcclxuICAgICAgICAgICAgICAgICAgICByZWNvcmQuY29tcG9uZW50c1tuYW1lXSA9IHJlc29sdmVkQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIF9fdmNjT3B0cyBpcyBhZGRlZCBieSB2dWUtY2xhc3MtY29tcG9uZW50IGFuZCBjb250YWluIHRoZSByZWd1bGFyIG9wdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0gcmVzb2x2ZWRDb21wb25lbnQuX192Y2NPcHRzIHx8IHJlc29sdmVkQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGd1YXJkID0gb3B0aW9uc1tndWFyZFR5cGVdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBndWFyZCAmJiBndWFyZFRvUHJvbWlzZUZuKGd1YXJkLCB0bywgZnJvbSwgcmVjb3JkLCBuYW1lKSgpO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGd1YXJkcztcclxufVxyXG4vKipcclxuICogQWxsb3dzIGRpZmZlcmVudGlhdGluZyBsYXp5IGNvbXBvbmVudHMgZnJvbSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYW5kIHZ1ZS1jbGFzcy1jb21wb25lbnRcclxuICogQGludGVybmFsXHJcbiAqXHJcbiAqIEBwYXJhbSBjb21wb25lbnRcclxuICovXHJcbmZ1bmN0aW9uIGlzUm91dGVDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBjb21wb25lbnQgPT09ICdvYmplY3QnIHx8XHJcbiAgICAgICAgJ2Rpc3BsYXlOYW1lJyBpbiBjb21wb25lbnQgfHxcclxuICAgICAgICAncHJvcHMnIGluIGNvbXBvbmVudCB8fFxyXG4gICAgICAgICdfX3ZjY09wdHMnIGluIGNvbXBvbmVudCk7XHJcbn1cclxuLyoqXHJcbiAqIEVuc3VyZXMgYSByb3V0ZSBpcyBsb2FkZWQsIHNvIGl0IGNhbiBiZSBwYXNzZWQgYXMgbyBwcm9wIHRvIGA8Um91dGVyVmlldz5gLlxyXG4gKlxyXG4gKiBAcGFyYW0gcm91dGUgLSByZXNvbHZlZCByb3V0ZSB0byBsb2FkXHJcbiAqL1xyXG5mdW5jdGlvbiBsb2FkUm91dGVMb2NhdGlvbihyb3V0ZSkge1xyXG4gICAgcmV0dXJuIHJvdXRlLm1hdGNoZWQuZXZlcnkocmVjb3JkID0+IHJlY29yZC5yZWRpcmVjdClcclxuICAgICAgICA/IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignQ2Fubm90IGxvYWQgYSByb3V0ZSB0aGF0IHJlZGlyZWN0cy4nKSlcclxuICAgICAgICA6IFByb21pc2UuYWxsKHJvdXRlLm1hdGNoZWQubWFwKHJlY29yZCA9PiByZWNvcmQuY29tcG9uZW50cyAmJlxyXG4gICAgICAgICAgICBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhyZWNvcmQuY29tcG9uZW50cykucmVkdWNlKChwcm9taXNlcywgbmFtZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmF3Q29tcG9uZW50ID0gcmVjb3JkLmNvbXBvbmVudHNbbmFtZV07XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJhd0NvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICEoJ2Rpc3BsYXlOYW1lJyBpbiByYXdDb21wb25lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChyYXdDb21wb25lbnQoKS50aGVuKHJlc29sdmVkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNvbHZlZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYENvdWxkbid0IHJlc29sdmUgY29tcG9uZW50IFwiJHtuYW1lfVwiIGF0IFwiJHtyZWNvcmQucGF0aH1cIi4gRW5zdXJlIHlvdSBwYXNzZWQgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBwcm9taXNlLmApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWRDb21wb25lbnQgPSBpc0VTTW9kdWxlKHJlc29sdmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyByZXNvbHZlZC5kZWZhdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHJlc29sdmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXBsYWNlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSByZXNvbHZlZCBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGJlY2F1c2Ugd2Ugd2VudCBpbnRvIHRoZSBmb3IgbG9vcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNvcmQuY29tcG9uZW50c1tuYW1lXSA9IHJlc29sdmVkQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VzO1xyXG4gICAgICAgICAgICB9LCBbXSkpKSkudGhlbigoKSA9PiByb3V0ZSk7XHJcbn1cblxuLy8gVE9ETzogd2UgY291bGQgYWxsb3cgY3VycmVudFJvdXRlIGFzIGEgcHJvcCB0byBleHBvc2UgYGlzQWN0aXZlYCBhbmRcclxuLy8gYGlzRXhhY3RBY3RpdmVgIGJlaGF2aW9yIHNob3VsZCBnbyB0aHJvdWdoIGFuIFJGQ1xyXG5mdW5jdGlvbiB1c2VMaW5rKHByb3BzKSB7XHJcbiAgICBjb25zdCByb3V0ZXIgPSBpbmplY3Qocm91dGVyS2V5KTtcclxuICAgIGNvbnN0IGN1cnJlbnRSb3V0ZSA9IGluamVjdChyb3V0ZUxvY2F0aW9uS2V5KTtcclxuICAgIGNvbnN0IHJvdXRlID0gY29tcHV0ZWQoKCkgPT4gcm91dGVyLnJlc29sdmUodW5yZWYocHJvcHMudG8pKSk7XHJcbiAgICBjb25zdCBhY3RpdmVSZWNvcmRJbmRleCA9IGNvbXB1dGVkKCgpID0+IHtcclxuICAgICAgICBjb25zdCB7IG1hdGNoZWQgfSA9IHJvdXRlLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBtYXRjaGVkO1xyXG4gICAgICAgIGNvbnN0IHJvdXRlTWF0Y2hlZCA9IG1hdGNoZWRbbGVuZ3RoIC0gMV07XHJcbiAgICAgICAgY29uc3QgY3VycmVudE1hdGNoZWQgPSBjdXJyZW50Um91dGUubWF0Y2hlZDtcclxuICAgICAgICBpZiAoIXJvdXRlTWF0Y2hlZCB8fCAhY3VycmVudE1hdGNoZWQubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBjdXJyZW50TWF0Y2hlZC5maW5kSW5kZXgoaXNTYW1lUm91dGVSZWNvcmQuYmluZChudWxsLCByb3V0ZU1hdGNoZWQpKTtcclxuICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgICAgIC8vIHBvc3NpYmxlIHBhcmVudCByZWNvcmRcclxuICAgICAgICBjb25zdCBwYXJlbnRSZWNvcmRQYXRoID0gZ2V0T3JpZ2luYWxQYXRoKG1hdGNoZWRbbGVuZ3RoIC0gMl0pO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgLy8gd2UgYXJlIGRlYWxpbmcgd2l0aCBuZXN0ZWQgcm91dGVzXHJcbiAgICAgICAgbGVuZ3RoID4gMSAmJlxyXG4gICAgICAgICAgICAvLyBpZiB0aGUgcGFyZW50IGFuZCBtYXRjaGVkIHJvdXRlIGhhdmUgdGhlIHNhbWUgcGF0aCwgdGhpcyBsaW5rIGlzXHJcbiAgICAgICAgICAgIC8vIHJlZmVycmluZyB0byB0aGUgZW1wdHkgY2hpbGQuIE9yIHdlIGN1cnJlbnRseSBhcmUgb24gYSBkaWZmZXJlbnRcclxuICAgICAgICAgICAgLy8gY2hpbGQgb2YgdGhlIHNhbWUgcGFyZW50XHJcbiAgICAgICAgICAgIGdldE9yaWdpbmFsUGF0aChyb3V0ZU1hdGNoZWQpID09PSBwYXJlbnRSZWNvcmRQYXRoICYmXHJcbiAgICAgICAgICAgIC8vIGF2b2lkIGNvbXBhcmluZyB0aGUgY2hpbGQgd2l0aCBpdHMgcGFyZW50XHJcbiAgICAgICAgICAgIGN1cnJlbnRNYXRjaGVkW2N1cnJlbnRNYXRjaGVkLmxlbmd0aCAtIDFdLnBhdGggIT09IHBhcmVudFJlY29yZFBhdGhcclxuICAgICAgICAgICAgPyBjdXJyZW50TWF0Y2hlZC5maW5kSW5kZXgoaXNTYW1lUm91dGVSZWNvcmQuYmluZChudWxsLCBtYXRjaGVkW2xlbmd0aCAtIDJdKSlcclxuICAgICAgICAgICAgOiBpbmRleCk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGlzQWN0aXZlID0gY29tcHV0ZWQoKCkgPT4gYWN0aXZlUmVjb3JkSW5kZXgudmFsdWUgPiAtMSAmJlxyXG4gICAgICAgIGluY2x1ZGVzUGFyYW1zKGN1cnJlbnRSb3V0ZS5wYXJhbXMsIHJvdXRlLnZhbHVlLnBhcmFtcykpO1xyXG4gICAgY29uc3QgaXNFeGFjdEFjdGl2ZSA9IGNvbXB1dGVkKCgpID0+IGFjdGl2ZVJlY29yZEluZGV4LnZhbHVlID4gLTEgJiZcclxuICAgICAgICBhY3RpdmVSZWNvcmRJbmRleC52YWx1ZSA9PT0gY3VycmVudFJvdXRlLm1hdGNoZWQubGVuZ3RoIC0gMSAmJlxyXG4gICAgICAgIGlzU2FtZVJvdXRlTG9jYXRpb25QYXJhbXMoY3VycmVudFJvdXRlLnBhcmFtcywgcm91dGUudmFsdWUucGFyYW1zKSk7XHJcbiAgICBmdW5jdGlvbiBuYXZpZ2F0ZShlID0ge30pIHtcclxuICAgICAgICBpZiAoZ3VhcmRFdmVudChlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcm91dGVyW3VucmVmKHByb3BzLnJlcGxhY2UpID8gJ3JlcGxhY2UnIDogJ3B1c2gnXSh1bnJlZihwcm9wcy50bylcclxuICAgICAgICAgICAgLy8gYXZvaWQgdW5jYXVnaHQgZXJyb3JzIGFyZSB0aGV5IGFyZSBsb2dnZWQgYW55d2F5XHJcbiAgICAgICAgICAgICkuY2F0Y2gobm9vcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIC8vIGRldnRvb2xzIG9ubHlcclxuICAgIGlmICgoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykgJiYgaXNCcm93c2VyKSB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgY29uc3QgbGlua0NvbnRleHREZXZ0b29scyA9IHtcclxuICAgICAgICAgICAgICAgIHJvdXRlOiByb3V0ZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGlzQWN0aXZlOiBpc0FjdGl2ZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGlzRXhhY3RBY3RpdmU6IGlzRXhhY3RBY3RpdmUudmFsdWUsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHRoaXMgaXMgaW50ZXJuYWxcclxuICAgICAgICAgICAgaW5zdGFuY2UuX192cmxfZGV2dG9vbHMgPSBpbnN0YW5jZS5fX3ZybF9kZXZ0b29scyB8fCBbXTtcclxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogdGhpcyBpcyBpbnRlcm5hbFxyXG4gICAgICAgICAgICBpbnN0YW5jZS5fX3ZybF9kZXZ0b29scy5wdXNoKGxpbmtDb250ZXh0RGV2dG9vbHMpO1xyXG4gICAgICAgICAgICB3YXRjaEVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsaW5rQ29udGV4dERldnRvb2xzLnJvdXRlID0gcm91dGUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBsaW5rQ29udGV4dERldnRvb2xzLmlzQWN0aXZlID0gaXNBY3RpdmUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBsaW5rQ29udGV4dERldnRvb2xzLmlzRXhhY3RBY3RpdmUgPSBpc0V4YWN0QWN0aXZlLnZhbHVlO1xyXG4gICAgICAgICAgICB9LCB7IGZsdXNoOiAncG9zdCcgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByb3V0ZSxcclxuICAgICAgICBocmVmOiBjb21wdXRlZCgoKSA9PiByb3V0ZS52YWx1ZS5ocmVmKSxcclxuICAgICAgICBpc0FjdGl2ZSxcclxuICAgICAgICBpc0V4YWN0QWN0aXZlLFxyXG4gICAgICAgIG5hdmlnYXRlLFxyXG4gICAgfTtcclxufVxyXG5jb25zdCBSb3V0ZXJMaW5rSW1wbCA9IC8qI19fUFVSRV9fKi8gZGVmaW5lQ29tcG9uZW50KHtcclxuICAgIG5hbWU6ICdSb3V0ZXJMaW5rJyxcclxuICAgIGNvbXBhdENvbmZpZzogeyBNT0RFOiAzIH0sXHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIHRvOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF0sXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVwbGFjZTogQm9vbGVhbixcclxuICAgICAgICBhY3RpdmVDbGFzczogU3RyaW5nLFxyXG4gICAgICAgIC8vIGluYWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgICAgICBleGFjdEFjdGl2ZUNsYXNzOiBTdHJpbmcsXHJcbiAgICAgICAgY3VzdG9tOiBCb29sZWFuLFxyXG4gICAgICAgIGFyaWFDdXJyZW50VmFsdWU6IHtcclxuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAncGFnZScsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICB1c2VMaW5rLFxyXG4gICAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xyXG4gICAgICAgIGNvbnN0IGxpbmsgPSByZWFjdGl2ZSh1c2VMaW5rKHByb3BzKSk7XHJcbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSBpbmplY3Qocm91dGVyS2V5KTtcclxuICAgICAgICBjb25zdCBlbENsYXNzID0gY29tcHV0ZWQoKCkgPT4gKHtcclxuICAgICAgICAgICAgW2dldExpbmtDbGFzcyhwcm9wcy5hY3RpdmVDbGFzcywgb3B0aW9ucy5saW5rQWN0aXZlQ2xhc3MsICdyb3V0ZXItbGluay1hY3RpdmUnKV06IGxpbmsuaXNBY3RpdmUsXHJcbiAgICAgICAgICAgIC8vIFtnZXRMaW5rQ2xhc3MoXHJcbiAgICAgICAgICAgIC8vICAgcHJvcHMuaW5hY3RpdmVDbGFzcyxcclxuICAgICAgICAgICAgLy8gICBvcHRpb25zLmxpbmtJbmFjdGl2ZUNsYXNzLFxyXG4gICAgICAgICAgICAvLyAgICdyb3V0ZXItbGluay1pbmFjdGl2ZSdcclxuICAgICAgICAgICAgLy8gKV06ICFsaW5rLmlzRXhhY3RBY3RpdmUsXHJcbiAgICAgICAgICAgIFtnZXRMaW5rQ2xhc3MocHJvcHMuZXhhY3RBY3RpdmVDbGFzcywgb3B0aW9ucy5saW5rRXhhY3RBY3RpdmVDbGFzcywgJ3JvdXRlci1saW5rLWV4YWN0LWFjdGl2ZScpXTogbGluay5pc0V4YWN0QWN0aXZlLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdChsaW5rKTtcclxuICAgICAgICAgICAgcmV0dXJuIHByb3BzLmN1c3RvbVxyXG4gICAgICAgICAgICAgICAgPyBjaGlsZHJlblxyXG4gICAgICAgICAgICAgICAgOiBoKCdhJywge1xyXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWN1cnJlbnQnOiBsaW5rLmlzRXhhY3RBY3RpdmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwcm9wcy5hcmlhQ3VycmVudFZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBocmVmOiBsaW5rLmhyZWYsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3b3VsZCBvdmVycmlkZSB1c2VyIGFkZGVkIGF0dHJzIGJ1dCBWdWUgd2lsbCBzdGlsbCBhZGRcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgbGlzdGVuZXIsIHNvIHdlIGVuZCB1cCB0cmlnZ2VyaW5nIGJvdGhcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBsaW5rLm5hdmlnYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBlbENsYXNzLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgfSwgY2hpbGRyZW4pO1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG59KTtcclxuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXHJcbi8vIGFsc28gdG8gYXZvaWQgaW5saW5lIGltcG9ydCgpIGluIGdlbmVyYXRlZCBkLnRzIGZpbGVzXHJcbi8qKlxyXG4gKiBDb21wb25lbnQgdG8gcmVuZGVyIGEgbGluayB0aGF0IHRyaWdnZXJzIGEgbmF2aWdhdGlvbiBvbiBjbGljay5cclxuICovXHJcbmNvbnN0IFJvdXRlckxpbmsgPSBSb3V0ZXJMaW5rSW1wbDtcclxuZnVuY3Rpb24gZ3VhcmRFdmVudChlKSB7XHJcbiAgICAvLyBkb24ndCByZWRpcmVjdCB3aXRoIGNvbnRyb2wga2V5c1xyXG4gICAgaWYgKGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICAvLyBkb24ndCByZWRpcmVjdCB3aGVuIHByZXZlbnREZWZhdWx0IGNhbGxlZFxyXG4gICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICAvLyBkb24ndCByZWRpcmVjdCBvbiByaWdodCBjbGlja1xyXG4gICAgaWYgKGUuYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgZS5idXR0b24gIT09IDApXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgLy8gZG9uJ3QgcmVkaXJlY3QgaWYgYHRhcmdldD1cIl9ibGFua1wiYFxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBnZXRBdHRyaWJ1dGUgZG9lcyBleGlzdFxyXG4gICAgaWYgKGUuY3VycmVudFRhcmdldCAmJiBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKSB7XHJcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBnZXRBdHRyaWJ1dGUgZXhpc3RzXHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgndGFyZ2V0Jyk7XHJcbiAgICAgICAgaWYgKC9cXGJfYmxhbmtcXGIvaS50ZXN0KHRhcmdldCkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIHRoaXMgbWF5IGJlIGEgV2VleCBldmVudCB3aGljaCBkb2Vzbid0IGhhdmUgdGhpcyBtZXRob2RcclxuICAgIGlmIChlLnByZXZlbnREZWZhdWx0KVxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIGluY2x1ZGVzUGFyYW1zKG91dGVyLCBpbm5lcikge1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gaW5uZXIpIHtcclxuICAgICAgICBjb25zdCBpbm5lclZhbHVlID0gaW5uZXJba2V5XTtcclxuICAgICAgICBjb25zdCBvdXRlclZhbHVlID0gb3V0ZXJba2V5XTtcclxuICAgICAgICBpZiAodHlwZW9mIGlubmVyVmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGlmIChpbm5lclZhbHVlICE9PSBvdXRlclZhbHVlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCFpc0FycmF5KG91dGVyVmFsdWUpIHx8XHJcbiAgICAgICAgICAgICAgICBvdXRlclZhbHVlLmxlbmd0aCAhPT0gaW5uZXJWYWx1ZS5sZW5ndGggfHxcclxuICAgICAgICAgICAgICAgIGlubmVyVmFsdWUuc29tZSgodmFsdWUsIGkpID0+IHZhbHVlICE9PSBvdXRlclZhbHVlW2ldKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4vKipcclxuICogR2V0IHRoZSBvcmlnaW5hbCBwYXRoIHZhbHVlIG9mIGEgcmVjb3JkIGJ5IGZvbGxvd2luZyBpdHMgYWxpYXNPZlxyXG4gKiBAcGFyYW0gcmVjb3JkXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRPcmlnaW5hbFBhdGgocmVjb3JkKSB7XHJcbiAgICByZXR1cm4gcmVjb3JkID8gKHJlY29yZC5hbGlhc09mID8gcmVjb3JkLmFsaWFzT2YucGF0aCA6IHJlY29yZC5wYXRoKSA6ICcnO1xyXG59XHJcbi8qKlxyXG4gKiBVdGlsaXR5IGNsYXNzIHRvIGdldCB0aGUgYWN0aXZlIGNsYXNzIGJhc2VkIG9uIGRlZmF1bHRzLlxyXG4gKiBAcGFyYW0gcHJvcENsYXNzXHJcbiAqIEBwYXJhbSBnbG9iYWxDbGFzc1xyXG4gKiBAcGFyYW0gZGVmYXVsdENsYXNzXHJcbiAqL1xyXG5jb25zdCBnZXRMaW5rQ2xhc3MgPSAocHJvcENsYXNzLCBnbG9iYWxDbGFzcywgZGVmYXVsdENsYXNzKSA9PiBwcm9wQ2xhc3MgIT0gbnVsbFxyXG4gICAgPyBwcm9wQ2xhc3NcclxuICAgIDogZ2xvYmFsQ2xhc3MgIT0gbnVsbFxyXG4gICAgICAgID8gZ2xvYmFsQ2xhc3NcclxuICAgICAgICA6IGRlZmF1bHRDbGFzcztcblxuY29uc3QgUm91dGVyVmlld0ltcGwgPSAvKiNfX1BVUkVfXyovIGRlZmluZUNvbXBvbmVudCh7XHJcbiAgICBuYW1lOiAnUm91dGVyVmlldycsXHJcbiAgICAvLyAjNjc0IHdlIG1hbnVhbGx5IGluaGVyaXQgdGhlbVxyXG4gICAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcclxuICAgIHByb3BzOiB7XHJcbiAgICAgICAgbmFtZToge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdkZWZhdWx0JyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJvdXRlOiBPYmplY3QsXHJcbiAgICB9LFxyXG4gICAgLy8gQmV0dGVyIGNvbXBhdCBmb3IgQHZ1ZS9jb21wYXQgdXNlcnNcclxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy9yb3V0ZXIvaXNzdWVzLzEzMTVcclxuICAgIGNvbXBhdENvbmZpZzogeyBNT0RFOiAzIH0sXHJcbiAgICBzZXR1cChwcm9wcywgeyBhdHRycywgc2xvdHMgfSkge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuRGVwcmVjYXRlZFVzYWdlKCk7XHJcbiAgICAgICAgY29uc3QgaW5qZWN0ZWRSb3V0ZSA9IGluamVjdChyb3V0ZXJWaWV3TG9jYXRpb25LZXkpO1xyXG4gICAgICAgIGNvbnN0IHJvdXRlVG9EaXNwbGF5ID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMucm91dGUgfHwgaW5qZWN0ZWRSb3V0ZS52YWx1ZSk7XHJcbiAgICAgICAgY29uc3QgaW5qZWN0ZWREZXB0aCA9IGluamVjdCh2aWV3RGVwdGhLZXksIDApO1xyXG4gICAgICAgIC8vIFRoZSBkZXB0aCBjaGFuZ2VzIGJhc2VkIG9uIGVtcHR5IGNvbXBvbmVudHMgb3B0aW9uLCB3aGljaCBhbGxvd3MgcGFzc3Rocm91Z2ggcm91dGVzIGUuZy4gcm91dGVzIHdpdGggY2hpbGRyZW5cclxuICAgICAgICAvLyB0aGF0IGFyZSB1c2VkIHRvIHJldXNlIHRoZSBgcGF0aGAgcHJvcGVydHlcclxuICAgICAgICBjb25zdCBkZXB0aCA9IGNvbXB1dGVkKCgpID0+IHtcclxuICAgICAgICAgICAgbGV0IGluaXRpYWxEZXB0aCA9IHVucmVmKGluamVjdGVkRGVwdGgpO1xyXG4gICAgICAgICAgICBjb25zdCB7IG1hdGNoZWQgfSA9IHJvdXRlVG9EaXNwbGF5LnZhbHVlO1xyXG4gICAgICAgICAgICBsZXQgbWF0Y2hlZFJvdXRlO1xyXG4gICAgICAgICAgICB3aGlsZSAoKG1hdGNoZWRSb3V0ZSA9IG1hdGNoZWRbaW5pdGlhbERlcHRoXSkgJiZcclxuICAgICAgICAgICAgICAgICFtYXRjaGVkUm91dGUuY29tcG9uZW50cykge1xyXG4gICAgICAgICAgICAgICAgaW5pdGlhbERlcHRoKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGluaXRpYWxEZXB0aDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBtYXRjaGVkUm91dGVSZWYgPSBjb21wdXRlZCgoKSA9PiByb3V0ZVRvRGlzcGxheS52YWx1ZS5tYXRjaGVkW2RlcHRoLnZhbHVlXSk7XHJcbiAgICAgICAgcHJvdmlkZSh2aWV3RGVwdGhLZXksIGNvbXB1dGVkKCgpID0+IGRlcHRoLnZhbHVlICsgMSkpO1xyXG4gICAgICAgIHByb3ZpZGUobWF0Y2hlZFJvdXRlS2V5LCBtYXRjaGVkUm91dGVSZWYpO1xyXG4gICAgICAgIHByb3ZpZGUocm91dGVyVmlld0xvY2F0aW9uS2V5LCByb3V0ZVRvRGlzcGxheSk7XHJcbiAgICAgICAgY29uc3Qgdmlld1JlZiA9IHJlZigpO1xyXG4gICAgICAgIC8vIHdhdGNoIGF0IHRoZSBzYW1lIHRpbWUgdGhlIGNvbXBvbmVudCBpbnN0YW5jZSwgdGhlIHJvdXRlIHJlY29yZCB3ZSBhcmVcclxuICAgICAgICAvLyByZW5kZXJpbmcsIGFuZCB0aGUgbmFtZVxyXG4gICAgICAgIHdhdGNoKCgpID0+IFt2aWV3UmVmLnZhbHVlLCBtYXRjaGVkUm91dGVSZWYudmFsdWUsIHByb3BzLm5hbWVdLCAoW2luc3RhbmNlLCB0bywgbmFtZV0sIFtvbGRJbnN0YW5jZSwgZnJvbSwgb2xkTmFtZV0pID0+IHtcclxuICAgICAgICAgICAgLy8gY29weSByZXVzZWQgaW5zdGFuY2VzXHJcbiAgICAgICAgICAgIGlmICh0bykge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHVwZGF0ZSB0aGUgaW5zdGFuY2UgZm9yIG5ldyBpbnN0YW5jZXMgYXMgd2VsbCBhcyByZXVzZWRcclxuICAgICAgICAgICAgICAgIC8vIGluc3RhbmNlcyB3aGVuIG5hdmlnYXRpbmcgdG8gYSBuZXcgcm91dGVcclxuICAgICAgICAgICAgICAgIHRvLmluc3RhbmNlc1tuYW1lXSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGNvbXBvbmVudCBpbnN0YW5jZSBpcyByZXVzZWQgZm9yIGEgZGlmZmVyZW50IHJvdXRlIG9yIG5hbWUsIHNvXHJcbiAgICAgICAgICAgICAgICAvLyB3ZSBjb3B5IGFueSBzYXZlZCB1cGRhdGUgb3IgbGVhdmUgZ3VhcmRzLiBXaXRoIGFzeW5jIHNldHVwLCB0aGVcclxuICAgICAgICAgICAgICAgIC8vIG1vdW50aW5nIGNvbXBvbmVudCB3aWxsIG1vdW50IGJlZm9yZSB0aGUgbWF0Y2hlZFJvdXRlIGNoYW5nZXMsXHJcbiAgICAgICAgICAgICAgICAvLyBtYWtpbmcgaW5zdGFuY2UgPT09IG9sZEluc3RhbmNlLCBzbyB3ZSBjaGVjayBpZiBndWFyZHMgaGF2ZSBiZWVuXHJcbiAgICAgICAgICAgICAgICAvLyBhZGRlZCBiZWZvcmUuIFRoaXMgd29ya3MgYmVjYXVzZSB3ZSByZW1vdmUgZ3VhcmRzIHdoZW5cclxuICAgICAgICAgICAgICAgIC8vIHVubW91bnRpbmcvZGVhY3RpdmF0aW5nIGNvbXBvbmVudHNcclxuICAgICAgICAgICAgICAgIGlmIChmcm9tICYmIGZyb20gIT09IHRvICYmIGluc3RhbmNlICYmIGluc3RhbmNlID09PSBvbGRJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdG8ubGVhdmVHdWFyZHMuc2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0by5sZWF2ZUd1YXJkcyA9IGZyb20ubGVhdmVHdWFyZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdG8udXBkYXRlR3VhcmRzLnNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG8udXBkYXRlR3VhcmRzID0gZnJvbS51cGRhdGVHdWFyZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHRyaWdnZXIgYmVmb3JlUm91dGVFbnRlciBuZXh0IGNhbGxiYWNrc1xyXG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UgJiZcclxuICAgICAgICAgICAgICAgIHRvICYmXHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyBpbnN0YW5jZSBidXQgdG8gYW5kIGZyb20gYXJlIHRoZSBzYW1lIHRoaXMgbWlnaHQgYmVcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBmaXJzdCB2aXNpdFxyXG4gICAgICAgICAgICAgICAgKCFmcm9tIHx8ICFpc1NhbWVSb3V0ZVJlY29yZCh0bywgZnJvbSkgfHwgIW9sZEluc3RhbmNlKSkge1xyXG4gICAgICAgICAgICAgICAgKHRvLmVudGVyQ2FsbGJhY2tzW25hbWVdIHx8IFtdKS5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKGluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB7IGZsdXNoOiAncG9zdCcgfSk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgcm91dGUgPSByb3V0ZVRvRGlzcGxheS52YWx1ZTtcclxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0aGUgdmFsdWUgYXQgdGhlIHRpbWUgd2UgcmVuZGVyIGJlY2F1c2Ugd2hlbiB3ZSB1bm1vdW50LCB3ZVxyXG4gICAgICAgICAgICAvLyBuYXZpZ2F0ZWQgdG8gYSBkaWZmZXJlbnQgbG9jYXRpb24gc28gdGhlIHZhbHVlIGlzIGRpZmZlcmVudFxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50TmFtZSA9IHByb3BzLm5hbWU7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZWRSb3V0ZSA9IG1hdGNoZWRSb3V0ZVJlZi52YWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgVmlld0NvbXBvbmVudCA9IG1hdGNoZWRSb3V0ZSAmJiBtYXRjaGVkUm91dGUuY29tcG9uZW50c1tjdXJyZW50TmFtZV07XHJcbiAgICAgICAgICAgIGlmICghVmlld0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNsb3Qoc2xvdHMuZGVmYXVsdCwgeyBDb21wb25lbnQ6IFZpZXdDb21wb25lbnQsIHJvdXRlIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHByb3BzIGZyb20gcm91dGUgY29uZmlndXJhdGlvblxyXG4gICAgICAgICAgICBjb25zdCByb3V0ZVByb3BzT3B0aW9uID0gbWF0Y2hlZFJvdXRlLnByb3BzW2N1cnJlbnROYW1lXTtcclxuICAgICAgICAgICAgY29uc3Qgcm91dGVQcm9wcyA9IHJvdXRlUHJvcHNPcHRpb25cclxuICAgICAgICAgICAgICAgID8gcm91dGVQcm9wc09wdGlvbiA9PT0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgID8gcm91dGUucGFyYW1zXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0eXBlb2Ygcm91dGVQcm9wc09wdGlvbiA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHJvdXRlUHJvcHNPcHRpb24ocm91dGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcm91dGVQcm9wc09wdGlvblxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICBjb25zdCBvblZub2RlVW5tb3VudGVkID0gdm5vZGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBpbnN0YW5jZSByZWZlcmVuY2UgdG8gcHJldmVudCBsZWFrXHJcbiAgICAgICAgICAgICAgICBpZiAodm5vZGUuY29tcG9uZW50LmlzVW5tb3VudGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFJvdXRlLmluc3RhbmNlc1tjdXJyZW50TmFtZV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBoKFZpZXdDb21wb25lbnQsIGFzc2lnbih7fSwgcm91dGVQcm9wcywgYXR0cnMsIHtcclxuICAgICAgICAgICAgICAgIG9uVm5vZGVVbm1vdW50ZWQsXHJcbiAgICAgICAgICAgICAgICByZWY6IHZpZXdSZWYsXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgaWYgKCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSAmJlxyXG4gICAgICAgICAgICAgICAgaXNCcm93c2VyICYmXHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQucmVmKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBjYW4gZGlzcGxheSBpZiBpdCdzIGFuIGFsaWFzLCBpdHMgcHJvcHNcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluZm8gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVwdGg6IGRlcHRoLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG1hdGNoZWRSb3V0ZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IG1hdGNoZWRSb3V0ZS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGE6IG1hdGNoZWRSb3V0ZS5tZXRhLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGludGVybmFsSW5zdGFuY2VzID0gaXNBcnJheShjb21wb25lbnQucmVmKVxyXG4gICAgICAgICAgICAgICAgICAgID8gY29tcG9uZW50LnJlZi5tYXAociA9PiByLmkpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBbY29tcG9uZW50LnJlZi5pXTtcclxuICAgICAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2VzLmZvckVhY2goaW5zdGFuY2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5fX3Zydl9kZXZ0b29scyA9IGluZm87XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAvLyBwYXNzIHRoZSB2bm9kZSB0byB0aGUgc2xvdCBhcyBhIHByb3AuXHJcbiAgICAgICAgICAgIC8vIGggYW5kIDxjb21wb25lbnQgOmlzPVwiLi4uXCI+IGJvdGggYWNjZXB0IHZub2Rlc1xyXG4gICAgICAgICAgICBub3JtYWxpemVTbG90KHNsb3RzLmRlZmF1bHQsIHsgQ29tcG9uZW50OiBjb21wb25lbnQsIHJvdXRlIH0pIHx8XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQpO1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG59KTtcclxuZnVuY3Rpb24gbm9ybWFsaXplU2xvdChzbG90LCBkYXRhKSB7XHJcbiAgICBpZiAoIXNsb3QpXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICBjb25zdCBzbG90Q29udGVudCA9IHNsb3QoZGF0YSk7XHJcbiAgICByZXR1cm4gc2xvdENvbnRlbnQubGVuZ3RoID09PSAxID8gc2xvdENvbnRlbnRbMF0gOiBzbG90Q29udGVudDtcclxufVxyXG4vLyBleHBvcnQgdGhlIHB1YmxpYyB0eXBlIGZvciBoL3RzeCBpbmZlcmVuY2VcclxuLy8gYWxzbyB0byBhdm9pZCBpbmxpbmUgaW1wb3J0KCkgaW4gZ2VuZXJhdGVkIGQudHMgZmlsZXNcclxuLyoqXHJcbiAqIENvbXBvbmVudCB0byBkaXNwbGF5IHRoZSBjdXJyZW50IHJvdXRlIHRoZSB1c2VyIGlzIGF0LlxyXG4gKi9cclxuY29uc3QgUm91dGVyVmlldyA9IFJvdXRlclZpZXdJbXBsO1xyXG4vLyB3YXJuIGFnYWluc3QgZGVwcmVjYXRlZCB1c2FnZSB3aXRoIDx0cmFuc2l0aW9uPiAmIDxrZWVwLWFsaXZlPlxyXG4vLyBkdWUgdG8gZnVuY3Rpb25hbCBjb21wb25lbnQgYmVpbmcgbm8gbG9uZ2VyIGVhZ2VyIGluIFZ1ZSAzXHJcbmZ1bmN0aW9uIHdhcm5EZXByZWNhdGVkVXNhZ2UoKSB7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgY29uc3QgcGFyZW50TmFtZSA9IGluc3RhbmNlLnBhcmVudCAmJiBpbnN0YW5jZS5wYXJlbnQudHlwZS5uYW1lO1xyXG4gICAgaWYgKHBhcmVudE5hbWUgJiZcclxuICAgICAgICAocGFyZW50TmFtZSA9PT0gJ0tlZXBBbGl2ZScgfHwgcGFyZW50TmFtZS5pbmNsdWRlcygnVHJhbnNpdGlvbicpKSkge1xyXG4gICAgICAgIGNvbnN0IGNvbXAgPSBwYXJlbnROYW1lID09PSAnS2VlcEFsaXZlJyA/ICdrZWVwLWFsaXZlJyA6ICd0cmFuc2l0aW9uJztcclxuICAgICAgICB3YXJuKGA8cm91dGVyLXZpZXc+IGNhbiBubyBsb25nZXIgYmUgdXNlZCBkaXJlY3RseSBpbnNpZGUgPHRyYW5zaXRpb24+IG9yIDxrZWVwLWFsaXZlPi5cXG5gICtcclxuICAgICAgICAgICAgYFVzZSBzbG90IHByb3BzIGluc3RlYWQ6XFxuXFxuYCArXHJcbiAgICAgICAgICAgIGA8cm91dGVyLXZpZXcgdi1zbG90PVwieyBDb21wb25lbnQgfVwiPlxcbmAgK1xyXG4gICAgICAgICAgICBgICA8JHtjb21wfT5cXG5gICtcclxuICAgICAgICAgICAgYCAgICA8Y29tcG9uZW50IDppcz1cIkNvbXBvbmVudFwiIC8+XFxuYCArXHJcbiAgICAgICAgICAgIGAgIDwvJHtjb21wfT5cXG5gICtcclxuICAgICAgICAgICAgYDwvcm91dGVyLXZpZXc+YCk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIENvcGllcyBhIHJvdXRlIGxvY2F0aW9uIGFuZCByZW1vdmVzIGFueSBwcm9ibGVtYXRpYyBwcm9wZXJ0aWVzIHRoYXQgY2Fubm90IGJlIHNob3duIGluIGRldnRvb2xzIChlLmcuIFZ1ZSBpbnN0YW5jZXMpLlxyXG4gKlxyXG4gKiBAcGFyYW0gcm91dGVMb2NhdGlvbiAtIHJvdXRlTG9jYXRpb24gdG8gZm9ybWF0XHJcbiAqIEBwYXJhbSB0b29sdGlwIC0gb3B0aW9uYWwgdG9vbHRpcFxyXG4gKiBAcmV0dXJucyBhIGNvcHkgb2YgdGhlIHJvdXRlTG9jYXRpb25cclxuICovXHJcbmZ1bmN0aW9uIGZvcm1hdFJvdXRlTG9jYXRpb24ocm91dGVMb2NhdGlvbiwgdG9vbHRpcCkge1xyXG4gICAgY29uc3QgY29weSA9IGFzc2lnbih7fSwgcm91dGVMb2NhdGlvbiwge1xyXG4gICAgICAgIC8vIHJlbW92ZSB2YXJpYWJsZXMgdGhhdCBjYW4gY29udGFpbiB2dWUgaW5zdGFuY2VzXHJcbiAgICAgICAgbWF0Y2hlZDogcm91dGVMb2NhdGlvbi5tYXRjaGVkLm1hcChtYXRjaGVkID0+IG9taXQobWF0Y2hlZCwgWydpbnN0YW5jZXMnLCAnY2hpbGRyZW4nLCAnYWxpYXNPZiddKSksXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgX2N1c3RvbToge1xyXG4gICAgICAgICAgICB0eXBlOiBudWxsLFxyXG4gICAgICAgICAgICByZWFkT25seTogdHJ1ZSxcclxuICAgICAgICAgICAgZGlzcGxheTogcm91dGVMb2NhdGlvbi5mdWxsUGF0aCxcclxuICAgICAgICAgICAgdG9vbHRpcCxcclxuICAgICAgICAgICAgdmFsdWU6IGNvcHksXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZm9ybWF0RGlzcGxheShkaXNwbGF5KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIF9jdXN0b206IHtcclxuICAgICAgICAgICAgZGlzcGxheSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4vLyB0byBzdXBwb3J0IG11bHRpcGxlIHJvdXRlciBpbnN0YW5jZXNcclxubGV0IHJvdXRlcklkID0gMDtcclxuZnVuY3Rpb24gYWRkRGV2dG9vbHMoYXBwLCByb3V0ZXIsIG1hdGNoZXIpIHtcclxuICAgIC8vIFRha2Ugb3ZlciByb3V0ZXIuYmVmb3JlRWFjaCBhbmQgYWZ0ZXJFYWNoXHJcbiAgICAvLyBtYWtlIHN1cmUgd2UgYXJlIG5vdCByZWdpc3RlcmluZyB0aGUgZGV2dG9vbCB0d2ljZVxyXG4gICAgaWYgKHJvdXRlci5fX2hhc0RldnRvb2xzKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHJvdXRlci5fX2hhc0RldnRvb2xzID0gdHJ1ZTtcclxuICAgIC8vIGluY3JlbWVudCB0byBzdXBwb3J0IG11bHRpcGxlIHJvdXRlciBpbnN0YW5jZXNcclxuICAgIGNvbnN0IGlkID0gcm91dGVySWQrKztcclxuICAgIHNldHVwRGV2dG9vbHNQbHVnaW4oe1xyXG4gICAgICAgIGlkOiAnb3JnLnZ1ZWpzLnJvdXRlcicgKyAoaWQgPyAnLicgKyBpZCA6ICcnKSxcclxuICAgICAgICBsYWJlbDogJ1Z1ZSBSb3V0ZXInLFxyXG4gICAgICAgIHBhY2thZ2VOYW1lOiAndnVlLXJvdXRlcicsXHJcbiAgICAgICAgaG9tZXBhZ2U6ICdodHRwczovL3JvdXRlci52dWVqcy5vcmcnLFxyXG4gICAgICAgIGxvZ286ICdodHRwczovL3JvdXRlci52dWVqcy5vcmcvbG9nby5wbmcnLFxyXG4gICAgICAgIGNvbXBvbmVudFN0YXRlVHlwZXM6IFsnUm91dGluZyddLFxyXG4gICAgICAgIGFwcCxcclxuICAgIH0sIGFwaSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhcGkubm93ICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW1Z1ZSBSb3V0ZXJdOiBZb3Ugc2VlbSB0byBiZSB1c2luZyBhbiBvdXRkYXRlZCB2ZXJzaW9uIG9mIFZ1ZSBEZXZ0b29scy4gQXJlIHlvdSBzdGlsbCB1c2luZyB0aGUgQmV0YSByZWxlYXNlIGluc3RlYWQgb2YgdGhlIHN0YWJsZSBvbmU/IFlvdSBjYW4gZmluZCB0aGUgbGlua3MgYXQgaHR0cHM6Ly9kZXZ0b29scy52dWVqcy5vcmcvZ3VpZGUvaW5zdGFsbGF0aW9uLmh0bWwuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGRpc3BsYXkgc3RhdGUgYWRkZWQgYnkgdGhlIHJvdXRlclxyXG4gICAgICAgIGFwaS5vbi5pbnNwZWN0Q29tcG9uZW50KChwYXlsb2FkLCBjdHgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHBheWxvYWQuaW5zdGFuY2VEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBwYXlsb2FkLmluc3RhbmNlRGF0YS5zdGF0ZS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUm91dGluZycsXHJcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnJHJvdXRlJyxcclxuICAgICAgICAgICAgICAgICAgICBlZGl0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZvcm1hdFJvdXRlTG9jYXRpb24ocm91dGVyLmN1cnJlbnRSb3V0ZS52YWx1ZSwgJ0N1cnJlbnQgUm91dGUnKSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gbWFyayByb3V0ZXItbGluayBhcyBhY3RpdmUgYW5kIGRpc3BsYXkgdGFncyBvbiByb3V0ZXIgdmlld3NcclxuICAgICAgICBhcGkub24udmlzaXRDb21wb25lbnRUcmVlKCh7IHRyZWVOb2RlOiBub2RlLCBjb21wb25lbnRJbnN0YW5jZSB9KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjb21wb25lbnRJbnN0YW5jZS5fX3Zydl9kZXZ0b29scykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5mbyA9IGNvbXBvbmVudEluc3RhbmNlLl9fdnJ2X2RldnRvb2xzO1xyXG4gICAgICAgICAgICAgICAgbm9kZS50YWdzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAoaW5mby5uYW1lID8gYCR7aW5mby5uYW1lLnRvU3RyaW5nKCl9OiBgIDogJycpICsgaW5mby5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIHRleHRDb2xvcjogMCxcclxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiAnVGhpcyBjb21wb25lbnQgaXMgcmVuZGVyZWQgYnkgJmx0O3JvdXRlci12aWV3Jmd0OycsXHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBQSU5LXzUwMCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGlmIG11bHRpcGxlIHVzZUxpbmsgYXJlIHVzZWRcclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkoY29tcG9uZW50SW5zdGFuY2UuX192cmxfZGV2dG9vbHMpKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRJbnN0YW5jZS5fX2RldnRvb2xzQXBpID0gYXBpO1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuX192cmxfZGV2dG9vbHMuZm9yRWFjaChkZXZ0b29sc0RhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBiYWNrZ3JvdW5kQ29sb3IgPSBPUkFOR0VfNDAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0b29sdGlwID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRldnRvb2xzRGF0YS5pc0V4YWN0QWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciA9IExJTUVfNTAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwID0gJ1RoaXMgaXMgZXhhY3RseSBhY3RpdmUnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkZXZ0b29sc0RhdGEuaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yID0gQkxVRV82MDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXAgPSAnVGhpcyBsaW5rIGlzIGFjdGl2ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUudGFncy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGRldnRvb2xzRGF0YS5yb3V0ZS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Q29sb3I6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcixcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgd2F0Y2gocm91dGVyLmN1cnJlbnRSb3V0ZSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyByZWZyZXNoIGFjdGl2ZSBzdGF0ZVxyXG4gICAgICAgICAgICByZWZyZXNoUm91dGVzVmlldygpO1xyXG4gICAgICAgICAgICBhcGkubm90aWZ5Q29tcG9uZW50VXBkYXRlKCk7XHJcbiAgICAgICAgICAgIGFwaS5zZW5kSW5zcGVjdG9yVHJlZShyb3V0ZXJJbnNwZWN0b3JJZCk7XHJcbiAgICAgICAgICAgIGFwaS5zZW5kSW5zcGVjdG9yU3RhdGUocm91dGVySW5zcGVjdG9ySWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IG5hdmlnYXRpb25zTGF5ZXJJZCA9ICdyb3V0ZXI6bmF2aWdhdGlvbnM6JyArIGlkO1xyXG4gICAgICAgIGFwaS5hZGRUaW1lbGluZUxheWVyKHtcclxuICAgICAgICAgICAgaWQ6IG5hdmlnYXRpb25zTGF5ZXJJZCxcclxuICAgICAgICAgICAgbGFiZWw6IGBSb3V0ZXIke2lkID8gJyAnICsgaWQgOiAnJ30gTmF2aWdhdGlvbnNgLFxyXG4gICAgICAgICAgICBjb2xvcjogMHg0MGE4YzQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gY29uc3QgZXJyb3JzTGF5ZXJJZCA9ICdyb3V0ZXI6ZXJyb3JzJ1xyXG4gICAgICAgIC8vIGFwaS5hZGRUaW1lbGluZUxheWVyKHtcclxuICAgICAgICAvLyAgIGlkOiBlcnJvcnNMYXllcklkLFxyXG4gICAgICAgIC8vICAgbGFiZWw6ICdSb3V0ZXIgRXJyb3JzJyxcclxuICAgICAgICAvLyAgIGNvbG9yOiAweGVhNTQ1NSxcclxuICAgICAgICAvLyB9KVxyXG4gICAgICAgIHJvdXRlci5vbkVycm9yKChlcnJvciwgdG8pID0+IHtcclxuICAgICAgICAgICAgYXBpLmFkZFRpbWVsaW5lRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgbGF5ZXJJZDogbmF2aWdhdGlvbnNMYXllcklkLFxyXG4gICAgICAgICAgICAgICAgZXZlbnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0Vycm9yIGR1cmluZyBOYXZpZ2F0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZTogdG8uZnVsbFBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9nVHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiBhcGkubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBlcnJvciB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwSWQ6IHRvLm1ldGEuX19uYXZpZ2F0aW9uSWQsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBhdHRhY2hlZCB0byBgbWV0YWAgYW5kIHVzZWQgdG8gZ3JvdXAgZXZlbnRzXHJcbiAgICAgICAgbGV0IG5hdmlnYXRpb25JZCA9IDA7XHJcbiAgICAgICAgcm91dGVyLmJlZm9yZUVhY2goKHRvLCBmcm9tKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBndWFyZDogZm9ybWF0RGlzcGxheSgnYmVmb3JlRWFjaCcpLFxyXG4gICAgICAgICAgICAgICAgZnJvbTogZm9ybWF0Um91dGVMb2NhdGlvbihmcm9tLCAnQ3VycmVudCBMb2NhdGlvbiBkdXJpbmcgdGhpcyBuYXZpZ2F0aW9uJyksXHJcbiAgICAgICAgICAgICAgICB0bzogZm9ybWF0Um91dGVMb2NhdGlvbih0bywgJ1RhcmdldCBsb2NhdGlvbicpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBVc2VkIHRvIGdyb3VwIG5hdmlnYXRpb25zIHRvZ2V0aGVyLCBoaWRlIGZyb20gZGV2dG9vbHNcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRvLm1ldGEsICdfX25hdmlnYXRpb25JZCcsIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBuYXZpZ2F0aW9uSWQrKyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGFwaS5hZGRUaW1lbGluZUV2ZW50KHtcclxuICAgICAgICAgICAgICAgIGxheWVySWQ6IG5hdmlnYXRpb25zTGF5ZXJJZCxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZTogYXBpLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU3RhcnQgb2YgbmF2aWdhdGlvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGU6IHRvLmZ1bGxQYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBJZDogdG8ubWV0YS5fX25hdmlnYXRpb25JZCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJvdXRlci5hZnRlckVhY2goKHRvLCBmcm9tLCBmYWlsdXJlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBndWFyZDogZm9ybWF0RGlzcGxheSgnYWZ0ZXJFYWNoJyksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChmYWlsdXJlKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhLmZhaWx1cmUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2N1c3RvbToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBFcnJvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhaWx1cmUgPyBmYWlsdXJlLm1lc3NhZ2UgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogJ05hdmlnYXRpb24gRmFpbHVyZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmYWlsdXJlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZGF0YS5zdGF0dXMgPSBmb3JtYXREaXNwbGF5KCfinYwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gZm9ybWF0RGlzcGxheSgn4pyFJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gd2Ugc2V0IGhlcmUgdG8gaGF2ZSB0aGUgcmlnaHQgb3JkZXJcclxuICAgICAgICAgICAgZGF0YS5mcm9tID0gZm9ybWF0Um91dGVMb2NhdGlvbihmcm9tLCAnQ3VycmVudCBMb2NhdGlvbiBkdXJpbmcgdGhpcyBuYXZpZ2F0aW9uJyk7XHJcbiAgICAgICAgICAgIGRhdGEudG8gPSBmb3JtYXRSb3V0ZUxvY2F0aW9uKHRvLCAnVGFyZ2V0IGxvY2F0aW9uJyk7XHJcbiAgICAgICAgICAgIGFwaS5hZGRUaW1lbGluZUV2ZW50KHtcclxuICAgICAgICAgICAgICAgIGxheWVySWQ6IG5hdmlnYXRpb25zTGF5ZXJJZCxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdFbmQgb2YgbmF2aWdhdGlvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGU6IHRvLmZ1bGxQYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IGFwaS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvZ1R5cGU6IGZhaWx1cmUgPyAnd2FybmluZycgOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBJZDogdG8ubWV0YS5fX25hdmlnYXRpb25JZCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluc3BlY3RvciBvZiBFeGlzdGluZyByb3V0ZXNcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCByb3V0ZXJJbnNwZWN0b3JJZCA9ICdyb3V0ZXItaW5zcGVjdG9yOicgKyBpZDtcclxuICAgICAgICBhcGkuYWRkSW5zcGVjdG9yKHtcclxuICAgICAgICAgICAgaWQ6IHJvdXRlckluc3BlY3RvcklkLFxyXG4gICAgICAgICAgICBsYWJlbDogJ1JvdXRlcycgKyAoaWQgPyAnICcgKyBpZCA6ICcnKSxcclxuICAgICAgICAgICAgaWNvbjogJ2Jvb2snLFxyXG4gICAgICAgICAgICB0cmVlRmlsdGVyUGxhY2Vob2xkZXI6ICdTZWFyY2ggcm91dGVzJyxcclxuICAgICAgICB9KTtcclxuICAgICAgICBmdW5jdGlvbiByZWZyZXNoUm91dGVzVmlldygpIHtcclxuICAgICAgICAgICAgLy8gdGhlIHJvdXRlcyB2aWV3IGlzbid0IGFjdGl2ZVxyXG4gICAgICAgICAgICBpZiAoIWFjdGl2ZVJvdXRlc1BheWxvYWQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBhY3RpdmVSb3V0ZXNQYXlsb2FkO1xyXG4gICAgICAgICAgICAvLyBjaGlsZHJlbiByb3V0ZXMgd2lsbCBhcHBlYXIgYXMgbmVzdGVkXHJcbiAgICAgICAgICAgIGxldCByb3V0ZXMgPSBtYXRjaGVyLmdldFJvdXRlcygpLmZpbHRlcihyb3V0ZSA9PiAhcm91dGUucGFyZW50KTtcclxuICAgICAgICAgICAgLy8gcmVzZXQgbWF0Y2ggc3RhdGUgdG8gZmFsc2VcclxuICAgICAgICAgICAgcm91dGVzLmZvckVhY2gocmVzZXRNYXRjaFN0YXRlT25Sb3V0ZVJlY29yZCk7XHJcbiAgICAgICAgICAgIC8vIGFwcGx5IGEgbWF0Y2ggc3RhdGUgaWYgdGhlcmUgaXMgYSBwYXlsb2FkXHJcbiAgICAgICAgICAgIGlmIChwYXlsb2FkLmZpbHRlcikge1xyXG4gICAgICAgICAgICAgICAgcm91dGVzID0gcm91dGVzLmZpbHRlcihyb3V0ZSA9PiBcclxuICAgICAgICAgICAgICAgIC8vIHNhdmUgbWF0Y2hlcyBzdGF0ZSBiYXNlZCBvbiB0aGUgcGF5bG9hZFxyXG4gICAgICAgICAgICAgICAgaXNSb3V0ZU1hdGNoaW5nKHJvdXRlLCBwYXlsb2FkLmZpbHRlci50b0xvd2VyQ2FzZSgpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbWFyayBhY3RpdmUgcm91dGVzXHJcbiAgICAgICAgICAgIHJvdXRlcy5mb3JFYWNoKHJvdXRlID0+IG1hcmtSb3V0ZVJlY29yZEFjdGl2ZShyb3V0ZSwgcm91dGVyLmN1cnJlbnRSb3V0ZS52YWx1ZSkpO1xyXG4gICAgICAgICAgICBwYXlsb2FkLnJvb3ROb2RlcyA9IHJvdXRlcy5tYXAoZm9ybWF0Um91dGVSZWNvcmRGb3JJbnNwZWN0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYWN0aXZlUm91dGVzUGF5bG9hZDtcclxuICAgICAgICBhcGkub24uZ2V0SW5zcGVjdG9yVHJlZShwYXlsb2FkID0+IHtcclxuICAgICAgICAgICAgYWN0aXZlUm91dGVzUGF5bG9hZCA9IHBheWxvYWQ7XHJcbiAgICAgICAgICAgIGlmIChwYXlsb2FkLmFwcCA9PT0gYXBwICYmIHBheWxvYWQuaW5zcGVjdG9ySWQgPT09IHJvdXRlckluc3BlY3RvcklkKSB7XHJcbiAgICAgICAgICAgICAgICByZWZyZXNoUm91dGVzVmlldygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGlzcGxheSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHJvdXRlIHJlY29yZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFwaS5vbi5nZXRJbnNwZWN0b3JTdGF0ZShwYXlsb2FkID0+IHtcclxuICAgICAgICAgICAgaWYgKHBheWxvYWQuYXBwID09PSBhcHAgJiYgcGF5bG9hZC5pbnNwZWN0b3JJZCA9PT0gcm91dGVySW5zcGVjdG9ySWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvdXRlcyA9IG1hdGNoZXIuZ2V0Um91dGVzKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3V0ZSA9IHJvdXRlcy5maW5kKHJvdXRlID0+IHJvdXRlLnJlY29yZC5fX3ZkX2lkID09PSBwYXlsb2FkLm5vZGVJZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocm91dGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLnN0YXRlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBmb3JtYXRSb3V0ZVJlY29yZE1hdGNoZXJGb3JTdGF0ZUluc3BlY3Rvcihyb3V0ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFwaS5zZW5kSW5zcGVjdG9yVHJlZShyb3V0ZXJJbnNwZWN0b3JJZCk7XHJcbiAgICAgICAgYXBpLnNlbmRJbnNwZWN0b3JTdGF0ZShyb3V0ZXJJbnNwZWN0b3JJZCk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBtb2RpZmllckZvcktleShrZXkpIHtcclxuICAgIGlmIChrZXkub3B0aW9uYWwpIHtcclxuICAgICAgICByZXR1cm4ga2V5LnJlcGVhdGFibGUgPyAnKicgOiAnPyc7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4ga2V5LnJlcGVhdGFibGUgPyAnKycgOiAnJztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBmb3JtYXRSb3V0ZVJlY29yZE1hdGNoZXJGb3JTdGF0ZUluc3BlY3Rvcihyb3V0ZSkge1xyXG4gICAgY29uc3QgeyByZWNvcmQgfSA9IHJvdXRlO1xyXG4gICAgY29uc3QgZmllbGRzID0gW1xyXG4gICAgICAgIHsgZWRpdGFibGU6IGZhbHNlLCBrZXk6ICdwYXRoJywgdmFsdWU6IHJlY29yZC5wYXRoIH0sXHJcbiAgICBdO1xyXG4gICAgaWYgKHJlY29yZC5uYW1lICE9IG51bGwpIHtcclxuICAgICAgICBmaWVsZHMucHVzaCh7XHJcbiAgICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAga2V5OiAnbmFtZScsXHJcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQubmFtZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGZpZWxkcy5wdXNoKHsgZWRpdGFibGU6IGZhbHNlLCBrZXk6ICdyZWdleHAnLCB2YWx1ZTogcm91dGUucmUgfSk7XHJcbiAgICBpZiAocm91dGUua2V5cy5sZW5ndGgpIHtcclxuICAgICAgICBmaWVsZHMucHVzaCh7XHJcbiAgICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAga2V5OiAna2V5cycsXHJcbiAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICBfY3VzdG9tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiByb3V0ZS5rZXlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IGAke2tleS5uYW1lfSR7bW9kaWZpZXJGb3JLZXkoa2V5KX1gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuam9pbignICcpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdQYXJhbSBrZXlzJyxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcm91dGUua2V5cyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVjb3JkLnJlZGlyZWN0ICE9IG51bGwpIHtcclxuICAgICAgICBmaWVsZHMucHVzaCh7XHJcbiAgICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAga2V5OiAncmVkaXJlY3QnLFxyXG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLnJlZGlyZWN0LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHJvdXRlLmFsaWFzLmxlbmd0aCkge1xyXG4gICAgICAgIGZpZWxkcy5wdXNoKHtcclxuICAgICAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBrZXk6ICdhbGlhc2VzJyxcclxuICAgICAgICAgICAgdmFsdWU6IHJvdXRlLmFsaWFzLm1hcChhbGlhcyA9PiBhbGlhcy5yZWNvcmQucGF0aCksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoT2JqZWN0LmtleXMocm91dGUucmVjb3JkLm1ldGEpLmxlbmd0aCkge1xyXG4gICAgICAgIGZpZWxkcy5wdXNoKHtcclxuICAgICAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBrZXk6ICdtZXRhJyxcclxuICAgICAgICAgICAgdmFsdWU6IHJvdXRlLnJlY29yZC5tZXRhLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZmllbGRzLnB1c2goe1xyXG4gICAgICAgIGtleTogJ3Njb3JlJyxcclxuICAgICAgICBlZGl0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgX2N1c3RvbToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogcm91dGUuc2NvcmUubWFwKHNjb3JlID0+IHNjb3JlLmpvaW4oJywgJykpLmpvaW4oJyB8ICcpLFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDogJ1Njb3JlIHVzZWQgdG8gc29ydCByb3V0ZXMnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHJvdXRlLnNjb3JlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBmaWVsZHM7XHJcbn1cclxuLyoqXHJcbiAqIEV4dHJhY3RlZCBmcm9tIHRhaWx3aW5kIHBhbGV0dGVcclxuICovXHJcbmNvbnN0IFBJTktfNTAwID0gMHhlYzQ4OTk7XHJcbmNvbnN0IEJMVUVfNjAwID0gMHgyNTYzZWI7XHJcbmNvbnN0IExJTUVfNTAwID0gMHg4NGNjMTY7XHJcbmNvbnN0IENZQU5fNDAwID0gMHgyMmQzZWU7XHJcbmNvbnN0IE9SQU5HRV80MDAgPSAweGZiOTIzYztcclxuLy8gY29uc3QgR1JBWV8xMDAgPSAweGY0ZjRmNVxyXG5jb25zdCBEQVJLID0gMHg2NjY2NjY7XHJcbmZ1bmN0aW9uIGZvcm1hdFJvdXRlUmVjb3JkRm9ySW5zcGVjdG9yKHJvdXRlKSB7XHJcbiAgICBjb25zdCB0YWdzID0gW107XHJcbiAgICBjb25zdCB7IHJlY29yZCB9ID0gcm91dGU7XHJcbiAgICBpZiAocmVjb3JkLm5hbWUgIT0gbnVsbCkge1xyXG4gICAgICAgIHRhZ3MucHVzaCh7XHJcbiAgICAgICAgICAgIGxhYmVsOiBTdHJpbmcocmVjb3JkLm5hbWUpLFxyXG4gICAgICAgICAgICB0ZXh0Q29sb3I6IDAsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ1lBTl80MDAsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVjb3JkLmFsaWFzT2YpIHtcclxuICAgICAgICB0YWdzLnB1c2goe1xyXG4gICAgICAgICAgICBsYWJlbDogJ2FsaWFzJyxcclxuICAgICAgICAgICAgdGV4dENvbG9yOiAwLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IE9SQU5HRV80MDAsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAocm91dGUuX192ZF9tYXRjaCkge1xyXG4gICAgICAgIHRhZ3MucHVzaCh7XHJcbiAgICAgICAgICAgIGxhYmVsOiAnbWF0Y2hlcycsXHJcbiAgICAgICAgICAgIHRleHRDb2xvcjogMCxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBQSU5LXzUwMCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChyb3V0ZS5fX3ZkX2V4YWN0QWN0aXZlKSB7XHJcbiAgICAgICAgdGFncy5wdXNoKHtcclxuICAgICAgICAgICAgbGFiZWw6ICdleGFjdCcsXHJcbiAgICAgICAgICAgIHRleHRDb2xvcjogMCxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBMSU1FXzUwMCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChyb3V0ZS5fX3ZkX2FjdGl2ZSkge1xyXG4gICAgICAgIHRhZ3MucHVzaCh7XHJcbiAgICAgICAgICAgIGxhYmVsOiAnYWN0aXZlJyxcclxuICAgICAgICAgICAgdGV4dENvbG9yOiAwLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IEJMVUVfNjAwLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlY29yZC5yZWRpcmVjdCkge1xyXG4gICAgICAgIHRhZ3MucHVzaCh7XHJcbiAgICAgICAgICAgIGxhYmVsOiB0eXBlb2YgcmVjb3JkLnJlZGlyZWN0ID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgPyBgcmVkaXJlY3Q6ICR7cmVjb3JkLnJlZGlyZWN0fWBcclxuICAgICAgICAgICAgICAgIDogJ3JlZGlyZWN0cycsXHJcbiAgICAgICAgICAgIHRleHRDb2xvcjogMHhmZmZmZmYsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogREFSSyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vIGFkZCBhbiBpZCB0byBiZSBhYmxlIHRvIHNlbGVjdCBpdC4gVXNpbmcgdGhlIGBwYXRoYCBpcyBub3QgcG9zc2libGUgYmVjYXVzZVxyXG4gICAgLy8gZW1wdHkgcGF0aCBjaGlsZHJlbiB3b3VsZCBjb2xsaWRlIHdpdGggdGhlaXIgcGFyZW50c1xyXG4gICAgbGV0IGlkID0gcmVjb3JkLl9fdmRfaWQ7XHJcbiAgICBpZiAoaWQgPT0gbnVsbCkge1xyXG4gICAgICAgIGlkID0gU3RyaW5nKHJvdXRlUmVjb3JkSWQrKyk7XHJcbiAgICAgICAgcmVjb3JkLl9fdmRfaWQgPSBpZDtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaWQsXHJcbiAgICAgICAgbGFiZWw6IHJlY29yZC5wYXRoLFxyXG4gICAgICAgIHRhZ3MsXHJcbiAgICAgICAgY2hpbGRyZW46IHJvdXRlLmNoaWxkcmVuLm1hcChmb3JtYXRSb3V0ZVJlY29yZEZvckluc3BlY3RvciksXHJcbiAgICB9O1xyXG59XHJcbi8vICBpbmNyZW1lbnRhbCBpZCBmb3Igcm91dGUgcmVjb3JkcyBhbmQgaW5zcGVjdG9yIHN0YXRlXHJcbmxldCByb3V0ZVJlY29yZElkID0gMDtcclxuY29uc3QgRVhUUkFDVF9SRUdFWFBfUkUgPSAvXlxcLyguKilcXC8oW2Etel0qKSQvO1xyXG5mdW5jdGlvbiBtYXJrUm91dGVSZWNvcmRBY3RpdmUocm91dGUsIGN1cnJlbnRSb3V0ZSkge1xyXG4gICAgLy8gbm8gcm91dGUgd2lsbCBiZSBhY3RpdmUgaWYgbWF0Y2hlZCBpcyBlbXB0eVxyXG4gICAgLy8gcmVzZXQgdGhlIG1hdGNoaW5nIHN0YXRlXHJcbiAgICBjb25zdCBpc0V4YWN0QWN0aXZlID0gY3VycmVudFJvdXRlLm1hdGNoZWQubGVuZ3RoICYmXHJcbiAgICAgICAgaXNTYW1lUm91dGVSZWNvcmQoY3VycmVudFJvdXRlLm1hdGNoZWRbY3VycmVudFJvdXRlLm1hdGNoZWQubGVuZ3RoIC0gMV0sIHJvdXRlLnJlY29yZCk7XHJcbiAgICByb3V0ZS5fX3ZkX2V4YWN0QWN0aXZlID0gcm91dGUuX192ZF9hY3RpdmUgPSBpc0V4YWN0QWN0aXZlO1xyXG4gICAgaWYgKCFpc0V4YWN0QWN0aXZlKSB7XHJcbiAgICAgICAgcm91dGUuX192ZF9hY3RpdmUgPSBjdXJyZW50Um91dGUubWF0Y2hlZC5zb21lKG1hdGNoID0+IGlzU2FtZVJvdXRlUmVjb3JkKG1hdGNoLCByb3V0ZS5yZWNvcmQpKTtcclxuICAgIH1cclxuICAgIHJvdXRlLmNoaWxkcmVuLmZvckVhY2goY2hpbGRSb3V0ZSA9PiBtYXJrUm91dGVSZWNvcmRBY3RpdmUoY2hpbGRSb3V0ZSwgY3VycmVudFJvdXRlKSk7XHJcbn1cclxuZnVuY3Rpb24gcmVzZXRNYXRjaFN0YXRlT25Sb3V0ZVJlY29yZChyb3V0ZSkge1xyXG4gICAgcm91dGUuX192ZF9tYXRjaCA9IGZhbHNlO1xyXG4gICAgcm91dGUuY2hpbGRyZW4uZm9yRWFjaChyZXNldE1hdGNoU3RhdGVPblJvdXRlUmVjb3JkKTtcclxufVxyXG5mdW5jdGlvbiBpc1JvdXRlTWF0Y2hpbmcocm91dGUsIGZpbHRlcikge1xyXG4gICAgY29uc3QgZm91bmQgPSBTdHJpbmcocm91dGUucmUpLm1hdGNoKEVYVFJBQ1RfUkVHRVhQX1JFKTtcclxuICAgIHJvdXRlLl9fdmRfbWF0Y2ggPSBmYWxzZTtcclxuICAgIGlmICghZm91bmQgfHwgZm91bmQubGVuZ3RoIDwgMykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIHVzZSBhIHJlZ2V4cCB3aXRob3V0ICQgYXQgdGhlIGVuZCB0byBtYXRjaCBuZXN0ZWQgcm91dGVzIGJldHRlclxyXG4gICAgY29uc3Qgbm9uRW5kaW5nUkUgPSBuZXcgUmVnRXhwKGZvdW5kWzFdLnJlcGxhY2UoL1xcJCQvLCAnJyksIGZvdW5kWzJdKTtcclxuICAgIGlmIChub25FbmRpbmdSRS50ZXN0KGZpbHRlcikpIHtcclxuICAgICAgICAvLyBtYXJrIGNoaWxkcmVuIGFzIG1hdGNoZXNcclxuICAgICAgICByb3V0ZS5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IGlzUm91dGVNYXRjaGluZyhjaGlsZCwgZmlsdGVyKSk7XHJcbiAgICAgICAgLy8gZXhjZXB0aW9uIGNhc2U6IGAvYFxyXG4gICAgICAgIGlmIChyb3V0ZS5yZWNvcmQucGF0aCAhPT0gJy8nIHx8IGZpbHRlciA9PT0gJy8nKSB7XHJcbiAgICAgICAgICAgIHJvdXRlLl9fdmRfbWF0Y2ggPSByb3V0ZS5yZS50ZXN0KGZpbHRlcik7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBoaWRlIHRoZSAvIHJvdXRlXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGF0aCA9IHJvdXRlLnJlY29yZC5wYXRoLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBjb25zdCBkZWNvZGVkUGF0aCA9IGRlY29kZShwYXRoKTtcclxuICAgIC8vIGFsc28gYWxsb3cgcGFydGlhbCBtYXRjaGluZyBvbiB0aGUgcGF0aFxyXG4gICAgaWYgKCFmaWx0ZXIuc3RhcnRzV2l0aCgnLycpICYmXHJcbiAgICAgICAgKGRlY29kZWRQYXRoLmluY2x1ZGVzKGZpbHRlcikgfHwgcGF0aC5pbmNsdWRlcyhmaWx0ZXIpKSlcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIGlmIChkZWNvZGVkUGF0aC5zdGFydHNXaXRoKGZpbHRlcikgfHwgcGF0aC5zdGFydHNXaXRoKGZpbHRlcikpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICBpZiAocm91dGUucmVjb3JkLm5hbWUgJiYgU3RyaW5nKHJvdXRlLnJlY29yZC5uYW1lKS5pbmNsdWRlcyhmaWx0ZXIpKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgcmV0dXJuIHJvdXRlLmNoaWxkcmVuLnNvbWUoY2hpbGQgPT4gaXNSb3V0ZU1hdGNoaW5nKGNoaWxkLCBmaWx0ZXIpKTtcclxufVxyXG5mdW5jdGlvbiBvbWl0KG9iaiwga2V5cykge1xyXG4gICAgY29uc3QgcmV0ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoIWtleXMuaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgICAgIHJldFtrZXldID0gb2JqW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxuXG4vKipcclxuICogQ3JlYXRlcyBhIFJvdXRlciBpbnN0YW5jZSB0aGF0IGNhbiBiZSB1c2VkIGJ5IGEgVnVlIGFwcC5cclxuICpcclxuICogQHBhcmFtIG9wdGlvbnMgLSB7QGxpbmsgUm91dGVyT3B0aW9uc31cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihvcHRpb25zKSB7XHJcbiAgICBjb25zdCBtYXRjaGVyID0gY3JlYXRlUm91dGVyTWF0Y2hlcihvcHRpb25zLnJvdXRlcywgb3B0aW9ucyk7XHJcbiAgICBjb25zdCBwYXJzZVF1ZXJ5JDEgPSBvcHRpb25zLnBhcnNlUXVlcnkgfHwgcGFyc2VRdWVyeTtcclxuICAgIGNvbnN0IHN0cmluZ2lmeVF1ZXJ5JDEgPSBvcHRpb25zLnN0cmluZ2lmeVF1ZXJ5IHx8IHN0cmluZ2lmeVF1ZXJ5O1xyXG4gICAgY29uc3Qgcm91dGVySGlzdG9yeSA9IG9wdGlvbnMuaGlzdG9yeTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXJvdXRlckhpc3RvcnkpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcm92aWRlIHRoZSBcImhpc3RvcnlcIiBvcHRpb24gd2hlbiBjYWxsaW5nIFwiY3JlYXRlUm91dGVyKClcIjonICtcclxuICAgICAgICAgICAgJyBodHRwczovL25leHQucm91dGVyLnZ1ZWpzLm9yZy9hcGkvI2hpc3RvcnkuJyk7XHJcbiAgICBjb25zdCBiZWZvcmVHdWFyZHMgPSB1c2VDYWxsYmFja3MoKTtcclxuICAgIGNvbnN0IGJlZm9yZVJlc29sdmVHdWFyZHMgPSB1c2VDYWxsYmFja3MoKTtcclxuICAgIGNvbnN0IGFmdGVyR3VhcmRzID0gdXNlQ2FsbGJhY2tzKCk7XHJcbiAgICBjb25zdCBjdXJyZW50Um91dGUgPSBzaGFsbG93UmVmKFNUQVJUX0xPQ0FUSU9OX05PUk1BTElaRUQpO1xyXG4gICAgbGV0IHBlbmRpbmdMb2NhdGlvbiA9IFNUQVJUX0xPQ0FUSU9OX05PUk1BTElaRUQ7XHJcbiAgICAvLyBsZWF2ZSB0aGUgc2Nyb2xsUmVzdG9yYXRpb24gaWYgbm8gc2Nyb2xsQmVoYXZpb3IgaXMgcHJvdmlkZWRcclxuICAgIGlmIChpc0Jyb3dzZXIgJiYgb3B0aW9ucy5zY3JvbGxCZWhhdmlvciAmJiAnc2Nyb2xsUmVzdG9yYXRpb24nIGluIGhpc3RvcnkpIHtcclxuICAgICAgICBoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gJ21hbnVhbCc7XHJcbiAgICB9XHJcbiAgICBjb25zdCBub3JtYWxpemVQYXJhbXMgPSBhcHBseVRvUGFyYW1zLmJpbmQobnVsbCwgcGFyYW1WYWx1ZSA9PiAnJyArIHBhcmFtVmFsdWUpO1xyXG4gICAgY29uc3QgZW5jb2RlUGFyYW1zID0gYXBwbHlUb1BhcmFtcy5iaW5kKG51bGwsIGVuY29kZVBhcmFtKTtcclxuICAgIGNvbnN0IGRlY29kZVBhcmFtcyA9IFxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogaW50ZW50aW9uYWxseSBhdm9pZCB0aGUgdHlwZSBjaGVja1xyXG4gICAgYXBwbHlUb1BhcmFtcy5iaW5kKG51bGwsIGRlY29kZSk7XHJcbiAgICBmdW5jdGlvbiBhZGRSb3V0ZShwYXJlbnRPclJvdXRlLCByb3V0ZSkge1xyXG4gICAgICAgIGxldCBwYXJlbnQ7XHJcbiAgICAgICAgbGV0IHJlY29yZDtcclxuICAgICAgICBpZiAoaXNSb3V0ZU5hbWUocGFyZW50T3JSb3V0ZSkpIHtcclxuICAgICAgICAgICAgcGFyZW50ID0gbWF0Y2hlci5nZXRSZWNvcmRNYXRjaGVyKHBhcmVudE9yUm91dGUpO1xyXG4gICAgICAgICAgICByZWNvcmQgPSByb3V0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlY29yZCA9IHBhcmVudE9yUm91dGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXRjaGVyLmFkZFJvdXRlKHJlY29yZCwgcGFyZW50KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZVJvdXRlKG5hbWUpIHtcclxuICAgICAgICBjb25zdCByZWNvcmRNYXRjaGVyID0gbWF0Y2hlci5nZXRSZWNvcmRNYXRjaGVyKG5hbWUpO1xyXG4gICAgICAgIGlmIChyZWNvcmRNYXRjaGVyKSB7XHJcbiAgICAgICAgICAgIG1hdGNoZXIucmVtb3ZlUm91dGUocmVjb3JkTWF0Y2hlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBDYW5ub3QgcmVtb3ZlIG5vbi1leGlzdGVudCByb3V0ZSBcIiR7U3RyaW5nKG5hbWUpfVwiYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZ2V0Um91dGVzKCkge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVyLmdldFJvdXRlcygpLm1hcChyb3V0ZU1hdGNoZXIgPT4gcm91dGVNYXRjaGVyLnJlY29yZCk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBoYXNSb3V0ZShuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuICEhbWF0Y2hlci5nZXRSZWNvcmRNYXRjaGVyKG5hbWUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVzb2x2ZShyYXdMb2NhdGlvbiwgY3VycmVudExvY2F0aW9uKSB7XHJcbiAgICAgICAgLy8gY29uc3Qgb2JqZWN0TG9jYXRpb24gPSByb3V0ZXJMb2NhdGlvbkFzT2JqZWN0KHJhd0xvY2F0aW9uKVxyXG4gICAgICAgIC8vIHdlIGNyZWF0ZSBhIGNvcHkgdG8gbW9kaWZ5IGl0IGxhdGVyXHJcbiAgICAgICAgY3VycmVudExvY2F0aW9uID0gYXNzaWduKHt9LCBjdXJyZW50TG9jYXRpb24gfHwgY3VycmVudFJvdXRlLnZhbHVlKTtcclxuICAgICAgICBpZiAodHlwZW9mIHJhd0xvY2F0aW9uID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbk5vcm1hbGl6ZWQgPSBwYXJzZVVSTChwYXJzZVF1ZXJ5JDEsIHJhd0xvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24ucGF0aCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZWRSb3V0ZSA9IG1hdGNoZXIucmVzb2x2ZSh7IHBhdGg6IGxvY2F0aW9uTm9ybWFsaXplZC5wYXRoIH0sIGN1cnJlbnRMb2NhdGlvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSByb3V0ZXJIaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb25Ob3JtYWxpemVkLmZ1bGxQYXRoKTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhyZWYuc3RhcnRzV2l0aCgnLy8nKSlcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBMb2NhdGlvbiBcIiR7cmF3TG9jYXRpb259XCIgcmVzb2x2ZWQgdG8gXCIke2hyZWZ9XCIuIEEgcmVzb2x2ZWQgbG9jYXRpb24gY2Fubm90IHN0YXJ0IHdpdGggbXVsdGlwbGUgc2xhc2hlcy5gKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFtYXRjaGVkUm91dGUubWF0Y2hlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBObyBtYXRjaCBmb3VuZCBmb3IgbG9jYXRpb24gd2l0aCBwYXRoIFwiJHtyYXdMb2NhdGlvbn1cImApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGxvY2F0aW9uTm9ybWFsaXplZCBpcyBhbHdheXMgYSBuZXcgb2JqZWN0XHJcbiAgICAgICAgICAgIHJldHVybiBhc3NpZ24obG9jYXRpb25Ob3JtYWxpemVkLCBtYXRjaGVkUm91dGUsIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtczogZGVjb2RlUGFyYW1zKG1hdGNoZWRSb3V0ZS5wYXJhbXMpLFxyXG4gICAgICAgICAgICAgICAgaGFzaDogZGVjb2RlKGxvY2F0aW9uTm9ybWFsaXplZC5oYXNoKSxcclxuICAgICAgICAgICAgICAgIHJlZGlyZWN0ZWRGcm9tOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBocmVmLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG1hdGNoZXJMb2NhdGlvbjtcclxuICAgICAgICAvLyBwYXRoIGNvdWxkIGJlIHJlbGF0aXZlIGluIG9iamVjdCBhcyB3ZWxsXHJcbiAgICAgICAgaWYgKCdwYXRoJyBpbiByYXdMb2NhdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICAncGFyYW1zJyBpbiByYXdMb2NhdGlvbiAmJlxyXG4gICAgICAgICAgICAgICAgISgnbmFtZScgaW4gcmF3TG9jYXRpb24pICYmXHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiB0aGUgdHlwZSBpcyBuZXZlclxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMocmF3TG9jYXRpb24ucGFyYW1zKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYFBhdGggXCIke1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogdGhlIHR5cGUgaXMgbmV2ZXJcclxuICAgICAgICAgICAgICAgIHJhd0xvY2F0aW9uLnBhdGh9XCIgd2FzIHBhc3NlZCB3aXRoIHBhcmFtcyBidXQgdGhleSB3aWxsIGJlIGlnbm9yZWQuIFVzZSBhIG5hbWVkIHJvdXRlIGFsb25nc2lkZSBwYXJhbXMgaW5zdGVhZC5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYXRjaGVyTG9jYXRpb24gPSBhc3NpZ24oe30sIHJhd0xvY2F0aW9uLCB7XHJcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXJzZVVSTChwYXJzZVF1ZXJ5JDEsIHJhd0xvY2F0aW9uLnBhdGgsIGN1cnJlbnRMb2NhdGlvbi5wYXRoKS5wYXRoLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBhbnkgbnVsbGlzaCBwYXJhbVxyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRQYXJhbXMgPSBhc3NpZ24oe30sIHJhd0xvY2F0aW9uLnBhcmFtcyk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRhcmdldFBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFBhcmFtc1trZXldID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGFyZ2V0UGFyYW1zW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcGFzcyBlbmNvZGVkIHZhbHVlcyB0byB0aGUgbWF0Y2hlciwgc28gaXQgY2FuIHByb2R1Y2UgZW5jb2RlZCBwYXRoIGFuZCBmdWxsUGF0aFxyXG4gICAgICAgICAgICBtYXRjaGVyTG9jYXRpb24gPSBhc3NpZ24oe30sIHJhd0xvY2F0aW9uLCB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IGVuY29kZVBhcmFtcyhyYXdMb2NhdGlvbi5wYXJhbXMpLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gY3VycmVudCBsb2NhdGlvbiBwYXJhbXMgYXJlIGRlY29kZWQsIHdlIG5lZWQgdG8gZW5jb2RlIHRoZW0gaW4gY2FzZSB0aGVcclxuICAgICAgICAgICAgLy8gbWF0Y2hlciBtZXJnZXMgdGhlIHBhcmFtc1xyXG4gICAgICAgICAgICBjdXJyZW50TG9jYXRpb24ucGFyYW1zID0gZW5jb2RlUGFyYW1zKGN1cnJlbnRMb2NhdGlvbi5wYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtYXRjaGVkUm91dGUgPSBtYXRjaGVyLnJlc29sdmUobWF0Y2hlckxvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24pO1xyXG4gICAgICAgIGNvbnN0IGhhc2ggPSByYXdMb2NhdGlvbi5oYXNoIHx8ICcnO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaGFzaCAmJiAhaGFzaC5zdGFydHNXaXRoKCcjJykpIHtcclxuICAgICAgICAgICAgd2FybihgQSBcXGBoYXNoXFxgIHNob3VsZCBhbHdheXMgc3RhcnQgd2l0aCB0aGUgY2hhcmFjdGVyIFwiI1wiLiBSZXBsYWNlIFwiJHtoYXNofVwiIHdpdGggXCIjJHtoYXNofVwiLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGUgbWF0Y2hlciBtaWdodCBoYXZlIG1lcmdlZCBjdXJyZW50IGxvY2F0aW9uIHBhcmFtcywgc29cclxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHJ1biB0aGUgZGVjb2RpbmcgYWdhaW5cclxuICAgICAgICBtYXRjaGVkUm91dGUucGFyYW1zID0gbm9ybWFsaXplUGFyYW1zKGRlY29kZVBhcmFtcyhtYXRjaGVkUm91dGUucGFyYW1zKSk7XHJcbiAgICAgICAgY29uc3QgZnVsbFBhdGggPSBzdHJpbmdpZnlVUkwoc3RyaW5naWZ5UXVlcnkkMSwgYXNzaWduKHt9LCByYXdMb2NhdGlvbiwge1xyXG4gICAgICAgICAgICBoYXNoOiBlbmNvZGVIYXNoKGhhc2gpLFxyXG4gICAgICAgICAgICBwYXRoOiBtYXRjaGVkUm91dGUucGF0aCxcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgY29uc3QgaHJlZiA9IHJvdXRlckhpc3RvcnkuY3JlYXRlSHJlZihmdWxsUGF0aCk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBpZiAoaHJlZi5zdGFydHNXaXRoKCcvLycpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBMb2NhdGlvbiBcIiR7cmF3TG9jYXRpb259XCIgcmVzb2x2ZWQgdG8gXCIke2hyZWZ9XCIuIEEgcmVzb2x2ZWQgbG9jYXRpb24gY2Fubm90IHN0YXJ0IHdpdGggbXVsdGlwbGUgc2xhc2hlcy5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghbWF0Y2hlZFJvdXRlLm1hdGNoZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBObyBtYXRjaCBmb3VuZCBmb3IgbG9jYXRpb24gd2l0aCBwYXRoIFwiJHsncGF0aCcgaW4gcmF3TG9jYXRpb24gPyByYXdMb2NhdGlvbi5wYXRoIDogcmF3TG9jYXRpb259XCJgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXNzaWduKHtcclxuICAgICAgICAgICAgZnVsbFBhdGgsXHJcbiAgICAgICAgICAgIC8vIGtlZXAgdGhlIGhhc2ggZW5jb2RlZCBzbyBmdWxsUGF0aCBpcyBlZmZlY3RpdmVseSBwYXRoICsgZW5jb2RlZFF1ZXJ5ICtcclxuICAgICAgICAgICAgLy8gaGFzaFxyXG4gICAgICAgICAgICBoYXNoLFxyXG4gICAgICAgICAgICBxdWVyeTogXHJcbiAgICAgICAgICAgIC8vIGlmIHRoZSB1c2VyIGlzIHVzaW5nIGEgY3VzdG9tIHF1ZXJ5IGxpYiBsaWtlIHFzLCB3ZSBtaWdodCBoYXZlXHJcbiAgICAgICAgICAgIC8vIG5lc3RlZCBvYmplY3RzLCBzbyB3ZSBrZWVwIHRoZSBxdWVyeSBhcyBpcywgbWVhbmluZyBpdCBjYW4gY29udGFpblxyXG4gICAgICAgICAgICAvLyBudW1iZXJzIGF0IGAkcm91dGUucXVlcnlgLCBidXQgYXQgdGhlIHBvaW50LCB0aGUgdXNlciB3aWxsIGhhdmUgdG9cclxuICAgICAgICAgICAgLy8gdXNlIHRoZWlyIG93biB0eXBlIGFueXdheS5cclxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3JvdXRlci9pc3N1ZXMvMzI4I2lzc3VlY29tbWVudC02NDk0ODE1NjdcclxuICAgICAgICAgICAgc3RyaW5naWZ5UXVlcnkkMSA9PT0gc3RyaW5naWZ5UXVlcnlcclxuICAgICAgICAgICAgICAgID8gbm9ybWFsaXplUXVlcnkocmF3TG9jYXRpb24ucXVlcnkpXHJcbiAgICAgICAgICAgICAgICA6IChyYXdMb2NhdGlvbi5xdWVyeSB8fCB7fSksXHJcbiAgICAgICAgfSwgbWF0Y2hlZFJvdXRlLCB7XHJcbiAgICAgICAgICAgIHJlZGlyZWN0ZWRGcm9tOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIGhyZWYsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBsb2NhdGlvbkFzT2JqZWN0KHRvKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgPyBwYXJzZVVSTChwYXJzZVF1ZXJ5JDEsIHRvLCBjdXJyZW50Um91dGUudmFsdWUucGF0aClcclxuICAgICAgICAgICAgOiBhc3NpZ24oe30sIHRvKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNoZWNrQ2FuY2VsZWROYXZpZ2F0aW9uKHRvLCBmcm9tKSB7XHJcbiAgICAgICAgaWYgKHBlbmRpbmdMb2NhdGlvbiAhPT0gdG8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVJvdXRlckVycm9yKDggLyogRXJyb3JUeXBlcy5OQVZJR0FUSU9OX0NBTkNFTExFRCAqLywge1xyXG4gICAgICAgICAgICAgICAgZnJvbSxcclxuICAgICAgICAgICAgICAgIHRvLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBwdXNoKHRvKSB7XHJcbiAgICAgICAgcmV0dXJuIHB1c2hXaXRoUmVkaXJlY3QodG8pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVwbGFjZSh0bykge1xyXG4gICAgICAgIHJldHVybiBwdXNoKGFzc2lnbihsb2NhdGlvbkFzT2JqZWN0KHRvKSwgeyByZXBsYWNlOiB0cnVlIH0pKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGhhbmRsZVJlZGlyZWN0UmVjb3JkKHRvKSB7XHJcbiAgICAgICAgY29uc3QgbGFzdE1hdGNoZWQgPSB0by5tYXRjaGVkW3RvLm1hdGNoZWQubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgaWYgKGxhc3RNYXRjaGVkICYmIGxhc3RNYXRjaGVkLnJlZGlyZWN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgcmVkaXJlY3QgfSA9IGxhc3RNYXRjaGVkO1xyXG4gICAgICAgICAgICBsZXQgbmV3VGFyZ2V0TG9jYXRpb24gPSB0eXBlb2YgcmVkaXJlY3QgPT09ICdmdW5jdGlvbicgPyByZWRpcmVjdCh0bykgOiByZWRpcmVjdDtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdUYXJnZXRMb2NhdGlvbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIG5ld1RhcmdldExvY2F0aW9uID1cclxuICAgICAgICAgICAgICAgICAgICBuZXdUYXJnZXRMb2NhdGlvbi5pbmNsdWRlcygnPycpIHx8IG5ld1RhcmdldExvY2F0aW9uLmluY2x1ZGVzKCcjJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyAobmV3VGFyZ2V0TG9jYXRpb24gPSBsb2NhdGlvbkFzT2JqZWN0KG5ld1RhcmdldExvY2F0aW9uKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAvLyBmb3JjZSBlbXB0eSBwYXJhbXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgcGF0aDogbmV3VGFyZ2V0TG9jYXRpb24gfTtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGZvcmNlIGVtcHR5IHBhcmFtcyB3aGVuIGEgc3RyaW5nIGlzIHBhc3NlZCB0byBsZXRcclxuICAgICAgICAgICAgICAgIC8vIHRoZSByb3V0ZXIgcGFyc2UgdGhlbSBhZ2FpblxyXG4gICAgICAgICAgICAgICAgbmV3VGFyZ2V0TG9jYXRpb24ucGFyYW1zID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgISgncGF0aCcgaW4gbmV3VGFyZ2V0TG9jYXRpb24pICYmXHJcbiAgICAgICAgICAgICAgICAhKCduYW1lJyBpbiBuZXdUYXJnZXRMb2NhdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYEludmFsaWQgcmVkaXJlY3QgZm91bmQ6XFxuJHtKU09OLnN0cmluZ2lmeShuZXdUYXJnZXRMb2NhdGlvbiwgbnVsbCwgMil9XFxuIHdoZW4gbmF2aWdhdGluZyB0byBcIiR7dG8uZnVsbFBhdGh9XCIuIEEgcmVkaXJlY3QgbXVzdCBjb250YWluIGEgbmFtZSBvciBwYXRoLiBUaGlzIHdpbGwgYnJlYWsgaW4gcHJvZHVjdGlvbi5gKTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCByZWRpcmVjdCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHRvLnF1ZXJ5LFxyXG4gICAgICAgICAgICAgICAgaGFzaDogdG8uaGFzaCxcclxuICAgICAgICAgICAgICAgIC8vIGF2b2lkIHRyYW5zZmVycmluZyBwYXJhbXMgaWYgdGhlIHJlZGlyZWN0IGhhcyBhIHBhdGhcclxuICAgICAgICAgICAgICAgIHBhcmFtczogJ3BhdGgnIGluIG5ld1RhcmdldExvY2F0aW9uID8ge30gOiB0by5wYXJhbXMsXHJcbiAgICAgICAgICAgIH0sIG5ld1RhcmdldExvY2F0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBwdXNoV2l0aFJlZGlyZWN0KHRvLCByZWRpcmVjdGVkRnJvbSkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldExvY2F0aW9uID0gKHBlbmRpbmdMb2NhdGlvbiA9IHJlc29sdmUodG8pKTtcclxuICAgICAgICBjb25zdCBmcm9tID0gY3VycmVudFJvdXRlLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB0by5zdGF0ZTtcclxuICAgICAgICBjb25zdCBmb3JjZSA9IHRvLmZvcmNlO1xyXG4gICAgICAgIC8vIHRvIGNvdWxkIGJlIGEgc3RyaW5nIHdoZXJlIGByZXBsYWNlYCBpcyBhIGZ1bmN0aW9uXHJcbiAgICAgICAgY29uc3QgcmVwbGFjZSA9IHRvLnJlcGxhY2UgPT09IHRydWU7XHJcbiAgICAgICAgY29uc3Qgc2hvdWxkUmVkaXJlY3QgPSBoYW5kbGVSZWRpcmVjdFJlY29yZCh0YXJnZXRMb2NhdGlvbik7XHJcbiAgICAgICAgaWYgKHNob3VsZFJlZGlyZWN0KVxyXG4gICAgICAgICAgICByZXR1cm4gcHVzaFdpdGhSZWRpcmVjdChhc3NpZ24obG9jYXRpb25Bc09iamVjdChzaG91bGRSZWRpcmVjdCksIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlOiB0eXBlb2Ygc2hvdWxkUmVkaXJlY3QgPT09ICdvYmplY3QnXHJcbiAgICAgICAgICAgICAgICAgICAgPyBhc3NpZ24oe30sIGRhdGEsIHNob3VsZFJlZGlyZWN0LnN0YXRlKVxyXG4gICAgICAgICAgICAgICAgICAgIDogZGF0YSxcclxuICAgICAgICAgICAgICAgIGZvcmNlLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZSxcclxuICAgICAgICAgICAgfSksIFxyXG4gICAgICAgICAgICAvLyBrZWVwIG9yaWdpbmFsIHJlZGlyZWN0ZWRGcm9tIGlmIGl0IGV4aXN0c1xyXG4gICAgICAgICAgICByZWRpcmVjdGVkRnJvbSB8fCB0YXJnZXRMb2NhdGlvbik7XHJcbiAgICAgICAgLy8gaWYgaXQgd2FzIGEgcmVkaXJlY3Qgd2UgYWxyZWFkeSBjYWxsZWQgYHB1c2hXaXRoUmVkaXJlY3RgIGFib3ZlXHJcbiAgICAgICAgY29uc3QgdG9Mb2NhdGlvbiA9IHRhcmdldExvY2F0aW9uO1xyXG4gICAgICAgIHRvTG9jYXRpb24ucmVkaXJlY3RlZEZyb20gPSByZWRpcmVjdGVkRnJvbTtcclxuICAgICAgICBsZXQgZmFpbHVyZTtcclxuICAgICAgICBpZiAoIWZvcmNlICYmIGlzU2FtZVJvdXRlTG9jYXRpb24oc3RyaW5naWZ5UXVlcnkkMSwgZnJvbSwgdGFyZ2V0TG9jYXRpb24pKSB7XHJcbiAgICAgICAgICAgIGZhaWx1cmUgPSBjcmVhdGVSb3V0ZXJFcnJvcigxNiAvKiBFcnJvclR5cGVzLk5BVklHQVRJT05fRFVQTElDQVRFRCAqLywgeyB0bzogdG9Mb2NhdGlvbiwgZnJvbSB9KTtcclxuICAgICAgICAgICAgLy8gdHJpZ2dlciBzY3JvbGwgdG8gYWxsb3cgc2Nyb2xsaW5nIHRvIHRoZSBzYW1lIGFuY2hvclxyXG4gICAgICAgICAgICBoYW5kbGVTY3JvbGwoZnJvbSwgZnJvbSwgXHJcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgYSBwdXNoLCB0aGUgb25seSB3YXkgZm9yIGl0IHRvIGJlIHRyaWdnZXJlZCBmcm9tIGFcclxuICAgICAgICAgICAgLy8gaGlzdG9yeS5saXN0ZW4gaXMgd2l0aCBhIHJlZGlyZWN0LCB3aGljaCBtYWtlcyBpdCBiZWNvbWUgYSBwdXNoXHJcbiAgICAgICAgICAgIHRydWUsIFxyXG4gICAgICAgICAgICAvLyBUaGlzIGNhbm5vdCBiZSB0aGUgZmlyc3QgbmF2aWdhdGlvbiBiZWNhdXNlIHRoZSBpbml0aWFsIGxvY2F0aW9uXHJcbiAgICAgICAgICAgIC8vIGNhbm5vdCBiZSBtYW51YWxseSBuYXZpZ2F0ZWQgdG9cclxuICAgICAgICAgICAgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKGZhaWx1cmUgPyBQcm9taXNlLnJlc29sdmUoZmFpbHVyZSkgOiBuYXZpZ2F0ZSh0b0xvY2F0aW9uLCBmcm9tKSlcclxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnJvcilcclxuICAgICAgICAgICAgPyAvLyBuYXZpZ2F0aW9uIHJlZGlyZWN0cyBzdGlsbCBtYXJrIHRoZSByb3V0ZXIgYXMgcmVhZHlcclxuICAgICAgICAgICAgICAgIGlzTmF2aWdhdGlvbkZhaWx1cmUoZXJyb3IsIDIgLyogRXJyb3JUeXBlcy5OQVZJR0FUSU9OX0dVQVJEX1JFRElSRUNUICovKVxyXG4gICAgICAgICAgICAgICAgICAgID8gZXJyb3JcclxuICAgICAgICAgICAgICAgICAgICA6IG1hcmtBc1JlYWR5KGVycm9yKSAvLyBhbHNvIHJldHVybnMgdGhlIGVycm9yXHJcbiAgICAgICAgICAgIDogLy8gcmVqZWN0IGFueSB1bmtub3duIGVycm9yXHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRXJyb3IoZXJyb3IsIHRvTG9jYXRpb24sIGZyb20pKVxyXG4gICAgICAgICAgICAudGhlbigoZmFpbHVyZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZmFpbHVyZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmF2aWdhdGlvbkZhaWx1cmUoZmFpbHVyZSwgMiAvKiBFcnJvclR5cGVzLk5BVklHQVRJT05fR1VBUkRfUkVESVJFQ1QgKi8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBhcmUgcmVkaXJlY3RpbmcgdG8gdGhlIHNhbWUgbG9jYXRpb24gd2Ugd2VyZSBhbHJlYWR5IGF0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2FtZVJvdXRlTG9jYXRpb24oc3RyaW5naWZ5UXVlcnkkMSwgcmVzb2x2ZShmYWlsdXJlLnRvKSwgdG9Mb2NhdGlvbikgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHdlIGhhdmUgZG9uZSBpdCBhIGNvdXBsZSBvZiB0aW1lc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdGVkRnJvbSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBhZGRlZCBvbmx5IGluIGRldlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocmVkaXJlY3RlZEZyb20uX2NvdW50ID0gcmVkaXJlY3RlZEZyb20uX2NvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IC8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdGVkRnJvbS5fY291bnQgKyAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDEpID4gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgRGV0ZWN0ZWQgYW4gaW5maW5pdGUgcmVkaXJlY3Rpb24gaW4gYSBuYXZpZ2F0aW9uIGd1YXJkIHdoZW4gZ29pbmcgZnJvbSBcIiR7ZnJvbS5mdWxsUGF0aH1cIiB0byBcIiR7dG9Mb2NhdGlvbi5mdWxsUGF0aH1cIi4gQWJvcnRpbmcgdG8gYXZvaWQgYSBTdGFjayBPdmVyZmxvdy4gVGhpcyB3aWxsIGJyZWFrIGluIHByb2R1Y3Rpb24gaWYgbm90IGZpeGVkLmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdJbmZpbml0ZSByZWRpcmVjdCBpbiBuYXZpZ2F0aW9uIGd1YXJkJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHVzaFdpdGhSZWRpcmVjdChcclxuICAgICAgICAgICAgICAgICAgICAvLyBrZWVwIG9wdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICBhc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVzZXJ2ZSBhbiBleGlzdGluZyByZXBsYWNlbWVudCBidXQgYWxsb3cgdGhlIHJlZGlyZWN0IHRvIG92ZXJyaWRlIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgbG9jYXRpb25Bc09iamVjdChmYWlsdXJlLnRvKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogdHlwZW9mIGZhaWx1cmUudG8gPT09ICdvYmplY3QnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGFzc2lnbih7fSwgZGF0YSwgZmFpbHVyZS50by5zdGF0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSksIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHByZXNlcnZlIHRoZSBvcmlnaW5hbCByZWRpcmVjdGVkRnJvbSBpZiBhbnlcclxuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdGVkRnJvbSB8fCB0b0xvY2F0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHdlIGZhaWwgd2UgZG9uJ3QgZmluYWxpemUgdGhlIG5hdmlnYXRpb25cclxuICAgICAgICAgICAgICAgIGZhaWx1cmUgPSBmaW5hbGl6ZU5hdmlnYXRpb24odG9Mb2NhdGlvbiwgZnJvbSwgdHJ1ZSwgcmVwbGFjZSwgZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJpZ2dlckFmdGVyRWFjaCh0b0xvY2F0aW9uLCBmcm9tLCBmYWlsdXJlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciB0byByZWplY3QgYW5kIHNraXAgYWxsIG5hdmlnYXRpb24gZ3VhcmRzIGlmIGEgbmV3IG5hdmlnYXRpb24gaGFwcGVuZWRcclxuICAgICAqIEBwYXJhbSB0b1xyXG4gICAgICogQHBhcmFtIGZyb21cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY2hlY2tDYW5jZWxlZE5hdmlnYXRpb25BbmRSZWplY3QodG8sIGZyb20pIHtcclxuICAgICAgICBjb25zdCBlcnJvciA9IGNoZWNrQ2FuY2VsZWROYXZpZ2F0aW9uKHRvLCBmcm9tKTtcclxuICAgICAgICByZXR1cm4gZXJyb3IgPyBQcm9taXNlLnJlamVjdChlcnJvcikgOiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIC8vIFRPRE86IHJlZmFjdG9yIHRoZSB3aG9sZSBiZWZvcmUgZ3VhcmRzIGJ5IGludGVybmFsbHkgdXNpbmcgcm91dGVyLmJlZm9yZUVhY2hcclxuICAgIGZ1bmN0aW9uIG5hdmlnYXRlKHRvLCBmcm9tKSB7XHJcbiAgICAgICAgbGV0IGd1YXJkcztcclxuICAgICAgICBjb25zdCBbbGVhdmluZ1JlY29yZHMsIHVwZGF0aW5nUmVjb3JkcywgZW50ZXJpbmdSZWNvcmRzXSA9IGV4dHJhY3RDaGFuZ2luZ1JlY29yZHModG8sIGZyb20pO1xyXG4gICAgICAgIC8vIGFsbCBjb21wb25lbnRzIGhlcmUgaGF2ZSBiZWVuIHJlc29sdmVkIG9uY2UgYmVjYXVzZSB3ZSBhcmUgbGVhdmluZ1xyXG4gICAgICAgIGd1YXJkcyA9IGV4dHJhY3RDb21wb25lbnRzR3VhcmRzKGxlYXZpbmdSZWNvcmRzLnJldmVyc2UoKSwgJ2JlZm9yZVJvdXRlTGVhdmUnLCB0bywgZnJvbSk7XHJcbiAgICAgICAgLy8gbGVhdmluZ1JlY29yZHMgaXMgYWxyZWFkeSByZXZlcnNlZFxyXG4gICAgICAgIGZvciAoY29uc3QgcmVjb3JkIG9mIGxlYXZpbmdSZWNvcmRzKSB7XHJcbiAgICAgICAgICAgIHJlY29yZC5sZWF2ZUd1YXJkcy5mb3JFYWNoKGd1YXJkID0+IHtcclxuICAgICAgICAgICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkVG9Qcm9taXNlRm4oZ3VhcmQsIHRvLCBmcm9tKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjYW5jZWxlZE5hdmlnYXRpb25DaGVjayA9IGNoZWNrQ2FuY2VsZWROYXZpZ2F0aW9uQW5kUmVqZWN0LmJpbmQobnVsbCwgdG8sIGZyb20pO1xyXG4gICAgICAgIGd1YXJkcy5wdXNoKGNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrKTtcclxuICAgICAgICAvLyBydW4gdGhlIHF1ZXVlIG9mIHBlciByb3V0ZSBiZWZvcmVSb3V0ZUxlYXZlIGd1YXJkc1xyXG4gICAgICAgIHJldHVybiAocnVuR3VhcmRRdWV1ZShndWFyZHMpXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgZ2xvYmFsIGd1YXJkcyBiZWZvcmVFYWNoXHJcbiAgICAgICAgICAgIGd1YXJkcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGd1YXJkIG9mIGJlZm9yZUd1YXJkcy5saXN0KCkpIHtcclxuICAgICAgICAgICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkVG9Qcm9taXNlRm4oZ3VhcmQsIHRvLCBmcm9tKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3VhcmRzLnB1c2goY2FuY2VsZWROYXZpZ2F0aW9uQ2hlY2spO1xyXG4gICAgICAgICAgICByZXR1cm4gcnVuR3VhcmRRdWV1ZShndWFyZHMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgaW4gY29tcG9uZW50cyBiZWZvcmVSb3V0ZVVwZGF0ZVxyXG4gICAgICAgICAgICBndWFyZHMgPSBleHRyYWN0Q29tcG9uZW50c0d1YXJkcyh1cGRhdGluZ1JlY29yZHMsICdiZWZvcmVSb3V0ZVVwZGF0ZScsIHRvLCBmcm9tKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCByZWNvcmQgb2YgdXBkYXRpbmdSZWNvcmRzKSB7XHJcbiAgICAgICAgICAgICAgICByZWNvcmQudXBkYXRlR3VhcmRzLmZvckVhY2goZ3VhcmQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkVG9Qcm9taXNlRm4oZ3VhcmQsIHRvLCBmcm9tKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBndWFyZHMucHVzaChjYW5jZWxlZE5hdmlnYXRpb25DaGVjayk7XHJcbiAgICAgICAgICAgIC8vIHJ1biB0aGUgcXVldWUgb2YgcGVyIHJvdXRlIGJlZm9yZUVudGVyIGd1YXJkc1xyXG4gICAgICAgICAgICByZXR1cm4gcnVuR3VhcmRRdWV1ZShndWFyZHMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgdGhlIHJvdXRlIGJlZm9yZUVudGVyXHJcbiAgICAgICAgICAgIGd1YXJkcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlY29yZCBvZiB0by5tYXRjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBkbyBub3QgdHJpZ2dlciBiZWZvcmVFbnRlciBvbiByZXVzZWQgdmlld3NcclxuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQuYmVmb3JlRW50ZXIgJiYgIWZyb20ubWF0Y2hlZC5pbmNsdWRlcyhyZWNvcmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkocmVjb3JkLmJlZm9yZUVudGVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGJlZm9yZUVudGVyIG9mIHJlY29yZC5iZWZvcmVFbnRlcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd1YXJkcy5wdXNoKGd1YXJkVG9Qcm9taXNlRm4oYmVmb3JlRW50ZXIsIHRvLCBmcm9tKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBndWFyZHMucHVzaChndWFyZFRvUHJvbWlzZUZuKHJlY29yZC5iZWZvcmVFbnRlciwgdG8sIGZyb20pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3VhcmRzLnB1c2goY2FuY2VsZWROYXZpZ2F0aW9uQ2hlY2spO1xyXG4gICAgICAgICAgICAvLyBydW4gdGhlIHF1ZXVlIG9mIHBlciByb3V0ZSBiZWZvcmVFbnRlciBndWFyZHNcclxuICAgICAgICAgICAgcmV0dXJuIHJ1bkd1YXJkUXVldWUoZ3VhcmRzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIE5PVEU6IGF0IHRoaXMgcG9pbnQgdG8ubWF0Y2hlZCBpcyBub3JtYWxpemVkIGFuZCBkb2VzIG5vdCBjb250YWluIGFueSAoKSA9PiBQcm9taXNlPENvbXBvbmVudD5cclxuICAgICAgICAgICAgLy8gY2xlYXIgZXhpc3RpbmcgZW50ZXJDYWxsYmFja3MsIHRoZXNlIGFyZSBhZGRlZCBieSBleHRyYWN0Q29tcG9uZW50c0d1YXJkc1xyXG4gICAgICAgICAgICB0by5tYXRjaGVkLmZvckVhY2gocmVjb3JkID0+IChyZWNvcmQuZW50ZXJDYWxsYmFja3MgPSB7fSkpO1xyXG4gICAgICAgICAgICAvLyBjaGVjayBpbi1jb21wb25lbnQgYmVmb3JlUm91dGVFbnRlclxyXG4gICAgICAgICAgICBndWFyZHMgPSBleHRyYWN0Q29tcG9uZW50c0d1YXJkcyhlbnRlcmluZ1JlY29yZHMsICdiZWZvcmVSb3V0ZUVudGVyJywgdG8sIGZyb20pO1xyXG4gICAgICAgICAgICBndWFyZHMucHVzaChjYW5jZWxlZE5hdmlnYXRpb25DaGVjayk7XHJcbiAgICAgICAgICAgIC8vIHJ1biB0aGUgcXVldWUgb2YgcGVyIHJvdXRlIGJlZm9yZUVudGVyIGd1YXJkc1xyXG4gICAgICAgICAgICByZXR1cm4gcnVuR3VhcmRRdWV1ZShndWFyZHMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgZ2xvYmFsIGd1YXJkcyBiZWZvcmVSZXNvbHZlXHJcbiAgICAgICAgICAgIGd1YXJkcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGd1YXJkIG9mIGJlZm9yZVJlc29sdmVHdWFyZHMubGlzdCgpKSB7XHJcbiAgICAgICAgICAgICAgICBndWFyZHMucHVzaChndWFyZFRvUHJvbWlzZUZuKGd1YXJkLCB0bywgZnJvbSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGd1YXJkcy5wdXNoKGNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJ1bkd1YXJkUXVldWUoZ3VhcmRzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAvLyBjYXRjaCBhbnkgbmF2aWdhdGlvbiBjYW5jZWxlZFxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IGlzTmF2aWdhdGlvbkZhaWx1cmUoZXJyLCA4IC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9DQU5DRUxMRUQgKi8pXHJcbiAgICAgICAgICAgID8gZXJyXHJcbiAgICAgICAgICAgIDogUHJvbWlzZS5yZWplY3QoZXJyKSkpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdHJpZ2dlckFmdGVyRWFjaCh0bywgZnJvbSwgZmFpbHVyZSkge1xyXG4gICAgICAgIC8vIG5hdmlnYXRpb24gaXMgY29uZmlybWVkLCBjYWxsIGFmdGVyR3VhcmRzXHJcbiAgICAgICAgLy8gVE9ETzogd3JhcCB3aXRoIGVycm9yIGhhbmRsZXJzXHJcbiAgICAgICAgZm9yIChjb25zdCBndWFyZCBvZiBhZnRlckd1YXJkcy5saXN0KCkpXHJcbiAgICAgICAgICAgIGd1YXJkKHRvLCBmcm9tLCBmYWlsdXJlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogLSBDbGVhbnMgdXAgYW55IG5hdmlnYXRpb24gZ3VhcmRzXHJcbiAgICAgKiAtIENoYW5nZXMgdGhlIHVybCBpZiBuZWNlc3NhcnlcclxuICAgICAqIC0gQ2FsbHMgdGhlIHNjcm9sbEJlaGF2aW9yXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGZpbmFsaXplTmF2aWdhdGlvbih0b0xvY2F0aW9uLCBmcm9tLCBpc1B1c2gsIHJlcGxhY2UsIGRhdGEpIHtcclxuICAgICAgICAvLyBhIG1vcmUgcmVjZW50IG5hdmlnYXRpb24gdG9vayBwbGFjZVxyXG4gICAgICAgIGNvbnN0IGVycm9yID0gY2hlY2tDYW5jZWxlZE5hdmlnYXRpb24odG9Mb2NhdGlvbiwgZnJvbSk7XHJcbiAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgLy8gb25seSBjb25zaWRlciBhcyBwdXNoIGlmIGl0J3Mgbm90IHRoZSBmaXJzdCBuYXZpZ2F0aW9uXHJcbiAgICAgICAgY29uc3QgaXNGaXJzdE5hdmlnYXRpb24gPSBmcm9tID09PSBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gIWlzQnJvd3NlciA/IHt9IDogaGlzdG9yeS5zdGF0ZTtcclxuICAgICAgICAvLyBjaGFuZ2UgVVJMIG9ubHkgaWYgdGhlIHVzZXIgZGlkIGEgcHVzaC9yZXBsYWNlIGFuZCBpZiBpdCdzIG5vdCB0aGUgaW5pdGlhbCBuYXZpZ2F0aW9uIGJlY2F1c2VcclxuICAgICAgICAvLyBpdCdzIGp1c3QgcmVmbGVjdGluZyB0aGUgdXJsXHJcbiAgICAgICAgaWYgKGlzUHVzaCkge1xyXG4gICAgICAgICAgICAvLyBvbiB0aGUgaW5pdGlhbCBuYXZpZ2F0aW9uLCB3ZSB3YW50IHRvIHJldXNlIHRoZSBzY3JvbGwgcG9zaXRpb24gZnJvbVxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5IHN0YXRlIGlmIGl0IGV4aXN0c1xyXG4gICAgICAgICAgICBpZiAocmVwbGFjZSB8fCBpc0ZpcnN0TmF2aWdhdGlvbilcclxuICAgICAgICAgICAgICAgIHJvdXRlckhpc3RvcnkucmVwbGFjZSh0b0xvY2F0aW9uLmZ1bGxQYXRoLCBhc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbDogaXNGaXJzdE5hdmlnYXRpb24gJiYgc3RhdGUgJiYgc3RhdGUuc2Nyb2xsLFxyXG4gICAgICAgICAgICAgICAgfSwgZGF0YSkpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByb3V0ZXJIaXN0b3J5LnB1c2godG9Mb2NhdGlvbi5mdWxsUGF0aCwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFjY2VwdCBjdXJyZW50IG5hdmlnYXRpb25cclxuICAgICAgICBjdXJyZW50Um91dGUudmFsdWUgPSB0b0xvY2F0aW9uO1xyXG4gICAgICAgIGhhbmRsZVNjcm9sbCh0b0xvY2F0aW9uLCBmcm9tLCBpc1B1c2gsIGlzRmlyc3ROYXZpZ2F0aW9uKTtcclxuICAgICAgICBtYXJrQXNSZWFkeSgpO1xyXG4gICAgfVxyXG4gICAgbGV0IHJlbW92ZUhpc3RvcnlMaXN0ZW5lcjtcclxuICAgIC8vIGF0dGFjaCBsaXN0ZW5lciB0byBoaXN0b3J5IHRvIHRyaWdnZXIgbmF2aWdhdGlvbnNcclxuICAgIGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzKCkge1xyXG4gICAgICAgIC8vIGF2b2lkIHNldHRpbmcgdXAgbGlzdGVuZXJzIHR3aWNlIGR1ZSB0byBhbiBpbnZhbGlkIGZpcnN0IG5hdmlnYXRpb25cclxuICAgICAgICBpZiAocmVtb3ZlSGlzdG9yeUxpc3RlbmVyKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgcmVtb3ZlSGlzdG9yeUxpc3RlbmVyID0gcm91dGVySGlzdG9yeS5saXN0ZW4oKHRvLCBfZnJvbSwgaW5mbykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXJvdXRlci5saXN0ZW5pbmcpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIC8vIGNhbm5vdCBiZSBhIHJlZGlyZWN0IHJvdXRlIGJlY2F1c2UgaXQgd2FzIGluIGhpc3RvcnlcclxuICAgICAgICAgICAgY29uc3QgdG9Mb2NhdGlvbiA9IHJlc29sdmUodG8pO1xyXG4gICAgICAgICAgICAvLyBkdWUgdG8gZHluYW1pYyByb3V0aW5nLCBhbmQgdG8gaGFzaCBoaXN0b3J5IHdpdGggbWFudWFsIG5hdmlnYXRpb25cclxuICAgICAgICAgICAgLy8gKG1hbnVhbGx5IGNoYW5naW5nIHRoZSB1cmwgb3IgY2FsbGluZyBoaXN0b3J5Lmhhc2ggPSAnIy9zb21ld2hlcmUnKSxcclxuICAgICAgICAgICAgLy8gdGhlcmUgY291bGQgYmUgYSByZWRpcmVjdCByZWNvcmQgaW4gaGlzdG9yeVxyXG4gICAgICAgICAgICBjb25zdCBzaG91bGRSZWRpcmVjdCA9IGhhbmRsZVJlZGlyZWN0UmVjb3JkKHRvTG9jYXRpb24pO1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkUmVkaXJlY3QpIHtcclxuICAgICAgICAgICAgICAgIHB1c2hXaXRoUmVkaXJlY3QoYXNzaWduKHNob3VsZFJlZGlyZWN0LCB7IHJlcGxhY2U6IHRydWUgfSksIHRvTG9jYXRpb24pLmNhdGNoKG5vb3ApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBlbmRpbmdMb2NhdGlvbiA9IHRvTG9jYXRpb247XHJcbiAgICAgICAgICAgIGNvbnN0IGZyb20gPSBjdXJyZW50Um91dGUudmFsdWU7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IHNob3VsZCBiZSBtb3ZlZCB0byB3ZWIgaGlzdG9yeT9cclxuICAgICAgICAgICAgaWYgKGlzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICAgICAgc2F2ZVNjcm9sbFBvc2l0aW9uKGdldFNjcm9sbEtleShmcm9tLmZ1bGxQYXRoLCBpbmZvLmRlbHRhKSwgY29tcHV0ZVNjcm9sbFBvc2l0aW9uKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5hdmlnYXRlKHRvTG9jYXRpb24sIGZyb20pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnJvciwgNCAvKiBFcnJvclR5cGVzLk5BVklHQVRJT05fQUJPUlRFRCAqLyB8IDggLyogRXJyb3JUeXBlcy5OQVZJR0FUSU9OX0NBTkNFTExFRCAqLykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnJvciwgMiAvKiBFcnJvclR5cGVzLk5BVklHQVRJT05fR1VBUkRfUkVESVJFQ1QgKi8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSGVyZSB3ZSBjb3VsZCBjYWxsIGlmIChpbmZvLmRlbHRhKSByb3V0ZXJIaXN0b3J5LmdvKC1pbmZvLmRlbHRhLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGZhbHNlKSBidXQgdGhpcyBpcyBidWcgcHJvbmUgYXMgd2UgaGF2ZSBubyB3YXkgdG8gd2FpdCB0aGVcclxuICAgICAgICAgICAgICAgICAgICAvLyBuYXZpZ2F0aW9uIHRvIGJlIGZpbmlzaGVkIGJlZm9yZSBjYWxsaW5nIHB1c2hXaXRoUmVkaXJlY3QuIFVzaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYSBzZXRUaW1lb3V0IG9mIDE2bXMgc2VlbXMgdG8gd29yayBidXQgdGhlcmUgaXMgbm8gZ3VhcmFudGVlIGZvclxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0IHRvIHdvcmsgb24gZXZlcnkgYnJvd3Nlci4gU28gaW5zdGVhZCB3ZSBkbyBub3QgcmVzdG9yZSB0aGVcclxuICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5IGVudHJ5IGFuZCB0cmlnZ2VyIGEgbmV3IG5hdmlnYXRpb24gYXMgcmVxdWVzdGVkIGJ5IHRoZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5hdmlnYXRpb24gZ3VhcmQuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGVycm9yIGlzIGFscmVhZHkgaGFuZGxlZCBieSByb3V0ZXIucHVzaCB3ZSBqdXN0IHdhbnQgdG8gYXZvaWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBsb2dnaW5nIHRoZSBlcnJvclxyXG4gICAgICAgICAgICAgICAgICAgIHB1c2hXaXRoUmVkaXJlY3QoZXJyb3IudG8sIHRvTG9jYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAvLyBhdm9pZCBhbiB1bmNhdWdodCByZWplY3Rpb24sIGxldCBwdXNoIGNhbGwgdHJpZ2dlckVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmYWlsdXJlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFudWFsIGNoYW5nZSBpbiBoYXNoIGhpc3RvcnkgIzkxNiBlbmRpbmcgdXAgaW4gdGhlIFVSTCBub3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hhbmdpbmcsIGJ1dCBpdCB3YXMgY2hhbmdlZCBieSB0aGUgbWFudWFsIHVybCBjaGFuZ2UsIHNvIHdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gbWFudWFsbHkgY2hhbmdlIGl0IG91cnNlbHZlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYXZpZ2F0aW9uRmFpbHVyZShmYWlsdXJlLCA0IC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9BQk9SVEVEICovIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE2IC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9EVVBMSUNBVEVEICovKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWluZm8uZGVsdGEgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8udHlwZSA9PT0gTmF2aWdhdGlvblR5cGUucG9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJIaXN0b3J5LmdvKC0xLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2gobm9vcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXZvaWQgdGhlIHRoZW4gYnJhbmNoXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBkbyBub3QgcmVzdG9yZSBoaXN0b3J5IG9uIHVua25vd24gZGlyZWN0aW9uXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5mby5kZWx0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvdXRlckhpc3RvcnkuZ28oLWluZm8uZGVsdGEsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHVucmVjb2duaXplZCBlcnJvciwgdHJhbnNmZXIgdG8gdGhlIGdsb2JhbCBoYW5kbGVyXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJpZ2dlckVycm9yKGVycm9yLCB0b0xvY2F0aW9uLCBmcm9tKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChmYWlsdXJlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBmYWlsdXJlID1cclxuICAgICAgICAgICAgICAgICAgICBmYWlsdXJlIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsaXplTmF2aWdhdGlvbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWZ0ZXIgbmF2aWdhdGlvbiwgYWxsIG1hdGNoZWQgY29tcG9uZW50cyBhcmUgcmVzb2x2ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9Mb2NhdGlvbiwgZnJvbSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgLy8gcmV2ZXJ0IHRoZSBuYXZpZ2F0aW9uXHJcbiAgICAgICAgICAgICAgICBpZiAoZmFpbHVyZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmRlbHRhICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgbmV3IG5hdmlnYXRpb24gaGFzIGJlZW4gdHJpZ2dlcmVkLCBzbyB3ZSBkbyBub3Qgd2FudCB0byByZXZlcnQsIHRoYXQgd2lsbCBjaGFuZ2UgdGhlIGN1cnJlbnQgaGlzdG9yeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbnRyeSB3aGlsZSBhIGRpZmZlcmVudCByb3V0ZSBpcyBkaXNwbGF5ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgIWlzTmF2aWdhdGlvbkZhaWx1cmUoZmFpbHVyZSwgOCAvKiBFcnJvclR5cGVzLk5BVklHQVRJT05fQ0FOQ0VMTEVEICovKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXJIaXN0b3J5LmdvKC1pbmZvLmRlbHRhLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGluZm8udHlwZSA9PT0gTmF2aWdhdGlvblR5cGUucG9wICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTmF2aWdhdGlvbkZhaWx1cmUoZmFpbHVyZSwgNCAvKiBFcnJvclR5cGVzLk5BVklHQVRJT05fQUJPUlRFRCAqLyB8IDE2IC8qIEVycm9yVHlwZXMuTkFWSUdBVElPTl9EVVBMSUNBVEVEICovKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYW51YWwgY2hhbmdlIGluIGhhc2ggaGlzdG9yeSAjOTE2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgbGlrZSBhIHB1c2ggYnV0IGxhY2tzIHRoZSBpbmZvcm1hdGlvbiBvZiB0aGUgZGlyZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckhpc3RvcnkuZ28oLTEsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyQWZ0ZXJFYWNoKHRvTG9jYXRpb24sIGZyb20sIGZhaWx1cmUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKG5vb3ApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gSW5pdGlhbGl6YXRpb24gYW5kIEVycm9yc1xyXG4gICAgbGV0IHJlYWR5SGFuZGxlcnMgPSB1c2VDYWxsYmFja3MoKTtcclxuICAgIGxldCBlcnJvckhhbmRsZXJzID0gdXNlQ2FsbGJhY2tzKCk7XHJcbiAgICBsZXQgcmVhZHk7XHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXIgZXJyb3JIYW5kbGVycyBhZGRlZCB2aWEgb25FcnJvciBhbmQgdGhyb3dzIHRoZSBlcnJvciBhcyB3ZWxsXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGVycm9yIC0gZXJyb3IgdG8gdGhyb3dcclxuICAgICAqIEBwYXJhbSB0byAtIGxvY2F0aW9uIHdlIHdlcmUgbmF2aWdhdGluZyB0byB3aGVuIHRoZSBlcnJvciBoYXBwZW5lZFxyXG4gICAgICogQHBhcmFtIGZyb20gLSBsb2NhdGlvbiB3ZSB3ZXJlIG5hdmlnYXRpbmcgZnJvbSB3aGVuIHRoZSBlcnJvciBoYXBwZW5lZFxyXG4gICAgICogQHJldHVybnMgdGhlIGVycm9yIGFzIGEgcmVqZWN0ZWQgcHJvbWlzZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiB0cmlnZ2VyRXJyb3IoZXJyb3IsIHRvLCBmcm9tKSB7XHJcbiAgICAgICAgbWFya0FzUmVhZHkoZXJyb3IpO1xyXG4gICAgICAgIGNvbnN0IGxpc3QgPSBlcnJvckhhbmRsZXJzLmxpc3QoKTtcclxuICAgICAgICBpZiAobGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgbGlzdC5mb3JFYWNoKGhhbmRsZXIgPT4gaGFuZGxlcihlcnJvciwgdG8sIGZyb20pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJ3VuY2F1Z2h0IGVycm9yIGR1cmluZyByb3V0ZSBuYXZpZ2F0aW9uOicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaXNSZWFkeSgpIHtcclxuICAgICAgICBpZiAocmVhZHkgJiYgY3VycmVudFJvdXRlLnZhbHVlICE9PSBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEKVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgcmVhZHlIYW5kbGVycy5hZGQoW3Jlc29sdmUsIHJlamVjdF0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gbWFya0FzUmVhZHkoZXJyKSB7XHJcbiAgICAgICAgaWYgKCFyZWFkeSkge1xyXG4gICAgICAgICAgICAvLyBzdGlsbCBub3QgcmVhZHkgaWYgYW4gZXJyb3IgaGFwcGVuZWRcclxuICAgICAgICAgICAgcmVhZHkgPSAhZXJyO1xyXG4gICAgICAgICAgICBzZXR1cExpc3RlbmVycygpO1xyXG4gICAgICAgICAgICByZWFkeUhhbmRsZXJzXHJcbiAgICAgICAgICAgICAgICAubGlzdCgpXHJcbiAgICAgICAgICAgICAgICAuZm9yRWFjaCgoW3Jlc29sdmUsIHJlamVjdF0pID0+IChlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKSkpO1xyXG4gICAgICAgICAgICByZWFkeUhhbmRsZXJzLnJlc2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlcnI7XHJcbiAgICB9XHJcbiAgICAvLyBTY3JvbGwgYmVoYXZpb3JcclxuICAgIGZ1bmN0aW9uIGhhbmRsZVNjcm9sbCh0bywgZnJvbSwgaXNQdXNoLCBpc0ZpcnN0TmF2aWdhdGlvbikge1xyXG4gICAgICAgIGNvbnN0IHsgc2Nyb2xsQmVoYXZpb3IgfSA9IG9wdGlvbnM7XHJcbiAgICAgICAgaWYgKCFpc0Jyb3dzZXIgfHwgIXNjcm9sbEJlaGF2aW9yKVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgY29uc3Qgc2Nyb2xsUG9zaXRpb24gPSAoIWlzUHVzaCAmJiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGdldFNjcm9sbEtleSh0by5mdWxsUGF0aCwgMCkpKSB8fFxyXG4gICAgICAgICAgICAoKGlzRmlyc3ROYXZpZ2F0aW9uIHx8ICFpc1B1c2gpICYmXHJcbiAgICAgICAgICAgICAgICBoaXN0b3J5LnN0YXRlICYmXHJcbiAgICAgICAgICAgICAgICBoaXN0b3J5LnN0YXRlLnNjcm9sbCkgfHxcclxuICAgICAgICAgICAgbnVsbDtcclxuICAgICAgICByZXR1cm4gbmV4dFRpY2soKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiBzY3JvbGxCZWhhdmlvcih0bywgZnJvbSwgc2Nyb2xsUG9zaXRpb24pKVxyXG4gICAgICAgICAgICAudGhlbihwb3NpdGlvbiA9PiBwb3NpdGlvbiAmJiBzY3JvbGxUb1Bvc2l0aW9uKHBvc2l0aW9uKSlcclxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB0cmlnZ2VyRXJyb3IoZXJyLCB0bywgZnJvbSkpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZ28gPSAoZGVsdGEpID0+IHJvdXRlckhpc3RvcnkuZ28oZGVsdGEpO1xyXG4gICAgbGV0IHN0YXJ0ZWQ7XHJcbiAgICBjb25zdCBpbnN0YWxsZWRBcHBzID0gbmV3IFNldCgpO1xyXG4gICAgY29uc3Qgcm91dGVyID0ge1xyXG4gICAgICAgIGN1cnJlbnRSb3V0ZSxcclxuICAgICAgICBsaXN0ZW5pbmc6IHRydWUsXHJcbiAgICAgICAgYWRkUm91dGUsXHJcbiAgICAgICAgcmVtb3ZlUm91dGUsXHJcbiAgICAgICAgaGFzUm91dGUsXHJcbiAgICAgICAgZ2V0Um91dGVzLFxyXG4gICAgICAgIHJlc29sdmUsXHJcbiAgICAgICAgb3B0aW9ucyxcclxuICAgICAgICBwdXNoLFxyXG4gICAgICAgIHJlcGxhY2UsXHJcbiAgICAgICAgZ28sXHJcbiAgICAgICAgYmFjazogKCkgPT4gZ28oLTEpLFxyXG4gICAgICAgIGZvcndhcmQ6ICgpID0+IGdvKDEpLFxyXG4gICAgICAgIGJlZm9yZUVhY2g6IGJlZm9yZUd1YXJkcy5hZGQsXHJcbiAgICAgICAgYmVmb3JlUmVzb2x2ZTogYmVmb3JlUmVzb2x2ZUd1YXJkcy5hZGQsXHJcbiAgICAgICAgYWZ0ZXJFYWNoOiBhZnRlckd1YXJkcy5hZGQsXHJcbiAgICAgICAgb25FcnJvcjogZXJyb3JIYW5kbGVycy5hZGQsXHJcbiAgICAgICAgaXNSZWFkeSxcclxuICAgICAgICBpbnN0YWxsKGFwcCkge1xyXG4gICAgICAgICAgICBjb25zdCByb3V0ZXIgPSB0aGlzO1xyXG4gICAgICAgICAgICBhcHAuY29tcG9uZW50KCdSb3V0ZXJMaW5rJywgUm91dGVyTGluayk7XHJcbiAgICAgICAgICAgIGFwcC5jb21wb25lbnQoJ1JvdXRlclZpZXcnLCBSb3V0ZXJWaWV3KTtcclxuICAgICAgICAgICAgYXBwLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRyb3V0ZXIgPSByb3V0ZXI7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMsICckcm91dGUnLCB7XHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiB1bnJlZihjdXJyZW50Um91dGUpLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gdGhpcyBpbml0aWFsIG5hdmlnYXRpb24gaXMgb25seSBuZWNlc3Nhcnkgb24gY2xpZW50LCBvbiBzZXJ2ZXIgaXQgZG9lc24ndFxyXG4gICAgICAgICAgICAvLyBtYWtlIHNlbnNlIGJlY2F1c2UgaXQgd2lsbCBjcmVhdGUgYW4gZXh0cmEgdW5uZWNlc3NhcnkgbmF2aWdhdGlvbiBhbmQgY291bGRcclxuICAgICAgICAgICAgLy8gbGVhZCB0byBwcm9ibGVtc1xyXG4gICAgICAgICAgICBpZiAoaXNCcm93c2VyICYmXHJcbiAgICAgICAgICAgICAgICAvLyB1c2VkIGZvciB0aGUgaW5pdGlhbCBuYXZpZ2F0aW9uIGNsaWVudCBzaWRlIHRvIGF2b2lkIHB1c2hpbmdcclxuICAgICAgICAgICAgICAgIC8vIG11bHRpcGxlIHRpbWVzIHdoZW4gdGhlIHJvdXRlciBpcyB1c2VkIGluIG11bHRpcGxlIGFwcHNcclxuICAgICAgICAgICAgICAgICFzdGFydGVkICYmXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Um91dGUudmFsdWUgPT09IFNUQVJUX0xPQ0FUSU9OX05PUk1BTElaRUQpIHtcclxuICAgICAgICAgICAgICAgIC8vIHNlZSBhYm92ZVxyXG4gICAgICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBwdXNoKHJvdXRlckhpc3RvcnkubG9jYXRpb24pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybignVW5leHBlY3RlZCBlcnJvciB3aGVuIHN0YXJ0aW5nIHRoZSByb3V0ZXI6JywgZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHJlYWN0aXZlUm91dGUgPSB7fTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRCkge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogdGhlIGtleSBtYXRjaGVzXHJcbiAgICAgICAgICAgICAgICByZWFjdGl2ZVJvdXRlW2tleV0gPSBjb21wdXRlZCgoKSA9PiBjdXJyZW50Um91dGUudmFsdWVba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXBwLnByb3ZpZGUocm91dGVyS2V5LCByb3V0ZXIpO1xyXG4gICAgICAgICAgICBhcHAucHJvdmlkZShyb3V0ZUxvY2F0aW9uS2V5LCByZWFjdGl2ZShyZWFjdGl2ZVJvdXRlKSk7XHJcbiAgICAgICAgICAgIGFwcC5wcm92aWRlKHJvdXRlclZpZXdMb2NhdGlvbktleSwgY3VycmVudFJvdXRlKTtcclxuICAgICAgICAgICAgY29uc3QgdW5tb3VudEFwcCA9IGFwcC51bm1vdW50O1xyXG4gICAgICAgICAgICBpbnN0YWxsZWRBcHBzLmFkZChhcHApO1xyXG4gICAgICAgICAgICBhcHAudW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbGxlZEFwcHMuZGVsZXRlKGFwcCk7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgcm91dGVyIGlzIG5vdCBhdHRhY2hlZCB0byBhbiBhcHAgYW55bW9yZVxyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbGxlZEFwcHMuc2l6ZSA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbnZhbGlkYXRlIHRoZSBjdXJyZW50IG5hdmlnYXRpb25cclxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nTG9jYXRpb24gPSBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUhpc3RvcnlMaXN0ZW5lciAmJiByZW1vdmVIaXN0b3J5TGlzdGVuZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVIaXN0b3J5TGlzdGVuZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSb3V0ZS52YWx1ZSA9IFNUQVJUX0xPQ0FUSU9OX05PUk1BTElaRUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlYWR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50QXBwKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vIFRPRE86IHRoaXMgcHJvYmFibHkgbmVlZHMgdG8gYmUgdXBkYXRlZCBzbyBpdCBjYW4gYmUgdXNlZCBieSB2dWUtdGVybXVpXHJcbiAgICAgICAgICAgIGlmICgoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykgJiYgaXNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBhZGREZXZ0b29scyhhcHAsIHJvdXRlciwgbWF0Y2hlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfTtcclxuICAgIHJldHVybiByb3V0ZXI7XHJcbn1cclxuZnVuY3Rpb24gcnVuR3VhcmRRdWV1ZShndWFyZHMpIHtcclxuICAgIHJldHVybiBndWFyZHMucmVkdWNlKChwcm9taXNlLCBndWFyZCkgPT4gcHJvbWlzZS50aGVuKCgpID0+IGd1YXJkKCkpLCBQcm9taXNlLnJlc29sdmUoKSk7XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdENoYW5naW5nUmVjb3Jkcyh0bywgZnJvbSkge1xyXG4gICAgY29uc3QgbGVhdmluZ1JlY29yZHMgPSBbXTtcclxuICAgIGNvbnN0IHVwZGF0aW5nUmVjb3JkcyA9IFtdO1xyXG4gICAgY29uc3QgZW50ZXJpbmdSZWNvcmRzID0gW107XHJcbiAgICBjb25zdCBsZW4gPSBNYXRoLm1heChmcm9tLm1hdGNoZWQubGVuZ3RoLCB0by5tYXRjaGVkLmxlbmd0aCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgcmVjb3JkRnJvbSA9IGZyb20ubWF0Y2hlZFtpXTtcclxuICAgICAgICBpZiAocmVjb3JkRnJvbSkge1xyXG4gICAgICAgICAgICBpZiAodG8ubWF0Y2hlZC5maW5kKHJlY29yZCA9PiBpc1NhbWVSb3V0ZVJlY29yZChyZWNvcmQsIHJlY29yZEZyb20pKSlcclxuICAgICAgICAgICAgICAgIHVwZGF0aW5nUmVjb3Jkcy5wdXNoKHJlY29yZEZyb20pO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBsZWF2aW5nUmVjb3Jkcy5wdXNoKHJlY29yZEZyb20pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZWNvcmRUbyA9IHRvLm1hdGNoZWRbaV07XHJcbiAgICAgICAgaWYgKHJlY29yZFRvKSB7XHJcbiAgICAgICAgICAgIC8vIHRoZSB0eXBlIGRvZXNuJ3QgbWF0dGVyIGJlY2F1c2Ugd2UgYXJlIGNvbXBhcmluZyBwZXIgcmVmZXJlbmNlXHJcbiAgICAgICAgICAgIGlmICghZnJvbS5tYXRjaGVkLmZpbmQocmVjb3JkID0+IGlzU2FtZVJvdXRlUmVjb3JkKHJlY29yZCwgcmVjb3JkVG8pKSkge1xyXG4gICAgICAgICAgICAgICAgZW50ZXJpbmdSZWNvcmRzLnB1c2gocmVjb3JkVG8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtsZWF2aW5nUmVjb3JkcywgdXBkYXRpbmdSZWNvcmRzLCBlbnRlcmluZ1JlY29yZHNdO1xyXG59XG5cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSByb3V0ZXIgaW5zdGFuY2UuIEVxdWl2YWxlbnQgdG8gdXNpbmcgYCRyb3V0ZXJgIGluc2lkZVxyXG4gKiB0ZW1wbGF0ZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiB1c2VSb3V0ZXIoKSB7XHJcbiAgICByZXR1cm4gaW5qZWN0KHJvdXRlcktleSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgcm91dGUgbG9jYXRpb24uIEVxdWl2YWxlbnQgdG8gdXNpbmcgYCRyb3V0ZWAgaW5zaWRlXHJcbiAqIHRlbXBsYXRlcy5cclxuICovXHJcbmZ1bmN0aW9uIHVzZVJvdXRlKCkge1xyXG4gICAgcmV0dXJuIGluamVjdChyb3V0ZUxvY2F0aW9uS2V5KTtcclxufVxuXG5leHBvcnQgeyBOYXZpZ2F0aW9uRmFpbHVyZVR5cGUsIFJvdXRlckxpbmssIFJvdXRlclZpZXcsIFNUQVJUX0xPQ0FUSU9OX05PUk1BTElaRUQgYXMgU1RBUlRfTE9DQVRJT04sIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVJvdXRlciwgY3JlYXRlUm91dGVyTWF0Y2hlciwgY3JlYXRlV2ViSGFzaEhpc3RvcnksIGNyZWF0ZVdlYkhpc3RvcnksIGlzTmF2aWdhdGlvbkZhaWx1cmUsIGxvYWRSb3V0ZUxvY2F0aW9uLCBtYXRjaGVkUm91dGVLZXksIG9uQmVmb3JlUm91dGVMZWF2ZSwgb25CZWZvcmVSb3V0ZVVwZGF0ZSwgcGFyc2VRdWVyeSwgcm91dGVMb2NhdGlvbktleSwgcm91dGVyS2V5LCByb3V0ZXJWaWV3TG9jYXRpb25LZXksIHN0cmluZ2lmeVF1ZXJ5LCB1c2VMaW5rLCB1c2VSb3V0ZSwgdXNlUm91dGVyLCB2aWV3RGVwdGhLZXkgfTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzLlxuICovXG5pbXBvcnQgeyBjcmVhdGVBcHAgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBjcmVhdGVIb29rcyB9IGZyb20gXCJAd29yZHByZXNzL2hvb2tzXCI7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzLlxuICovXG5pbXBvcnQgJy4vaTE4bic7XG5pbXBvcnQgaTE4bk1peGluIGZyb20gXCIuL21peGlucy9pMThuXCI7XG5cbmltcG9ydCBBcHAgZnJvbSBcIi4vQXBwLnZ1ZVwiO1xuaW1wb3J0IHJvdXRlciBmcm9tIFwiLi9yb3V0ZXJcIjtcbmltcG9ydCBcIi4vc3R5bGVzL21haW4uc2Nzc1wiO1xuaW1wb3J0ICcuL3V0aWxzL21lbnUtZml4JztcbmltcG9ydCBzdG9yZSBmcm9tIFwiLi9zdG9yZVwiO1xuXG4vLyBDcmVhdGUgdnVlIGFwcCBpbnN0YW5jZS5cbmNvbnN0IGFwcCA9IGNyZWF0ZUFwcCh7XG4gICAgZXh0ZW5kczogQXBwLFxuICAgIG1peGluczogW2kxOG5NaXhpbl1cbn0pO1xuXG5hcHAuY29uZmlnLmRldnRvb2xzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIjtcblxuYXBwLnVzZShyb3V0ZXIpXG4gICAgLnVzZShzdG9yZSk7XG5cbi8vIEZpbmFsbHkgTW91bnQgb24gdGhlICN3cC1lbWFpbGVyIGRpdi5cbmFwcC5tb3VudChcIiN3cC1lbWFpbGVyXCIpO1xuXG4vLyBBZGQgYWN0aW9uL2ZpbHRlciBob29rcyBpbmplY3RhYmxlXG53aW5kb3cud3BFbWFpbGVySG9va3MgPSBjcmVhdGVIb29rcygpO1xud3BFbWFpbGVySG9va3MuYWRkRmlsdGVyID0gKGhvb2tOYW1lLCBuYW1lc3BhY2UsIGNvbXBvbmVudCwgcHJpb3JpdHkgPSAxMCkgPT4ge1xuICAgIHdwRW1haWxlckhvb2tzLmhvb2tzLmFkZEZpbHRlcihcbiAgICAgICAgaG9va05hbWUsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgY29tcG9uZW50cyA9PiB7XG4gICAgICAgICAgICBjb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAgICAgICAgIHJldHVybiBjb21wb25lbnRzO1xuICAgICAgICB9LFxuICAgICAgICBwcmlvcml0eVxuICAgICk7XG59O1xuIl0sIm5hbWVzIjpbImNvbXBpbGUiLCJleHByZXNzaW9uIiwidGVybXMiLCJ2YXJpYWJsZXMiLCJPUEVSQVRPUlMiLCJhIiwiYiIsImMiLCJldmFsdWF0ZSIsInBvc3RmaXgiLCJpIiwiaiIsImFyZ3MiLCJnZXRPcGVyYXRvclJlc3VsdCIsInRlcm0iLCJ2YWx1ZSIsInN0YWNrIiwibGVuZ3RoIiwiQXJyYXkiLCJwb3AiLCJhcHBseSIsImVhcmx5UmV0dXJuIiwiaGFzT3duUHJvcGVydHkiLCJwdXNoIiwicGx1cmFsRm9ybXMiLCJuIiwiUFJFQ0VERU5DRSIsIk9QRU5FUlMiLCJURVJNSU5BVE9SUyIsIlBBVFRFUk4iLCJtYXRjaCIsIm9wZXJhdG9yIiwiZWxlbWVudCIsInN1YnN0ciIsImluZGV4IiwidHJpbSIsImluZGV4T2YiLCJjb25jYXQiLCJyZXZlcnNlIiwiSE9PS19TRVRVUCIsIkhPT0tfUExVR0lOX1NFVFRJTkdTX1NFVCIsImdldERldnRvb2xzR2xvYmFsSG9vayIsImdldFRhcmdldCIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJuYXZpZ2F0b3IiLCJ3aW5kb3ciLCJnIiwiaXNQcm94eUF2YWlsYWJsZSIsIlByb3h5Iiwic2V0dXBEZXZ0b29sc1BsdWdpbiIsInBsdWdpbkRlc2NyaXB0b3IiLCJzZXR1cEZuIiwiZGVzY3JpcHRvciIsInRhcmdldCIsImhvb2siLCJlbmFibGVQcm94eSIsImVuYWJsZUVhcmx5UHJveHkiLCJfX1ZVRV9ERVZUT09MU19QTFVHSU5fQVBJX0FWQUlMQUJMRV9fIiwicHJveHkiLCJBcGlQcm94eSIsIl9fVlVFX0RFVlRPT0xTX1BMVUdJTlNfXyIsInByb3hpZWRUYXJnZXQiLCJlbWl0IiwiY29uc3RydWN0b3IiLCJwbHVnaW4iLCJ0aGlzIiwidGFyZ2V0UXVldWUiLCJvblF1ZXVlIiwiZGVmYXVsdFNldHRpbmdzIiwic2V0dGluZ3MiLCJpZCIsIml0ZW0iLCJkZWZhdWx0VmFsdWUiLCJsb2NhbFNldHRpbmdzU2F2ZUlkIiwiY3VycmVudFNldHRpbmdzIiwiT2JqZWN0IiwiYXNzaWduIiwicmF3IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImRhdGEiLCJKU09OIiwicGFyc2UiLCJlIiwiZmFsbGJhY2tzIiwiZ2V0U2V0dGluZ3MiLCJzZXRTZXR0aW5ncyIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJub3ciLCJvbiIsInBsdWdpbklkIiwicHJveGllZE9uIiwiZ2V0IiwiX3RhcmdldCIsInByb3AiLCJtZXRob2QiLCJrZXlzIiwiaW5jbHVkZXMiLCJyZXNvbHZlIiwiUHJvbWlzZSIsImFzeW5jIiwic3VwcG9ydGVkIiwicGVyZiIsImlzUGVyZm9ybWFuY2VTdXBwb3J0ZWQiLCJfYSIsInVuZGVmaW5lZCIsInBlcmZvcm1hbmNlIiwicGVyZl9ob29rcyIsIkRhdGUiLCJ3YXJuIiwibXNnIiwiY29uc29sZSIsImFjdGl2ZUVmZmVjdFNjb3BlIiwiRWZmZWN0U2NvcGUiLCJkZXRhY2hlZCIsImFjdGl2ZSIsImVmZmVjdHMiLCJjbGVhbnVwcyIsInBhcmVudCIsInNjb3BlcyIsInJ1biIsImZuIiwiY3VycmVudEVmZmVjdFNjb3BlIiwib2ZmIiwic3RvcCIsImZyb21QYXJlbnQiLCJsIiwibGFzdCIsImVmZmVjdFNjb3BlIiwicmVjb3JkRWZmZWN0U2NvcGUiLCJlZmZlY3QiLCJzY29wZSIsImdldEN1cnJlbnRTY29wZSIsIm9uU2NvcGVEaXNwb3NlIiwiY3JlYXRlRGVwIiwiZGVwIiwiU2V0IiwidyIsIndhc1RyYWNrZWQiLCJ0cmFja09wQml0IiwibmV3VHJhY2tlZCIsInRhcmdldE1hcCIsIldlYWtNYXAiLCJhY3RpdmVFZmZlY3QiLCJlZmZlY3RUcmFja0RlcHRoIiwiSVRFUkFURV9LRVkiLCJTeW1ib2wiLCJNQVBfS0VZX0lURVJBVEVfS0VZIiwiUmVhY3RpdmVFZmZlY3QiLCJzY2hlZHVsZXIiLCJkZXBzIiwibGFzdFNob3VsZFRyYWNrIiwic2hvdWxkVHJhY2siLCJpbml0RGVwTWFya2VycyIsImNsZWFudXBFZmZlY3QiLCJwdHIiLCJkZWxldGUiLCJmaW5hbGl6ZURlcE1hcmtlcnMiLCJkZWZlclN0b3AiLCJvblN0b3AiLCJvcHRpb25zIiwiX2VmZmVjdCIsImV4dGVuZCIsImxhenkiLCJydW5uZXIiLCJiaW5kIiwidHJhY2tTdGFjayIsInBhdXNlVHJhY2tpbmciLCJlbmFibGVUcmFja2luZyIsInJlc2V0VHJhY2tpbmciLCJ0cmFjayIsInR5cGUiLCJrZXkiLCJkZXBzTWFwIiwic2V0IiwiTWFwIiwidHJhY2tFZmZlY3RzIiwiZGVidWdnZXJFdmVudEV4dHJhSW5mbyIsImhhcyIsImFkZCIsIm9uVHJhY2siLCJ0cmlnZ2VyIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsIm9sZFRhcmdldCIsInZhbHVlcyIsImlzQXJyYXkiLCJmb3JFYWNoIiwiaXNJbnRlZ2VyS2V5IiwiaXNNYXAiLCJldmVudEluZm8iLCJ0cmlnZ2VyRWZmZWN0cyIsImNvbXB1dGVkIiwidHJpZ2dlckVmZmVjdCIsImFsbG93UmVjdXJzZSIsIm9uVHJpZ2dlciIsImlzTm9uVHJhY2thYmxlS2V5cyIsIm1ha2VNYXAiLCJidWlsdEluU3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJmaWx0ZXIiLCJtYXAiLCJpc1N5bWJvbCIsImNyZWF0ZUdldHRlciIsInNoYWxsb3dHZXQiLCJyZWFkb25seUdldCIsInNoYWxsb3dSZWFkb25seUdldCIsImFycmF5SW5zdHJ1bWVudGF0aW9ucyIsImNyZWF0ZUFycmF5SW5zdHJ1bWVudGF0aW9ucyIsImluc3RydW1lbnRhdGlvbnMiLCJhcnIiLCJ0b1JhdyIsInJlcyIsImlzUmVhZG9ubHkiLCJzaGFsbG93IiwicmVjZWl2ZXIiLCJzaGFsbG93UmVhZG9ubHlNYXAiLCJyZWFkb25seU1hcCIsInNoYWxsb3dSZWFjdGl2ZU1hcCIsInJlYWN0aXZlTWFwIiwidGFyZ2V0SXNBcnJheSIsImhhc093biIsIlJlZmxlY3QiLCJpc1JlZiIsImlzT2JqZWN0IiwicmVhZG9ubHkiLCJyZWFjdGl2ZSIsImNyZWF0ZVNldHRlciIsInNoYWxsb3dTZXQiLCJpc1NoYWxsb3ciLCJoYWRLZXkiLCJOdW1iZXIiLCJyZXN1bHQiLCJoYXNDaGFuZ2VkIiwibXV0YWJsZUhhbmRsZXJzIiwiZGVsZXRlUHJvcGVydHkiLCJvd25LZXlzIiwicmVhZG9ubHlIYW5kbGVycyIsIlN0cmluZyIsInNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzIiwic2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMiLCJ0b1NoYWxsb3ciLCJnZXRQcm90byIsInYiLCJnZXRQcm90b3R5cGVPZiIsImdldCQxIiwicmF3VGFyZ2V0IiwicmF3S2V5Iiwid3JhcCIsInRvUmVhZG9ubHkiLCJ0b1JlYWN0aXZlIiwiY2FsbCIsImhhcyQxIiwic2l6ZSIsInNldCQxIiwiY2hlY2tJZGVudGl0eUtleXMiLCJkZWxldGVFbnRyeSIsImNsZWFyIiwiaGFkSXRlbXMiLCJjcmVhdGVGb3JFYWNoIiwiY2FsbGJhY2siLCJ0aGlzQXJnIiwib2JzZXJ2ZWQiLCJjcmVhdGVJdGVyYWJsZU1ldGhvZCIsInRhcmdldElzTWFwIiwiaXNQYWlyIiwiaXRlcmF0b3IiLCJpc0tleU9ubHkiLCJpbm5lckl0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJjcmVhdGVSZWFkb25seU1ldGhvZCIsImNhcGl0YWxpemUiLCJjcmVhdGVJbnN0cnVtZW50YXRpb25zIiwibXV0YWJsZUluc3RydW1lbnRhdGlvbnMiLCJzaGFsbG93SW5zdHJ1bWVudGF0aW9ucyIsInJlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyIsInNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnMiLCJjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIiLCJtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzIiwic2hhbGxvd0NvbGxlY3Rpb25IYW5kbGVycyIsInJlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzIiwic2hhbGxvd1JlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzIiwidG9SYXdUeXBlIiwiY3JlYXRlUmVhY3RpdmVPYmplY3QiLCJzaGFsbG93UmVhY3RpdmUiLCJzaGFsbG93UmVhZG9ubHkiLCJiYXNlSGFuZGxlcnMiLCJjb2xsZWN0aW9uSGFuZGxlcnMiLCJwcm94eU1hcCIsImV4aXN0aW5nUHJveHkiLCJ0YXJnZXRUeXBlIiwiaXNFeHRlbnNpYmxlIiwicmF3VHlwZSIsInRhcmdldFR5cGVNYXAiLCJpc1JlYWN0aXZlIiwiaXNQcm94eSIsIm1hcmtSYXciLCJkZWYiLCJ0cmFja1JlZlZhbHVlIiwicmVmIiwidHJpZ2dlclJlZlZhbHVlIiwibmV3VmFsIiwiciIsIl9fdl9pc1JlZiIsImNyZWF0ZVJlZiIsInNoYWxsb3dSZWYiLCJyYXdWYWx1ZSIsIlJlZkltcGwiLCJfX3ZfaXNTaGFsbG93IiwiX3Jhd1ZhbHVlIiwiX3ZhbHVlIiwidXNlRGlyZWN0VmFsdWUiLCJ0cmlnZ2VyUmVmIiwidW5yZWYiLCJzaGFsbG93VW53cmFwSGFuZGxlcnMiLCJwcm94eVJlZnMiLCJvYmplY3RXaXRoUmVmcyIsIkN1c3RvbVJlZkltcGwiLCJmYWN0b3J5IiwiX2dldCIsIl9zZXQiLCJjdXN0b21SZWYiLCJ0b1JlZnMiLCJvYmplY3QiLCJyZXQiLCJ0b1JlZiIsIk9iamVjdFJlZkltcGwiLCJfb2JqZWN0IiwiX2tleSIsIl9kZWZhdWx0VmFsdWUiLCJ2YWwiLCJfYSQxIiwiQ29tcHV0ZWRSZWZJbXBsIiwiZ2V0dGVyIiwiX3NldHRlciIsImlzU1NSIiwiX2RpcnR5IiwiX2NhY2hlYWJsZSIsInNlbGYiLCJnZXR0ZXJPck9wdGlvbnMiLCJkZWJ1Z09wdGlvbnMiLCJzZXR0ZXIiLCJvbmx5R2V0dGVyIiwiaXNGdW5jdGlvbiIsImNSZWYiLCJ0aWNrIiwicXVldWUiLCJxdWV1ZWQiLCJmbHVzaCIsIkRlZmVycmVkQ29tcHV0ZWRSZWZJbXBsIiwiY29tcGFyZVRhcmdldCIsImhhc0NvbXBhcmVUYXJnZXQiLCJzY2hlZHVsZWQiLCJjb21wdXRlZFRyaWdnZXIiLCJ2YWx1ZVRvQ29tcGFyZSIsInRoZW4iLCJkZWZlcnJlZENvbXB1dGVkIiwicHVzaFdhcm5pbmdDb250ZXh0Iiwidm5vZGUiLCJwb3BXYXJuaW5nQ29udGV4dCIsImluc3RhbmNlIiwiY29tcG9uZW50IiwiYXBwV2FybkhhbmRsZXIiLCJhcHBDb250ZXh0IiwiY29uZmlnIiwid2FybkhhbmRsZXIiLCJ0cmFjZSIsImN1cnJlbnRWTm9kZSIsIm5vcm1hbGl6ZWRTdGFjayIsInJlY3Vyc2VDb3VudCIsInBhcmVudEluc3RhbmNlIiwiZ2V0Q29tcG9uZW50VHJhY2UiLCJjYWxsV2l0aEVycm9ySGFuZGxpbmciLCJqb2luIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsIndhcm5BcmdzIiwibG9ncyIsImVudHJ5IiwiaXNSb290Iiwib3BlbiIsImNsb3NlIiwicHJvcHMiLCJmb3JtYXRQcm9wcyIsImZvcm1hdFRyYWNlRW50cnkiLCJmb3JtYXRUcmFjZSIsInNsaWNlIiwiZm9ybWF0UHJvcCIsImlzU3RyaW5nIiwibmFtZSIsIkVycm9yVHlwZVN0cmluZ3MiLCJlcnIiLCJoYW5kbGVFcnJvciIsImNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nIiwiaXNQcm9taXNlIiwiY2F0Y2giLCJ0aHJvd0luRGV2IiwiY29udGV4dFZOb2RlIiwiY3VyIiwiZXhwb3NlZEluc3RhbmNlIiwiZXJyb3JJbmZvIiwiZXJyb3JDYXB0dXJlZEhvb2tzIiwiZWMiLCJhcHBFcnJvckhhbmRsZXIiLCJlcnJvckhhbmRsZXIiLCJpbmZvIiwiZXJyb3IiLCJsb2dFcnJvciIsImlzRmx1c2hpbmciLCJpc0ZsdXNoUGVuZGluZyIsImZsdXNoSW5kZXgiLCJwZW5kaW5nUG9zdEZsdXNoQ2JzIiwiYWN0aXZlUG9zdEZsdXNoQ2JzIiwicG9zdEZsdXNoSW5kZXgiLCJyZXNvbHZlZFByb21pc2UiLCJjdXJyZW50Rmx1c2hQcm9taXNlIiwibmV4dFRpY2siLCJwIiwicXVldWVKb2IiLCJqb2IiLCJzcGxpY2UiLCJzdGFydCIsImVuZCIsIm1pZGRsZSIsImdldElkIiwiZmluZEluc2VydGlvbkluZGV4IiwicXVldWVGbHVzaCIsImZsdXNoSm9icyIsInF1ZXVlUG9zdEZsdXNoQ2IiLCJjYiIsImZsdXNoUHJlRmx1c2hDYnMiLCJzZWVuIiwicHJlIiwiY2hlY2tSZWN1cnNpdmVVcGRhdGVzIiwiZmx1c2hQb3N0Rmx1c2hDYnMiLCJkZWR1cGVkIiwic29ydCIsIkluZmluaXR5IiwiY29tcGFyYXRvciIsImRpZmYiLCJjaGVjayIsImNvdW50Iiwib3duZXJJbnN0YW5jZSIsImNvbXBvbmVudE5hbWUiLCJnZXRDb21wb25lbnROYW1lIiwiaXNIbXJVcGRhdGluZyIsImhtckRpcnR5Q29tcG9uZW50cyIsImdldEdsb2JhbFRoaXMiLCJfX1ZVRV9ITVJfUlVOVElNRV9fIiwiY3JlYXRlUmVjb3JkIiwidHJ5V3JhcCIsInJlcmVuZGVyIiwibmV3UmVuZGVyIiwicmVjb3JkIiwiaW5pdGlhbERlZiIsInJlbmRlciIsImluc3RhbmNlcyIsIm5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50IiwicmVuZGVyQ2FjaGUiLCJ1cGRhdGUiLCJyZWxvYWQiLCJuZXdDb21wIiwidXBkYXRlQ29tcG9uZW50RGVmIiwib2xkQ29tcCIsIm9wdGlvbnNDYWNoZSIsImNlUmVsb2FkIiwic3R5bGVzIiwiX19hc3luY0xvYWRlciIsImxvY2F0aW9uIiwiaXNDbGFzc0NvbXBvbmVudCIsIl9fdmNjT3B0cyIsImFyZyIsImRldnRvb2xzIiwiYnVmZmVyIiwiZGV2dG9vbHNOb3RJbnN0YWxsZWQiLCJldmVudCIsInNldERldnRvb2xzSG9vayIsIl9iIiwiZW5hYmxlZCIsIkhUTUxFbGVtZW50IiwidXNlckFnZW50IiwiX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyIsIm5ld0hvb2siLCJzZXRUaW1lb3V0IiwiZGV2dG9vbHNDb21wb25lbnRBZGRlZCIsImNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayIsImRldnRvb2xzQ29tcG9uZW50VXBkYXRlZCIsIl9kZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQiLCJhcHAiLCJ1aWQiLCJkZXZ0b29sc1BlcmZTdGFydCIsImNyZWF0ZURldnRvb2xzUGVyZm9ybWFuY2VIb29rIiwiZGV2dG9vbHNQZXJmRW5kIiwidGltZSIsImVtaXQkMSIsInJhd0FyZ3MiLCJpc1VubW91bnRlZCIsIkVNUFRZX09CSiIsImVtaXRzT3B0aW9ucyIsInByb3BzT3B0aW9ucyIsInZhbGlkYXRvciIsInRvSGFuZGxlcktleSIsImlzTW9kZWxMaXN0ZW5lciIsInN0YXJ0c1dpdGgiLCJtb2RlbEFyZyIsIm1vZGlmaWVyc0tleSIsIm51bWJlciIsInRvTnVtYmVyIiwicGFyYW1zIiwiZGV2dG9vbHNDb21wb25lbnRFbWl0IiwibG93ZXJDYXNlRXZlbnQiLCJ0b0xvd2VyQ2FzZSIsImh5cGhlbmF0ZSIsImhhbmRsZXJOYW1lIiwiaGFuZGxlciIsImNhbWVsaXplIiwib25jZUhhbmRsZXIiLCJlbWl0dGVkIiwibm9ybWFsaXplRW1pdHNPcHRpb25zIiwiY29tcCIsImFzTWl4aW4iLCJjYWNoZSIsImVtaXRzQ2FjaGUiLCJjYWNoZWQiLCJlbWl0cyIsIm5vcm1hbGl6ZWQiLCJoYXNFeHRlbmRzIiwiX19WVUVfT1BUSU9OU19BUElfXyIsImV4dGVuZEVtaXRzIiwibm9ybWFsaXplZEZyb21FeHRlbmQiLCJtaXhpbnMiLCJleHRlbmRzIiwiaXNFbWl0TGlzdGVuZXIiLCJpc09uIiwicmVwbGFjZSIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsImN1cnJlbnRTY29wZUlkIiwic2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwicHJldiIsIl9fc2NvcGVJZCIsInB1c2hTY29wZUlkIiwicG9wU2NvcGVJZCIsIndpdGhTY29wZUlkIiwiX2lkIiwid2l0aEN0eCIsImN0eCIsImlzTm9uU2NvcGVkU2xvdCIsIl9uIiwicmVuZGVyRm5XaXRoQ29udGV4dCIsIl9kIiwic2V0QmxvY2tUcmFja2luZyIsInByZXZJbnN0YW5jZSIsIl9jIiwiYWNjZXNzZWRBdHRycyIsIm1hcmtBdHRyc0FjY2Vzc2VkIiwicmVuZGVyQ29tcG9uZW50Um9vdCIsIkNvbXBvbmVudCIsIndpdGhQcm94eSIsInNsb3RzIiwiYXR0cnMiLCJzZXR1cFN0YXRlIiwiaW5oZXJpdEF0dHJzIiwiZmFsbHRocm91Z2hBdHRycyIsInNoYXBlRmxhZyIsInByb3h5VG9Vc2UiLCJub3JtYWxpemVWTm9kZSIsImdldEZ1bmN0aW9uYWxGYWxsdGhyb3VnaCIsImJsb2NrU3RhY2siLCJjcmVhdGVWTm9kZSIsIkNvbW1lbnQiLCJzZXRSb290Iiwicm9vdCIsInBhdGNoRmxhZyIsImdldENoaWxkUm9vdCIsInNvbWUiLCJmaWx0ZXJNb2RlbExpc3RlbmVycyIsImNsb25lVk5vZGUiLCJhbGxBdHRycyIsImV2ZW50QXR0cnMiLCJleHRyYUF0dHJzIiwiZGlycyIsImlzRWxlbWVudFJvb3QiLCJ0cmFuc2l0aW9uIiwicmF3Q2hpbGRyZW4iLCJjaGlsZHJlbiIsImR5bmFtaWNDaGlsZHJlbiIsImNoaWxkUm9vdCIsImZpbHRlclNpbmdsZVJvb3QiLCJkeW5hbWljSW5kZXgiLCJ1cGRhdGVkUm9vdCIsInNpbmdsZVJvb3QiLCJjaGlsZCIsImlzVk5vZGUiLCJoYXNQcm9wc0NoYW5nZWQiLCJwcmV2UHJvcHMiLCJuZXh0UHJvcHMiLCJuZXh0S2V5cyIsInVwZGF0ZUhPQ0hvc3RFbCIsImVsIiwic3ViVHJlZSIsImlzU3VzcGVuc2UiLCJfX2lzU3VzcGVuc2UiLCJTdXNwZW5zZSIsInByb2Nlc3MiLCJuMSIsIm4yIiwiY29udGFpbmVyIiwiYW5jaG9yIiwicGFyZW50Q29tcG9uZW50IiwicGFyZW50U3VzcGVuc2UiLCJpc1NWRyIsInNsb3RTY29wZUlkcyIsIm9wdGltaXplZCIsInJlbmRlcmVySW50ZXJuYWxzIiwicGF0Y2giLCJvIiwiY3JlYXRlRWxlbWVudCIsImhpZGRlbkNvbnRhaW5lciIsInN1c3BlbnNlIiwiY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSIsInBlbmRpbmdCcmFuY2giLCJzc0NvbnRlbnQiLCJ0cmlnZ2VyRXZlbnQiLCJzc0ZhbGxiYWNrIiwic2V0QWN0aXZlQnJhbmNoIiwibW91bnRTdXNwZW5zZSIsInVtIiwidW5tb3VudCIsIm5ld0JyYW5jaCIsIm5ld0ZhbGxiYWNrIiwiYWN0aXZlQnJhbmNoIiwiaXNJbkZhbGxiYWNrIiwiaXNIeWRyYXRpbmciLCJpc1NhbWVWTm9kZVR5cGUiLCJwZW5kaW5nSWQiLCJ0aW1lb3V0IiwiZmFsbGJhY2siLCJwYXRjaFN1c3BlbnNlIiwiaHlkcmF0ZSIsIm5vZGUiLCJoeWRyYXRlTm9kZSIsInBhcmVudE5vZGUiLCJkb2N1bWVudCIsImNyZWF0ZSIsIm5vcm1hbGl6ZSIsImlzU2xvdENoaWxkcmVuIiwibm9ybWFsaXplU3VzcGVuc2VTbG90IiwiZGVmYXVsdCIsImV2ZW50TGlzdGVuZXIiLCJoYXNXYXJuZWQiLCJtIiwibW92ZSIsInJlbW92ZSIsInJlc3VtZSIsIkVycm9yIiwiZGVsYXlFbnRlciIsIm1vZGUiLCJhZnRlckxlYXZlIiwiaGFzVW5yZXNvbHZlZEFuY2VzdG9yIiwiZmFsbGJhY2tWTm9kZSIsIm1vdW50RmFsbGJhY2siLCJyZWdpc3RlckRlcCIsInNldHVwUmVuZGVyRWZmZWN0IiwiaXNJblBlbmRpbmdTdXNwZW5zZSIsImh5ZHJhdGVkRWwiLCJhc3luY0RlcCIsImFzeW5jU2V0dXBSZXN1bHQiLCJzdXNwZW5zZUlkIiwiYXN5bmNSZXNvbHZlZCIsImhhbmRsZVNldHVwUmVzdWx0IiwicGxhY2Vob2xkZXIiLCJkb1JlbW92ZSIsInMiLCJibG9jayIsInRyYWNrQmxvY2siLCJpc0Jsb2NrVHJlZUVuYWJsZWQiLCJvcGVuQmxvY2siLCJjdXJyZW50QmxvY2siLCJjbG9zZUJsb2NrIiwic2luZ2xlQ2hpbGQiLCJxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZSIsImJyYW5jaCIsInByb3ZpZGUiLCJjdXJyZW50SW5zdGFuY2UiLCJwcm92aWRlcyIsInBhcmVudFByb3ZpZGVzIiwiaW5qZWN0IiwidHJlYXREZWZhdWx0QXNGYWN0b3J5IiwiYXJndW1lbnRzIiwid2F0Y2hFZmZlY3QiLCJkb1dhdGNoIiwid2F0Y2hQb3N0RWZmZWN0Iiwid2F0Y2hTeW5jRWZmZWN0IiwiSU5JVElBTF9XQVRDSEVSX1ZBTFVFIiwid2F0Y2giLCJzb3VyY2UiLCJpbW1lZGlhdGUiLCJkZWVwIiwid2FybkludmFsaWRTb3VyY2UiLCJjbGVhbnVwIiwiZm9yY2VUcmlnZ2VyIiwiaXNNdWx0aVNvdXJjZSIsInRyYXZlcnNlIiwib25DbGVhbnVwIiwiTk9PUCIsImJhc2VHZXR0ZXIiLCJpc0luU1NSQ29tcG9uZW50U2V0dXAiLCJxdWV1ZVBvc3RSZW5kZXJFZmZlY3QiLCJpbnN0YW5jZVdhdGNoIiwicHVibGljVGhpcyIsImNyZWF0ZVBhdGhHZXR0ZXIiLCJzZXRDdXJyZW50SW5zdGFuY2UiLCJ1bnNldEN1cnJlbnRJbnN0YW5jZSIsInBhdGgiLCJzZWdtZW50cyIsInNwbGl0IiwiaXNTZXQiLCJpc1BsYWluT2JqZWN0IiwidXNlVHJhbnNpdGlvblN0YXRlIiwic3RhdGUiLCJpc01vdW50ZWQiLCJpc0xlYXZpbmciLCJpc1VubW91bnRpbmciLCJsZWF2aW5nVk5vZGVzIiwib25Nb3VudGVkIiwib25CZWZvcmVVbm1vdW50IiwiVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IiLCJGdW5jdGlvbiIsIkJhc2VUcmFuc2l0aW9uIiwiYXBwZWFyIiwiQm9vbGVhbiIsInBlcnNpc3RlZCIsIm9uQmVmb3JlRW50ZXIiLCJvbkVudGVyIiwib25BZnRlckVudGVyIiwib25FbnRlckNhbmNlbGxlZCIsIm9uQmVmb3JlTGVhdmUiLCJvbkxlYXZlIiwib25BZnRlckxlYXZlIiwib25MZWF2ZUNhbmNlbGxlZCIsIm9uQmVmb3JlQXBwZWFyIiwib25BcHBlYXIiLCJvbkFmdGVyQXBwZWFyIiwib25BcHBlYXJDYW5jZWxsZWQiLCJzZXR1cCIsImdldEN1cnJlbnRJbnN0YW5jZSIsInByZXZUcmFuc2l0aW9uS2V5IiwiZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuIiwiaGFzRm91bmQiLCJyYXdQcm9wcyIsImVtcHR5UGxhY2Vob2xkZXIiLCJpbm5lckNoaWxkIiwiZ2V0S2VlcEFsaXZlQ2hpbGQiLCJlbnRlckhvb2tzIiwicmVzb2x2ZVRyYW5zaXRpb25Ib29rcyIsInNldFRyYW5zaXRpb25Ib29rcyIsIm9sZENoaWxkIiwib2xkSW5uZXJDaGlsZCIsInRyYW5zaXRpb25LZXlDaGFuZ2VkIiwiZ2V0VHJhbnNpdGlvbktleSIsImxlYXZpbmdIb29rcyIsImRlbGF5TGVhdmUiLCJlYXJseVJlbW92ZSIsImRlbGF5ZWRMZWF2ZSIsImdldExlYXZpbmdOb2Rlc0ZvclR5cGUiLCJfbGVhdmVDYiIsImxlYXZpbmdWTm9kZXNDYWNoZSIsImNhbGxIb29rIiwiY2FsbEFzeW5jSG9vayIsImV2ZXJ5IiwiaG9va3MiLCJiZWZvcmVFbnRlciIsImxlYXZpbmdWTm9kZSIsImVudGVyIiwiYWZ0ZXJIb29rIiwiY2FuY2VsSG9vayIsImNhbGxlZCIsIl9lbnRlckNiIiwiY2FuY2VsbGVkIiwibGVhdmUiLCJjbG9uZSIsImlzS2VlcEFsaXZlIiwia2VlcENvbW1lbnQiLCJwYXJlbnRLZXkiLCJrZXllZEZyYWdtZW50Q291bnQiLCJGcmFnbWVudCIsImRlZmluZUNvbXBvbmVudCIsImlzQXN5bmNXcmFwcGVyIiwiZGVmaW5lQXN5bmNDb21wb25lbnQiLCJsb2FkZXIiLCJsb2FkaW5nQ29tcG9uZW50IiwiZXJyb3JDb21wb25lbnQiLCJkZWxheSIsInN1c3BlbnNpYmxlIiwib25FcnJvciIsInVzZXJPbkVycm9yIiwicmVzb2x2ZWRDb21wIiwicGVuZGluZ1JlcXVlc3QiLCJyZXRyaWVzIiwibG9hZCIsInRoaXNSZXF1ZXN0IiwicmVqZWN0IiwiX19lc01vZHVsZSIsInRvU3RyaW5nVGFnIiwiX19hc3luY1Jlc29sdmVkIiwiY3JlYXRlSW5uZXJDb21wIiwibG9hZGVkIiwiZGVsYXllZCIsIl9faXNLZWVwQWxpdmUiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiUmVnRXhwIiwiZXhjbHVkZSIsIm1heCIsInNoYXJlZENvbnRleHQiLCJyZW5kZXJlciIsImN1cnJlbnQiLCJfX3ZfY2FjaGUiLCJfdW5tb3VudCIsInN0b3JhZ2VDb250YWluZXIiLCJyZXNldFNoYXBlRmxhZyIsInBydW5lQ2FjaGUiLCJwcnVuZUNhY2hlRW50cnkiLCJhY3RpdmF0ZSIsImlzRGVhY3RpdmF0ZWQiLCJpbnZva2VBcnJheUZucyIsInZub2RlSG9vayIsIm9uVm5vZGVNb3VudGVkIiwiaW52b2tlVk5vZGVIb29rIiwiZGVhY3RpdmF0ZSIsImRhIiwib25Wbm9kZVVubW91bnRlZCIsIm1hdGNoZXMiLCJwZW5kaW5nQ2FjaGVLZXkiLCJjYWNoZVN1YnRyZWUiLCJnZXRJbm5lckNoaWxkIiwib25VcGRhdGVkIiwicmF3Vk5vZGUiLCJjYWNoZWRWTm9kZSIsInBhcnNlSW50IiwicGF0dGVybiIsInRlc3QiLCJvbkFjdGl2YXRlZCIsInJlZ2lzdGVyS2VlcEFsaXZlSG9vayIsIm9uRGVhY3RpdmF0ZWQiLCJ3cmFwcGVkSG9vayIsIl9fd2RjIiwiaW5qZWN0SG9vayIsImluamVjdFRvS2VlcEFsaXZlUm9vdCIsImtlZXBBbGl2ZVJvb3QiLCJpbmplY3RlZCIsIm9uVW5tb3VudGVkIiwicHJlcGVuZCIsIl9fd2VoIiwidW5zaGlmdCIsImNyZWF0ZUhvb2siLCJsaWZlY3ljbGUiLCJvbkJlZm9yZU1vdW50Iiwib25CZWZvcmVVcGRhdGUiLCJvblNlcnZlclByZWZldGNoIiwib25SZW5kZXJUcmlnZ2VyZWQiLCJvblJlbmRlclRyYWNrZWQiLCJvbkVycm9yQ2FwdHVyZWQiLCJ2YWxpZGF0ZURpcmVjdGl2ZU5hbWUiLCJpc0J1aWx0SW5EaXJlY3RpdmUiLCJ3aXRoRGlyZWN0aXZlcyIsImRpcmVjdGl2ZXMiLCJpbnRlcm5hbEluc3RhbmNlIiwiZ2V0RXhwb3NlUHJveHkiLCJiaW5kaW5ncyIsImRpciIsIm1vZGlmaWVycyIsIm1vdW50ZWQiLCJ1cGRhdGVkIiwiaW52b2tlRGlyZWN0aXZlSG9vayIsInByZXZWTm9kZSIsIm9sZEJpbmRpbmdzIiwiYmluZGluZyIsIkNPTVBPTkVOVFMiLCJyZXNvbHZlQ29tcG9uZW50IiwibWF5YmVTZWxmUmVmZXJlbmNlIiwicmVzb2x2ZUFzc2V0IiwiTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCIsInJlc29sdmVEeW5hbWljQ29tcG9uZW50IiwicmVzb2x2ZURpcmVjdGl2ZSIsIndhcm5NaXNzaW5nIiwic2VsZk5hbWUiLCJleHRyYSIsInJlZ2lzdHJ5IiwicmVuZGVyTGlzdCIsInJlbmRlckl0ZW0iLCJpc0ludGVnZXIiLCJmcm9tIiwiY3JlYXRlU2xvdHMiLCJkeW5hbWljU2xvdHMiLCJzbG90IiwicmVuZGVyU2xvdCIsIm5vU2xvdHRlZCIsImlzQ0UiLCJ2YWxpZFNsb3RDb250ZW50IiwiZW5zdXJlVmFsaWRWTm9kZSIsInJlbmRlcmVkIiwiY3JlYXRlQmxvY2siLCJfIiwic2NvcGVJZCIsInZub2RlcyIsInRvSGFuZGxlcnMiLCJvYmoiLCJwcmVzZXJ2ZUNhc2VJZk5lY2Vzc2FyeSIsImdldFB1YmxpY0luc3RhbmNlIiwiaXNTdGF0ZWZ1bENvbXBvbmVudCIsInB1YmxpY1Byb3BlcnRpZXNNYXAiLCIkIiwiJGVsIiwiJGRhdGEiLCIkcHJvcHMiLCIkYXR0cnMiLCIkc2xvdHMiLCIkcmVmcyIsInJlZnMiLCIkcGFyZW50IiwiJHJvb3QiLCIkZW1pdCIsIiRvcHRpb25zIiwicmVzb2x2ZU1lcmdlZE9wdGlvbnMiLCIkZm9yY2VVcGRhdGUiLCJmIiwiJG5leHRUaWNrIiwiJHdhdGNoIiwiaXNSZXNlcnZlZFByZWZpeCIsIlB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyIsImFjY2Vzc0NhY2hlIiwiX19pc1NjcmlwdFNldHVwIiwibm9ybWFsaXplZFByb3BzIiwic2hvdWxkQ2FjaGVBY2Nlc3MiLCJwdWJsaWNHZXR0ZXIiLCJjc3NNb2R1bGUiLCJnbG9iYWxQcm9wZXJ0aWVzIiwiX19jc3NNb2R1bGVzIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiUnVudGltZUNvbXBpbGVkUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzIiwidW5zY29wYWJsZXMiLCJpc0dsb2JhbGx5V2hpdGVsaXN0ZWQiLCJoIiwiY3JlYXRlV2F0Y2hlciIsImJhc2UiLCJleHRlbmRzT3B0aW9ucyIsImdsb2JhbE1peGlucyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInJlc29sdmVkIiwibWVyZ2VPcHRpb25zIiwidG8iLCJzdHJhdHMiLCJzdHJhdCIsImludGVybmFsT3B0aW9uTWVyZ2VTdHJhdHMiLCJtZXJnZURhdGFGbiIsIm1lcmdlT2JqZWN0T3B0aW9ucyIsIm1ldGhvZHMiLCJiZWZvcmVDcmVhdGUiLCJtZXJnZUFzQXJyYXkiLCJjcmVhdGVkIiwiYmVmb3JlTW91bnQiLCJiZWZvcmVVcGRhdGUiLCJiZWZvcmVEZXN0cm95IiwiYmVmb3JlVW5tb3VudCIsImRlc3Ryb3llZCIsInVubW91bnRlZCIsImFjdGl2YXRlZCIsImRlYWN0aXZhdGVkIiwiZXJyb3JDYXB0dXJlZCIsInNlcnZlclByZWZldGNoIiwiY29tcG9uZW50cyIsIm1lcmdlZCIsIm5vcm1hbGl6ZUluamVjdCIsInNldEZ1bGxQcm9wcyIsIm5lZWRDYXN0S2V5cyIsInJhd0Nhc3RWYWx1ZXMiLCJoYXNBdHRyc0NoYW5nZWQiLCJpc1Jlc2VydmVkUHJvcCIsImNhbWVsS2V5IiwicmF3Q3VycmVudFByb3BzIiwiY2FzdFZhbHVlcyIsInJlc29sdmVQcm9wVmFsdWUiLCJpc0Fic2VudCIsIm9wdCIsImhhc0RlZmF1bHQiLCJwcm9wc0RlZmF1bHRzIiwibm9ybWFsaXplUHJvcHNPcHRpb25zIiwicHJvcHNDYWNoZSIsImV4dGVuZFByb3BzIiwiRU1QVFlfQVJSIiwibm9ybWFsaXplZEtleSIsInZhbGlkYXRlUHJvcE5hbWUiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJzdHJpbmdJbmRleCIsImdldFR5cGUiLCJjdG9yIiwidG9TdHJpbmciLCJpc1NhbWVUeXBlIiwiZXhwZWN0ZWRUeXBlcyIsImZpbmRJbmRleCIsInQiLCJ2YWxpZGF0ZVByb3BzIiwicmVzb2x2ZWRWYWx1ZXMiLCJ2YWxpZGF0ZVByb3AiLCJyZXF1aXJlZCIsImlzVmFsaWQiLCJ0eXBlcyIsInZhbGlkIiwiZXhwZWN0ZWRUeXBlIiwiYXNzZXJ0VHlwZSIsIm1lc3NhZ2UiLCJyZWNlaXZlZFR5cGUiLCJleHBlY3RlZFZhbHVlIiwic3R5bGVWYWx1ZSIsInJlY2VpdmVkVmFsdWUiLCJpc0V4cGxpY2FibGUiLCJlbGVtIiwiaXNCb29sZWFuIiwiZ2V0SW52YWxpZFR5cGVNZXNzYWdlIiwiaXNTaW1wbGVUeXBlIiwiaXNJbnRlcm5hbEtleSIsIm5vcm1hbGl6ZVNsb3RWYWx1ZSIsIm5vcm1hbGl6ZVNsb3QiLCJyYXdTbG90Iiwibm9ybWFsaXplT2JqZWN0U2xvdHMiLCJyYXdTbG90cyIsIl9jdHgiLCJub3JtYWxpemVWTm9kZVNsb3RzIiwiY3JlYXRlQXBwQ29udGV4dCIsImlzTmF0aXZlVGFnIiwiTk8iLCJjb21waWxlck9wdGlvbnMiLCJjcmVhdGVBcHBBUEkiLCJyb290Q29tcG9uZW50Iiwicm9vdFByb3BzIiwiY29udGV4dCIsImluc3RhbGxlZFBsdWdpbnMiLCJfdWlkIiwiX2NvbXBvbmVudCIsIl9wcm9wcyIsIl9jb250YWluZXIiLCJfY29udGV4dCIsIl9pbnN0YW5jZSIsInZlcnNpb24iLCJ1c2UiLCJpbnN0YWxsIiwibWl4aW4iLCJ2YWxpZGF0ZUNvbXBvbmVudE5hbWUiLCJkaXJlY3RpdmUiLCJtb3VudCIsInJvb3RDb250YWluZXIiLCJpc0h5ZHJhdGUiLCJfX3Z1ZV9hcHBfXyIsIlRleHQiLCJTdGF0aWMiLCJkZXZ0b29sc0luaXRBcHAiLCJkZXZ0b29sc1VubW91bnRBcHAiLCJzZXRSZWYiLCJyYXdSZWYiLCJvbGRSYXdSZWYiLCJpc1VubW91bnQiLCJyZWZWYWx1ZSIsIm93bmVyIiwib2xkUmVmIiwiX2lzU3RyaW5nIiwiX2lzUmVmIiwiZG9TZXQiLCJleGlzdGluZyIsImsiLCJoYXNNaXNtYXRjaCIsImlzU1ZHQ29udGFpbmVyIiwibmFtZXNwYWNlVVJJIiwidGFnTmFtZSIsImlzQ29tbWVudCIsIm5vZGVUeXBlIiwiY3JlYXRlSHlkcmF0aW9uRnVuY3Rpb25zIiwibXQiLCJtb3VudENvbXBvbmVudCIsInBhdGNoUHJvcCIsImNyZWF0ZVRleHQiLCJuZXh0U2libGluZyIsImluc2VydCIsImNyZWF0ZUNvbW1lbnQiLCJpc0ZyYWdtZW50U3RhcnQiLCJvbk1pc21hdGNoIiwiaGFuZGxlTWlzbWF0Y2giLCJkb21UeXBlIiwibmV4dE5vZGUiLCJuZWVkVG9BZG9wdENvbnRlbnQiLCJzdGF0aWNDb3VudCIsIm91dGVySFRNTCIsImh5ZHJhdGVGcmFnbWVudCIsImh5ZHJhdGVFbGVtZW50IiwibG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yIiwicHJldmlvdXNTaWJsaW5nIiwibGFzdENoaWxkIiwiY3JlYXRlVGV4dFZOb2RlIiwiaHlkcmF0ZUNoaWxkcmVuIiwiZm9yY2VQYXRjaFZhbHVlIiwiZW5kc1dpdGgiLCJvbkNsaWNrIiwidm5vZGVIb29rcyIsIm9uVm5vZGVCZWZvcmVNb3VudCIsImlubmVySFRNTCIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsInBhcmVudFZOb2RlIiwiZnJhZ21lbnRTbG90U2NvcGVJZHMiLCJpc0ZyYWdtZW50IiwiaGFzQ2hpbGROb2RlcyIsIl92bm9kZSIsInN0YXJ0TWVhc3VyZSIsImlzU3VwcG9ydGVkIiwibWFyayIsImVuZE1lYXN1cmUiLCJzdGFydFRhZyIsImVuZFRhZyIsIm1lYXN1cmUiLCJjbGVhck1hcmtzIiwiY3JlYXRlUmVuZGVyZXIiLCJiYXNlQ3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVIeWRyYXRpb25SZW5kZXJlciIsImNyZWF0ZUh5ZHJhdGlvbkZucyIsIm5lZWRXYXJuIiwiX19WVUVfUFJPRF9ERVZUT09MU19fIiwibXVsdGkiLCJpbml0RmVhdHVyZUZsYWdzIiwiX19WVUVfXyIsImhvc3RJbnNlcnQiLCJob3N0UmVtb3ZlIiwiaG9zdFBhdGNoUHJvcCIsImhvc3RDcmVhdGVFbGVtZW50IiwiaG9zdENyZWF0ZVRleHQiLCJob3N0Q3JlYXRlQ29tbWVudCIsInNldFRleHQiLCJob3N0U2V0VGV4dCIsInNldEVsZW1lbnRUZXh0IiwiaG9zdFNldEVsZW1lbnRUZXh0IiwiaG9zdFBhcmVudE5vZGUiLCJob3N0TmV4dFNpYmxpbmciLCJzZXRTY29wZUlkIiwiaG9zdFNldFNjb3BlSWQiLCJpbnNlcnRTdGF0aWNDb250ZW50IiwiaG9zdEluc2VydFN0YXRpY0NvbnRlbnQiLCJnZXROZXh0SG9zdE5vZGUiLCJwcm9jZXNzVGV4dCIsInByb2Nlc3NDb21tZW50Tm9kZSIsIm1vdW50U3RhdGljTm9kZSIsInBhdGNoU3RhdGljTm9kZSIsInByb2Nlc3NGcmFnbWVudCIsInByb2Nlc3NFbGVtZW50IiwicHJvY2Vzc0NvbXBvbmVudCIsImludGVybmFscyIsInJlbW92ZVN0YXRpY05vZGUiLCJtb3VudEVsZW1lbnQiLCJwYXRjaEVsZW1lbnQiLCJpcyIsIm1vdW50Q2hpbGRyZW4iLCJ1bm1vdW50Q2hpbGRyZW4iLCJuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyIsImNsb25lSWZNb3VudGVkIiwib2xkUHJvcHMiLCJuZXdQcm9wcyIsInRvZ2dsZVJlY3Vyc2UiLCJvblZub2RlQmVmb3JlVXBkYXRlIiwiYXJlQ2hpbGRyZW5TVkciLCJwYXRjaEJsb2NrQ2hpbGRyZW4iLCJfX2htcklkIiwidHJhdmVyc2VTdGF0aWNDaGlsZHJlbiIsInBhdGNoQ2hpbGRyZW4iLCJwYXRjaFByb3BzIiwiY2xhc3MiLCJzdHlsZSIsInByb3BzVG9VcGRhdGUiLCJkeW5hbWljUHJvcHMiLCJvblZub2RlVXBkYXRlZCIsIm9sZENoaWxkcmVuIiwibmV3Q2hpbGRyZW4iLCJmYWxsYmFja0NvbnRhaW5lciIsIm9sZFZOb2RlIiwibmV3Vk5vZGUiLCJmcmFnbWVudFN0YXJ0QW5jaG9yIiwiZnJhZ21lbnRFbmRBbmNob3IiLCJ1cGRhdGVDb21wb25lbnQiLCJpbml0aWFsVk5vZGUiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZSIsInJlZ2lzdGVySE1SIiwic2V0dXBDb21wb25lbnQiLCJuZXh0Vk5vZGUiLCJwcmV2Q2hpbGRyZW4iLCJuZXh0Q2hpbGRyZW4iLCIkc3RhYmxlIiwic2hvdWxkVXBkYXRlQ29tcG9uZW50IiwidXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyIiwiaW52YWxpZGF0ZUpvYiIsImJ1IiwidSIsIm9yaWdpbk5leHQiLCJuZXh0VHJlZSIsInByZXZUcmVlIiwiYm0iLCJpc0FzeW5jV3JhcHBlclZOb2RlIiwiaHlkcmF0ZVN1YlRyZWUiLCJzY29wZWRJbml0aWFsVk5vZGUiLCJydGMiLCJydGciLCJyYXdQcmV2UHJvcHMiLCJpc0luSG1yQ29udGV4dCIsImtlYmFiS2V5IiwiY2FtZWxpemVkS2V5IiwidXBkYXRlUHJvcHMiLCJuZWVkRGVsZXRpb25DaGVjayIsImRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCIsInVwZGF0ZVNsb3RzIiwiYzEiLCJwcmV2U2hhcGVGbGFnIiwiYzIiLCJwYXRjaEtleWVkQ2hpbGRyZW4iLCJwYXRjaFVua2V5ZWRDaGlsZHJlbiIsIm9sZExlbmd0aCIsIm5ld0xlbmd0aCIsImNvbW1vbkxlbmd0aCIsIk1hdGgiLCJtaW4iLCJuZXh0Q2hpbGQiLCJwYXJlbnRBbmNob3IiLCJsMiIsImUxIiwiZTIiLCJuZXh0UG9zIiwiczEiLCJzMiIsImtleVRvTmV3SW5kZXhNYXAiLCJwYXRjaGVkIiwidG9CZVBhdGNoZWQiLCJtb3ZlZCIsIm1heE5ld0luZGV4U29GYXIiLCJuZXdJbmRleFRvT2xkSW5kZXhNYXAiLCJwcmV2Q2hpbGQiLCJuZXdJbmRleCIsImluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlIiwibGVuIiwiYXJySSIsImdldFNlcXVlbmNlIiwibmV4dEluZGV4IiwibW92ZVR5cGUiLCJwZXJmb3JtTGVhdmUiLCJtb3ZlU3RhdGljTm9kZSIsInNob3VsZEludm9rZURpcnMiLCJzaG91bGRJbnZva2VWbm9kZUhvb2siLCJvblZub2RlQmVmb3JlVW5tb3VudCIsInVubW91bnRDb21wb25lbnQiLCJyZW1vdmVGcmFnbWVudCIsInBlcmZvcm1SZW1vdmUiLCJ1bnJlZ2lzdGVySE1SIiwiYnVtIiwiY2xlYW51cEJ1ZmZlciIsIm1jIiwicGMiLCJwYmMiLCJjcmVhdGVBcHAiLCJhbGxvd2VkIiwiY2gxIiwiY2gyIiwiaXNUZWxlcG9ydERpc2FibGVkIiwiZGlzYWJsZWQiLCJpc1RhcmdldFNWRyIsIlNWR0VsZW1lbnQiLCJyZXNvbHZlVGFyZ2V0Iiwic2VsZWN0IiwidGFyZ2V0U2VsZWN0b3IiLCJtb3ZlVGVsZXBvcnQiLCJ0YXJnZXRBbmNob3IiLCJpc1Jlb3JkZXIiLCJUZWxlcG9ydCIsIl9faXNUZWxlcG9ydCIsInF1ZXJ5U2VsZWN0b3IiLCJtYWluQW5jaG9yIiwid2FzRGlzYWJsZWQiLCJjdXJyZW50Q29udGFpbmVyIiwiY3VycmVudEFuY2hvciIsIm5leHRUYXJnZXQiLCJ0YXJnZXROb2RlIiwiX2xwYSIsImRpc2FibGVUcmFja2luZyIsInZub2RlQXJnc1RyYW5zZm9ybWVyIiwic2V0dXBCbG9jayIsImNyZWF0ZUVsZW1lbnRCbG9jayIsImNyZWF0ZUJhc2VWTm9kZSIsIl9fdl9pc1ZOb2RlIiwidHJhbnNmb3JtVk5vZGVBcmdzIiwidHJhbnNmb3JtZXIiLCJJbnRlcm5hbE9iamVjdEtleSIsIm5vcm1hbGl6ZUtleSIsIm5vcm1hbGl6ZVJlZiIsInJlZl9rZXkiLCJyZWZfZm9yIiwiaXNCbG9ja05vZGUiLCJuZWVkRnVsbENoaWxkcmVuTm9ybWFsaXphdGlvbiIsIl9fdl9za2lwIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJjbG9uZWQiLCJndWFyZFJlYWN0aXZlUHJvcHMiLCJrbGFzcyIsIm5vcm1hbGl6ZUNsYXNzIiwibm9ybWFsaXplU3R5bGUiLCJpc1RlbGVwb3J0IiwiX2NyZWF0ZVZOb2RlIiwiZXh0cmFQcm9wcyIsIm1lcmdlUmVmIiwibWVyZ2VkUHJvcHMiLCJtZXJnZVByb3BzIiwiZGVlcENsb25lVk5vZGUiLCJ0ZXh0IiwiZmxhZyIsImNyZWF0ZVN0YXRpY1ZOb2RlIiwiY29udGVudCIsIm51bWJlck9mTm9kZXMiLCJjcmVhdGVDb21tZW50Vk5vZGUiLCJhc0Jsb2NrIiwibWVtbyIsInNsb3RGbGFnIiwidG9NZXJnZSIsImluY29taW5nIiwiZW1wdHlBcHBDb250ZXh0IiwidWlkJDEiLCJleHBvc2VkIiwiZXhwb3NlUHJveHkiLCJzZXR1cENvbnRleHQiLCJiYyIsInNwIiwiY3JlYXRlRGV2UmVuZGVyQ29udGV4dCIsImNlIiwiaXNCdWlsdEluVGFnIiwiYXBwSXNOYXRpdmVUYWciLCJpbnN0YWxsV2l0aFByb3h5IiwiaXNTdGF0ZWZ1bCIsImluaXRQcm9wcyIsImluaXRTbG90cyIsInNldHVwUmVzdWx0IiwibmFtZXMiLCJpc1J1bnRpbWVPbmx5IiwiZXhwb3NlUHJvcHNPblJlbmRlckNvbnRleHQiLCJjcmVhdGVTZXR1cENvbnRleHQiLCJyZXNvbHZlZFJlc3VsdCIsImZpbmlzaENvbXBvbmVudFNldHVwIiwic2V0dXBTdGF0ZWZ1bENvbXBvbmVudCIsIl9fc3NySW5saW5lUmVuZGVyIiwic3NyUmVuZGVyIiwiZGV2dG9vbHNSYXdTZXR1cFN0YXRlIiwiZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dCIsInJlZ2lzdGVyUnVudGltZUNvbXBpbGVyIiwiX2NvbXBpbGUiLCJfcmMiLCJza2lwT3B0aW9ucyIsInRlbXBsYXRlIiwiaXNDdXN0b21FbGVtZW50IiwiZGVsaW1pdGVycyIsImNvbXBvbmVudENvbXBpbGVyT3B0aW9ucyIsImZpbmFsQ29tcGlsZXJPcHRpb25zIiwiZGF0YU9wdGlvbnMiLCJjb21wdXRlZE9wdGlvbnMiLCJ3YXRjaE9wdGlvbnMiLCJwcm92aWRlT3B0aW9ucyIsImluamVjdE9wdGlvbnMiLCJyZW5kZXJUcmFja2VkIiwicmVuZGVyVHJpZ2dlcmVkIiwiZXhwb3NlIiwiZmlsdGVycyIsImNoZWNrRHVwbGljYXRlUHJvcGVydGllcyIsImNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIiLCJ1bndyYXBSZWYiLCJyZXNvbHZlSW5qZWN0aW9ucyIsInVud3JhcEluamVjdGVkUmVmIiwibWV0aG9kSGFuZGxlciIsIndyaXRhYmxlIiwicmVnaXN0ZXJMaWZlY3ljbGVIb29rIiwicmVnaXN0ZXIiLCJfaG9vayIsImFwcGx5T3B0aW9ucyIsImZyZWV6ZSIsImNyZWF0ZUF0dHJzUHJveHkiLCJjbGFzc2lmeVJFIiwiaW5jbHVkZUluZmVycmVkIiwiZGlzcGxheU5hbWUiLCJfX25hbWUiLCJfX2ZpbGUiLCJpbmZlckZyb21SZWdpc3RyeSIsInRvVXBwZXJDYXNlIiwid2FyblJ1bnRpbWVVc2FnZSIsImRlZmluZVByb3BzIiwiZGVmaW5lRW1pdHMiLCJkZWZpbmVFeHBvc2UiLCJ3aXRoRGVmYXVsdHMiLCJkZWZhdWx0cyIsInVzZVNsb3RzIiwiZ2V0Q29udGV4dCIsInVzZUF0dHJzIiwibWVyZ2VEZWZhdWx0cyIsInJlZHVjZSIsImNyZWF0ZVByb3BzUmVzdFByb3h5IiwiZXhjbHVkZWRLZXlzIiwid2l0aEFzeW5jQ29udGV4dCIsImdldEF3YWl0YWJsZSIsImF3YWl0YWJsZSIsInByb3BzT3JDaGlsZHJlbiIsInByb3RvdHlwZSIsInNzckNvbnRleHRLZXkiLCJ1c2VTU1JDb250ZXh0IiwiaW5pdEN1c3RvbUZvcm1hdHRlciIsInZ1ZVN0eWxlIiwibnVtYmVyU3R5bGUiLCJzdHJpbmdTdHlsZSIsImtleXdvcmRTdHlsZSIsImZvcm1hdHRlciIsImhlYWRlciIsIl9faXNWdWUiLCJmb3JtYXRWYWx1ZSIsImhhc0JvZHkiLCJib2R5IiwiZm9ybWF0SW5zdGFuY2UiLCJibG9ja3MiLCJjcmVhdGVJbnN0YW5jZUJsb2NrIiwiZXh0cmFjdEtleXMiLCJhc1JhdyIsIkNvbXAiLCJleHRyYWN0ZWQiLCJpc0tleU9mVHlwZSIsIm9wdHMiLCJkZXZ0b29sc0Zvcm1hdHRlcnMiLCJ3aXRoTWVtbyIsImlzTWVtb1NhbWUiLCJzc3JVdGlscyIsInJlc29sdmVGaWx0ZXIiLCJjb21wYXRVdGlscyIsImRvYyIsInRlbXBsYXRlQ29udGFpbmVyIiwibm9kZU9wcyIsImluc2VydEJlZm9yZSIsInJlbW92ZUNoaWxkIiwidGFnIiwiY3JlYXRlRWxlbWVudE5TIiwibXVsdGlwbGUiLCJzZXRBdHRyaWJ1dGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm5vZGVWYWx1ZSIsInNlbGVjdG9yIiwiYmVmb3JlIiwiY2xvbmVOb2RlIiwid3JhcHBlciIsImFwcGVuZENoaWxkIiwiaW1wb3J0YW50UkUiLCJzZXRTdHlsZSIsInNldFByb3BlcnR5IiwicHJlZml4ZWQiLCJyYXdOYW1lIiwicHJlZml4Q2FjaGUiLCJwcmVmaXhlcyIsImF1dG9QcmVmaXgiLCJ4bGlua05TIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9wdGlvbnNNb2RpZmllclJFIiwiY2FjaGVkTm93IiwibmF0aXZlT25SRSIsImRlZmluZUN1c3RvbUVsZW1lbnQiLCJWdWVDdXN0b21FbGVtZW50IiwiVnVlRWxlbWVudCIsImluaXRpYWxQcm9wcyIsInN1cGVyIiwiZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCIsIkJhc2VDbGFzcyIsIl9kZWYiLCJfY29ubmVjdGVkIiwiX3Jlc29sdmVkIiwiX251bWJlclByb3BzIiwic2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsImNvbm5lY3RlZENhbGxiYWNrIiwiX3Jlc29sdmVEZWYiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImF0dHJpYnV0ZXMiLCJfc2V0QXR0ciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJhdHRyaWJ1dGVOYW1lIiwib2JzZXJ2ZSIsImhhc09wdGlvbnMiLCJyYXdLZXlzIiwibnVtYmVyUHJvcHMiLCJfc2V0UHJvcCIsIl9nZXRQcm9wIiwiX2FwcGx5U3R5bGVzIiwiX3VwZGF0ZSIsImFzeW5jRGVmIiwiZ2V0QXR0cmlidXRlIiwic2hvdWxkUmVmbGVjdCIsInNob3VsZFVwZGF0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm5ld1N0eWxlcyIsIl9zdHlsZXMiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJob3N0IiwiY3NzIiwidXNlQ3NzTW9kdWxlIiwibW9kdWxlcyIsInVzZUNzc1ZhcnMiLCJzZXRWYXJzIiwic2V0VmFyc09uVk5vZGUiLCJvYiIsImNoaWxkTGlzdCIsImRpc2Nvbm5lY3QiLCJ2YXJzIiwic2V0VmFyc09uTm9kZSIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJUcmFuc2l0aW9uIiwicmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyIsIkRPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJkdXJhdGlvbiIsImVudGVyRnJvbUNsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImVudGVyVG9DbGFzcyIsImFwcGVhckZyb21DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImxlYXZlRnJvbUNsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsIlRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJoYXNFeHBsaWNpdENhbGxiYWNrIiwiYmFzZVByb3BzIiwiZHVyYXRpb25zIiwiTnVtYmVyT2YiLCJub3JtYWxpemVEdXJhdGlvbiIsImVudGVyRHVyYXRpb24iLCJsZWF2ZUR1cmF0aW9uIiwiZmluaXNoRW50ZXIiLCJpc0FwcGVhciIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsImZpbmlzaExlYXZlIiwiX2lzTGVhdmluZyIsIm1ha2VFbnRlckhvb2siLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJmb3JjZVJlZmxvdyIsImlzTmFOIiwidmFsaWRhdGVEdXJhdGlvbiIsImNscyIsImNsYXNzTGlzdCIsIl92dGMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJlbmRJZCIsImV4cGxpY2l0VGltZW91dCIsIl9lbmRJZCIsInJlc29sdmVJZk5vdFN0YWxlIiwicHJvcENvdW50IiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJlbmRFdmVudCIsImVuZGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uRW5kIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFN0eWxlUHJvcGVydGllcyIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsImQiLCJ0b01zIiwib2Zmc2V0SGVpZ2h0IiwicG9zaXRpb25NYXAiLCJuZXdQb3NpdGlvbk1hcCIsIlRyYW5zaXRpb25Hcm91cCIsIm1vdmVDbGFzcyIsImRpc3BsYXkiLCJoYXNDU1NUcmFuc2Zvcm0iLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwibW92ZWRDaGlsZHJlbiIsImFwcGx5VHJhbnNsYXRpb24iLCJ0cmFuc2Zvcm0iLCJ3ZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJfbW92ZUNiIiwicHJvcGVydHlOYW1lIiwiY3NzVHJhbnNpdGlvblByb3BzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwib2xkUG9zIiwibmV3UG9zIiwiZHgiLCJsZWZ0IiwiZHkiLCJ0b3AiLCJnZXRNb2RlbEFzc2lnbmVyIiwib25Db21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaW5nIiwib25Db21wb3NpdGlvbkVuZCIsIkV2ZW50Iiwidk1vZGVsVGV4dCIsIl9hc3NpZ24iLCJjYXN0VG9OdW1iZXIiLCJkb21WYWx1ZSIsImFjdGl2ZUVsZW1lbnQiLCJ2TW9kZWxDaGVja2JveCIsIm1vZGVsVmFsdWUiLCJfbW9kZWxWYWx1ZSIsImVsZW1lbnRWYWx1ZSIsImdldFZhbHVlIiwiY2hlY2tlZCIsImxvb3NlSW5kZXhPZiIsImZvdW5kIiwiZmlsdGVyZWQiLCJnZXRDaGVja2JveFZhbHVlIiwic2V0Q2hlY2tlZCIsImxvb3NlRXF1YWwiLCJ2TW9kZWxSYWRpbyIsInZNb2RlbFNlbGVjdCIsImlzU2V0TW9kZWwiLCJzZWxlY3RlZFZhbCIsInNlbGVjdGVkIiwic2V0U2VsZWN0ZWQiLCJfYmluZGluZyIsImlzTXVsdGlwbGUiLCJvcHRpb24iLCJvcHRpb25WYWx1ZSIsInNlbGVjdGVkSW5kZXgiLCJ2TW9kZWxEeW5hbWljIiwiY2FsbE1vZGVsSG9vayIsInJlc29sdmVEeW5hbWljTW9kZWwiLCJzeXN0ZW1Nb2RpZmllcnMiLCJtb2RpZmllckd1YXJkcyIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImN1cnJlbnRUYXJnZXQiLCJjdHJsIiwiY3RybEtleSIsInNoaWZ0Iiwic2hpZnRLZXkiLCJhbHQiLCJhbHRLZXkiLCJtZXRhIiwibWV0YUtleSIsImJ1dHRvbiIsInJpZ2h0IiwiZXhhY3QiLCJ3aXRoTW9kaWZpZXJzIiwiZ3VhcmQiLCJrZXlOYW1lcyIsImVzYyIsInNwYWNlIiwidXAiLCJkb3duIiwid2l0aEtleXMiLCJldmVudEtleSIsInZTaG93IiwiX3ZvZCIsInNldERpc3BsYXkiLCJyZW5kZXJlck9wdGlvbnMiLCJwcmV2VmFsdWUiLCJuZXh0VmFsdWUiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsImNsYXNzTmFtZSIsInBhdGNoQ2xhc3MiLCJpc0Nzc1N0cmluZyIsImN1cnJlbnREaXNwbGF5IiwiY3NzVGV4dCIsInBhdGNoU3R5bGUiLCJpbnZva2VycyIsIl92ZWkiLCJleGlzdGluZ0ludm9rZXIiLCJwYXJzZU5hbWUiLCJpbnZva2VyIiwiaW5pdGlhbFZhbHVlIiwiX3Z0cyIsImF0dGFjaGVkIiwib3JpZ2luYWxTdG9wIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiX3N0b3BwZWQiLCJwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImNyZWF0ZUludm9rZXIiLCJwYXRjaEV2ZW50Iiwic2hvdWxkU2V0QXNQcm9wIiwibmVlZFJlbW92ZSIsImluY2x1ZGVCb29sZWFuQXR0ciIsInBhdGNoRE9NUHJvcCIsIl90cnVlVmFsdWUiLCJfZmFsc2VWYWx1ZSIsInJlbW92ZUF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlTlMiLCJpc1NwZWNpYWxCb29sZWFuQXR0ciIsInBhdGNoQXR0ciIsImVuYWJsZWRIeWRyYXRpb24iLCJlbnN1cmVSZW5kZXJlciIsImVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyIiwiaW5qZWN0TmF0aXZlVGFnQ2hlY2siLCJpbmplY3RDb21waWxlck9wdGlvbnNDaGVjayIsImNvbnRhaW5lck9yU2VsZWN0b3IiLCJub3JtYWxpemVDb250YWluZXIiLCJFbGVtZW50IiwiY3JlYXRlU1NSQXBwIiwiaXNIVE1MVGFnIiwiaXNTVkdUYWciLCJTaGFkb3dSb290Iiwic3NyRGlyZWN0aXZlSW5pdGlhbGl6ZWQiLCJpbml0RGlyZWN0aXZlc0ZvclNTUiIsImdldFNTUlByb3BzIiwibW9kZWxUb1VzZSIsInN0ciIsImV4cGVjdHNMb3dlckNhc2UiLCJsaXN0IiwiUGF0Y2hGbGFnTmFtZXMiLCJzbG90RmxhZ3NUZXh0IiwiZ2VuZXJhdGVDb2RlRnJhbWUiLCJsaW5lcyIsIm5ld2xpbmVTZXF1ZW5jZXMiLCJpZHgiLCJsaW5lIiwicmVwZWF0IiwibGluZUxlbmd0aCIsIm5ld0xpbmVTZXFMZW5ndGgiLCJwYWQiLCJzcGVjaWFsQm9vbGVhbkF0dHJzIiwiaXNCb29sZWFuQXR0ciIsInVuc2FmZUF0dHJDaGFyUkUiLCJhdHRyVmFsaWRhdGlvbkNhY2hlIiwiaXNTU1JTYWZlQXR0ck5hbWUiLCJpc1Vuc2FmZSIsInByb3BzVG9BdHRyTWFwIiwiYWNjZXB0Q2hhcnNldCIsImh0bWxGb3IiLCJodHRwRXF1aXYiLCJpc05vVW5pdE51bWVyaWNTdHlsZVByb3AiLCJpc0tub3duSHRtbEF0dHIiLCJpc0tub3duU3ZnQXR0ciIsInBhcnNlU3RyaW5nU3R5bGUiLCJsaXN0RGVsaW1pdGVyUkUiLCJwcm9wZXJ0eURlbGltaXRlclJFIiwidG1wIiwic3RyaW5naWZ5U3R5bGUiLCJub3JtYWxpemVQcm9wcyIsImlzVm9pZFRhZyIsImVzY2FwZVJFIiwiZXNjYXBlSHRtbCIsInN0cmluZyIsImV4ZWMiLCJlc2NhcGVkIiwiaHRtbCIsImxhc3RJbmRleCIsImNoYXJDb2RlQXQiLCJjb21tZW50U3RyaXBSRSIsImVzY2FwZUh0bWxDb21tZW50Iiwic3JjIiwiYVZhbGlkVHlwZSIsImlzRGF0ZSIsImJWYWxpZFR5cGUiLCJnZXRUaW1lIiwiZXF1YWwiLCJsb29zZUNvbXBhcmVBcnJheXMiLCJhSGFzS2V5IiwiYkhhc0tleSIsInRvRGlzcGxheVN0cmluZyIsIm9iamVjdFRvU3RyaW5nIiwicmVwbGFjZXIiLCJlbnRyaWVzIiwib25SRSIsInRvVHlwZVN0cmluZyIsImNhY2hlU3RyaW5nRnVuY3Rpb24iLCJjYW1lbGl6ZVJFIiwiaHlwaGVuYXRlUkUiLCJjaGFyQXQiLCJmbnMiLCJwYXJzZUZsb2F0IiwiX2dsb2JhbFRoaXMiLCJnbG9iYWxUaGlzIiwiaWRlbnRSRSIsImdlblByb3BzQWNjZXNzRXhwIiwic3RvcmVLZXkiLCJob29rTmFtZSIsIm5hbWVzcGFjZSIsInByaW9yaXR5IiwiaG9va3NTdG9yZSIsImhhbmRsZXJzIiwiX19jdXJyZW50IiwiaG9va0luZm8iLCJjdXJyZW50SW5kZXgiLCJydW5zIiwiZG9BY3Rpb24iLCJfaG9va3NTdG9yZSRfX2N1cnJlbnQiLCJfaG9va3NTdG9yZSRfX2N1cnJlbnQyIiwiX0hvb2tzIiwiYWN0aW9ucyIsImFkZEFjdGlvbiIsImFkZEZpbHRlciIsInJlbW92ZUFjdGlvbiIsInJlbW92ZUZpbHRlciIsImhhc0FjdGlvbiIsImhhc0ZpbHRlciIsInJlbW92ZUFsbEFjdGlvbnMiLCJyZW1vdmVBbGxGaWx0ZXJzIiwiYXBwbHlGaWx0ZXJzIiwiY3VycmVudEFjdGlvbiIsImN1cnJlbnRGaWx0ZXIiLCJkb2luZ0FjdGlvbiIsImRvaW5nRmlsdGVyIiwiZGlkQWN0aW9uIiwiZGlkRmlsdGVyIiwicmVtb3ZlQWxsIiwiaGFuZGxlcnNSZW1vdmVkIiwicmV0dXJuRmlyc3RBcmciLCJhbGwiLCJfbGVuIiwiZGVmYXVsdEhvb2tzIiwiREVGQVVMVF9MT0NBTEVfREFUQSIsInBsdXJhbF9mb3JtcyIsIkkxOE5fSE9PS19SRUdFWFAiLCJjcmVhdGVJMThuIiwiaW5pdGlhbERhdGEiLCJpbml0aWFsRG9tYWluIiwidGFubmluIiwibGlzdGVuZXJzIiwibm90aWZ5TGlzdGVuZXJzIiwibGlzdGVuZXIiLCJkb1NldExvY2FsZURhdGEiLCJfdGFubmluJGRhdGEkZG9tYWluIiwiZG9tYWluIiwic2V0TG9jYWxlRGF0YSIsImRjbnBnZXR0ZXh0Iiwic2luZ2xlIiwicGx1cmFsIiwiZ2V0RmlsdGVyRG9tYWluIiwiX3giLCJ0cmFuc2xhdGlvbiIsIm9uSG9va0FkZGVkT3JSZW1vdmVkIiwiZ2V0TG9jYWxlRGF0YSIsImFkZExvY2FsZURhdGEiLCJfdGFubmluJGRhdGEkZG9tYWluMiIsInJlc2V0TG9jYWxlRGF0YSIsInN1YnNjcmliZSIsIl9fIiwiX254IiwiaXNSVEwiLCJoYXNUcmFuc2xhdGlvbiIsIl90YW5uaW4kZGF0YSIsIl90YW5uaW4kZGF0YTIiLCJpMThuIiwibG9nRXJyb3JPbmNlIiwic3ByaW50ZiIsImZvcm1hdCIsIlBhZ2VUYWJzIiwiQmFzZUFsZXJ0IiwiJHJvdXRlIiwibWVudUZpeCIsImhpZGVBbGVydCIsImZldGNoU2V0dGluZ3MiLCJtYXBBY3Rpb25zIiwibWFwR2V0dGVycyIsIkJhc2VTcGlubmVyIiwidmFyaWFudCIsImxvYWRpbmciLCJ2YXJpYW50U3R5bGVzIiwiaGVhZGVyVGl0bGUiLCJoZWFkZXJEZXNjcmlwdGlvbiIsIkJhciIsImNoYXJ0SWQiLCJ3aWR0aCIsImhlaWdodCIsImNzc0NsYXNzZXMiLCJwbHVnaW5zIiwibGFiZWxzIiwiZGF0YXNldHMiLCJjaGFydE9wdGlvbnMiLCJyZXNwb25zaXZlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsImNoYXJ0RGF0YSIsIkNoYXJ0SlMiLCJUaXRsZSIsIlRvb2x0aXAiLCJMZWdlbmQiLCJCYXJFbGVtZW50IiwiQ2F0ZWdvcnlTY2FsZSIsIkxpbmVhclNjYWxlIiwiU2tlbGV0b25UZXh0Iiwib25DaGFuZ2UiLCJpc0RlZmF1bHRJbnB1dCIsImlzQ2hlY2tib3giLCJpc0NoZWNrZWQiLCJvbkNoYW5nZUlucHV0IiwiQmFzZUlucHV0IiwibGFiZWwiLCJoaW50IiwibWF4VmlzaWJsZUJ1dHRvbnMiLCJ0b3RhbFBhZ2VzIiwicGVyUGFnZSIsImN1cnJlbnRQYWdlIiwidG90YWxJdGVtcyIsImlzSW5GaXJzdFBhZ2UiLCJpc0luTGFzdFBhZ2UiLCJvbkNsaWNrUHJldmlvdXNQYWdlIiwib25DbGlja05leHRQYWdlIiwiQmFzZUNhcmQiLCJCYXNlQnV0dG9uIiwiSW5wdXRTZWN0aW9uIiwiY2hhbmdlIiwiZW1haWxzRGF0YSIsImVtYWlscyIsImNoYW5nZUlucHV0IiwiaW5wdXQiLCJjaGFuZ2VFbWFpbElucHV0Iiwic2F2ZUVtYWlscyIsImFwcGVuZEVtYWlsIiwiZGVsZXRlRW1haWwiLCJvblN1Ym1pdCIsInNrZWxldG9uV2lkdGhTdHlsZSIsInN0YXR1cyIsInJvdGF0aW9uIiwiZGVwdGgiLCJzcGVlZCIsImNvbG9yIiwicm90YXRpb25BbmltYXRpb25zIiwic2l6ZVVuaXRzIiwidGltZVVuaXRzIiwicm90YXRpb25EaXJlY3Rpb24iLCJzcGlubmVyU2l6ZSIsInNwaW5uZXJEZXB0aCIsInNwaW5uZXJTcGVlZCIsInNwaW5uZXJTdHlsZSIsImJvcmRlclRvcENvbG9yIiwiaGV4VG9SR0IiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0Q29sb3IiLCJib3JkZXJXaWR0aCIsImFuaW1hdGlvbk5hbWUiLCJhbmltYXRpb25EdXJhdGlvbiIsIm1hcmdpblJpZ2h0IiwiaGV4IiwiYWxwaGEiLCJUYWJsZUxvYWRpbmciLCJoZWFkZXJzIiwicm93cyIsImh0bWxDb2x1bW5zIiwiaXNIdG1sIiwia2V5TmFtZSIsIkJhckNoYXJ0IiwiQmFyQ2hhcnRMb2FkaW5nIiwiZ2V0R3JhcGhEYXRhIiwicmVmcmVzaENoYXJ0IiwiQmFzZVRhYmxlIiwiQmFzZVBhZ2luYXRpb24iLCJQYWdpbmF0aW9uTG9hZGVyIiwiZ2V0VGFibGVEYXRhIiwib25QYWdlQ2hhbmdlIiwicGFnZSIsIlNldHRpbmdGb3JtIiwiU2V0dGluZ0Zvcm1Mb2FkaW5nIiwiY3VycmVudElucHV0IiwiZGVib3VuY2UiLCJzdG9yZVNldHRpbmdzIiwidmFsaWRhdGUiLCJ2YWxpZGF0ZVNldHRpbmdzIiwiYWxlcnQiLCJpc1Zpc2libGUiLCJzZXRBbGVydCIsIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCJyb2xlIiwiX2NyZWF0ZUVsZW1lbnRCbG9jayIsIl9ob2lzdGVkXzEiLCJfaG9pc3RlZF8yIiwiX2hvaXN0ZWRfMyIsIl9ob2lzdGVkXzQiLCJfY3JlYXRlQ29tbWVudFZOb2RlIiwiX2NvbXBvbmVudF9QYWdlVGFicyIsIl9ob2lzdGVkXzUiLCJfY29tcG9uZW50X0Jhc2VBbGVydCIsIl9jb21wb25lbnRfcm91dGVyX3ZpZXciLCJfbm9ybWFsaXplQ2xhc3MiLCJzdWNjZXNzIiwiX2NvbXBvbmVudF9CYXNlU3Bpbm5lciIsIl9yZW5kZXJTbG90IiwiJHNldHVwIiwiX2NvbXBvbmVudF9Ta2VsZXRvblRleHQiLCJvbmNoYW5nZSIsImZvciIsIl9jb21wb25lbnRfQmFzZUlucHV0IiwiX2hvaXN0ZWRfNiIsIl9ob2lzdGVkXzciLCJfaG9pc3RlZF85IiwiX2hvaXN0ZWRfMTAiLCJudW1yb3dzIiwiaHVtYW5kYXRlIiwiX2NyZWF0ZUJsb2NrIiwib25jbGljayIsIl9GcmFnbWVudCIsImVtYWlsIiwiX2hvaXN0ZWRfOCIsIl9ob2lzdGVkXzExIiwiX2NvbXBvbmVudF9UYWJsZUxvYWRpbmciLCJyb3ciLCJfY29tcG9uZW50X3JvdXRlcl9saW5rIiwieG1sbnMiLCJ2aWV3Qm94IiwidGl0bGUiLCJ0b3RhbFBhZ2UiLCJvblBhZ2VjaGFuZ2VkIiwiX2NvbXBvbmVudF9TZXR0aW5nRm9ybUxvYWRpbmciLCJfY29tcG9uZW50X1NldHRpbmdGb3JtIiwiZm10Iiwicm91dGVzIiwiU2V0dGluZ1BhZ2UiLCJhbGlhcyIsIkxpc3RQYWdlIiwiR3JhcGhQYWdlIiwiY3JlYXRlUm91dGVyIiwiaGlzdG9yeSIsImNyZWF0ZVdlYkhpc3RvcnkiLCJ3cEVtYWlsZXIiLCJzaXRlIiwiYmFzZV91cmwiLCJjcmVhdGVTdG9yZSIsImdsb2JhbCIsInRhYmxlcyIsImdyYXBoIiwic3RyaWN0IiwiY3JlYXRlTG9nZ2VyIiwiZ2V0dGVycyIsImNvbW1pdCIsInNob3dBbGVydCIsInNldElzQWxlcnRWaXNpYmxlIiwiZ3JhcGhMYWJlbHMiLCJncmFwaERhdGFzZXRzIiwiZ3JhcGhMb2FkaW5nIiwiZ3JhcGhSZWZyZXNoaW5nIiwiZGlzcGF0Y2giLCJpc1JlZnJlc2giLCJnZXRSZXF1ZXN0IiwicmVzcG9uc2UiLCJncmFwaFJlc3BvbnNlIiwiZ3JhcGhEYXRhIiwiZm9ybWF0RGF0ZSIsImRhdGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJzZXRHcmFwaExhYmVscyIsInNldEdyYXBoRGF0YXNldHMiLCJzZXRHcmFwaExvYWRpbmciLCJzZXRHcmFwaFJlZnJlc2hpbmciLCJpc1NldHRpbmdzTG9hZGluZyIsImlzU2V0dGluZ3NTYXZpbmciLCJwb3N0RGF0YSIsImFjdGlvbiIsInBvc3RSZXF1ZXN0IiwiZXJyb3JSZXNwb25zZSIsInJlc3BvbnNlVGV4dCIsInN0b3JlQWxsU2V0dGluZ3MiLCJzdG9yZVNldHRpbmdJdGVtIiwic2V0U2V0dGluZ3NMb2FkaW5nIiwic2V0U2V0dGluZ3NTYXZpbmciLCJwYWdlVGl0bGUiLCJ0YWJsZUxvYWRpbmciLCJyb290U3RhdGUiLCJ0YWJsZSIsImZvcm1hdHRlZFJvd3MiLCJ1cmwiLCJnZXRQYWdpbmF0ZWREYXRhIiwic2V0UGFnZVRpdGxlIiwic2V0SGVhZGVycyIsInNldFJvd3MiLCJzZXRMb2FkaW5nIiwialF1ZXJ5IiwiYWpheF91cmwiLCJub25jZSIsImFqYXgiLCJwcm9jZXNzRGF0YSIsImNvbnRlbnRUeXBlIiwiX3dwbm9uY2UiLCJnZW5lcmF0ZUZvcm1EYXRhRnJvbU9iamVjdCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJidWlsZEZvcm1EYXRhIiwiRmlsZSIsImFwcGVuZCIsInRpbWVzdGFtcCIsInNob3dIb3VyTWludXRlIiwiZGF0ZVN0cmluZyIsInN1YnN0cmluZyIsInBsdWdpblNsdWciLCJtZW51Um9vdCIsImN1cnJlbnRVcmwiLCJocmVmIiwiY3VycmVudFBhdGgiLCJyZW1vdmVDbGFzcyIsImhhc0NsYXNzIiwiYWRkQ2xhc3MiLCJwYXJlbnRzIiwiZWFjaCIsImF0dHIiLCJpdGVtcyIsImNlaWwiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJjaGVja2VyIiwidmFsaWRhdGVFbWFpbCIsImZ1bmMiLCJ3YWl0IiwibGF0ZXIiLCJkZWJvdW5jZWQiLCJjYWxsTm93IiwiY2xlYXJUaW1lb3V0IiwibW9kdWxlIiwiZXhwb3J0cyIsImhlYWQiLCJ0YWlsIiwibWVtb2l6ZWQiLCJzZWFyY2hDYWNoZSIsIm1heFNpemUiLCJyZSIsIm5vdF9zdHJpbmciLCJub3RfYm9vbCIsIm5vdF90eXBlIiwibm90X3ByaW1pdGl2ZSIsIm51bWVyaWNfYXJnIiwianNvbiIsIm5vdF9qc29uIiwibW9kdWxvIiwia2V5X2FjY2VzcyIsImluZGV4X2FjY2VzcyIsInNpZ24iLCJzcHJpbnRmX2Zvcm1hdCIsInNwcmludGZfcGFyc2UiLCJ2c3ByaW50ZiIsImFyZ3YiLCJwYXJzZV90cmVlIiwicGgiLCJwYWRfY2hhcmFjdGVyIiwicGFkX2xlbmd0aCIsImlzX3Bvc2l0aXZlIiwiY3Vyc29yIiwidHJlZV9sZW5ndGgiLCJvdXRwdXQiLCJwYXJhbV9ubyIsIlR5cGVFcnJvciIsImZyb21DaGFyQ29kZSIsInByZWNpc2lvbiIsInRvRXhwb25lbnRpYWwiLCJ0b0ZpeGVkIiwidG9QcmVjaXNpb24iLCJ2YWx1ZU9mIiwicGFkX2NoYXIiLCJhbGlnbiIsInNwcmludGZfY2FjaGUiLCJfZm10IiwiYXJnX25hbWVzIiwiU3ludGF4RXJyb3IiLCJmaWVsZF9saXN0IiwicmVwbGFjZW1lbnRfZmllbGQiLCJmaWVsZF9tYXRjaCIsIkRFRkFVTFRfT1BUSU9OUyIsImNvbnRleHREZWxpbWl0ZXIiLCJvbk1pc3NpbmdLZXkiLCJUYW5uaW4iLCJnZXRQbHVyYWxGb3JtIiwicGYiLCJwYXJ0cyIsInBhcnQiLCJnZXRQbHVyYWxFeHByZXNzaW9uIiwic2luZ3VsYXIiLCJDaGFydEVtaXRzIiwiY2hhcnRDcmVhdGUiLCJjcmVhdGVDaGFydEZ1bmN0aW9uIiwiQ2hhcnRSZW5kZXJlZCIsImNoYXJ0RGVzdHJveSIsImNoYXJ0IiwiZGVzdHJveSIsIkNoYXJ0RGVzdHJveWVkIiwic2V0Q2hhcnREYXRhc2V0cyIsIm9sZERhdGEiLCJuZXdEYXRhIiwiZGF0YXNldElkS2V5IiwiYWRkZWREYXRhc2V0cyIsIm5leHREYXRhc2V0IiwiY3VycmVudERhdGFzZXQiLCJmaW5kIiwiZGF0YXNldCIsImdlbmVyYXRlQ2hhcnQiLCJjaGFydFR5cGUiLCJjaGFydENvbnRyb2xsZXIiLCJDaGFydCIsIl9jaGFydCIsImNhbnZhc0VsIiwicmVuZGVyQ2hhcnQiLCJuZXh0RGF0YSIsImdldENoYXJ0RGF0YSIsImNhbnZhc0VsMkRDb250ZXh0IiwidXBkYXRlQ2hhcnQiLCJDaGFydFVwZGF0ZWQiLCJjaGFydFVwZGF0ZSIsImlzRXF1YWxMYWJlbHNBbmREYXRhc2V0c0xlbmd0aCIsIm5ld0RhdGFzZXRMYWJlbHMiLCJvbGREYXRhc2V0TGFiZWxzIiwiY29tcGFyZURhdGEiLCJMYWJlbHNVcGRhdGVkIiwic2V0Q2hhcnRMYWJlbHMiLCJjaGFydERhdGFIYW5kbGVyIiwic2V0Q2hhcnRPcHRpb25zIiwiY2hhcnRPcHRpb25zSGFuZGxlciIsIkJhckNvbnRyb2xsZXIiLCJEb3VnaG51dCIsIkRvdWdobnV0Q29udHJvbGxlciIsIkxpbmUiLCJMaW5lQ29udHJvbGxlciIsIlBpZSIsIlBpZUNvbnRyb2xsZXIiLCJQb2xhckFyZWEiLCJQb2xhckFyZWFDb250cm9sbGVyIiwiUmFkYXIiLCJSYWRhckNvbnRyb2xsZXIiLCJCdWJibGUiLCJCdWJibGVDb250cm9sbGVyIiwiU2NhdHRlciIsIlNjYXR0ZXJDb250cm9sbGVyIiwic2ZjIiwidXNlU3RvcmUiLCJkZWVwQ29weSIsImhpdCIsIm9yaWdpbmFsIiwiY29weSIsImZvckVhY2hWYWx1ZSIsImFzc2VydCIsImNvbmRpdGlvbiIsImdlbmVyaWNTdWJzY3JpYmUiLCJzdWJzIiwicmVzZXRTdG9yZSIsInN0b3JlIiwiaG90IiwiX2FjdGlvbnMiLCJfbXV0YXRpb25zIiwiX3dyYXBwZWRHZXR0ZXJzIiwiX21vZHVsZXNOYW1lc3BhY2VNYXAiLCJpbnN0YWxsTW9kdWxlIiwiX21vZHVsZXMiLCJyZXNldFN0b3JlU3RhdGUiLCJvbGRTdGF0ZSIsIl9zdGF0ZSIsIl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGUiLCJ3cmFwcGVkR2V0dGVycyIsImNvbXB1dGVkT2JqIiwicGFydGlhbCIsIl9jb21taXR0aW5nIiwiZW5hYmxlU3RyaWN0TW9kZSIsIl93aXRoQ29tbWl0IiwiZ2V0TmFtZXNwYWNlIiwibmFtZXNwYWNlZCIsInBhcmVudFN0YXRlIiwiZ2V0TmVzdGVkU3RhdGUiLCJtb2R1bGVOYW1lIiwibG9jYWwiLCJub05hbWVzcGFjZSIsIl90eXBlIiwiX3BheWxvYWQiLCJfb3B0aW9ucyIsInVuaWZ5T2JqZWN0U3R5bGUiLCJwYXlsb2FkIiwiZGVmaW5lUHJvcGVydGllcyIsIm1ha2VMb2NhbEdldHRlcnMiLCJtYWtlTG9jYWxDb250ZXh0IiwiZm9yRWFjaE11dGF0aW9uIiwibXV0YXRpb24iLCJyZWdpc3Rlck11dGF0aW9uIiwiZm9yRWFjaEFjdGlvbiIsInJvb3RHZXR0ZXJzIiwiX2RldnRvb2xIb29rIiwicmVnaXN0ZXJBY3Rpb24iLCJmb3JFYWNoR2V0dGVyIiwicmF3R2V0dGVyIiwicmVnaXN0ZXJHZXR0ZXIiLCJmb3JFYWNoQ2hpbGQiLCJnZXR0ZXJzUHJveHkiLCJzcGxpdFBvcyIsImxvY2FsVHlwZSIsIk1VVEFUSU9OU19MQVlFUl9JRCIsIkFDVElPTlNfTEFZRVJfSUQiLCJJTlNQRUNUT1JfSUQiLCJhY3Rpb25JZCIsImFkZERldnRvb2xzIiwiaG9tZXBhZ2UiLCJsb2dvIiwicGFja2FnZU5hbWUiLCJjb21wb25lbnRTdGF0ZVR5cGVzIiwiYXBpIiwiYWRkVGltZWxpbmVMYXllciIsIkNPTE9SX0xJTUVfNTAwIiwiYWRkSW5zcGVjdG9yIiwiaWNvbiIsInRyZWVGaWx0ZXJQbGFjZWhvbGRlciIsImdldEluc3BlY3RvclRyZWUiLCJpbnNwZWN0b3JJZCIsIm5vZGVzIiwiZmxhdHRlblN0b3JlRm9ySW5zcGVjdG9yVHJlZSIsInJvb3ROb2RlcyIsImZvcm1hdFN0b3JlRm9ySW5zcGVjdG9yVHJlZSIsImdldEluc3BlY3RvclN0YXRlIiwibW9kdWxlUGF0aCIsIm5vZGVJZCIsImdldHRlcnNLZXlzIiwic3RvcmVTdGF0ZSIsImVkaXRhYmxlIiwidHJlZSIsImxlYWZLZXkiLCJfY3VzdG9tIiwidG9vbHRpcCIsImFic3RyYWN0IiwiY2FuVGhyb3ciLCJ0cmFuc2Zvcm1QYXRoc1RvT2JqZWN0VHJlZSIsImV4dHJhY3ROYW1lRnJvbVBhdGgiLCJmb3JtYXRTdG9yZUZvckluc3BlY3RvclN0YXRlIiwibW9kdWxlTWFwIiwiX2NoaWxkcmVuIiwiZWRpdEluc3BlY3RvclN0YXRlIiwibm90aWZ5Q29tcG9uZW50VXBkYXRlIiwic2VuZEluc3BlY3RvclRyZWUiLCJzZW5kSW5zcGVjdG9yU3RhdGUiLCJhZGRUaW1lbGluZUV2ZW50IiwibGF5ZXJJZCIsInN1YnNjcmliZUFjdGlvbiIsIl90aW1lIiwiZ3JvdXBJZCIsInN1YnRpdGxlIiwiYWZ0ZXIiLCJUQUdfTkFNRVNQQUNFRCIsInRleHRDb2xvciIsInRhZ3MiLCJNb2R1bGUiLCJyYXdNb2R1bGUiLCJydW50aW1lIiwiX3Jhd01vZHVsZSIsInJhd1N0YXRlIiwicHJvdG90eXBlQWNjZXNzb3JzJDEiLCJhZGRDaGlsZCIsImdldENoaWxkIiwiaGFzQ2hpbGQiLCJNb2R1bGVDb2xsZWN0aW9uIiwicmF3Um9vdE1vZHVsZSIsInRhcmdldE1vZHVsZSIsIm5ld01vZHVsZSIsImFzc2VydFJhd01vZHVsZSIsInRoaXMkMSQxIiwicmF3Q2hpbGRNb2R1bGUiLCJ1bnJlZ2lzdGVyIiwiaXNSZWdpc3RlcmVkIiwiZnVuY3Rpb25Bc3NlcnQiLCJleHBlY3RlZCIsImFzc2VydFR5cGVzIiwiYXNzZXJ0T3B0aW9ucyIsImJ1ZiIsIm1ha2VBc3NlcnRpb25NZXNzYWdlIiwiU3RvcmUiLCJfYWN0aW9uU3Vic2NyaWJlcnMiLCJfc3Vic2NyaWJlcnMiLCJfZGV2dG9vbHMiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJpbmplY3RLZXkiLCIkc3RvcmUiLCJzdWIiLCJzaWxlbnQiLCJyZXBsYWNlU3RhdGUiLCJyZWdpc3Rlck1vZHVsZSIsInByZXNlcnZlU3RhdGUiLCJ1bnJlZ2lzdGVyTW9kdWxlIiwiaGFzTW9kdWxlIiwiaG90VXBkYXRlIiwibmV3T3B0aW9ucyIsImNvbW1pdHRpbmciLCJtYXBTdGF0ZSIsIm5vcm1hbGl6ZU5hbWVzcGFjZSIsInN0YXRlcyIsImlzVmFsaWRNYXAiLCJub3JtYWxpemVNYXAiLCJnZXRNb2R1bGVCeU5hbWVzcGFjZSIsInZ1ZXgiLCJtYXBNdXRhdGlvbnMiLCJjcmVhdGVOYW1lc3BhY2VkSGVscGVycyIsImhlbHBlciIsImNvbGxhcHNlZCIsInN0YXRlQmVmb3JlIiwic3RhdGVBZnRlciIsIm11dGF0aW9uVHJhbnNmb3JtZXIiLCJtdXQiLCJhY3Rpb25GaWx0ZXIiLCJhY3Rpb25UcmFuc2Zvcm1lciIsImFjdCIsImxvZ011dGF0aW9ucyIsImxvZ0FjdGlvbnMiLCJsb2dnZXIiLCJwcmV2U3RhdGUiLCJuZXh0U3RhdGUiLCJmb3JtYXR0ZWRUaW1lIiwiZ2V0Rm9ybWF0dGVkVGltZSIsImZvcm1hdHRlZE11dGF0aW9uIiwic3RhcnRNZXNzYWdlIiwibG9nIiwiZW5kTWVzc2FnZSIsImZvcm1hdHRlZEFjdGlvbiIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXAiLCJncm91cEVuZCIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJudW0iLCJtYXhMZW5ndGgiLCJ0aW1lcyIsImFuaW1hdG9yIiwiX3JlcXVlc3QiLCJfY2hhcnRzIiwiX3J1bm5pbmciLCJfbGFzdERhdGUiLCJfbm90aWZ5IiwiYW5pbXMiLCJjYWxsYmFja3MiLCJudW1TdGVwcyIsImluaXRpYWwiLCJjdXJyZW50U3RlcCIsIl9yZWZyZXNoIiwicmVtYWluaW5nIiwicnVubmluZyIsImRyYXciLCJfYWN0aXZlIiwiX3RvdGFsIiwiX2dldEFuaW1zIiwiY2hhcnRzIiwiY29tcGxldGUiLCJwcm9ncmVzcyIsImxpc3RlbiIsImFjYyIsIl9kdXJhdGlvbiIsImNhbmNlbCIsInRyYW5zcGFyZW50IiwiaW50ZXJwb2xhdG9ycyIsImJvb2xlYW4iLCJmYWN0b3IiLCJjMCIsIm1peCIsImhleFN0cmluZyIsIkFuaW1hdGlvbiIsImNmZyIsImN1cnJlbnRWYWx1ZSIsIl9mbiIsIl9lYXNpbmciLCJlYXNpbmciLCJfc3RhcnQiLCJmbG9vciIsIl9sb29wIiwibG9vcCIsIl9wcm9wIiwiX2Zyb20iLCJfdG8iLCJfcHJvbWlzZXMiLCJlbGFwc2VkIiwicmVtYWluIiwicHJvbWlzZXMiLCJyZWoiLCJhbmltYXRpb25PcHRpb25zIiwiX2ZhbGxiYWNrIiwiX2luZGV4YWJsZSIsIl9zY3JpcHRhYmxlIiwiY29sb3JzIiwicHJvcGVydGllcyIsIm51bWJlcnMiLCJhbmltYXRpb24iLCJyZXNpemUiLCJzaG93IiwiYW5pbWF0aW9ucyIsInZpc2libGUiLCJoaWRlIiwiQW5pbWF0aW9ucyIsIl9wcm9wZXJ0aWVzIiwiY29uZmlndXJlIiwiYW5pbWF0ZWRQcm9wcyIsIl9hbmltYXRlT3B0aW9ucyIsIiRzaGFyZWQiLCIkYW5pbWF0aW9ucyIsInJlc29sdmVUYXJnZXRPcHRpb25zIiwiX2NyZWF0ZUFuaW1hdGlvbnMiLCJhbmltIiwiYXdhaXRBbGwiLCJzY2FsZUNsaXAiLCJzY2FsZSIsImFsbG93ZWRPdmVyZmxvdyIsImdldFNvcnRlZERhdGFzZXRJbmRpY2VzIiwiZmlsdGVyVmlzaWJsZSIsIm1ldGFzZXRzIiwiX2dldFNvcnRlZERhdGFzZXRNZXRhcyIsImlsZW4iLCJhcHBseVN0YWNrIiwiZHNJbmRleCIsInNpbmdsZU1vZGUiLCJkYXRhc2V0SW5kZXgiLCJvdGhlclZhbHVlIiwiaXNTdGFja2VkIiwic3RhY2tlZCIsImdldE9yQ3JlYXRlU3RhY2siLCJzdGFja3MiLCJzdGFja0tleSIsImluZGV4VmFsdWUiLCJzdWJTdGFjayIsImdldExhc3RJbmRleEluU3RhY2siLCJ2U2NhbGUiLCJwb3NpdGl2ZSIsImdldE1hdGNoaW5nVmlzaWJsZU1ldGFzIiwidXBkYXRlU3RhY2tzIiwiY29udHJvbGxlciIsInBhcnNlZCIsIl9jYWNoZWRNZXRhIiwiX3N0YWNrcyIsImlTY2FsZSIsImlBeGlzIiwiYXhpcyIsInZBeGlzIiwiaW5kZXhTY2FsZSIsInZhbHVlU2NhbGUiLCJnZXRTdGFja0tleSIsIl90b3AiLCJfYm90dG9tIiwiZ2V0Rmlyc3RTY2FsZUlkIiwic2NhbGVzIiwiY2xlYXJTdGFja3MiLCJfcGFyc2VkIiwiaXNEaXJlY3RVcGRhdGVNb2RlIiwiY2xvbmVJZk5vdFNoYXJlZCIsInNoYXJlZCIsIkRhdGFzZXRDb250cm9sbGVyIiwiX2NhY2hlZERhdGFPcHRzIiwiZ2V0TWV0YSIsIl9wYXJzaW5nIiwiX2RhdGEiLCJfb2JqZWN0RGF0YSIsIl9zaGFyZWRPcHRpb25zIiwiX2RyYXdTdGFydCIsIl9kcmF3Q291bnQiLCJlbmFibGVPcHRpb25TaGFyaW5nIiwic3VwcG9ydHNEZWNpbWF0aW9uIiwiJGNvbnRleHQiLCJfc3luY0xpc3QiLCJpbml0aWFsaXplIiwibGlua1NjYWxlcyIsIl9zdGFja2VkIiwiYWRkRWxlbWVudHMiLCJ1cGRhdGVJbmRleCIsImdldERhdGFzZXQiLCJjaG9vc2VJZCIsIngiLCJ5IiwieGlkIiwieEF4aXNJRCIsInlpZCIsInlBeGlzSUQiLCJyaWQiLCJyQXhpc0lEIiwiaW5kZXhBeGlzIiwiaWlkIiwiaUF4aXNJRCIsInZpZCIsInZBeGlzSUQiLCJ4U2NhbGUiLCJnZXRTY2FsZUZvcklkIiwieVNjYWxlIiwiclNjYWxlIiwiZ2V0RGF0YXNldE1ldGEiLCJzY2FsZUlEIiwiX2dldE90aGVyU2NhbGUiLCJyZXNldCIsIl9kZXN0cm95IiwiX2RhdGFDaGVjayIsImFkYXRhIiwiY29udmVydE9iamVjdERhdGFUb0FycmF5IiwiZGF0YXNldEVsZW1lbnRUeXBlIiwiYnVpbGRPclVwZGF0ZUVsZW1lbnRzIiwicmVzZXROZXdFbGVtZW50cyIsInN0YWNrQ2hhbmdlZCIsIm9sZFN0YWNrZWQiLCJfcmVzeW5jRWxlbWVudHMiLCJzY29wZUtleXMiLCJkYXRhc2V0U2NvcGVLZXlzIiwiZ2V0T3B0aW9uU2NvcGVzIiwiY3JlYXRlUmVzb2x2ZXIiLCJwYXJzaW5nIiwic29ydGVkIiwiX3NvcnRlZCIsInBhcnNlQXJyYXlEYXRhIiwicGFyc2VPYmplY3REYXRhIiwicGFyc2VQcmltaXRpdmVEYXRhIiwiaXNOb3RJbk9yZGVyQ29tcGFyZWRUb1ByZXYiLCJnZXRMYWJlbHMiLCJzaW5nbGVTY2FsZSIsInhBeGlzS2V5IiwieUF4aXNLZXkiLCJnZXRQYXJzZWQiLCJnZXREYXRhRWxlbWVudCIsInVwZGF0ZVJhbmdlRnJvbVBhcnNlZCIsInJhbmdlIiwicGFyc2VkVmFsdWUiLCJOYU4iLCJnZXRNaW5NYXgiLCJjYW5TdGFjayIsIm90aGVyU2NhbGUiLCJoaWRkZW4iLCJjcmVhdGVTdGFjayIsIlBPU0lUSVZFX0lORklOSVRZIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJvdGhlck1pbiIsIm90aGVyTWF4IiwibWluRGVmaW5lZCIsIm1heERlZmluZWQiLCJnZXRVc2VyQm91bmRzIiwiX3NraXAiLCJnZXRBbGxQYXJzZWRWYWx1ZXMiLCJnZXRNYXhPdmVyZmxvdyIsImdldExhYmVsQW5kVmFsdWUiLCJnZXRMYWJlbEZvclZhbHVlIiwiX2NsaXAiLCJib3R0b20iLCJ0b0NsaXAiLCJjbGlwIiwiZGVmYXVsdENsaXAiLCJlbGVtZW50cyIsImFyZWEiLCJjaGFydEFyZWEiLCJkcmF3QWN0aXZlRWxlbWVudHNPblRvcCIsImdldFN0eWxlIiwicmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyIsInJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMiLCJkYXRhSW5kZXgiLCJjcmVhdGVEYXRhQ29udGV4dCIsImNyZWF0ZURhdGFzZXRDb250ZXh0IiwiX3Jlc29sdmVFbGVtZW50T3B0aW9ucyIsImRhdGFFbGVtZW50VHlwZSIsImVsZW1lbnRUeXBlIiwiY2FjaGVLZXkiLCJzaGFyaW5nIiwiZGF0YXNldEVsZW1lbnRTY29wZUtleXMiLCJyZXNvbHZlTmFtZWRPcHRpb25zIiwiX3Jlc29sdmVBbmltYXRpb25zIiwiZGF0YXNldEFuaW1hdGlvblNjb3BlS2V5cyIsImdldFNoYXJlZE9wdGlvbnMiLCJpbmNsdWRlT3B0aW9ucyIsInNoYXJlZE9wdGlvbnMiLCJfYW5pbWF0aW9uc0Rpc2FibGVkIiwiX2dldFNoYXJlZE9wdGlvbnMiLCJmaXJzdE9wdHMiLCJwcmV2aW91c2x5U2hhcmVkT3B0aW9ucyIsInVwZGF0ZVNoYXJlZE9wdGlvbnMiLCJ1cGRhdGVFbGVtZW50IiwiX3NldFN0eWxlIiwicmVtb3ZlSG92ZXJTdHlsZSIsInNldEhvdmVyU3R5bGUiLCJfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGUiLCJfc2V0RGF0YXNldEhvdmVyU3R5bGUiLCJhcmcxIiwiYXJnMiIsIm51bU1ldGEiLCJudW1EYXRhIiwiX2luc2VydEVsZW1lbnRzIiwiX3JlbW92ZUVsZW1lbnRzIiwidXBkYXRlRWxlbWVudHMiLCJyZW1vdmVkIiwiX3N5bmMiLCJfZGF0YUNoYW5nZXMiLCJfb25EYXRhUHVzaCIsIl9vbkRhdGFQb3AiLCJfb25EYXRhU2hpZnQiLCJfb25EYXRhU3BsaWNlIiwibmV3Q291bnQiLCJfb25EYXRhVW5zaGlmdCIsImNvbXB1dGVNaW5TYW1wbGVTaXplIiwiX2NhY2hlIiwiJGJhciIsInZpc2libGVNZXRhcyIsImdldEFsbFNjYWxlVmFsdWVzIiwiY3VyciIsIl9sZW5ndGgiLCJ1cGRhdGVNaW5BbmRQcmV2IiwiYWJzIiwiZ2V0UGl4ZWxGb3JWYWx1ZSIsInRpY2tzIiwiZ2V0UGl4ZWxGb3JUaWNrIiwicGFyc2VWYWx1ZSIsInN0YXJ0VmFsdWUiLCJlbmRWYWx1ZSIsImJhclN0YXJ0IiwiYmFyRW5kIiwicGFyc2VGbG9hdEJhciIsInBhcnNlQXJyYXlPclByaW1pdGl2ZSIsImlzRmxvYXRCYXIiLCJjdXN0b20iLCJzZXRCb3JkZXJTa2lwcGVkIiwiZWRnZSIsImJvcmRlclNraXBwZWQiLCJob3Jpem9udGFsIiwiYm9yZGVyUHJvcHMiLCJlbmFibGVCb3JkZXJSYWRpdXMiLCJwYXJzZUVkZ2UiLCJvcmlnIiwidjEiLCJ2MiIsInN0YXJ0RW5kIiwic2V0SW5mbGF0ZUFtb3VudCIsImluZmxhdGVBbW91bnQiLCJyYXRpbyIsImlBeGlzS2V5IiwidkF4aXNLZXkiLCJiYXJzIiwiZ2V0QmFzZVBpeGVsIiwiaXNIb3Jpem9udGFsIiwicnVsZXIiLCJfZ2V0UnVsZXIiLCJ2cGl4ZWxzIiwiX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzIiwiaXBpeGVscyIsIl9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyIsImNlbnRlciIsIl9nZXRTdGFja3MiLCJncm91cGVkIiwic2tpcE51bGwiLCJfZ2V0U3RhY2tDb3VudCIsIl9nZXRTdGFja0luZGV4IiwicGl4ZWxzIiwiYmFyVGhpY2tuZXNzIiwiX3N0YXJ0UGl4ZWwiLCJfZW5kUGl4ZWwiLCJzdGFja0NvdW50IiwiY2F0ZWdvcnlQZXJjZW50YWdlIiwiYmFyUGVyY2VudGFnZSIsImJhc2VWYWx1ZSIsIm1pbkJhckxlbmd0aCIsImFjdHVhbEJhc2UiLCJmbG9hdGluZyIsImdldERhdGFWaXNpYmlsaXR5IiwiYmFyU2lnbiIsInN0YXJ0UGl4ZWwiLCJnZXRQaXhlbEZvckRlY2ltYWwiLCJlbmRQaXhlbCIsImhhbGZHcmlkIiwiZ2V0TGluZVdpZHRoRm9yVmFsdWUiLCJtYXhCYXJUaGlja25lc3MiLCJwZXJjZW50IiwiY2h1bmsiLCJjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzIiwidGhpY2tuZXNzIiwiY29tcHV0ZUZpdENhdGVnb3J5VHJhaXRzIiwic3RhY2tJbmRleCIsInJlY3RzIiwib3ZlcnJpZGVzIiwiX2luZGV4XyIsIm9mZnNldCIsImdyaWQiLCJfdmFsdWVfIiwiYmVnaW5BdFplcm8iLCJyYWRpdXMiLCJwb2ludHMiLCJwb2ludCIsImlQaXhlbCIsInZQaXhlbCIsInNraXAiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJfZ2V0Um90YXRpb24iLCJfZ2V0Q2lyY3VtZmVyZW5jZSIsImNpcmN1bWZlcmVuY2UiLCJfZ2V0Um90YXRpb25FeHRlbnRzIiwiVCIsImlzRGF0YXNldFZpc2libGUiLCJhcmNzIiwic3BhY2luZyIsImdldE1heEJvcmRlcldpZHRoIiwiZ2V0TWF4T2Zmc2V0IiwiY3V0b3V0IiwiY2hhcnRXZWlnaHQiLCJfZ2V0UmluZ1dlaWdodCIsInJhdGlvWCIsInJhdGlvWSIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsInN0YXJ0WCIsImNvcyIsInN0YXJ0WSIsInNpbiIsImVuZFgiLCJlbmRZIiwiY2FsY01heCIsImFuZ2xlIiwiY2FsY01pbiIsIm1heFgiLCJtYXhZIiwiSCIsIm1pblgiLCJQIiwibWluWSIsImdldFJhdGlvQW5kT2Zmc2V0IiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJtYXhSYWRpdXMiLCJyYWRpdXNMZW5ndGgiLCJfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCIsInRvdGFsIiwiY2FsY3VsYXRlVG90YWwiLCJfZ2V0UmluZ1dlaWdodE9mZnNldCIsIl9jaXJjdW1mZXJlbmNlIiwiYW5pbWF0ZVJvdGF0ZSIsImNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UiLCJhbmltYXRpb25PcHRzIiwiY2VudGVyWCIsImNlbnRlclkiLCJhbmltYXRlU2NhbGUiLCJhcmMiLCJtZXRhRGF0YSIsImxvY2FsZSIsImJvcmRlckFsaWduIiwiaG92ZXJCb3JkZXJXaWR0aCIsImhvdmVyT2Zmc2V0IiwicmluZ1dlaWdodE9mZnNldCIsIndlaWdodCIsImRlc2NyaXB0b3JzIiwiYXNwZWN0UmF0aW8iLCJsZWdlbmQiLCJnZW5lcmF0ZUxhYmVscyIsInBvaW50U3R5bGUiLCJmaWxsU3R5bGUiLCJzdHJva2VTdHlsZSIsImJvcmRlckNvbG9yIiwibGluZVdpZHRoIiwibGVnZW5kSXRlbSIsInRvZ2dsZURhdGFWaXNpYmlsaXR5IiwidG9vbHRpcEl0ZW0iLCJkYXRhTGFiZWwiLCJmb3JtYXR0ZWRWYWx1ZSIsIl9kYXRhc2V0IiwiYW5pbWF0aW9uc0Rpc2FibGVkIiwiX2RhdGFzZXRJbmRleCIsIl9kZWNpbWF0ZWQiLCJzaG93TGluZSIsInNlZ21lbnQiLCJhbmltYXRlZCIsInNwYW5HYXBzIiwibWF4R2FwTGVuZ3RoIiwiZGlyZWN0VXBkYXRlIiwicHJldlBhcnNlZCIsIm51bGxEYXRhIiwiYm9yZGVyIiwiZmlyc3RQb2ludCIsImxhc3RQb2ludCIsInVwZGF0ZUNvbnRyb2xQb2ludHMiLCJfdXBkYXRlUmFkaXVzIiwibWluU2l6ZSIsImN1dG91dFBlcmNlbnRhZ2UiLCJnZXRWaXNpYmxlRGF0YXNldENvdW50IiwieENlbnRlciIsInlDZW50ZXIiLCJkYXRhc2V0U3RhcnRBbmdsZSIsImdldEluZGV4QW5nbGUiLCJkZWZhdWx0QW5nbGUiLCJjb3VudFZpc2libGVFbGVtZW50cyIsIl9jb21wdXRlQW5nbGUiLCJnZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSIsImFuZ2xlTGluZXMiLCJjaXJjdWxhciIsInBvaW50TGFiZWxzIiwiX2Z1bGxMb29wIiwicG9pbnRQb3NpdGlvbiIsImdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSIsImZpbGwiLCJ0b29sdGlwUG9zaXRpb24iLCJ1c2VGaW5hbFBvc2l0aW9uIiwiZ2V0UHJvcHMiLCJoYXNWYWx1ZSIsImZpbmFsIiwiZGVmYXVsdFJvdXRlcyIsImZvcm1hdHRlcnMiLCJudW1lcmljIiwidGlja1ZhbHVlIiwibm90YXRpb24iLCJkZWx0YSIsIm1heFRpY2siLCJjYWxjdWxhdGVEZWx0YSIsImxvZ0RlbHRhIiwibnVtRGVjaW1hbCIsIm1pbmltdW1GcmFjdGlvbkRpZ2l0cyIsIm1heGltdW1GcmFjdGlvbkRpZ2l0cyIsImxvZ2FyaXRobWljIiwicG93IiwiVGlja3MiLCJuZXdUaWNrcyIsIm1ham9yU3RhcnQiLCJtYWpvckVuZCIsInJvdW5kIiwiYm91bmRzIiwiZ3JhY2UiLCJkcmF3Qm9yZGVyIiwiZHJhd09uQ2hhcnRBcmVhIiwiZHJhd1RpY2tzIiwidGlja0xlbmd0aCIsInRpY2tXaWR0aCIsInRpY2tDb2xvciIsImJvcmRlckRhc2giLCJib3JkZXJEYXNoT2Zmc2V0IiwicGFkZGluZyIsIm1pblJvdGF0aW9uIiwibWF4Um90YXRpb24iLCJtaXJyb3IiLCJ0ZXh0U3Ryb2tlV2lkdGgiLCJ0ZXh0U3Ryb2tlQ29sb3IiLCJhdXRvU2tpcCIsImF1dG9Ta2lwUGFkZGluZyIsImxhYmVsT2Zmc2V0IiwibWlub3IiLCJtYWpvciIsImNyb3NzQWxpZ24iLCJzaG93TGFiZWxCYWNrZHJvcCIsImJhY2tkcm9wQ29sb3IiLCJiYWNrZHJvcFBhZGRpbmciLCJvZmZzZXRGcm9tRWRnZSIsInNhbXBsZSIsIm51bUl0ZW1zIiwiaW5jcmVtZW50IiwiZ2V0UGl4ZWxGb3JHcmlkTGluZSIsIm9mZnNldEdyaWRMaW5lcyIsInZhbGlkSW5kZXgiLCJlcHNpbG9uIiwibGluZVZhbHVlIiwiZ2V0VGlja01hcmtMZW5ndGgiLCJnZXRUaXRsZUhlaWdodCIsImZvbnQiLCJsaW5lSGVpZ2h0IiwidGl0bGVBbGlnbiIsInBvc2l0aW9uIiwicmV2ZXJzZUFsaWduIiwiU2NhbGUiLCJfbWFyZ2lucyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJsYWJlbFJvdGF0aW9uIiwiX3JhbmdlIiwiX2dyaWRMaW5lSXRlbXMiLCJfbGFiZWxJdGVtcyIsIl9sYWJlbFNpemVzIiwiX21heExlbmd0aCIsIl9sb25nZXN0VGV4dENhY2hlIiwiX3JldmVyc2VQaXhlbHMiLCJfdXNlck1heCIsIl91c2VyTWluIiwiX3N1Z2dlc3RlZE1heCIsIl9zdWdnZXN0ZWRNaW4iLCJfdGlja3NMZW5ndGgiLCJfYm9yZGVyVmFsdWUiLCJfZGF0YUxpbWl0c0NhY2hlZCIsImluaXQiLCJzZXRDb250ZXh0Iiwic3VnZ2VzdGVkTWluIiwic3VnZ2VzdGVkTWF4IiwibWV0YXMiLCJnZXRQYWRkaW5nIiwiZ2V0VGlja3MiLCJ4TGFiZWxzIiwieUxhYmVscyIsImJlZm9yZUxheW91dCIsIm1hcmdpbnMiLCJ0aWNrT3B0cyIsInNhbXBsZVNpemUiLCJiZWZvcmVTZXREaW1lbnNpb25zIiwic2V0RGltZW5zaW9ucyIsImFmdGVyU2V0RGltZW5zaW9ucyIsImJlZm9yZURhdGFMaW1pdHMiLCJkZXRlcm1pbmVEYXRhTGltaXRzIiwiYWZ0ZXJEYXRhTGltaXRzIiwiYmVmb3JlQnVpbGRUaWNrcyIsImJ1aWxkVGlja3MiLCJhZnRlckJ1aWxkVGlja3MiLCJzYW1wbGluZ0VuYWJsZWQiLCJfY29udmVydFRpY2tzVG9MYWJlbHMiLCJiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiY2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsInRpY2tzTGltaXQiLCJtYXhUaWNrc0xpbWl0IiwiX3RpY2tTaXplIiwibWF4U2NhbGUiLCJtYXhDaGFydCIsImRldGVybWluZU1heFRpY2tzIiwibWFqb3JJbmRpY2VzIiwiZ2V0TWFqb3JJbmRpY2VzIiwibnVtTWFqb3JJbmRpY2VzIiwiZmlyc3QiLCJza2lwTWFqb3JzIiwiZXZlbk1ham9yU3BhY2luZyIsImdldEV2ZW5TcGFjaW5nIiwiZmFjdG9ycyIsImNhbGN1bGF0ZVNwYWNpbmciLCJhdmdNYWpvclNwYWNpbmciLCJhZnRlckF1dG9Ta2lwIiwiYmVmb3JlRml0IiwiZml0IiwiYWZ0ZXJGaXQiLCJhZnRlclVwZGF0ZSIsInJldmVyc2VQaXhlbHMiLCJfYWxpZ25Ub1BpeGVscyIsImFsaWduVG9QaXhlbHMiLCJfY2FsbEhvb2tzIiwibm90aWZ5UGx1Z2lucyIsImJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiIsImdlbmVyYXRlVGlja0xhYmVscyIsImFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uIiwibnVtVGlja3MiLCJtYXhMYWJlbERpYWdvbmFsIiwiX2lzVmlzaWJsZSIsImxhYmVsU2l6ZXMiLCJfZ2V0TGFiZWxTaXplcyIsIm1heExhYmVsV2lkdGgiLCJ3aWRlc3QiLCJtYXhMYWJlbEhlaWdodCIsImhpZ2hlc3QiLCJzcXJ0IiwiYXNpbiIsInRpdGxlT3B0cyIsImdyaWRPcHRzIiwidGl0bGVIZWlnaHQiLCJ0aWNrUGFkZGluZyIsImFuZ2xlUmFkaWFucyIsImxhYmVsSGVpZ2h0IiwibGFiZWxXaWR0aCIsIl9jYWxjdWxhdGVQYWRkaW5nIiwiX2hhbmRsZU1hcmdpbnMiLCJpc1JvdGF0ZWQiLCJsYWJlbHNCZWxvd1RpY2tzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFJpZ2h0IiwiaXNGdWxsU2l6ZSIsImZ1bGxTaXplIiwiX2NvbXB1dGVMYWJlbFNpemVzIiwiY2FjaGVzIiwid2lkdGhzIiwiaGVpZ2h0cyIsImpsZW4iLCJ0aWNrRm9udCIsImZvbnRTdHJpbmciLCJuZXN0ZWRMYWJlbCIsIndpZGVzdExhYmVsU2l6ZSIsImhpZ2hlc3RMYWJlbFNpemUiLCJfcmVzb2x2ZVRpY2tGb250T3B0aW9ucyIsImdjIiwiZ2NMZW4iLCJnYXJiYWdlQ29sbGVjdCIsInZhbHVlQXQiLCJnZXRWYWx1ZUZvclBpeGVsIiwicGl4ZWwiLCJkZWNpbWFsIiwiZ2V0RGVjaW1hbEZvclBpeGVsIiwiZ2V0QmFzZVZhbHVlIiwiY3JlYXRlVGlja0NvbnRleHQiLCJvcHRpb25UaWNrcyIsInJvdCIsIl9jb21wdXRlR3JpZExpbmVJdGVtcyIsInRpY2tzTGVuZ3RoIiwidGwiLCJib3JkZXJPcHRzIiwiYXhpc1dpZHRoIiwiYXhpc0hhbGZXaWR0aCIsImFsaWduQm9yZGVyVmFsdWUiLCJib3JkZXJWYWx1ZSIsImFsaWduZWRMaW5lVmFsdWUiLCJ0eDEiLCJ0eTEiLCJ0eDIiLCJ0eTIiLCJ4MSIsInkxIiwieDIiLCJ5MiIsInBvc2l0aW9uQXhpc0lEIiwibGltaXQiLCJzdGVwIiwib3B0c0F0SW5kZXgiLCJsaW5lQ29sb3IiLCJ0aWNrQm9yZGVyRGFzaCIsInRpY2tCb3JkZXJEYXNoT2Zmc2V0IiwiX2NvbXB1dGVMYWJlbEl0ZW1zIiwidGlja0FuZFBhZGRpbmciLCJoVGlja0FuZFBhZGRpbmciLCJ0ZXh0QWxpZ24iLCJsaW5lQ291bnQiLCJ0ZXh0T2Zmc2V0IiwidGV4dEJhc2VsaW5lIiwiX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQiLCJfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCIsImhhbGZDb3VudCIsInN0cm9rZUNvbG9yIiwic3Ryb2tlV2lkdGgiLCJiYWNrZHJvcCIsInRpY2tUZXh0QWxpZ24iLCJsYWJlbFBhZGRpbmciLCJfY29tcHV0ZUxhYmVsQXJlYSIsImRyYXdCYWNrZ3JvdW5kIiwic2F2ZSIsImZpbGxSZWN0IiwicmVzdG9yZSIsImRyYXdHcmlkIiwiZHJhd0xpbmUiLCJwMSIsInAyIiwic2V0TGluZURhc2giLCJsaW5lRGFzaE9mZnNldCIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsImxhc3RMaW5lV2lkdGgiLCJkcmF3TGFiZWxzIiwiZHJhd1RpdGxlIiwidGl0bGVYIiwidGl0bGVZIiwidGl0bGVBcmdzIiwiX2xheWVycyIsInR6IiwieiIsImd6IiwiZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcyIsImF4aXNJRCIsIl9tYXhEaWdpdHMiLCJmb250U2l6ZSIsIlR5cGVkUmVnaXN0cnkiLCJvdmVycmlkZSIsImlzRm9yVHlwZSIsImlzUHJvdG90eXBlT2YiLCJwcm90byIsInBhcmVudFNjb3BlIiwiaXNJQ2hhcnRDb21wb25lbnQiLCJpdGVtRGVmYXVsdHMiLCJwcm9wZXJ0eSIsInByb3BlcnR5UGFydHMiLCJzb3VyY2VOYW1lIiwic291cmNlU2NvcGUiLCJ0YXJnZXROYW1lIiwidGFyZ2V0U2NvcGUiLCJyb3V0ZURlZmF1bHRzIiwicmVnaXN0ZXJEZWZhdWx0cyIsImNvbnRyb2xsZXJzIiwiX3R5cGVkUmVnaXN0cmllcyIsIl9lYWNoIiwiYWRkQ29udHJvbGxlcnMiLCJhZGRQbHVnaW5zIiwiYWRkU2NhbGVzIiwiZ2V0Q29udHJvbGxlciIsImdldEVsZW1lbnQiLCJnZXRQbHVnaW4iLCJnZXRTY2FsZSIsInJlbW92ZUNvbnRyb2xsZXJzIiwicmVtb3ZlRWxlbWVudHMiLCJyZW1vdmVQbHVnaW5zIiwicmVtb3ZlU2NhbGVzIiwidHlwZWRSZWdpc3RyeSIsInJlZyIsIl9nZXRSZWdpc3RyeUZvclR5cGUiLCJfZXhlYyIsIml0ZW1SZWciLCJjYW1lbE1ldGhvZCIsImludGVyYWN0aW9uIiwiX19wcm90b19fIiwiRGF0ZUFkYXB0ZXIiLCJmb3JtYXRzIiwiYW1vdW50IiwidW5pdCIsInN0YXJ0T2YiLCJ3ZWVrZGF5IiwiZW5kT2YiLCJtZW1iZXJzIiwiYWRhcHRlcnMiLCJfZGF0ZSIsImJpbmFyeVNlYXJjaCIsIm1ldGFzZXQiLCJpbnRlcnNlY3QiLCJsb29rdXBNZXRob2QiLCJnZXRSYW5nZSIsImxvIiwiaGkiLCJldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMiLCJnZXRJbnRlcnNlY3RJdGVtcyIsImluY2x1ZGVJbnZpc2libGUiLCJpc1BvaW50SW5BcmVhIiwiaW5SYW5nZSIsImdldE5lYXJlc3RJdGVtcyIsImRpc3RhbmNlTWV0cmljIiwidXNlWCIsInVzZVkiLCJwdDEiLCJwdDIiLCJkZWx0YVgiLCJkZWx0YVkiLCJnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMiLCJtaW5EaXN0YW5jZSIsImdldENlbnRlclBvaW50IiwiZGlzdGFuY2UiLCJnZXROZWFyZXN0Q2FydGVzaWFuSXRlbXMiLCJnZXROZWFyZXN0UmFkaWFsSXRlbXMiLCJnZXRBeGlzSXRlbXMiLCJyYW5nZU1ldGhvZCIsImludGVyc2VjdHNJdGVtIiwiSW50ZXJhY3Rpb24iLCJtb2RlcyIsIm5lYXJlc3QiLCJTVEFUSUNfUE9TSVRJT05TIiwiZmlsdGVyQnlQb3NpdGlvbiIsImFycmF5IiwicG9zIiwiZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzIiwiYm94Iiwic29ydEJ5V2VpZ2h0IiwidjAiLCJnZXRDb21iaW5lZE1heCIsIm1heFBhZGRpbmciLCJ1cGRhdGVNYXhQYWRkaW5nIiwiYm94UGFkZGluZyIsInVwZGF0ZURpbXMiLCJsYXlvdXQiLCJuZXdXaWR0aCIsIm91dGVyV2lkdGgiLCJuZXdIZWlnaHQiLCJvdXRlckhlaWdodCIsIndpZHRoQ2hhbmdlZCIsImhlaWdodENoYW5nZWQiLCJzYW1lIiwib3RoZXIiLCJnZXRNYXJnaW5zIiwicG9zaXRpb25zIiwibWFyZ2luIiwibWFyZ2luRm9yUG9zaXRpb25zIiwiZml0Qm94ZXMiLCJib3hlcyIsInJlZml0Qm94ZXMiLCJyZWZpdCIsImNoYW5nZWQiLCJzZXRCb3hEaW1zIiwicGxhY2VCb3hlcyIsInVzZXJQYWRkaW5nIiwicGxhY2VkIiwic3RhY2tXZWlnaHQiLCJhdXRvUGFkZGluZyIsImxheW91dHMiLCJhZGRCb3giLCJyZW1vdmVCb3giLCJsYXlvdXRJdGVtIiwibWluUGFkZGluZyIsImF2YWlsYWJsZVdpZHRoIiwiYXZhaWxhYmxlSGVpZ2h0IiwibGF5b3V0Qm94ZXMiLCJ3cmFwQm94ZXMiLCJjZW50ZXJIb3Jpem9udGFsIiwiY2VudGVyVmVydGljYWwiLCJsZWZ0QW5kVG9wIiwicmlnaHRBbmRCb3R0b20iLCJ2ZXJ0aWNhbCIsImJ1aWxkTGF5b3V0Qm94ZXMiLCJ2ZXJ0aWNhbEJveGVzIiwiaG9yaXpvbnRhbEJveGVzIiwidmlzaWJsZVZlcnRpY2FsQm94Q291bnQiLCJ2Qm94TWF4V2lkdGgiLCJoQm94TWF4SGVpZ2h0IiwiX3N0YWNrIiwiYnVpbGRTdGFja3MiLCJzZXRMYXlvdXREaW1zIiwidXBkYXRlUG9zIiwiaGFuZGxlTWF4UGFkZGluZyIsIkJhc2VQbGF0Zm9ybSIsImFjcXVpcmVDb250ZXh0IiwiY2FudmFzIiwicmVsZWFzZUNvbnRleHQiLCJnZXREZXZpY2VQaXhlbFJhdGlvIiwiZ2V0TWF4aW11bVNpemUiLCJpc0F0dGFjaGVkIiwidXBkYXRlQ29uZmlnIiwiQmFzaWNQbGF0Zm9ybSIsIkVWRU5UX1RZUEVTIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmRvd24iLCJwb2ludGVybW92ZSIsInBvaW50ZXJ1cCIsInBvaW50ZXJsZWF2ZSIsInBvaW50ZXJvdXQiLCJpc051bGxPckVtcHR5IiwiZXZlbnRMaXN0ZW5lck9wdGlvbnMiLCJwYXNzaXZlIiwicmVtb3ZlTGlzdGVuZXIiLCJub2RlTGlzdENvbnRhaW5zIiwibm9kZUxpc3QiLCJjb250YWlucyIsImNyZWF0ZUF0dGFjaE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwic3VidHJlZSIsImNyZWF0ZURldGFjaE9ic2VydmVyIiwiZHJwTGlzdGVuaW5nQ2hhcnRzIiwib2xkRGV2aWNlUGl4ZWxSYXRpbyIsIm9uV2luZG93UmVzaXplIiwiZHByIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImN1cnJlbnREZXZpY2VQaXhlbFJhdGlvIiwiY3JlYXRlUmVzaXplT2JzZXJ2ZXIiLCJjbGllbnRXaWR0aCIsIlJlc2l6ZU9ic2VydmVyIiwiY29udGVudFJlY3QiLCJsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyIsInJlbGVhc2VPYnNlcnZlciIsInVubGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMiLCJjcmVhdGVQcm94eUFuZExpc3RlbiIsIm5hdGl2ZSIsImZyb21OYXRpdmVFdmVudCIsImFkZExpc3RlbmVyIiwiRG9tUGxhdGZvcm0iLCJyZW5kZXJIZWlnaHQiLCJyZW5kZXJXaWR0aCIsImJveFNpemluZyIsImRpc3BsYXlXaWR0aCIsImRpc3BsYXlIZWlnaHQiLCJpbml0Q2FudmFzIiwicHJveGllcyIsIiRwcm94aWVzIiwiYXR0YWNoIiwiZGV0YWNoIiwiaXNDb25uZWN0ZWQiLCJfZGV0ZWN0UGxhdGZvcm0iLCJPZmZzY3JlZW5DYW52YXMiLCJQbHVnaW5TZXJ2aWNlIiwiX2luaXQiLCJub3RpZnkiLCJfY3JlYXRlRGVzY3JpcHRvcnMiLCJfZGVzY3JpcHRvcnMiLCJjYW5jZWxhYmxlIiwiaW52YWxpZGF0ZSIsIl9vbGRDYWNoZSIsIl9ub3RpZnlTdGF0ZUNoYW5nZXMiLCJsb2NhbElkcyIsImFsbFBsdWdpbnMiLCJnZXRPcHRzIiwicGx1Z2luT3B0cyIsImNyZWF0ZURlc2NyaXB0b3JzIiwicHJldmlvdXNEZXNjcmlwdG9ycyIsInBsdWdpblNjb3BlS2V5cyIsInNjcmlwdGFibGUiLCJpbmRleGFibGUiLCJhbGxLZXlzIiwiZ2V0SW5kZXhBeGlzIiwiZGF0YXNldERlZmF1bHRzIiwiZGV0ZXJtaW5lQXhpcyIsInNjYWxlT3B0aW9ucyIsImluaXRPcHRpb25zIiwiY2hhcnREZWZhdWx0cyIsImNvbmZpZ1NjYWxlcyIsImNoYXJ0SW5kZXhBeGlzIiwiZmlyc3RJRHMiLCJzY2FsZUNvbmYiLCJfcHJveHkiLCJkZWZhdWx0SWQiLCJnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzIiwiZGVmYXVsdFNjYWxlT3B0aW9ucyIsImRlZmF1bHRJRCIsImdldEF4aXNGcm9tRGVmYXVsdFNjYWxlSUQiLCJtZXJnZVNjYWxlQ29uZmlnIiwiaW5pdERhdGEiLCJrZXlDYWNoZSIsImtleXNDYWNoZWQiLCJjYWNoZWRLZXlzIiwiZ2VuZXJhdGUiLCJhZGRJZkZvdW5kIiwiQ29uZmlnIiwiX2NvbmZpZyIsImluaXRDb25maWciLCJfc2NvcGVDYWNoZSIsIl9yZXNvbHZlckNhY2hlIiwicGxhdGZvcm0iLCJjbGVhckNhY2hlIiwiZGF0YXNldFR5cGUiLCJhZGRpdGlvbmFsT3B0aW9uU2NvcGVzIiwiX2NhY2hlZFNjb3BlcyIsIm1haW5TY29wZSIsInJlc2V0Q2FjaGUiLCJrZXlMaXN0cyIsImNoYXJ0T3B0aW9uU2NvcGVzIiwicmVzb2x2ZXIiLCJzdWJQcmVmaXhlcyIsImdldFJlc29sdmVyIiwiaXNTY3JpcHRhYmxlIiwiaXNJbmRleGFibGUiLCJoYXNGdW5jdGlvbiIsIm5lZWRDb250ZXh0Iiwic3ViUmVzb2x2ZXIiLCJkZXNjcmlwdG9yRGVmYXVsdHMiLCJyZXNvbHZlckNhY2hlIiwiS05PV05fUE9TSVRJT05TIiwicG9zaXRpb25Jc0hvcml6b250YWwiLCJjb21wYXJlMkxldmVsIiwibDEiLCJvbkFuaW1hdGlvbnNDb21wbGV0ZSIsIm9uQ29tcGxldGUiLCJvbkFuaW1hdGlvblByb2dyZXNzIiwib25Qcm9ncmVzcyIsImdldENhbnZhcyIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q2hhcnQiLCJtb3ZlTnVtZXJpY0tleXMiLCJpbnRLZXkiLCJ1c2VyQ29uZmlnIiwiaW5pdGlhbENhbnZhcyIsImV4aXN0aW5nQ2hhcnQiLCJfYXNwZWN0UmF0aW8iLCJfbWV0YXNldHMiLCJfbGFzdEV2ZW50IiwiX2xpc3RlbmVycyIsIl9yZXNwb25zaXZlTGlzdGVuZXJzIiwiX3NvcnRlZE1ldGFzZXRzIiwiX3BsdWdpbnMiLCJfaGlkZGVuSW5kaWNlcyIsIl9kb1Jlc2l6ZSIsInJlc2l6ZURlbGF5IiwiX2luaXRpYWxpemUiLCJiaW5kRXZlbnRzIiwiX3Jlc2l6ZUJlZm9yZURyYXciLCJfcmVzaXplIiwibmV3U2l6ZSIsIm5ld1JhdGlvIiwib25SZXNpemUiLCJlbnN1cmVTY2FsZXNIYXZlSURzIiwic2NhbGVzT3B0aW9ucyIsImF4aXNPcHRpb25zIiwiYnVpbGRPclVwZGF0ZVNjYWxlcyIsInNjYWxlT3B0cyIsImlzUmFkaWFsIiwiZHBvc2l0aW9uIiwiZHR5cGUiLCJzY2FsZVR5cGUiLCJoYXNVcGRhdGVkIiwiX3VwZGF0ZU1ldGFzZXRzIiwiX2Rlc3Ryb3lEYXRhc2V0TWV0YSIsIl9yZW1vdmVVbnJlZmVyZW5jZWRNZXRhc2V0cyIsImJ1aWxkT3JVcGRhdGVDb250cm9sbGVycyIsIm5ld0NvbnRyb2xsZXJzIiwib3JkZXIiLCJDb250cm9sbGVyQ2xhc3MiLCJfcmVzZXRFbGVtZW50cyIsImFuaW1zRGlzYWJsZWQiLCJfdXBkYXRlU2NhbGVzIiwiX2NoZWNrRXZlbnRCaW5kaW5ncyIsIl91cGRhdGVIaWRkZW5JbmRpY2VzIiwiX21pblBhZGRpbmciLCJfdXBkYXRlTGF5b3V0IiwiX3VwZGF0ZURhdGFzZXRzIiwiX2V2ZW50SGFuZGxlciIsIl91cGRhdGVIb3ZlclN0eWxlcyIsImV4aXN0aW5nRXZlbnRzIiwibmV3RXZlbnRzIiwiZXZlbnRzIiwidW5iaW5kRXZlbnRzIiwiY2hhbmdlcyIsIl9nZXRVbmlmb3JtRGF0YUNoYW5nZXMiLCJkYXRhc2V0Q291bnQiLCJtYWtlU2V0IiwiY2hhbmdlU2V0Iiwibm9BcmVhIiwiX2lkeCIsIl91cGRhdGVEYXRhc2V0IiwibGF5ZXJzIiwiX2RyYXdEYXRhc2V0cyIsIl9kcmF3RGF0YXNldCIsInVzZUNsaXAiLCJnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlIiwic2V0RGF0YXNldFZpc2liaWxpdHkiLCJfdXBkYXRlVmlzaWJpbGl0eSIsIl9zdG9wIiwidG9CYXNlNjRJbWFnZSIsInRvRGF0YVVSTCIsImJpbmRVc2VyRXZlbnRzIiwiYmluZFJlc3BvbnNpdmVFdmVudHMiLCJfYWRkIiwiX3JlbW92ZSIsInVwZGF0ZUhvdmVyU3R5bGUiLCJwcmVmaXgiLCJnZXRBY3RpdmVFbGVtZW50cyIsInNldEFjdGl2ZUVsZW1lbnRzIiwiYWN0aXZlRWxlbWVudHMiLCJsYXN0QWN0aXZlIiwicmVwbGF5IiwiaG92ZXJPcHRpb25zIiwiaG92ZXIiLCJpbkNoYXJ0QXJlYSIsImV2ZW50RmlsdGVyIiwiX2hhbmRsZUV2ZW50IiwiX2dldEFjdGl2ZUVsZW1lbnRzIiwiaXNDbGljayIsImxhc3RFdmVudCIsImRldGVybWluZUxhc3RFdmVudCIsIm9uSG92ZXIiLCJpbnZhbGlkYXRlUGx1Z2lucyIsImNsaXBBcmMiLCJwaXhlbE1hcmdpbiIsImFuZ2xlTWFyZ2luIiwiY2xvc2VQYXRoIiwiclRoZXRhVG9YWSIsInRoZXRhIiwicGF0aEFyYyIsImlubmVyUiIsInNwYWNpbmdPZmZzZXQiLCJhdk5vZ1NwYWNpbmdSYWRpdXMiLCJhbmdsZU9mZnNldCIsIm91dGVyU3RhcnQiLCJvdXRlckVuZCIsImlubmVyU3RhcnQiLCJpbm5lckVuZCIsImFuZ2xlRGVsdGEiLCJib3JkZXJSYWRpdXMiLCJoYWxmVGhpY2tuZXNzIiwiaW5uZXJMaW1pdCIsImNvbXB1dGVPdXRlckxpbWl0Iiwib3V0ZXJBcmNMaW1pdCIsInBhcnNlQm9yZGVyUmFkaXVzJDEiLCJvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJvdXRlckVuZEFkanVzdGVkUmFkaXVzIiwib3V0ZXJTdGFydEFkanVzdGVkQW5nbGUiLCJvdXRlckVuZEFkanVzdGVkQW5nbGUiLCJpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJpbm5lckVuZEFkanVzdGVkUmFkaXVzIiwiaW5uZXJTdGFydEFkanVzdGVkQW5nbGUiLCJpbm5lckVuZEFkanVzdGVkQW5nbGUiLCJwQ2VudGVyIiwicDQiLCJQSSIsInA4Iiwib3V0ZXJTdGFydFgiLCJvdXRlclN0YXJ0WSIsIm91dGVyRW5kWCIsIm91dGVyRW5kWSIsIkFyY0VsZW1lbnQiLCJmdWxsQ2lyY2xlcyIsImNoYXJ0WCIsImNoYXJ0WSIsInJBZGp1c3QiLCJiZXR3ZWVuQW5nbGVzIiwid2l0aGluUmFkaXVzIiwiaGFsZkFuZ2xlIiwiaGFsZlJhZGl1cyIsInJhZGl1c09mZnNldCIsInRyYW5zbGF0ZSIsImRyYXdBcmMiLCJib3JkZXJKb2luU3R5bGUiLCJpbm5lciIsImxpbmVKb2luIiwiZHJhd0Z1bGxDaXJjbGVCb3JkZXJzIiwibGluZUNhcCIsImJvcmRlckNhcFN0eWxlIiwicHJldmlvdXMiLCJwYXRoVmFycyIsInBhcmFtc1N0YXJ0IiwicGFyYW1zRW5kIiwic2VnbWVudFN0YXJ0Iiwic2VnbWVudEVuZCIsIm91dHNpZGUiLCJwYXRoU2VnbWVudCIsImxpbmVNZXRob2QiLCJzdGVwcGVkIiwidGVuc2lvbiIsImN1YmljSW50ZXJwb2xhdGlvbk1vZGUiLCJnZXRMaW5lTWV0aG9kIiwiZmFzdFBhdGhTZWdtZW50IiwicHJldlgiLCJsYXN0WSIsImF2Z1giLCJjb3VudFgiLCJwb2ludEluZGV4IiwiZHJhd1giLCJ0cnVuY1giLCJfZ2V0U2VnbWVudE1ldGhvZCIsInVzZVBhdGgyRCIsIlBhdGgyRCIsIkxpbmVFbGVtZW50IiwiX3BhdGgiLCJfcG9pbnRzIiwiX3NlZ21lbnRzIiwiX3BvaW50c1VwZGF0ZWQiLCJpbnRlcnBvbGF0ZSIsIl9pbnRlcnBvbGF0ZSIsIl9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kIiwiaW50ZXJwb2xhdGVkIiwic2VnbWVudE1ldGhvZCIsInN0cm9rZVBhdGhXaXRoQ2FjaGUiLCJzdHJva2VQYXRoRGlyZWN0IiwiaW5SYW5nZSQxIiwiaGl0UmFkaXVzIiwiY2FwQmV6aWVyUG9pbnRzIiwiUG9pbnRFbGVtZW50IiwibW91c2VYIiwibW91c2VZIiwiaW5YUmFuZ2UiLCJpbllSYW5nZSIsImhvdmVyUmFkaXVzIiwiZ2V0QmFyQm91bmRzIiwiYmFyIiwiaGFsZiIsInNraXBPckxpbWl0Iiwic2tpcFgiLCJza2lwWSIsImFkZE5vcm1hbFJlY3RQYXRoIiwicmVjdCIsImluZmxhdGVSZWN0IiwicmVmUmVjdCIsIm91dGVyIiwibWF4VyIsIm1heEgiLCJwYXJzZUJvcmRlcldpZHRoIiwibWF4UiIsImVuYWJsZUJvcmRlciIsInRvcExlZnQiLCJ0b3BSaWdodCIsImJvdHRvbUxlZnQiLCJib3R0b21SaWdodCIsInBhcnNlQm9yZGVyUmFkaXVzIiwiYm91bmRpbmdSZWN0cyIsImFkZFJlY3RQYXRoIiwiY2xlYW5EZWNpbWF0ZWREYXRhc2V0IiwiY2xlYW5EZWNpbWF0ZWREYXRhIiwicGx1Z2luX2RlY2ltYXRpb24iLCJhbGdvcml0aG0iLCJiZWZvcmVFbGVtZW50c1VwZGF0ZSIsInhBeGlzIiwiZGVjaW1hdGVkIiwicG9pbnRDb3VudCIsImdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHNTaW1wbGlmaWVkIiwidGhyZXNob2xkIiwic2FtcGxlcyIsImJ1Y2tldFdpZHRoIiwic2FtcGxlZEluZGV4IiwibWF4QXJlYVBvaW50IiwibWF4QXJlYSIsIm5leHRBIiwiYXZnWSIsImF2Z1JhbmdlU3RhcnQiLCJhdmdSYW5nZUVuZCIsImF2Z1JhbmdlTGVuZ3RoIiwicmFuZ2VPZmZzIiwicmFuZ2VUbyIsInBvaW50QXgiLCJwb2ludEF5IiwibHR0YkRlY2ltYXRpb24iLCJtaW5JbmRleCIsIm1heEluZGV4IiwieE1pbiIsImludGVybWVkaWF0ZUluZGV4MSIsImludGVybWVkaWF0ZUluZGV4MiIsIm1pbk1heERlY2ltYXRpb24iLCJfZ2V0Qm91bmRzIiwiX2ZpbmRTZWdtZW50RW5kIiwiX2dldEVkZ2UiLCJfY3JlYXRlQm91bmRhcnlMaW5lIiwiYm91bmRhcnkiLCJsaW5lUG9pbnRzIiwiX3BvaW50c0Zyb21TZWdtZW50cyIsIl9zaG91bGRBcHBseUZpbGwiLCJfcmVzb2x2ZVRhcmdldCIsInNvdXJjZXMiLCJwcm9wYWdhdGUiLCJ2aXNpdGVkIiwiX2RlY29kZUZpbGwiLCJmaWxsT3B0aW9uIiwicGFyc2VGaWxsT3B0aW9uIiwiZmlyc3RDaCIsImRlY29kZVRhcmdldEluZGV4IiwiYWRkUG9pbnRzQmVsb3ciLCJzb3VyY2VQb2ludCIsImxpbmVzQmVsb3ciLCJwb3N0cG9uZWQiLCJmaW5kUG9pbnQiLCJwb2ludFZhbHVlIiwiZmlyc3RWYWx1ZSIsImxhc3RWYWx1ZSIsInNpbXBsZUFyYyIsIl9kcmF3ZmlsbCIsImdldExpbmVCeUluZGV4Iiwic291cmNlUG9pbnRzIiwiYmVsb3ciLCJnZXRMaW5lc0JlbG93IiwiX2J1aWxkU3RhY2tMaW5lIiwiX2dldFRhcmdldFZhbHVlIiwiY29tcHV0ZUNpcmN1bGFyQm91bmRhcnkiLCJfZ2V0VGFyZ2V0UGl4ZWwiLCJjb21wdXRlTGluZWFyQm91bmRhcnkiLCJjb21wdXRlQm91bmRhcnkiLCJfZ2V0VGFyZ2V0IiwibGluZU9wdHMiLCJhYm92ZSIsImNsaXBWZXJ0aWNhbCIsImRvRmlsbCIsImNsaXBZIiwibGluZUxvb3AiLCJ0cG9pbnRzIiwidGFyZ2V0U2VnbWVudHMiLCJ0Z3QiLCJzdWJCb3VuZHMiLCJmaWxsU291cmNlcyIsImZpbGxTb3VyY2UiLCJub3RTaGFwZSIsImNsaXBCb3VuZHMiLCJpbnRlcnBvbGF0ZWRMaW5lVG8iLCJ0YXJnZXRMb29wIiwiaW50ZXJwb2xhdGVkUG9pbnQiLCJhZnRlckRhdGFzZXRzVXBkYXRlIiwiX2FyZ3MiLCIkZmlsbGVyIiwiYmVmb3JlRHJhdyIsImRyYXdUaW1lIiwiYmVmb3JlRGF0YXNldHNEcmF3IiwiYmVmb3JlRGF0YXNldERyYXciLCJnZXRCb3hTaXplIiwibGFiZWxPcHRzIiwiYm94SGVpZ2h0IiwiYm94V2lkdGgiLCJ1c2VQb2ludFN0eWxlIiwicG9pbnRTdHlsZVdpZHRoIiwiaXRlbUhlaWdodCIsIl9hZGRlZCIsImxlZ2VuZEhpdEJveGVzIiwiX2hvdmVyZWRJdGVtIiwiZG91Z2hudXRNb2RlIiwibGVnZW5kSXRlbXMiLCJjb2x1bW5TaXplcyIsImxpbmVXaWR0aHMiLCJidWlsZExhYmVscyIsImxhYmVsRm9udCIsIl9jb21wdXRlVGl0bGVIZWlnaHQiLCJfZml0Um93cyIsIl9maXRDb2xzIiwiaGl0Ym94ZXMiLCJ0b3RhbEhlaWdodCIsIml0ZW1XaWR0aCIsIm1lYXN1cmVUZXh0IiwiaGVpZ2h0TGltaXQiLCJ0b3RhbFdpZHRoIiwiY3VycmVudENvbFdpZHRoIiwiY3VycmVudENvbEhlaWdodCIsImNvbCIsImFkanVzdEhpdEJveGVzIiwicnRsIiwicnRsSGVscGVyIiwiaGl0Ym94IiwibGVmdEZvckx0ciIsIl9kcmF3IiwiZGVmYXVsdENvbG9yIiwiZm9udENvbG9yIiwiaGFsZkZvbnRTaXplIiwidGV4dERpcmVjdGlvbiIsInRleHRXaWR0aCIsInNldFdpZHRoIiwibGluZURhc2giLCJkcmF3T3B0aW9ucyIsIlNRUlQyIiwieFBsdXMiLCJ5Qm94VG9wIiwieEJveExlZnQiLCJkcmF3TGVnZW5kQm94Iiwic3RyaWtldGhyb3VnaCIsImZpbGxUZXh0IiwidGl0bGVGb250IiwidGl0bGVQYWRkaW5nIiwidG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUiLCJfZ2V0TGVnZW5kSXRlbUF0IiwiaGl0Qm94IiwibGgiLCJoYW5kbGVFdmVudCIsImlzTGlzdGVuZWQiLCJob3ZlcmVkSXRlbSIsInNhbWVJdGVtIiwicGx1Z2luX2xlZ2VuZCIsIl9lbGVtZW50IiwiYWZ0ZXJFdmVudCIsImNpIiwiX3BhZGRpbmciLCJ0ZXh0U2l6ZSIsIl9kcmF3QXJncyIsImZvbnRPcHRzIiwicGx1Z2luX3RpdGxlIiwidGl0bGVCbG9jayIsImNyZWF0ZVRpdGxlIiwicGx1Z2luX3N1YnRpdGxlIiwicG9zaXRpb25lcnMiLCJhdmVyYWdlIiwiZXZlbnRQb3NpdGlvbiIsIm5lYXJlc3RFbGVtZW50IiwidHAiLCJwdXNoT3JDb25jYXQiLCJ0b1B1c2giLCJzcGxpdE5ld2xpbmVzIiwiY3JlYXRlVG9vbHRpcEl0ZW0iLCJnZXRUb29sdGlwU2l6ZSIsImZvb3RlciIsImJvZHlGb250IiwiZm9vdGVyRm9udCIsInRpdGxlTGluZUNvdW50IiwiZm9vdGVyTGluZUNvdW50IiwiYm9keUxpbmVJdGVtQ291bnQiLCJjb21iaW5lZEJvZHlMZW5ndGgiLCJib2R5SXRlbSIsImJlZm9yZUJvZHkiLCJhZnRlckJvZHkiLCJ0aXRsZVNwYWNpbmciLCJ0aXRsZU1hcmdpbkJvdHRvbSIsImRpc3BsYXlDb2xvcnMiLCJib2R5U3BhY2luZyIsImZvb3Rlck1hcmdpblRvcCIsImZvb3RlclNwYWNpbmciLCJ3aWR0aFBhZGRpbmciLCJtYXhMaW5lV2lkdGgiLCJkZXRlcm1pbmVYQWxpZ24iLCJ5QWxpZ24iLCJjaGFydFdpZHRoIiwieEFsaWduIiwiY2FyZXQiLCJjYXJldFNpemUiLCJjYXJldFBhZGRpbmciLCJkb2VzTm90Rml0V2l0aEFsaWduIiwiZGV0ZXJtaW5lQWxpZ25tZW50IiwiZGV0ZXJtaW5lWUFsaWduIiwiZ2V0QmFja2dyb3VuZFBvaW50IiwiYWxpZ25tZW50IiwiY29ybmVyUmFkaXVzIiwicGFkZGluZ0FuZFNpemUiLCJhbGlnblgiLCJhbGlnblkiLCJnZXRBbGlnbmVkWCIsImdldEJlZm9yZUFmdGVyQm9keUxpbmVzIiwib3ZlcnJpZGVDYWxsYmFja3MiLCJvcGFjaXR5IiwiX2V2ZW50UG9zaXRpb24iLCJfc2l6ZSIsIl9jYWNoZWRBbmltYXRpb25zIiwiX3Rvb2x0aXBJdGVtcyIsImRhdGFQb2ludHMiLCJjYXJldFgiLCJjYXJldFkiLCJsYWJlbENvbG9ycyIsImxhYmVsUG9pbnRTdHlsZXMiLCJsYWJlbFRleHRDb2xvcnMiLCJ0b29sdGlwSXRlbXMiLCJnZXRUaXRsZSIsImJlZm9yZVRpdGxlIiwiYWZ0ZXJUaXRsZSIsImdldEJlZm9yZUJvZHkiLCJnZXRCb2R5IiwiYm9keUl0ZW1zIiwic2NvcGVkIiwiYmVmb3JlTGFiZWwiLCJhZnRlckxhYmVsIiwiZ2V0QWZ0ZXJCb2R5IiwiZ2V0Rm9vdGVyIiwiYmVmb3JlRm9vdGVyIiwiYWZ0ZXJGb290ZXIiLCJfY3JlYXRlSXRlbXMiLCJpdGVtU29ydCIsImxhYmVsQ29sb3IiLCJsYWJlbFBvaW50U3R5bGUiLCJsYWJlbFRleHRDb2xvciIsInBvc2l0aW9uQW5kU2l6ZSIsImJhY2tncm91bmRQb2ludCIsImV4dGVybmFsIiwiZHJhd0NhcmV0IiwidG9vbHRpcFBvaW50IiwiY2FyZXRQb3NpdGlvbiIsImdldENhcmV0UG9zaXRpb24iLCJ4MyIsInkzIiwicHRYIiwicHRZIiwicHQiLCJ0aXRsZUNvbG9yIiwiX2RyYXdDb2xvckJveCIsImNvbG9yWCIsInJ0bENvbG9yWCIsInlPZmZTZXQiLCJjb2xvclkiLCJtdWx0aUtleUJhY2tncm91bmQiLCJvdXRlclgiLCJpbm5lclgiLCJzdHJva2VSZWN0IiwiZHJhd0JvZHkiLCJib2R5QWxpZ24iLCJib2R5TGluZUhlaWdodCIsInhMaW5lUGFkZGluZyIsImZpbGxMaW5lT2ZUZXh0IiwiYm9keUFsaWduRm9yQ2FsY3VsYXRpb24iLCJib2R5Q29sb3IiLCJkcmF3Rm9vdGVyIiwiZm9vdGVyQWxpZ24iLCJmb290ZXJDb2xvciIsInRvb2x0aXBTaXplIiwicXVhZHJhdGljQ3VydmVUbyIsIl91cGRhdGVBbmltYXRpb25UYXJnZXQiLCJhbmltWCIsImFuaW1ZIiwiX3dpbGxSZW5kZXIiLCJoYXNUb29sdGlwQ29udGVudCIsImdsb2JhbEFscGhhIiwicG9zaXRpb25DaGFuZ2VkIiwiX3Bvc2l0aW9uQ2hhbmdlZCIsIl9pZ25vcmVSZXBsYXlFdmVudHMiLCJwbHVnaW5fdG9vbHRpcCIsImFmdGVySW5pdCIsImFmdGVyRHJhdyIsImxhYmVsQ291bnQiLCJEZWNpbWF0aW9uIiwiRmlsbGVyIiwiU3ViVGl0bGUiLCJfc3RhcnRWYWx1ZSIsIl92YWx1ZVJhbmdlIiwiX2FkZGVkTGFiZWxzIiwiYWRkZWQiLCJpc0Zpbml0ZSIsImFkZGVkTGFiZWxzIiwiYWRkSWZTdHJpbmciLCJsYXN0SW5kZXhPZiIsImZpbmRPckFkZExhYmVsIiwicmVsYXRpdmVMYWJlbFNpemUiLCJtaW5TcGFjaW5nIiwicmFkIiwiTGluZWFyU2NhbGVCYXNlIiwiX2VuZFZhbHVlIiwiaGFuZGxlVGlja1JhbmdlT3B0aW9ucyIsInNldE1pbiIsInNldE1heCIsIm1pblNpZ24iLCJtYXhTaWduIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJnZXRUaWNrTGltaXQiLCJtYXhUaWNrcyIsInN0ZXBTaXplIiwiY29tcHV0ZVRpY2tMaW1pdCIsImdlbmVyYXRpb25PcHRpb25zIiwiZGF0YVJhbmdlIiwibWF4RGlnaXRzIiwiaW5jbHVkZUJvdW5kcyIsIm1heFNwYWNlcyIsInJtaW4iLCJybWF4IiwiY291bnREZWZpbmVkIiwibmljZU1pbiIsIm5pY2VNYXgiLCJudW1TcGFjZXMiLCJkZWNpbWFsUGxhY2VzIiwiZ2VuZXJhdGVUaWNrcyQxIiwiaXNNYWpvciIsInRpY2tWYWwiLCJMb2dhcml0aG1pY1NjYWxlIiwiX3plcm8iLCJleHAiLCJlbmRFeHAiLCJlbmRTaWduaWZpY2FuZCIsInNpZ25pZmljYW5kIiwibGFzdFRpY2siLCJnZW5lcmF0ZVRpY2tzIiwiZ2V0VGlja0JhY2tkcm9wSGVpZ2h0IiwiZGV0ZXJtaW5lTGltaXRzIiwidXBkYXRlTGltaXRzIiwibGltaXRzIiwiaExpbWl0cyIsInZMaW1pdHMiLCJnZXRUZXh0QWxpZ25Gb3JBbmdsZSIsInlGb3JBbmdsZSIsInBhdGhSYWRpdXNMaW5lIiwiZ2V0UG9pbnRQb3NpdGlvbiIsIlJhZGlhbExpbmVhclNjYWxlIiwiZHJhd2luZ0FyZWEiLCJfcG9pbnRMYWJlbHMiLCJfcG9pbnRMYWJlbEl0ZW1zIiwidmFsdWVDb3VudCIsInBvaW50TGFiZWxPcHRzIiwiYWRkaXRpb25hbEFuZ2xlIiwiY2VudGVyUG9pbnRMYWJlbHMiLCJnZXRQb2ludExhYmVsQ29udGV4dCIsInBsRm9udCIsInNldENlbnRlclBvaW50Iiwib3V0ZXJEaXN0YW5jZSIsInBvaW50TGFiZWxQb3NpdGlvbiIsImJ1aWxkUG9pbnRMYWJlbEl0ZW1zIiwiZml0V2l0aFBvaW50TGFiZWxzIiwibGVmdE1vdmVtZW50IiwicmlnaHRNb3ZlbWVudCIsInRvcE1vdmVtZW50IiwiYm90dG9tTW92ZW1lbnQiLCJhbmdsZU11bHRpcGxpZXIiLCJzY2FsaW5nRmFjdG9yIiwiZ2V0VmFsdWVGb3JEaXN0YW5jZUZyb21DZW50ZXIiLCJzY2FsZWREaXN0YW5jZSIsInBvaW50TGFiZWwiLCJjcmVhdGVQb2ludExhYmVsQ29udGV4dCIsImRpc3RhbmNlRnJvbUNlbnRlciIsImdldEJhc2VQb3NpdGlvbiIsImdldFBvaW50TGFiZWxQb3NpdGlvbiIsImJhY2tkcm9wTGVmdCIsImJhY2tkcm9wVG9wIiwiYmFja2Ryb3BXaWR0aCIsImJhY2tkcm9wSGVpZ2h0IiwiZHJhd1BvaW50TGFiZWxzIiwiZ3JpZExpbmVPcHRzIiwiZHJhd1JhZGl1c0xpbmUiLCJyb3RhdGUiLCJhbmltYXRlIiwiSU5URVJWQUxTIiwibWlsbGlzZWNvbmQiLCJjb21tb24iLCJzdGVwcyIsInNlY29uZCIsIm1pbnV0ZSIsImhvdXIiLCJkYXkiLCJ3ZWVrIiwibW9udGgiLCJxdWFydGVyIiwieWVhciIsIlVOSVRTIiwic29ydGVyIiwiYWRhcHRlciIsIl9hZGFwdGVyIiwicGFyc2VyIiwiaXNvV2Vla2RheSIsIl9wYXJzZU9wdHMiLCJkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzIiwibWluVW5pdCIsImNhcGFjaXR5IiwiaW50ZXJ2YWwiLCJhZGRUaWNrIiwidGltZXN0YW1wcyIsInRpY2tzRnJvbVRpbWVzdGFtcHMiLCJtYWpvclVuaXQiLCJzZXRNYWpvclRpY2tzIiwiVGltZVNjYWxlIiwiX3VuaXQiLCJfbWFqb3JVbml0IiwiX29mZnNldHMiLCJfbm9ybWFsaXplZCIsImRpc3BsYXlGb3JtYXRzIiwiX2FwcGx5Qm91bmRzIiwiX2dldExhYmVsQm91bmRzIiwiZ2V0TGFiZWxUaW1lc3RhbXBzIiwidGltZU9wdHMiLCJfZ2VuZXJhdGUiLCJfZ2V0TGFiZWxDYXBhY2l0eSIsImRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nIiwiZGV0ZXJtaW5lTWFqb3JVbml0IiwiaW5pdE9mZnNldHMiLCJvZmZzZXRBZnRlckF1dG9za2lwIiwiZ2V0RGVjaW1hbEZvclZhbHVlIiwiaGFzV2Vla2RheSIsImdldERhdGFUaW1lc3RhbXBzIiwidG9vbHRpcEZvcm1hdCIsImRhdGV0aW1lIiwiX3RpY2tGb3JtYXRGdW5jdGlvbiIsIm1pbm9yRm9ybWF0IiwibWFqb3JGb3JtYXQiLCJvZmZzZXRzIiwiX2dldExhYmVsU2l6ZSIsInRpY2tzT3B0cyIsInRpY2tMYWJlbFdpZHRoIiwiY29zUm90YXRpb24iLCJzaW5Sb3RhdGlvbiIsInRpY2tGb250U2l6ZSIsImV4YW1wbGVUaW1lIiwiZXhhbXBsZUxhYmVsIiwicHJldlNvdXJjZSIsIm5leHRTb3VyY2UiLCJwcmV2VGFyZ2V0Iiwic3BhbiIsIlRpbWVTZXJpZXNTY2FsZSIsIl90YWJsZSIsIl9taW5Qb3MiLCJfdGFibGVSYW5nZSIsIl9nZXRUaW1lc3RhbXBzRm9yVGFibGUiLCJidWlsZExvb2t1cFRhYmxlIiwicmVnaXN0ZXJhYmxlcyIsIm5vb3AiLCJpc051bGxPclVuZGVmIiwiaXNOdW1iZXJGaW5pdGUiLCJmaW5pdGVPckRlZmF1bHQiLCJ2YWx1ZU9yRGVmYXVsdCIsInRvUGVyY2VudGFnZSIsImRpbWVuc2lvbiIsInRvRGltZW5zaW9uIiwibG9vcGFibGUiLCJfZWxlbWVudHNFcXVhbCIsImEwIiwiYTEiLCJjbG9uZSQxIiwia2xlbiIsImlzVmFsaWRLZXkiLCJfbWVyZ2VyIiwidHZhbCIsInN2YWwiLCJtZXJnZSIsIm1lcmdlciIsIm1lcmdlSWYiLCJfbWVyZ2VySWYiLCJfZGVwcmVjYXRlZCIsImtleVJlc29sdmVycyIsInJlc29sdmVPYmplY3RLZXkiLCJfc3BsaXRLZXkiLCJfZ2V0S2V5UmVzb2x2ZXIiLCJfY2FwaXRhbGl6ZSIsImRlZmluZWQiLCJzZXRzRXF1YWwiLCJfaXNDbGlja0V2ZW50IiwiVEFVIiwiUElUQVUiLCJJTkZJTklUWSIsIlJBRF9QRVJfREVHIiwiSEFMRl9QSSIsIlFVQVJURVJfUEkiLCJUV09fVEhJUkRTX1BJIiwibG9nMTAiLCJuaWNlTnVtIiwicm91bmRlZFJhbmdlIiwiYWxtb3N0RXF1YWxzIiwibmljZVJhbmdlIiwiZnJhY3Rpb24iLCJfZmFjdG9yaXplIiwiaXNOdW1iZXIiLCJhbG1vc3RXaG9sZSIsInJvdW5kZWQiLCJfc2V0TWluQW5kTWF4QnlLZXkiLCJ0b1JhZGlhbnMiLCJkZWdyZWVzIiwidG9EZWdyZWVzIiwicmFkaWFucyIsIl9kZWNpbWFsUGxhY2VzIiwiZ2V0QW5nbGVGcm9tUG9pbnQiLCJjZW50cmVQb2ludCIsImFuZ2xlUG9pbnQiLCJkaXN0YW5jZUZyb21YQ2VudGVyIiwiZGlzdGFuY2VGcm9tWUNlbnRlciIsInJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciIsImF0YW4yIiwiZGlzdGFuY2VCZXR3ZWVuUG9pbnRzIiwiX2FuZ2xlRGlmZiIsIl9ub3JtYWxpemVBbmdsZSIsIl9hbmdsZUJldHdlZW4iLCJzYW1lQW5nbGVJc0Z1bGxDaXJjbGUiLCJhbmdsZVRvU3RhcnQiLCJhbmdsZVRvRW5kIiwic3RhcnRUb0FuZ2xlIiwiZW5kVG9BbmdsZSIsIl9saW1pdFZhbHVlIiwiX2ludDE2UmFuZ2UiLCJfaXNCZXR3ZWVuIiwiX2xvb2t1cCIsImNtcCIsIm1pZCIsIl9sb29rdXBCeUtleSIsIl9ybG9va3VwQnlLZXkiLCJfZmlsdGVyQmV0d2VlbiIsImFycmF5RXZlbnRzIiwibGlzdGVuQXJyYXlFdmVudHMiLCJfY2hhcnRqcyIsInVubGlzdGVuQXJyYXlFdmVudHMiLCJzdHViIiwiX2FycmF5VW5pcXVlIiwicGl4ZWxTaXplIiwiZm9udFN0eWxlIiwiZm9udEZhbWlseSIsInJlcXVlc3RBbmltRnJhbWUiLCJ0aHJvdHRsZWQiLCJ1cGRhdGVGbiIsInVwZGF0ZUFyZ3MiLCJ0aWNraW5nIiwicmVzdCIsIl90b0xlZnRSaWdodENlbnRlciIsIl9hbGlnblN0YXJ0RW5kIiwiX3RleHRYIiwiX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMiLCJfc2NhbGVSYW5nZXNDaGFuZ2VkIiwiX3NjYWxlUmFuZ2VzIiwibmV3UmFuZ2VzIiwieG1pbiIsInhtYXgiLCJ5bWluIiwieW1heCIsImF0RWRnZSIsImVsYXN0aWNJbiIsImVsYXN0aWNPdXQiLCJsaW5lYXIiLCJlYXNlSW5RdWFkIiwiZWFzZU91dFF1YWQiLCJlYXNlSW5PdXRRdWFkIiwiZWFzZUluQ3ViaWMiLCJlYXNlT3V0Q3ViaWMiLCJlYXNlSW5PdXRDdWJpYyIsImVhc2VJblF1YXJ0IiwiZWFzZU91dFF1YXJ0IiwiZWFzZUluT3V0UXVhcnQiLCJlYXNlSW5RdWludCIsImVhc2VPdXRRdWludCIsImVhc2VJbk91dFF1aW50IiwiZWFzZUluU2luZSIsImVhc2VPdXRTaW5lIiwiZWFzZUluT3V0U2luZSIsImVhc2VJbkV4cG8iLCJlYXNlT3V0RXhwbyIsImVhc2VJbk91dEV4cG8iLCJlYXNlSW5DaXJjIiwiZWFzZU91dENpcmMiLCJlYXNlSW5PdXRDaXJjIiwiZWFzZUluRWxhc3RpYyIsImVhc2VPdXRFbGFzdGljIiwiZWFzZUluT3V0RWxhc3RpYyIsImVhc2VJbkJhY2siLCJlYXNlT3V0QmFjayIsImVhc2VJbk91dEJhY2siLCJlYXNlSW5Cb3VuY2UiLCJlYXNlT3V0Qm91bmNlIiwiZWFzZUluT3V0Qm91bmNlIiwibGltIiwicDJiIiwibjJiIiwiYjJuIiwibjJwIiwibWFwJDEiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJoMSIsImgyIiwiZXEiLCJIVUVfUkUiLCJoc2wycmdibiIsImhzdjJyZ2JuIiwiaHdiMnJnYm4iLCJyZ2IiLCJyZ2IyaHNsIiwiaHVlVmFsdWUiLCJjYWxsbiIsImhzbDJyZ2IiLCJodWUiLCJaIiwiWSIsIlgiLCJXIiwiViIsIlUiLCJTIiwiUiIsIlEiLCJPIiwiTiIsIk0iLCJMIiwiSyIsIkciLCJJIiwiSiIsIm5hbWVzJDEiLCJPaWNlWGUiLCJhbnRpcXVld0V0ZSIsImFxdWEiLCJhcXVhbWFyUmUiLCJhenVZIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5LZWRPbW9uZCIsIlhlIiwiWGV2aVRldCIsImJQd24iLCJidXJseXdvb2QiLCJjYU10WGUiLCJLYXJ0WXVzZSIsIktvY1RhdGUiLCJjU08iLCJjU25mbG93ZXJYZSIsImNTbnNpbGsiLCJjcmltc29uIiwiY3lhbiIsInhYZSIsInhjeWFuIiwieGdUTW5QZCIsInhXYXkiLCJ4Z1lGIiwieGdZeSIsInhraGFraSIsInhtYWdGdGEiLCJ4VGl2ZWdZRiIsInhTYW5nZSIsInhTY0VkIiwieFlkIiwieHNPbW9uIiwieHNIZ1lGIiwieFVYZSIsInhVV2F5IiwieFVnWXkiLCJ4UWUiLCJ4dmlUZXQiLCJkQXBwUmsiLCJkQXBza3lYZSIsImRpbVdheSIsImRpbWdZeSIsImRvZGdlclhlIiwiZmlZYnJpY2siLCJmbFNPd0V0ZSIsImZvWXN0V0FuIiwiZnVLc2lhIiwiZ2FSc2JTbyIsImdob3N0d0V0ZSIsImdUZCIsImdUTW5QZCIsIldheSIsImdZRiIsImdZRkx3IiwiZ1l5IiwiaG9uZXlNdyIsImhvdHBSayIsIlJkaWFuWWQiLCJSZGlnbyIsIml2U3kiLCJraGFraSIsImxhdkZNciIsImxhdkZNclhzaCIsImxhd25nWUYiLCJObW9uY0VmZm9uIiwiWlhlIiwiWmNTTyIsIlpjeWFuIiwiWmdUTW5QZEx3IiwiWldheSIsIlpnWUYiLCJaZ1l5IiwiWnBSayIsIlpzT21vbiIsIlpzSGdZRiIsIlpza3lYZSIsIlpVV2F5IiwiWlVnWXkiLCJac3RBbFhlIiwiWkx3IiwibGltZSIsImxpbWVnWUYiLCJsUkYiLCJtYWdGdGEiLCJtYVBvbiIsIlZhcXVhbWFyUmUiLCJWWGUiLCJWU2NFZCIsIlZwdXJwTiIsIlZzSGdZRiIsIlZVWGUiLCJWc3ByUmdnWUYiLCJWUWUiLCJWdmlUZXRZZCIsIm1pZG5pZ2h0WGUiLCJtUnRjWWFtIiwibWlzdHlQc2UiLCJtb2NjYXNSIiwibmF2YWpvd0V0ZSIsIm5hdnkiLCJUZGxhY2UiLCJUaXZlIiwiVGl2ZWRCYiIsIlNhbmdlIiwiU2FuZ2VZZCIsIlNjRWQiLCJwT2VnVE1uUGQiLCJwT2VnWUYiLCJwT2VRZSIsInBPZXZpVGV0WWQiLCJwYXBheWF3RXAiLCJwSEtwdWZmIiwicGVydSIsInBSayIsInBsdW0iLCJwb3dNclhlIiwicHVycE4iLCJZYmVjY2FwdXJwTiIsIllkIiwiUHN5YnJvd24iLCJQeU9YZSIsInNhZGROYlB3biIsInNPbW9uIiwic2FuZHliUHduIiwic0hnWUYiLCJzSHNoZWxsIiwic2lGbmEiLCJzaWx2ZXIiLCJza3lYZSIsIlVYZSIsIlVXYXkiLCJVZ1l5Iiwic25vdyIsInNwclJnZ1lGIiwic3RBbFhlIiwidGFuIiwidGVPIiwidEVzdE4iLCJ0b21hdG8iLCJRZSIsInZpVGV0IiwiSkh0Iiwid0V0ZSIsIndFdGVzbW9rZSIsIkx3IiwiTHdnWUYiLCJSR0JfUkUiLCJtb2RIU0wiLCJmcm9tT2JqZWN0IiwiZnVuY3Rpb25QYXJzZSIsInJnYlBhcnNlIiwiaHdiMnJnYiIsImhzdjJyZ2IiLCJodWVQYXJzZSIsIkNvbG9yIiwidW5wYWNrZWQiLCJ0a2V5cyIsIm9rIiwibmsiLCJ1bnBhY2siLCJuYW1lUGFyc2UiLCJfcmdiIiwiX3ZhbGlkIiwicmdiU3RyaW5nIiwiaXNTaG9ydCIsImhzbFN0cmluZyIsIncyIiwidzEiLCJyZ2IxIiwicmdiMiIsImNsZWFyZXIiLCJncmV5c2NhbGUiLCJvcGFxdWVyIiwibmVnYXRlIiwibGlnaHRlbiIsImRhcmtlbiIsInNhdHVyYXRlIiwiZGVzYXR1cmF0ZSIsImRlZyIsImluZGV4X2VzbSIsImlzUGF0dGVybk9yR3JhZGllbnQiLCJnZXRIb3ZlckNvbG9yIiwiZ2V0U2NvcGUkMSIsImZhbWlseSIsImhvdmVyQmFja2dyb3VuZENvbG9yIiwiaG92ZXJCb3JkZXJDb2xvciIsImhvdmVyQ29sb3IiLCJkZXNjcmliZSIsInJvdXRlIiwic2NvcGVPYmplY3QiLCJ0YXJnZXRTY29wZU9iamVjdCIsInByaXZhdGVOYW1lIiwidG9Gb250U3RyaW5nIiwiX21lYXN1cmVUZXh0IiwibG9uZ2VzdCIsIl9sb25nZXN0VGV4dCIsImFycmF5T2ZUaGluZ3MiLCJ0aGluZyIsIm5lc3RlZFRoaW5nIiwiX2FsaWduUGl4ZWwiLCJoYWxmV2lkdGgiLCJjbGVhckNhbnZhcyIsInJlc2V0VHJhbnNmb3JtIiwiY2xlYXJSZWN0IiwiZHJhd1BvaW50IiwiZHJhd1BvaW50TGVnZW5kIiwieE9mZnNldCIsInlPZmZzZXQiLCJkcmF3SW1hZ2UiLCJlbGxpcHNlIiwiU1FSVDFfMiIsIl9pc1BvaW50SW5BcmVhIiwiY2xpcEFyZWEiLCJ1bmNsaXBBcmVhIiwiX3N0ZXBwZWRMaW5lVG8iLCJmbGlwIiwibWlkcG9pbnQiLCJfYmV6aWVyQ3VydmVUbyIsImJlemllckN1cnZlVG8iLCJjcDF4IiwiY3AyeCIsImNwMXkiLCJjcDJ5IiwicmVuZGVyVGV4dCIsInNldFJlbmRlck9wdHMiLCJzdHJva2VUZXh0IiwiZGVjb3JhdGVUZXh0IiwidW5kZXJsaW5lIiwibWV0cmljcyIsImFjdHVhbEJvdW5kaW5nQm94TGVmdCIsImFjdHVhbEJvdW5kaW5nQm94UmlnaHQiLCJhY3R1YWxCb3VuZGluZ0JveEFzY2VudCIsImFjdHVhbEJvdW5kaW5nQm94RGVzY2VudCIsInlEZWNvcmF0aW9uIiwiZGVjb3JhdGlvbldpZHRoIiwiYWRkUm91bmRlZFJlY3RQYXRoIiwiTElORV9IRUlHSFQiLCJGT05UX1NUWUxFIiwidG9MaW5lSGVpZ2h0IiwiX3JlYWRWYWx1ZVRvUHJvcHMiLCJvYmpQcm9wcyIsInJlYWQiLCJ0b1RSQkwiLCJ0b1RSQkxDb3JuZXJzIiwidG9QYWRkaW5nIiwidG9Gb250IiwiaW5wdXRzIiwiY2FjaGVhYmxlIiwiX2FkZEdyYWNlIiwibWlubWF4Iiwia2VlcFplcm8iLCJjcmVhdGVDb250ZXh0IiwicGFyZW50Q29udGV4dCIsIl9jcmVhdGVSZXNvbHZlciIsInJvb3RTY29wZXMiLCJfcmVzb2x2ZSIsIl9zY29wZXMiLCJfcm9vdFNjb3BlcyIsIl9rZXlzIiwiX2NhY2hlZCIsInJlYWRLZXkiLCJuZWVkc1N1YlJlc29sdmVyIiwiY3JlYXRlU3ViUmVzb2x2ZXIiLCJfcmVzb2x2ZVdpdGhQcmVmaXhlcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldEtleXNGcm9tQWxsU2NvcGVzIiwic3RvcmFnZSIsIl9zdG9yYWdlIiwiX2F0dGFjaENvbnRleHQiLCJzdWJQcm94eSIsIl9zdWJQcm94eSIsIl9yZXNvbHZlU2NyaXB0YWJsZSIsIl9yZXNvbHZlQXJyYXkiLCJfcmVzb2x2ZVdpdGhDb250ZXh0IiwiX2FsbEtleXMiLCJyZXNvbHZlRmFsbGJhY2siLCJnZXRTY29wZSIsImFkZFNjb3BlcyIsInBhcmVudFNjb3BlcyIsInBhcmVudEZhbGxiYWNrIiwiYWxsU2NvcGVzIiwiYWRkU2NvcGVzRnJvbUtleSIsInN1YkdldFRhcmdldCIsInJlc29sdmVLZXlzRnJvbUFsbFNjb3BlcyIsIl9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZSIsIkVQU0lMT04iLCJnZXRQb2ludCIsImdldFZhbHVlQXhpcyIsInNwbGluZUN1cnZlIiwibWlkZGxlUG9pbnQiLCJhZnRlclBvaW50IiwiZDAxIiwiZDEyIiwiczAxIiwiczEyIiwiZmEiLCJmYiIsInNwbGluZUN1cnZlTW9ub3RvbmUiLCJ2YWx1ZUF4aXMiLCJwb2ludHNMZW4iLCJkZWx0YUsiLCJtSyIsInBvaW50QmVmb3JlIiwicG9pbnRDdXJyZW50IiwicG9pbnRBZnRlciIsInNsb3BlRGVsdGEiLCJhbHBoYUsiLCJiZXRhSyIsInRhdUsiLCJzcXVhcmVkTWFnbml0dWRlIiwibW9ub3RvbmVBZGp1c3QiLCJtb25vdG9uZUNvbXB1dGUiLCJjYXBDb250cm9sUG9pbnQiLCJfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyIsImNvbnRyb2xQb2ludHMiLCJpbkFyZWEiLCJpbkFyZWFQcmV2IiwiaW5BcmVhTmV4dCIsIl9pc0RvbVN1cHBvcnRlZCIsIl9nZXRQYXJlbnROb2RlIiwiZG9tTm9kZSIsInBhcnNlTWF4U3R5bGUiLCJwYXJlbnRQcm9wZXJ0eSIsInZhbHVlSW5QaXhlbHMiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0UG9zaXRpb25lZFN0eWxlIiwic3VmZml4IiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsImV2dCIsImJvcmRlckJveCIsInBhZGRpbmdzIiwiYm9yZGVycyIsInRvdWNoZXMiLCJ1c2VPZmZzZXRQb3MiLCJjbGllbnRYIiwiY2xpZW50WSIsImdldENhbnZhc1Bvc2l0aW9uIiwicm91bmQxIiwiYmJXaWR0aCIsImJiSGVpZ2h0IiwiY29udGFpbmVyU2l6ZSIsImNvbnRhaW5lclN0eWxlIiwiY29udGFpbmVyQm9yZGVyIiwiY29udGFpbmVyUGFkZGluZyIsImNsaWVudEhlaWdodCIsImdldENvbnRhaW5lclNpemUiLCJyZXRpbmFTY2FsZSIsImZvcmNlUmF0aW8iLCJmb3JjZVN0eWxlIiwicGl4ZWxSYXRpbyIsImRldmljZUhlaWdodCIsImRldmljZVdpZHRoIiwic2V0VHJhbnNmb3JtIiwic3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyIsInBhc3NpdmVTdXBwb3J0ZWQiLCJyZWFkVXNlZFNpemUiLCJfcG9pbnRJbkxpbmUiLCJfc3RlcHBlZEludGVycG9sYXRpb24iLCJfYmV6aWVySW50ZXJwb2xhdGlvbiIsImNwMSIsImNwMiIsImludGxDYWNoZSIsImZvcm1hdE51bWJlciIsIkludGwiLCJOdW1iZXJGb3JtYXQiLCJnZXROdW1iZXJGb3JtYXQiLCJnZXRSdGxBZGFwdGVyIiwicmVjdFgiLCJnZXRSaWdodFRvTGVmdEFkYXB0ZXIiLCJfaXRlbVdpZHRoIiwib3ZlcnJpZGVUZXh0RGlyZWN0aW9uIiwiZGlyZWN0aW9uIiwiZ2V0UHJvcGVydHlQcmlvcml0eSIsInByZXZUZXh0RGlyZWN0aW9uIiwicmVzdG9yZVRleHREaXJlY3Rpb24iLCJwcm9wZXJ0eUZuIiwiYmV0d2VlbiIsImNvbXBhcmUiLCJub3JtYWxpemVTZWdtZW50IiwiX2JvdW5kU2VnbWVudCIsInN0YXJ0Qm91bmQiLCJlbmRCb3VuZCIsImdldFNlZ21lbnQiLCJpbnNpZGUiLCJzdWJTdGFydCIsIl9ib3VuZFNlZ21lbnRzIiwiX2NvbXB1dGVTZWdtZW50cyIsInNlZ21lbnRPcHRpb25zIiwiZmluZFN0YXJ0QW5kRW5kIiwic3BsaXRCeVN0eWxlcyIsInNvbGlkU2VnbWVudHMiLCJjaGFydENvbnRleHQiLCJiYXNlU3R5bGUiLCJyZWFkU3R5bGUiLCJwcmV2U3R5bGUiLCJhZGRTdHlsZSIsInN0IiwicDAiLCJwMERhdGFJbmRleCIsInAxRGF0YUluZGV4Iiwic3R5bGVDaGFuZ2VkIiwiZG9TcGxpdEJ5U3R5bGVzIiwiaXNCcm93c2VyIiwiaXNFU01vZHVsZSIsImFwcGx5VG9QYXJhbXMiLCJuZXdQYXJhbXMiLCJUUkFJTElOR19TTEFTSF9SRSIsInBhcnNlVVJMIiwicGFyc2VRdWVyeSIsImN1cnJlbnRMb2NhdGlvbiIsInF1ZXJ5Iiwic2VhcmNoU3RyaW5nIiwiaGFzaCIsImhhc2hQb3MiLCJzZWFyY2hQb3MiLCJmcm9tU2VnbWVudHMiLCJ0b1NlZ21lbnRzIiwidG9Qb3NpdGlvbiIsInJlc29sdmVSZWxhdGl2ZVBhdGgiLCJmdWxsUGF0aCIsInN0cmlwQmFzZSIsInBhdGhuYW1lIiwiaXNTYW1lUm91dGVMb2NhdGlvbiIsInN0cmluZ2lmeVF1ZXJ5IiwiYUxhc3RJbmRleCIsIm1hdGNoZWQiLCJiTGFzdEluZGV4IiwiaXNTYW1lUm91dGVSZWNvcmQiLCJpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zIiwiYWxpYXNPZiIsImlzU2FtZVJvdXRlTG9jYXRpb25QYXJhbXNWYWx1ZSIsImlzRXF1aXZhbGVudEFycmF5IiwiTmF2aWdhdGlvblR5cGUiLCJOYXZpZ2F0aW9uRGlyZWN0aW9uIiwibm9ybWFsaXplQmFzZSIsImJhc2VFbCIsIkJFRk9SRV9IQVNIX1JFIiwiY3JlYXRlSHJlZiIsImNvbXB1dGVTY3JvbGxQb3NpdGlvbiIsInBhZ2VYT2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJnZXRTY3JvbGxLZXkiLCJzY3JvbGxQb3NpdGlvbnMiLCJjcmVhdGVCYXNlTG9jYXRpb24iLCJwcm90b2NvbCIsImNyZWF0ZUN1cnJlbnRMb2NhdGlvbiIsInNlYXJjaCIsInNsaWNlUG9zIiwicGF0aEZyb21IYXNoIiwiYnVpbGRTdGF0ZSIsImJhY2siLCJmb3J3YXJkIiwicmVwbGFjZWQiLCJjb21wdXRlU2Nyb2xsIiwic2Nyb2xsIiwiaGlzdG9yeU5hdmlnYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJjaGFuZ2VMb2NhdGlvbiIsImhhc2hJbmRleCIsImN1cnJlbnRTdGF0ZSIsInVzZUhpc3RvcnlTdGF0ZU5hdmlnYXRpb24iLCJoaXN0b3J5TGlzdGVuZXJzIiwidGVhcmRvd25zIiwicGF1c2VTdGF0ZSIsInBvcFN0YXRlSGFuZGxlciIsImZyb21TdGF0ZSIsInVua25vd24iLCJiZWZvcmVVbmxvYWRMaXN0ZW5lciIsInBhdXNlTGlzdGVuZXJzIiwidGVhcmRvd24iLCJ1c2VIaXN0b3J5TGlzdGVuZXJzIiwicm91dGVySGlzdG9yeSIsImdvIiwidHJpZ2dlckxpc3RlbmVycyIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJzZXRMb2NhdGlvbiIsInNob3VsZFRyaWdnZXIiLCJjcmVhdGVXZWJIYXNoSGlzdG9yeSIsImlzUm91dGVOYW1lIiwiU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRCIsInJlZGlyZWN0ZWRGcm9tIiwiTmF2aWdhdGlvbkZhaWx1cmVTeW1ib2wiLCJOYXZpZ2F0aW9uRmFpbHVyZVR5cGUiLCJFcnJvclR5cGVNZXNzYWdlcyIsInByb3BlcnRpZXNUb0xvZyIsInN0cmluZ2lmeVJvdXRlIiwiY3JlYXRlUm91dGVyRXJyb3IiLCJpc05hdmlnYXRpb25GYWlsdXJlIiwiQkFTRV9QQVJBTV9QQVRURVJOIiwiQkFTRV9QQVRIX1BBUlNFUl9PUFRJT05TIiwic2Vuc2l0aXZlIiwiUkVHRVhfQ0hBUlNfUkUiLCJjb21wYXJlU2NvcmVBcnJheSIsImNvbXBhcmVQYXRoUGFyc2VyU2NvcmUiLCJhU2NvcmUiLCJzY29yZSIsImJTY29yZSIsImlzTGFzdFNjb3JlTmVnYXRpdmUiLCJST09UX1RPS0VOIiwiVkFMSURfUEFSQU1fUkUiLCJjcmVhdGVSb3V0ZVJlY29yZE1hdGNoZXIiLCJleHRyYU9wdGlvbnMiLCJzZWdtZW50U2NvcmVzIiwidG9rZW5JbmRleCIsInRva2VuIiwic3ViU2VnbWVudFNjb3JlIiwicmVwZWF0YWJsZSIsIm9wdGlvbmFsIiwicmVnZXhwIiwic3ViUGF0dGVybiIsImF2b2lkRHVwbGljYXRlZFNsYXNoIiwicGFyYW0iLCJ0b2tlbnNUb1BhcnNlciIsImNyYXNoIiwicHJldmlvdXNTdGF0ZSIsInRva2VucyIsImZpbmFsaXplU2VnbWVudCIsImNoYXIiLCJjdXN0b21SZSIsImNvbnN1bWVCdWZmZXIiLCJhZGRDaGFyVG9CdWZmZXIiLCJ0b2tlbml6ZVBhdGgiLCJleGlzdGluZ0tleXMiLCJtYXRjaGVyIiwiY3JlYXRlUm91dGVyTWF0Y2hlciIsImdsb2JhbE9wdGlvbnMiLCJtYXRjaGVycyIsIm1hdGNoZXJNYXAiLCJhZGRSb3V0ZSIsIm9yaWdpbmFsUmVjb3JkIiwiaXNSb290QWRkIiwibWFpbk5vcm1hbGl6ZWRSZWNvcmQiLCJyZWRpcmVjdCIsIm5vcm1hbGl6ZVJlY29yZFByb3BzIiwibGVhdmVHdWFyZHMiLCJ1cGRhdGVHdWFyZHMiLCJlbnRlckNhbGxiYWNrcyIsIm5vcm1hbGl6ZVJvdXRlUmVjb3JkIiwiY2hlY2tDaGlsZE1pc3NpbmdOYW1lV2l0aEVtcHR5UGF0aCIsIm5vcm1hbGl6ZWRSZWNvcmRzIiwiYWxpYXNlcyIsIm9yaWdpbmFsTWF0Y2hlciIsIm5vcm1hbGl6ZWRSZWNvcmQiLCJwYXJlbnRQYXRoIiwiY29ubmVjdGluZ1NsYXNoIiwiY2hlY2tNaXNzaW5nUGFyYW1zSW5BYnNvbHV0ZVBhdGgiLCJjaGVja1NhbWVQYXJhbXMiLCJpc0FsaWFzUmVjb3JkIiwicmVtb3ZlUm91dGUiLCJpbnNlcnRNYXRjaGVyIiwibWF0Y2hlclJlZiIsImlzUmVjb3JkQ2hpbGRPZiIsImludmFsaWRQYXJhbXMiLCJwYXJhbU5hbWUiLCJwYXJhbXNGcm9tTG9jYXRpb24iLCJwYXJlbnRNYXRjaGVyIiwibWVyZ2VNZXRhRmllbGRzIiwiZ2V0Um91dGVzIiwiZ2V0UmVjb3JkTWF0Y2hlciIsInByb3BzT2JqZWN0IiwicGFydGlhbE9wdGlvbnMiLCJpc1NhbWVQYXJhbSIsIkhBU0hfUkUiLCJBTVBFUlNBTkRfUkUiLCJTTEFTSF9SRSIsIkVRVUFMX1JFIiwiSU1fUkUiLCJQTFVTX1JFIiwiRU5DX0JSQUNLRVRfT1BFTl9SRSIsIkVOQ19CUkFDS0VUX0NMT1NFX1JFIiwiRU5DX0NBUkVUX1JFIiwiRU5DX0JBQ0tUSUNLX1JFIiwiRU5DX0NVUkxZX09QRU5fUkUiLCJFTkNfUElQRV9SRSIsIkVOQ19DVVJMWV9DTE9TRV9SRSIsIkVOQ19TUEFDRV9SRSIsImNvbW1vbkVuY29kZSIsImVuY29kZVVSSSIsImVuY29kZVF1ZXJ5VmFsdWUiLCJlbmNvZGVQYXJhbSIsImVuY29kZVBhdGgiLCJkZWNvZGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzZWFyY2hQYXJhbXMiLCJzZWFyY2hQYXJhbSIsImVxUG9zIiwibm9ybWFsaXplUXVlcnkiLCJub3JtYWxpemVkUXVlcnkiLCJtYXRjaGVkUm91dGVLZXkiLCJ2aWV3RGVwdGhLZXkiLCJyb3V0ZXJLZXkiLCJyb3V0ZUxvY2F0aW9uS2V5Iiwicm91dGVyVmlld0xvY2F0aW9uS2V5IiwidXNlQ2FsbGJhY2tzIiwicmVnaXN0ZXJHdWFyZCIsInJlbW92ZUZyb21MaXN0Iiwib25CZWZvcmVSb3V0ZUxlYXZlIiwibGVhdmVHdWFyZCIsImFjdGl2ZVJlY29yZCIsIm9uQmVmb3JlUm91dGVVcGRhdGUiLCJ1cGRhdGVHdWFyZCIsImd1YXJkVG9Qcm9taXNlRm4iLCJlbnRlckNhbGxiYWNrQXJyYXkiLCJndWFyZFJldHVybiIsIl9jYWxsZWQiLCJjYW5Pbmx5QmVDYWxsZWRPbmNlIiwiZ3VhcmRDYWxsIiwicmVzb2x2ZWRWYWx1ZSIsImV4dHJhY3RDb21wb25lbnRzR3VhcmRzIiwiZ3VhcmRUeXBlIiwiZ3VhcmRzIiwicmF3Q29tcG9uZW50IiwicHJvbWlzZSIsIl9fd2FybmVkRGVmaW5lQXN5bmMiLCJjb21wb25lbnRQcm9taXNlIiwicmVzb2x2ZWRDb21wb25lbnQiLCJsb2FkUm91dGVMb2NhdGlvbiIsInVzZUxpbmsiLCJyb3V0ZXIiLCJjdXJyZW50Um91dGUiLCJhY3RpdmVSZWNvcmRJbmRleCIsInJvdXRlTWF0Y2hlZCIsImN1cnJlbnRNYXRjaGVkIiwicGFyZW50UmVjb3JkUGF0aCIsImdldE9yaWdpbmFsUGF0aCIsImlzQWN0aXZlIiwiaW5uZXJWYWx1ZSIsIm91dGVyVmFsdWUiLCJpbmNsdWRlc1BhcmFtcyIsImlzRXhhY3RBY3RpdmUiLCJsaW5rQ29udGV4dERldnRvb2xzIiwiX192cmxfZGV2dG9vbHMiLCJuYXZpZ2F0ZSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJndWFyZEV2ZW50IiwiUm91dGVyTGluayIsImNvbXBhdENvbmZpZyIsIk1PREUiLCJhY3RpdmVDbGFzcyIsImV4YWN0QWN0aXZlQ2xhc3MiLCJhcmlhQ3VycmVudFZhbHVlIiwibGluayIsImVsQ2xhc3MiLCJnZXRMaW5rQ2xhc3MiLCJsaW5rQWN0aXZlQ2xhc3MiLCJsaW5rRXhhY3RBY3RpdmVDbGFzcyIsInByb3BDbGFzcyIsImdsb2JhbENsYXNzIiwiZGVmYXVsdENsYXNzIiwic2xvdENvbnRlbnQiLCJSb3V0ZXJWaWV3IiwicGFyZW50TmFtZSIsIndhcm5EZXByZWNhdGVkVXNhZ2UiLCJpbmplY3RlZFJvdXRlIiwicm91dGVUb0Rpc3BsYXkiLCJpbmplY3RlZERlcHRoIiwiaW5pdGlhbERlcHRoIiwibWF0Y2hlZFJvdXRlIiwibWF0Y2hlZFJvdXRlUmVmIiwidmlld1JlZiIsIm9sZEluc3RhbmNlIiwib2xkTmFtZSIsImN1cnJlbnROYW1lIiwiVmlld0NvbXBvbmVudCIsInJvdXRlUHJvcHNPcHRpb24iLCJyb3V0ZVByb3BzIiwiX192cnZfZGV2dG9vbHMiLCJmb3JtYXRSb3V0ZUxvY2F0aW9uIiwicm91dGVMb2NhdGlvbiIsIm9taXQiLCJyZWFkT25seSIsImZvcm1hdERpc3BsYXkiLCJyb3V0ZXJJZCIsIl9faGFzRGV2dG9vbHMiLCJpbnNwZWN0Q29tcG9uZW50IiwiaW5zdGFuY2VEYXRhIiwidmlzaXRDb21wb25lbnRUcmVlIiwidHJlZU5vZGUiLCJjb21wb25lbnRJbnN0YW5jZSIsIlBJTktfNTAwIiwiX19kZXZ0b29sc0FwaSIsImRldnRvb2xzRGF0YSIsIk9SQU5HRV80MDAiLCJMSU1FXzUwMCIsIkJMVUVfNjAwIiwicmVmcmVzaFJvdXRlc1ZpZXciLCJyb3V0ZXJJbnNwZWN0b3JJZCIsIm5hdmlnYXRpb25zTGF5ZXJJZCIsImxvZ1R5cGUiLCJfX25hdmlnYXRpb25JZCIsIm5hdmlnYXRpb25JZCIsImJlZm9yZUVhY2giLCJhZnRlckVhY2giLCJmYWlsdXJlIiwiYWN0aXZlUm91dGVzUGF5bG9hZCIsInJlc2V0TWF0Y2hTdGF0ZU9uUm91dGVSZWNvcmQiLCJpc1JvdXRlTWF0Y2hpbmciLCJtYXJrUm91dGVSZWNvcmRBY3RpdmUiLCJmb3JtYXRSb3V0ZVJlY29yZEZvckluc3BlY3RvciIsIl9fdmRfaWQiLCJmb3JtYXRSb3V0ZVJlY29yZE1hdGNoZXJGb3JTdGF0ZUluc3BlY3RvciIsImZpZWxkcyIsIm1vZGlmaWVyRm9yS2V5IiwiX192ZF9tYXRjaCIsIl9fdmRfZXhhY3RBY3RpdmUiLCJfX3ZkX2FjdGl2ZSIsInJvdXRlUmVjb3JkSWQiLCJFWFRSQUNUX1JFR0VYUF9SRSIsImNoaWxkUm91dGUiLCJkZWNvZGVkUGF0aCIsInBhcnNlUXVlcnkkMSIsInN0cmluZ2lmeVF1ZXJ5JDEiLCJiZWZvcmVHdWFyZHMiLCJiZWZvcmVSZXNvbHZlR3VhcmRzIiwiYWZ0ZXJHdWFyZHMiLCJwZW5kaW5nTG9jYXRpb24iLCJzY3JvbGxCZWhhdmlvciIsInNjcm9sbFJlc3RvcmF0aW9uIiwibm9ybWFsaXplUGFyYW1zIiwicGFyYW1WYWx1ZSIsImVuY29kZVBhcmFtcyIsImRlY29kZVBhcmFtcyIsInJhd0xvY2F0aW9uIiwibG9jYXRpb25Ob3JtYWxpemVkIiwibWF0Y2hlckxvY2F0aW9uIiwidGFyZ2V0UGFyYW1zIiwic3RyaW5naWZ5VVJMIiwibG9jYXRpb25Bc09iamVjdCIsImNoZWNrQ2FuY2VsZWROYXZpZ2F0aW9uIiwicHVzaFdpdGhSZWRpcmVjdCIsImhhbmRsZVJlZGlyZWN0UmVjb3JkIiwibGFzdE1hdGNoZWQiLCJuZXdUYXJnZXRMb2NhdGlvbiIsInRhcmdldExvY2F0aW9uIiwiZm9yY2UiLCJzaG91bGRSZWRpcmVjdCIsInRvTG9jYXRpb24iLCJoYW5kbGVTY3JvbGwiLCJtYXJrQXNSZWFkeSIsInRyaWdnZXJFcnJvciIsIl9jb3VudCIsImZpbmFsaXplTmF2aWdhdGlvbiIsInRyaWdnZXJBZnRlckVhY2giLCJjaGVja0NhbmNlbGVkTmF2aWdhdGlvbkFuZFJlamVjdCIsImxlYXZpbmdSZWNvcmRzIiwidXBkYXRpbmdSZWNvcmRzIiwiZW50ZXJpbmdSZWNvcmRzIiwicmVjb3JkRnJvbSIsInJlY29yZFRvIiwiZXh0cmFjdENoYW5naW5nUmVjb3JkcyIsImNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrIiwicnVuR3VhcmRRdWV1ZSIsImlzUHVzaCIsImlzRmlyc3ROYXZpZ2F0aW9uIiwicmVtb3ZlSGlzdG9yeUxpc3RlbmVyIiwicmVhZHkiLCJyZWFkeUhhbmRsZXJzIiwiZXJyb3JIYW5kbGVycyIsImxpc3RlbmluZyIsInNjcm9sbFBvc2l0aW9uIiwiZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbiIsInNjcm9sbFRvT3B0aW9ucyIsInBvc2l0aW9uRWwiLCJpc0lkU2VsZWN0b3IiLCJmb3VuZEVsIiwiZG9jUmVjdCIsImRvY3VtZW50RWxlbWVudCIsImVsUmVjdCIsImJlaGF2aW9yIiwiZ2V0RWxlbWVudFBvc2l0aW9uIiwic2Nyb2xsVG8iLCJzY3JvbGxUb1Bvc2l0aW9uIiwic3RhcnRlZCIsImluc3RhbGxlZEFwcHMiLCJwYXJlbnRPclJvdXRlIiwicmVjb3JkTWF0Y2hlciIsImhhc1JvdXRlIiwicm91dGVNYXRjaGVyIiwiYmVmb3JlUmVzb2x2ZSIsImlzUmVhZHkiLCIkcm91dGVyIiwicmVhY3RpdmVSb3V0ZSIsInVubW91bnRBcHAiLCJ1c2VSb3V0ZXIiLCJ1c2VSb3V0ZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwiQXBwIiwiaTE4bk1peGluIiwid3BFbWFpbGVySG9va3MiLCJjcmVhdGVIb29rcyJdLCJzb3VyY2VSb290IjoiIn0=